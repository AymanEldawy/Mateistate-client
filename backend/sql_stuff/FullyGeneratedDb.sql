USE [master]
GO
/****** Object:  Database [MatiEstate]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE DATABASE [MatiEstate]
 CONTAINMENT = NONE
 ON  PRIMARY 
( NAME = N'MatiEstate', FILENAME = N'E:\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\MatiEstate.mdf' , SIZE = 73728KB , MAXSIZE = UNLIMITED, FILEGROWTH = 65536KB )
 LOG ON 
( NAME = N'MatiEstate_log', FILENAME = N'E:\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\MatiEstate_log.ldf' , SIZE = 73728KB , MAXSIZE = 2048GB , FILEGROWTH = 65536KB )
 WITH CATALOG_COLLATION = DATABASE_DEFAULT
GO
ALTER DATABASE [MatiEstate] SET COMPATIBILITY_LEVEL = 150
GO
IF (1 = FULLTEXTSERVICEPROPERTY('IsFullTextInstalled'))
begin
EXEC [MatiEstate].[dbo].[sp_fulltext_database] @action = 'enable'
end
GO
ALTER DATABASE [MatiEstate] SET ANSI_NULL_DEFAULT OFF 
GO
ALTER DATABASE [MatiEstate] SET ANSI_NULLS OFF 
GO
ALTER DATABASE [MatiEstate] SET ANSI_PADDING OFF 
GO
ALTER DATABASE [MatiEstate] SET ANSI_WARNINGS OFF 
GO
ALTER DATABASE [MatiEstate] SET ARITHABORT OFF 
GO
ALTER DATABASE [MatiEstate] SET AUTO_CLOSE ON 
GO
ALTER DATABASE [MatiEstate] SET AUTO_SHRINK OFF 
GO
ALTER DATABASE [MatiEstate] SET AUTO_UPDATE_STATISTICS ON 
GO
ALTER DATABASE [MatiEstate] SET CURSOR_CLOSE_ON_COMMIT OFF 
GO
ALTER DATABASE [MatiEstate] SET CURSOR_DEFAULT  GLOBAL 
GO
ALTER DATABASE [MatiEstate] SET CONCAT_NULL_YIELDS_NULL OFF 
GO
ALTER DATABASE [MatiEstate] SET NUMERIC_ROUNDABORT OFF 
GO
ALTER DATABASE [MatiEstate] SET QUOTED_IDENTIFIER OFF 
GO
ALTER DATABASE [MatiEstate] SET RECURSIVE_TRIGGERS OFF 
GO
ALTER DATABASE [MatiEstate] SET  ENABLE_BROKER 
GO
ALTER DATABASE [MatiEstate] SET AUTO_UPDATE_STATISTICS_ASYNC OFF 
GO
ALTER DATABASE [MatiEstate] SET DATE_CORRELATION_OPTIMIZATION OFF 
GO
ALTER DATABASE [MatiEstate] SET TRUSTWORTHY OFF 
GO
ALTER DATABASE [MatiEstate] SET ALLOW_SNAPSHOT_ISOLATION OFF 
GO
ALTER DATABASE [MatiEstate] SET PARAMETERIZATION SIMPLE 
GO
ALTER DATABASE [MatiEstate] SET READ_COMMITTED_SNAPSHOT OFF 
GO
ALTER DATABASE [MatiEstate] SET HONOR_BROKER_PRIORITY OFF 
GO
ALTER DATABASE [MatiEstate] SET RECOVERY SIMPLE 
GO
ALTER DATABASE [MatiEstate] SET  MULTI_USER 
GO
ALTER DATABASE [MatiEstate] SET PAGE_VERIFY CHECKSUM  
GO
ALTER DATABASE [MatiEstate] SET DB_CHAINING OFF 
GO
ALTER DATABASE [MatiEstate] SET FILESTREAM( NON_TRANSACTED_ACCESS = OFF ) 
GO
ALTER DATABASE [MatiEstate] SET TARGET_RECOVERY_TIME = 60 SECONDS 
GO
ALTER DATABASE [MatiEstate] SET DELAYED_DURABILITY = DISABLED 
GO
ALTER DATABASE [MatiEstate] SET ACCELERATED_DATABASE_RECOVERY = OFF  
GO
ALTER DATABASE [MatiEstate] SET QUERY_STORE = OFF
GO
USE [MatiEstate]
GO
/****** Object:  UserDefinedFunction [dbo].[FnAddDate]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE function [dbo].[FnAddDate] 
(
	@Kind varchar(2) = 'm', 
	@inc int = 0, 
	@Date Datetime = '2/10/2016'
)
RETURNS datetime
  
AS
BEGIN
	Declare @RDate Datetime

	Declare @Hijridate int
	Select 
		@Hijridate = Value
	From
		dmd_Const where vName = 'Hijridate'

	if @Hijridate = 1
	begin
		if LOWER(@Kind) = 'm'
		Set @RDate = dbo.fnIncMonthHijriDate(@Date, @inc)
		if LOWER(@Kind) = 'y'
		Set @RDate = dbo.fnIncYearHijriDate(@Date, @inc)
	end
	else
	begin
		if LOWER(@Kind) = 'm'
		Set @RDate = dateadd(m ,@inc, @Date)
		if LOWER(@Kind) = 'y'
		Set @RDate = dateadd(y ,@inc, @Date)
	end

	if LOWER(@Kind) = 'wk'
	Set @RDate = dateadd(wk ,@inc, @Date)
		
	return @RDate

END

GO
/****** Object:  UserDefinedFunction [dbo].[FnDate]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[FnDate] (@Date Datetime)
RETURNS Varchar(256)
  AS
BEGIN
	Declare @R Varchar(256)
			,@Y Varchar(256)
			,@m Varchar(256)
			,@d Varchar(256)

	Set @R = ''

	Declare @Hijridate int
	Select 
		@Hijridate = Value
	From
		dmd_Const where vName = 'Hijridate'

	if @Hijridate = 1
	begin
		Declare @FromatDate Varchar(256)
		Set @FromatDate = (Select value From DMD_const where VName = 'DateFormat')
		if isNull(@FromatDate,'') = '' set @FromatDate = 'yyyy/mm/dd'
		RETURN dbo.FnGregToHijriDate(@Date,@FromatDate)
	end
	else
	begin
		Set @R = Convert(Varchar(256), @Date , 101)
	
		Set @Y = SUBSTRING (@R, 7, 4)
		Set @d = Replace(SUBSTRING (@R, 4, 2),' ','0')
		Set @m = SUBSTRING (@R, 1, 2)
	end

	Set @d = Replace(@d,' ','0')
	
	if @Y = '1900'
	Set @R = ''
	else
	Set @R = @y+'/'+@m+'/'+@d
	
	return @R
END

GO
/****** Object:  UserDefinedFunction [dbo].[fnDateIsNull]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Function [dbo].[fnDateIsNull] (@Date DateTime ) returns int
  
begin

	declare @R int
	
	Select @R = Case 
					when @Date = '1/1/1900' then 0 
					when @Date = '12/30/1899' then 0 
					else 1 
				end

	return	@R

End

GO
/****** Object:  UserDefinedFunction [dbo].[fnDateOnly]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Function [dbo].[fnDateOnly](@Date DateTime)
returns DateTime
  
as
begin
	return Cast(Cast(DatePart(Year, @Date) as Varchar(10)) +'/'+ Cast(DatePart(Month, @Date) as Varchar(10))+'/'+ Cast(DatePart(Day, @Date) as Varchar(10)) as Datetime)
end


GO
/****** Object:  UserDefinedFunction [dbo].[FnDayDiff]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Function [dbo].[FnDayDiff] (@D1 DateTime, @D2 DateTime, @RD1 DateTime, @RD2 DateTime )
returns int
  
begin

	Declare 
		@Date1 DateTime
		,@Date2 DateTime
	
	if @RD1 > @D1 
		Set @Date1 = @RD1
	else
		Set @Date1 = @D1

	if @RD2 > @D2
		Set @Date2 = @D2
	else
		Set @Date2 = @RD2

	declare @R int
	Set @R = DateDiff(Day, @Date1, @Date2)
	if @R < 0 set @R = 0
	return	@R

End

GO
/****** Object:  UserDefinedFunction [dbo].[fnDaysBetween]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[fnDaysBetween] (@StartDate Datetime, @endDate Datetime)
RETURNS Varchar(256)
  AS
BEGIN
	return Datediff(day, @StartDate, @endDate )+1
END

GO
/****** Object:  UserDefinedFunction [dbo].[fnDecodeHijriDatetoGergDate]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[fnDecodeHijriDatetoGergDate] (@Year int, @Month int, @Day int)
RETURNS Datetime
  
AS
BEGIN
	Declare @R Datetime

	Select Top 1 
		@R = Date + @Day -1
	from 
		[HjrConfig] H
	where
		hjrMonth = @Month
		and hjrYear = @year
	Order By
		[hjrMonth]

	
	if @R is Null
	begin
		Declare @DayCount int, @S Varchar(256)
		Declare @Gdate Datetime Set @Gdate = dbo.fnDateonly(GETDATE())
		Declare @Hy int
		Declare @Hm int
		Declare @Hd int

		Declare @y int 
		Declare @m int 
		Declare @d int 
		
		Set @y = DatePart(Year, @Gdate)
		Set @m = DatePart(Month, @Gdate)
		Set @d = DatePart(Day, @Gdate)
		
		Set @S = Convert(Varchar(256), @Gdate , 131)
	
		Set @Hy = SUBSTRING (@S, 7, 4)
		Set @Hm = SUBSTRING (@S, 4, 2)
		Set @Hd = SUBSTRING (@S, 1, 2)

		Set @hd = Replace(@hd,' ','0')
		Set @hm = dbo.FnFormatNumber(@hm, 2)
		Set @hd = dbo.FnFormatNumber(@hd, 2)
			 
		Declare @IntGDate int, @intHdate int
		Set @intHdate = Cast(dbo.FnFormatNumber(@hy, 4)+dbo.FnFormatNumber(@hm, 2)+dbo.FnFormatNumber(@hd, 2) as int)
		Set @IntGDate = Cast(dbo.FnFormatNumber(@Year, 4)+dbo.FnFormatNumber(@Month, 2)+dbo.FnFormatNumber(@Day, 2) as int)	
		
		Declare @CC int
		Set @CC = @IntGDate - @intHdate + 2
		Set @CC = abs(@CC) + 2
		
		if @CC > 21
		begin
			if @IntGDate > @intHdate
			Set @Gdate = @Gdate + (ABS(@hy - @Year) * 354) + (ABS(@Hm - @Month ) *28) + (ABS(@Hd - @Day ) )- 20
			else
			Set @Gdate = @Gdate - (ABS(@hy - @Year) * 354) + (ABS(@Hm - @Month ) *28) + (ABS(@Hd - @Day ) )- 20
			
			Set @CC = 2 * (ABS(@hy - @Year) * 354) + (ABS(@Hm - @Month ) *28) + (ABS(@Hd - @Day ) )
		end
		
		
		Declare @I int
		Set @I = 0
		while (@intHdate <> @IntGDate)  and (@i < 100000)--and (@i < @CC) --and (@i < 370)
		begin
			Set @i = @I + 1
			
			if @IntGDate > @intHdate
			Set @Gdate = @Gdate + 1
			else
			Set @Gdate = @Gdate - 1

			Set @y = DatePart(Year, @Gdate)
			Set @m = DatePart(Month, @Gdate)
			Set @d = DatePart(Day, @Gdate)
			
			Set @S = Convert(Varchar(256), @Gdate , 131)
		
			Set @Hy = SUBSTRING (@S, 7, 4)
			Set @Hm = SUBSTRING (@S, 4, 2)
			Set @Hd = SUBSTRING (@S, 1, 2)

			Set @hd = Replace(@hd,' ','0')
			Set @hm = dbo.FnFormatNumber(@hm, 2)
			Set @hd = dbo.FnFormatNumber(@hd, 2)

			Set @intHdate = Cast(dbo.FnFormatNumber(@hy, 4)+dbo.FnFormatNumber(@hm, 2)+dbo.FnFormatNumber(@hd, 2) as int)
			Set @IntGDate = Cast(dbo.FnFormatNumber(@Year, 4)+dbo.FnFormatNumber(@Month, 2)+dbo.FnFormatNumber(@Day, 2) as int)	
		end
		
		Set @R = @Gdate
	end
	RETURN dbo.fnDateonly(@R)

END

GO
/****** Object:  UserDefinedFunction [dbo].[FnDEntry]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Function [dbo].[FnDEntry] (@CurrencyGuid uniqueidentifier, @CurrencyVal Float)
returns @Tbl Table (
						[Number] int,
						[ParentGuid]  [uniqueidentifier] ,
						[AcGuid] [uniqueidentifier] ,
						[Debit] [Float],
						[Credit] [Float],
						[CurrencyGuid] [uniqueidentifier]  ,
						[CurrencyVal] Float,
						[ObverseAcGuid]  [uniqueidentifier] ,
						[CostGuid] [uniqueidentifier] ,
						[Note] Varchar(256),
						[isvisible] Bit
					)
  
as
begin
	if @CurrencyVal = 0
	Set @CurrencyVal = 1
	Insert Into @Tbl
	Select
		[Number],
		[ParentGuid],
		[AcGuid],
		Case when [CurrencyGuid] = @CurrencyGuid then [Debit] else [Debit] * [CurrencyVal] / @CurrencyVal end As [Debit],
		Case when [CurrencyGuid] = @CurrencyGuid then [Credit] else [Credit] * [CurrencyVal] / @CurrencyVal end As [Credit],
		[CurrencyGuid],
		[CurrencyVal],
		[ObverseAcGuid],
		[CostGuid],
		[Note],
		[isvisible]
	From
		[DEntry]
	Return
end

GO
/****** Object:  UserDefinedFunction [dbo].[fnEncodeDate]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Function [dbo].[fnEncodeDate](@Year int, @Month int, @Day int)
returns DateTime
  
as
begin
	if @Year = 0 
	Set @Year = DATEPART(YEAR, GETDATE())
	
	if @Month = 0 
	Set @Month = DATEPART(Month, GETDATE())

	if @Day = 0 
	Set @Day = DATEPART(Day, GETDATE())

	return Cast(Cast(@year as Varchar(10)) +'/'+ Cast(@Month as Varchar(10))+'/'+ Cast(@Day as Varchar(10)) as Datetime)
end


GO
/****** Object:  UserDefinedFunction [dbo].[FnFloatTostr]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[FnFloatTostr] (@Number Float)
RETURNS Varchar(256)
AS
BEGIN
	Declare @R Varchar(256)
	SELECT @R = REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(LTRIM(REPLACE(STR(@Number, 38, 16), '0', ' '))), ' ', '0'),'.',' ')),' ',',')

	if isNull(@R, 0) = 0
	set @R = '0'
	RETURN @R
END

GO
/****** Object:  UserDefinedFunction [dbo].[FnFormatCode]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[FnFormatCode] (@Number Varchar(256), @digit int)
RETURNS Varchar(256)
  
AS
BEGIN
	Declare @R Varchar(256)
	Set @R = ''

	while (len(@Number) < @digit )
	begin
		Set @R = @R+'0'
		Set @digit = @digit -1
	end
	
	Set @R = @R + @Number

	RETURN @R
END

GO
/****** Object:  UserDefinedFunction [dbo].[FnFormatDate]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[FnFormatDate] (@Date Datetime)
RETURNS Varchar(256)
  
AS
BEGIN
	Declare @Format Varchar(256)
	Set @Format = (Select Value from DMD_const where VName = 'DateFormat')
	
	if @Format is Null Set @Format = 'dd/mm/yyyy'
	
	Declare @R Varchar(256)
			,@Y Varchar(256)
			,@m Varchar(256)
			,@d Varchar(256)


	Select Top 1 
		@D = (DATEPart(DAY, @Date)),
		@M = (DATEPart(Month, @Date)),
		@y = (DATEPart(YEAR, @Date))


	Set @m = dbo.FnFormatNumber(@m, 2)
	Set @d = dbo.FnFormatNumber(@d, 2)
	
	Set @R = @Format
	
	Set @R = REPLACE(@R, UPPER('dd'), Cast(@d as varchar(256)))
	Set @R = REPLACE(@R, UPPER('mm'), Cast(@m as varchar(256)))
	Set @R = REPLACE(@R, UPPER('m'), Cast(@m as varchar(256)))
	Set @R = REPLACE(@R, UPPER('yyyy'), Cast(@Y as varchar(256)))
	Set @R = REPLACE(@R, UPPER('yy'), Cast(@Y as varchar(256)))
	
	RETURN @r

END

GO
/****** Object:  UserDefinedFunction [dbo].[FnFormatNumber]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[FnFormatNumber] (@Number int, @digit int)
RETURNS Varchar(256)
  
AS
BEGIN
	Declare @R Varchar(256)
	Set @R = ''

	while (len(@Number) < @digit )
	begin
		Set @R = @R+'0'
		Set @digit = @digit -1
	end
	
	Set @R = @R + Cast(@Number as Varchar(256))

	RETURN @R
END

GO
/****** Object:  UserDefinedFunction [dbo].[FnFormatZero]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[FnFormatZero] (@Number Varchar(256), @digit int)
RETURNS Varchar(256)
  
AS
BEGIN
	Declare @R Varchar(256)
	Set @R = ''

	while (len(@Number) < @digit )
	begin
		Set @R = @R+'0'
		Set @digit = @digit -1
	end
	
	Set @R = @R + Cast(@Number as Varchar(256))

	RETURN @R
END

GO
/****** Object:  UserDefinedFunction [dbo].[FnGetAccountCurrency]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Function [dbo].[FnGetAccountCurrency]
(
	@AccountGuid uniqueidentifier = '0ACC7FE7-CA3C-475A-9F4D-DA2F6ECB16E9',
	@Date DateTime = '7/28/2008'
)
RETURNS @Result TABLE ([CurrencyGUID] [UNIQUEIDENTIFIER], CurrencyVal Float)   
  
begin
	
	Set @Date = ISNULL(@Date, GETDATE())

	Declare @CurrencyGuid uniqueidentifier
	
	Select
		@CurrencyGuid = CurrencyGuid 
	From
		Account
	where
		Guid = @AccountGuid
		
	INSERT INTO @Result 
	Select
	@CurrencyGuid ,
	(Select dbo.[FnGetCurrencyVal] (@CurrencyGuid, Null))

	RETURN  
	

end


GO
/****** Object:  UserDefinedFunction [dbo].[fnGetAccountList]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[fnGetAccountList]( @AccGUID [UNIQUEIDENTIFIER])  
	RETURNS @Result TABLE ([GUID] [UNIQUEIDENTIFIER], [Code] Varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS, [Name] Varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS, [Level] [INT] DEFAULT 0, [Path] [VARCHAR](8000) COLLATE SQL_Latin1_General_CP1_CI_AS)   
  
AS 
BEGIN  
		---- 
	Declare @AcType int
	Set @AcType = (Select [Type] From [Account] where [Guid] = @AccGUID)
	if isnull(@AcType,0) <> 2
	begin
		DECLARE @FatherBuf_S	TABLE
		(
			[GUID] [UNIQUEIDENTIFIER], 
			[Level] [INT], 
			[Path] [VARCHAR](8000) COLLATE SQL_Latin1_General_CP1_CI_AS, 
			[ID] [INT] IDENTITY( 1, 1)
		)   
		DECLARE  @Continue_S [INT], @Level_S [INT]  
		SET @Level_S = 0   
		  
		SET @AccGUID = ISNULL(@AccGUID, 0x0)   
		IF @AccGUID = 0x0   
		BEGIN 
			INSERT INTO @FatherBuf_S ( [GUID], [Level], [Path]) SELECT [ac1].[Guid], @Level_S, ''  FROM [Account] [ac1] WHERE ( ISNULL( [ac1].[ParentGuid], 0x0) = 0x0 ) ORDER BY [ac1].[Code]
			INSERT INTO @fatherBuf_s ( [GUID], [Level], [Path]) SELECT [ac1].[Guid], @Level_S, ''  
			FROM  
				[Account] [ac1] 
				LEFT JOIN [Account] [ac2] ON [ac1].[ParentGuid] = [ac2].[Guid] 
				LEFT JOIN @fatherBuf_s [f] ON [ac1].[Guid] = [f].[Guid]  
			WHERE  
				ISNULL( [ac1].[ParentGuid], 0x0) != 0x0 
				AND [ac2].[Guid] IS NULL 
				AND [f].[Guid]IS NULL 
			ORDER BY  
				[Ac1].[Code]
		END 
		ELSE   
			INSERT INTO @FatherBuf_S ([GUID] , [Level], [Path]) SELECT [Guid], @Level_S, '' FROM [Account] WHERE [Guid] = @AccGUID ORDER BY [Code]
		  
		UPDATE @FatherBuf_S  SET [Path] = CAST( ( 0.0000001 * ID) AS [VARCHAR](40))   
	  
		SET @Continue_S = 1   
		IF (@AccGUID = 0x0) 
		BEGIN   
			WHILE @Continue_S <> 0   
			BEGIN   
				SET @Level_S = @Level_S + 1   
				INSERT INTO @FatherBuf_S([GUID],[Level],[Path])  
					SELECT  
						[ac].[Guid], @Level_S,[fb].[Path]  
					FROM  
						[Account] AS [ac] 
						INNER JOIN @FatherBuf_S AS [fb] ON [ac].[ParentGuid] = [fb].[GUID]   
					WHERE  
						[fb].[Level] = @Level_S - 1   
					ORDER BY  
						[ac].[Code]
				SET @Continue_S = @@ROWCOUNT   
				UPDATE @FatherBuf_S  SET [Path] = [Path] + CAST( ( 0.0000001 * [ID]) AS VARCHAR(40))  WHERE [Level] = @Level_S 
			END   
		END  
		ELSE  
		BEGIN   
			WHILE @Continue_S <> 0   
			BEGIN   
				SET @Level_S = @Level_S + 1   
				INSERT INTO @FatherBuf_S([GUID], [Level], [Path])  
					SELECT  
						[ac].[Guid],@Level_S,[fb].[Path]  
					FROM  
						[Account] AS [ac] INNER JOIN @FatherBuf_S AS [fb]  
						ON [ac].[ParentGuid] = [fb].[GUID]   
					WHERE  
						[fb].[Level] = @Level_S - 1  
					ORDER BY  
						[ac].[Code]
				SET @Continue_S = @@ROWCOUNT   
				UPDATE @FatherBuf_S  SET [Path] = [Path] + CAST( ( 0.0000001 * ID) AS [VARCHAR](40))  WHERE [Level] = @Level_S 
			END   
		END   
	end
	else
	begin
		insert into @FatherBuf_S
		(
			[GUID],
			[Level], 
			[Path]
		)   
		Select
			[AccountGuid],
			0,
			0
		From
			[AccountAccumulate] 
		where
			[ParentGuid] = @AccGuid
			
		Set @Level_S = 0
		SET @Continue_S = 1   
		BEGIN   
			WHILE @Continue_S <> 0   
			BEGIN   
				SET @Level_S = @Level_S + 1   
				INSERT INTO @FatherBuf_S([GUID],[Level],[Path])  
					SELECT  
						[ac].[Guid], @Level_S,[fb].[Path]  
					FROM  
						[Account] AS [ac] 
						INNER JOIN @FatherBuf_S AS [fb] ON [ac].[ParentGuid] = [fb].[GUID]   
					WHERE  
						[fb].[Level] = @Level_S - 1   
					ORDER BY  
						[ac].[Code]
				SET @Continue_S = @@ROWCOUNT   
				UPDATE @FatherBuf_S  SET [Path] = [Path] + CAST( ( 0.0000001 * [ID]) AS VARCHAR(40))  WHERE [Level] = @Level_S 
			END   
		END  
		
		
	end	


	INSERT INTO @Result 
	SELECT 
		[S].[GUID], [Code], [Name], [Level], [Path] 
	FROM 
		@FatherBuf_S [S]
		Inner join [vwAccount] [Ac] on [Ac].[Guid] = [S].[Guid] 
	GROUP BY 
		[S].[GUID], [Level], [Path] ,[Code], [Name]
	ORDER BY [Path] 

	RETURN  
END 


GO
/****** Object:  UserDefinedFunction [dbo].[fnGetAccountParents]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[fnGetAccountParents](@StartGUID [UNIQUEIDENTIFIER]) 
	RETURNS @Result TABLE([GUID] [UNIQUEIDENTIFIER]) 
  
AS 
BEGIN 

	DECLARE @ParentGUID [UNIQUEIDENTIFIER] 
	SELECT @ParentGUID = [ParentGUID] FROM [Account] WHERE [GUID] = @StartGUID 
	WHILE @@ROWCOUNT <> 0 
	BEGIN 
		IF EXISTS(SELECT * FROM @Result WHERE [GUID] = @ParentGUID) 
			BREAK 
		INSERT INTO @Result VALUES(@ParentGUID) 
		SELECT @ParentGUID = [ParentGUID] FROM [Account] WHERE [GUID] = @ParentGUID 
	END 
	RETURN 
END 


GO
/****** Object:  UserDefinedFunction [dbo].[fnGetAccountsChild]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[fnGetAccountsChild]
( 
	@AccGUID [UNIQUEIDENTIFIER]= 0x0
)

	RETURNS @Result TABLE 
								(
									GUID UNIQUEIDENTIFIER
								)   
  
AS 
BEGIN  
	Insert into @Result
	(Guid)values
	(@AccGUID)

	Insert into @Result
	select 
		[Guid]
	From	
		[Account]
	where 
		[ParentGuid]=@AccGUID

	RETURN  
END 


GO
/****** Object:  UserDefinedFunction [dbo].[fnGetAssetsGroupList]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[fnGetAssetsGroupList]( @AccGUID [UNIQUEIDENTIFIER])  
	RETURNS @Result TABLE ([GUID] [UNIQUEIDENTIFIER], [Code] Varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS, [Name] Varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS, [Level] [INT] DEFAULT 0, [Path] [VARCHAR](8000) COLLATE SQL_Latin1_General_CP1_CI_AS)   
  
AS 
BEGIN  
		---- 
		DECLARE @FatherBuf_S	TABLE
		(
			[GUID] [UNIQUEIDENTIFIER], 
			[Level] [INT], 
			[Path] [VARCHAR](8000) COLLATE SQL_Latin1_General_CP1_CI_AS, 
			[ID] [INT] IDENTITY( 1, 1)
		)   
		DECLARE  @Continue_S [INT], @Level_S [INT]  
		SET @Level_S = 0   
		  
		SET @AccGUID = ISNULL(@AccGUID, 0x0)   
		IF @AccGUID = 0x0   
		BEGIN 
			INSERT INTO @FatherBuf_S ( [GUID], [Level], [Path]) SELECT [ac1].[Guid], @Level_S, ''  FROM [AssetsGroup] [ac1] WHERE ( ISNULL( [ac1].[ParentGuid], 0x0) = 0x0 ) ORDER BY [ac1].[Code]
			INSERT INTO @fatherBuf_s ( [GUID], [Level], [Path]) SELECT [ac1].[Guid], @Level_S, ''  
			FROM  
				[AssetsGroup] [ac1] 
				LEFT JOIN [AssetsGroup] [ac2] ON [ac1].[ParentGuid] = [ac2].[Guid] 
				LEFT JOIN @fatherBuf_s [f] ON [ac1].[Guid] = [f].[Guid]  
			WHERE  
				ISNULL( [ac1].[ParentGuid], 0x0) != 0x0 
				AND [ac2].[Guid] IS NULL 
				AND [f].[Guid]IS NULL 
			ORDER BY  
				[Ac1].[Code]
		END 
		ELSE   
			INSERT INTO @FatherBuf_S ([GUID] , [Level], [Path]) SELECT [Guid], @Level_S, '' FROM [AssetsGroup] WHERE [Guid] = @AccGUID ORDER BY [Code]
		  
		UPDATE @FatherBuf_S  SET [Path] = CAST( ( 0.0000001 * ID) AS [VARCHAR](40))   
	  
		SET @Continue_S = 1   
		IF (@AccGUID = 0x0) 
		BEGIN   
			WHILE @Continue_S <> 0   
			BEGIN   
				SET @Level_S = @Level_S + 1   
				INSERT INTO @FatherBuf_S([GUID],[Level],[Path])  
					SELECT  
						[ac].[Guid], @Level_S,[fb].[Path]  
					FROM  
						[AssetsGroup] AS [ac] 
						INNER JOIN @FatherBuf_S AS [fb] ON [ac].[ParentGuid] = [fb].[GUID]   
					WHERE  
						[fb].[Level] = @Level_S - 1   
					ORDER BY  
						[ac].[Code]
				SET @Continue_S = @@ROWCOUNT   
				UPDATE @FatherBuf_S  SET [Path] = [Path] + CAST( ( 0.0000001 * [ID]) AS VARCHAR(40))  WHERE [Level] = @Level_S 
			END   
		END  
		ELSE  
		BEGIN   
			WHILE @Continue_S <> 0   
			BEGIN   
				SET @Level_S = @Level_S + 1   
				INSERT INTO @FatherBuf_S([GUID], [Level], [Path])  
					SELECT  
						[ac].[Guid],@Level_S,[fb].[Path]  
					FROM  
						[AssetsGroup] AS [ac] INNER JOIN @FatherBuf_S AS [fb]  
						ON [ac].[ParentGuid] = [fb].[GUID]   
					WHERE  
						[fb].[Level] = @Level_S - 1  
					ORDER BY  
						[ac].[Code]
				SET @Continue_S = @@ROWCOUNT   
				UPDATE @FatherBuf_S  SET [Path] = [Path] + CAST( ( 0.0000001 * ID) AS [VARCHAR](40))  WHERE [Level] = @Level_S 
			END   
		END   

	INSERT INTO @Result 
	SELECT 
		[S].[GUID], [Code], [Name], [Level], [Path] 
	FROM 
		@FatherBuf_S [S]
		Inner join [vwAssetsGroup] [Ac] on [Ac].[Guid] = [S].[Guid] 
	GROUP BY 
		[S].[GUID], [Level], [Path] ,[Code], [Name]
	ORDER BY [Path] 

	RETURN  
END 


GO
/****** Object:  UserDefinedFunction [dbo].[fnGetBranchParents]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[fnGetBranchParents](@StartGUID [UNIQUEIDENTIFIER]) 
	RETURNS @Result TABLE([GUID] [UNIQUEIDENTIFIER]) 
  
AS 
BEGIN 

	DECLARE @ParentGUID [UNIQUEIDENTIFIER] 
	SELECT @ParentGUID = [ParentGUID] FROM [Branch] WHERE [GUID] = @StartGUID 
	WHILE @@ROWCOUNT <> 0 
	BEGIN 
		IF EXISTS(SELECT * FROM @Result WHERE [GUID] = @ParentGUID) 
			BREAK 
		INSERT INTO @Result VALUES(@ParentGUID) 
		SELECT @ParentGUID = [ParentGUID] FROM [Account] WHERE [GUID] = @ParentGUID 
	END 
	RETURN 
END 

GO
/****** Object:  UserDefinedFunction [dbo].[fnGetCostList]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[fnGetCostList]( @CoGuid [UNIQUEIDENTIFIER])  
	RETURNS @Result TABLE ([GUID] [UNIQUEIDENTIFIER], [Level] [INT] DEFAULT 0, [Path] [VARCHAR](8000) COLLATE SQL_Latin1_General_CP1_CI_AS)   
  
AS 
BEGIN  
		---- 
		DECLARE @FatherBuf_S	TABLE([GUID] [UNIQUEIDENTIFIER], [Level] [INT], [Path] [VARCHAR](8000) COLLATE SQL_Latin1_General_CP1_CI_AS, [ID] [INT] IDENTITY( 1, 1))   
		DECLARE  @Continue_S [INT], @Level_S [INT]  
		SET @Level_S = 0   
		  
		SET @CoGuid = ISNULL(@CoGuid, 0x0)   
		IF @CoGuid = 0x0   
		BEGIN 
			INSERT INTO @FatherBuf_S ( [GUID], [Level], [Path]) SELECT [ac1].[Guid], @Level_S, ''  FROM [Cost] [ac1] WHERE ( ISNULL( [ac1].[ParentGuid], 0x0) = 0x0 ) ORDER BY [ac1].[Code]
			INSERT INTO @fatherBuf_s ( [GUID], [Level], [Path]) SELECT [ac1].[Guid], @Level_S, ''  
			FROM  
				[Cost] [ac1] 
				LEFT JOIN [Cost] [ac2] ON [ac1].[ParentGuid] = [ac2].[Guid] 
				LEFT JOIN @fatherBuf_s [f] ON [ac1].[Guid] = [f].[Guid]  
			WHERE  
				ISNULL( [ac1].[ParentGuid], 0x0) != 0x0 
				AND [ac2].[Guid] IS NULL 
				AND [f].[Guid]IS NULL 
			ORDER BY  
				[Ac1].[Code]
		END 
		ELSE   
			INSERT INTO @FatherBuf_S ([GUID] , [Level], [Path]) SELECT [Guid], @Level_S, '' FROM [Cost] WHERE [Guid] = @CoGuid ORDER BY [Code]
		  
		UPDATE @FatherBuf_S  SET [Path] = CAST( ( 0.0000001 * ID) AS [VARCHAR](40))   
	  
		SET @Continue_S = 1   
		IF (@CoGuid = 0x0) 
		BEGIN   
			WHILE @Continue_S <> 0   
			BEGIN   
				SET @Level_S = @Level_S + 1   
				INSERT INTO @FatherBuf_S([GUID],[Level],[Path])  
					SELECT  
						[ac].[Guid], @Level_S,[fb].[Path]  
					FROM  
						[Cost] AS [ac] INNER JOIN @FatherBuf_S AS [fb]  
						ON [ac].[ParentGuid] = [fb].[GUID]   
					WHERE  
						[fb].[Level] = @Level_S - 1   
					ORDER BY  
						[ac].[Code]
				SET @Continue_S = @@ROWCOUNT   
				UPDATE @FatherBuf_S  SET [Path] = [Path] + CAST( ( 0.0000001 * [ID]) AS VARCHAR(40))  WHERE [Level] = @Level_S 
			END   
		END  
		ELSE  
		BEGIN   
			WHILE @Continue_S <> 0   
			BEGIN   
				SET @Level_S = @Level_S + 1   
				INSERT INTO @FatherBuf_S([GUID], [Level], [Path])  
					SELECT  
						[ac].[Guid],@Level_S,[fb].[Path]  
					FROM  
						[Cost] AS [ac] INNER JOIN @FatherBuf_S AS [fb]  
						ON [ac].[ParentGuid] = [fb].[GUID]   
					WHERE  
						[fb].[Level] = @Level_S - 1  
					ORDER BY  
						[ac].[Code]
				SET @Continue_S = @@ROWCOUNT   
				UPDATE @FatherBuf_S  SET [Path] = [Path] + CAST( ( 0.0000001 * ID) AS [VARCHAR](40))  WHERE [Level] = @Level_S 
			END   
		END   
		INSERT INTO @Result 
		SELECT 
			[GUID], [Level], [Path] 
		FROM 
			@FatherBuf_S 
		GROUP BY 
			[GUID], [Level], [Path] 
		ORDER BY [Path] 

	RETURN  
END 


GO
/****** Object:  UserDefinedFunction [dbo].[fnGetCountDayofYear]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Function [dbo].[fnGetCountDayofYear]()
RETURNS Float
  AS
BEGIN

	Declare @Hijridate int, @R Float
	Select 
		@Hijridate = Value
	From
		dmd_Const where vName = 'Hijridate'
	
	
	Set @R = (Select case when isNull(@Hijridate,0) = 0 then 365.00 else 355.00 end)
	
	return @R
end

GO
/****** Object:  UserDefinedFunction [dbo].[FnGetCurrencyVal]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Function [dbo].[FnGetCurrencyVal]
(
	@Guid uniqueidentifier = '0ACC7FE7-CA3C-475A-9F4D-DA2F6ECB16E9',
	@Date DateTime = '7/28/2008'
)
returns Float
  
begin
	
	Set @Date = ISNULL(@Date, GETDATE())
	
	declare @Rate Float
	Set @Rate = 0

	Select  Top 1
		@Rate = [Rate] 
	From 
		[ChangeCurrencyRate]
	where
		([CurrencyGuid] = @Guid)
		and ([Date] <= @Date)
	Order By
		[Date] desc, [Number] desc 

	if @Rate = 0 
	Select  Top 1
		@Rate = [Rate] 
	From 
		[ChangeCurrencyRate]
	where
		([CurrencyGuid] = @Guid)
	Order By
		[Date] , [Number] 
	

	if @Rate = 0 
	Select
		@Rate = [CurrencyVal] 
	From 
		[Currency]
	where
		([Guid] = @Guid)


	if @Rate = 0 
	Set @Rate = 1 
	return (@Rate)
end


GO
/****** Object:  UserDefinedFunction [dbo].[FnGetDayName]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[FnGetDayName] (@Date Datetime, @Lang int = 0)
RETURNS Varchar(256)
  AS
BEGIN
	Declare @R Varchar(256)
	Set @R = DATENAME(Dw,@Date)
	
	if @Lang = 0
	Set @R = Case
				when @R = 'Monday' then 'ÇáÅËäíä'
				when @R = 'Tuesday' then 'ÇáËáÇËÇÁ'
				when @R = 'Wednesday' then 'ÇáÃÑÈÚÇÁ'
				when @R = 'Thursday' then 'ÇáÎãíÓ'
				when @R = 'Friday' then 'ÇáÌãÚÉ'
				when @R = 'Saturday' then 'ÇáÓÈÊ'
				when @R = 'Sunday' then 'ÇáÃÍÏ'
			end
	return @R
END

GO
/****** Object:  UserDefinedFunction [dbo].[fnGetGroupList]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[fnGetGroupList]( @ParentGroupGUID [UNIQUEIDENTIFIER])  
	RETURNS @Result TABLE (
							[GUID] [UNIQUEIDENTIFIER], 
							[Code] Varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS, 
							[Name] Varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS, 
							[Level] [INT] DEFAULT 0, 
							[Path] [VARCHAR](8000) COLLATE SQL_Latin1_General_CP1_CI_AS
						)   
  
AS 
BEGIN  
		---- 
	Declare @AcType int
	Set @AcType = 1
	if isnull(@AcType,0) <> 2
	begin
		DECLARE @FatherBuf_S	TABLE
		(
			[GUID] [UNIQUEIDENTIFIER], 
			[Level] [INT], 
			[Path] [VARCHAR](8000) COLLATE SQL_Latin1_General_CP1_CI_AS, 
			[ID] [INT] IDENTITY( 1, 1)
		)   
		DECLARE  @Continue_S [INT], @Level_S [INT]  
		SET @Level_S = 0   
		  
		SET @ParentGroupGUID = ISNULL(@ParentGroupGUID, 0x0)   
		IF @ParentGroupGUID = 0x0   
		BEGIN 
			INSERT INTO @FatherBuf_S ( [GUID], [Level], [Path]) 
			SELECT 
				[ac1].[Guid], @Level_S, ''  
			FROM 
				[MatGroup] [ac1] 
			WHERE 
				( ISNULL( [ac1].[ParentGuid], 0x0) = 0x0 ) 
			ORDER BY 
				[ac1].[Code]
				
			INSERT INTO @fatherBuf_s ( [GUID], [Level], [Path]) 
			SELECT [ac1].[Guid], @Level_S, ''  
			FROM  
				[MatGroup] [ac1] 
				LEFT JOIN [MatGroup] [ac2] ON [ac1].[ParentGuid] = [ac2].[Guid] 
				LEFT JOIN @fatherBuf_s [f] ON [ac1].[Guid] = [f].[Guid]  
			WHERE  
				ISNULL( [ac1].[ParentGuid], 0x0) != 0x0 
				AND [ac2].[Guid] IS NULL 
				AND [f].[Guid]IS NULL 
			ORDER BY  
				[Ac1].[Code]
		END 
		ELSE   
			INSERT INTO @FatherBuf_S ([GUID] , [Level], [Path]) SELECT [Guid], @Level_S, '' FROM [MatGroup] WHERE [Guid] = @ParentGroupGUID ORDER BY [Code]
		  
		UPDATE @FatherBuf_S  SET [Path] = CAST( ( 0.0000001 * ID) AS [VARCHAR](40))   
	  
		SET @Continue_S = 1   
		IF (@ParentGroupGUID = 0x0) 
		BEGIN   
			WHILE @Continue_S <> 0   
			BEGIN   
				SET @Level_S = @Level_S + 1   
				INSERT INTO @FatherBuf_S([GUID],[Level],[Path])  
					SELECT  
						[ac].[Guid], @Level_S,[fb].[Path]  
					FROM  
						[MatGroup] AS [ac] INNER JOIN @FatherBuf_S AS [fb]  
						ON [ac].[ParentGuid] = [fb].[GUID]   
					WHERE  
						[fb].[Level] = @Level_S - 1   
					ORDER BY  
						[ac].[Code]
				SET @Continue_S = @@ROWCOUNT   
				UPDATE @FatherBuf_S  SET [Path] = [Path] + CAST( ( 0.0000001 * [ID]) AS VARCHAR(40))  WHERE [Level] = @Level_S 
			END   
		END  
		ELSE  
		BEGIN   
			WHILE @Continue_S <> 0   
			BEGIN   
				SET @Level_S = @Level_S + 1   
				INSERT INTO @FatherBuf_S([GUID], [Level], [Path])  
					SELECT  
						[ac].[Guid],@Level_S,[fb].[Path]  
					FROM  
						[MatGroup] AS [ac] INNER JOIN @FatherBuf_S AS [fb]  
						ON [ac].[ParentGuid] = [fb].[GUID]   
					WHERE  
						[fb].[Level] = @Level_S - 1  
					ORDER BY  
						[ac].[Code]
				SET @Continue_S = @@ROWCOUNT   
				UPDATE @FatherBuf_S  SET [Path] = [Path] + CAST( ( 0.0000001 * ID) AS [VARCHAR](40))  WHERE [Level] = @Level_S 
			END   
		END   
	end
	else
	begin
		insert into @FatherBuf_S
		(
			[GUID],
			[Level], 
			[Path]
		)   
		Select
			[MatGroupGuid],
			0,
			0
		From
			[MatGroupAccumulate] 
		where
			[ParentGuid] = @ParentGroupGUID
	end	


	INSERT INTO @Result 
	SELECT 
		[S].[GUID], [Code], [Name], [Level], [Path] 
	FROM 
		@FatherBuf_S [S]
		Inner join [vwMatGroup] [Ac] on [Ac].[Guid] = [S].[Guid] 
	GROUP BY 
		[S].[GUID], [Level], [Path] ,[Code], [Name]
	ORDER BY [Path] 

	RETURN  
END 


GO
/****** Object:  UserDefinedFunction [dbo].[fnGetGroupParents]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[fnGetGroupParents](@StartGUID [UNIQUEIDENTIFIER]) 
	RETURNS @Result TABLE([GUID] [UNIQUEIDENTIFIER]) 
AS BEGIN 
	DECLARE @ParentGUID [UNIQUEIDENTIFIER] 
	SELECT @ParentGUID = [ParentGUID] FROM [MatGroup] WHERE [GUID] = @StartGUID 
	WHILE @@ROWCOUNT <> 0 
	BEGIN 
		IF EXISTS(SELECT * FROM @Result WHERE [GUID] = @ParentGUID) 
			BREAK 
		INSERT INTO @Result VALUES(@ParentGUID) 
		SELECT @ParentGUID = [ParentGUID] FROM [MatGroup] WHERE [GUID] = @ParentGUID 
	END 
	RETURN 
END 


GO
/****** Object:  UserDefinedFunction [dbo].[fnGetIncAccountList]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[fnGetIncAccountList]( @AccGUID [UNIQUEIDENTIFIER])  
	RETURNS @Result TABLE ([GUID] [UNIQUEIDENTIFIER], [Code] Varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS, [Name] Varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS, [Level] [INT] DEFAULT 0, [Path] [VARCHAR](8000) COLLATE SQL_Latin1_General_CP1_CI_AS,[Band] int,[Band2] int)   
  
AS 
BEGIN  
		---- 
		DECLARE @FatherBuf_S	TABLE
		(
			[GUID] [UNIQUEIDENTIFIER], 
			[Level] [INT], 
			[Path] [VARCHAR](8000) COLLATE SQL_Latin1_General_CP1_CI_AS, 
			[Band] int,
			[Band2] int,
			[ID] [INT] IDENTITY( 1, 1)
		)   
		DECLARE  @Continue_S [INT], @Level_S [INT]  
		SET @Level_S = 0   
		  
		SET @AccGUID = ISNULL(@AccGUID, 0x0)   
		IF @AccGUID = 0x0   
		BEGIN 
			INSERT INTO @FatherBuf_S ( [GUID], [Level], [Path],[Band],[Band2]) SELECT [ac1].[Guid], @Level_S, '',[Band],[Band2]  FROM [IncAccount] [ac1] WHERE ( ISNULL( [ac1].[ParentGuid], 0x0) = 0x0 ) ORDER BY [ac1].[Code]
			INSERT INTO @fatherBuf_s ( [GUID], [Level], [Path],[Band],[Band2]) SELECT [ac1].[Guid], @Level_S, '',[ac1].[Band],[ac1].[Band2]  
			FROM  
				[IncAccount] [ac1] 
				LEFT JOIN [IncAccount] [ac2] ON [ac1].[ParentGuid] = [ac2].[Guid] 
				LEFT JOIN @fatherBuf_s [f] ON [ac1].[Guid] = [f].[Guid]  
			WHERE  
				ISNULL( [ac1].[ParentGuid], 0x0) != 0x0 
				AND [ac2].[Guid] IS NULL 
				AND [f].[Guid]IS NULL 
			ORDER BY  
				[Ac1].[Code]
		END 
		ELSE   
			INSERT INTO @FatherBuf_S ([GUID] , [Level], [Path],[Band],[Band2]) SELECT [Guid], @Level_S, '',[Band],[Band2] FROM [IncAccount] WHERE [Guid] = @AccGUID ORDER BY [Code]
		  
		UPDATE @FatherBuf_S  SET [Path] = CAST( ( 0.0000001 * ID) AS [VARCHAR](40))   
	  
		SET @Continue_S = 1   
		IF (@AccGUID = 0x0) 
		BEGIN   
			WHILE @Continue_S <> 0   
			BEGIN   
				SET @Level_S = @Level_S + 1   
				INSERT INTO @FatherBuf_S([GUID],[Level],[Path],[Band],[Band2])  
					SELECT  
						[ac].[Guid], @Level_S,[fb].[Path],ac.[Band],ac.[Band2]  
					FROM  
						[IncAccount] AS [ac] 
						INNER JOIN @FatherBuf_S AS [fb] ON [ac].[ParentGuid] = [fb].[GUID]   
					WHERE  
						[fb].[Level] = @Level_S - 1   
					ORDER BY  
						[ac].[Code]
				SET @Continue_S = @@ROWCOUNT   
				UPDATE @FatherBuf_S  SET [Path] = [Path] + CAST( ( 0.0000001 * [ID]) AS VARCHAR(40))  WHERE [Level] = @Level_S 
			END   
		END  
		ELSE  
		BEGIN   
			WHILE @Continue_S <> 0   
			BEGIN   
				SET @Level_S = @Level_S + 1   
				INSERT INTO @FatherBuf_S([GUID], [Level], [Path],[Band],[Band2])  
					SELECT  
						[ac].[Guid],@Level_S,[fb].[Path],ac.[Band],ac.[Band2]  
					FROM  
						[IncAccount] AS [ac] INNER JOIN @FatherBuf_S AS [fb]  
						ON [ac].[ParentGuid] = [fb].[GUID]   
					WHERE  
						[fb].[Level] = @Level_S - 1  
					ORDER BY  
						[ac].[Code]
				SET @Continue_S = @@ROWCOUNT   
				UPDATE @FatherBuf_S  SET [Path] = [Path] + CAST( ( 0.0000001 * ID) AS [VARCHAR](40))  WHERE [Level] = @Level_S 
			END   
		END   


	INSERT INTO @Result 
	SELECT 
		[S].[GUID], [Code], [Name], [Level], [Path] ,S.[Band],s.[Band2]
	FROM 
		@FatherBuf_S [S]
		Inner join [vwIncAccount] [Ac] on [Ac].[Guid] = [S].[Guid] 
	GROUP BY 
		[S].[GUID], [Level], [Path] ,[Code], [Name],[Band],[Band2]
	ORDER BY [Path] 

	RETURN  
END 


GO
/****** Object:  UserDefinedFunction [dbo].[FnGetLangauge]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Function [dbo].[FnGetLangauge] ( @Spid int = 57)
Returns int
  
as
begin
	Declare @Lang Int
	Select
		@Lang = isnull([Lang],0)
	From
		[TblLangauge]
	where
		[Spid] = @@Spid

	
	Return (isnull(@Lang, 0))	
	
end

GO
/****** Object:  UserDefinedFunction [dbo].[FnGetLastDayFromHijriMonth]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[FnGetLastDayFromHijriMonth] (@Year int, @Month int)
RETURNS int   
AS
BEGIN
	Declare @R int
			,@BDate Datetime
			,@EDate Datetime

	Select @BDate = Date from [HjrConfig]
	where
		hjrMonth = @MONTH
		and hjrYear = @Year
	Order By
		[hjrMonth]

	if @Month = 12
	begin
		Set @Month = 1
		Set @Year = @Year + 1
	end
	else
	begin
		Set @Month = @Month + 1
	end
	
	Select @EDate = Date from [HjrConfig]
	where
		hjrMonth = @MONTH
		and hjrYear = @Year
	Order By
		[hjrMonth]

	Set @R = (DATEDIFF(DAY, @BDate, @EDate))

	RETURN @R 

END

GO
/****** Object:  UserDefinedFunction [dbo].[fnGetLastHijriCurrentMonth]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[fnGetLastHijriCurrentMonth] ()
RETURNS Datetime
  
AS
BEGIN
	Declare @R Datetime
			,@Y Varchar(256)
			,@m Varchar(256)
			,@d Varchar(256)


	Set @Y = dbo.FnGregToHijriDate (getDate(), 'yyyy')
	Set @M = dbo.FnGregToHijriDate (getDate(), 'mm')
	Set @D = isNull((Select DAY From HjrConfig where hjrMonth = @m and hjrYear = @y),29)

	Set @R = dbo.fnDecodeHijriDatetoGergDate(@Y, @m, @d)
	RETURN @R

END

GO
/****** Object:  UserDefinedFunction [dbo].[fnGetLastHijriCurrentYear]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[fnGetLastHijriCurrentYear] ()
RETURNS Datetime
  
AS
BEGIN
	Declare @R Datetime
			,@Y Varchar(256)
			,@m Varchar(256)
			,@d Varchar(256)


	Set @Y = dbo.FnGregToHijriDate (getDate(), 'yyyy')
	Set @M = '12'
	Set @D = IsNull((Select DAY From HjrConfig where hjrMonth = 12 and hjrYear = @y),30)
	

	Set @R = dbo.fnDecodeHijriDatetoGergDate(@Y, @M, @d)
	RETURN @R
END

GO
/****** Object:  UserDefinedFunction [dbo].[fnGetStoreList]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[fnGetStoreList]( @AccGUID [UNIQUEIDENTIFIER])  
	RETURNS @Result TABLE ( [GUID] [UNIQUEIDENTIFIER], 
							[Code] Varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS, 
							[Name] Varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS, 
							[Level] [INT] DEFAULT 0, 
							[Path] [VARCHAR](8000) COLLATE SQL_Latin1_General_CP1_CI_AS
							)   
  
AS 
BEGIN  
		---- 
	Declare @AcType int
	Set @AcType = 1
	if isnull(@AcType,0) <> 2
	begin
		DECLARE @FatherBuf_S	TABLE
		(
			[GUID] [UNIQUEIDENTIFIER], 
			[Level] [INT], 
			[Path] [VARCHAR](8000) COLLATE SQL_Latin1_General_CP1_CI_AS, 
			[ID] [INT] IDENTITY( 1, 1)
		)   
		DECLARE  @Continue_S [INT], @Level_S [INT]  
		SET @Level_S = 0   
		  
		SET @AccGUID = ISNULL(@AccGUID, 0x0)   
		IF @AccGUID = 0x0   
		BEGIN 
			INSERT INTO @FatherBuf_S ( [GUID], [Level], [Path]) SELECT [ac1].[Guid], @Level_S, ''  FROM [Store] [ac1] WHERE ( ISNULL( [ac1].[ParentGuid], 0x0) = 0x0 ) ORDER BY [ac1].[Code]
			INSERT INTO @fatherBuf_s ( [GUID], [Level], [Path]) SELECT [ac1].[Guid], @Level_S, ''  
			FROM  
				[Store] [ac1] 
				LEFT JOIN [Store] [ac2] ON [ac1].[ParentGuid] = [ac2].[Guid] 
				LEFT JOIN @fatherBuf_s [f] ON [ac1].[Guid] = [f].[Guid]  
			WHERE  
				ISNULL( [ac1].[ParentGuid], 0x0) != 0x0 
				AND [ac2].[Guid] IS NULL 
				AND [f].[Guid]IS NULL 
			ORDER BY  
				[Ac1].[Code]
		END 
		ELSE   
			INSERT INTO @FatherBuf_S ([GUID] , [Level], [Path]) SELECT [Guid], @Level_S, '' FROM [Store] WHERE [Guid] = @AccGUID ORDER BY [Code]
		  
		UPDATE @FatherBuf_S  SET [Path] = CAST( ( 0.0000001 * ID) AS [VARCHAR](40))   
	  
		SET @Continue_S = 1   
		IF (@AccGUID = 0x0) 
		BEGIN   
			WHILE @Continue_S <> 0   
			BEGIN   
				SET @Level_S = @Level_S + 1   
				INSERT INTO @FatherBuf_S([GUID],[Level],[Path])  
					SELECT  
						[ac].[Guid], @Level_S,[fb].[Path]  
					FROM  
						[Store] AS [ac] INNER JOIN @FatherBuf_S AS [fb]  
						ON [ac].[ParentGuid] = [fb].[GUID]   
					WHERE  
						[fb].[Level] = @Level_S - 1   
					ORDER BY  
						[ac].[Code]
				SET @Continue_S = @@ROWCOUNT   
				UPDATE @FatherBuf_S  SET [Path] = [Path] + CAST( ( 0.0000001 * [ID]) AS VARCHAR(40))  WHERE [Level] = @Level_S 
			END   
		END  
		ELSE  
		BEGIN   
			WHILE @Continue_S <> 0   
			BEGIN   
				SET @Level_S = @Level_S + 1   
				INSERT INTO @FatherBuf_S([GUID], [Level], [Path])  
					SELECT  
						[ac].[Guid],@Level_S,[fb].[Path]  
					FROM  
						[Store] AS [ac] INNER JOIN @FatherBuf_S AS [fb]  
						ON [ac].[ParentGuid] = [fb].[GUID]   
					WHERE  
						[fb].[Level] = @Level_S - 1  
					ORDER BY  
						[ac].[Code]
				SET @Continue_S = @@ROWCOUNT   
				UPDATE @FatherBuf_S  SET [Path] = [Path] + CAST( ( 0.0000001 * ID) AS [VARCHAR](40))  WHERE [Level] = @Level_S 
			END   
		END   
	end
	else
	begin
		insert into @FatherBuf_S
		(
			[GUID],
			[Level], 
			[Path]
		)   
		Select
			[StoreGuid],
			0,
			0
		From
			[StoreAccumulate] 
		where
			[ParentGuid] = @AccGuid
	end	


	INSERT INTO @Result 
	SELECT 
		[S].[GUID], [Code], [Name], [Level], [Path] 
	FROM 
		@FatherBuf_S [S]
		Inner join [vwStore] [Ac] on [Ac].[Guid] = [S].[Guid] 
	GROUP BY 
		[S].[GUID], [Level], [Path] ,[Code], [Name]
	ORDER BY [Path] 

	RETURN  
END 


GO
/****** Object:  UserDefinedFunction [dbo].[FnGetTraceValue]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[FnGetTraceValue] (@TblName Varchar(256), @Value Varchar(256))
RETURNS Varchar(256)   AS BEGIN
	
	Declare @R Varchar(256), 
			@Sql Varchar(256)
			
	if upper(@TblName) = '[ACCOUNT]' or upper(@TblName) = 'ACCOUNT'
	Select @R = Code +'-'+ Name From VwAccount where Guid = @Value

	if upper(@TblName) = '[CUSTOMER]' or upper(@TblName) = 'CUSTOMER'
	Select @R = Name From VwCUSTOMER where Guid = @Value

	if upper(@TblName) = upper('[ContractType]') or upper(@TblName) = upper('ContractType')
	Select @R = Name From VwContractType where Guid = @Value
	
	if upper(@TblName) = upper('[RentInfo]') or upper(@TblName) = upper('RentInfo')
	Select @R = Name From RentInfo where Guid = @Value

	if upper(@TblName) = upper('[SalesMan]') or upper(@TblName) = upper('SalesMan')
	Select @R = Name From SalesMan where Guid = @Value

	if upper(@TblName) = upper('[Building]') or upper(@TblName) = upper('Building')
	Select @R = Name From vwBuilding where Guid = @Value

	if upper(@TblName) = upper('[Apartment]') or upper(@TblName) = upper('Apartment')
	Select @R = NO+'-'+BuildingName From vwApartment where Guid = @Value

	if upper(@TblName) = upper('[Cost]') or upper(@TblName) = upper('Cost')
	Select @R = Name From vwCost where Guid = @Value

	if upper(@TblName) = upper('[Currency]') or upper(@TblName) = upper('Currency')
	Select @R = Name From vwCurrency where Guid = @Value

	if upper(@TblName) = upper('[Realty_Users]') or upper(@TblName) = upper('Realty_Users')
	Select @R = LoginName From Realty_Users where Guid = @Value

	if upper(@TblName) = upper('[Branch]') or upper(@TblName) = upper('Branch')
	Select @R = Name From Branch where Guid = @Value

	if upper(@TblName) = upper('[vwAllContract]') or upper(@TblName) = upper('vwAllContract')
	Select @R = TypeName From vwAllContract where Guid = @Value

	if upper(@TblName) = upper('[Owner]') or upper(@TblName) = upper('Owner')
	Select @R = Name From vwOwner where Guid = @Value

	RETURN @R
END

GO
/****** Object:  UserDefinedFunction [dbo].[FnGregToHijriDate]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[FnGregToHijriDate] (@Date Datetime, @Format Varchar(256))
RETURNS Varchar(256)
  
AS
BEGIN
	if DatePart(Year, @Date) = 1900
	Set @Date = '12/30/1899'
	
	Declare @R Varchar(256)
			,@Y Varchar(256)
			,@m Varchar(256)
			,@d Varchar(256)

	if @Date = '12/30/1899' 
	begin
		Set @R = ''
		Return @R
	end

	Declare @LastDay int
	Select Top 1 
		@LastDay = [Day]
	from 
		[HjrConfig] H
	where
		(Date <= @Date) 
	Order By
		Date desc

	Select Top 1 
		@D = 1 + (DATEDIFF(DAY, Date, @Date)),
		@M = hjrMonth ,
		@y = hjrYear
	from 
		[HjrConfig] H
	where
		(Date <= @Date) 
		and (DATEDIFF(DAY, Date, @Date) < @LastDay)
	Order By
		Date desc

	
	if isNull(@D,-1) = -1
	begin
		Set @R = Convert(Varchar(256), @Date , 131)
	
		Set @Y = SUBSTRING (@R, 7, 4)
		Set @m = SUBSTRING (@R, 4, 2)
		Set @d = SUBSTRING (@R, 1, 2)
	end

	Set @d = Replace(@d,' ','0')

	Set @m = dbo.FnFormatNumber(@m, 2)
	Set @d = dbo.FnFormatNumber(@d, 2)
	
	Set @R = @Format

	Set @R = REPLACE(@R, UPPER('dddd'), 'D')
	Set @R = REPLACE(@R, UPPER('ddd'), 'D')
	Set @R = REPLACE(@R, UPPER('dd'), 'D')
	
	Set @R = REPLACE(@R, UPPER('mmmm'), 'M')
	Set @R = REPLACE(@R, UPPER('mmm'), 'M')
	Set @R = REPLACE(@R, UPPER('mm'), 'M')
	
	Set @R = REPLACE(@R, UPPER('YYYY'), 'Y')
	Set @R = REPLACE(@R, UPPER('YYY'), 'Y')
	Set @R = REPLACE(@R, UPPER('YY'), 'Y')
	
	Set @R = REPLACE(@R, UPPER('d'), Cast(@d as varchar(256)))
	Set @R = REPLACE(@R, UPPER('m'), Cast(@m as varchar(256)))
	Set @R = REPLACE(@R, UPPER('y'), Cast(@Y as varchar(256)))
	
	RETURN @r

END

GO
/****** Object:  UserDefinedFunction [dbo].[fnHijriStrtoGergDate]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[fnHijriStrtoGergDate] (@hijristr Varchar(256), @Formt Varchar(256))
RETURNS Datetime
  
AS
BEGIN
	--if LEN(@hijristr) < 6
	--Set @Formt = REVERSE(@Formt)
	--Set @Formt = REVERSE(@hijristr)
	
	Declare
		@D Varchar(256),
		@M Varchar(256),
		@Y Varchar(256)
	
	Set @D = ''
	Set @M = ''
	Set @Y = ''
	
	Declare @Ix_d int, @Ix_m int, @Ix_y int
	
	Declare @SpIx int

	Select @Ix_d = CHARINDEX(UPPER('d'), UPPER(@Formt))
	--Select @Ix_d
	
	Select @Ix_m = CHARINDEX(UPPER('m'), UPPER(@Formt))
	--Select @Ix_m

	Select @Ix_y = CHARINDEX(UPPER('y'), UPPER(@Formt))
	--Select @Ix_y
	
	
	
	Declare @Sp Varchar(1)
	if CHARINDEX('/', @Formt) <> 0
	Set @Sp = '/'
	else
	Set @Sp = '-'
	
	Declare @V Varchar(256)
	Declare @I int
	Declare @f Bit
	Set @I = 0
	Set @hijristr = @hijristr + @Sp
	
	if LEN(@hijristr) > 7
	begin
			while LEN(@hijristr) > 0
			begin
				Set @f = 0
				Set @I = @I + 1
				
				Select @SpIx = CHARINDEX(@Sp, @hijristr)
				
				Set @V = SUBSTRING(@hijristr, 1, @SpIx-1)
				
				if (@Ix_d < @Ix_m) and (@Ix_d < @Ix_y) and @f = 0
				begin
					Set @D = @v
					Set @f = 1
					Set @Ix_d = 100
				end
				
				if (@Ix_m < @Ix_d) and (@Ix_m < @Ix_y) and @f = 0 
				begin
					Set @m = @v
					Set @f = 1
					Set @Ix_m = 100
				end

				if (@Ix_y < @Ix_d) and (@Ix_y < @Ix_d) and @f = 0
				begin
					Set @y = @v
					Set @f = 1
					Set @Ix_y = 100
				end

				Set	@hijristr = SUBSTRING(@hijristr, @SpIx +1, LEN(@hijristr))
			end
	end
	else
	begin
			while LEN(@hijristr) > 0
			begin
				
				Set @f = 0
				Set @I = @I + 1
				
				Select @SpIx = CHARINDEX(@Sp, @hijristr)
				
				Set @V = SUBSTRING(@hijristr, 1, @SpIx-1)
				
				if @I = 1
				begin
					Set @D = @v
				end
				
				if @I = 2
				begin
					Set @M = @v
				end

				Set	@hijristr = SUBSTRING(@hijristr, @SpIx +1, LEN(@hijristr))
			end
	end	

	if @M > 12 
	begin
		declare @T int
		Set @T = @D
		
		Set @D = @M
		
		Set @M = @T
	end


	Set @D = REPLACE(@D, '/', '')
	Set @D = REPLACE(@D, '-', '')
	
	if @d = ''
	Set @D = dbo.FnGregToHijriDate (getDate(), 'dd') 
	
	Set @M = REPLACE(@M, '/', '')
	Set @M = REPLACE(@M, '-', '')
	
	if @M = ''
	Set @M = dbo.FnGregToHijriDate (getDate(), 'mm') 
	
	Set @Y = REPLACE(@Y, '/', '')
	Set @Y = REPLACE(@Y, '-', '')
	
	if @Y = ''
	Set @Y = dbo.FnGregToHijriDate (getDate(), 'yyyy') 

	RETURN dbo.fnDecodeHijriDatetoGergDate(Cast(@y as int), Cast(@m as int), Cast(@d as int))

END

GO
/****** Object:  UserDefinedFunction [dbo].[fnIncMonthHijriDate]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[fnIncMonthHijriDate] (@Date Datetime, @IncM int)
RETURNS Datetime   AS
BEGIN
	Declare @R Datetime

	Declare 
		@Y int, @M int, @D int,
		@Hdate Varchar(256),
		@Sign int

	 
	Select @Hdate = dbo.FnGregToHijriDate(@Date, 'dd/mm/yyy')

	Set @Y = SUBSTRING(@Hdate, 7, 4)
	Set @M = SUBSTRING(@Hdate, 4, 2)
	Set @d = SUBSTRING(@Hdate, 1, 2)

	If @IncM > 0
	Set @Sign = 1 
	else 
	Set @Sign = -1

	Set @M = @M + @IncM


	while @M -1 > 11
	begin
		Set @Y = @Y + @Sign;
		Set @M = @M + ( -12 * @Sign)
	end;
	
	RETURN dbo.fnDecodeHijriDatetoGergDate(@y, @m, @d)

END

GO
/****** Object:  UserDefinedFunction [dbo].[fnIncYearHijriDate]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[fnIncYearHijriDate] (@Date Datetime, @IncM int)
RETURNS Datetime   AS
BEGIN
	Declare @R Datetime

	Declare @S varchar(256)
	Declare @Hy int
	Declare @Hm int
	Declare @Hd int

	Set @S = Convert(Varchar(256), @date , 131)

	Set @Hy = SUBSTRING (@S, 7, 4)
	Set @Hm = SUBSTRING (@S, 4, 2)
	Set @Hd = SUBSTRING (@S, 1, 2)

	Set @hd = Replace(@hd,' ','0')
	Set @hm = dbo.FnFormatNumber(@hm, 2)
	Set @hd = dbo.FnFormatNumber(@hd, 2)

	Set @Hy = @Hy + @IncM
	
	RETURN dbo.fnDecodeHijriDatetoGergDate(@hy, @hm, @hd)

END

GO
/****** Object:  UserDefinedFunction [dbo].[fnInfoFld]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Function [dbo].[fnInfoFld] (@Guid uniqueidentifier, @cardid Float)
returns @Tbl Table (
						[Guid]  [uniqueidentifier] ,
						[FldValue1] Varchar(256),
						[FldValue2] Varchar(256),
						[FldValue3] Varchar(256),
						[FldValue4] Varchar(256),
						[FldValue5] Varchar(256),
						[FldValue6] Varchar(256),
						[FldValue7] Varchar(256),
						[FldValue8] Varchar(256),
						[FldValue9] Varchar(256),
						[FldValue10] Varchar(256),
						[FldValue11] Varchar(256),
						[FldValue12] Varchar(256),
						[FldValue13] Varchar(256),
						[FldValue14] Varchar(256),
						[FldValue15] Varchar(256)
					)
  
as
begin
	Insert Into @Tbl
	Select Distinct
		b.[CardGuid] as [CardGuid],
		(Select fldValue From [InfofldValue] v where (v.[CardGuid] = b.[CardGuid]) and (V.Cardid = @CardId) and v.id = 1) as [FldValue1],
		(Select fldValue From [InfofldValue] v where (v.[CardGuid] = b.[CardGuid]) and (V.Cardid = @CardId) and v.id = 2) as [FldValue2],
		(Select fldValue From [InfofldValue] v where (v.[CardGuid] = b.[CardGuid]) and (V.Cardid = @CardId) and v.id = 3) as [FldValue3],
		(Select fldValue From [InfofldValue] v where (v.[CardGuid] = b.[CardGuid]) and (V.Cardid = @CardId) and v.id = 4) as [FldValue4],
		(Select fldValue From [InfofldValue] v where (v.[CardGuid] = b.[CardGuid]) and (V.Cardid = @CardId) and v.id = 5) as [FldValue5],
		(Select fldValue From [InfofldValue] v where (v.[CardGuid] = b.[CardGuid]) and (V.Cardid = @CardId) and v.id = 6) as [FldValue6],
		(Select fldValue From [InfofldValue] v where (v.[CardGuid] = b.[CardGuid]) and (V.Cardid = @CardId) and v.id = 7) as [FldValue7],
		(Select fldValue From [InfofldValue] v where (v.[CardGuid] = b.[CardGuid]) and (V.Cardid = @CardId) and v.id = 8) as [FldValue8],
		(Select fldValue From [InfofldValue] v where (v.[CardGuid] = b.[CardGuid]) and (V.Cardid = @CardId) and v.id = 9) as [FldValue9],
		(Select fldValue From [InfofldValue] v where (v.[CardGuid] = b.[CardGuid]) and (V.Cardid = @CardId) and v.id = 1) as [FldValue10],
		(Select fldValue From [InfofldValue] v where (v.[CardGuid] = b.[CardGuid]) and (V.Cardid = @CardId) and v.id = 1) as [FldValue11],
		(Select fldValue From [InfofldValue] v where (v.[CardGuid] = b.[CardGuid]) and (V.Cardid = @CardId) and v.id = 1) as [FldValue12],
		(Select fldValue From [InfofldValue] v where (v.[CardGuid] = b.[CardGuid]) and (V.Cardid = @CardId) and v.id = 1) as [FldValue13],
		(Select fldValue From [InfofldValue] v where (v.[CardGuid] = b.[CardGuid]) and (V.Cardid = @CardId) and v.id = 1) as [FldValue14],
		(Select fldValue From [InfofldValue] v where (v.[CardGuid] = b.[CardGuid]) and (V.Cardid = @CardId) and v.id = 1) as [FldValue15]
	from
		[InfofldValue] B
	where
		B.cardGuid = @Guid or @Guid = 0x0
		
	Return
end

GO
/****** Object:  UserDefinedFunction [dbo].[fnInRoundProcess]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[fnInRoundProcess] ()
RETURNS Bit
AS
BEGIN
	Declare @R bit
	Set @R = 0
	Select
		@R = 1
	From
		DMD_const
	where
		VName = 'InRoundProcess'
		
	RETURN @R
END

GO
/****** Object:  UserDefinedFunction [dbo].[fnIsSQL2005]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[fnIsSQL2005]()  
RETURNS [INT] 
  
AS 
BEGIN 
	
	DECLARE  
		
		@ver_str [VARCHAR](128), 
		
		@ver [FLOAT], 
		
		@ret_val [INT] 
      
	SET @ver_str = CAST( SERVERPROPERTY('ProductVersion') AS [VARCHAR](128)) 
      
	SET @ver = CAST( LEFT(@ver_str, 4) AS [FLOAT]) 
      
	SET @ret_val = 0 
      

	IF @ver >= 9  
            
	SET @ret_val = 1 
      
	RETURN @ret_val 

END 


GO
/****** Object:  UserDefinedFunction [dbo].[FnMatPrice]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Function [dbo].[FnMatPrice] 
(
	@CurrencyGuid uniqueidentifier, 
	@CurrencyVal Float,
	@Unit int = 0,
	@PriceMode int = 2,
	@SpecificPrice int = 0
)
returns @Tbl Table (
						
						[MatGuid]  [uniqueidentifier] ,
						[Price] [Float]
					)
  
as
begin
	if @CurrencyVal = 0
	Set @CurrencyVal = 1
	

	if @PriceMode = 0 or @PriceMode = 1 or @PriceMode = 2
	begin
		Insert Into @Tbl
		Select
			Mt.Guid,
			Case 
				when @PriceMode = 0 then Mt.[MaxPrice]
				when @PriceMode = 1 then Mt.AvgPrice
				when @PriceMode = 2 then Mt.LastPrice
			end 
			*
			Case --ãÚÇáÌÉ ÇáÚãáÉ
				when Mt.[CurrencyGuid] = @CurrencyGuid then 1
				else
				Mt.Currencyval / @Currencyval 
			end
			*
			Case when @Unit = 1 then 1
				 when @Unit = 2 then mt.unityFact2
				 when @Unit = 3 then mt.unityFact3
				 when @Unit = 0 then 
									Case when mt.[DefUnity] = 1 then 1
										 when mt.[DefUnity] = 2 then mt.unityFact2
										 when mt.[DefUnity] = 3 then mt.unityFact3
									end
			end
			as [Price]
		From
			mat as Mt
			--inner join #MatDis Mt on Mt.MatGuid = D.Guid
	end
	
	if @PriceMode = 3
	begin
		Insert Into @Tbl
		Select
			mt.Guid,
			Case 
				when @PriceMode = 3 then 
											Case when @Unit = 1 then p.Price1
												 when @Unit = 2 then p.Price2
												 when @Unit = 3 then p.Price3
												 when @Unit = 0 then 
																	Case when mt.[DefUnity] = 1 then p.Price1
																		 when mt.[DefUnity] = 2 then p.Price2
																		 when mt.[DefUnity] = 3 then p.Price3
																	end
											end
			end 
			*
			Case 
				when Mt.[CurrencyGuid] = @CurrencyGuid then 1
				else
				Mt.Currencyval / @Currencyval 
			end
			as [Price]
		From
			Mat Mt 
			left join [MatUnitsPrice] P on p.matGuid = mt.Guid and p.Number = @SpecificPrice + 1
	end

	Return
end

GO
/****** Object:  UserDefinedFunction [dbo].[FnMonth]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[FnMonth] (@Date Datetime)
RETURNS int   
AS
BEGIN
	Declare @R Varchar(256)
			,@Y Varchar(256)
			,@m Varchar(256)
			,@d Varchar(256)

	Set @R = ''

	Declare @Hijridate int
	Select 
		@Hijridate = Value
	From
		dmd_Const where vName = 'Hijridate'

	if @Hijridate = 1
	begin
		Set @R = Convert(Varchar(256), @Date , 131)
	
		Set @Y = SUBSTRING (@R, 7, 4)
		Set @m = SUBSTRING (@R, 4, 2)
		Set @d = SUBSTRING (@R, 1, 2)
	end
	else
	begin
		Set @R = Convert(Varchar(256), @Date , 101)
	
		Set @Y = SUBSTRING (@R, 7, 4)
		Set @d = Replace(SUBSTRING (@R, 4, 2),' ','0')
		Set @m = SUBSTRING (@R, 1, 2)
	end

	Set @d = Replace(@d,' ','0')
	
	RETURN @m

END

GO
/****** Object:  UserDefinedFunction [dbo].[fnMonthCountToYearDigit]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Function [dbo].[fnMonthCountToYearDigit] (@Month Float)
returns Float   
begin
	Declare @R Float
	
	Declare @y Float
	Set @y = Floor(@Month / 12)

	Declare @m Float
	Set @m = ((@Month / 12) - Floor(@Month / 12)) * 12

	Set @R = @y + (@m / 10)

	return @R
end


GO
/****** Object:  UserDefinedFunction [dbo].[FnMonthName]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[FnMonthName] (@Date Datetime)
RETURNS Varchar(256)   AS
BEGIN
	Declare @R Varchar(256)
			,@Y Varchar(256)
			,@m Varchar(256)
			,@d Varchar(256)

	Set @R = ''

	Declare @Hijridate int
	Select 
		@Hijridate = Value
	From
		dmd_Const where vName = 'Hijridate'

	if @Hijridate = 1
	begin
		Set @m = Case 
					when dbo.fnMonth(@Date) = 1 then 'ãÍÑã'
					when dbo.fnMonth(@Date) = 2 then 'ÕÝÑ'
					when dbo.fnMonth(@Date) = 3 then 'ÑÈíÚ Çæá'
					when dbo.fnMonth(@Date) = 4 then 'ÑÈíÚ ËÇäí'
					when dbo.fnMonth(@Date) = 5 then 'ÌãÇÏì ÇáÃæá'
					when dbo.fnMonth(@Date) = 6 then 'ÌãÇÏì ÇáËÇäí'
					when dbo.fnMonth(@Date) = 7 then 'ÑÌÈ'
					when dbo.fnMonth(@Date) = 8 then 'ÔÚÈÇä'
					when dbo.fnMonth(@Date) = 9 then 'ÑãÖÇä'
					when dbo.fnMonth(@Date) = 10 then 'ÔæÇá'
					when dbo.fnMonth(@Date) = 11 then 'Ðæ ÇáÞÚÏÉ'
					when dbo.fnMonth(@Date) = 12 then 'Ðæ ÇáÍÌÉ'
				 end
	end
	else
	begin
		Set @m = DateName(month, @Date)
	end

	
	RETURN @m

END

GO
/****** Object:  UserDefinedFunction [dbo].[FnMyRound]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[FnMyRound] (@Number Float, @RoundKind  Float) 
RETURNS Float   AS
BEGIN
	Declare @IsMinus Bit
	if @Number >= 0
	Set @IsMinus = 0 Else Set @IsMinus = 1

	Set @Number = Abs(@Number)

	Declare @R Float
	Set @R = 0

	if @RoundKind = 0 -- ÈÏæä ÊÞÑíÈ
	Set @R = @Number

	if @RoundKind = 1 -- ÇáÑíÇÖí
	Set @R = Round(@Number,0)
	
	if @RoundKind = 2 -- Çáì ÃÞÑÈ æÇÍÏ ÈÇáÅÖÇÝÉ
	begin
		if @Number > Round(@Number,0) 	
		Set @R = Round(@Number,0) + 1

		if @Number <= Round(@Number,0) 	
		Set @R = Round(@Number,0)
	end

	if @RoundKind = 3 -- Çáì ÃÞÑÈ æÇÍÏ ÈÇáäÞÕÇä
	begin
		if @Number < Round(@Number,0) 	
		Set @R = Round(@Number,0) - 1

		if @Number >= Round(@Number,0) 	
		Set @R = Round(@Number,0)
	end

	Declare @A Int
		Set @A = Floor(@Number)- Floor(Floor(@Number)/10)*10
	
	if @RoundKind = 4 -- Çáì ÃÞÑÈ ÎãÓÉ ÈÇáÅÖÇÝÉ
	begin
		if @A < 5
		Set @R = Round(@Number,0) + 5 - @A

		if @A > 5
		Set @R = Round(@Number,0) + 10 - @A

		if (@A = 5) or (@A = 0)
		Set @R = Round(@Number,0)

		if @Number = 0 Set @R = 0
	end

	if @RoundKind = 5 -- Çáì ÃÞÑÈ ÎãÓÉ ÈÇáäÞÕÇä
	begin
		if @A < 5 
		Set @R = Round(@Number,0) - @A

		if @A > 5
		Set @R = Round(@Number,0) - @A + 5

		if @A = 5
		Set @R = Round(@Number,0)

		if @Number = 0 Set @R = 0
	end


	if @RoundKind = 6 -- Çáì ÃÞÑÈ ÚÔÑÉ ÈÇáÅÖÇÝÉ
	begin
		if @A < 10
		Set @R = Round(@Number,0) + 10 - @A

		if @A > 10
		Set @R = Round(@Number,0) + 10 - @A

		if (@A = 10) or (@A = 0)
		Set @R = @Number

	end

	if @RoundKind = 7 -- Çáì ÃÞÑÈ ÚÔÑÉ ÈÇáäÞÕÇä
	begin
		if @A < 10
		Set @R = Round(@Number,0) - @A

		if @A > 10
		Set @R = Round(@Number,0) - @A 

		if @A = 0
		Set @R = @Number

	end
	
	if Not (@RoundKind between 0 and 7)
	Set @R = @Number

	RETURN Case when @IsMinus = 1 then @R * -1 else @R end
END

GO
/****** Object:  UserDefinedFunction [dbo].[fnObjectExists]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[fnObjectExists]
(
	@ObjectName [VARCHAR](128)
) 
RETURNS [INT] 
  
AS BEGIN 
/* 
	This function 
	- searches in sysobjects for a given object in current db, including visible temporary tables. 
	- @ObjectName examples 
		- trg_general 
		- account 
		- Account.GUID 
		- #Result 
		- #Result.Security 
	- returns 1 if founded, 0 if not. 
*/ 
	DECLARE @i [INT] 
	-- remove Full-Brackets if any 
	SET @ObjectName = REPLACE(REPLACE(@ObjectName, ']', ''), '[', '') 
	SET @i = CHARINDEX('.', @ObjectName) 
	IF @ObjectName LIKE '#%' 
		IF @i = 0 
			IF EXISTS(SELECT * FROM [tempdb]..[sysobjects] WHERE [id] = OBJECT_ID('tempdb..' + @ObjectName)) 
				RETURN 1 
			ELSE 
				RETURN 0 
		ELSE 
			IF EXISTS(SELECT * FROM [tempdb]..[syscolumns] WHERE [id] = OBJECT_ID('tempdb..' + LEFT(@ObjectName, @i - 1)) AND [name] = SUBSTRING(@ObjectName, @i + 1, 128)) 
				RETURN 1 
			ELSE 
				RETURN 0 
	ELSE 
		IF @i = 0 
			IF EXISTS(SELECT * FROM [sysobjects] WHERE [ID] = OBJECT_ID (@ObjectName)) 
				RETURN 1 
			ELSE 
				RETURN 0 
		ELSE 
			IF EXISTS(SELECT * FROM [syscolumns] WHERE [id] = OBJECT_ID(LEFT(@ObjectName, @i - 1)) AND [name] = SUBSTRING(@ObjectName, @i + 1, 128)) 
				RETURN 1 
			ELSE 
				RETURN 0 
	RETURN -1 
END 


GO
/****** Object:  UserDefinedFunction [dbo].[FnStrToAscii]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Function [dbo].[FnStrToAscii](@Str  Varchar(256))
returns bigint   begin
	Set @str = left(@Str, 6)
	
	Declare @R Varchar(256)
	Set @R = 0	
	Declare @I int

	Set @I = 0
	while @I < Len(@Str)
	begin
		Set @R = @R + Cast(
						(
							Ascii(SUBSTRING (@Str, @I+1, 1))
						)
						as Varchar(5))

		Set @I = @I + 1

	end
	
	return Cast(@R as bigint)
end

GO
/****** Object:  UserDefinedFunction [dbo].[FnStrToTable]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[FnStrToTable] (@Number Varchar(8000))
RETURNS @Res Table ([Str] Varchar(256))   AS
BEGIN
	Declare @Str Varchar(256)
	Set @Str = ''

	Declare @I int 
	Set @I = 0

	while (@i <= len(@Number) )
	begin
		if SubString(@Number, @I , 1) = ','
		begin
			insert into @Res
			Select @Str

			Set @Str = ''
		end
		else
		begin
			Set @Str = @Str + SubString(@Number, @I , 1)
		end

		Set @I = @I + 1
	end

	if @Str <> ''
	insert into @Res
	Select @Str
	
	RETURN
END

GO
/****** Object:  UserDefinedFunction [dbo].[FnTestCheckCollection]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE function [dbo].[FnTestCheckCollection]
(
	@CheckGuid uniqueidentifier = 0x0
)
RETURNS Bit
  
AS
BEGIN
	Declare @RBit bit
	
	Set @RBit = 0

	if Exists( Select * from ChecksCollection where CheckGuid = @CheckGuid and [Kind] = 1)
	Set @RBit = 1

	--if @RBit = 0
	--if Exists( Select * from ChecksPartialCollection where CheckGuid = @CheckGuid )
	--Set @RBit = 1
	
	return @RBit

END

GO
/****** Object:  UserDefinedFunction [dbo].[FnVSDEntry]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Function [dbo].[FnVSDEntry] (@CurrencyGuid uniqueidentifier, @CurrencyVal Float)
returns @Tbl Table (
						[Number] int,
						[ParentGuid]  [uniqueidentifier] ,
						[AcGuid] [uniqueidentifier] ,
						[Debit] [Float],
						[Credit] [Float],
						[CurrencyGuid] [uniqueidentifier]  ,
						[CurrencyVal] Float,
						[ObverseAcGuid]  [uniqueidentifier] ,
						[CostGuid] [uniqueidentifier] ,
						[Note] Varchar(256),
						[isvisible] Bit
					)
  
as begin
	if @CurrencyVal = 0
	Set @CurrencyVal = 1
	Insert Into @Tbl
	Select
		[Number],
		[ParentGuid],
		[AcGuid],
		Case 
			when [CurrencyGuid] = @CurrencyGuid then [Debit] 
			else [Debit] * [CurrencyVal] / @CurrencyVal end 
		As [Debit],
		Case 
			when [CurrencyGuid] = @CurrencyGuid then [Credit] 
			else [Credit] * [CurrencyVal] / @CurrencyVal end 
		As [Credit],
		[CurrencyGuid],
		[CurrencyVal],
		[ObverseAcGuid],
		[CostGuid],
		[Note],
		[isvisible]
	From
		[DEntry]
	where
		([IsVisible] = 1 or [CurrencyGuid] = @CurrencyGuid)
	Return
end

GO
/****** Object:  UserDefinedFunction [dbo].[fnWorkHijridate]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Function [dbo].[fnWorkHijridate]()
RETURNS int
  AS
BEGIN

	Declare @Hijridate int, @R Float
	Select 
		@Hijridate = Value
	From
		dmd_Const where vName = 'Hijridate'
	
	
	Set @R = @Hijridate
	
	return @R
end

GO
/****** Object:  UserDefinedFunction [dbo].[IntToHex]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create function [dbo].[IntToHex](@Dec as bigint) --@Hex As varchar(8) Output)
returns varchar(16) as
BEGIN
      Declare @HexDigits as char(16)
      declare @Hex as varchar(16)
      
      Set @HexDigits = '0123456789ABCDEF'
      
      Set @Hex = ''
      While @Dec > 16
         Begin
           Set @Hex = SubString(@HexDigits, (@Dec % 16) + 1, 1) + @Hex
           Set @Dec = @Dec / 16
         End
      
      Set @Hex = dbo.FnFormatZero(SubString(@HexDigits, @Dec + 1, 1) + @Hex, 2)
      
      return @hex
end

GO
/****** Object:  UserDefinedFunction [dbo].[SC]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[SC] (@ArStr Varchar(256))
RETURNS Varchar(256)
  
AS
BEGIN

	Declare @R Varchar(256)
    Select Top 1 @R = [En] from [StrSource] where [Ar]=@ArStr
	
	if (isnull(@R, '')  <> '') and (dbo.FnGetLangauge(@@spid) = 1)
	Return @R

    Return @ArStr	

end

GO
/****** Object:  Table [dbo].[CurrentUsers]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CurrentUsers](
	[UserGuid] [uniqueidentifier] NULL,
	[Spid] [int] NULL,
	[SecLvl] [int] NULL,
	[Admin] [bit] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Owner]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Owner](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[Name] [varchar](256) NULL,
	[LtnName] [varchar](256) NULL,
	[Nationality] [varchar](256) NULL,
	[LtnNationality] [varchar](256) NULL,
	[PersonalityNo] [varchar](256) NULL,
	[Address] [varchar](256) NULL,
	[Phone] [varchar](256) NULL,
	[Mobile] [varchar](256) NULL,
	[Fax] [varchar](256) NULL,
	[BoxNo] [varchar](256) NULL,
	[EMail] [varchar](256) NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbOwner]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbOwner]
	  
	as
		Select 
			[T].*
		From
			[Owner] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  Table [dbo].[Realty_Users]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Realty_Users](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[LoginName] [varchar](50) NULL,
	[Password] [varchar](50) NULL,
	[bAdmin] [bit] NULL,
	[UserSecLvl] [int] NULL,
	[BranchGuid] [uniqueidentifier] NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [Realty_Users_LoginName_Primary_Users] UNIQUE NONCLUSTERED 
(
	[LoginName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Realty_LogCard]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Realty_LogCard](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[UserGuid] [uniqueidentifier] NULL,
	[ComputerName] [varchar](50) NULL,
	[CardId] [int] NULL,
	[CardGuid] [uniqueidentifier] NULL,
	[Date] [datetime] NULL,
	[Opration] [varchar](100) NULL,
	[Note] [varchar](250) NULL
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwRealty_LogCard]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwRealty_LogCard]
  
as
	Select
		L.*,
		u.LoginName as [UserName]
	From
		[Realty_LogCard] [L]
		inner join Realty_Users [U] on [U].Guid = [L].UserGuid

GO
/****** Object:  Table [dbo].[MatGroup]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MatGroup](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[Code] [varchar](256) NULL,
	[Name] [varchar](256) NULL,
	[LtnName] [varchar](256) NULL,
	[Note] [varchar](256) NULL,
	[ParentGuid] [uniqueidentifier] NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbMatGroup]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbMatGroup]
	  
	as
		Select 
			[T].*
		From
			[MatGroup] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  Table [dbo].[Mat]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Mat](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[Code] [varchar](256) NULL,
	[Name] [varchar](256) NULL,
	[LtnName] [varchar](256) NULL,
	[Unity1] [varchar](256) NULL,
	[Unity2] [varchar](256) NULL,
	[Unity3] [varchar](256) NULL,
	[Barcode1] [varchar](256) NULL,
	[Barcode2] [varchar](256) NULL,
	[Barcode3] [varchar](256) NULL,
	[DefUnity] [int] NULL,
	[unityFact2] [float] NULL,
	[unityFact3] [float] NULL,
	[unityfix2] [bit] NULL,
	[unityfix3] [bit] NULL,
	[Note] [varchar](256) NULL,
	[GroupGuid] [uniqueidentifier] NULL,
	[MatType] [int] NULL,
	[CurrencyGuid] [uniqueidentifier] NULL,
	[CurrencyVal] [float] NULL,
	[AvgPrice] [float] NULL,
	[LastPriceDate] [smalldatetime] NULL,
	[LastPrice] [float] NULL,
	[MaxPrice] [float] NULL,
	[SaleAvgPrice] [float] NULL,
	[SaleLastPriceDate] [smalldatetime] NULL,
	[SaleLastPrice] [float] NULL,
	[SaleMaxPrice] [float] NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbMat]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbMat]
	  
	as
		Select 
			[T].*
		From
			[Mat] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  Table [dbo].[ChecksPartialCollection]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ChecksPartialCollection](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[Mark] [bit] NULL,
	[Date] [datetime] NULL,
	[CheckGuid] [uniqueidentifier] NULL,
	[DebitAccountGuid] [uniqueidentifier] NULL,
	[DebitCostGuid] [uniqueidentifier] NULL,
	[CreditAccountGuid] [uniqueidentifier] NULL,
	[CreditCostGuid] [uniqueidentifier] NULL,
	[Value] [float] NULL,
	[Commission] [float] NULL,
	[LossComm] [bit] NULL,
	[CommAccountGuid] [uniqueidentifier] NULL,
	[CommAccountCreditGuid] [uniqueidentifier] NULL,
	[CommCostGuid] [uniqueidentifier] NULL,
	[CommNote] [varchar](256) NULL,
	[CurrencyGUID] [uniqueidentifier] NULL,
	[CurrencyVal] [float] NULL,
	[Note] [varchar](256) NULL,
	[IsRounded] [bit] NULL,
	[SecEntryGuid] [uniqueidentifier] NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Account]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Account](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[Name] [varchar](250) NULL,
	[LtnName] [varchar](250) NULL,
	[Code] [varchar](250) NULL,
	[CDate] [datetime] NULL,
	[NSons] [int] NULL,
	[Note] [varchar](250) NULL,
	[CurrencyGUID] [uniqueidentifier] NULL,
	[CurrencyVal] [float] NULL,
	[Type] [int] NULL,
	[ParentGUID] [uniqueidentifier] NULL,
	[FinalGUID] [uniqueidentifier] NULL,
	[MaxDebit] [float] NULL,
	[MinDebit] [float] NULL,
	[MaxCredit] [float] NULL,
	[MinCredit] [float] NULL,
	[SumDebit] [float] NULL,
	[SumCredit] [float] NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbAccount]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbAccount]
	  
	as
		Select 
			[T].*
		From
			[Account] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  View [dbo].[vwAccount]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE View [dbo].[vwAccount]
  
as
	Select
		[A].[Number], 
		[A].[Guid], 
		[A].[Code], 
		[A].[ParentGuid], 
		[A].[Note], 
		[A].[CDate], 
		[A].[CurrencyGUID], 
		[A].[CurrencyVal], 
		[A].[Type], 
		[A].[FinalGUID], 
		[A].[LtnName],
		[A].[Name] as [ArName],
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[LtnName],'') <> '') then [A].[LtnName] else [A].[Name] end as [Name], 
		case when [A].[ParentGuid] is Not Null then [A].[ParentGuid] else 0x0 end as [Parent],
		ISNULL(a.SumDebit,0) - ISNULL(a.SumCredit,0) as Balance,
		Isnull([A].[NSons],0) as [NSons]
	from
		vbAccount A


GO
/****** Object:  Table [dbo].[Customer]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Customer](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[Barcode] [varchar](256) NULL,
	[Name] [varchar](256) NULL,
	[LtnName] [varchar](256) NULL,
	[CardKind] [int] NULL,
	[CardKind2] [int] NULL,
	[CustKind] [int] NULL,
	[Nationality] [varchar](256) NULL,
	[LtnNationality] [varchar](256) NULL,
	[Profession] [varchar](256) NULL,
	[LtnProfession] [varchar](256) NULL,
	[PassportNO] [varchar](256) NULL,
	[PassportExpireDate] [datetime] NULL,
	[Domicile] [varchar](256) NULL,
	[Security] [varchar](256) NULL,
	[LtnSecurity] [varchar](256) NULL,
	[PhoneJob] [varchar](256) NULL,
	[Mobile] [varchar](256) NULL,
	[Note] [varchar](256) NULL,
	[Trademark] [varchar](256) NULL,
	[LtnTrademark] [varchar](256) NULL,
	[AcGuid] [uniqueidentifier] NULL,
	[InsuranceAccountGuid] [uniqueidentifier] NULL,
	[VATAccountGuid] [uniqueidentifier] NULL,
	[MemoSecurity] [varchar](256) NULL,
	[LtnMemoSecurity] [varchar](256) NULL,
	[Address] [varchar](256) NULL,
	[LtnAddress] [varchar](256) NULL,
	[BoxNo] [varchar](256) NULL,
	[PersonalityNo1] [varchar](256) NULL,
	[PersonalityNo2] [varchar](256) NULL,
	[Fax] [varchar](256) NULL,
	[EMail] [varchar](256) NULL,
	[Adjective] [varchar](256) NULL,
	[LtnAdjective] [varchar](256) NULL,
	[CkHideInSearch] [bit] NULL,
	[ban] [bit] NULL,
	[banContract] [bit] NULL,
	[BankName] [varchar](256) NULL,
	[BankAccCode] [varchar](256) NULL,
	[Birthday] [datetime] NULL,
	[DomicileEndDate] [datetime] NULL,
	[PersonalityEndDate] [datetime] NULL,
	[CustNote1] [varchar](256) NULL,
	[CustNote2] [varchar](256) NULL,
	[CustNote3] [varchar](256) NULL,
	[CustNote4] [varchar](256) NULL,
	[CustNote5] [varchar](256) NULL,
	[CustNote6] [varchar](256) NULL,
	[CustNote7] [varchar](256) NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UK_Customer_Name_UNIQUE] UNIQUE NONCLUSTERED 
(
	[Name] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbCustomer]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbCustomer]
	  
	as
		Select 
			[T].*
		From
			[Customer] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  View [dbo].[vwCustomer]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE view [dbo].[vwCustomer]
 
as
	SELECT
		Cu.[CardKind],
		Cu.[Number], 
		Cu.[Guid],
		Cu.[Barcode],
		Cu.[Name] as [ArName],
		Cu.[LtnName],
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull(Cu.[LtnName],'') <> '') then Cu.[LtnName] else Cu.[Name] end as [Name],  
		Cu.[Nationality], 
		Cu.[Profession], 
		Cu.[PassportNO], 
		Cu.[Domicile], 
		Cu.[Security], 
		Cu.[LtnSecurity],
		Cu.[MemoSecurity],
		Cu.[LtnMemoSecurity],
		Cu.[PhoneJob], 
		Cu.[Mobile], 
		Cu.[Note], 
		Cu.[AcGuid],
		Cu.[Address],
		Cu.[LtnAddress],
		Cu.[BoxNo],
		Cu.[InsuranceAccountGuid],
		Cu.[PersonalityNo1],
		Cu.[PersonalityNo2],
		Cu.[Adjective],
		Cu.[LtnAdjective],
		Cu.[Fax],
		Cu.[EMail],
		Cu.[Ban],
		Cu.[PassportExpireDate],
		Cu.[BankName],
		Cu.[BankAccCode],
		Cu.[Trademark],
		Cu.[LtnTrademark],
		Cu.[CardKind2],
		Case when Cu.CardKind2 = 1 then DBO.SC('ÝÑÏ') else DBO.SC('ÔÑßÉ') end as [CardKind2_Str],
		CustKind,
		Case 
			when CustKind = 0 then dbo.sc('ÈÏæä')
			when CustKind = 1 then dbo.sc('ãÇáß')
			when CustKind = 2 then dbo.sc('ãÓÊÃÌÑ')
			when CustKind = 3 then dbo.sc('ÈÇÆÚ')
			when CustKind = 4 then dbo.sc('ãÔÊÑí')
			when CustKind = 5 then dbo.sc('ÒÈæä ãÍÊãá')
		end as CustKindStr,
		
		Cu.[Birthday],
		Cu.[DomicileEndDate],
		Cu.LtnNationality,
		Cu.LtnProfession,
		Cu.[PersonalityEndDate],
		Ac.Balance as AccountBalance,
		Cu.[banContract],
		Cu.CkHideInSearch,
		Cu.CustNote1,
		Cu.CustNote2,
		Cu.CustNote3,
		Cu.CustNote4,
		Cu.CustNote5,
		Cu.CustNote6,
		Cu.CustNote7
	FROM 
		[vbCustomer] Cu
		left join vwAccount Ac on Ac.Guid = Cu.AcGuid
		

GO
/****** Object:  Table [dbo].[Shop]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Shop](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[NO] [varchar](256) NULL,
	[Judicial] [bit] NULL,
	[Ban] [bit] NULL,
	[BuildingGuid] [uniqueidentifier] NULL,
	[Area] [float] NULL,
	[Unity] [varchar](256) NULL,
	[ShopKind] [varchar](256) NULL,
	[Description] [varchar](256) NULL,
	[Overlooking] [varchar](256) NULL,
	[UnifiedNum] [varchar](256) NULL,
	[ManservantRoom] [int] NULL,
	[DriverRoom] [int] NULL,
	[CostPrice] [float] NULL,
	[CostCurrencyGUID] [uniqueidentifier] NULL,
	[Rent] [float] NULL,
	[RentCurrencyGUID] [uniqueidentifier] NULL,
	[Sale] [float] NULL,
	[SaleCurrencyGUID] [uniqueidentifier] NULL,
	[Note] [varchar](256) NULL,
	[CostGuid] [uniqueidentifier] NULL,
	[FlatOwner] [int] NULL,
	[CustGuid] [uniqueidentifier] NULL,
	[Details] [varchar](256) NULL,
	[OfferState] [int] NULL,
	[OfferType] [int] NULL,
	[Restrained] [bit] NULL,
	[RestrainedUserGuid] [uniqueidentifier] NULL,
	[WaterCounter] [varchar](256) NULL,
	[ElectricityCounter] [varchar](256) NULL,
	[LtnShopKind] [varchar](256) NULL,
	[LtnDescription] [varchar](256) NULL,
	[LtnOverlooking] [varchar](256) NULL,
	[Class] [varchar](256) NULL,
	[BondType] [varchar](256) NULL,
	[BondNo] [varchar](256) NULL,
	[BondDate] [datetime] NULL,
	[License1] [varchar](256) NULL,
	[License2] [varchar](256) NULL,
	[LastContractGUID] [uniqueidentifier] NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UK_ShopBuildingGuid_NO_UNIQUE] UNIQUE NONCLUSTERED 
(
	[BuildingGuid] ASC,
	[NO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Currency]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Currency](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[Code] [varchar](250) NULL,
	[LtnCode] [varchar](250) NULL,
	[Name] [varchar](250) NULL,
	[LtnName] [varchar](250) NULL,
	[CurrencyVal] [float] NULL,
	[EnPartName] [varchar](250) NULL,
	[ArPartName] [varchar](250) NULL,
	[Part] [float] NULL,
	[CurrencyRate] [float] NULL,
	[Note] [varchar](250) NULL,
	[OnlyName] [varchar](255) NULL,
	[OnlyPluralName] [varchar](255) NULL,
	[OnlyByCountryName] [varchar](255) NULL,
	[OnlyPartPlularName] [varchar](255) NULL,
	[OnlyLtnName] [varchar](255) NULL,
	[OnlyPluralLtnName] [varchar](255) NULL,
	[OnlyByCountryLtnName] [varchar](255) NULL,
	[OnlyPartPlularLtnName] [varchar](255) NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Realty_Detail_users]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Realty_Detail_users](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Number] [int] NOT NULL IDENTITY(1,1),
	[ParentGuid] [uniqueidentifier] NULL,
	[IdCard] [int] NULL,
	[Permit] [varchar](25) NULL,
	[Str] [varchar](256) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Building]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Building](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[Name] [varchar](256) NULL,
	[LtnName] [varchar](256) NULL,
	[BuildingCode] [varchar](256) NULL,
	[Emirate] [varchar](256) NULL,
	[Area] [varchar](256) NULL,
	[Suburb] [varchar](256) NULL,
	[Street] [varchar](256) NULL,
	[LtnEmirate] [varchar](256) NULL,
	[LtnArea] [varchar](256) NULL,
	[LtnSuburb] [varchar](256) NULL,
	[LtnStreet] [varchar](256) NULL,
	[BasinNo] [varchar](256) NULL,
	[PieceNo] [varchar](256) NULL,
	[BuildAutoNumber] [varchar](256) NULL,
	[CouponNum] [varchar](256) NULL,
	[BuildingArea] [varchar](256) NULL,
	[LicenseType] [varchar](256) NULL,
	[BuildYear] [varchar](256) NULL,
	[ElecCounterNo] [varchar](256) NULL,
	[FloorCount] [int] NULL,
	[ApartmentCount] [int] NULL,
	[ApartmentCountOfFloor] [int] NULL,
	[ShopCount] [int] NULL,
	[Costunity] [float] NULL,
	[AccountGuid] [uniqueidentifier] NULL,
	[AccountBankBuildingGuid] [uniqueidentifier] NULL,
	[BuildingAccountGuid] [uniqueidentifier] NULL,
	[CashAccountGuid] [uniqueidentifier] NULL,
	[InsuranceAccountGuid] [uniqueidentifier] NULL,
	[CostGuid] [uniqueidentifier] NULL,
	[BankName] [varchar](256) NULL,
	[BankAccCode] [varchar](256) NULL,
	[ParentRentAccountGuid] [uniqueidentifier] NULL,
	[ParentRentInsuranceAccountGuid] [uniqueidentifier] NULL,
	[OpOwner] [int] NULL,
	[DatePurchase] [datetime] NULL,
	[AmountPurchase] [float] NULL,
	[CurrencyPurchase] [uniqueidentifier] NULL,
	[CurrencyvalPurchase] [float] NULL,
	[CustomerPurchase] [uniqueidentifier] NULL,
	[PurchaseNotes] [varchar](256) NULL,
	[CkReceiptBuilding] [bit] NULL,
	[ReceiptDate] [datetime] NULL,
	[ReceiptAmount] [float] NULL,
	[CurrencyReceipt] [uniqueidentifier] NULL,
	[CurrencyvalReceipt] [float] NULL,
	[ReceiptNote] [varchar](256) NULL,
	[Note] [varchar](256) NULL,
	[OwnerAccountGuid] [uniqueidentifier] NULL,
	[IdentityValue] [float] NULL,
	[CurrencyIdentityGUID] [uniqueidentifier] NULL,
	[CurrencyValIdentity] [float] NULL,
	[IdentityBeginDate] [datetime] NULL,
	[IdentityEndDate] [datetime] NULL,
	[UsedEndDate] [bit] NULL,
	[BHouseFloor] [int] NULL,
	[BHouseFlatCount] [int] NULL,
	[MBalanceFloor] [int] NULL,
	[MBalanceFlatCount] [int] NULL,
	[OfficeFloor] [int] NULL,
	[OfficeCount] [int] NULL,
	[ParkingFloor] [int] NULL,
	[ParkingCount] [int] NULL,
	[ParkingFloorUnder] [int] NULL,
	[ParkingCountUnder] [int] NULL,
	[FlatDriverCount] [int] NULL,
	[FlatServantCount] [int] NULL,
	[StoreCount] [int] NULL,
	[CreateEntryPurchase] [bit] NULL,
	[CrearteEntryInvestment] [bit] NULL,
	[OwnerName] [uniqueidentifier] NULL,
	[CommissionPercent] [float] NULL,
	[AccountCommIncomeGuid] [uniqueidentifier] NULL,
	[AcCommissionFromOwnerGUID] [uniqueidentifier] NULL,
	[BuildingCost] [float] NULL,
	[BuildingNo] [varchar](256) NULL,
	[BondType] [varchar](256) NULL,
	[BondNo] [varchar](256) NULL,
	[BondDate] [datetime] NULL,
	[RentInfoGuid] [uniqueidentifier] NULL,
	[CkBuildingPayTypelow] [bit] NULL,
	[OwnerGuid] [uniqueidentifier] NULL,
	[ShowInContract] [bit] NULL,
	[ShowInReport] [bit] NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UK_Building_Name_UNIQUE] UNIQUE NONCLUSTERED 
(
	[Name] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BuildingPrivilege]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BuildingPrivilege](
	[UserGuid] [uniqueidentifier] NULL,
	[BuildingGuid] [uniqueidentifier] NULL
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbBuilding]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vbBuilding]
  
as
		Select 
			[T].*
		From
			[Building] [T]
			inner join [CurrentUsers] [U] on 
				([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) 
				and [u].[spid] = @@Spid
			left join [BuildingPrivilege] V on V.[BuildingGuid] = T.Guid and U.UserGuid = v.UserGuid
			left join (
						Select 
							ParentGuid,
							SubString(Permit,4, 1) as [prm]
						from 
							[Realty_Detail_users] where IdCard = 1 			
						) p on p.ParentGuid = u.UserGuid 
		where
			(v.userGuid is Not Null or [u].[Admin] = 1)
			or (isnull(p.prm,0) = 0)

GO
/****** Object:  View [dbo].[vwBuilding]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE view [dbo].[vwBuilding]
  
as
	SELECT 
		[Number], 
		[Guid], 
		[Name] as [ArName],
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([LtnName],'') <> '') then [LtnName] else [Name] end as [Name],
		[Emirate], 
		[Area], 
		[Suburb], 
		[Street], 
		[FloorCount], 
		[ApartmentCount], 
		[ApartmentCountOfFloor], 
		[ShopCount], 
		[Note], 
		[LtnName],
		[OpOwner],
		[OwnerName],
		[CommissionPercent],
		[BuildingNo],
		[BondType],
		[BondNo],
		[BondDate],
		[PieceNo],
		[BasinNo],
		[BuildingCode],
		[LtnEmirate],
		[LtnArea],
		[LtnSuburb],
		[LtnStreet],
		[OwnerGuid],
		[BankName],
		[BankAccCode],
		[ShowInContract],
		[ShowInReport],
		[AccountCommIncomeGuid],
		[AcCommissionFromOwnerGuid],
		[CashAccountGuid],
		[RentInfoGuid],
		CostGuid
	FROM 
		[vbBuilding]

GO
/****** Object:  Table [dbo].[ContractType]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ContractType](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[Code] [varchar](256) NULL,
	[Name] [varchar](256) NULL,
	[ltnName] [varchar](256) NULL,
	[Menu] [varchar](256) NULL,
	[LtnMenu] [varchar](256) NULL,
	[ShortCut] [varchar](256) NULL,
	[ContractKind] [int] NULL,
	[IsAutoRenewal] [bit] NULL,
	[RevenueAccountGUID] [uniqueidentifier] NULL,
	[AcCommissionFromCustGUID] [uniqueidentifier] NULL,
	[AcCommissionFromOwnerGUID] [uniqueidentifier] NULL,
	[AccountContractPriceGUID] [uniqueidentifier] NULL,
	[AccountCertificatValueGUID] [uniqueidentifier] NULL,
	[FineAccountGUID] [uniqueidentifier] NULL,
	[DiscountAccountGUID] [uniqueidentifier] NULL,
	[TaxAccount] [uniqueidentifier] NULL,
	[OtherFeeAccount1GUID] [uniqueidentifier] NULL,
	[OtherFeeAccount2GUID] [uniqueidentifier] NULL,
	[OtherFeeAccount3GUID] [uniqueidentifier] NULL,
	[OtherFeeAccount4GUID] [uniqueidentifier] NULL,
	[OtherFeeAccount5GUID] [uniqueidentifier] NULL,
	[InsuranceAccountGuid] [uniqueidentifier] NULL,
	[ServesComm] [float] NULL,
	[Rentcondition] [varchar](2048) NULL,
	[MoveCost] [bit] NULL,
	[MoveCostCredit] [bit] NULL,
	[DefPrintPath] [varchar](256) NULL,
	[DefPrintLogPath] [varchar](256) NULL,
	[CreateEntry] [bit] NULL,
	[AutoCreateEntry] [bit] NULL,
	[AutoPostedEntry] [bit] NULL,
	[EntryDate] [int] NULL,
	[MoveCostWithIncom] [bit] NULL,
	[MoveCostWithInsurance] [bit] NULL,
	[MoveCostWithContractPrice] [bit] NULL,
	[MoveCostWithCertificat] [bit] NULL,
	[MoveCostWithFee] [bit] NULL,
	[MoveCostWithclientComm] [bit] NULL,
	[MoveCostWithOwnerComm] [bit] NULL,
	[MoveCostWithInconEndContract] [bit] NULL,
	[MoveCostWithFineEndContract] [bit] NULL,
	[MoveCostWithIncomCredit] [bit] NULL,
	[MoveCostWithInsuranceCredit] [bit] NULL,
	[MoveCostWithContractPriceCredit] [bit] NULL,
	[MoveCostWithCertificatCredit] [bit] NULL,
	[MoveCostWithFeeCredit] [bit] NULL,
	[MoveCostWithclientCommCredit] [bit] NULL,
	[MoveCostWithOwnerCommCredit] [bit] NULL,
	[MoveCostWithInconEndContractCredit] [bit] NULL,
	[MoveCostWithFineEndContractCredit] [bit] NULL,
	[MoveCostWithDiscount] [bit] NULL,
	[MoveCostWithDiscountCredit] [bit] NULL,
	[DefSmsMobile] [varchar](256) NULL,
	[AutoSMSAfterAdd] [bit] NULL,
	[SMSMsg] [varchar](256) NULL,
	[SMSMsgEn] [varchar](256) NULL,
	[AutoSMSAfterEnd] [bit] NULL,
	[EndSMSMsg] [varchar](256) NULL,
	[EndSMSMsgEn] [varchar](256) NULL,
	[EndContract] [bit] NULL,
	[ConstraintInsurance] [bit] NULL,
	[DefPrintReceipt] [varchar](256) NULL,
	[DefPrintacquittance] [varchar](256) NULL,
	[DeflawsuitDebitAccountGUID] [uniqueidentifier] NULL,
	[DeflawsuitCreditAccountGUID] [uniqueidentifier] NULL,
	[LawsuitCustAccount] [bit] NULL,
	[LawsuitCostwithDebitAccount] [bit] NULL,
	[LawsuitCostwithCreditAccount] [bit] NULL,
	[LawsuitLinkUser] [bit] NULL,
	[LawsuitLinkUserExpense] [bit] NULL,
	[UnearnedrRevenue] [bit] NULL,
	[AcIncomNextYearGUID] [uniqueidentifier] NULL,
	[AcCommissionExpenseGuid] [uniqueidentifier] NULL,
	[OpNewContract] [varchar](10) NULL,
	[FirstPayNote] [varchar](255) NULL,
	[FirstPayNoteLtn] [varchar](255) NULL,
	[ContractNote] [varchar](255) NULL,
	[ContractNoteLtn] [varchar](255) NULL,
	[FeeEntryNote] [varchar](255) NULL,
	[CanBeginDateAfterDate2] [bit] NULL,
	[GenEntryEnd] [bit] NULL,
	[DefPicTab] [varchar](255) NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwContractType]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE View [dbo].[vwContractType]
  
as
	Select
		[A].[Number],
		[A].[Guid],
		[A].[SecLvl],
		[A].[Contractkind],
		[A].[Code] as [Code],
		[A].[Name] as [ArName],
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[LtnName],'') <> '') then [A].[LtnName] else [A].[Name] end as [Name], 
		[A].[ltnName],
		[A].[Menu] as [arMenu],
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[LtnMenu],'') <> '') then [A].[LtnMenu] else [A].[Menu] end as [Menu], 
		[A].[LtnMenu],
		[A].[defprintPath],
		[A].[defprintLogPath],
		[RevenueAccountGUID],
		[AcCommissionFromCustGUID],
		[AcCommissionFromOwnerGUID],
		[AccountContractPriceGUID],
		[AccountCertificatValueGUID],
		[FineAccountGUID],
		[DiscountAccountGUID],
		[ServesComm],
		[Rentcondition],
		[MoveCost],
		[MoveCostCredit],
		[AutoCreateEntry],
		[AutoPostedEntry],
		[MoveCostWithIncom],
		[CreateEntry],
		[TaxAccount],
		[ShortCut],

		[MoveCostWithInsurance],
		[MoveCostWithContractPrice],
		[MoveCostWithCertificat],
		[MoveCostWithFee],
		[MoveCostWithclientComm],
		[MoveCostWithOwnerComm],
		[MoveCostWithInconEndContract],
		[MoveCostWithFineEndContract],
		
		[MoveCostWithIncomCredit],
		[MoveCostWithInsuranceCredit],
		[MoveCostWithContractPriceCredit],
		[MoveCostWithCertificatCredit],
		[MoveCostWithFeeCredit],
		[MoveCostWithclientCommCredit],
		[MoveCostWithOwnerCommCredit],
		[MoveCostWithInconEndContractCredit],
		[MoveCostWithFineEndContractCredit],
		
		[MoveCostWithDiscount],
		[MoveCostWithDiscountCredit],
		
		[InsuranceAccountGuid],
		[EndContract],
		[ConstraintInsurance],
		[DefPrintReceipt],
		[DefPrintacquittance],
		[UnearnedrRevenue] ,
		[AcIncomNextYearGuid],
		[OpNewContract],

		[EntryDate],
		IsAutoRenewal,
		[GenEntryEnd],
		CanBeginDateAfterDate2,

		[AutoSMSAfterEnd],
		[EndSMSMsg],
		[EndSMSMsgEn],
		[DefSmsMobile],

		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[FirstPayNoteLtn],'') <> '') then [A].[FirstPayNoteLtn] else [A].[FirstPayNote] end as [FirstPayNote],
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[ContractNoteLtn],'') <> '') then [A].[ContractNoteLtn] else [A].[ContractNote] end as [ContractNote],
		AcCommissionExpenseGuid,
		DefPicTab
	From
		[ContractType] [A]


GO
/****** Object:  Table [dbo].[LeaseApartment]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LeaseApartment](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[EditDate] [datetime] NULL,
	[DeliverDate] [datetime] NULL,
	[Mark] [bit] NULL,
	[TypeGuid] [uniqueidentifier] NULL,
	[ContractNo] [varchar](256) NULL,
	[IsAutoRenewal] [bit] NULL,
	[CustomerGuid] [uniqueidentifier] NULL,
	[RentInfoGuid] [uniqueidentifier] NULL,
	[SalesManGuid] [uniqueidentifier] NULL,
	[BuildingGuid] [uniqueidentifier] NULL,
	[ApartmentGuid] [uniqueidentifier] NULL,
	[ApartmentType] [varchar](256) NULL,
	[CostGuid] [uniqueidentifier] NULL,
	[FromDate] [datetime] NULL,
	[ToDate] [datetime] NULL,
	[Period] [int] NULL,
	[RentContractType] [int] NULL,
	[Rent] [float] NULL,
	[MonthlyValue] [float] NULL,
	[CurrencyGuid] [uniqueidentifier] NULL,
	[CurrencyVal] [float] NULL,
	[PayType] [int] NULL,
	[Note] [varchar](8000) NULL,
	[Note2] [varchar](8000) NULL,
	[Trademark] [varchar](256) NULL,
	[Purpose] [varchar](256) NULL,
	[Whereabouts] [varchar](256) NULL,
	[LeaseKind] [int] NULL,
	[RevenueAccountGuid] [uniqueidentifier] NULL,
	[CustAccountGuid] [uniqueidentifier] NULL,
	[CommissionFromCustPercent] [float] NULL,
	[CommissionFromCustValue] [float] NULL,
	[AcCommissionFromCustGuid] [uniqueidentifier] NULL,
	[AcCommissionFromCustNote] [varchar](256) NULL,
	[CommissionFromOwnerPercent] [float] NULL,
	[CommissionFromOwnerValue] [float] NULL,
	[AcCommissionFromOwnerGuid] [uniqueidentifier] NULL,
	[AcCommissionFromOwnerNote] [varchar](256) NULL,
	[CommissionFromSalesManrPercent] [float] NULL,
	[CommissionFromSalesManValue] [float] NULL,
	[AcSalesManCommissionGuid] [uniqueidentifier] NULL,
	[AcCommissionExpenseGuid] [uniqueidentifier] NULL,
	[SalesManCommNote] [varchar](256) NULL,
	[CreateContractEntry] [bit] NULL,
	[ContractFinish] [bit] NULL,
	[ContractFinishDate] [datetime] NULL,
	[EditContractFinishDate] [datetime] NULL,
	[ResultingAmount] [float] NULL,
	[ResultingAmount2] [float] NULL,
	[RoundKind] [int] NULL,
	[ResultingNote] [varchar](256) NULL,
	[Fine] [float] NULL,
	[FineAccount] [uniqueidentifier] NULL,
	[CreateResultingEntry] [bit] NULL,
	[FineNote] [varchar](256) NULL,
	[InsuranceValuePercent] [float] NULL,
	[InsuranceValue] [float] NULL,
	[InsuranceAccountGuid] [uniqueidentifier] NULL,
	[InsuranceValueOld] [float] NULL,
	[ContractPrice] [float] NULL,
	[AccountContractPrice] [uniqueidentifier] NULL,
	[CertificatValue] [float] NULL,
	[AccountCertificatValue] [uniqueidentifier] NULL,
	[AcIncomNextYearGUID] [uniqueidentifier] NULL,
	[RentDuration] [varchar](256) NULL,
	[Rentype] [varchar](256) NULL,
	[TermsOfPayment] [varchar](256) NULL,
	[ResidentCount] [int] NULL,
	[ElectricityInsurance] [float] NULL,
	[Step1Complete] [bit] NULL,
	[Step2Complete] [bit] NULL,
	[Step3Complete] [bit] NULL,
	[Step4Complete] [bit] NULL,
	[Step5Complete] [bit] NULL,
	[Certification] [varchar](256) NULL,
	[DiscountPercent] [float] NULL,
	[DiscountValue] [float] NULL,
	[DiscountAccountGuid] [uniqueidentifier] NULL,
	[UserGuid] [uniqueidentifier] NULL,
	[BranchGuid] [uniqueidentifier] NULL,
	[ElectricityCounter] [float] NULL,
	[FineRevenueAccountGUID] [uniqueidentifier] NULL,
	[NewState] [int] NULL,
	[OtherFee] [float] NULL,
	[OtherFeeAccountGUID] [uniqueidentifier] NULL,
	[License1No] [varchar](256) NULL,
	[License2No] [varchar](256) NULL,
	[License3No] [varchar](256) NULL,
	[License1Date1] [datetime] NULL,
	[License2Date1] [datetime] NULL,
	[License3Date1] [datetime] NULL,
	[License1Date2] [datetime] NULL,
	[License2Date2] [datetime] NULL,
	[License3Date2] [datetime] NULL,
	[Ltnwhereabouts] [varchar](256) NULL,
	[LtnPurpose] [varchar](256) NULL,
	[LtnRentDuration] [varchar](256) NULL,
	[LtnRentype] [varchar](256) NULL,
	[LtnTermsOfPayment] [varchar](256) NULL,
	[IsRounded] [bit] NULL,
	[Leave] [bit] NULL,
	[LeaveDate] [datetime] NULL,
	[CountOldContract] [int] NULL,
	[CountCurrentContract] [int] NULL,
	[AcquittancePrinted] [bit] NULL,
	[AcquittancePrintDate] [datetime] NULL,
	[AcquittancePrintedByGuid] [uniqueidentifier] NULL,
	[Judicial] [bit] NULL,
	[IsReturnInsurance] [bit] NULL,
	[ReturnInsuranceDate] [datetime] NULL,
	[PrvContractGuid] [uniqueidentifier] NULL,
	[AddPercent] [float] NULL,
	[AddValue] [float] NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbLeaseApartment]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbLeaseApartment]
	  
	as
		Select 
			[T].*
		From
			[LeaseApartment] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  Table [dbo].[Apartment]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Apartment](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[CardKind] [int] NULL,
	[Judicial] [bit] NULL,
	[Ban] [bit] NULL,
	[NO] [varchar](256) NULL,
	[UnifiedNum] [varchar](256) NULL,
	[ManservantRoom] [int] NULL,
	[DriverRoom] [int] NULL,
	[BuildingGuid] [uniqueidentifier] NULL,
	[FloorNo] [varchar](256) NULL,
	[Area] [float] NULL,
	[unity] [varchar](256) NULL,
	[ApartmentType] [varchar](256) NULL,
	[FlatKind] [varchar](256) NULL,
	[Class] [varchar](256) NULL,
	[Overlooking] [varchar](256) NULL,
	[CostPrice] [float] NULL,
	[CostCurrencyGUID] [uniqueidentifier] NULL,
	[Note] [varchar](256) NULL,
	[CostGuid] [uniqueidentifier] NULL,
	[FlatOwner] [int] NULL,
	[Details] [varchar](256) NULL,
	[OfferState] [int] NULL,
	[OfferType] [int] NULL,
	[CustomerName] [varchar](256) NULL,
	[CustomerPhone] [varchar](256) NULL,
	[Restrained] [bit] NULL,
	[PayValue] [float] NULL,
	[BondType] [varchar](256) NULL,
	[BondNo] [varchar](256) NULL,
	[BondDate] [datetime] NULL,
	[BathroomCount] [int] NULL,
	[BalconyCount] [int] NULL,
	[WaterCounter] [varchar](256) NULL,
	[ElectricityCounter] [varchar](256) NULL,
	[RestrainedUserGuid] [uniqueidentifier] NULL,
	[PurchaseDate] [datetime] NULL,
	[BeginLandValue] [float] NULL,
	[CurrencyBeginLandGuid] [uniqueidentifier] NULL,
	[CurrencyValBeginLand] [float] NULL,
	[PurchaseAccountGuid] [uniqueidentifier] NULL,
	[CreatePurchaseEntry] [bit] NULL,
	[CommissionPercent] [float] NULL,
	[CustGuid] [uniqueidentifier] NULL,
	[FlatCost] [float] NULL,
	[LastContractGUID] [uniqueidentifier] NULL,
	[CustOwnerGuid] [uniqueidentifier] NULL,
	[LtnFlatKind] [varchar](256) NULL,
	[LtnApartmentType] [varchar](256) NULL,
	[LtnClass] [varchar](256) NULL,
	[LtnOverlooking] [varchar](256) NULL,
	[Rent] [float] NULL,
	[RentCurrencyGuid] [uniqueidentifier] NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UK_ApartmentBuildingGuid_NO_UNIQUE] UNIQUE NONCLUSTERED 
(
	[BuildingGuid] ASC,
	[NO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwLeaseApartment]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE view [dbo].[vwLeaseApartment]
  
as
	Select 
		[TypeGuid],
		[EditDate],
		[DeliverDate],
		[Mark],
		[ContractNo],
		[T].[Name] as [TypeName],
		[T].[Name]+ ' / ' + Cast([A].[Number] as Varchar(10)) as [ArLeaseKind],
		[B].[Name] as [BuildingName],
		[B].[ArName] as [BuildingArName],
		[B].[LtnName] as [BuildingLtnName],

		[B].[Name] +' '+
		Case when [T].[ContractKind] = 0 then dbo.SC('ÇíÌÇÑ ÔÞÉ')
			 when [T].[ContractKind] = 1 then dbo.SC('ÇíÌÇÑ ãÍá')
			 when [T].[ContractKind] = 2 then dbo.SC('ÈíÚ ÔÞÉ')
			 when [T].[ContractKind] = 3 then dbo.SC('ÈíÚ ãÍá') end
		+' /'+
		Case when Isnull([P].[Guid],0x0) <> 0x0 then isNull([B].[BuildingCode],'') + Isnull([P].[No],P.Number ) 
			 when Isnull([S].[Guid],0x0) <> 0x0 then Isnull([S].[No],S.Number ) 
		 end +'/' 
		as [ApartmentNo],
		
		[B].[BuildingCode],
		Case when Isnull([P].[No],'') <> '' then [B].[BuildingCode]+[P].[No]
			 when Isnull([S].[No],'') <> '' then [S].[No]
		end as [FlatNo],
		 
		Case when Isnull([P].[No],'') <> '' then [P].[FlatKind]
			 when Isnull([S].[No],'') <> '' then [S].[ShopKind]
		 end as [FlatKind],
		[T].[ContractKind],
		[T].[ContractKind] as [Leasekind],
		[T].[Name] + Cast([A].[Number] as Varchar(10))  as [Contract], 

		isnull([P].[Guid],0x0) as [FlatGuid],
		isnull([S].[Guid],0x0) as [ShopGuid],
		A.[ApartmentGuid],		
		Case when isnull([P].[Guid],0x0) <> 0x0 then [P].[FlatOwner] else [S].[FlatOwner] end as [FlatOwner],
		[Cu].[Name] as [CustName],
		[Cu].[ArName] as [CustArName],
		[Cu].[LtnName] as [CustLtnName],
		[Cu].[Phonejob] as [CustomerPhonejob],
		[Cu].[Mobile] as [CustomerMobile],
		[Cu].[Nationality] as [CustomerNationality],
		[Cu].[accountBalance],
		[A].[BuildingGuid],
		[A].[SalesManGuid],
		[A].[Guid],
		[A].[Number],
		[A].[CustomerGuid],
		Case when Isnull([P].[No],'') <> '' then [P].[ApartmentType]
			 when Isnull([S].[No],'') <> '' then [S].[Description]
		 end as [ApartmentType],
		[A].[FromDate],
		dbo.fnDate([A].[FromDate]) as [FromDateHG],
		[A].[ToDate],
		dbo.fnDate([A].[ToDate]) as [ToDateHG],
		DATEDIFF(DAY, A.ToDate, A.FromDate) as ContractDays,
		Case when A.ContractFinish = 1 then 
		DATEDIFF(DAY, A.ToDate, A.ContractFinishDate) 
		end as ContractDaysDifference,
		
		[A].[Rent],
		[A].[RentContractType],
		[A].[MonthlyValue],
		[A].[MonthlyValue] * 12.00 as [YearValue],
		[A].[CurrencyGuid],
		[A].[CurrencyVal],
		[A].[PayType],
		[A].[Note],
		[A].[Note2],
		[A].[Purpose],
		[A].[RevenueAccountGuid],
		[A].[CustAccountGuid],
		[A].[CommissionFromCustPercent],
		[A].[CommissionFromCustValue],
		[A].[AcCommissionFromCustGuid],
		[A].[CommissionFromOwnerPercent],
		[A].[CommissionFromOwnerValue],
		[A].[AcCommissionFromOwnerGuid],
		[A].[ContractFinish],
		[A].[ContractFinishDate],
		[A].[EditContractFinishDate],
		[A].[ResultingAmount],
		[A].[Fine],
		[A].[FineAccount],
		[A].[CreateResultingEntry],
		[A].[InsuranceValue],
		[A].[InsuranceValueOld],
		[A].[ContractPrice],
		[A].[AccountContractPrice],
		[A].[CertificatValue],
		[A].[AccountCertificatValue],
		[A].[RentDuration],
		[A].[Rentype],
		[A].[TermsOfPayment],
		[A].[Seclvl],
		[A].[RentInfoGuid],
		[A].[Step1Complete],
		[A].[Step2Complete],
		[A].[Step3Complete],
		[A].[Step4Complete],
		[A].[Step5Complete],
		[A].[Certification],
		[A].[ElectricityInsurance],
		[A].[ResidentCount],
		[A].[CreateContractEntry],
		[A].[Whereabouts],		
		[A].[DiscountPercent],
		[A].[DiscountValue],
		[A].[Rent] - [A].[DiscountValue] as [RentAfterDiscount],	
		[A].[DiscountAccountGuid],
		[Cr].[Code] as [CurrencyName],
		[A].[BranchGuid],
		[A].[ResultingAmount2],
		[A].[RoundKind],

		Case 
			when ([T].[ContractKind] = 0) or ([T].[ContractKind] = 1) then 
				Case 
					when 
						Case when [ContractFinish] = 0 then [ToDate] else [ContractFinishDate] end 
						<= GetDate() then --ãäÊåí ÇáãÏÉ
											Case when [ContractFinish] = 0 then dbo.SC('ãäÊåí ÇáãÏÉ æáã íÊã ÅäåÇÁ ÇáÚÞÏ') 
											else
											dbo.SC('ãäÊåí ÇáãÏÉ æÊã ÅäåÇÁ ÇáÚÞÏ') end
					when 
						Case when [ContractFinish] = 0 then [ToDate] else [ContractFinishDate] end 
						> GetDate() then dbo.SC('ÛíÑ ãäÊåí') 
				end
			when ([T].[ContractKind] = 2) or ([T].[ContractKind] = 3) then dbo.SC('ÈíÚ')
				
		end as [ContractState],

		Case 
			when ([T].[ContractKind] = 0) or ([T].[ContractKind] = 1) then 
				Case 
					when [ContractFinish] = 0 then dbo.SC('ãÔÛæáÉ') 
					else
					Case 
							when 
								exists(Select 
									Guid
								From 
										LeaseApartment [Q] 
								where 
									[T].[ContractKind] = [T].[ContractKind]
									and [Q].[CustomerGuid] = [A].[CustomerGuid]
									and [Q].[ApartmentGuid] = [A].[ApartmentGuid]
									and [Q].[FromDate] >= [A].[ContractFinishDate]
									and [Q].[Guid] <> [A].[Guid]
								)  then dbo.SC('Êã ÇáÊÌÏíÏ') 
					else
						dbo.SC('Êã ÇáÅÎáÇÁ') 
					end
				end
			when ([T].[ContractKind] = 2) or ([T].[ContractKind] = 3) then ''
		end as [FlatState],
		[A].[Period],
		[p].[FloorNo],

		[B].[Emirate],
		[B].[Area] as [BuildingArea],
		[B].[Suburb],
		[B].[Street],
		[B].[BasinNo],
		[B].[PieceNo],
		[B].[BuildingNo],
		[B].[BondType],
		[B].[BondNo],

		[B].[BankName] as [BuildingBankName],
		[B].[BankAccCode] as [BuildingBankAccCode],

		[P].[Class],
		Case when isnull([P].[Guid],0x0) <> 0x0 then [P].[Area] else [S].[Area] end as [FlatArea],
		Case when isnull([P].[Guid],0x0) <> 0x0 then [P].[unity] else [S].[unity] end as [FlatAreaunity],
		[A].[ElectricityCounter],
		[A].[FineRevenueAccountGUID],
		Case when [ContractFinish] = 0 then [ToDate] else [ContractFinishDate]  end as [EndDate],
		[A].[ResultingNote],
		[A].[FineNote],
		[A].[NewState],
		Case when [A].[NewState] = 0 then dbo.SC('ÌÏíÏ') else dbo.SC('ÊÌÏíÏ') End as [NewStateStr],
		[A].[InsuranceValuePercent],
		[A].[OtherFee],
		[A].[OtherFeeAccountGUID],

		[A].[License1No],
		[A].[License2No],
		[A].[License3No],
		[A].[License1Date1],
		[A].[License2Date1],
		[A].[License3Date1],
		[A].[License1Date2],
		[A].[License2Date2],
		[A].[License3Date2],
		[A].[Ltnwhereabouts],
		[A].[LtnPurpose],
		[A].[LtnRentDuration],
		[A].[LtnRentype],
		[A].[LtnTermsOfPayment],
		[A].[Trademark],

		Case when Isnull([P].[Guid],0x0) <> 0x0 then [P].[CostGuid]
			 when Isnull([S].[Guid],0x0) <> 0x0 then [S].[CostGuid]
		 end as [UnitCostGuid],
		 
		Case when Isnull([P].[Guid],0x0) <> 0x0 then [P].[Judicial]
			 when Isnull([S].[Guid],0x0) <> 0x0 then [S].[Judicial]
		 end as [Judicial],
		[A].[CostGuid],
		[AcCommissionFromCustNote],
		[AcCommissionFromOwnerNote],
		A.[IsRounded],
		[Leave],
		[LeaveDate],
		[CountOldContract],
		A.[InsuranceAccountGuid],
		[A].[AcquittancePrinted],
		[A].[AcquittancePrintDate],
		[A].[Judicial] as [ContractJudicial],
		[A].AcquittancePrintedByGuid,
		[A].[PrvContractGuid],
		[T].[OpNewContract],
		A.IsAutoRenewal,
		A.AcIncomNextYearGuid,
		A.IsReturnInsurance,
		A.ReturnInsuranceDate,
		A.[AddPercent],
		A.[AddValue],
		A.[CommissionFromSalesManrPercent],
		A.[CommissionFromSalesManValue],
		A.[AcSalesManCommissionGuid],
		A.[AcCommissionExpenseGuid],
		A.[SalesManCommNote]
	from 
		[vbLeaseApartment] [A]
		inner join [vwContractType] [T] on [T].[Guid] = [A].[TypeGuid]
		inner join [vwBuilding] [B] On [A].[BuildingGuid] = [B].[Guid]
		left join [Apartment] [P] on [P].[Guid] = [A].[ApartmentGuid]
		left join [Shop] [S] on [S].[Guid] = [A].[ApartmentGuid]
		left join [vwcustomer] [Cu] On [Cu].[Guid] = [A].[CustomerGuid]
		inner join [Currency] [Cr] On [Cr].[Guid] = [A].[CurrencyGuid]


GO
/****** Object:  View [dbo].[vbCurrency]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbCurrency]
	  
	as
		Select 
			[T].*
		From
			[Currency] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  View [dbo].[vwCurrency]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE View [dbo].[vwCurrency]
  
as
	SELECT 
		[Number], 
		[Guid], 
		[Seclvl],
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([LtnName],'') <> '') then [LtnName] else [Name] end as [Name] , 
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([LtnCode],'') <> '') then [LtnCode] else [Code] end as [Code] , 
		[Name] [ArName], 
		[LtnName], 
		[CurrencyVal], 
		[CurrencyRate], 
		[Note], 
		[LtnCode],
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([EnPartName],'') <> '') then [EnPartName] else [ArPartName] end as [PartName] , 
		[EnPartName],
		[ArPartName],
		[Part],
		
		Case when isNull([OnlyName], '') = '' then Name else [OnlyName] end as [OnlyName],
		Case when isNull([OnlyPluralName], '') = '' then Name else [OnlyPluralName] end as [OnlyPluralName],
		[OnlyByCountryName],
		Case when isNull(OnlyPartPlularName,'') = '' then [ArPartName] else [OnlyPartPlularName] end as [OnlyPartPlularName],
		Case when isNull([OnlyLtnName],'') = '' then LtnName else [OnlyLtnName] end as [OnlyLtnName],
		Case when isNull([OnlyPluralLtnName],'') = '' then LtnName else [OnlyPluralLtnName] end as [OnlyPluralLtnName],
		[OnlyByCountryLtnName],
		[OnlyPartPlularLtnName]
	FROM 
		[vbCurrency]

GO
/****** Object:  Table [dbo].[CheckType]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CheckType](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[CheckKind] [int] NULL,
	[Code] [varchar](256) NULL,
	[Name] [varchar](256) NULL,
	[ltnName] [varchar](256) NULL,
	[Menu] [varchar](256) NULL,
	[LtnMenu] [varchar](256) NULL,
	[ShortCut] [varchar](256) NULL,
	[CreatedEntry] [bit] NULL,
	[AutoCreatedEntry] [bit] NULL,
	[AutoPostedEntry] [bit] NULL,
	[DefAccountGuid] [uniqueidentifier] NULL,
	[Posted] [bit] NULL,
	[PosdetCreatedEntry] [bit] NULL,
	[PosdetAutoCreatedEntry] [bit] NULL,
	[PosdetAutoPostedEntry] [bit] NULL,
	[PostedDefAccountGuid] [uniqueidentifier] NULL,
	[PostedDefCreditAccountGuid] [uniqueidentifier] NULL,
	[DefOwnerBuildingPosted] [bit] NULL,
	[DefCustPosted] [bit] NULL,
	[PostMoveCostDebit] [bit] NULL,
	[PostMoveCostCredit] [bit] NULL,
	[collected] [bit] NULL,
	[collectedCreatedEntry] [bit] NULL,
	[collectedAutoCreatedEntry] [bit] NULL,
	[CollectedEntryTypeGuid] [uniqueidentifier] NULL,
	[collectedAutoPostedEntry] [bit] NULL,
	[collectedSanctionBankAccountBuilding] [bit] NULL,
	[collectedSanctionCustObverse] [bit] NULL,
	[collectedDefAccountGuid] [uniqueidentifier] NULL,
	[collectedDefAccountObverseGuid] [uniqueidentifier] NULL,
	[CommAccountDebitGuid] [uniqueidentifier] NULL,
	[CommAccountCreditGuid] [uniqueidentifier] NULL,
	[CommOwnerBuilding] [bit] NULL,
	[DefBuildingComm] [bit] NULL,
	[CommType] [int] NULL,
	[DefBuildingIncomComm] [bit] NULL,
	[collectedMoveCostDebit] [bit] NULL,
	[collectedMoveCostCredit] [bit] NULL,
	[CommMoveCost] [bit] NULL,
	[CommMoveCostCredit] [bit] NULL,
	[partialcollected] [bit] NULL,
	[partialcollectedCreatedEntry] [bit] NULL,
	[partialcollectedAutoCreatedEntry] [bit] NULL,
	[partialCollectedEntryTypeGuid] [uniqueidentifier] NULL,
	[partialcollectedAutoPostedEntry] [bit] NULL,
	[partialcollectedSanctionBankAccountBuilding] [bit] NULL,
	[partialcollectedCachBankAccountBuilding] [bit] NULL,
	[partialcollectedSanctionCustObverse] [bit] NULL,
	[partialcollectedDefAccountGuid] [uniqueidentifier] NULL,
	[partialcollectedDefAccountObverseGuid] [uniqueidentifier] NULL,
	[partialMoveCostDebit] [bit] NULL,
	[partialMoveCostCredit] [bit] NULL,
	[Endorsement] [bit] NULL,
	[EndorsementCreatedEntry] [bit] NULL,
	[EndorsementAutoCreatedEntry] [bit] NULL,
	[EndorsementAutoPostedEntry] [bit] NULL,
	[EndorsementDefAccountDebitGuid] [uniqueidentifier] NULL,
	[EndorsementDefAccountCreateGuid] [uniqueidentifier] NULL,
	[EndorsementMoveCostDebit] [bit] NULL,
	[EndorsementMoveCostCredit] [bit] NULL,
	[Returned] [bit] NULL,
	[ReturnedCreatedEntry] [bit] NULL,
	[ReturnedAutoCreatedEntry] [bit] NULL,
	[ReturnedAutoPostedEntry] [bit] NULL,
	[ReturnedSanctionBankBuilding] [bit] NULL,
	[ReturnedSanctionBankBuildingCaseCollOnly] [bit] NULL,
	[ReturnedSanctionCustAccountDefAccount] [bit] NULL,
	[ReturnedDefAccountGuid] [uniqueidentifier] NULL,
	[ReturnedDefAccountCreditGuid] [uniqueidentifier] NULL,
	[EnableAtherOperationOnReturn] [bit] NULL,
	[ReturnMoveCostDebit] [bit] NULL,
	[ReturnMoveCostCredit] [bit] NULL,
	[delayDefAccountGuid] [uniqueidentifier] NULL,
	[delayDefAccountObverseGuid] [uniqueidentifier] NULL,
	[delaySanctionCustAccountDefAccount] [bit] NULL,
	[DefPrintPath] [varchar](256) NULL,
	[NoteForm1] [varchar](256) NULL,
	[LtnNoteForm1] [varchar](256) NULL,
	[NoteForm2] [varchar](256) NULL,
	[LtnNoteForm2] [varchar](256) NULL,
	[NotePosted] [varchar](256) NULL,
	[LtnNotePosted] [varchar](256) NULL,
	[Notecollected] [varchar](256) NULL,
	[LtnNotecollected] [varchar](256) NULL,
	[NotecollectedPartial] [varchar](256) NULL,
	[LtnNotecollectedPartial] [varchar](256) NULL,
	[NoteEndorsement] [varchar](256) NULL,
	[LtnNoteEndorsement] [varchar](256) NULL,
	[NoteReturn] [varchar](256) NULL,
	[LtnNoteReturn] [varchar](256) NULL,
	[NoteCommission] [varchar](256) NULL,
	[LtnNoteCommission] [varchar](256) NULL,
	[PartialNoteCommission] [varchar](256) NULL,
	[PartialLtnNoteCommission] [varchar](256) NULL,
	[ReturnNoteCommission] [varchar](256) NULL,
	[LtnReturnNoteCommission] [varchar](256) NULL,
	[PostedDate] [int] NULL,
	[partialcollectedDate] [int] NULL,
	[collectedDate] [int] NULL,
	[EndorsementDate] [int] NULL,
	[ReturnedDate] [int] NULL,
	[AutoSMSAfterAdd] [bit] NULL,
	[SMSMsg] [varchar](256) NULL,
	[SMSMsgEn] [varchar](256) NULL,
	[SMSChecksCollectionAutoSend] [bit] NULL,
	[SMSChecksCollectionImmediate] [bit] NULL,
	[SMSChecksCollectionDay] [int] NULL,
	[SMSChecksCollectionMsg] [varchar](800) NULL,
	[SMSChecksCollectionMsgEN] [varchar](800) NULL,
	[SMSChecksPartialCollectionAutoSend] [bit] NULL,
	[SMSChecksPartialCollectionMsg] [varchar](800) NULL,
	[SMSChecksPartialCollectionMsgEN] [varchar](800) NULL,
	[SMSCheckReturnAutoSend] [bit] NULL,
	[SMSCheckReturnImmediate] [bit] NULL,
	[SMSCheckReturnDay] [int] NULL,
	[SMSCheckReturnMsg] [varchar](800) NULL,
	[SMSCheckReturnMsgEn] [varchar](800) NULL,
	[SMSChecksDue] [bit] NULL,
	[SMSChecksDueDay] [int] NULL,
	[SMSChecksDueMsg] [varchar](800) NULL,
	[SMSChecksDueMsgEn] [varchar](800) NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbCheckType]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbCheckType]
	  
	as
		Select 
			[T].*
		From
			[CheckType] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  View [dbo].[vwCheckType]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE View [dbo].[vwCheckType]
  
as
	Select
		[A].[Number],
		[A].[Guid],
		[A].[SecLvl],
		[A].[checkkind],
		[A].[Code] as [Code],
		[A].[Name] as [ArName],
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[LtnName],'') <> '') then [A].[LtnName] else [A].[Name] end as [Name], 
		[A].[ltnName],
		[A].[Menu] as [arMenu],
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[LtnMenu],'') <> '') then [A].[LtnMenu] else [A].[Menu] end as [Menu], 
		[A].[LtnMenu],
		[A].[CreatedEntry],
		[A].[AutoCreatedEntry],
		[A].[DefAccountGuid],
		[A].[Posted],
		[A].[PosdetCreatedEntry],
		[A].[PosdetAutoCreatedEntry],
		[A].[PostedDefAccountGuid],
		[A].[collected],
		[A].[collectedCreatedEntry],
		[A].[collectedAutoCreatedEntry],
		[A].[collectedSanctionBankAccountBuilding],
		[A].[collectedDefAccountGuid],
		[A].[collectedDefAccountObverseGuid] ,
		[A].[Endorsement],
		[A].[EndorsementCreatedEntry],
		[A].[EndorsementAutoCreatedEntry],
		[A].[Returned],
		[A].[ReturnedCreatedEntry],
		[A].[ReturnedAutoCreatedEntry],
		[A].[ReturnedSanctionCustAccountDefAccount],
		[A].[ReturnedDefAccountGuid],
		[A].[delayDefAccountGuid],
		[A].[delayDefAccountObverseGuid],
		[A].[delaySanctionCustAccountDefAccount],
		[A].[defprintPath],
		[A].[ShortCut],
		[A].[EnableAtherOperationOnReturn]
	From
		[vbCheckType] [A]


GO
/****** Object:  Table [dbo].[Checks]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Checks](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[Mark] [bit] NULL,
	[TypeGuid] [uniqueidentifier] NULL,
	[NO] [varchar](256) NULL,
	[InternalNO] [varchar](256) NULL,
	[ReceiptNo] [float] NULL,
	[Value] [float] NULL,
	[CurrencyGUID] [uniqueidentifier] NULL,
	[CurrencyVal] [float] NULL,
	[Date] [datetime] NULL,
	[DueDate] [datetime] NULL,
	[endDueDate] [datetime] NULL,
	[NoneDueDate] [bit] NULL,
	[BankName] [varchar](256) NULL,
	[Account] [uniqueidentifier] NULL,
	[CostGuid] [uniqueidentifier] NULL,
	[ObverseAccount] [uniqueidentifier] NULL,
	[CostObverseGuid] [uniqueidentifier] NULL,
	[Beneficiary] [varchar](256) NULL,
	[Note] [varchar](256) NULL,
	[Note2] [varchar](256) NULL,
	[Note3] [varchar](4000) NULL,
	[Note4] [varchar](4000) NULL,
	[ContractGuid] [uniqueidentifier] NULL,
	[UserGuid] [uniqueidentifier] NULL,
	[BranchGuid] [uniqueidentifier] NULL,
	[SalesManGuid] [uniqueidentifier] NULL,
	[FolderDate] [datetime] NULL,
	[FolderInternalNo] [varchar](256) NULL,
	[FolderExternalNo] [varchar](256) NULL,
	[CheckCreateEntry] [bit] NULL,
	[IsRounded] [bit] NULL,
	[Deposition] [bit] NULL,
	[Lawsuit] [bit] NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbChecks]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbChecks]
	  
	as
		Select 
			[T].*
		From
			[Checks] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  View [dbo].[vwChecks]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE View [dbo].[vwChecks]
  
as
	select
		[C].[Number], [C].[Guid], [C].[SecLvl], [C].[Mark], [C].[TypeGuid], [C].[NO], [C].[InternalNO], 
		[C].[ReceiptNo], [C].[Value], [C].[CurrencyGUID], [C].[CurrencyVal], [C].[Date], 
		Case when Datepart(Year , [C].[DueDate]) = 1900 then Null else [C].[DueDate] end as [DueDate], 
		dbo.fnDate(Case when Datepart(Year , [C].[DueDate]) = 1900 then Null else [C].[DueDate] end) as [DueDateHG],
		Case when Datepart(Year , [C].[endDueDate]) = 1900 then Null else [C].[endDueDate] end as [endDueDate],
		[C].[NoneDueDate], 
		[C].[BankName], 
		[C].[Account], 
		[C].[CostGuid], 
		[C].[ObverseAccount], 
		[C].[CostObverseGuid], 
		[C].[Beneficiary], 
		[C].[Note], 
		[C].[Note2], 
		[C].[Note3], 
		[C].[Note4], 
		[C].[ContractGuid], 
		[C].[UserGuid], 
		[C].[BranchGuid], 
		[C].[SalesManGuid], 
		[C].[FolderDate], 
		[C].[FolderInternalNo], 
		[C].[FolderExternalNo], 
		[C].[CheckCreateEntry], 
		[C].[IsRounded], 
		[C].[Deposition],
		[C].[Lawsuit],
		[Ac].[Code] as [AccountCode],
		[Ac].[Name] as [AccountName],
		[Ac].[ArName] as [AccountNamear],
		[Ac].[LtnName] as [AccountNameLtn],
		[Ac2].[Code] as [ObverseAccountCode],
		[Ac2].[Name] as [ObverseAccountName],
		[T].[Name] as [TypeName],
		[M].[Code] as [CurrencyCode],
		[M].[Name] as [CurrencyName],
		[T].[Code] as [TypeCode],
		[T].[checkkind]
	From
		[vbchecks] [C]
		inner join [vwCheckType] [T] On [C].[TypeGuid] = [T].[Guid]
		inner join [vwCurrency] [M] on [M].[Guid] = [C].[CurrencyGuid]
		inner join [vwAccount] [Ac] on [Ac].[Guid] = [C].[Account]
		inner join [vwAccount] [Ac2] on [Ac2].[Guid] = [C].[ObverseAccount]

-- 		left join [vwChecksCollection] [C] on [C].[CheckGuid] = [P].[Guid] and [C].[Kind] = 0
-- 		left join [vwChecksCollection] [C1] on [C1].[CheckGuid] = [P].[Guid] and [C1].[Kind] = 1
-- 		left join [vwChecksCollection] [C2] on [C2].[CheckGuid] = [P].[Guid] and [C2].[Kind] = 2
-- 		left join [vwChecksCollection] [C3] on [C3].[CheckGuid] = [P].[Guid] and [C3].[Kind] = 3
-- 		left join [ChecksPartialCollection]  [C4] on [C4].[CheckGuid] = [P].[Guid] and [C3].[Kind] = 3


GO
/****** Object:  View [dbo].[vwCheckPartialCollection]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE view [dbo].[vwCheckPartialCollection]
  
as
	Select 
		[P].[Number],
		[P].[TypeName],
		[Cu].[Name] as [CustName],
		[Cu].[ArName] as [CustArName],
		[Cu].[LtnName] as [CustLtnName]
		,[P].[No]
		,[P].[Value]
		,[P].[Date]
		,[P].[DueDate]
		,[P].[BankName]
		,[P].[Note]
		,[P].[Note3]
		,DateDiff(Day,  [C3].[Date], GetDate()) as [DayDiff]
		,[L].[BuildingName]
		,[L].[BuildingArName]
		,[L].[BuildingltnName]
		,[L].[FlatNo]
		,[L].[FloorNo]
		,[L].[ContractNo]
		,[C3].[Date] as [CollectionDate]
		,(Select SUM(Value) From [ChecksPartialCollection] where [CheckGuid] = P.Guid) as [CollectionValue]
		,[P].[Guid]

		,[P].[AccountCode]
		,[P].[AccountName]

		,[L].[Emirate]
		,[L].[BuildingArea]
		,[L].[Suburb]
		,[L].[Street]
		,[L].[BasinNo]
		,[L].[PieceNo]
		,[L].[BuildingNo]
		,[L].[BondType]
		,[L].[BondNo]
		,[L].[FlatKind]
		,[L].[ApartmentType]
		,[L].[Class]
		,[L].[FlatArea]
		,[L].[FlatAreaunity]
		,[Cu].[Mobile] as [CustomerMobile]
		,[L].[BuildingGuid]
		,[P].[CurrencyGuid] as [CheckCurrencyGuid]
	From
		[vwChecks] [P]
		left join [vwCustomer] [Cu] on [Cu].[AcGuid] = [P].[Account]
		left join [vwLeaseApartment] [L] on [L].[Guid] = [P].[ContractGuid]
		inner join [ChecksPartialCollection] [C3] on [C3].[CheckGuid] = [P].[Guid] 

--		left join [RepSMS] [SMS2] on [SMS2].[ObjGuid] = [P].[Guid] and [SMS2].[IdReport] = 1200

GO
/****** Object:  Table [dbo].[Store]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Store](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[Code] [varchar](256) NULL,
	[Name] [varchar](256) NULL,
	[LtnName] [varchar](256) NULL,
	[Address] [varchar](256) NULL,
	[warehouseman] [varchar](256) NULL,
	[Note] [varchar](256) NULL,
	[ParentGuid] [uniqueidentifier] NULL,
	[AcFinalGUID] [uniqueidentifier] NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbStore]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbStore]
	  
	as
		Select 
			[T].*
		From
			[Store] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  Table [dbo].[BuildingOffer]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BuildingOffer](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[Name] [varchar](256) NULL,
	[LtnName] [varchar](256) NULL,
	[BuildingCode] [varchar](256) NULL,
	[Emirate] [varchar](256) NULL,
	[Area] [varchar](256) NULL,
	[Suburb] [varchar](256) NULL,
	[Street] [varchar](256) NULL,
	[BasinNo] [varchar](256) NULL,
	[PieceNo] [varchar](256) NULL,
	[FloorCount] [int] NULL,
	[ApartmentCount] [int] NULL,
	[ApartmentCountOfFloor] [int] NULL,
	[ShopCount] [int] NULL,
	[Costunity] [float] NULL,
	[Note] [varchar](256) NULL,
	[BHouseFloor] [int] NULL,
	[BHouseFlatCount] [int] NULL,
	[MBalanceFloor] [int] NULL,
	[MBalanceFlatCount] [int] NULL,
	[OfficeFloor] [int] NULL,
	[OfficeCount] [int] NULL,
	[ParkingFloor] [int] NULL,
	[ParkingCount] [int] NULL,
	[ParkingFloorUnder] [int] NULL,
	[ParkingCountUnder] [int] NULL,
	[FlatDriverCount] [int] NULL,
	[FlatServantCount] [int] NULL,
	[StoreCount] [int] NULL,
	[BuildingNo] [varchar](256) NULL,
	[BondType] [varchar](256) NULL,
	[BondNo] [varchar](256) NULL,
	[BondDate] [datetime] NULL,
	[OfferKind] [int] NULL,
	[OfferValue] [float] NULL,
	[Delegated] [varchar](256) NULL,
	[MaxOfferValue] [float] NULL,
	[LandArea] [float] NULL,
	[LandAreaUnit] [varchar](256) NULL,
	[CustName] [varchar](256) NULL,
	[CustPhone] [varchar](256) NULL,
	[CustMobile] [varchar](256) NULL,
	[CustAddress] [varchar](256) NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UK_BuildingOffer_Name_UNIQUE] UNIQUE NONCLUSTERED 
(
	[Name] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbBuildingOffer]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbBuildingOffer]
	  
	as
		Select 
			[T].*
		From
			[BuildingOffer] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  View [dbo].[vwBuildingOffer]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE view [dbo].[vwBuildingOffer]
  
as
	SELECT 
		[Name] as [ArName],
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([LtnName],'') <> '') then [LtnName] else [Name] end as [Name],
		[Number], [Guid], [SecLvl], 
		[LtnName], 
		[BuildingCode], 
		[Emirate], 
		[Area], 
		[Suburb], 
		[Street], 
		[BasinNo], 
		[PieceNo], 
		[FloorCount], 
		[ApartmentCount], 
		[ApartmentCountOfFloor], 
		[ShopCount], 
		[Costunity], 
		[Note], 
		[BHouseFloor], 
		[BHouseFlatCount], 
		[MBalanceFloor], 
		[MBalanceFlatCount], 
		[OfficeFloor], 
		[OfficeCount], 
		[ParkingFloor], 
		[ParkingCount], 
		[ParkingFloorUnder], 
		[ParkingCountUnder], 
		[FlatDriverCount], 
		[FlatServantCount], 
		[StoreCount], 
		[BuildingNo], 
		[BondType], 
		[BondNo], 
		[BondDate], 
		[OfferKind], 
		[OfferValue]
	FROM 
		[vbBuildingOffer]

GO
/****** Object:  Table [dbo].[BillType]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BillType](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[Code] [varchar](256) NULL,
	[Name] [varchar](256) NULL,
	[LtnName] [varchar](256) NULL,
	[BillKind] [int] NULL,
	[Menu] [varchar](256) NULL,
	[LtnMenu] [varchar](256) NULL,
	[ShortCut] [varchar](256) NULL,
	[DefPrintPath] [varchar](256) NULL,
	[BillBarcode] [bit] NULL,
	[Note] [varchar](256) NULL,
	[PayType] [int] NULL,
	[Color1] [float] NULL,
	[Color2] [float] NULL,
	[DefMatAccountGuid] [uniqueidentifier] NULL,
	[DefCashAccountGuid] [uniqueidentifier] NULL,
	[DefCostGuid] [uniqueidentifier] NULL,
	[DefStoreGuid] [uniqueidentifier] NULL,
	[DefDiscountAccountGuid] [uniqueidentifier] NULL,
	[DefExtraAccountGuid] [uniqueidentifier] NULL,
	[CurrencyGuid] [uniqueidentifier] NULL,
	[PostToStores] [bit] NULL,
	[PostToStoresAuto] [bit] NULL,
	[EntryCreated] [bit] NULL,
	[EntryCreatedAuto] [bit] NULL,
	[AutoPostedEntry] [bit] NULL,
	[OpPrice] [int] NULL,
	[SpecificPrice] [int] NULL,
	[PriceEffected] [bit] NULL,
	[DetailEntryByMat] [bit] NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbBillType]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbBillType]
	  
	as
		Select 
			[T].*
		From
			[BillType] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  Table [dbo].[Bill]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Bill](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[TypeGuid] [uniqueidentifier] NULL,
	[Date] [datetime] NULL,
	[CustGuid] [uniqueidentifier] NULL,
	[CurrencyGuid] [uniqueidentifier] NULL,
	[CurrencyVal] [float] NULL,
	[PayType] [int] NULL,
	[StoreGuid] [uniqueidentifier] NULL,
	[CustAccGuid] [uniqueidentifier] NULL,
	[CostGuid] [uniqueidentifier] NULL,
	[BranchGuid] [uniqueidentifier] NULL,
	[Class] [varchar](256) NULL,
	[Note] [varchar](256) NULL,
	[EntryGuid] [uniqueidentifier] NULL,
	[EntryNumber] [int] NULL,
	[CheckCreateEntry] [bit] NULL,
	[ItemsTotal] [float] NULL,
	[ItemsDiscount] [float] NULL,
	[ItemsExtra] [float] NULL,
	[BuExtra] [float] NULL,
	[BuDiscount] [float] NULL,
	[BuOnly] [varchar](500) NULL,
	[ContractGuid] [uniqueidentifier] NULL,
	[IsPosted] [bit] NULL,
	[AddFld1] [varchar](255) NULL,
	[AddFld2] [varchar](255) NULL,
	[AddFld3] [varchar](255) NULL,
	[AddFld4] [varchar](255) NULL,
	[AddFld5] [varchar](255) NULL,
	[AddFld6] [varchar](255) NULL,
	[AddFld7] [varchar](255) NULL,
	[AddFld8] [varchar](255) NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbBill]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbBill]
	  
	as
		Select 
			[T].*
		From
			[Bill] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  Table [dbo].[HEntry]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[HEntry](
	[Guid] [uniqueidentifier] NOT NULL,
	[Number] [int] NOT NULL IDENTITY(1,1),
	[SecLvl] [int] NULL,
	[Mark] [bit] NULL,
	[Date] [datetime] NULL,
	[CurrencyGuid] [uniqueidentifier] NULL,
	[CurrencyVal] [float] NULL,
	[Note] [varchar](256) NULL,
	[ParentKind] [int] NULL,
	[UserGuid] [uniqueidentifier] NULL,
	[BranchGuid] [uniqueidentifier] NULL,
	[IsPosted] [bit] NULL,
	[Debit] [float] NULL,
	[Credit] [float] NULL,
	[ItemCount] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [HEntry_Unique_Number] UNIQUE NONCLUSTERED 
(
	[Number] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Lawsuit]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Lawsuit](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[ContractGuid] [uniqueidentifier] NULL,
	[StartDate] [datetime] NULL,
	[No] [varchar](256) NULL,
	[OpenDate] [datetime] NULL,
	[ExecDate] [datetime] NULL,
	[StopExec] [bit] NULL,
	[StopExecDate] [datetime] NULL,
	[StopExecNote] [varchar](256) NULL,
	[StopPayDate] [datetime] NULL,
	[QuittanceDate] [datetime] NULL,
	[QuittanceElectricityDate] [datetime] NULL,
	[Rent] [float] NULL,
	[IsEnded] [bit] NULL,
	[EndDate] [datetime] NULL,
	[ExeNo] [varchar](256) NULL,
	[CurrencyGUID] [uniqueidentifier] NULL,
	[CurrencyVal] [float] NULL,
	[LawyerRent] [float] NULL,
	[LawyerRentDate] [datetime] NULL,
	[LawyerEntry] [bit] NULL,
	[LawyerDebitAccountGuid] [uniqueidentifier] NULL,
	[LawyerCreditAccountGuid] [uniqueidentifier] NULL,
	[LawyerNote] [varchar](256) NULL,
	[maintenanceRent] [float] NULL,
	[maintenanceRentDate] [datetime] NULL,
	[maintenanceEntry] [bit] NULL,
	[maintenanceDebitAccountGuid] [uniqueidentifier] NULL,
	[maintenanceCreditAccountGuid] [uniqueidentifier] NULL,
	[maintenanceNote] [varchar](256) NULL,
	[Furniture] [float] NULL,
	[FurnitureDate] [datetime] NULL,
	[FurnitureEntry] [bit] NULL,
	[FurnitureDebitAccountGuid] [uniqueidentifier] NULL,
	[FurnitureCreditAccountGuid] [uniqueidentifier] NULL,
	[FurnitureNote] [varchar](256) NULL,
	[Note] [varchar](256) NULL,
	[EntryGuid1] [uniqueidentifier] NULL,
	[EntryGuid2] [uniqueidentifier] NULL,
	[EntryGuid3] [uniqueidentifier] NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Secondary_Entry]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Secondary_Entry](
	[Guid] [uniqueidentifier] NOT NULL,
	[TypeGuid] [uniqueidentifier] NULL,
	[Number] [int] NOT NULL IDENTITY(1,1),
	[SecLvl] [int] NULL,
	[Mark] [bit] NULL,
	[Kind] [int] NULL,
	[AccountGuid] [uniqueidentifier] NULL,
	[Date] [datetime] NULL,
	[Note] [varchar](256) NULL,
	[CurrencyGuid] [uniqueidentifier] NULL,
	[CurrencyVal] [float] NULL,
	[UserGuid] [uniqueidentifier] NULL,
	[BranchGuid] [uniqueidentifier] NULL,
	[SalesManGuid] [uniqueidentifier] NULL,
	[ContractGuid] [uniqueidentifier] NULL,
	[CheckCreateEntry] [bit] NULL,
	[IsRounded] [bit] NULL,
	[ReceiptNo] [varchar](256) NULL,
	[Debit] [float] NULL,
	[Credit] [float] NULL,
	[Itemcount] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [Secondary_Entry_Unique_Number] UNIQUE NONCLUSTERED 
(
	[Number] ASC,
	[TypeGuid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DEntry]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DEntry](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NULL,
	[ParentGuid] [uniqueidentifier] NULL,
	[AcGuid] [uniqueidentifier] NULL,
	[Debit] [float] NULL,
	[Credit] [float] NULL,
	[CurrencyGuid] [uniqueidentifier] NULL,
	[CurrencyVal] [float] NULL,
	[ObverseAcGuid] [uniqueidentifier] NULL,
	[CostGuid] [uniqueidentifier] NULL,
	[Note] [varchar](256) NULL,
	[IsVisible] [bit] NULL
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbHEntry]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbHEntry]
	  
	as
		Select 
			[T].*
		From
			[HEntry] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  View [dbo].[vwDetailEntry]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwDetailEntry]
  
as
	Select 
		[H].[Number] as [HNumber],
		[H].[Date] as [HDate],
		[H].[Note] as [HNote],
		[D].[Number] as [DNumber],
		[Ac].[Code]+'-'+[Ac].[Name] as [Account],
		[D].[Debit] as [DDebit],
		[D].[Credit] as [DCredit],
		[My].[Name] as [CurrencyName],
		[D].[CurrencyGuid],
		[D].[CurrencyVal] as [CurrencyVal],
		[D].[Note] as [DNote],
		[D].[AcGuid],
		[H].[Guid] as [HGuid]
	from 
		[vbHentry] [H] 
		inner join [Dentry] [D] On [D].[ParentGuid] = [H].[Guid]
		inner join [vwCurrency] [My] On [My].[Guid] = [D].[CurrencyGuid]
		inner join [vwAccount] [Ac] On [Ac].[Guid] = [D].[AcGuid]


GO
/****** Object:  View [dbo].[vwLawsuitCachPayment]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwLawsuitCachPayment]
  
as
	Select
		[L].[Guid] as [LawsuitGuid],
		[H].[HNumber] as [Number],
		[H].[DNumber],
		[H].[HDate] as [Date],
		[H].[DCredit] as [Value],
		[H].[CurrencyGuid],
		[H].[CurrencyName] as [Currency],
		[H].[CurrencyVal],
		[H].[HNote],
		[H].[DNote],
		[h].AcGuid,
		1 as [Print],
		[S].[contractGuid],
		[H].[HGuid] as [Guid]
	from
		Secondary_Entry S
		inner join HEntry E on E.Guid = S.Guid
		inner join [vwDetailEntry] [H] on [H].[HGuid] = [E].[Guid] 
		inner join Lawsuit L on L.Guid = S.contractGuid
	where
		[H].[DCredit] <> 0


GO
/****** Object:  Table [dbo].[ApartmentOffer]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ApartmentOffer](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[CardKind] [int] NULL,
	[NO] [varchar](256) NULL,
	[Building] [varchar](256) NULL,
	[Customer] [varchar](256) NULL,
	[FloorNo] [varchar](256) NULL,
	[Area] [float] NULL,
	[Address] [varchar](800) NULL,
	[unity] [varchar](256) NULL,
	[ApartmentType] [varchar](256) NULL,
	[FlatKind] [varchar](256) NULL,
	[Class] [varchar](256) NULL,
	[Overlooking] [varchar](256) NULL,
	[Note] [varchar](256) NULL,
	[FlatOwner] [int] NULL,
	[Details] [varchar](256) NULL,
	[BathroomCount] [int] NULL,
	[BalconyCount] [int] NULL,
	[WaterCounter] [varchar](256) NULL,
	[ElectricityCounter] [varchar](256) NULL,
	[OfferKind] [int] NULL,
	[OfferValue] [float] NULL,
	[Delegated] [varchar](256) NULL,
	[CustPhone] [varchar](256) NULL,
	[CustMobile] [varchar](256) NULL,
	[MaxOfferValue] [float] NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UK_ApartmentOfferBuildingGuid_NO_UNIQUE] UNIQUE NONCLUSTERED 
(
	[Building] ASC,
	[NO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbApartmentOffer]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbApartmentOffer]
	  
	as
		Select 
			[T].*
		From
			[ApartmentOffer] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  View [dbo].[vwApartmentOffer]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE View [dbo].[vwApartmentOffer]
  
as

	Select
		[A].*
	From
		[vbApartmentOffer] [A]


GO
/****** Object:  Table [dbo].[CalcQty]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CalcQty](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[Name] [varchar](256) NULL,
	[Equality] [varchar](8000) NULL,
	[Note] [varchar](256) NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbCalcQty]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbCalcQty]
	  
	as
		Select 
			[T].*
		From
			[CalcQty] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  Table [dbo].[ShopOffer]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ShopOffer](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[NO] [varchar](256) NULL,
	[Building] [varchar](256) NULL,
	[Customer] [varchar](256) NULL,
	[Area] [float] NULL,
	[Unity] [varchar](256) NULL,
	[Address] [varchar](256) NULL,
	[ShopKind] [varchar](256) NULL,
	[Description] [varchar](256) NULL,
	[Overlooking] [varchar](256) NULL,
	[Note] [varchar](256) NULL,
	[Details] [varchar](256) NULL,
	[WaterCounter] [varchar](256) NULL,
	[ElectricityCounter] [varchar](256) NULL,
	[OfferKind] [int] NULL,
	[OfferValue] [float] NULL,
	[Delegated] [varchar](256) NULL,
	[CustPhone] [varchar](256) NULL,
	[CustMobile] [varchar](256) NULL,
	[MaxOfferValue] [float] NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbShopOffer]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbShopOffer]
	  
	as
		Select 
			[T].*
		From
			[ShopOffer] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  View [dbo].[vwShopOffer]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE View [dbo].[vwShopOffer]
  
as

	Select
		[A].*
	From
		[vbShopOffer] [A]


GO
/****** Object:  Table [dbo].[QtyGroup]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[QtyGroup](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[GroupGuid] [uniqueidentifier] NULL,
	[CalcQtyGuid] [uniqueidentifier] NULL,
	[Note] [varchar](256) NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbQtyGroup]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbQtyGroup]
	  
	as
		Select 
			[T].*
		From
			[QtyGroup] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  Table [dbo].[LandOffer]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LandOffer](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[LandNo] [varchar](256) NULL,
	[Name] [varchar](256) NULL,
	[ltnName] [varchar](256) NULL,
	[Customer] [varchar](256) NULL,
	[Address] [varchar](256) NULL,
	[OfferKind] [int] NULL,
	[OfferValue] [float] NULL,
	[City] [varchar](256) NULL,
	[Region] [varchar](256) NULL,
	[Space] [varchar](256) NULL,
	[Area] [float] NULL,
	[Unity] [varchar](256) NULL,
	[license] [varchar](256) NULL,
	[Details] [varchar](256) NULL,
	[LandType] [varchar](256) NULL,
	[Side] [varchar](256) NULL,
	[StreetCount] [int] NULL,
	[Buildble] [bit] NULL,
	[Delegated] [varchar](256) NULL,
	[CustPhone] [varchar](256) NULL,
	[CustMobile] [varchar](256) NULL,
	[MaxOfferValue] [float] NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbLandOffer]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbLandOffer]
	  
	as
		Select 
			[T].*
		From
			[LandOffer] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  View [dbo].[vwLandOffer]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE view [dbo].[vwLandOffer]
  
as
	Select 
		[Number], [Guid], [SecLvl], [LandNo], [ltnName], [Customer], 
		[Address], [OfferKind], [OfferValue], [City], [Region], [Space], 
		[Area], [Unity], [license], [Details], [LandType], [Side], [StreetCount], [Buildble]
		,Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[LtnName],'') <> '') then [A].[LtnName] else [A].[Name] end as [Name]
	From
		[vbLandOffer] [A]
		

GO
/****** Object:  Table [dbo].[TransType]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TransType](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[Code] [varchar](256) NULL,
	[Name] [varchar](256) NULL,
	[LtnName] [varchar](256) NULL,
	[Menu] [varchar](256) NULL,
	[LtnMenu] [varchar](256) NULL,
	[ShortCut] [varchar](256) NULL,
	[DefPrintPath] [varchar](256) NULL,
	[Note] [varchar](256) NULL,
	[Color1] [float] NULL,
	[Color2] [float] NULL,
	[DefCostinGuid] [uniqueidentifier] NULL,
	[DefStoreInGuid] [uniqueidentifier] NULL,
	[DefCostOutGuid] [uniqueidentifier] NULL,
	[DefStoreOutGuid] [uniqueidentifier] NULL,
	[PostToStores] [bit] NULL,
	[PostToStoresAuto] [bit] NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbTransType]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbTransType]
	  
	as
		Select 
			[T].*
		From
			[TransType] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  Table [dbo].[VillaOffer]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[VillaOffer](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[WaterCounter] [int] NULL,
	[ElectricityCounter] [float] NULL,
	[ComplexName] [varchar](256) NULL,
	[Emirate] [varchar](256) NULL,
	[Area] [varchar](256) NULL,
	[Street] [varchar](256) NULL,
	[Suburb] [varchar](256) NULL,
	[PieceNo] [varchar](256) NULL,
	[BasinNo] [varchar](256) NULL,
	[VillaNo] [varchar](256) NULL,
	[DocType] [varchar](256) NULL,
	[DocNo] [varchar](256) NULL,
	[DocDate] [datetime] NULL,
	[Customer] [varchar](256) NULL,
	[Address] [varchar](256) NULL,
	[OfferKind] [int] NULL,
	[OfferValue] [float] NULL,
	[FloorCount] [int] NULL,
	[BalconyCount] [int] NULL,
	[RoomCount] [int] NULL,
	[OtherRoomCount] [int] NULL,
	[ServiceRoomCount] [int] NULL,
	[BathroomCount] [int] NULL,
	[StairsInternal] [bit] NULL,
	[RoomState] [varchar](256) NULL,
	[LandArea] [varchar](256) NULL,
	[LandAreaBuilding] [varchar](256) NULL,
	[FinishingState] [varchar](256) NULL,
	[SecurityType] [varchar](256) NULL,
	[SecuritySystem] [bit] NULL,
	[wall] [varchar](256) NULL,
	[wallState] [varchar](256) NULL,
	[lightingCount] [int] NULL,
	[ParkingCount] [int] NULL,
	[ParkingArea] [varchar](256) NULL,
	[ParkingShaded] [bit] NULL,
	[PoolCount] [int] NULL,
	[PoolState] [varchar](256) NULL,
	[PoolSystem] [varchar](256) NULL,
	[PlaygroundCount] [int] NULL,
	[PlaygroundArea] [varchar](256) NULL,
	[GardenCount] [int] NULL,
	[GardenArea] [varchar](256) NULL,
	[GardenState] [varchar](256) NULL,
	[Details] [varchar](512) NULL,
	[Delegated] [varchar](256) NULL,
	[CustPhone] [varchar](256) NULL,
	[CustMobile] [varchar](256) NULL,
	[MaxOfferValue] [float] NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbVillaOffer]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbVillaOffer]
	  
	as
		Select 
			[T].*
		From
			[VillaOffer] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  View [dbo].[vwVillaOffer]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE view [dbo].[vwVillaOffer]
  
as
	Select 
		*
	From
		[vbVillaOffer] [A]


GO
/****** Object:  Table [dbo].[Trans]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Trans](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[TypeGuid] [uniqueidentifier] NULL,
	[Date] [datetime] NULL,
	[CurrencyGuid] [uniqueidentifier] NULL,
	[CurrencyVal] [float] NULL,
	[PayType] [int] NULL,
	[StoreOutGuid] [uniqueidentifier] NULL,
	[AcMatOutGuid] [uniqueidentifier] NULL,
	[TmpAcOutGuid] [uniqueidentifier] NULL,
	[CostOutGuid] [uniqueidentifier] NULL,
	[StoreInGuid] [uniqueidentifier] NULL,
	[AcMatInGuid] [uniqueidentifier] NULL,
	[TmpAcInGuid] [uniqueidentifier] NULL,
	[CostInGuid] [uniqueidentifier] NULL,
	[BranchGuid] [uniqueidentifier] NULL,
	[Class] [varchar](256) NULL,
	[Note] [varchar](256) NULL,
	[EntryOutGuid] [uniqueidentifier] NULL,
	[EntryInGuid] [uniqueidentifier] NULL,
	[EntryOutNumber] [int] NULL,
	[EntryInNumber] [int] NULL,
	[CheckCreateEntry] [bit] NULL,
	[IsPosted] [bit] NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbTrans]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbTrans]
	  
	as
		Select 
			[T].*
		From
			[Trans] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  Table [dbo].[arv_FilterParams]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[arv_FilterParams](
	[ParentGuid] [uniqueidentifier] NULL,
	[id] [int] NULL,
	[ParamName] [varchar](255) NULL,
	[ParamType] [varchar](255) NULL,
	[ParamDef] [varchar](255) NULL,
	[ParamFld] [varchar](255) NULL
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwarv_FilterParams]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwarv_FilterParams]
 
as
	Select 
		C.ParamName as Caption ,
		'Prm' + Cast(id  as varchar(20)) as Name ,
		Case 
			when (C.ParamType = 'Float') or (C.ParamType = 'ÑÞã ÚÔÑí') then 'Float'
			when (C.ParamType = 'Date') or (C.ParamType = 'ÊÇÑíÎ') then 'Date'
			when (C.ParamType = 'char') or (C.ParamType = 'äÕ') then 'text'
			when (C.ParamType = 'Bit') or (C.ParamType = 'äÚã/áÇ') then 'bit'
			when (C.ParamType = '')  then 'Guid'
			when (C.ParamType = 'Time') or (C.ParamType = 'æÞÊ') then 'Time'
			when (C.ParamType = 'integer') or (C.ParamType = 'ÑÞã ÕÍíÍ') then 'int'
		end as [ColType],
		Case 
			when (C.ParamType = 'Float') or (C.ParamType = 'ÑÞã ÚÔÑí') then 1
			when (C.ParamType = 'Date') or (C.ParamType = 'ÊÇÑíÎ') then 2
			when (C.ParamType = 'char') or (C.ParamType = 'äÕ') then 3
			when (C.ParamType = 'Bit') or (C.ParamType = 'äÚã/áÇ') then 4
			when (C.ParamType = '')  then 5
			when (C.ParamType = 'Time') or (C.ParamType = 'æÞÊ') then 6
			when (C.ParamType = 'integer') or (C.ParamType = 'ÑÞã ÕÍíÍ') then 7
		end as [ColintType],
		C.ParamDef,
		C.ParamFld,
		C.ParentGuid,
		C.id
	from 
		arv_FilterParams C


GO
/****** Object:  Table [dbo].[FlatContractReceiptNO]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FlatContractReceiptNO](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[ParentGuid] [uniqueidentifier] NULL,
	[No] [varchar](256) NULL,
	[Date] [datetime] NULL,
	[Note] [varchar](256) NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbFlatContractReceiptNO]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbFlatContractReceiptNO]
	  
	as
		Select 
			[T].*
		From
			[FlatContractReceiptNO] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  Table [dbo].[ParkingContractReceiptNO]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ParkingContractReceiptNO](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[ParentGuid] [uniqueidentifier] NULL,
	[No] [varchar](256) NULL,
	[Date] [datetime] NULL,
	[Note] [varchar](256) NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbParkingContractReceiptNO]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbParkingContractReceiptNO]
	  
	as
		Select 
			[T].*
		From
			[ParkingContractReceiptNO] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  Table [dbo].[LandContractReceiptNO]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LandContractReceiptNO](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[ParentGuid] [uniqueidentifier] NULL,
	[No] [varchar](256) NULL,
	[Date] [datetime] NULL,
	[Note] [varchar](256) NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbLandContractReceiptNO]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbLandContractReceiptNO]
	  
	as
		Select 
			[T].*
		From
			[LandContractReceiptNO] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  Table [dbo].[EntryDateType]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[EntryDateType](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[Code] [varchar](256) NULL,
	[Name] [varchar](256) NULL,
	[ltnName] [varchar](256) NULL,
	[Menu] [varchar](256) NULL,
	[LtnMenu] [varchar](256) NULL,
	[ShortCut] [varchar](256) NULL,
	[DefAccountGuid] [uniqueidentifier] NULL,
	[DebitField] [bit] NULL,
	[CreditField] [bit] NULL,
	[DebitCaption] [varchar](256) NULL,
	[CreditCaption] [varchar](256) NULL,
	[LtnDebitCaption] [varchar](256) NULL,
	[LtnCreditCaption] [varchar](256) NULL,
	[CkCurrency] [bit] NULL,
	[CkCost] [bit] NULL,
	[CkNote] [bit] NULL,
	[Color1] [int] NULL,
	[Color2] [int] NULL,
	[AutoPostedEntry] [bit] NULL,
	[OpMoveCostwithDefAccount] [bit] NULL,
	[NeedCostItem] [bit] NULL,
	[NeedNoteItem] [bit] NULL,
	[AutoSMSAfterAdd] [bit] NULL,
	[SMSMsg] [varchar](256) NULL,
	[SMSMsgEn] [varchar](256) NULL,
	[DefPrintPath] [varchar](256) NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbEntryDateType]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbEntryDateType]
	  
	as
		Select 
			[T].*
		From
			[EntryDateType] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  Table [dbo].[ContractLog]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ContractLog](
	[Guid] [uniqueidentifier] NOT NULL,
	[ContractGuid] [uniqueidentifier] NULL,
	[Number] [int] NOT NULL IDENTITY(1,1),
	[SecLvl] [int] NULL,
	[Date] [datetime] NULL,
	[UserGuid] [uniqueidentifier] NULL,
	[Note] [varchar](2500) NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbContractLog]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbContractLog]
	  
	as
		Select 
			[T].*
		From
			[ContractLog] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  View [dbo].[vwContractLog]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwContractLog]
  
as
	Select
		u.[LoginName] as [UserName],
		L.*
	From
		[vbContractLog] [L]
		inner join Realty_Users [U] on [u].Guid = [L].[UserGuid]

GO
/****** Object:  Table [dbo].[ContractCachPayment]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ContractCachPayment](
	[ContractGuid] [uniqueidentifier] NULL,
	[EntryGuid] [uniqueidentifier] NULL
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwContractCachPayment]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwContractCachPayment]
  
as
	Select Distinct
		[C].[ContractGuid],
		[H].[HNumber] as [Number],
		S.Number as [RecieptVoucherNumber],
		[H].[DNumber],
		[H].[HDate] as [Date],
		isNull([H].[DCredit],0) + isNull([H].[DDebit],0) as [Value],
		[H].[CurrencyGuid],
		[H].[CurrencyName] as [Currency],
		[H].[CurrencyVal],
		[H].[HNote],
		[H].[DNote],
		[h].AcGuid,
		(Select Number from Secondary_Entry where Guid = [C].[EntryGuid] ) as SNumber,
		1 as [Print],
		[H].[HGuid] as [Guid]
	from 
		[ContractCachPayment] [C]
		inner join [vwDetailEntry] [H] on [H].[HGuid] = [C].[EntryGuid] 
		left join Secondary_Entry S on S.Guid = H.[HGuid]
		inner join LeaseApartment L on L.Guid = C.contractGuid and L.CustAccountGuid = H.AcGuid
	where
		((isNull([H].[DCredit],0) + isNull([H].[DDebit],0) <> 0) and L.PayType = 0)
		or ((isNull([H].[DCredit],0)  <> 0) and L.PayType <> 0)


GO
/****** Object:  Table [dbo].[AssetsGroup]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AssetsGroup](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[Code] [varchar](256) NULL,
	[Name] [varchar](256) NULL,
	[LtnName] [varchar](256) NULL,
	[Note] [varchar](256) NULL,
	[ParentGuid] [uniqueidentifier] NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbAssetsGroup]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbAssetsGroup]
	  
	as
		Select 
			[T].*
		From
			[AssetsGroup] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  Table [dbo].[RealtyRestrained]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RealtyRestrained](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[RestrainedCanceld] [bit] NULL,
	[CustomerGuid] [uniqueidentifier] NULL,
	[BuildingGuid] [uniqueidentifier] NULL,
	[FlatGuid] [uniqueidentifier] NULL,
	[ParkingNo] [uniqueidentifier] NULL,
	[VillaGuid] [uniqueidentifier] NULL,
	[LandGuid] [uniqueidentifier] NULL,
	[Shop] [uniqueidentifier] NULL,
	[RealtyType] [int] NULL,
	[EditDate] [datetime] NULL,
	[Date] [datetime] NULL,
	[EndDate] [datetime] NULL,
	[EndDateSpecific] [bit] NULL,
	[Note] [varchar](256) NULL,
	[Pay] [bit] NULL,
	[PayValue] [float] NULL,
	[CurrencyGuid] [uniqueidentifier] NULL,
	[Currencyval] [float] NULL,
	[PayType] [int] NULL,
	[DebitAccountGuid] [uniqueidentifier] NULL,
	[CreditAccountGuid] [uniqueidentifier] NULL,
	[CostDebitGuid] [uniqueidentifier] NULL,
	[CostCreditGuid] [uniqueidentifier] NULL,
	[CheckTypeGuid] [uniqueidentifier] NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbShop]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbShop]
	  
	as
		Select 
			[T].*
		From
			[Shop] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  View [dbo].[vwShopAll]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE View [dbo].[vwShopAll]
  
as

	Select
		[A].[Number], 
		[A].[Guid], 
		[A].[SecLvl], 
		[A].[BuildingGuid], 
		[A].[Area], 
		[A].[Unity], 
		[A].[CostPrice], 
		[A].[CostCurrencyGUID], 
		[A].[Rent], 
		[A].[RentCurrencyGUID], 
		[A].[Sale], 
		[A].[SaleCurrencyGUID], 
		[A].[Note], 
		[A].[CostGuid], 
		[A].[FlatOwner], 
		[A].[CustGuid], 
		[A].[Details], 
		[A].[OfferState], 
		[A].[OfferType], 
		[A].[Restrained], 
		[A].[RestrainedUserGuid], 
		[A].[ShopKind], 
		[A].[Description], 
		[A].[WaterCounter], 
		[A].[ElectricityCounter], 
		[A].[Overlooking], 
		[A].[Judicial],
		[A].[Class],
		Case when [A].[Judicial] = 1 then dbo.SC('äÚã') else dbo.SC('áÇ') end as [Str_Judicial],
		[A].[LtnShopKind],
		[A].[LtnDescription] ,
		[A].[LtnOverlooking] ,
		[B].[BuildingCode]+[A].[NO] as [NO],
		[B].[Name] as [BuildingName],
		[B].[Emirate],
		[B].[Suburb],
		[B].[Area] as [BuildingArea],
		[B].[Street],
		[B].[BuildingNo],
		Isnull([My].[CurrencyVal],1) as [CostCurrnecyVal],

		[B].[OpOwner] as [BuildingOpOwner],
		[B].[AccountCommIncomeGuid],
		[B].[AcCommissionFromOwnerGuid],
		[B].[OwnerName] as [BuildingOwnerName],
		[B].[CommissionPercent] as [BuildingCommissionPercent],
		isNull(A.Ban,0) as Ban
		,(Select [ContractState] From [vwLeaseApartment] [E] where [E].[Guid] = A.[LastContractGuid]) [ContractState]
		,(Select [FlatState] From [vwLeaseApartment] [E] where [E].[Guid] = A.[LastContractGuid]) [shopState],

		[A].[BondType] as [ShopBondType],
		[A].[BondNo] as [ShopBondNo],
		[A].[BondDate] as [ShopBondDate]
	From
		[vbShop] [A]
		inner join [vwBuilding] [B] On [B].[Guid] = [A].[BuildingGuid]
		left join [Currency] [My] on [My].[Guid] = [CostCurrencyGuid]


GO
/****** Object:  View [dbo].[vwShop]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE View [dbo].[vwShop]
  
as

	Select
		*
	From
		[vwShopAll] [A]
	where
		isNull(A.Ban,0) = 0 


GO
/****** Object:  View [dbo].[vbApartment]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbApartment]
	  
	as
		Select 
			[T].*
		From
			[Apartment] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  View [dbo].[vwApartmentAll]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE View [dbo].[vwApartmentAll]
  
as

	Select
		[A].[Number], 
		[A].[Guid], 
		[A].[SecLvl],  
		[A].[BuildingGuid], 
		[A].[FloorNo], 
		[A].[Area], 
		[A].[unity], 
		[A].[ApartmentType], 
		[A].[FlatKind], 
		[A].[CostPrice], 
		A.Rent,
		[A].[CostCurrencyGUID], 
		[A].[Note], 
		[A].[CostGuid], 
		[A].[FlatOwner], 
		[A].[CustGuid], 
		[A].[Details], 
		[A].[OfferState], 
		[A].[OfferType], 
		[A].[CustomerName], 
		[A].[CustomerPhone], 
		[A].[Restrained], 
		[A].[PurchaseDate], 
		[A].[PayValue], 
		[A].[BathroomCount], 
		[A].[BalconyCount], 
		[A].[WaterCounter], 
		[A].[ElectricityCounter], 
		[A].[RestrainedUserGuid], 
		[A].[Class], 
		[A].[CardKind], 
		[A].[Overlooking], 
		[A].[Judicial],
		Case when [A].[Judicial] = 1 then dbo.SC('äÚã') else dbo.SC('áÇ') end as [Str_Judicial],
		[A].[LtnFlatKind],[A].[LtnApartmentType],[A].[LtnClass],[A].[LtnOverlooking] ,
		IsNull([B].[BuildingCode], '')+	[A].[NO] as [NO],
		[A].[NO] as [FlatNO],
		[B].[Name] as [BuildingName],
		[B].[Emirate],
		[B].[Area] as [BuildingArea],
		[B].[Suburb],
		[B].[Street],
		[B].[BuildingNo],
		[B].[PieceNo],
		[B].[BasinNo],
		Isnull([My].[CurrencyVal],1) as [CostCurrnecyVal],
		[B].[OpOwner] as [BuildingOpOwner],
		[B].[OwnerName] as [BuildingOwnerName],
		[B].[CommissionPercent] as [BuildingCommissionPercent],
		isNull(A.Ban,0) as Ban
		,(Select [ContractState] From [vwLeaseApartment] [E] where [E].[Guid] = A.[LastContractGuid]) [ContractState]
		,(Select [FlatState] From [vwLeaseApartment] [E] where [E].[Guid] = A.[LastContractGuid]) [FlatState],
		[A].[BondType] as [FlatBondType],
		[A].[BondNo] as [FlatBondNo],
		[A].[BondDate] as [FlatBondDate],
		[A].CustOwnerGuid
	From
		[vbApartment] [A]
		inner join [vwBuilding] [B] On [B].[Guid] = [A].[BuildingGuid]
		left join [Currency] [My] on [My].[Guid] = [A].[CostCurrencyGuid]


GO
/****** Object:  View [dbo].[vwApartment]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE View [dbo].[vwApartment]
  
as
	Select
		*
	From
		[vwApartmentAll] [A]
	where
		isNull(A.Ban,0) = 0 

GO
/****** Object:  Table [dbo].[LinkParkingContract]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LinkParkingContract](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[ParentGuid] [uniqueidentifier] NULL,
	[ParkingContractGuid] [uniqueidentifier] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[parking]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[parking](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[NO] [varchar](256) NULL,
	[Judicial] [bit] NULL,
	[Ban] [bit] NULL,
	[BuildingGuid] [uniqueidentifier] NULL,
	[FloorNo] [int] NULL,
	[Area] [float] NULL,
	[unity] [varchar](256) NULL,
	[Note] [varchar](256) NULL,
	[ParkingKind] [varchar](256) NULL,
	[Description] [varchar](256) NULL,
	[Overlooking] [varchar](256) NULL,
	[CostPrice] [float] NULL,
	[CostCurrencyGUID] [uniqueidentifier] NULL,
	[Rent] [float] NULL,
	[RentCurrencyGUID] [uniqueidentifier] NULL,
	[Sale] [float] NULL,
	[SaleCurrencyGUID] [uniqueidentifier] NULL,
	[CostGuid] [uniqueidentifier] NULL,
	[FlatOwner] [int] NULL,
	[CustGuid] [uniqueidentifier] NULL,
	[Details] [varchar](256) NULL,
	[OfferState] [int] NULL,
	[OfferType] [int] NULL,
	[CustomerName] [varchar](256) NULL,
	[CustomerPhone] [varchar](256) NULL,
	[Restrained] [bit] NULL,
	[PurchaseDate] [datetime] NULL,
	[PayValue] [float] NULL,
	[LastContractGuid] [uniqueidentifier] NULL,
	[RestrainedUserGuid] [uniqueidentifier] NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UK_parking_NO_UNIQUE] UNIQUE NONCLUSTERED 
(
	[BuildingGuid] ASC,
	[NO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ParkingContract]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ParkingContract](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[Mark] [bit] NULL,
	[EditDate] [datetime] NULL,
	[DeliverDate] [datetime] NULL,
	[TypeGuid] [uniqueidentifier] NULL,
	[ContractKind] [int] NULL,
	[IsAutoRenewal] [bit] NULL,
	[ContractNo] [varchar](256) NULL,
	[CustomerGuid] [uniqueidentifier] NULL,
	[BuildingGuid] [uniqueidentifier] NULL,
	[ParkingGuid] [uniqueidentifier] NULL,
	[Description] [varchar](255) NULL,
	[CostGuid] [uniqueidentifier] NULL,
	[RentInfoGuid] [uniqueidentifier] NULL,
	[SalesManGuid] [uniqueidentifier] NULL,
	[FlatContractGuid] [uniqueidentifier] NULL,
	[FromDate] [datetime] NULL,
	[ToDate] [datetime] NULL,
	[Period] [int] NULL,
	[Rent] [float] NULL,
	[RentContractType] [int] NULL,
	[MonthlyValue] [float] NULL,
	[CurrencyGuid] [uniqueidentifier] NULL,
	[CurrencyVal] [float] NULL,
	[DiscountPercent] [float] NULL,
	[DiscountValue] [float] NULL,
	[DiscountAccountGuid] [uniqueidentifier] NULL,
	[PayType] [int] NULL,
	[Note] [varchar](8000) NULL,
	[Note2] [varchar](8000) NULL,
	[RevenueAccountGuid] [uniqueidentifier] NULL,
	[CustAccountGuid] [uniqueidentifier] NULL,
	[CommissionFromCustPercent] [float] NULL,
	[CommissionFromCustValue] [float] NULL,
	[AcCommissionFromCustGuid] [uniqueidentifier] NULL,
	[CommissionFromOwnerPercent] [float] NULL,
	[CommissionFromOwnerValue] [float] NULL,
	[AcCommissionFromOwnerGuid] [uniqueidentifier] NULL,
	[AcIncomNextYearGUID] [uniqueidentifier] NULL,
	[AcCommissionFromOwnerNote] [varchar](256) NULL,
	[AcCommissionFromCustNote] [varchar](256) NULL,
	[CommissionFromSalesManrPercent] [float] NULL,
	[CommissionFromSalesManValue] [float] NULL,
	[AcSalesManCommissionGuid] [uniqueidentifier] NULL,
	[AcCommissionExpenseGuid] [uniqueidentifier] NULL,
	[SalesManCommNote] [varchar](256) NULL,
	[OtherFee1] [float] NULL,
	[OtherFeeAccount1GUID] [uniqueidentifier] NULL,
	[OtherFee2] [float] NULL,
	[OtherFeeAccount2GUID] [uniqueidentifier] NULL,
	[OtherFee3] [float] NULL,
	[OtherFeeAccount3GUID] [uniqueidentifier] NULL,
	[OtherFee4] [float] NULL,
	[OtherFeeAccount4GUID] [uniqueidentifier] NULL,
	[OtherFee5] [float] NULL,
	[OtherFeeAccount5GUID] [uniqueidentifier] NULL,
	[ContractFinish] [bit] NULL,
	[ContractFinishDate] [datetime] NULL,
	[EditContractFinishDate] [datetime] NULL,
	[ResultingAmount] [float] NULL,
	[ResultingAmount2] [float] NULL,
	[ResultingNote] [varchar](256) NULL,
	[Fine] [float] NULL,
	[FineAccount] [uniqueidentifier] NULL,
	[FineNote] [varchar](256) NULL,
	[CreateResultingEntry] [bit] NULL,
	[InsuranceValue] [float] NULL,
	[InsuranceValueOld] [float] NULL,
	[ContractPrice] [float] NULL,
	[AccountContractPrice] [uniqueidentifier] NULL,
	[CertificatValue] [float] NULL,
	[AccountCertificatValue] [uniqueidentifier] NULL,
	[RentDuration] [varchar](256) NULL,
	[Rentype] [varchar](256) NULL,
	[TermsOfPayment] [varchar](256) NULL,
	[Step1Complete] [bit] NULL,
	[Step2Complete] [bit] NULL,
	[Step3Complete] [bit] NULL,
	[Step4Complete] [bit] NULL,
	[Step5Complete] [bit] NULL,
	[Certification] [varchar](256) NULL,
	[BranchGuid] [uniqueidentifier] NULL,
	[CardNo] [varchar](256) NULL,
	[CarNo] [varchar](256) NULL,
	[CarType] [varchar](256) NULL,
	[CarColor] [varchar](256) NULL,
	[Emirate] [varchar](256) NULL,
	[CreateContractEntry] [bit] NULL,
	[FineRevenueAccountGUID] [uniqueidentifier] NULL,
	[NewState] [int] NULL,
	[License1No] [varchar](256) NULL,
	[License2No] [varchar](256) NULL,
	[License3No] [varchar](256) NULL,
	[License1Date1] [datetime] NULL,
	[License2Date1] [datetime] NULL,
	[License3Date1] [datetime] NULL,
	[License1Date2] [datetime] NULL,
	[License2Date2] [datetime] NULL,
	[License3Date2] [datetime] NULL,
	[LtnRentDuration] [varchar](256) NULL,
	[LtnRentype] [varchar](256) NULL,
	[LtnTermsOfPayment] [varchar](256) NULL,
	[IsRounded] [bit] NULL,
	[Judicial] [bit] NULL,
	[IsReturnInsurance] [bit] NULL,
	[ReturnInsuranceDate] [datetime] NULL,
	[PrvContractGuid] [uniqueidentifier] NULL,
	[AddPercent] [float] NULL,
	[AddValue] [float] NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwParkingContract]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE view [dbo].[vwParkingContract]
  
as
	Select 
		[ContractNo],
		[t].[Name] as [TypeName],
		[A].[TypeGuid],
		[Mark],
		Case when [A].[ContractKind] = 4 then dbo.SC('ÚÞÏ ÅíÌÇÑ ãæÞÝ')+ ' / ' + Cast([A].[Number] as Varchar(10)) 
			 when [A].[ContractKind] = 5 then dbo.SC('ÚÞÏ ÈíÚ ãæÞÝ')+ ' / ' + Cast([A].[Number] as Varchar(10)) 
		end as [ArContractKind],
		[A].[EditDate],
		A.[DeliverDate],
		[B].[Name] as [BuildingName],
		[B].[ArName] as [BuildingArName],
		[B].[LtnName] as [BuildingLtnName],
		Case when [A].[ContractKind] = 4 then 'ÇíÌÇÑ ãæÞÝ'
			 when [A].[ContractKind] = 5 then 'ÇíÌÇÑ ãæÞÝ'
		end
		+' /'+ [S].[No] +'/' 
		+' '+[B].[Name] 
		as [parkingNo],
		[S].[No] as [PNo],
		[A].[ContractKind],
		[S].[No],
		Case when [A].[ContractKind] = 4 then dbo.SC('ÚÞÏ ÅíÌÇÑ ãæÞÝ')+ ' / ' + Cast([A].[Number] as Varchar(10)) 
			 when [A].[ContractKind] = 5 then dbo.SC('ÚÞÏ ÈíÚ ãæÞÝ')+ ' / ' + Cast([A].[Number] as Varchar(10)) 
		end as [Contract], 

		isnull([S].[Guid],0x0) as [ParkingGuid],
		[S].[FlatOwner] as [FlatOwner],
		[Cu].[Name] as [CustName],
		[Cu].[ArName] as [CustArName],
		[Cu].[LtnName] as [CustLtnName],
		[Cu].[Phonejob] as [CustomerPhonejob],
		[Cu].[Mobile] as [CustomerMobile],
		[Cu].[Nationality] as [CustomerNationality],
		[Cu].InsuranceAccountGuid,
		Cu.AccountBalance,
		[A].[BuildingGuid],
		[A].[SalesManGuid],
		[A].[Guid],
		[A].[Number],
		[A].[CustomerGuid],
		[A].[FromDate],
		dbo.fnDate([A].[FromDate]) as [FromDateHG],
		[A].[ToDate],
		dbo.fnDate([A].[ToDate]) as [ToDateHG],

		DATEDIFF(DAY, A.ToDate, A.FromDate) as ContractDays,
		Case when A.ContractFinish = 1 then 
		DATEDIFF(DAY, A.ToDate, A.ContractFinishDate) 
		end as ContractDaysDifference,

		Case when [ContractFinish] = 0 then [ToDate] else [ContractFinishDate]  end as [EndDate],
		[A].[Rent],
		
		[A].[DiscountPercent],
		[A].[DiscountValue],
		[A].[DiscountAccountGuid],
		
		[A].[Rent] - isNull([A].[DiscountValue],0) as [RentAfterDiscount],
		
		Case 
			when ([T].[ContractKind] = 4) then 
				Case 
					when 
						Case when [ContractFinish] = 0 then [ToDate] else [ContractFinishDate] end 
						<= GetDate() then --ãäÊåí ÇáãÏÉ
											Case when [ContractFinish] = 0 then dbo.SC('ãäÊåí ÇáãÏÉ æáã íÊã ÅäåÇÁ ÇáÚÞÏ') 
											else
											dbo.SC('ãäÊåí ÇáãÏÉ æÊã ÅäåÇÁ ÇáÚÞÏ') end
					when 
						Case when [ContractFinish] = 0 then [ToDate] else [ContractFinishDate] end 
						> GetDate() then dbo.SC('ÛíÑ ãäÊåí') 
				end
			when ([T].[ContractKind] = 5)  then dbo.SC('ÈíÚ')
				
		end as [ContractState],		

		Case 
			when ([T].[ContractKind] = 4) then 
				Case 
					when [ContractFinish] = 0 then dbo.SC('ãÔÛæá') 
					else
					Case 
							when 
								exists(Select 
									Guid
								From 
										ParkingContract [Q] 
								where 
									[T].[ContractKind] = [T].[ContractKind]
									and [Q].[CustomerGuid] = [A].[CustomerGuid]
									and [Q].[ParkingGuid] = [A].[ParkingGuid]
									and [Q].[FromDate] >= [A].[ContractFinishDate]
									and [Q].[Guid] <> [A].[Guid]
								)  then dbo.SC('Êã ÇáÊÌÏíÏ') 
					else
						dbo.SC('Êã ÇáÅÎáÇÁ') 
					end
				end
			when ([T].[ContractKind] = 5) then ''
		end as [ParkingState],
		
		[A].[RentContractType],
		[A].[MonthlyValue],
		[A].[MonthlyValue] * 12.00 as [YearValue],

		[A].[CurrencyGuid],
		[A].[CurrencyVal],
		[A].[PayType],
		[A].[Note],
		[A].[Note2],
		[A].[RevenueAccountGuid],
		[A].[CustAccountGuid],
		[A].[CommissionFromCustPercent],
		[A].[CommissionFromCustValue],
		[A].[AcCommissionFromCustGuid],
		[A].[CommissionFromOwnerPercent],
		[A].[CommissionFromOwnerValue],
		[A].[AcCommissionFromOwnerGuid],
		[A].[ContractFinish],
		[A].[ContractFinishDate],
		[A].[EditContractFinishDate],
		[A].[ResultingAmount],
		[A].[Fine],
		[A].[FineAccount],
		[A].[CreateResultingEntry],
		[A].[InsuranceValue],
		[A].[InsuranceValueOld],
		[A].[ContractPrice],
		[A].[AccountContractPrice],
		[A].[CertificatValue],
		[A].[AccountCertificatValue],
		[A].[RentDuration],
		[A].[Rentype],
		[A].[TermsOfPayment],
		[A].[Seclvl],
		[A].[RentInfoGuid],
		[A].[Step1Complete],
		[A].[Step2Complete],
		[A].[Step3Complete],
		[A].[Step4Complete],
		[A].[Step5Complete],
		[A].[Certification],
		isnull([L].[ParentGuid],0x0) as [LinkFlatContract],

		[A].[CardNo],
		[A].[CarNo],
		[A].[CarType],
		[A].[CarColor],
		[A].[Emirate],
		[Cr].[Code] as [CurrencyName],
		[A].[BranchGuid],
		[A].[Period],
		[A].[CreateContractEntry],
		[A].[FineRevenueAccountGUID],
		[A].[NewState],

		[A].[License1No],
		[A].[License2No],
		[A].[License3No],
		[A].[License1Date1],
		[A].[License2Date1],
		[A].[License3Date1],
		[A].[License1Date2],
		[A].[License2Date2],
		[A].[License3Date2],

		[A].[ResultingAmount2],
		[A].[ResultingNote],
		[A].[FineNote],

		[A].[LtnRentDuration],
		[A].[LtnRentype],
		[A].[LtnTermsOfPayment],
		[S].[CostGuid] as [UnitCostGuid],
		A.[CostGuid],
		[A].[FlatContractGuid],
		A.[IsRounded],
		[A].[Judicial],
		[A].[Description],
		[A].[PrvContractGuid],

		A.AcCommissionFromOwnerNote,
		A.AcCommissionFromCustNote,
		A.IsAutoRenewal,
		A.AcIncomNextYearGuid,
		A.IsReturnInsurance,
		A.ReturnInsuranceDate,
		A.[AddPercent],
		A.[AddValue],
		T.OpNewContract,
		A.[CommissionFromSalesManrPercent],
		A.[CommissionFromSalesManValue],
		A.[AcSalesManCommissionGuid],
		A.[AcCommissionExpenseGuid],
		A.[SalesManCommNote]
	from 
		[ParkingContract] [A]
		inner join [vwContractType] [T] on [T].[Guid] = [A].[TypeGuid]
		inner join [vwBuilding] [B] On [A].[BuildingGuid] = [B].[Guid]
		inner join [Parking] [S] on [S].[Guid] = [A].[ParkingGuid]
		inner join [vwcustomer] [Cu] On [Cu].[Guid] = [A].[CustomerGuid]
		left join [LinkParkingContract] [L] on [L].[ParkingContractGuid] = [A].[Guid]
		left join [Currency] [Cr] On [Cr].[Guid] = [A].[CurrencyGuid]
		


GO
/****** Object:  View [dbo].[vbparking]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbparking]
	  
	as
		Select 
			[T].*
		From
			[parking] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  View [dbo].[vwParkingAll]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE View [dbo].[vwParkingAll]
  
as

	Select
		[A].[Number], [A].[Guid], [A].[SecLvl], [A].[BuildingGuid], [A].[FloorNo], [A].[Area], [A].[unity], [A].[Note], 
		[A].[CostPrice], [A].[CostCurrencyGUID], [A].[CostGuid], [A].[FlatOwner], 
		[A].[CustGuid], [A].[Details], [A].[OfferState], 
		[A].[OfferType], [A].[CustomerName], [A].[CustomerPhone], [A].[Restrained], 
		[A].[PurchaseDate], [A].[PayValue], [A].[RestrainedUserGuid], [A].[ParkingKind], [A].[Description], [A].[Overlooking], [A].[Judicial],
		[B].[BuildingCode]+[A].[NO] as [NO],
		[A].[Rent],
		[A].[RentCurrencyGuid],
		[A].[Sale],
		[A].[SaleCurrencyGuid],
		[B].[Name] as [BuildingName],
		[B].[Emirate],
		[B].[Area] as [BuildingArea],
		[B].[Suburb],
		[B].[Street],
		Case when [A].[Judicial] = 1 then dbo.SC('äÚã') else dbo.SC('áÇ') end as [Str_Judicial],
		Isnull([My].[CurrencyVal],1) as [CostCurrnecyVal],
		[B].[OpOwner] as [BuildingOpOwner],
		[B].[OwnerName] as [BuildingOwnerName],
		--0x0 as [BuildingOwnerName],
		[B].[AccountCommIncomeGuid],
		[B].[CommissionPercent] as [BuildingCommissionPercent],
		isNull(A.Ban,0) as Ban

		,(Select Top 1 [ContractState] From [vwParkingContract] [E] where [E].[Guid] = A.[LastContractGuid]) [ContractState]
		,(Select Top 1 [ParkingState] From [vwParkingContract] [E] where [E].[Guid] = A.[LastContractGuid]) [ParkingState]
		
	From
		[vbParking] [A]
		inner join [vwBuilding] [B] On [B].[Guid] = [A].[BuildingGuid]
		left join [Currency] [My] on [My].[Guid] = [CostCurrencyGuid]
		


GO
/****** Object:  View [dbo].[vwParking]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE View [dbo].[vwParking]
  
as

	Select
		*
	From
		[vwParkingAll] [A]
	where
		isNull(A.Ban,0) = 0 


GO
/****** Object:  Table [dbo].[Villa]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Villa](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[Ban] [bit] NULL,
	[WaterCounter] [int] NULL,
	[ElectricityCounter] [float] NULL,
	[ComplexName] [varchar](256) NULL,
	[Emirate] [varchar](256) NULL,
	[Area] [varchar](256) NULL,
	[unity] [varchar](256) NULL,
	[Street] [varchar](256) NULL,
	[Suburb] [varchar](256) NULL,
	[PieceNo] [varchar](256) NULL,
	[BasinNo] [varchar](256) NULL,
	[VillaNo] [varchar](256) NULL,
	[DocType] [varchar](256) NULL,
	[DocNo] [varchar](256) NULL,
	[DocDate] [datetime] NULL,
	[VillaAccountGuid] [uniqueidentifier] NULL,
	[CashAccountGuid] [uniqueidentifier] NULL,
	[InsuranceAccountGuid] [uniqueidentifier] NULL,
	[AccountCommIncomeGuid] [uniqueidentifier] NULL,
	[CuOwnerGuid] [uniqueidentifier] NULL,
	[CostGuid] [uniqueidentifier] NULL,
	[AccountBankVillaGuid] [uniqueidentifier] NULL,
	[RentInfoGuid] [uniqueidentifier] NULL,
	[BranchGuid] [uniqueidentifier] NULL,
	[FloorCount] [int] NULL,
	[BalconyCount] [int] NULL,
	[RoomCount] [int] NULL,
	[OtherRoomCount] [int] NULL,
	[ServiceRoomCount] [int] NULL,
	[BathroomCount] [int] NULL,
	[StairsInternal] [bit] NULL,
	[RoomState] [varchar](256) NULL,
	[LandArea] [varchar](256) NULL,
	[LandAreaBuilding] [varchar](256) NULL,
	[FinishingState] [varchar](256) NULL,
	[SecurityType] [varchar](256) NULL,
	[SecuritySystem] [bit] NULL,
	[wall] [varchar](256) NULL,
	[wallState] [varchar](256) NULL,
	[lightingCount] [int] NULL,
	[ParkingCount] [int] NULL,
	[ParkingArea] [varchar](256) NULL,
	[ParkingShaded] [bit] NULL,
	[PoolCount] [int] NULL,
	[PoolState] [varchar](256) NULL,
	[PoolSystem] [varchar](256) NULL,
	[PlaygroundCount] [int] NULL,
	[PlaygroundArea] [varchar](256) NULL,
	[GardenCount] [int] NULL,
	[GardenArea] [varchar](256) NULL,
	[GardenState] [varchar](256) NULL,
	[OfferType] [int] NULL,
	[OfferState] [int] NULL,
	[Restrained] [bit] NULL,
	[RestrainedUserGuid] [uniqueidentifier] NULL,
	[CustomerName] [varchar](256) NULL,
	[CustomerPhone] [varchar](256) NULL,
	[Details] [varchar](512) NULL,
	[LtnArea] [varchar](256) NULL,
	[LtnEmirate] [varchar](256) NULL,
	[LtnSuburb] [varchar](256) NULL,
	[LtnStreet] [varchar](256) NULL,
	[LtnDocType] [varchar](256) NULL,
	[VillaOwner] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbVilla]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbVilla]
	  
	as
		Select 
			[T].*
		From
			[Villa] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  View [dbo].[vwVillaAll]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE view [dbo].[vwVillaAll]
  
as
	Select 
		[Number], [Guid], [SecLvl], dbo.SC('ÝíáÇ')+' '+[VillaNo] as [Name] 
		,[WaterCounter], [ElectricityCounter], [ComplexName], [Emirate], [Area], 
		[Street], [Suburb], [PieceNo], [BasinNo], [VillaNo], [DocType], 
		[DocNo], [DocDate], [VillaAccountGuid], [CostGuid], [AccountBankVillaGuid], [RentInfoGuid], [BranchGuid], 
		[FloorCount], [BalconyCount], [RoomCount], [OtherRoomCount], [ServiceRoomCount], [BathroomCount], [StairsInternal], 
		[RoomState], [LandArea], [LandAreaBuilding], [FinishingState], [SecurityType], [SecuritySystem], [wall], [wallState], 
		[lightingCount], [ParkingCount], [ParkingArea], [ParkingShaded], [PoolCount], [PoolState], [PoolSystem], [PlaygroundCount], 
		[PlaygroundArea], [GardenCount], [GardenArea], [GardenState], [OfferType], [OfferState], [Restrained], [RestrainedUserGuid], 
		[CustomerName], [CustomerPhone], [Details],[CuOwnerGuid],[LtnArea],[LtnEmirate],[LtnSuburb],[LtnStreet],
		[LtnDocType],[CashAccountGuid],[InsuranceAccountGuid],
		[AccountCommIncomeGuid],
		[VillaOwner],
		isNull(A.Ban,0) as Ban
	From
		[vbVilla] [A]
		


GO
/****** Object:  View [dbo].[vwVilla]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE view [dbo].[vwVilla]
  
as
	Select 
		*
	From
		[vwVillaall] [A]
	where
		isNull(A.Ban,0) = 0 


GO
/****** Object:  Table [dbo].[Earth]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Earth](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[No] [varchar](256) NULL,
	[Ban] [bit] NULL,
	[EarthNo] [varchar](256) NULL,
	[Name] [varchar](256) NULL,
	[ltnName] [varchar](256) NULL,
	[CustomerGuid] [uniqueidentifier] NULL,
	[Date] [datetime] NULL,
	[City] [varchar](256) NULL,
	[Region] [varchar](256) NULL,
	[Space] [varchar](256) NULL,
	[Area] [float] NULL,
	[Unity] [varchar](256) NULL,
	[Price] [float] NULL,
	[licenseNo] [varchar](256) NULL,
	[license] [varchar](256) NULL,
	[licenseDate] [datetime] NULL,
	[Details] [varchar](256) NULL,
	[LandType] [varchar](256) NULL,
	[Side] [varchar](256) NULL,
	[StreetName] [varchar](256) NULL,
	[StreetCount] [int] NULL,
	[Buildble] [bit] NULL,
	[LandOwner] [int] NULL,
	[BeginLandValue] [float] NULL,
	[CurrencyBeginLandGuid] [uniqueidentifier] NULL,
	[CurrencyValBeginLand] [float] NULL,
	[BeginLandCostGuid] [uniqueidentifier] NULL,
	[CurrencyPurchaseGuid] [uniqueidentifier] NULL,
	[CurrencyValPurchase] [float] NULL,
	[PurchaseNote] [varchar](256) NULL,
	[AccountGuid] [uniqueidentifier] NULL,
	[CuOwnerGuid] [uniqueidentifier] NULL,
	[CostGuid] [uniqueidentifier] NULL,
	[BankAccountGuid] [uniqueidentifier] NULL,
	[CommissionPercent] [float] NULL,
	[AccountCommIncomeGuid] [uniqueidentifier] NULL,
	[UsedEndDate] [bit] NULL,
	[CustomerOwnerGuid] [uniqueidentifier] NULL,
	[OwnerAccountGuid] [uniqueidentifier] NULL,
	[IdentityValue] [float] NULL,
	[CurrencyIdentityGUID] [uniqueidentifier] NULL,
	[CurrencyValIdentity] [float] NULL,
	[IdentityBeginDate] [datetime] NULL,
	[IdentityEndDate] [datetime] NULL,
	[CrearteEntryInvestment] [bit] NULL,
	[IdentityEntryGuid] [uniqueidentifier] NULL,
	[IdentityNote] [varchar](256) NULL,
	[LtnLandType] [varchar](256) NULL,
	[LtnCity] [varchar](256) NULL,
	[LtnRegion] [varchar](256) NULL,
	[LtnSpace] [varchar](256) NULL,
	[Ltnlicense] [varchar](256) NULL,
	[Ltnside] [varchar](256) NULL,
	[Rent] [float] NULL,
	[RentCurrencyGuid] [uniqueidentifier] NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbEarth]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbEarth]
	  
	as
		Select 
			[T].*
		From
			[Earth] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  View [dbo].[vwEarthAll]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE view [dbo].[vwEarthAll]
  
as
	Select 
		[A].[Number],[A].[Guid],[A].[SecLvl],
		[A].[Name] as [ArName],
		[A].[CustomerGuid],
		[A].[Date],
		[A].[City],
		[A].[Region],
		[A].[Space],
		[A].[EarthNo],
		[A].[Area],
		[A].[Unity],
		[A].[Rent],
		[A].[RentCurrencyGuid],
		[A].[Price],
		[A].[license],
		[A].[Details],
		[A].[LandType],
		[A].[LandOwner]
		,[A].[BeginLandValue],
		[A].[CurrencyBeginLandGuid],
		[A].[CurrencyValBeginLand],
		[A].[CurrencyPurchaseGuid]
		,[A].[Side]
		,[A].[CurrencyValPurchase],
		[A].[AccountGuid],
		[A].[CostGuid],
		[A].[CustomerOwnerGuid],
		[A].[ltnName]
		,[A].[LtnLandType] ,
		[A].[LtnCity] ,
		[A].[LtnRegion] ,
		[A].[LtnSpace] ,
		[A].[Ltnlicense] ,
		[A].[Ltnside] 
		,Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[LtnName],'') <> '') then [A].[LtnName] else [A].[Name] end as [Name], 
		[Cu].[Name] as [CustomerName],
		[A].[No],
		[A].[licenseNo],
		[A].[licenseDate],
		[A].[StreetName],
		A.[CuOwnerGuid],
		A.AccountCommIncomeGuid,
		A.[CommissionPercent],
		isNull(A.Ban,0) as Ban
	From
		[vbEarth] [A]
		left join [vwCustomer] [Cu] On [Cu].[Guid] = [A].[CustomerGuid]

GO
/****** Object:  View [dbo].[vwEarth]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE view [dbo].[vwEarth]
  
as
	Select 
		*
	From
		[vwEarthAll] [A]
	where
		isNull(A.Ban,0) = 0 

GO
/****** Object:  View [dbo].[vwRealtyRestrained]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwRealtyRestrained]
  
as
	Select
		R.*,
		Cu.Name as CustName,
		Cu.ArName as CustArName,
		Cu.LtnName as CustLtnName,
		Cu.Nationality as CustNationality,
		B.Name as BuildingName,
		
		[A].[No] as [FlatNo],
		[P].[No] as [ParkingName],
		[V].[VillaNo] as [VillaNo],
		L.Name as [LandName],
		S.NO as [ShopNo],
		
		Ac.Code as DebitAccountCode,
		Ac.Name as DebitAccountName,
		
		Ac2.Code as CreditAccountCode,
		Ac2.Name as CreditAccountName

	From
		[RealtyRestrained] [R]
		inner join vwCustomer [Cu] on [cu].Guid = [R].CustomerGuid
		inner join vwBuilding [b] on [b].Guid = [R].BuildingGuid
		left join vwApartment [A] on [A].Guid = [R].FlatGuid
		Left join vwparking [P] on [P].Guid = [R].[ParkingNo]
		left join vwVilla [V] on [V].Guid = [R].VillaGuid
		left join vwEarth [L] on [L].Guid = [R].LandGuid
		left join vwShop [S] on [S].Guid = [R].Shop
		left join vwAccount [Ac] on [Ac].Guid = [R].DebitAccountGuid
		left join vwAccount [Ac2] on [Ac2].Guid = [R].CreditAccountGuid
		left join vwCheckType [ct] on [ct].Guid = [R].CheckTypeGuid

GO
/****** Object:  Table [dbo].[ContractParkingCachPayment]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ContractParkingCachPayment](
	[ContractGuid] [uniqueidentifier] NULL,
	[EntryGuid] [uniqueidentifier] NULL
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwContractParkingCachPayment]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwContractParkingCachPayment]
  
as
	Select
		[C].[ContractGuid],
		[H].[HNumber] as [Number],
		[H].[DNumber],
		[H].[HDate] as [Date],
		isNull([H].[DCredit],0) + isNull([H].[DDebit],0) as [Value],
		[h].AcGuid,
		[H].[CurrencyGuid],
		[H].[CurrencyName] as [Currency],
		[H].[CurrencyVal],
		[H].[HNote],
		[H].[DNote],
		1 as [Print],
		[H].[HGuid] as [Guid]
	from 
		[ContractParkingCachPayment] [C]
		inner join [vwDetailEntry] [H] on [H].[HGuid] = [C].[EntryGuid]
		inner join ParkingContract L on L.CustAccountGuid = H.AcGuid and L.Guid = C.contractGuid
	where
		((isNull([H].[DCredit],0) + isNull([H].[DDebit],0) <> 0) and L.PayType = 0)
		or ((isNull([H].[DCredit],0)  <> 0) and L.PayType <> 0)


GO
/****** Object:  Table [dbo].[AssetsArea]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AssetsArea](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[Code] [varchar](256) NULL,
	[Name] [varchar](256) NULL,
	[LtnName] [varchar](256) NULL,
	[Note] [varchar](256) NULL,
	[ParentGuid] [uniqueidentifier] NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbAssetsArea]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbAssetsArea]
	  
	as
		Select 
			[T].*
		From
			[AssetsArea] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  Table [dbo].[LandContract]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LandContract](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[EditDate] [datetime] NULL,
	[DeliverDate] [datetime] NULL,
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[Mark] [bit] NULL,
	[IsAutoRenewal] [bit] NULL,
	[TypeGuid] [uniqueidentifier] NULL,
	[ContractNo] [varchar](256) NULL,
	[CustomerGuid] [uniqueidentifier] NULL,
	[SalesManGuid] [uniqueidentifier] NULL,
	[RentInfoGuid] [uniqueidentifier] NULL,
	[LandGuid] [uniqueidentifier] NULL,
	[VillaGuid] [uniqueidentifier] NULL,
	[CostGuid] [uniqueidentifier] NULL,
	[Rent] [float] NULL,
	[RentContractType] [int] NULL,
	[MonthlyValue] [float] NULL,
	[CurrencyGuid] [uniqueidentifier] NULL,
	[CurrencyVal] [float] NULL,
	[PayType] [int] NULL,
	[Note] [varchar](8000) NULL,
	[Note2] [varchar](8000) NULL,
	[Purpose] [varchar](256) NULL,
	[NewState] [int] NULL,
	[Whereabouts] [varchar](256) NULL,
	[RevenueAccountGuid] [uniqueidentifier] NULL,
	[CustAccountGuid] [uniqueidentifier] NULL,
	[CommissionFromCustPercent] [float] NULL,
	[CommissionFromCustValue] [float] NULL,
	[AcCommissionFromCustGuid] [uniqueidentifier] NULL,
	[CommissionFromOwnerPercent] [float] NULL,
	[CommissionFromOwnerValue] [float] NULL,
	[AcCommissionFromOwnerGuid] [uniqueidentifier] NULL,
	[CommissionFromSalesManrPercent] [float] NULL,
	[CommissionFromSalesManValue] [float] NULL,
	[AcSalesManCommissionGuid] [uniqueidentifier] NULL,
	[AcCommissionExpenseGuid] [uniqueidentifier] NULL,
	[SalesManCommNote] [varchar](256) NULL,
	[CreateContractEntry] [bit] NULL,
	[AcIncomNextYearGUID] [uniqueidentifier] NULL,
	[InsuranceAccountGuid] [uniqueidentifier] NULL,
	[Step1Complete] [bit] NULL,
	[Step2Complete] [bit] NULL,
	[Step3Complete] [bit] NULL,
	[Step4Complete] [bit] NULL,
	[Step5Complete] [bit] NULL,
	[Certification] [varchar](256) NULL,
	[DiscountPercent] [float] NULL,
	[DiscountValue] [float] NULL,
	[DiscountAccountGuid] [uniqueidentifier] NULL,
	[UserGuid] [uniqueidentifier] NULL,
	[BranchGuid] [uniqueidentifier] NULL,
	[RentDuration] [varchar](256) NULL,
	[Rentype] [varchar](256) NULL,
	[TermsOfPayment] [varchar](256) NULL,
	[InsuranceValuePercent] [float] NULL,
	[InsuranceValue] [float] NULL,
	[InsuranceValueOld] [float] NULL,
	[ContractPrice] [float] NULL,
	[CertificatValue] [float] NULL,
	[ElectricityInsurance] [float] NULL,
	[ElectricityCounter] [varchar](256) NULL,
	[FromDate] [datetime] NULL,
	[ToDate] [datetime] NULL,
	[Period] [int] NULL,
	[OtherFee] [float] NULL,
	[OtherFeeAccountGUID] [uniqueidentifier] NULL,
	[OtherFee1] [float] NULL,
	[OtherFeeAccount1GUID] [uniqueidentifier] NULL,
	[OtherFee2] [float] NULL,
	[OtherFeeAccount2GUID] [uniqueidentifier] NULL,
	[OtherFee3] [float] NULL,
	[OtherFeeAccount3GUID] [uniqueidentifier] NULL,
	[OtherFee4] [float] NULL,
	[OtherFeeAccount4GUID] [uniqueidentifier] NULL,
	[OtherFee5] [float] NULL,
	[OtherFeeAccount5GUID] [uniqueidentifier] NULL,
	[ContractFinish] [bit] NULL,
	[ContractFinishDate] [datetime] NULL,
	[EditContractFinishDate] [datetime] NULL,
	[ResultingAmount2] [float] NULL,
	[ResultingAmount] [float] NULL,
	[RoundKind] [int] NULL,
	[FineRevenueAccountGUID] [uniqueidentifier] NULL,
	[ResultingNote] [varchar](256) NULL,
	[Fine] [float] NULL,
	[FineAccount] [uniqueidentifier] NULL,
	[FineNote] [varchar](256) NULL,
	[CreateResultingEntry] [bit] NULL,
	[AccountContractPrice] [uniqueidentifier] NULL,
	[AccountCertificatValue] [uniqueidentifier] NULL,
	[License1No] [varchar](256) NULL,
	[License2No] [varchar](256) NULL,
	[License3No] [varchar](256) NULL,
	[License1Date1] [datetime] NULL,
	[License2Date1] [datetime] NULL,
	[License3Date1] [datetime] NULL,
	[License1Date2] [datetime] NULL,
	[License2Date2] [datetime] NULL,
	[License3Date2] [datetime] NULL,
	[Ltnwhereabouts] [varchar](256) NULL,
	[LtnPurpose] [varchar](256) NULL,
	[LtnRentDuration] [varchar](256) NULL,
	[LtnRentype] [varchar](256) NULL,
	[LtnTermsOfPayment] [varchar](256) NULL,
	[IsRounded] [bit] NULL,
	[Leave] [bit] NULL,
	[LeaveDate] [datetime] NULL,
	[AcquittancePrinted] [bit] NULL,
	[AcquittancePrintDate] [datetime] NULL,
	[AcquittancePrintedByGuid] [uniqueidentifier] NULL,
	[Judicial] [bit] NULL,
	[Trademark] [varchar](256) NULL,
	[PrvContractGuid] [uniqueidentifier] NULL,
	[AddPercent] [float] NULL,
	[AddValue] [float] NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[LandContractCachPayment]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LandContractCachPayment](
	[ContractGuid] [uniqueidentifier] NULL,
	[EntryGuid] [uniqueidentifier] NULL
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwLandContractCachPayment]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwLandContractCachPayment]
  
as
	Select
		[C].[ContractGuid],
		[H].[HNumber] as [Number],
		[H].[DNumber],
		[H].[HDate] as [Date],
		isNull([H].[DCredit],0) + isNull([H].[DDebit],0) as [Value],
		[h].AcGuid,
		[H].[CurrencyGuid],
		[H].[CurrencyName] as [Currency],
		[H].[CurrencyVal],
		[H].[HNote],
		[H].[DNote],
		1 as [Print],
		[H].[HGuid] as [Guid]
	from 
		[LandContractCachPayment] [C]
		inner join [vwDetailEntry] [H] on [H].[HGuid] = [C].[EntryGuid]
		inner join LandContract L on L.CustAccountGuid = H.AcGuid and L.Guid = C.contractGuid
	where
		((isNull([H].[DCredit],0) + isNull([H].[DDebit],0) <> 0) and L.PayType = 0)
		or ((isNull([H].[DCredit],0)  <> 0) and L.PayType <> 0)


GO
/****** Object:  Table [dbo].[Assets]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Assets](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[AssetsGroupGuid] [uniqueidentifier] NULL,
	[Code] [varchar](256) NULL,
	[Name] [varchar](256) NULL,
	[LtnName] [varchar](256) NULL,
	[Barcode] [varchar](256) NULL,
	[IsActive] [bit] NULL,
	[Note] [varchar](256) NULL,
	[CurrencyGUID] [uniqueidentifier] NULL,
	[CurrencyVal] [float] NULL,
	[AssetsAreaGuid] [uniqueidentifier] NULL,
	[CurrentAssetsAreaGuid] [uniqueidentifier] NULL,
	[State] [varchar](256) NULL,
	[Importer] [varchar](256) NULL,
	[EnterAccountGuid] [uniqueidentifier] NULL,
	[EnterCostGuid] [uniqueidentifier] NULL,
	[EnterCreditCostGuid] [uniqueidentifier] NULL,
	[EnterValue] [float] NULL,
	[EnterDate] [smalldatetime] NULL,
	[Origin] [varchar](256) NULL,
	[Company] [varchar](256) NULL,
	[EnterNote] [varchar](256) NULL,
	[CreateEntry] [bit] NULL,
	[AsstesAccountGuid] [uniqueidentifier] NULL,
	[ExpenseAccountGuid] [uniqueidentifier] NULL,
	[DepreciationAccountGuid] [uniqueidentifier] NULL,
	[DepreciationTotalAccountGuid] [uniqueidentifier] NULL,
	[ProfitAccountGuid] [uniqueidentifier] NULL,
	[lossesAccountGuid] [uniqueidentifier] NULL,
	[EvaluationAccountGuid] [uniqueidentifier] NULL,
	[Shipping] [varchar](256) NULL,
	[ShippingNo] [varchar](256) NULL,
	[ShippingDate] [smalldatetime] NULL,
	[ArriveDate] [smalldatetime] NULL,
	[ArrivePlace] [varchar](256) NULL,
	[ImportPermit] [varchar](256) NULL,
	[CustomsNote] [varchar](256) NULL,
	[CustomsDate] [smalldatetime] NULL,
	[CustomsExpense] [varchar](256) NULL,
	[ShippingNote] [varchar](256) NULL,
	[MaintenanceContract] [varchar](256) NULL,
	[MaintenanceBeginDate] [smalldatetime] NULL,
	[MaintenanceEndDate] [smalldatetime] NULL,
	[Guaranty] [varchar](256) NULL,
	[GuarantyBeginDate] [smalldatetime] NULL,
	[GuarantyEndDate] [smalldatetime] NULL,
	[DepreciationMode] [int] NULL,
	[IsDepreciationMonthly] [int] NULL,
	[DepreciationBeginDate] [smalldatetime] NULL,
	[Age] [int] NULL,
	[DepreciationAvg] [float] NULL,
	[ScrapValue] [float] NULL,
	[OldYearExtra] [float] NULL,
	[OldYearDecrease] [float] NULL,
	[OldYearDepreciation] [float] NULL,
	[OldYearMaintenance] [float] NULL,
	[IsSale] [bit] NULL,
	[SaleDate] [smalldatetime] NULL,
	[SaleCustomer] [varchar](256) NULL,
	[SalesAccountGuid] [uniqueidentifier] NULL,
	[SaleValue] [float] NULL,
	[CurrencySaleGUID] [uniqueidentifier] NULL,
	[CurrencySaleVal] [float] NULL,
	[SaleNote] [varchar](256) NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbAssets]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbAssets]
	  
	as
		Select 
			[T].*
		From
			[Assets] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  Table [dbo].[Cost]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Cost](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[Code] [varchar](250) NULL,
	[Name] [varchar](250) NULL,
	[LtnName] [varchar](250) NULL,
	[ParentGUID] [uniqueidentifier] NULL,
	[Note] [varchar](256) NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AccountConformity]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AccountConformity](
	[Date] [datetime] NULL,
	[Guid] [uniqueidentifier] NOT NULL,
	[UserGuid] [uniqueidentifier] NULL,
	[AccountGuid] [uniqueidentifier] NULL,
	[CostGuid] [uniqueidentifier] NULL,
	[CurrencyGuid] [uniqueidentifier] NULL,
	[Debit] [float] NULL,
	[Credit] [float] NULL,
	[Note] [varchar](255) NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwAccountConformity]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwAccountConformity]
  
as
	Select
		us.LoginName as [UserName],
		Co.Name as Cost,
		a.*,
		a.Debit - a.Credit as Balance
	From
		[AccountConformity] [a]
		inner join Realty_Users [us] on [us].Guid = [a].[UserGuid]
		left join Cost [Co] on [Co].Guid = [a].[CostGuid]

GO
/****** Object:  Table [dbo].[AssetsOperation]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AssetsOperation](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[Flag] [int] NULL,
	[TypeGuid] [uniqueidentifier] NULL,
	[AssetsGuid] [uniqueidentifier] NULL,
	[Date] [smalldatetime] NULL,
	[AccountGuid] [uniqueidentifier] NULL,
	[Value] [float] NULL,
	[CurrencyGUID] [uniqueidentifier] NULL,
	[CurrencyVal] [float] NULL,
	[Age] [float] NULL,
	[ScrapValue] [float] NULL,
	[DebitCostGuid] [uniqueidentifier] NULL,
	[CreditCostGuid] [uniqueidentifier] NULL,
	[IsRounded] [bit] NULL,
	[Note] [varchar](256) NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbAssetsOperation]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbAssetsOperation]
	  
	as
		Select 
			[T].*
		From
			[AssetsOperation] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  Table [dbo].[AssetsChangeArea]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AssetsChangeArea](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[AssetsGuid] [uniqueidentifier] NULL,
	[Date] [smalldatetime] NULL,
	[CurrentAreaGuid] [uniqueidentifier] NULL,
	[AreaGuid] [uniqueidentifier] NULL,
	[Note] [varchar](256) NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbAssetsChangeArea]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbAssetsChangeArea]
	  
	as
		Select 
			[T].*
		From
			[AssetsChangeArea] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  Table [dbo].[MaintenanceContractType]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MaintenanceContractType](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[Code] [varchar](256) NULL,
	[Name] [varchar](256) NULL,
	[ltnName] [varchar](256) NULL,
	[Menu] [varchar](256) NULL,
	[LtnMenu] [varchar](256) NULL,
	[ShortCut] [varchar](256) NULL,
	[IncomeAccountGUID] [uniqueidentifier] NULL,
	[DiscountAccountGUID] [uniqueidentifier] NULL,
	[Rentcondition] [varchar](2048) NULL,
	[DefPrintPath] [varchar](256) NULL,
	[CreateEntry] [bit] NULL,
	[AutoCreateEntry] [bit] NULL,
	[AutoPostedEntry] [bit] NULL,
	[EntryDate] [int] NULL,
	[MoveCostWithExpenceDebit] [bit] NULL,
	[MoveCostWithExpenceCredit] [bit] NULL,
	[MoveCostWithDiscountDebit] [bit] NULL,
	[MoveCostWithDiscountCredit] [bit] NULL,
	[DefPrintReceipt] [varchar](256) NULL,
	[DefPrintLogPath] [varchar](256) NULL,
	[DefPrintacquittance] [varchar](256) NULL,
	[FirstPayNote] [varchar](255) NULL,
	[FirstPayNoteLtn] [varchar](255) NULL,
	[ContractNote] [varchar](255) NULL,
	[ContractNoteLtn] [varchar](255) NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MaintenanceContract]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MaintenanceContract](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[EditDate] [datetime] NULL,
	[Mark] [bit] NULL,
	[TypeGuid] [uniqueidentifier] NULL,
	[ContractNo] [varchar](256) NULL,
	[CustomerGuid] [uniqueidentifier] NULL,
	[BuildingGuid] [uniqueidentifier] NULL,
	[CostGuid] [uniqueidentifier] NULL,
	[FromDate] [datetime] NULL,
	[ToDate] [datetime] NULL,
	[Period] [int] NULL,
	[PeriodType] [int] NULL,
	[Rent] [float] NULL,
	[MonthlyValue] [float] NULL,
	[CurrencyGuid] [uniqueidentifier] NULL,
	[CurrencyVal] [float] NULL,
	[PayType] [int] NULL,
	[Note] [varchar](8000) NULL,
	[Note2] [varchar](8000) NULL,
	[Trademark] [varchar](256) NULL,
	[Purpose] [varchar](256) NULL,
	[Whereabouts] [varchar](256) NULL,
	[IncomeAccountGUID] [uniqueidentifier] NULL,
	[CustAccountGuid] [uniqueidentifier] NULL,
	[CreateContractEntry] [bit] NULL,
	[ContractFinish] [bit] NULL,
	[ContractFinishDate] [datetime] NULL,
	[ResultingAmount] [float] NULL,
	[ResultingAmount2] [float] NULL,
	[RoundKind] [int] NULL,
	[ResultingNote] [varchar](256) NULL,
	[CreateResultingEntry] [bit] NULL,
	[RentDuration] [varchar](256) NULL,
	[Rentype] [varchar](256) NULL,
	[TermsOfPayment] [varchar](256) NULL,
	[DiscountPercent] [float] NULL,
	[DiscountValue] [float] NULL,
	[DiscountAccountGuid] [uniqueidentifier] NULL,
	[UserGuid] [uniqueidentifier] NULL,
	[BranchGuid] [uniqueidentifier] NULL,
	[FineExpenceAccountGUID] [uniqueidentifier] NULL,
	[NewState] [int] NULL,
	[OtherFee] [float] NULL,
	[OtherFeeAccountGUID] [uniqueidentifier] NULL,
	[License1No] [varchar](256) NULL,
	[License2No] [varchar](256) NULL,
	[License3No] [varchar](256) NULL,
	[License1Date1] [datetime] NULL,
	[License2Date1] [datetime] NULL,
	[License3Date1] [datetime] NULL,
	[License1Date2] [datetime] NULL,
	[License2Date2] [datetime] NULL,
	[License3Date2] [datetime] NULL,
	[Ltnwhereabouts] [varchar](256) NULL,
	[LtnPurpose] [varchar](256) NULL,
	[LtnRentDuration] [varchar](256) NULL,
	[LtnRentype] [varchar](256) NULL,
	[LtnTermsOfPayment] [varchar](256) NULL,
	[IsRounded] [bit] NULL,
	[CountOldContract] [int] NULL,
	[AcquittancePrinted] [bit] NULL,
	[AcquittancePrintDate] [datetime] NULL,
	[AcquittancePrintedByGuid] [uniqueidentifier] NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ServicesContractType]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ServicesContractType](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[Code] [varchar](256) NULL,
	[Name] [varchar](256) NULL,
	[ltnName] [varchar](256) NULL,
	[Menu] [varchar](256) NULL,
	[LtnMenu] [varchar](256) NULL,
	[ShortCut] [varchar](256) NULL,
	[ExpenceAccountGUID] [uniqueidentifier] NULL,
	[DiscountAccountGUID] [uniqueidentifier] NULL,
	[Rentcondition] [varchar](2048) NULL,
	[DefPrintPath] [varchar](256) NULL,
	[CreateEntry] [bit] NULL,
	[AutoCreateEntry] [bit] NULL,
	[AutoPostedEntry] [bit] NULL,
	[EntryDate] [int] NULL,
	[MoveCostWithExpenceDebit] [bit] NULL,
	[MoveCostWithExpenceCredit] [bit] NULL,
	[MoveCostWithDiscountDebit] [bit] NULL,
	[MoveCostWithDiscountCredit] [bit] NULL,
	[DefPrintReceipt] [varchar](256) NULL,
	[DefPrintLogPath] [varchar](256) NULL,
	[DefPrintacquittance] [varchar](256) NULL,
	[FirstPayNote] [varchar](255) NULL,
	[FirstPayNoteLtn] [varchar](255) NULL,
	[ContractNote] [varchar](255) NULL,
	[ContractNoteLtn] [varchar](255) NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ServicesContract]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ServicesContract](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[EditDate] [datetime] NULL,
	[Mark] [bit] NULL,
	[TypeGuid] [uniqueidentifier] NULL,
	[ContractNo] [varchar](256) NULL,
	[CustomerGuid] [uniqueidentifier] NULL,
	[BuildingGuid] [uniqueidentifier] NULL,
	[CostGuid] [uniqueidentifier] NULL,
	[FromDate] [datetime] NULL,
	[ToDate] [datetime] NULL,
	[Period] [int] NULL,
	[PeriodType] [int] NULL,
	[Rent] [float] NULL,
	[MonthlyValue] [float] NULL,
	[CurrencyGuid] [uniqueidentifier] NULL,
	[CurrencyVal] [float] NULL,
	[PayType] [int] NULL,
	[Note] [varchar](8000) NULL,
	[Note2] [varchar](8000) NULL,
	[Trademark] [varchar](256) NULL,
	[Purpose] [varchar](256) NULL,
	[Whereabouts] [varchar](256) NULL,
	[ExpenceAccountGUID] [uniqueidentifier] NULL,
	[CustAccountGuid] [uniqueidentifier] NULL,
	[CreateContractEntry] [bit] NULL,
	[ContractFinish] [bit] NULL,
	[ContractFinishDate] [datetime] NULL,
	[ResultingAmount] [float] NULL,
	[ResultingAmount2] [float] NULL,
	[RoundKind] [int] NULL,
	[ResultingNote] [varchar](256) NULL,
	[CreateResultingEntry] [bit] NULL,
	[RentDuration] [varchar](256) NULL,
	[Rentype] [varchar](256) NULL,
	[TermsOfPayment] [varchar](256) NULL,
	[DiscountPercent] [float] NULL,
	[DiscountValue] [float] NULL,
	[DiscountAccountGuid] [uniqueidentifier] NULL,
	[UserGuid] [uniqueidentifier] NULL,
	[BranchGuid] [uniqueidentifier] NULL,
	[FineExpenceAccountGUID] [uniqueidentifier] NULL,
	[NewState] [int] NULL,
	[OtherFee] [float] NULL,
	[OtherFeeAccountGUID] [uniqueidentifier] NULL,
	[License1No] [varchar](256) NULL,
	[License2No] [varchar](256) NULL,
	[License3No] [varchar](256) NULL,
	[License1Date1] [datetime] NULL,
	[License2Date1] [datetime] NULL,
	[License3Date1] [datetime] NULL,
	[License1Date2] [datetime] NULL,
	[License2Date2] [datetime] NULL,
	[License3Date2] [datetime] NULL,
	[Ltnwhereabouts] [varchar](256) NULL,
	[LtnPurpose] [varchar](256) NULL,
	[LtnRentDuration] [varchar](256) NULL,
	[LtnRentype] [varchar](256) NULL,
	[LtnTermsOfPayment] [varchar](256) NULL,
	[IsRounded] [bit] NULL,
	[CountOldContract] [int] NULL,
	[AcquittancePrinted] [bit] NULL,
	[AcquittancePrintDate] [datetime] NULL,
	[AcquittancePrintedByGuid] [uniqueidentifier] NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwAllContractGuid]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwAllContractGuid]
  
as

	Select 
		L.[Guid],
		L.[CustomerGuid],
		L.BuildingGuid,
		L.[ApartmentGuid] as [RealtyGuid],
		T.[ContractKind],
		L.TypeGuid,
		T.Name,
		L.Number as ContractNumber
	From 
		[LeaseApartment] [L]
		inner join [ContractType] T on T.Guid = L.TypeGuid
		
	union all
	Select 
		L.Guid,
		L.[CustomerGuid],
		L.BuildingGuid,
		L.[ParkingGuid],
		T.[ContractKind],
		L.TypeGuid,
		T.Name,
		L.Number as ContractNumber
	From 
		[ParkingContract] [L]
		inner join [ContractType] T on T.Guid = L.TypeGuid
		
	union all
	Select
		L.Guid,
		L.[CustomerGuid],
		0x0 as BuildingGuid,
		L.[LandGuid],
		T.[ContractKind],
		L.TypeGuid,
		T.Name,
		L.Number as ContractNumber
	From 
		[LandContract] [L]
		inner join [ContractType] T on T.Guid = L.TypeGuid

	union all
	Select
		L.Guid,
		L.[CustomerGuid],
		0x0 as BuildingGuid,
		0x0 as [RealtyGuid],
		0 as [ContractKind],
		L.TypeGuid,
		T.Name,
		L.Number as ContractNumber
	From 
		[ServicesContract] [L]
		inner join [ServicesContractType] T on T.Guid = L.TypeGuid

	union all
	Select
		L.Guid,
		L.[CustomerGuid],
		0x0 as BuildingGuid,
		0x0 as [RealtyGuid],
		0 as [ContractKind],
		L.TypeGuid,
		T.Name,
		L.Number as ContractNumber
	From 
		[MaintenanceContract] [L]
		inner join [MaintenanceContractType] T on T.Guid = L.TypeGuid

GO
/****** Object:  Table [dbo].[AssetsDepreciation]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AssetsDepreciation](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[Date] [smalldatetime] NULL,
	[CurrencyGUID] [uniqueidentifier] NULL,
	[CurrencyVal] [float] NULL,
	[CreateEntry] [bit] NULL,
	[CreditCostGUID] [uniqueidentifier] NULL,
	[DebitCostGUID] [uniqueidentifier] NULL,
	[AssetsGroupGuid] [uniqueidentifier] NULL,
	[AssetsGuid] [uniqueidentifier] NULL,
	[AssetsAreaGuid] [uniqueidentifier] NULL,
	[IsRounded] [bit] NULL,
	[Note] [varchar](256) NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbAssetsDepreciation]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbAssetsDepreciation]
	  
	as
		Select 
			[T].*
		From
			[AssetsDepreciation] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  View [dbo].[vbLawsuit]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbLawsuit]
	  
	as
		Select 
			[T].*
		From
			[Lawsuit] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  View [dbo].[vwAllFlatKind]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwAllFlatKind]
  
as
		Select Distinct FlatKind from Apartment
		where FlatKind <> ''
		union 
		Select Distinct ShopKind from Shop
		where ShopKind <> ''
	

GO
/****** Object:  Table [dbo].[LawsuitState]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LawsuitState](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[ParentGuid] [uniqueidentifier] NULL,
	[State] [varchar](256) NULL,
	[Date] [datetime] NULL,
	[UserGuid] [uniqueidentifier] NULL,
	[Note] [varchar](256) NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbLawsuitState]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbLawsuitState]
	  
	as
		Select 
			[T].*
		From
			[LawsuitState] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  View [dbo].[vwMaintenanceContractType]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE View [dbo].[vwMaintenanceContractType]
  
as
	Select
		[A].[Number],
		[A].[Guid],
		[A].[SecLvl],
		[A].[Code] as [Code],
		[A].[Name] as [ArName],

		[A].[Name] as [TypeNameAr],
		[A].[Name] as [TypeNameLtn],

		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[LtnName],'') <> '') then [A].[LtnName] else [A].[Name] end as [Name], 
		[A].[ltnName],
		[A].[Menu] as [arMenu],
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[LtnMenu],'') <> '') then [A].[LtnMenu] else [A].[Menu] end as [Menu], 
		[A].[LtnMenu],
		[A].[defprintPath],
		A.ShortCut,

		IncomeAccountGUID,
		[DiscountAccountGUID],

		[Rentcondition],
		[CreateEntry],
		[AutoCreateEntry],
		[AutoPostedEntry],
		[EntryDate],

		[MoveCostWithExpenceDebit],
		[MoveCostWithExpenceCredit],
		
		[MoveCostWithDiscountDebit],
		[MoveCostWithDiscountCredit],
		
		[DefPrintLogPath],
		[DefPrintReceipt],
		[DefPrintacquittance],
		
		[FirstPayNoteLtn],

		[ContractNoteLtn],
		
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[FirstPayNoteLtn],'') <> '') then [A].[FirstPayNoteLtn] else [A].[FirstPayNote] end as [FirstPayNote],
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[ContractNoteLtn],'') <> '') then [A].[ContractNoteLtn] else [A].[ContractNote] end as [ContractNote]
		
	From
		[MaintenanceContractType] [A]


GO
/****** Object:  Table [dbo].[MaintenanceWorker]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MaintenanceWorker](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[Name] [varchar](256) NULL,
	[LtnName] [varchar](256) NULL,
	[BirthDate] [datetime] NULL,
	[PassportNO] [varchar](256) NULL,
	[PassportExpireDate] [datetime] NULL,
	[StayExpireDate] [datetime] NULL,
	[PersonalityNo1] [varchar](256) NULL,
	[PersonalityNo2] [varchar](256) NULL,
	[Profession] [varchar](256) NULL,
	[Address] [varchar](256) NULL,
	[Phone] [varchar](256) NULL,
	[Mobile] [varchar](256) NULL,
	[Nationality] [varchar](256) NULL,
	[LtnNationality] [varchar](256) NULL,
	[Security] [varchar](256) NULL,
	[MemoSecurity] [varchar](256) NULL,
	[Domicile] [varchar](256) NULL,
	[AccountGuid] [uniqueidentifier] NULL,
	[Note] [varchar](256) NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UK_MaintenanceWorker_Name_UNIQUE] UNIQUE NONCLUSTERED 
(
	[Name] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbMaintenanceWorker]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbMaintenanceWorker]
	  
	as
		Select 
			[T].*
		From
			[MaintenanceWorker] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  View [dbo].[vwMaintenanceWorker]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE view [dbo].[vwMaintenanceWorker]
  
as
	Select 
		[Number],
		[Guid],
		[SecLvl],
		[Name] as [ArName],
		[LtnName], 
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([LtnName],'') <> '') then [LtnName] else [Name] end as [Name],  
		[BirthDate],	
		[PassportNO],
		[PassportExpireDate],	
		[StayExpireDate],	
		[PersonalityNo1],
		[PersonalityNo2],
		[Profession],
		[Address],
		[Phone],
		[Mobile],
		[Nationality],
		[Security],
		[MemoSecurity],
		[Domicile],
		[Note]
	From 
		vbMaintenanceWorker

GO
/****** Object:  Table [dbo].[LawsuitExpense]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LawsuitExpense](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[ParentGuid] [uniqueidentifier] NULL,
	[CreateEntry] [bit] NULL,
	[EntryDate] [datetime] NULL,
	[CustRecovery] [bit] NULL,
	[ReceiptNo] [varchar](256) NULL,
	[ReceiptDate] [datetime] NULL,
	[ReceiptValue] [float] NULL,
	[CurrencyGUID] [uniqueidentifier] NULL,
	[CurrencyVal] [float] NULL,
	[Reference] [varchar](256) NULL,
	[ReceiptNote] [varchar](256) NULL,
	[DebitAccountGuid] [uniqueidentifier] NULL,
	[CreditAccountGuid] [uniqueidentifier] NULL,
	[DebitCostGuid] [uniqueidentifier] NULL,
	[CreditCostGuid] [uniqueidentifier] NULL,
	[DebitNote] [varchar](256) NULL,
	[CreditNote] [varchar](256) NULL,
	[UserGuid] [uniqueidentifier] NULL,
	[Note] [varchar](256) NULL,
	[OneNote] [bit] NULL,
	[IsRounded] [bit] NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbLawsuitExpense]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbLawsuitExpense]
	  
	as
		Select 
			[T].*
		From
			[LawsuitExpense] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  View [dbo].[vbMaintenanceContract]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbMaintenanceContract]
	  
	as
		Select 
			[T].*
		From
			[MaintenanceContract] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  View [dbo].[vwMaintenanceContract]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE view [dbo].[vwMaintenanceContract]
  
as
	Select 
		[TypeGuid],
		[EditDate],
		[Mark],
		Case when IsNull([ContractNo],'') <> '' then [ContractNo] else CAST(A.Number as varchar(255)) end as [ContractNo],
		[T].[Name] as [TypeName],

		[T].[Name] as [TypeNameAr],
		[T].[Name] as [TypeNameLtn],

		[T].[Name]+ ' / ' + Cast([A].[Number] as Varchar(10)) as [ArLeaseKind],

		[T].[Name] + Cast([A].[Number] as Varchar(10))  as [Contract], 


		[A].[Rent] - isNull([A].[DiscountValue],0) as [Value],

		[Cu].[Name] as [CustName],
		[Cu].[ArName] as [CustArName],
		[Cu].[LtnName] as [CustLtnName],
		[Cu].[Phonejob] as [CustomerPhonejob],
		[Cu].[Mobile] as [CustomerMobile],
		[Cu].[Nationality] as [CustomerNationality],
		[A].[BuildingGuid],
		[A].[Guid],
		[A].[Number],
		[A].[CustomerGuid],
		[A].[FromDate],
		[A].[ToDate],
		[A].[Rent],
		[A].[PeriodType],
		[A].[MonthlyValue],
		[A].[CurrencyGuid],
		[A].[CurrencyVal],
		[A].[PayType],
		[A].[Note],
		[A].[Note2],
		[A].[Purpose],
		[A].[IncomeAccountGuid],
		[A].[CustAccountGuid],

		[A].[ResultingAmount],
		[A].[ResultingAmount2],

		A.ContractFinish,
		[A].[ContractFinishDate],
		[A].[CreateResultingEntry],


		[A].[RentDuration],
		[A].[Rentype],
		[A].[TermsOfPayment],
		[A].[Seclvl],
		[A].[FineExpenceAccountGUID],

		[A].[CreateContractEntry],
		[A].[Whereabouts],		
		[A].[DiscountPercent],
		[A].[DiscountValue],
		[A].[Rent] - [A].[DiscountValue] as [RentAfterDiscount],	
		[A].[DiscountAccountGuid],
		[Cr].[Code] as [CurrencyName],
		[A].[BranchGuid],
		[A].[RoundKind],

		Case 
			when 
				Case when [ContractFinish] = 0 then [ToDate] else [ContractFinishDate] end 
				<= GetDate() then --ãäÊåí ÇáãÏÉ
									Case when [ContractFinish] = 0 then dbo.SC('ãäÊåí ÇáãÏÉ æáã íÊã ÅäåÇÁ ÇáÚÞÏ') 
									else
									dbo.SC('ãäÊåí ÇáãÏÉ æÊã ÅäåÇÁ ÇáÚÞÏ') end
			when 
				Case when [ContractFinish] = 0 then [ToDate] else [ContractFinishDate] end 
				> GetDate() then dbo.SC('ÛíÑ ãäÊåí') 
		end as [ContractState],

		[A].[Period],


		Case when [ContractFinish] = 0 then [ToDate] else [ContractFinishDate]  end as [EndDate],
		[A].[ResultingNote],

		[A].[NewState],
		Case when [A].[NewState] = 0 then dbo.SC('ÌÏíÏ') else dbo.SC('ÊÌÏíÏ') End as [NewStateStr],

		[A].[OtherFee],
		[A].[OtherFeeAccountGUID],

		[A].[License1No],
		[A].[License2No],
		[A].[License3No],
		[A].[License1Date1],
		[A].[License2Date1],
		[A].[License3Date1],
		[A].[License1Date2],
		[A].[License2Date2],
		[A].[License3Date2],
		[A].[Ltnwhereabouts],
		[A].[LtnPurpose],
		[A].[LtnRentDuration],
		[A].[LtnRentype],
		[A].[LtnTermsOfPayment],
		[A].[Trademark],

		[A].[CostGuid],
		[A].[CustAccountGuid] as [CustAcGuid],

		A.[IsRounded],

		[CountOldContract],

		[A].[AcquittancePrinted],
		[A].[AcquittancePrintDate],
		
		[A].AcquittancePrintedByGuid
	from 
		[vbMaintenanceContract] [A]
		inner join [vwMaintenanceContractType] [T] on [T].[Guid] = [A].[TypeGuid]
		--inner join [vwBuilding] [B] On [A].[BuildingGuid] = [B].[Guid]
		left join [vwcustomer] [Cu] On [Cu].[Guid] = [A].[CustomerGuid]
		left join [Currency] [Cr] On [Cr].[Guid] = [A].[CurrencyGuid]


GO
/****** Object:  Table [dbo].[Complaint]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Complaint](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[No] [varchar](256) NULL,
	[Date] [datetime] NULL,
	[CustGuid] [uniqueidentifier] NULL,
	[RealtyKind] [int] NULL,
	[BuildingGuid] [uniqueidentifier] NULL,
	[FlatGuid] [uniqueidentifier] NULL,
	[ShopGuid] [uniqueidentifier] NULL,
	[ParkingGuid] [uniqueidentifier] NULL,
	[VillaGuid] [uniqueidentifier] NULL,
	[LandGuid] [uniqueidentifier] NULL,
	[Note] [varchar](500) NULL,
	[ComplaintState] [int] NULL,
	[CloseDate] [datetime] NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbComplaint]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbComplaint]
	  
	as
		Select 
			[T].*
		From
			[Complaint] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  View [dbo].[vwComplaint]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE view [dbo].[vwComplaint]
  
as
	Select 
		GetDate() as [NowDate],
		[C].[Name] as [CustName],
		[C].[ArName] as [CustArName],
		[C].[LtnName] as [CustLtnName],
		[C].[Address] as [CustomerAddress],
		[C].[Nationality] as [CustomerNationality],
		[C].[Profession] as [CustomerProfession],
		[C].[Domicile] as [CustomerDomicile],
		[C].[Security] as [CustomerSecurity],
		[C].[MemoSecurity] as [CustomerMemoSecurity],
		[C].[BoxNo] as [CustomerBoxNo],
		[C].[PersonalityNo1] as [CustomerPersonalityNo1],
		[C].[PersonalityNo2] as [CustomerPersonalityNo2],
		[C].[Adjective]as [CustomerAdjective],
		[C].[Fax]	as [CustomerFax],
		[C].[PhoneJob]	as [CustomerPhoneJob],
		[C].[Mobile]	as [CustomerMobile],
		[C].[Email]	as [CustomerEmail],
		[C].[PassportNO] as [CustomerPassportNO],
		[C].[PassportExpireDate] as [CustomerPassportExpireDate],	

		[B].[Name] as [BuildingName],
		[B].[ArName] as [BuildingArName],
		[B].[LtnName] as [BuildingLtnName],
		[B].[Emirate],
		[B].[Suburb],
		[B].[Area],
		[B].[Street],
		[B].[BuildingNo],
		[B].[BondType] as [BuildingBondType],
		[B].[BondNo] as [BuildingBondNo],
		[B].[BondDate] as [BuildingBondDate],
		[B].[LtnEmirate],
		[B].[LtnArea],
		[B].[LtnSuburb],
		[B].[LtnStreet],
		
		[B].[PieceNo],
		[B].[BasinNo],	
		
		[P].[FloorNo],
		
		Case 
			when [RealtyKind] = 0 then [P].[NO] 
			when [RealtyKind] = 1 then [S].[No]
			when [RealtyKind] = 2 then [K].[No]
			when [RealtyKind] = 3 then [V].[VillaNo]
			when [RealtyKind] = 4 then [L].[Name]
		end as [RealtyNO],

		Case 
			when [RealtyKind] = 0 then [P].[Guid] 
			when [RealtyKind] = 1 then [S].[Guid]
			when [RealtyKind] = 2 then [K].[Guid]
			when [RealtyKind] = 3 then  [V].[Guid]
			when [RealtyKind] = 4 then [L].[Guid]
		end as [RealtyGuid],
		
		Case when [a].ComplaintState = 0 then dbo.SC('ãÝÊæÍÉ')
			 when [a].ComplaintState = 1 then dbo.SC('ãÛáÞÉ')

			 when [a].ComplaintState = 2 then dbo.SC('ãÚáÞÉ')
			 when [a].ComplaintState = 3 then dbo.SC('ãÊÃÎÑÉ')
			 when [a].ComplaintState = 4 then dbo.SC('ÎÇÑÌÉ Úä ÇáÅÑÇÏÉ')
		end as ComplaintStateStr,

		[A].*
	from 
		[vbComplaint] [A]
		left join [vwBuilding] [B] On [A].[BuildingGuid] = [B].[Guid]
		left join [vwApartment] [P] on [P].[Guid] = [A].[FlatGuid]
		left join [vwShop] [S] on [S].[Guid] = [A].[ShopGuid]
		left join [vwParking] [K] on [K].[Guid] = [A].[ParkingGuid]
		left join [Villa] [V] on [v].[Guid] = [A].[VillaGuid]
		left join [vwEarth] [L] on [L].[Guid] = [A].[LandGuid]
		left join [vwCustomer] [C] on [C].[Guid] = [A].[CustGuid]


GO
/****** Object:  Table [dbo].[IncomeSaved]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[IncomeSaved](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[Date] [datetime] NULL,
	[FromDate] [datetime] NULL,
	[ToDate] [datetime] NULL,
	[Note] [varchar](256) NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbIncomeSaved]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbIncomeSaved]
	  
	as
		Select 
			[T].*
		From
			[IncomeSaved] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  Table [dbo].[MaintenanceContractCachPayment]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MaintenanceContractCachPayment](
	[ContractGuid] [uniqueidentifier] NULL,
	[EntryGuid] [uniqueidentifier] NULL
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwMaintenanceContractCachPayment]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwMaintenanceContractCachPayment]
  
as
	Select
		[C].[ContractGuid],
		[H].[HNumber] as [Number],
		S.Number as [RecieptVoucherNumber],
		[H].[DNumber],
		[H].[HDate] as [Date],
		[H].[DCredit] as [Value],
		[H].[CurrencyGuid],
		[H].[CurrencyName] as [Currency],
		[H].[CurrencyVal],
		[H].[HNote],
		[H].[DNote],
		[h].AcGuid,
		(Select Number from Secondary_Entry where Guid = [C].[EntryGuid] ) as SNumber,
		1 as [Print],
		[H].[HGuid] as [Guid]
	from 
		[MaintenanceContractCachPayment] [C]
		inner join [vwDetailEntry] [H] on [H].[HGuid] = [C].[EntryGuid] 
		left join Secondary_Entry S on S.Guid = H.[HGuid]
		inner join MaintenanceContract L on L.CustAccountGuid = H.AcGuid and L.Guid = C.contractGuid
	where
		[H].[DCredit] <> 0


GO
/****** Object:  Table [dbo].[MaintenanceOrder]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MaintenanceOrder](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[No] [varchar](256) NULL,
	[ComplaintGuid] [uniqueidentifier] NULL,
	[MaintenanceWorkerGuid] [uniqueidentifier] NULL,
	[WorkKInd] [varchar](256) NULL,
	[StartDate] [datetime] NULL,
	[EndExpectedDate] [datetime] NULL,
	[CloseDate] [datetime] NULL,
	[OrderState] [int] NULL,
	[ReasonNotRealized] [varchar](256) NULL,
	[Convertto] [varchar](256) NULL,
	[ConvertNote] [varchar](256) NULL,
	[Realized] [varchar](256) NULL,
	[Mat] [varchar](256) NULL,
	[Reason] [varchar](256) NULL,
	[repitition] [int] NULL,
	[delay] [int] NULL,
	[DelayReason] [varchar](256) NULL,
	[CreateEntry] [bit] NULL,
	[EntryDate] [smalldatetime] NULL,
	[EntryValue] [float] NULL,
	[EntryCurrencyGUID] [uniqueidentifier] NULL,
	[EntryCurrencyVal] [float] NULL,
	[DebitAccountGuid] [uniqueidentifier] NULL,
	[CreditAccountGuid] [uniqueidentifier] NULL,
	[DebitCostGuid] [uniqueidentifier] NULL,
	[CreditCostGuid] [uniqueidentifier] NULL,
	[EntryNote] [varchar](255) NULL,
	[Note2] [varchar](255) NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwMaintenanceOrder]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwMaintenanceOrder]
  
as
	Select
		O.*,
		Case when OrderState = 0 then dbo.SC('ÞíÏ ÇáÅäÌÇÒ')
			 when OrderState = 1 then dbo.SC('ÊãÊ ÇáÕíÇäÉ')
			 when OrderState = 2 then dbo.SC('áã ÊãÊ ÇáÕíÇäÉ')
		end as OrderStateStr,
		
		Case when repitition = 0 then dbo.SC('Ãæá ãÑÉ')
			 when repitition = 1 then dbo.SC('ÃßËÑ ãä ãÑÉ')
		end as repititionStr,
		w.Name as [MaintenanceWorker],
		w.ltnName as [MaintenanceWorkerLtnName],
		w.Mobile as [WorkerMobile],
		[C].[BuildingGuid],
		[C].[No] as [ComplaintNo],
		[C].[Date] as [ComplaintDate],
		[C].[Note] as [ComplaintNote],
		[C].[CustName],
		[C].[CustArName],
		[C].[CustLtnName],
		[C].[CustomerAddress],
		[C].[CustomerNationality],
		[C].[CustomerProfession],
		[C].[CustomerDomicile],
		[C].[CustomerSecurity],
		[C].[CustomerMemoSecurity],
		[C].[CustomerBoxNo],
		[C].[CustomerPersonalityNo1],
		[C].[CustomerPersonalityNo2],
		[C].[CustomerAdjective],
		[C].[CustomerFax],
		[C].[CustomerPhoneJob],
		[C].[CustomerMobile],
		[C].[CustomerEmail],
		[C].[CustomerPassportNO],
		[C].[CustomerPassportExpireDate],
		[C].[BuildingName],
		[C].[BuildingarName],
		[C].[BuildingLtnName],
		[C].[Emirate],
		[C].[Suburb],
		[C].[Area],
		[C].[Street],
		[C].[BuildingNo],
		[C].[BuildingBondType],
		[C].[BuildingBondNo],
		[C].[BuildingBondDate],
		[C].[LtnEmirate],
		[C].[LtnArea],
		[C].[LtnSuburb],
		[C].[LtnStreet],
		[C].[PieceNo],
		[C].[BasinNo],
		[C].[RealtyNo],
		BuildingName+'/'+RealtyNo as BuildingName_RealtyNo,
		[C].[FloorNo],
		[C].[CustGuid],
		[C].RealtyGuid,
		[C].[RealtyKind]
	From
		[MaintenanceOrder] O
		inner join [vwComplaint] C on C.Guid = O.ComplaintGuid
		left join [vwMaintenanceWorker] W on w.Guid = O.MaintenanceWorkerGuid
		
		

GO
/****** Object:  Table [dbo].[OfferPrice]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[OfferPrice](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[Date] [datetime] NULL,
	[No] [varchar](256) NULL,
	[CustomerName] [varchar](256) NULL,
	[CustomerPhone] [varchar](256) NULL,
	[OfferKind] [int] NULL,
	[BuildingGuid] [uniqueidentifier] NULL,
	[RealtyGuid] [uniqueidentifier] NULL,
	[Price] [float] NULL,
	[DiscountPercent] [float] NULL,
	[DiscountValue] [float] NULL,
	[PriceAfterDiscount] [float] NULL,
	[CurrencyGUID] [uniqueidentifier] NULL,
	[CurrencyVal] [float] NULL,
	[FirstPay] [float] NULL,
	[FirstPayDate] [datetime] NULL,
	[InstCount] [int] NULL,
	[More] [int] NULL,
	[InstType] [int] NULL,
	[FirstinsDate] [datetime] NULL,
	[OneInstallment] [float] NULL,
	[LastPay] [float] NULL,
	[Details] [varchar](500) NULL,
	[Note] [varchar](255) NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbOfferPrice]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbOfferPrice]
	  
	as
		Select 
			[T].*
		From
			[OfferPrice] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  Table [dbo].[ContractWorkFlow]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ContractWorkFlow](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[ContractGuid] [uniqueidentifier] NULL,
	[Printed] [int] NULL,
	[Certification] [int] NULL,
	[CustStep1] [bit] NULL,
	[CustStepDate1] [datetime] NULL,
	[CustStep2] [bit] NULL,
	[CustStepDate2] [datetime] NULL,
	[CompStep1] [bit] NULL,
	[CompStepDate1] [datetime] NULL,
	[CompStep2] [bit] NULL,
	[CompStepDate2] [datetime] NULL,
	[CompStep3] [bit] NULL,
	[CompStepDate3] [datetime] NULL,
	[CompStep4] [bit] NULL,
	[CompStepDate4] [datetime] NULL,
	[CompStep5] [bit] NULL,
	[CompStepDate5] [datetime] NULL,
	[CompStep6] [bit] NULL,
	[CompStepDate6] [datetime] NULL,
	[CompStep7] [bit] NULL,
	[CompStepDate7] [datetime] NULL,
	[Note] [varchar](256) NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbContractWorkFlow]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbContractWorkFlow]
	  
	as
		Select 
			[T].*
		From
			[ContractWorkFlow] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  Table [dbo].[LinkCheckContract]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LinkCheckContract](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[ParentGuid] [uniqueidentifier] NULL,
	[Kind] [int] NULL,
	[ContractGuid] [uniqueidentifier] NULL,
	[Percent] [float] NULL,
	[Value] [float] NULL,
	[Note] [varchar](255) NULL
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbServicesContract]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbServicesContract]
	  
	as
		Select 
			[T].*
		From
			[ServicesContract] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  View [dbo].[vwServicesContractType]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE View [dbo].[vwServicesContractType]
  
as
	Select
		[A].[Number],
		[A].[Guid],
		[A].[SecLvl],
		[A].[Code] as [Code],
		[A].[Name] as [ArName],

		[A].[Name] as [TypeNameAr],
		[A].[Name] as [TypeNameLtn],

		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[LtnName],'') <> '') then [A].[LtnName] else [A].[Name] end as [Name], 
		[A].[ltnName],
		[A].[Menu] as [arMenu],
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[LtnMenu],'') <> '') then [A].[LtnMenu] else [A].[Menu] end as [Menu], 
		[A].[LtnMenu],
		[A].[defprintPath],
		A.ShortCut,

		[ExpenceAccountGUID],
		[DiscountAccountGUID],

		[Rentcondition],
		[CreateEntry],
		[AutoCreateEntry],
		[AutoPostedEntry],
		[EntryDate],

		[MoveCostWithExpenceDebit],
		[MoveCostWithExpenceCredit],
		
		[MoveCostWithDiscountDebit],
		[MoveCostWithDiscountCredit],
		
		[DefPrintLogPath],
		[DefPrintReceipt],
		[DefPrintacquittance],
		
		[FirstPayNoteLtn],

		[ContractNoteLtn],
		
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[FirstPayNoteLtn],'') <> '') then [A].[FirstPayNoteLtn] else [A].[FirstPayNote] end as [FirstPayNote],
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[ContractNoteLtn],'') <> '') then [A].[ContractNoteLtn] else [A].[ContractNote] end as [ContractNote]
		
	From
		[ServicesContractType] [A]


GO
/****** Object:  View [dbo].[vwServicesContract]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE view [dbo].[vwServicesContract]
  
as
	Select 
		[TypeGuid],
		[EditDate],
		[Mark],
		[ContractNo],
		[T].[Name] as [TypeName],

		[T].[Name] as [TypeNameAr],
		[T].[Name] as [TypeNameLtn],

		[T].[Name]+ ' / ' + Cast([A].[Number] as Varchar(10)) as [ArLeaseKind],
		[B].[Name] as [BuildingName],
		[B].[ArName] as [BuildingArName],
		[B].[LtnName] as [BuildingLtnName],

		[B].[BuildingCode],

		[T].[Name] + Cast([A].[Number] as Varchar(10))  as [Contract], 


		[A].[Rent] - isNull([A].[DiscountValue],0) as [Value],

		[Cu].[Name] as [CustName],
		[Cu].[ArName] as [CustArName],
		[Cu].[LtnName] as [CustLtnName],
		[Cu].[Phonejob] as [CustomerPhonejob],
		[Cu].[Mobile] as [CustomerMobile],
		[Cu].[Nationality] as [CustomerNationality],
		[A].[BuildingGuid],
		[A].[Guid],
		[A].[Number],
		[A].[CustomerGuid],
		[A].[FromDate],
		[A].[ToDate],
		[A].[Rent],
		[A].[PeriodType],
		[A].[MonthlyValue],
		[A].[CurrencyGuid],
		[A].[CurrencyVal],
		[A].[PayType],
		[A].[Note],
		[A].[Note2],
		[A].[Purpose],
		[A].[ExpenceAccountGuid],
		[A].[CustAccountGuid],

		[A].[ResultingAmount],
		[A].[ResultingAmount2],

		A.ContractFinish,
		[A].[ContractFinishDate],
		[A].[CreateResultingEntry],


		[A].[RentDuration],
		[A].[Rentype],
		[A].[TermsOfPayment],
		[A].[Seclvl],
		[A].[FineExpenceAccountGUID],

		[A].[CreateContractEntry],
		[A].[Whereabouts],		
		[A].[DiscountPercent],
		[A].[DiscountValue],
		[A].[Rent] - [A].[DiscountValue] as [RentAfterDiscount],	
		[A].[DiscountAccountGuid],
		[Cr].[Code] as [CurrencyName],
		[A].[BranchGuid],
		[A].[RoundKind],

		Case 
			when 
				Case when [ContractFinish] = 0 then [ToDate] else [ContractFinishDate] end 
				<= GetDate() then --ãäÊåí ÇáãÏÉ
									Case when [ContractFinish] = 0 then dbo.SC('ãäÊåí ÇáãÏÉ æáã íÊã ÅäåÇÁ ÇáÚÞÏ') 
									else
									dbo.SC('ãäÊåí ÇáãÏÉ æÊã ÅäåÇÁ ÇáÚÞÏ') end
			when 
				Case when [ContractFinish] = 0 then [ToDate] else [ContractFinishDate] end 
				> GetDate() then dbo.SC('ÛíÑ ãäÊåí') 
		end as [ContractState],

		[A].[Period],

		[B].[Emirate],
		[B].[Area] as [BuildingArea],
		[B].[Suburb],
		[B].[Street],
		[B].[BasinNo],
		[B].[PieceNo],
		[B].[BuildingNo],
		[B].[BondType],
		[B].[BondNo],

		[B].[BankName] as [BuildingBankName],
		[B].[BankAccCode] as [BuildingBankAccCode],

		Case when [ContractFinish] = 0 then [ToDate] else [ContractFinishDate]  end as [EndDate],
		[A].[ResultingNote],

		[A].[NewState],
		Case when [A].[NewState] = 0 then dbo.SC('ÌÏíÏ') else dbo.SC('ÊÌÏíÏ') End as [NewStateStr],

		[A].[OtherFee],
		[A].[OtherFeeAccountGUID],

		[A].[License1No],
		[A].[License2No],
		[A].[License3No],
		[A].[License1Date1],
		[A].[License2Date1],
		[A].[License3Date1],
		[A].[License1Date2],
		[A].[License2Date2],
		[A].[License3Date2],
		[A].[Ltnwhereabouts],
		[A].[LtnPurpose],
		[A].[LtnRentDuration],
		[A].[LtnRentype],
		[A].[LtnTermsOfPayment],
		[A].[Trademark],

		[A].[CostGuid],
		[A].[CustAccountGuid] as [CustAcGuid],

		A.[IsRounded],

		[CountOldContract],

		[A].[AcquittancePrinted],
		[A].[AcquittancePrintDate],
		
		[A].AcquittancePrintedByGuid
	from 
		[vbServicesContract] [A]
		inner join [vwServicesContractType] [T] on [T].[Guid] = [A].[TypeGuid]
		inner join [vwBuilding] [B] On [A].[BuildingGuid] = [B].[Guid]
		left join [vwcustomer] [Cu] On [Cu].[Guid] = [A].[CustomerGuid]
		left join [Currency] [Cr] On [Cr].[Guid] = [A].[CurrencyGuid]


GO
/****** Object:  View [dbo].[vbMaintenanceContractType]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbMaintenanceContractType]
	  
	as
		Select 
			[T].*
		From
			[MaintenanceContractType] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  View [dbo].[vbLandContract]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbLandContract]
	  
	as
		Select 
			[T].*
		From
			[LandContract] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  View [dbo].[vwLandContract]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE view [dbo].[vwLandContract]
  
as
	Select 
		[t].[Name] as [TypeName],
		[C].[Number],
		[C].[Mark],
		Case when [ContractKind] = 6 or [ContractKind] = 7 then [L].[Name]
			 when [ContractKind] = 8 or [ContractKind] = 9 then [V].[VillaNo]
		end As [Name],
		Case when [ContractKind] = 6 or [ContractKind] = 7 then [L].[LtnName]
			 when [ContractKind] = 8 or [ContractKind] = 9 then [V].[VillaNo]
		end As [LtnName],
		[C].[Guid],
		[C].[SecLvl],
		[C].[TypeGuid],
		[C].[ContractNo],
		[C].[CustomerGuid],
		[Cu].[Name] as [CustName],
		[Cu].[ArName] as [CustArName],
		[Cu].[ltnName] as [CustltnName],
		[Cu].[Phonejob] as [CustomerPhonejob],
		[Cu].[Mobile] as [CustomerMobile],
		[Cu].[Nationality] as [CustomerNationality],
		[C].[InsuranceAccountGuid] as InsuranceAccountGuid,
		Cu.accountBalance,
		[C].[SalesManGuid],
		Case when [ContractKind] = 6 or [ContractKind] = 7 then [L].[Guid]
			 when [ContractKind] = 8 or [ContractKind] = 9 then [V].[Guid]
		end As [LandGuid],
		
		Case when [ContractKind] = 6 or [ContractKind] = 7 then [L].[Name]
			 when [ContractKind] = 8 or [ContractKind] = 9 then [V].[VillaNo]
		end As  [LandName],
		
		Case when [ContractKind] = 6 or [ContractKind] = 7 then [L].[Details]
			 when [ContractKind] = 8 or [ContractKind] = 9 then [V].[Details]
		end As  [UnitNote],
		
		[C].[EditDate],
		[C].[DeliverDate],
		[C].[FromDate],
		[C].[ToDate],
		Case when [ContractFinish] = 0 then [ToDate] else [ContractFinishDate]  end as [enddate],
		[C].[Rent],

		[C].[RentContractType],
		[C].[MonthlyValue],
		[C].[MonthlyValue] * 12.00 as [YearValue],

		[Cr].[Code] as [CurrencyName],
		[C].[CurrencyGuid],
		[C].[CurrencyVal],
		[C].[PayType],
		[C].[Note],
		[C].[Note2],
		[C].[Whereabouts],
		[C].[RevenueAccountGuid],
		[C].[CustAccountGuid],
		[C].[CommissionFromCustPercent],
		[C].[CommissionFromCustValue],
		[C].[AcCommissionFromCustGuid],
		[C].[CommissionFromOwnerPercent],
		[C].[CommissionFromOwnerValue],
		[C].[AcCommissionFromOwnerGuid],
		[C].[CreateContractEntry],
		[C].[Step1Complete],
		[C].[Step2Complete],
		[C].[Step3Complete],
		[C].[Certification],
		[C].[DiscountPercent],
		[C].[DiscountValue],
		[C].[DiscountAccountGuid],
		[C].[UserGuid],
		[C].[BranchGuid],

		[C].[OtherFee],


		Case 
			when ([Contractkind] = 7) or ([Contractkind] = 9) then 
				Case 
					when 
						Case when [ContractFinish] = 0 then [ToDate] else [ContractFinishDate] end 
						<= GetDate() then --ãäÊåí ÇáãÏÉ
											Case when [ContractFinish] = 0 then dbo.SC('ãäÊåí ÇáãÏÉ æáã íÊã ÅäåÇÁ ÇáÚÞÏ') 
											else
											dbo.SC('ãäÊåí ÇáãÏÉ æÊã ÅäåÇÁ ÇáÚÞÏ') end
					when 
						Case when [ContractFinish] = 0 then [ToDate] else [ContractFinishDate] end 
						> GetDate() then dbo.SC('ÛíÑ ãäÊåí') 
				end
			when ([Contractkind] = 6) or ([Contractkind] = 8)  then dbo.SC('ÈíÚ')
				
		end as [ContractState],

		Case 
			when ([Contractkind] = 7) or ([Contractkind] = 9) then 
				Case 
					when [ContractFinish] = 0 then dbo.SC('ãÔÛæáÉ') 
					else
					Case 
							when 
								exists(Select 
											[Q].[Guid]
										From 
												[LandContract] [Q] 
												inner join [vwContractType] [Qt] on [Qt].[Guid] = [Q].[TypeGuid]
										where 
											[Qt].[Contractkind] = [T].[Contractkind]
											and [Q].[CustomerGuid] = [C].[CustomerGuid]
											and [Q].[LandGuid] = [C].[LandGuid]
											and [Q].[FromDate] >= [C].[ContractFinishDate]
											and [Q].[Guid] <> [C].[Guid]
										)  then dbo.SC('Êã ÇáÊÌÏíÏ') 
					else
						dbo.SC('Êã ÇáÅÎáÇÁ') 
					end
				end
			when ([Contractkind] = 6) or ([Contractkind] = 8)  then ''
		end as [LandState],

		[C].[RentInfoGuid],
		[C].[Purpose],
		[C].[NewState], 
		[C].[RentDuration],
		[C].[Rentype],
		[C].[TermsOfPayment],
		[C].[InsuranceValuePercent],
		[C].[InsuranceValue],
		[C].[InsuranceValueOld],
		[C].[ContractPrice],
		[C].[CertificatValue],
		[C].[ElectricityInsurance],
		[C].[ElectricityCounter],
		[C].[Period],
		[C].[Step4Complete],
		[C].[Step5Complete],
		[C].[OtherFeeAccountGUID],
		[C].[ContractFinish],
		[C].[ContractFinishDate],
		[C].[EditContractFinishDate],
		[C].[ResultingAmount2],
		[C].[ResultingAmount],
		[C].[RoundKind],	
		[C].[FineRevenueAccountGUID],
		[C].[ResultingNote],
		[C].[Fine],
		[C].[FineAccount],
		[C].[FineNote],
		[C].[CreateResultingEntry],
		[C].[AccountContractPrice],
		[C].[AccountCertificatValue],
		[T].[Contractkind],
		Case when [ContractKind] = 6 or [ContractKind] = 7 then [L].[LandOwner]
			 when [ContractKind] = 8 or [ContractKind] = 9 then ''
		end As [LandOwner],
		[C].[VillaGuid],
		
		[C].[License1No],
		[C].[License2No],
		[C].[License3No],
		[C].[License1Date1],
		[C].[License2Date1],
		[C].[License3Date1],
		[C].[License1Date2],
		[C].[License2Date2],
		[C].[License3Date2],

		[C].[Ltnwhereabouts],
		[C].[LtnPurpose],
		[C].[LtnRentDuration],
		[C].[LtnRentype],
		[C].[LtnTermsOfPayment],

		[C].[Number] as [CardNo],
		
		Case when [L].[Guid] is Not Null then [L].[CostGuid]
			 when [V].[Guid] is Not Null then [V].[CostGuid]
		end as [UnitCostGuid],
		[L].[LandType],
		[C].CostGuid,
		[C].[IsRounded],
		[Leave],
		[LeaveDate],
		[C].[AcquittancePrinted],
		[C].[AcquittancePrintDate],
		[C].[Judicial],
		[C].[Trademark],
		[C].[AcquittancePrintedByGuid],
		C.[PrvContractGuid],
		C.IsAutoRenewal,
		C.AcIncomNextYearGuid,
		C.[AddPercent],
		C.[AddValue],
		C.[CommissionFromSalesManrPercent],
		C.[CommissionFromSalesManValue],
		C.[AcSalesManCommissionGuid],
		C.[AcCommissionExpenseGuid],
		C.[SalesManCommNote]
	from 
		[vbLandContract] [C]
		inner join [vwContractType] [T] on [T].[Guid] = [C].[TypeGuid]
		left join [vwEarth]	[L] on [C].[LandGuid] = [L].[Guid] and ([ContractKind] = 6 or [ContractKind] = 7)
		left join [vwVilla]	[V] on [C].[VillaGuid] = [V].[Guid]  and ([ContractKind] = 8 or [ContractKind] = 9)
		left join [vwCustomer] [Cu] on [Cu].[Guid] = [C].[CustomerGuid]
		left join [Currency] [Cr] On [Cr].[Guid] = [C].[CurrencyGuid]

GO
/****** Object:  View [dbo].[vwAllContract]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE View [dbo].[vwAllContract]
WITH  VIEW_METADATA
as
	Select 
		[L].[Number],
		[L].[EditDate],
		[L].[FromDate],
		[L].[ToDate],
		[T].[Name] +' '+[L].[FlatNo]as [TypeName],
		[T].[Name] as [TypeNameAr],
		[T].[Name] as [TypeNameLtn],
		[T].[Guid] as [TypeGuid],
		[L].[ContractNo], 
		[C].[Name] as [CustName],
		[C].[arName] as [CustarName],
		[C].[LtnName] as [CustLtnName],
		[C].[Mobile] as [CustMobile],
		[L].[Rent] - isNull([L].[DiscountValue],0) as [Value],
		[L].[CurrencyGuid],
		[L].[CurrencyVal],
		[C].[Guid] as [CustGuid],
		[C].[AcGuid] as [CustAcGuid],
		[L].[BuildingGuid],
		Case when [L].[ApartmentGuid] <> 0x0 then [L].[ApartmentGuid]
		else [L].[ShopGuid] end as [RealtyGuid],
		[L].[FloorNo],
		[L].[FlatNo],
		[L].[BuildingName],
		[L].[BuildingArName],
		[L].[BuildingLtnName],
		IsNull([L].[NewState],0) as [NewState],
		[L].[Guid],
		[T].[Name] +'/'+ [L].[FlatNo] as [TypeNameAndFlatNo],
		[L].[Note2],
		[L].[CostGuid] as [UnitCostGuid],
		[L].[SalesManGuid],
		T.Code as [TypeCode],
		L.ContractFinish,
		0 as [Kind]
	From 
		[vwLeaseApartment] [L]
		inner join [vwCustomer] [C] on [L].[CustomerGuid] = [C].[Guid]
		inner join [vwContractType] [T] On [T].[Guid] = [L].[TypeGuid]
	union all
	Select 
		[L].[Number],
		[L].[EditDate],
		[L].[FromDate],
		[L].[ToDate],
		[T].[Name]+' '+[L].[No] as [TypeName],
		[T].[Name] as [TypeNameAr],
		[T].[Name] as [TypeNameLtn],
		[T].[Guid] as [TypeGuid],
		[L].[ContractNo],
		[C].[Name] as [CustName],
		[C].[arName] as [CustarName],
		[C].[LtnName] as [CustLtnName]
		,[C].[Mobile] as [CustMobile]
		,[L].[Rent] as [Value]
		,[L].[CurrencyGuid]
		,[L].[CurrencyVal]
		,[C].[Guid] as [CustGuid]
		,[C].[AcGuid] as [CustAcGuid]
		,[L].[BuildingGuid]
		,[L].[ParkingGuid]
		,Null as [FloorNo]
		,[L].[No] as [FlatNo]
		,[L].[BuildingName]
		,[L].[BuildingArName]
		,[L].[BuildingLtnName]
		,IsNull([L].[NewState],0) as [NewState]
		,[L].[Guid]
		,[T].[Name] +'/'+ [L].[No]as [TypeNameAndFlatNo]
		,[L].[Note2]
		,[L].[CostGuid]
		,[L].[SalesManGuid]
		,T.Code as [TypeCode]
		,l.ContractFinish
		,1 as [kind]
	From 
		[vwParkingContract] [L]
		inner join [vwCustomer] [C] on [L].[CustomerGuid] = [C].[Guid]
		inner join [vwContractType] [T] On [T].[Guid] = [L].[TypeGuid]
	union all
	Select
		[L].[Number],
		[L].[EditDate],
		[L].[FromDate],
		[L].[ToDate],
		[T].[Name] as [TypeName],
		[T].[Name] as [TypeNameAr],
		[T].[Name] as [TypeNameLtn],
		[T].[Guid] as [TypeGuid],
		[L].[ContractNo],
		[C].[Name] as [CustName],
		[C].[arName] as [CustarName],
		[C].[LtnName] as [CustLtnName]
		,[C].[Mobile] as [CustMobile]
		,[L].[Rent] as [Value]
		,[L].[CurrencyGuid]
		,[L].[CurrencyVal]
		,[C].[Guid] as [CustGuid]
		,[C].[AcGuid] as [CustAcGuid]
		,LandGuid as [BuildingGuid]
		,L.LandGuid
		,Null as [FloorNo]
		,Null as [FlatNo]
		,LandName as [BuildingName]
		,LandName as [BuildingArName]
		,LandName as [BuildingLtnName]
		,-1 as [NewState]
		,[L].[Guid]
		,[T].[Name] as [TypeNameAndFlatNo]
		,[L].[Note2]
		,[L].[CostGuid]
		,[L].[SalesManGuid]
		,T.Code as [TypeCode]
		,l.ContractFinish
		,2 as [Kind]
	From 
		[vwLandContract] [L]
		inner join [vwCustomer] [C] on [L].[CustomerGuid] = [C].[Guid]
		inner join [vwContractType] [T] On [T].[Guid] = [L].[TypeGuid]

	union all
	Select
		[L].[Number],
		[L].[EditDate],
		[L].[FromDate],
		[L].[ToDate],
		[T].[Name] as [TypeName],
		[T].[Name] as [TypeNameAr],
		[T].[Name] as [TypeNameLtn],
		[T].[Guid] as [TypeGuid],
		[L].[ContractNo],
		[C].[Name] as [CustName],
		[C].[arName] as [CustarName],
		[C].[LtnName] as [CustLtnName]
		,[C].[Mobile] as [CustMobile]
		,[L].[Rent] as [Value]
		,[L].[CurrencyGuid]
		,[L].[CurrencyVal]
		,[C].[Guid] as [CustGuid]
		,[C].[AcGuid] as [CustAcGuid]
		,[BuildingGuid] as [BuildingGuid]
		,0x0
		,Null as [FloorNo]
		,Null as [FlatNo]
		,[BuildingName] as [BuildingName]
		,[BuildingArName] as [BuildingArName]
		,[BuildingLtnName] as [BuildingLtnName]
		,-1 as [NewState]
		,[L].[Guid]
		,[T].[Name] as [TypeNameAndFlatNo]
		,[L].[Note2]
		,[L].[CostGuid]
		,0x0 as [SalesManGuid]
		,T.Code as [TypeCode]
		,l.ContractFinish
		,4 as [Kind]
	From 
		[vwServicesContract] [L]
		inner join [vwCustomer] [C] on [L].[CustomerGuid] = [C].[Guid]
		inner join [vwServicesContractType] [T] On [T].[Guid] = [L].[TypeGuid]
	union all
	Select
		[L].[Number],
		[L].[EditDate],
		[L].[FromDate],
		[L].[ToDate],
		[T].[Name] as [TypeName],
		[T].[Name] as [TypeNameAr],
		[T].[Name] as [TypeNameLtn],
		[T].[Guid] as [TypeGuid],
		[L].[ContractNo],
		[C].[Name] as [CustName],
		[C].[arName] as [CustarName],
		[C].[LtnName] as [CustLtnName]
		,[C].[Mobile] as [CustMobile]
		,[L].[Rent] as [Value]
		,[L].[CurrencyGuid]
		,[L].[CurrencyVal]
		,[C].[Guid] as [CustGuid]
		,[C].[AcGuid] as [CustAcGuid]
		,[BuildingGuid] as [BuildingGuid]
		,0x0
		,Null as [FloorNo]
		,Null as [FlatNo]
		,Null as [BuildingName]
		,Null as [BuildingArName]
		,Null as [BuildingLtnName]
		,-1 as [NewState]
		,[L].[Guid]
		,[T].[Name] as [TypeNameAndFlatNo]
		,[L].[Note2]
		,[L].[CostGuid]
		,0x0 as [SalesManGuid]
		,T.Code as [TypeCode]
		,l.ContractFinish
		,5 as [Kind]
	From 
		[vbMaintenanceContract] [L]
		inner join [vwCustomer] [C] on [L].[CustomerGuid] = [C].[Guid]
		inner join [vbMaintenanceContractType] [T] On [T].[Guid] = [L].[TypeGuid]


GO
/****** Object:  Table [dbo].[ElectricityType]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ElectricityType](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[Name] [varchar](256) NULL,
	[ltnName] [varchar](256) NULL,
	[Menu] [varchar](256) NULL,
	[LtnMenu] [varchar](256) NULL,
	[ShortCut] [varchar](256) NULL,
	[CreatedEntry] [bit] NULL,
	[AutoCreatedEntry] [bit] NULL,
	[AutoPostedEntry] [bit] NULL,
	[BuildingGuid] [uniqueidentifier] NULL,
	[IncomeAccountGuid] [uniqueidentifier] NULL,
	[ExtraAccountGuid] [uniqueidentifier] NULL,
	[DiscountAccountGuid] [uniqueidentifier] NULL,
	[WaterAccountGuid] [uniqueidentifier] NULL,
	[DrainageAccountGuid] [uniqueidentifier] NULL,
	[WaterValue] [float] NULL,
	[DrainageValue] [float] NULL,
	[FineAccountGuid] [uniqueidentifier] NULL,
	[FeeAccountGuid] [uniqueidentifier] NULL,
	[FineValue] [float] NULL,
	[FeeValue] [float] NULL,
	[DefPrintPath] [varchar](256) NULL,
	[CurrencyGuid] [uniqueidentifier] NULL,
	[CurrencyVal] [float] NULL,
	[Calculate] [varchar](800) NULL,
	[Calculate2] [varchar](800) NULL,
	[DefCheckTypeGuid] [uniqueidentifier] NULL,
	[DefEntryTypeGuid] [uniqueidentifier] NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ElectricityBill]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ElectricityBill](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[Mark] [bit] NULL,
	[TypeGuid] [uniqueidentifier] NULL,
	[IsCollect] [bit] NULL,
	[Date] [datetime] NULL,
	[BuildingGuid] [uniqueidentifier] NULL,
	[RealtyType] [int] NULL,
	[FlatGuid] [uniqueidentifier] NULL,
	[ShopGuid] [uniqueidentifier] NULL,
	[ContractGuid] [uniqueidentifier] NULL,
	[CustGuid] [uniqueidentifier] NULL,
	[ElecCounterNo] [varchar](255) NULL,
	[Counter] [float] NULL,
	[OldCounter] [float] NULL,
	[Discount] [float] NULL,
	[Extra] [float] NULL,
	[Consumption] [float] NULL,
	[WaterCounterNo] [varchar](255) NULL,
	[WCounter] [float] NULL,
	[WOldCounter] [float] NULL,
	[RoundKind] [int] NULL,
	[TotalValue] [float] NULL,
	[IncomeAccountGuid] [uniqueidentifier] NULL,
	[ExtraAccountGuid] [uniqueidentifier] NULL,
	[DiscountAccountGuid] [uniqueidentifier] NULL,
	[WaterAccountGuid] [uniqueidentifier] NULL,
	[DrainageAccountGuid] [uniqueidentifier] NULL,
	[WaterValue] [float] NULL,
	[DrainageValue] [float] NULL,
	[FineAccountGuid] [uniqueidentifier] NULL,
	[FeeAccountGuid] [uniqueidentifier] NULL,
	[FineValue] [float] NULL,
	[FeeValue] [float] NULL,
	[Overdue] [float] NULL,
	[WaterNote] [varchar](256) NULL,
	[DrainageNote] [varchar](256) NULL,
	[DiscountNote] [varchar](256) NULL,
	[ExtraNote] [varchar](256) NULL,
	[ConsumptionNote] [varchar](256) NULL,
	[FineNote] [varchar](256) NULL,
	[FeeNote] [varchar](256) NULL,
	[CurrencyGuid] [uniqueidentifier] NULL,
	[CurrencyVal] [float] NULL,
	[CreateBilltEntry] [bit] NULL,
	[Note] [varchar](256) NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwElectricityBill]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwElectricityBill]
  
as
	Select
		E.*,
		B.Name as [Building],
		C.FlatNo,
		C.ContractNo,
		C.CustName,
		C.[CustLtnName],
		[C].[BuildingName],
		[C].[BuildingArName],
		[C].[BuildingLtnName],
		C.CustAcGuid,
		Case when [RealtyType] = 0 then FlatGuid else ShopGuid End as [RealtyGuid],
		E.Counter - E.OldCounter as [ElectricityUsing],
		T.Name as [TypeName]
	From
		[ElectricityBill] E
		inner join [ElectricityType] T on T.Guid = E.TypeGuid
		inner join [vwBuilding] B on b.Guid = e.BuildingGuid
		left join vwAllContract C on C.Guid = E.ContractGuid

GO
/****** Object:  View [dbo].[vwLawsuitSearch]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwLawsuitSearch]
  
as
	Select 
		Case when L.No <> '' then L.No else L.ExeNo end as [No],
		L.ExeNo,
		Cu.Name as CustName,
		C.ContractKind,
		
		Case 
			when (C.ContractKind = 0) or (C.ContractKind = 2) then (Select No From Apartment where Guid = C.RealtyGuid)
			when (C.ContractKind = 1) or (C.ContractKind = 3) then (Select No From Shop where Guid = C.RealtyGuid)
			when (C.ContractKind = 4) or (C.ContractKind = 5) then (Select No From Parking where Guid = C.RealtyGuid)
			when (C.ContractKind = 6) or (C.ContractKind = 7) then (Select No From Earth where Guid = C.RealtyGuid)
			when (C.ContractKind = 8) or (C.ContractKind = 9) then (Select VillaNo From villa where Guid = C.RealtyGuid)
		End 
		as [RealtyNo],
		C.BuildingGuid,
		L.Guid
	From
		[Lawsuit] L
		inner join vwAllContractGuid C on C.Guid = L.ContractGuid
		inner join vwCustomer Cu on Cu.Guid = C.[CustomerGuid]

GO
/****** Object:  View [dbo].[vwLinkCheckContract]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwLinkCheckContract]
  
as

	Select 
		Number,
		[ParentGuid],
		Case 
			when Kind = 1 then dbo.SC('ÚÞÏ')
			when Kind = 2 then dbo.SC('ÏÚæì')
			when Kind = 3 then dbo.SC('ÝÇÊæÑÉ ßåÑÈÇÁ')
			when Kind = 4 then dbo.SC('ÚÞÏ ÎÏãÇÊ')
			when Kind = 5 then dbo.SC('ÚÞÏ ÕíÇäÉ')
		end AS [Kind] ,
		
		Kind as orgKind,
		
		Case 
			when Kind = 1 then (Select TypeNameAndFlatNo From vwAllContract where Guid = LL.ContractGuid)
			when Kind = 2 then (Select [No] +'-'+ CustName From vwLawsuitSearch where Guid = LL.ContractGuid)
			when Kind = 3 then (Select CAST(Number as varchar(255)) +'-'+ TypeName From vwElectricityBill where Guid = LL.ContractGuid)
			when Kind = 4 then (Select ContractNo +'-'+ BuildingName From vwServicesContract where Guid = LL.ContractGuid)
			when Kind = 5 then (Select ContractNo  From vwMaintenanceContract where Guid = LL.ContractGuid)
		end AS [Contract],
		
		[ContractGuid],
		[Percent],
		[Value],
		[Note]
	from 
		LinkCheckContract LL

GO
/****** Object:  Table [dbo].[Pricing]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Pricing](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[RepNo] [varchar](255) NULL,
	[RepDate] [smalldatetime] NULL,
	[RegNo] [varchar](255) NULL,
	[Attachment] [varchar](255) NULL,
	[CustGuid] [uniqueidentifier] NULL,
	[OwnerName] [varchar](255) NULL,
	[IssueSide] [varchar](255) NULL,
	[DocNo] [varchar](255) NULL,
	[DocDate] [smalldatetime] NULL,
	[Country] [varchar](255) NULL,
	[Region] [varchar](255) NULL,
	[City] [varchar](255) NULL,
	[Quarter] [varchar](255) NULL,
	[Street] [varchar](255) NULL,
	[DesignName] [varchar](255) NULL,
	[PieceNo] [varchar](255) NULL,
	[RealtyNote] [varchar](255) NULL,
	[RegionState] [varchar](255) NULL,
	[Building] [bit] NULL,
	[pubUtil1] [bit] NULL,
	[pubUtil2] [bit] NULL,
	[pubUtil3] [bit] NULL,
	[Service1] [bit] NULL,
	[Service2] [bit] NULL,
	[Service3] [bit] NULL,
	[Service4] [bit] NULL,
	[RegionNote] [varchar](255) NULL,
	[Area] [varchar](255) NULL,
	[AreaState1] [bit] NULL,
	[AreaState2] [bit] NULL,
	[AreaState3] [bit] NULL,
	[BuildSys] [varchar](255) NULL,
	[ParamBuild] [varchar](255) NULL,
	[RegionClass] [varchar](255) NULL,
	[Dimension1] [varchar](255) NULL,
	[Dimension2] [varchar](255) NULL,
	[Dimension3] [varchar](255) NULL,
	[Dimension4] [varchar](255) NULL,
	[Boundary1] [varchar](255) NULL,
	[Boundary2] [varchar](255) NULL,
	[Boundary3] [varchar](255) NULL,
	[Boundary4] [varchar](255) NULL,
	[LandState] [varchar](255) NULL,
	[DimensionNote] [varchar](255) NULL,
	[Coordinate] [varchar](255) NULL,
	[Resume] [varchar](500) NULL,
	[Merit] [varchar](500) NULL,
	[Drawback] [varchar](500) NULL,
	[ProjectEffect] [varchar](2500) NULL,
	[RealtyValue] [float] NULL,
	[CostValue] [float] NULL,
	[MeterPrice] [float] NULL,
	[CurrentLandPrice] [varchar](255) NULL,
	[PricingWay] [varchar](255) NULL,
	[PricingValue] [varchar](255) NULL,
	[MaxPrice] [varchar](255) NULL,
	[MinPrice] [varchar](255) NULL,
	[EstimationValue] [varchar](255) NULL,
	[EstimationNote] [varchar](500) NULL,
	[MapPath1] [varchar](255) NULL,
	[MapPath2] [varchar](255) NULL,
	[MapPath3] [varchar](255) NULL,
	[Note] [varchar](255) NULL,
	[CreateEntry] [bit] NULL,
	[EntryDate] [smalldatetime] NULL,
	[EntryValue] [float] NULL,
	[EntryCurrencyGUID] [uniqueidentifier] NULL,
	[EntryCurrencyVal] [float] NULL,
	[DebitAccountGuid] [uniqueidentifier] NULL,
	[CreditAccountGuid] [uniqueidentifier] NULL,
	[DebitCostGuid] [uniqueidentifier] NULL,
	[CreditCostGuid] [uniqueidentifier] NULL,
	[EntryNote] [varchar](255) NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbPricing]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbPricing]
	  
	as
		Select 
			[T].*
		From
			[Pricing] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  Table [dbo].[ReceiptOrderType]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ReceiptOrderType](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[Code] [varchar](256) NULL,
	[Name] [varchar](256) NULL,
	[ltnName] [varchar](256) NULL,
	[Menu] [varchar](256) NULL,
	[LtnMenu] [varchar](256) NULL,
	[ShortCut] [varchar](256) NULL,
	[EntryTypeGuid] [uniqueidentifier] NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbReceiptOrderType]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbReceiptOrderType]
	  
	as
		Select 
			[T].*
		From
			[ReceiptOrderType] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  Table [dbo].[OwnerUnionFee]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[OwnerUnionFee](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[Date] [datetime] NULL,
	[BuildingGuid] [uniqueidentifier] NULL,
	[CkFlat] [bit] NULL,
	[CkShop] [bit] NULL,
	[CkParking] [bit] NULL,
	[AccountGuid] [uniqueidentifier] NULL,
	[CkMoveCreditCost] [bit] NULL,
	[CkMoveDebitCost] [bit] NULL,
	[Fee] [float] NULL,
	[RoundKind] [int] NULL,
	[CurrencyGUID] [uniqueidentifier] NULL,
	[CurrencyVal] [float] NULL,
	[ItemNote] [varchar](255) NULL,
	[Note] [varchar](255) NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[OwnerUnionFeeDetail]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[OwnerUnionFeeDetail](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[parentGuid] [uniqueidentifier] NULL,
	[Kind] [int] NULL,
	[FlatGuid] [uniqueidentifier] NULL,
	[Area] [float] NULL,
	[Fee] [float] NULL,
	[AccountGuid] [uniqueidentifier] NULL,
	[CostGuid] [uniqueidentifier] NULL,
	[Note] [varchar](255) NULL
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwOwnerUnionFeeDetail]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwOwnerUnionFeeDetail]
  
as

	Select 
		D.ParentGuid,
		F.Number,
		F.NO,
		F.FlatKind,
		F.[ApartmentType],
		D.[Area],
		F.[unity],
		dbo.FnMyRound(P.Fee * D.[Area] ,P.RoundKind) as [Fee],
		Cu.Name as [AccountName],
		Co.Name as [Cost] ,
		Cu.acGuid [AccountGuid] ,
		F.CostGuid,
		D.[Note],
		1 as [Kind],
		F.Guid as [FlatGuid]
	From 
		OwnerUnionFee P 
		inner join [OwnerUnionFeeDetail] D on D.parentGuid = P.Guid
		inner join [Apartment] F on F.Guid = D.FlatGuid
		inner join Building B on B.Guid = F.BuildingGuid
		left join vwCustomer Cu on Cu.Guid = F.CustOwnerGuid
		left join Cost Co on Co.Guid = F.CostGuid

	union All
	Select 
		D.ParentGuid,
		F.Number,
		F.NO,
		F.ShopKind,
		F.[Description],
		D.[Area],
		F.[unity],
		dbo.FnMyRound(P.Fee * D.[Area] ,P.RoundKind) as [Fee],
		Cu.Name as [AccountName],
		Co.Name as [Cost] ,
		Cu.acGuid [AccountGuid] ,
		F.CostGuid,
		D.[Note],
		2 as [Kind],
		F.Guid as [FlatGuid]
	From 
		OwnerUnionFee P 
		inner join [OwnerUnionFeeDetail] D on D.parentGuid = P.Guid
		inner join [Shop] F on F.Guid = D.FlatGuid
		inner join Building B on B.Guid = F.BuildingGuid
		left join vwCustomer Cu on Cu.Guid = F.CustGuid
		left join Cost Co on Co.Guid = F.CostGuid

	union All
	Select 
		D.ParentGuid,
		F.Number,
		F.NO,
		F.ParkingKind,
		F.[Description],
		D.[Area],
		F.[unity],
		dbo.FnMyRound(P.Fee * D.[Area] ,P.RoundKind) as [Fee],
		Cu.Name as [AccountName],
		Co.Name as [Cost] ,
		Cu.acGuid [AccountGuid] ,
		F.CostGuid,
		D.[Note],
		3 as [Kind],
		F.Guid as [FlatGuid]
	From 
		OwnerUnionFee P 
		inner join [OwnerUnionFeeDetail] D on D.parentGuid = P.Guid
		inner join [Parking] F on F.Guid = D.FlatGuid
		inner join Building B on B.Guid = F.BuildingGuid
		left join vwCustomer Cu on Cu.Guid = F.CustGuid
		left join Cost Co on Co.Guid = F.CostGuid

GO
/****** Object:  Table [dbo].[ReceiptOrder]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ReceiptOrder](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[TypeGuid] [uniqueidentifier] NULL,
	[Date] [smalldatetime] NULL,
	[ContractGuid] [uniqueidentifier] NULL,
	[mark] [bit] NULL,
	[Note] [varchar](255) NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbReceiptOrder]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbReceiptOrder]
	  
	as
		Select 
			[T].*
		From
			[ReceiptOrder] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  View [dbo].[vbServicesContractType]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbServicesContractType]
	  
	as
		Select 
			[T].*
		From
			[ServicesContractType] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  View [dbo].[vbOwnerUnionFee]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbOwnerUnionFee]
	  
	as
		Select 
			[T].*
		From
			[OwnerUnionFee] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  Table [dbo].[ChangeParkingRent]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ChangeParkingRent](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[ParentGuid] [uniqueidentifier] NULL,
	[Date] [datetime] NULL,
	[Price] [float] NULL,
	[CurrencyGuid] [uniqueidentifier] NULL
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwLastParkingRentPrice]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwLastParkingRentPrice]
  
as
	Select 
		[C].[ParentGuid],
		[Price] as [Rent],
		[CurrencyGuid] as [RentCurrencyGuid]
	From
		[ChangeParkingRent] [C]
		inner join (
						Select 
								[ParentGuid],
								Max(Date) as [MaxDate],
								Max([Number]) as [MaxNumber]
						From
							[ChangeParkingRent]
						Group By
							[ParentGuid]
					) [C2] on [C2].[ParentGuid] = [C].[ParentGuid] 
							and [C].[Date] = [C2].[MaxDate] 
							and (Case when [C].[Date] = [C2].[MaxDate] then [MaxNumber] else [C].[Number] end = [C].[Number])

GO
/****** Object:  Table [dbo].[IncAccount]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[IncAccount](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[Code] [varchar](256) NULL,
	[Name] [varchar](256) NULL,
	[LtnName] [varchar](256) NULL,
	[Note] [varchar](256) NULL,
	[Band] [int] NULL,
	[Band2] [int] NULL,
	[CalcoldYearBalance] [bit] NULL,
	[ShowBalanceInListFinCenter] [bit] NULL,
	[ParentGuid] [uniqueidentifier] NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbIncAccount]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbIncAccount]
	  
	as
		Select 
			[T].*
		From
			[IncAccount] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  View [dbo].[vwMatGroup]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwMatGroup]
  
as
	Select
		[G].*,
		[P].[Code]+'-'+[P].[Name] as [ParentGroup]
	From
		[vbMatGroup] [G]
		left join [vbMatGroup] [P] on [P].[Guid] = [G].[ParentGuid]

GO
/****** Object:  Table [dbo].[MatDescriptionConfig]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MatDescriptionConfig](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Name] [varchar](256) NULL,
	[LtnName] [varchar](256) NULL,
	[Kind] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwConfigMatPrice]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create View [dbo].[vwConfigMatPrice]
as
	Select 
		Cast(Number as Varchar(256))+' '+ 
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[LtnName],'') <> '') then [A].[LtnName] else [A].[Name] end as [Name]		
	from 
		[MatDescriptionConfig] A
	where
		Kind = 1

GO
/****** Object:  View [dbo].[vwIncAccount]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE View [dbo].[vwIncAccount]
  
as
	Select
		[A].[Number], 
		[A].[Guid], 
		[A].[Code], 
		[A].[ParentGuid], 
		[A].[Note], 
		[A].[LtnName],
		[A].[Name] as [ArName],
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[LtnName],'') <> '') then [A].[LtnName] else [A].[Name] end as [Name], 
		case when [A].[ParentGuid] is Not Null then [A].[ParentGuid] else 0x0 end as [Parent]
	from
		vbIncAccount A


GO
/****** Object:  Table [dbo].[MaintenanceItem]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MaintenanceItem](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[Name] [varchar](255) NULL,
	[LtnName] [varchar](255) NULL,
	[DefValue] [float] NULL,
	[Note] [varchar](255) NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbMaintenanceItem]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbMaintenanceItem]
	  
	as
		Select 
			[T].*
		From
			[MaintenanceItem] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  Table [dbo].[MaintenanceContractVisit]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MaintenanceContractVisit](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[WithOutContract] [bit] NULL,
	[ContractGuid] [uniqueidentifier] NULL,
	[CustGuid] [uniqueidentifier] NULL,
	[No] [varchar](255) NULL,
	[Date] [smalldatetime] NULL,
	[ExecState] [int] NULL,
	[ExecDate] [smalldatetime] NULL,
	[MaintenanceWorkerGuid] [uniqueidentifier] NULL,
	[FeeAccountGuid] [uniqueidentifier] NULL,
	[ExecNote] [varchar](max) NULL,
	[NotExecNote] [varchar](max) NULL,
	[WorkNote] [varchar](max) NULL,
	[CreateEntry] [bit] NULL,
	[CurrencyGuid] [uniqueidentifier] NULL,
	[CurrencyVal] [float] NULL,
	[EntryDebitCostGuid] [uniqueidentifier] NULL,
	[EntryCreditCostGuid] [uniqueidentifier] NULL,
	[EntryNote] [varchar](255) NULL,
	[Note] [varchar](255) NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbMaintenanceContractVisit]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbMaintenanceContractVisit]
	  
	as
		Select 
			[T].*
		From
			[MaintenanceContractVisit] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  Table [dbo].[BuildingGuard]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BuildingGuard](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[Name] [varchar](256) NULL,
	[LtnName] [varchar](256) NULL,
	[Adjective] [varchar](256) NULL,
	[PassportNO] [varchar](256) NULL,
	[PassportExpireDate] [datetime] NULL,
	[Nationality] [varchar](256) NULL,
	[LtnNationality] [varchar](256) NULL,
	[PersonalityNo] [varchar](256) NULL,
	[Address] [varchar](256) NULL,
	[Phone] [varchar](256) NULL,
	[Mobile] [varchar](256) NULL,
	[EMail] [varchar](256) NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbBuildingGuard]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbBuildingGuard]
	  
	as
		Select 
			[T].*
		From
			[BuildingGuard] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  Table [dbo].[BuildingRecElecCounter]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BuildingRecElecCounter](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[BuildingGuid] [uniqueidentifier] NULL,
	[UnNo] [varchar](255) NULL,
	[Service] [varchar](255) NULL,
	[Address] [varchar](255) NULL,
	[ElecCounterNo] [varchar](255) NULL,
	[UserGuid] [uniqueidentifier] NULL,
	[Date] [datetime] NULL,
	[OldCounter] [float] NULL,
	[OldDate] [datetime] NULL,
	[Counter] [float] NULL,
	[Note] [varchar](255) NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbBuildingRecElecCounter]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbBuildingRecElecCounter]
	  
	as
		Select 
			[T].*
		From
			[BuildingRecElecCounter] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  View [dbo].[vwMat]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwMat]
  
as
	Select
		mt.*,
		Case 
			when isNull([DefUnity],1) = 1 then [Unity1]
			when [DefUnity] = 2 then [Unity2]
			when [DefUnity] = 3 then [Unity3]
		end as [DefUnityName],

		Case 
			when isNull([DefUnity],1) = 1 then 1
			when [DefUnity] = 2 then [UnityFact2]
			when [DefUnity] = 3 then [UnityFact3]
		end as [DefUnityFact],

		Case 
			when isNull([DefUnity],1) = 1 then [Barcode1]
			when [DefUnity] = 2 then [Barcode2]
			when [DefUnity] = 3 then [Barcode3]
		end as [Barcode],

		[P].[Code]+'-'+[P].[Name] as [GroupName]
	From
		[vbMat] [mt]
		inner join [vbMatGroup] [P] on [P].[Guid] = [mt].[GroupGuid]


GO
/****** Object:  Table [dbo].[EntryType]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[EntryType](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[Code] [varchar](256) NULL,
	[Name] [varchar](256) NULL,
	[ltnName] [varchar](256) NULL,
	[Menu] [varchar](256) NULL,
	[LtnMenu] [varchar](256) NULL,
	[ShortCut] [varchar](256) NULL,
	[DefAccountGuid] [uniqueidentifier] NULL,
	[DebitField] [bit] NULL,
	[CreditField] [bit] NULL,
	[DebitCaption] [varchar](256) NULL,
	[CreditCaption] [varchar](256) NULL,
	[LtnDebitCaption] [varchar](256) NULL,
	[LtnCreditCaption] [varchar](256) NULL,
	[CkCurrency] [bit] NULL,
	[CkCurrencyRate] [bit] NULL,
	[CkCost] [bit] NULL,
	[CkNote] [bit] NULL,
	[Color1] [int] NULL,
	[Color2] [int] NULL,
	[ShowContractField] [bit] NULL,
	[ShowCostFromContract] [bit] NULL,
	[CreateEntry] [bit] NULL,
	[AutoCreateEntry] [bit] NULL,
	[AutoPostedEntry] [bit] NULL,
	[OpMoveCostwithDefAccount] [bit] NULL,
	[OpEntryForOneItem] [bit] NULL,
	[OpObverseNoteItem] [bit] NULL,
	[ObitemNotefromNote] [bit] NULL,
	[NeedCostItem] [bit] NULL,
	[NeedNoteItem] [bit] NULL,
	[AutoSMSAfterAdd] [bit] NULL,
	[SMSMsg] [varchar](256) NULL,
	[SMSMsgEn] [varchar](256) NULL,
	[DefPrintPath] [varchar](256) NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbEntryType]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbEntryType]
	  
	as
		Select 
			[T].*
		From
			[EntryType] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  View [dbo].[vwEntryType]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE View [dbo].[vwEntryType]
  
as
	Select
		[A].[Number],
		[A].[Guid],
		[A].[SecLvl],
		[A].[Code],
		[A].[Name] as [ArName],
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[LtnName],'') <> '') then [A].[LtnName] else [A].[Name] end as [Name], 
		[A].[ltnName],
		[A].[Menu] as [arMenu],
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[LtnMenu],'') <> '') then [A].[LtnMenu] else [A].[Menu] end as [Menu], 
		[A].[LtnMenu],
		[A].[DefAccountGuid],
		[c].[code]+'-'+[c].[Name] as [DefAccount],
		[A].[DebitField],
		[A].[CreditField],
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[LtnDebitCaption],'') <> '') then [A].[LtnDebitCaption] else [A].[DebitCaption] end as [DebitCaption], 
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[LtnCreditCaption],'') <> '') then [A].[LtnCreditCaption] else [A].[CreditCaption] end as [CreditCaption], 
		[A].[CkCurrency],
		[A].[CkCurrencyRate],
		[A].[CkCost],
		[A].[CkNote],
		[A].[Color1],
		[A].[Color2],
		[A].[DefPrintPath],
		[A].[ShortCut],
		[A].[ShowContractField],
		[A].[NeedCostItem],
		[A].[NeedNoteItem]
	From 
		[vbEntryType] [A]
		left join [vwAccount] [c] on [c].[Guid] = [A].[DefAccountGuid]		


GO
/****** Object:  Table [dbo].[OrderType]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[OrderType](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[Name] [varchar](256) NULL,
	[LtnName] [varchar](256) NULL,
	[Menu] [varchar](256) NULL,
	[LtnMenu] [varchar](256) NULL,
	[ShortCut] [varchar](256) NULL,
	[DefStoreGuid] [uniqueidentifier] NULL,
	[DefCostGuid] [uniqueidentifier] NULL,
	[BillTypeGuid] [uniqueidentifier] NULL,
	[CurrencyGuid] [uniqueidentifier] NULL,
	[CurrencyVal] [float] NULL,
	[ChangeBillType] [bit] NULL,
	[ChangeCurrency] [bit] NULL,
	[CheckStore] [bit] NULL,
	[CheckStoreRecipient] [bit] NULL,
	[RestraintMat] [bit] NULL,
	[Note] [varchar](256) NULL,
	[DefUnity] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbOrderType]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbOrderType]
	  
	as
		Select 
			[T].*
		From
			[OrderType] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  View [dbo].[vwEntryDateType]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE View [dbo].[vwEntryDateType]
 
as
	Select
		[A].[Number],
		[A].[Guid],
		[A].[SecLvl],
		[A].[Code],
		[A].[Name] as [ArName],
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[LtnName],'') <> '') then [A].[LtnName] else [A].[Name] end as [Name], 
		[A].[ltnName],
		[A].[Menu] as [arMenu],
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[LtnMenu],'') <> '') then [A].[LtnMenu] else [A].[Menu] end as [Menu], 
		[A].[LtnMenu],
		[A].[DefAccountGuid],
		[c].[code]+'-'+[c].[Name] as [DefAccount],
		[A].[DebitField],
		[A].[CreditField],
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[LtnDebitCaption],'') <> '') then [A].[LtnDebitCaption] else [A].[DebitCaption] end as [DebitCaption], 
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[LtnCreditCaption],'') <> '') then [A].[LtnCreditCaption] else [A].[CreditCaption] end as [CreditCaption], 
		[A].[CkCurrency],
		[A].[CkCost],
		[A].[CkNote],
		[A].[Color1],
		[A].[Color2],
		[A].[DefPrintPath],
		[A].[ShortCut],

		[A].[NeedCostItem],
		[A].[NeedNoteItem],
		[A].[AutoPostedEntry],
		[A].[OpMoveCostwithDefAccount]
	From 
		[vbEntryDateType] [A]
		left join [vwAccount] [c] on [c].[Guid] = [A].[DefAccountGuid]		


GO
/****** Object:  Table [dbo].[RentInfo]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RentInfo](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[Name] [varchar](256) NULL,
	[LtnName] [varchar](256) NULL,
	[Adjective] [varchar](256) NULL,
	[PassportNO] [varchar](256) NULL,
	[PassportExpireDate] [datetime] NULL,
	[WorkCardNo] [varchar](256) NULL,
	[Nationality] [varchar](256) NULL,
	[LtnNationality] [varchar](256) NULL,
	[Work] [varchar](256) NULL,
	[PersonalityNo] [varchar](256) NULL,
	[Address] [varchar](256) NULL,
	[Phone] [varchar](256) NULL,
	[Mobile] [varchar](256) NULL,
	[Fax] [varchar](256) NULL,
	[BoxNo] [varchar](256) NULL,
	[EMail] [varchar](256) NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbRentInfo]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbRentInfo]
	  
	as
		Select 
			[T].*
		From
			[RentInfo] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  View [dbo].[vwRentinfo]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwRentinfo]
  
as
	Select
		[Number],
		[Guid],
		[SecLvl],
		[Name] as [arName],
		[LtnName],
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[LtnName],'') <> '') then [A].[LtnName] else [A].[Name] end as [Name],
		[Adjective],
		[PassportNO],
		[PassportExpireDate],
		[WorkCardNo],
		[Nationality],
		[Work],
		[PersonalityNo],
		[Address],
		[Phone],
		[Mobile],
		[Fax],
		[BoxNo],
		[EMail],
		[LtnNationality]
	From
		[vbRentinfo] [a]

GO
/****** Object:  Table [dbo].[IncAccountDetailAc]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[IncAccountDetailAc](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[ParentGuid] [uniqueidentifier] NULL,
	[AccountGuid] [uniqueidentifier] NULL
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwIncAccountDetailAc]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwIncAccountDetailAc]
  
as
	Select
		Ac.Code +'-'+ Ac.Name as Account,
		Ac.Code as AccountCode,
		Ac.Name as AccountName,
		a.*
	From
		[IncAccountDetailAc] [a]
		inner join Account [Ac] on [Ac].Guid = [a].[AccountGuid]

GO
/****** Object:  Table [dbo].[MsgTbl]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MsgTbl](
	[Guid] [uniqueidentifier] NULL,
	[Date] [datetime] NULL,
	[Msg] [varchar](256) NULL,
	[ToUserGuid] [uniqueidentifier] NULL,
	[FromUserGuid] [uniqueidentifier] NULL,
	[FlagSend] [bit] NULL
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwMsgTbl]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create View [dbo].[vwMsgTbl]
as
	Select 
		[m].*,
		[u1].[LoginName] as [ToUserName],
		[u2].[LoginName] as [FromUserName]
	From
		[MsgTbl] [m]
		inner join [Realty_Users] [U1] on [u1].[Guid] = [ToUserGuid]
		inner join [Realty_Users] [U2] on [u2].[Guid] = [FromUserGuid]

GO
/****** Object:  View [dbo].[vwStore]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwStore]
  
as
	Select
		[G].*,
		[P].[Code]+'-'+[P].[Name] as [ParentGroup]
	From
		[vbStore] [G]
		left join [vbStore] [P] on [P].[Guid] = [G].[ParentGuid]

GO
/****** Object:  Table [dbo].[ChecksCollection]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ChecksCollection](
	[SecLvl] [int] NULL,
	[Date] [datetime] NULL,
	[CheckGuid] [uniqueidentifier] NULL,
	[DebitAccountGuid] [uniqueidentifier] NULL,
	[DebitCostGuid] [uniqueidentifier] NULL,
	[CreditAccountGuid] [uniqueidentifier] NULL,
	[CreditCostGuid] [uniqueidentifier] NULL,
	[Value] [float] NULL,
	[Commission] [float] NULL,
	[LossComm] [bit] NULL,
	[ReturnCause] [varchar](256) NULL,
	[CommAccountGuid] [uniqueidentifier] NULL,
	[CommAccountCreditGuid] [uniqueidentifier] NULL,
	[CommCostGuid] [uniqueidentifier] NULL,
	[CommNote] [varchar](256) NULL,
	[CurrencyGUID] [uniqueidentifier] NULL,
	[CurrencyVal] [float] NULL,
	[Note] [varchar](256) NULL,
	[Kind] [int] NULL,
	[Delay] [float] NULL,
	[DelayAccountDebitGuid] [uniqueidentifier] NULL,
	[DelayAccountCreditGuid] [uniqueidentifier] NULL,
	[DelayNote] [varchar](256) NULL,
	[DelayCostGuid] [uniqueidentifier] NULL,
	[Finished] [bit] NULL,
	[FinishDate] [datetime] NULL,
	[FixReturn] [bit] NULL,
	[FixReturnNote] [varchar](255) NULL,
	[IsRounded] [bit] NULL,
	[OperationCreateEntry] [bit] NULL,
	[ReturnCreateEntry] [bit] NULL,
	[CommCreateEntry] [bit] NULL,
	[Mark] [bit] NULL
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwChecksCollection]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwChecksCollection]
  
AS
	SELECT 
		Case
			when [Kind] = 0 then dbo.SC('ÊÑÍíá')
			when [Kind] = 1 then dbo.SC('ÊÍÕíá')
			when [Kind] = 2 then dbo.SC('ÊÙåíÑ')
			when [Kind] = 3 then dbo.SC('ÅÑÌÇÚ')
		end as [TypeName],
		[Seclvl],
		[Mark],
		[Date],
		[CheckGuid],
		[DebitAccountGuid],
		[DebitCostGuid],
		[CreditAccountGuid],
		[CreditCostGuid],
		[Value],
		[Commission],
		[LossComm],
		[CommAccountGuid],
		[CommAccountCreditGuid],
		[CurrencyGUID],
		[CurrencyVal],
		[Note],
		[Kind],
		[Delay],
		[DelayAccountDebitGuid],
		[DelayAccountCreditGuid],
		[DelayCostGuid],
		[Finished],
		[Finishdate],
		[ReturnCause],
		[DelayNote],
		[CommCostGuid],
		[CommNote],
		FixReturn,
		FixReturnNote,
		IsRounded,

		[OperationCreateEntry],
		[ReturnCreateEntry],
		[CommCreateEntry]

	FROM 
		[ChecksCollection] [C]


GO
/****** Object:  View [dbo].[vwChecksCollectionState]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE View [dbo].[vwChecksCollectionState]
  
as
	Select
		[P].[Guid] as [CheckGuid],
		Case when [C].[CheckGuid] is Null then 0 else 1 end as [IsPosted],
		Case 
			when ([C1].[CheckGuid] is null) and ([C4].[CheckGuid] is null) then 0 
			when [C1].[CheckGuid] is Not null then 1
			when [P].[Value] = [C4].[Value] then 1
			else 0
		end
		as [IsCollection],
		Case when [C4].[CheckGuid] is Null then 0 else 1 end as [IsPartialCollection],
		Case when [C2].[CheckGuid] is null then 0 else 1 end as [IsEndorsement],
		Case when [C3].[CheckGuid] is null then 0 else 1 end as [IsReturned],
		[C3].[Finished],
		P.ContractGuid
	From
		[Checks] [P]
		left join [vwChecksCollection] [C] on [C].[CheckGuid] = [P].[Guid] and [C].[Kind] = 0
		left join [vwChecksCollection] [C1] on [C1].[CheckGuid] = [P].[Guid] and [C1].[Kind] = 1
		left join [vwChecksCollection] [C2] on [C2].[CheckGuid] = [P].[Guid] and [C2].[Kind] = 2
		left join [vwChecksCollection] [C3] on [C3].[CheckGuid] = [P].[Guid] and [C3].[Kind] = 3
		left join (
						Select 
							[CheckGuid],
							Sum([Value]) as [Value] 
						From
							[ChecksPartialCollection] 
						Group By
							[CheckGuid]
					) [C4] on [C4].[CheckGuid] = [P].[Guid]


GO
/****** Object:  Table [dbo].[ChangeCurrencyRate]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ChangeCurrencyRate](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[Date] [datetime] NULL,
	[CurrencyGUID] [uniqueidentifier] NULL,
	[Rate] [float] NULL,
	[Note] [varchar](256) NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwChangeCurrencyRate]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwChangeCurrencyRate]
  
as
	Select
		a.*,
		b.Name
	From
		[ChangeCurrencyRate] [a]
		inner join vwCurrency [b] on [b].Guid = [a].[CurrencyGUID]

GO
/****** Object:  View [dbo].[vwAllContractKind]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE View [dbo].[vwAllContractKind]
  
as
	Select
		L.Guid as [ContractGuid],
		0 as [Kind]
	From 
		[LeaseApartment] [L]
	union all
	Select 
		L.Guid as [ContractGuid],
		1 as [kind]
	From 
		[ParkingContract] [L]
	union all
	Select
		L.Guid as [ContractGuid],
		2 as [Kind]
	From 
		[LandContract] [L]
	union all
	Select
		L.Guid as [ContractGuid],
		3 as [Kind]
	From 
		[ElectricityBill] [L]
		
	union all
	Select
		L.Guid as [ContractGuid],
		4 as [Kind]
	From 
		[ServicesContract] [L]
	
	union all
	Select
		L.Guid as [ContractGuid],
		5 as [Kind]
	From 
		[MaintenanceContract] [L]
	


GO
/****** Object:  Table [dbo].[Branch]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Branch](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[Code] [varchar](256) NULL,
	[Name] [varchar](256) NULL,
	[ltnName] [varchar](256) NULL,
	[Phone] [varchar](256) NULL,
	[Address] [varchar](256) NULL,
	[Note] [varchar](256) NULL,
	[ParentGuid] [uniqueidentifier] NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbBranch]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbBranch]
	  
	as
		Select 
			[T].*
		From
			[Branch] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  View [dbo].[vwBranch]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE View [dbo].[vwBranch]
  
as
	Select
		[A].[Number], [A].[Guid], [A].[Code], [A].[ParentGuid], [A].[Note], [A].[Phone], [A].[Address],[A].[LtnName],
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[LtnName],'') <> '') then [A].[LtnName] else [A].[Name] end as [Name], 
		case when [A].[ParentGuid] is Not Null then [A].[ParentGuid] else 0x0 end as [Parent],
		Isnull([S].[NSons],0) as [NSons]
	From 
		[vbBranch] [A]
		left join (Select 
						Count([Number]) as [NSons], 
						[ParentGuid] as [SGuid]
					From 
						[Branch]
					Group By
						[ParentGuid]
					) [S] On [S].[SGuid] = [A].[Guid]


GO
/****** Object:  View [dbo].[AllBranch]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE View [dbo].[AllBranch]
  
as
	Select
		[Number], [Guid], [Code], [ParentGuid], [Note], [Address], [Phone], [LtnName],[Name]
		,case when [ParentGuid] is Not Null then [ParentGuid] else 0x0 end as [Parent]
	From 
		[vwBranch]


GO
/****** Object:  View [dbo].[vwBillType]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwBillType]
  
as
	Select
		[A].[Number],
		[A].[Guid],
		[A].[SecLvl],
		[A].[Code],
		[A].[Name] as [ArName],
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[LtnName],'') <> '') then [A].[LtnName] else [A].[Name] end as [Name], 
		[A].[ltnName],
		[A].[Menu] as [arMenu],
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[LtnMenu],'') <> '') then [A].[LtnMenu] else [A].[Menu] end as [Menu], 
		[A].[LtnMenu],
		[A].[ShortCut],
		[A].[DefPrintPath],
		[A].[Note],
		[A].[Color1],
		[A].[Color2],
		[A].[CurrencyGuid],
		[A].[PayType],
		[A].[BillKind],
		Case when [A].[BillKind] = 0 then 1
		     when [A].[BillKind] = 3 then 1
		     when [A].[BillKind] = 4 then 1
		     when [A].[BillKind] = 1 then -1
		     when [A].[BillKind] = 2 then -1
		     when [A].[BillKind] = 5 then -1
		end	as Direction,
		BillBarcode
	From
		[vbBillType] [A]

GO
/****** Object:  View [dbo].[vwUnits]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwUnits]
  
as
	Select
		mt.[Guid],
		mt.[Code],
		mt.[Name],
		[Unity1] as [UnitName],
		1+0.00000000000 as [UnityFact],
		1 as [unitIndex]
	From
		[vbMat] [mt]

	union All

	Select
		mt.[Guid],
		mt.[Code],
		mt.[Name],
		[Unity2] as [Unit],
		[UnityFact2] as [UnityFact],
		2 as [unitIndex]
	From
		[vbMat] [mt]
	where
		[Unity2] <> ''
		and unityfix2 = 1

	union All

	Select
		mt.[Guid],
		mt.[Code],
		mt.[Name],
		[Unity3] as [Unit],
		[UnityFact3] as [UnityFact],
		3 as [unitIndex]
	From
		[vbMat] [mt]
	where
		[Unity3] <> ''
		and unityfix3 = 1

GO
/****** Object:  Table [dbo].[BillDetail]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BillDetail](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[ParentGuid] [uniqueidentifier] NULL,
	[MatGuid] [uniqueidentifier] NULL,
	[Qty] [float] NULL,
	[Qty2] [float] NULL,
	[Qty3] [float] NULL,
	[Price] [float] NULL,
	[TotalPrice] [float] NULL,
	[Bonus] [float] NULL,
	[StoreGuid] [uniqueidentifier] NULL,
	[DiscountPercent] [float] NULL,
	[Discount] [float] NULL,
	[ExtraPercent] [float] NULL,
	[Extra] [float] NULL,
	[Note] [varchar](256) NULL,
	[ProductDate] [datetime] NULL,
	[ExpireDate] [datetime] NULL,
	[CostGuid] [uniqueidentifier] NULL,
	[Class] [varchar](256) NULL,
	[Length] [float] NULL,
	[width] [float] NULL,
	[height] [float] NULL,
	[Count] [float] NULL,
	[unityFact2] [float] NULL,
	[unityFact3] [float] NULL,
	[unityfix2] [bit] NULL,
	[unityfix3] [bit] NULL,
	[ItemUnit] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwGetBillDetail]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwGetBillDetail]
  
as
	Select
		[d].[Number], 
		[d].[Guid], 
		[d].[ParentGuid], 
		[m].[Code]+'-'+[m].[Name] as [Mat],

		Case when [d].[ItemUnit] = 1 then [d].[Qty]
			 when [d].[ItemUnit] = 2 then [d].[Qty] / m.[UnityFact2]
			 when [d].[ItemUnit] = 3 then [d].[Qty] / m.[UnityFact3]
		end as [Qty],

		Case when [d].[ItemUnit] = 1 then [d].[Qty]
			 when [d].[ItemUnit] = 2 then [d].[Qty] / m.[UnityFact2]
			 when [d].[ItemUnit] = 3 then [d].[Qty] / m.[UnityFact3]
		end as [RQty],

		Case when [d].[ItemUnit] = 1 then [Unity1]
			 when [d].[ItemUnit] = 2 then [Unity2]
			 when [d].[ItemUnit] = 3 then [Unity3]
		end as [Unit],
		
		[d].[Qty2], 
		[d].[Qty2] as [RQty2], 
		m.[Unity2] as [Unit2],
		[d].[Qty3],
		[d].[Qty3] as [RQty3],
		m. [Unity3] as [Unit3],

		Case when [d].[ItemUnit] = 1 then [d].[Price]
			 when [d].[ItemUnit] = 2 then [d].[Price] * m.[UnityFact2]
			 when [d].[ItemUnit] = 3 then [d].[Price] * m.[UnityFact3]
		end as [Price],
		
		Case when [d].[ItemUnit] = 1 then [d].[Price]
			 when [d].[ItemUnit] = 2 then [d].[Price] * m.[UnityFact2]
			 when [d].[ItemUnit] = 3 then [d].[Price] * m.[UnityFact3]
		end as [RPrice],
				
		[d].[TotalPrice], 
		[d].[Bonus], 
		[d].[StoreGuid], 
		[s].[Code]+'-'+[s].[Name] as [Store], 
		[d].[DiscountPercent], 
		[d].[Discount], 
		[d].[ExtraPercent], 
		[d].[Extra], 
		[d].[Note], 
		[d].[ProductDate], 
		[d].[ExpireDate], 
		[o].[Code]+'-'+[o].[Name] as [Cost], 
		[d].[CostGuid], 
		[d].[Class], 
		[d].[Length], 
		[d].[width], 
		[d].[height], 
		[d].[Count], 
		[d].[ItemUnit],
		Case when [d].[ItemUnit] = 1 then 1
			 when [d].[ItemUnit] = 2 then [m].[UnityFact2]
			 when [d].[ItemUnit] = 3 then [m].[UnityFact3]
		end [DefUnityFact],
		[m].[UnityFact2],
		[m].[UnityFact3],
		[m].[unityfix2],		[m].[unityfix3],
		[d].[TotalPrice] as [RTotalPrice],
		[d].[DiscountPercent] as [RDiscountPercent],
		[d].[Discount] as [RDiscount],
		[d].[ExtraPercent] as [RExtraPercent],
		[d].[Extra] as [RExtra],
		[MatGuid]
	From
		[BillDetail] [d]
		inner join [vwMat] [m] on [d].[MatGuid] = [m].[Guid]
		inner join [Store] [s] on [d].[StoreGuid] = [s].[Guid]
		left join [Cost] [o] on [d].[CostGuid] = [o].[Guid]


GO
/****** Object:  View [dbo].[vwMovingBranch]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE View [dbo].[vwMovingBranch]
  
as
	Select
		*
	From 
		[vwBranch]
	where 
		[Guid] Not In (Select ISNULL([ParentGuid],0x0) From [Branch])

GO
/****** Object:  Table [dbo].[BillDiscount]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BillDiscount](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[ParentGuid] [uniqueidentifier] NULL,
	[AccountGuid] [uniqueidentifier] NULL,
	[Discount] [float] NULL,
	[Extra] [float] NULL,
	[CurrencyGuid] [uniqueidentifier] NULL,
	[CurrencyVal] [float] NULL,
	[CostGuid] [uniqueidentifier] NULL,
	[obverseAccountGuid] [uniqueidentifier] NULL,
	[Note] [varchar](256) NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbCost]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbCost]
	  
	as
		Select 
			[T].*
		From
			[Cost] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  View [dbo].[vwCost]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwCost]
  
as
	Select
		[C].[Number], 
		[C].[Guid], 
		[C].[Code], 
		[C].[LtnName], 
		[C].[ParentGUID], 
		[C].[Note],
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([C].[LtnName],'') <> '') then [C].[LtnName] else [C].[Name] end as [Name]
	From
		[vbCost] [C]


GO
/****** Object:  View [dbo].[vwBillDiscount]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwBillDiscount]
  
as

	Select
		[d].[Number], 
		[d].[Guid], 
		[d].[ParentGuid], 
		[d].[AccountGuid], 
		[a].[Code]+'-'+[a].[Name] as [Account], 
		[d].[Discount], 
		[d].[Extra], 
		[my].[Code] as [Currency], 
		[d].[CurrencyGuid], 
		[d].[CurrencyVal], 
		[Co].[Code]+'-'+[Co].[Name] as [Cost], 
		[d].[CostGuid], 
		[d].[obverseAccountGuid], 
		[o].[Code]+'-'+[o].[Name] as [obverseAccount], 
		[d].[Note]
	From
		[BillDiscount] [d]
		inner join [vwAccount] [a] on [a].[Guid] = [d].[AccountGuid]
		left join [vwAccount] [o] on [o].[Guid] = [d].[obverseAccountGuid]
		left join [vwCost] [Co] on [Co].[Guid] = [d].[CostGuid]
		left join [vwCurrency] [My] on [My].[Guid] = [d].[CurrencyGuid]


GO
/****** Object:  View [dbo].[vwTreeBranch]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE View [dbo].[vwTreeBranch]
  
as
	Select
		[A].[Number], [A].[Guid], [A].[Code], [A].[ParentGuid], [A].[Note], [A].[Address], [A].[Phone], [A].[LtnName],
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[LtnName],'') <> '') then [A].[LtnName] else [A].[Name] end as [Name], 
		case when [A].[ParentGuid] is Not Null then [A].[ParentGuid] else 0x0 end as [Parent],
		Isnull([S].[NSons],0) as [NSons]
	From 
		[vbBranch] [A]
		left join (Select 
						Count([Number]) as [NSons], 
						[ParentGuid] as [SGuid]
					From 
						[Branch]
					Group By
						[ParentGuid]
					) [S] On [S].[SGuid] = [A].[Guid]

GO
/****** Object:  View [dbo].[vwBill]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwBill]
  
as
	Select
		[b].[Number] as [BuNumber], 		[b].[Guid] as [BuGuid], 		[b].[SecLvl] as [BuSecLvl], 		[b].[TypeGuid] as [BuTypeGuid], 		[b].[Date] as [BuDate], 		[b].[CustGuid] as [BuCustGuid], 		[b].[CurrencyGuid] as [BuCurrencyGuid], 		[b].[CurrencyVal] as [BuCurrencyVal], 		[b].[PayType] as [BuPayType],		Case when [b].[PayType] = 0 then 'äÞÏÇð' 			 when [b].[PayType] = 1 then 'ÂÌá' 		end as [BuPayTypeStr],		[b].[StoreGuid] as [BuStoreGuid], 		[b].[CustAccGuid] as [BuCustAccGuid], 		[b].[CostGuid] as [BuCostGuid], 		[b].[BranchGuid] as [BuBranchGuid], 		[b].[Class] as [BuClass], 		[b].[Note] as [BuNote], 		[b].[EntryGuid] as [BuEntryGuid], 		[b].[EntryNumber] as [BuEntryNumber], 		[b].[ItemsTotal] as [BuItemsTotal],		[b].[ItemsDiscount] as [BuItemsDiscount],		[b].[ItemsExtra] as [BuItemsExtra],		[b].[BuExtra],		[b].[BuDiscount],		[b].[ItemsTotal]  +	[b].[BuExtra] - [b].[BuDiscount] as [BuCleanValue],		[b].[BuOnly],		[b].[isPosted] as [BuisPosted],		[b].[CheckCreateEntry] as [BuCheckCreateEntry],
		Case when b.isPosted = 0 then dbo.SC('ÛíÑ ãÑÍáÉ')
			 when b.isPosted = 1 then dbo.SC('ãÑÍáÉ')
		end as [BillPost],
		
		[b].[AddFld1],
		[b].[AddFld2],
		[b].[AddFld3],
		[b].[AddFld4],
		[b].[AddFld5],
		[b].[AddFld6],
		[b].[AddFld7],
		[b].[AddFld8],
		
		[t].[Number] as [BtNumber], 		[t].[Guid] as [BtGuid], 		[t].[SecLvl] as [BtSecLvl], 		[t].[Code] as [BtCode], 		[t].[Name] as [BtName], 		[t].[LtnName] as [BtLtnName], 		[t].[BillKind] as [BtBillKind], 		Case when [t].[BillKind] in (0, 3, 4) then 1			 when [t].[BillKind] in (1, 2, 5) then -1		end as [BtInOut],		[t].[Menu] as [BtMenu], 		[t].[LtnMenu] as [BtLtnMenu], 		[t].[ShortCut] as [BtShortCut], 		[t].[DefPrintPath] as [BtDefPrintPath], 		[t].[Note] as [BtNote], 		[t].[Color1] as [BtColor1], 		[t].[Color2] as [BtColor2], 		[t].[DefCashAccountGuid] as [BtDefCashAccountGuid], 		[t].[DefCostGuid] as [BtDefCostGuid], 		[t].[DefStoreGuid] as [BtDefStoreGuid], 		[t].[DefDiscountAccountGuid] as [BtDefDiscountAccountGuid], 		[t].[DefExtraAccountGuid] as [BtDefExtraAccountGuid], 		[t].[PostToStores] as [BtPostToStores], 		[t].[PostToStoresAuto] as [BtPostToStoresAuto], 		[t].[EntryCreated] as [BtEntryCreated], 		[t].[EntryCreatedAuto] as [BtEntryCreatedAuto], 		[t].[AutoPostedEntry] as [BtAutoPostedEntry], 		[t].[DefMatAccountGuid] as [BtDefMatAccountGuid],
		[t].[PriceEffected] as [btPriceEffected],
		
		[c].[CardKind] as [CuCardKind], 		[c].[Number] as [CuNumber], 		[c].[Guid] as [CuGuid], 		[c].[ArName] as [CuArName], 		[c].[LtnName] as [CuLtnName], 		[c].[Name] as [CuName], 		[c].[Nationality] as [CuNationality], 		[c].[Profession] as [CuProfession], 		[c].[PassportNO] as [CuPassportNO], 		[c].[Domicile] as [CuDomicile], 		[c].[Security] as [CuSecurity], 		[c].[MemoSecurity] as [CuMemoSecurity], 		[c].[PhoneJob] as [CuPhoneJob], 		[c].[Mobile] as [CuMobile], 		[c].[Note] as [CuNote], 		[c].[AcGuid] as [CuAcGuid], 		[c].[Address] as [CuAddress], 		[c].[BoxNo] as [CuBoxNo], 		[c].[InsuranceAccountGuid] as [CuInsuranceAccountGuid], 		[c].[PersonalityNo1] as [CuPersonalityNo1], 		[c].[PersonalityNo2] as [CuPersonalityNo2], 		[c].[Adjective] as [CuAdjective], 		[c].[Fax] as [CuFax], 		[c].[EMail] as [CuEMail], 		[c].[Ban] as [CuBan], 		[c].[PassportExpireDate] as [CuPassportExpireDate], 		[c].[BankName] as [CuBankName], 		[c].[BankAccCode] as [CuBankAccCode],
		
		[m].[Code] as [MyCode], 		[m].[LtnCode] as [MyLtnCode], 		[m].[Name] as [MyName], 		[m].[LtnName] as [MyLtnName], 		[m].[CurrencyVal] as [MyCurrencyVal], 		
		[Ac].[Code] as [AcCode], 		[Ac].[LtnName] as [AcLtnName], 		[Ac].[ArName] as [AcArName], 		[Ac].[Name] as [AcName], 		[St].[Code] as [StCode], 		[St].[Name] as [StName], 		[St].[LtnName] as [StLtnName], 		
		[Co].[Code] as [CoCode], 		[Co].[Name] as [CoName], 		[Co].[LtnName] as [CoLtnName],		B.[entryGuid],		B.[ContractGuid]
	From
		[vbBill] [B]
		inner join BillType [t] on [t].Guid = [b].TypeGuid
		left join vwCustomer [C] on [C].Guid = [b].CustGuid
		left join Currency [m] on [m].Guid = [b].CurrencyGuid
		inner join vwStore [st] on [st].Guid = [b].StoreGuid
		left join vwAccount [Ac] on [Ac].Guid = [b].CustAccGuid
		left join vwCost [Co] on [b].Guid = [b].CostGuid
		left join Branch [br] on [br].Guid = [b].BranchGuid

GO
/****** Object:  Table [dbo].[TableDescription]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TableDescription](
	[Number] [int] IDENTITY(1,1) NOT NULL,
	[TblName] [varchar](256) NULL,
	[ArName] [varchar](256) NULL,
	[EnName] [varchar](256) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Trace]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Trace](
	[ParentGuid] [uniqueidentifier] NULL,
	[Guid] [uniqueidentifier] NOT NULL,
	[Date] [datetime] NULL,
	[userGuid] [uniqueidentifier] NULL,
	[HostName] [varchar](256) NULL,
	[ParentTbl] [varchar](256) NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TraceDetail]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TraceDetail](
	[ParentGuid] [uniqueidentifier] NULL,
	[Caption] [varchar](256) NULL,
	[Old] [varchar](500) NULL,
	[New] [varchar](500) NULL,
	[Tbl] [varchar](50) NULL
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwTraceDetail]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwTraceDetail]
  
as
	Select 
		T.parentGuid,
		[ParentTbl],
		(
			Select 
				Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[enName],'') <> '') then [A].[enName] else [A].[arName] end		
			from 
				[TableDescription] A
			where [TblName] = T.[ParentTbl]
		 ) as [CardName],
		 
		T.Date,
		U.loginName,
		T.HostName,
		dbo.SC([Caption]) as [FieldName],

		case when isnull([Tbl],'') <> '' then (dbo.[FnGetTraceValue] ([Tbl], [New])) 
		else [New]
		end as [new],

		case when isnull([Tbl],'') <> '' then (dbo.[FnGetTraceValue] ([Tbl], [Old])) 
		else [old]
		end as [Old],
		T.UserGuid
	from 
		[Trace] T
		inner join [Realty_Users] U on U.Guid = T.UserGuid		
		inner join [TraceDetail] D on d.ParentGuid = T.Guid

GO
/****** Object:  View [dbo].[vwAllRealty]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwAllRealty]
  
as
	Select
		dbo.SC('ÈäÇÁ') as [Kind],
		a.Name,
		co.Name as CostName,
		a.Guid,
		a.Guid as BuildingGuid,
		CostGuid
	From
		[vwBuilding] [a]
		inner join Cost co on co.Guid = a.costGuid
	union all
	Select
		dbo.SC('ÔÞÉ') as [Kind],
		BuildingName +'-'+ a.No + '-' +a.FlatKind,
		co.Name as CostName,
		a.Guid,
		a.BuildingGuid as BuildingGuid,
		CostGuid
	From
		[vwApartment] [a]
		inner join Cost co on co.Guid = a.costGuid

	union all
	Select
		dbo.SC('ãÍá') as [Kind],
		BuildingName +'-'+ a.No + '-' +a.[Description],
		co.Name as CostName,
		a.Guid,
		a.BuildingGuid as BuildingGuid,
		CostGuid
	From
		[vwShop] [a]
		inner join Cost co on co.Guid = a.costGuid

	union all
	Select
		dbo.SC('ãæÞÝ') as [Kind],
		BuildingName +'-'+ a.No + '-' +a.[Description],
		co.Name as CostName,
		a.Guid,
		a.BuildingGuid as BuildingGuid,
		CostGuid
	From
		[vwParking] [a]
		inner join Cost co on co.Guid = a.costGuid

	union all
	Select
		dbo.SC('ÃÑÖ') as [Kind],
		a.EarthNo + '-' +a.[Name],
		co.Name as CostName,
		a.Guid,
		0x0 as BuildingGuid,
		CostGuid
	From
		[vwEarth] [a]
		inner join Cost co on co.Guid = a.costGuid

	union all
	Select
		dbo.SC('ÝíááÇ') as [Kind],
		a.[Name],
		co.Name as CostName,
		a.Guid,
		0x0 as BuildingGuid,
		CostGuid
	From
		[vwVilla] [a]
		inner join Cost co on co.Guid = a.costGuid

GO
/****** Object:  Table [dbo].[RealtyMaintenanceContract]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RealtyMaintenanceContract](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[ParentGuid] [uniqueidentifier] NULL,
	[RealtyGuid] [uniqueidentifier] NULL,
	[CostGuid] [uniqueidentifier] NULL,
	[Value] [float] NULL,
	[Percent] [float] NULL,
	[Note] [varchar](255) NULL
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwRealtyMaintenanceContract]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwRealtyMaintenanceContract]
  
as
	Select
		a.*,
		R.Name as Realty,
		R.Kind,
		C.Code+'-'+C.Name as Cost
	From
		[RealtyMaintenanceContract] [a]
		inner join vwallRealty [R] on [R].Guid = [a].[RealtyGuid]
		inner join Cost [C] on [C].Guid = [a].[CostGuid]

GO
/****** Object:  Table [dbo].[OfferPriceFee]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[OfferPriceFee](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[ParentGuid] [uniqueidentifier] NULL,
	[Value] [float] NULL,
	[Note] [varchar](256) NULL
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwOfferPrice]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwOfferPrice]
  
as
	Select
		* ,
		Case when OfferKind = 0 then dbo.SC('ÔÞÉ') 
		when OfferKind = 1 then dbo.SC('ãÍá') 
		when OfferKind = 2 then dbo.SC('ãæÞÝ') 
		when OfferKind = 3 then dbo.SC('ÝíáÇ') 
		when OfferKind = 4 then dbo.SC('ÇÑÖ') 
		end as [OfferKindStr],
		
		(Select Name From vwBuilding where Guid = [BuildingGuid]) as [BuildingName],

		Case when OfferKind = 0 then (Select No From [vwApartment] where Guid = [RealtyGuid])
		when OfferKind = 1 then (Select No From vwshop where Guid = [RealtyGuid])
		when OfferKind = 2 then (Select No From vwParking where Guid = [RealtyGuid])
		when OfferKind = 3 then (Select Name From vwVilla where Guid = [RealtyGuid])
		when OfferKind = 4 then (Select Name From vwEarth where Guid = [RealtyGuid])
		end as [RealtyNo],
		(Select SUM(Value) from offerpricefee where ParentGuid = O.Guid) as [SumFee]
		
	From 
		[offerPrice] [O]


GO
/****** Object:  Table [dbo].[ServicesContractCachPayment]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ServicesContractCachPayment](
	[ContractGuid] [uniqueidentifier] NULL,
	[EntryGuid] [uniqueidentifier] NULL
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwServicesContractCachPayment]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwServicesContractCachPayment]
  
as
	Select
		[C].[ContractGuid],
		[H].[HNumber] as [Number],
		S.Number as [RecieptVoucherNumber],
		[H].[DNumber],
		[H].[HDate] as [Date],
		[H].[DCredit] as [Value],
		[H].[CurrencyGuid],
		[H].[CurrencyName] as [Currency],
		[H].[CurrencyVal],
		[H].[HNote],
		[H].[DNote],
		[h].AcGuid,
		(Select Number from Secondary_Entry where Guid = [C].[EntryGuid] ) as SNumber,
		1 as [Print],
		[H].[HGuid] as [Guid]
	from 
		[ServicesContractCachPayment] [C]
		inner join [vwDetailEntry] [H] on [H].[HGuid] = [C].[EntryGuid] 
		left join Secondary_Entry S on S.Guid = H.[HGuid]
		inner join ServicesContract L on L.CustAccountGuid = H.AcGuid and L.Guid = C.contractGuid
	where
		[H].[DCredit] <> 0


GO
/****** Object:  View [dbo].[vwMaintenanceItem]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE View [dbo].[vwMaintenanceItem]
  
as
	Select
		[A].[Number], 
		[A].[Guid], 
		[A].[Note], 
		[A].[LtnName],
		[A].[Name] as [ArName],
		[DefValue],
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[LtnName],'') <> '') then [A].[LtnName] else [A].[Name] end as [Name]
	from
		vbMaintenanceItem A


GO
/****** Object:  View [dbo].[vwReceiptOrderType]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE View [dbo].[vwReceiptOrderType]
  
as
	Select

		[A].[Number],
		[A].[Guid],
		[A].[SecLvl],
		[A].[Code],
		[A].[Name] as [ArName],
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[LtnName],'') <> '') then [A].[LtnName] else [A].[Name] end as [Name], 
		[A].[ltnName],
		[A].[Menu] as [arMenu],
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[LtnMenu],'') <> '') then [A].[LtnMenu] else [A].[Menu] end as [Menu], 
		[A].[LtnMenu],
		[A].[ShortCut], 		[A].[EntryTypeGuid],
		
		[B].[DefAccountGuid], 		[B].[DebitField], 		[B].[CreditField], 		[B].[DebitCaption], 		[B].[CreditCaption], 		[B].[LtnDebitCaption], 		[B].[LtnCreditCaption], 		[B].[CkCurrency], 		[B].[CkCost], 		[B].[CkNote], 		[B].[CreateEntry], 		[B].[AutoCreateEntry], 		[B].[AutoPostedEntry], 		[B].[OpMoveCostwithDefAccount], 		[B].[OpEntryForOneItem], 		[B].[OpObverseNoteItem], 		[B].[NeedCostItem], 		[B].[NeedNoteItem], 		[B].[AutoSMSAfterAdd], 		[B].[SMSMsg], 		[B].[SMSMsgEn], 		[B].[DefPrintPath]
		
	From 
		[vbReceiptOrderType] [A]
		inner join EntryType [b] on [b].Guid = [a].[EntryTypeGuid]


GO
/****** Object:  Table [dbo].[MaintenanceContractMaintenanceItem]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MaintenanceContractMaintenanceItem](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[ContractGuid] [uniqueidentifier] NULL,
	[MaintenanceItemGuid] [uniqueidentifier] NULL,
	[Value] [float] NULL,
	[Note] [varchar](255) NULL
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwMaintenanceContractMaintenanceItem]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwMaintenanceContractMaintenanceItem]
  
as
	Select
		I.Name,
		a.*
	From
		[MaintenanceContractMaintenanceItem] [a]
		inner join MaintenanceItem [I] on [I].Guid = [a].MaintenanceItemGuid

GO
/****** Object:  View [dbo].[vwServicesContract_br]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE view [dbo].[vwServicesContract_br]
  
as
	Select
		A.*
	from 
		[vbServicesContract] [A]
		inner join [vwBuilding] [B] On [A].[BuildingGuid] = [B].[Guid]


GO
/****** Object:  View [dbo].[vwTransType]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwTransType]
  
as
	Select
		[A].[Number],
		[A].[Guid],
		[A].[SecLvl],
		[A].[Code],
		[A].[Name] as [ArName],
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[LtnName],'') <> '') then [A].[LtnName] else [A].[Name] end as [Name], 
		[A].[ltnName],
		[A].[Menu] as [arMenu],
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[LtnMenu],'') <> '') then [A].[LtnMenu] else [A].[Menu] end as [Menu], 
		[A].[LtnMenu],
		[A].[ShortCut],
		[A].[DefPrintPath],
		[A].[Note],
		[A].[Color1],
		[A].[Color2]
	From
		[vbTransType] [A]

GO
/****** Object:  Table [dbo].[TransDetail]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TransDetail](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[ParentGuid] [uniqueidentifier] NULL,
	[MatGuid] [uniqueidentifier] NULL,
	[Qty] [float] NULL,
	[Qty2] [float] NULL,
	[Qty3] [float] NULL,
	[Price] [float] NULL,
	[TotalPrice] [float] NULL,
	[Bonus] [float] NULL,
	[DiscountPercent] [float] NULL,
	[Discount] [float] NULL,
	[ExtraPercent] [float] NULL,
	[Extra] [float] NULL,
	[Note] [varchar](256) NULL,
	[ProductDate] [datetime] NULL,
	[ExpireDate] [datetime] NULL,
	[CostGuid] [uniqueidentifier] NULL,
	[Class] [varchar](256) NULL,
	[Length] [float] NULL,
	[width] [float] NULL,
	[height] [float] NULL,
	[Count] [float] NULL,
	[ItemUnit] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwGetTransDetail]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwGetTransDetail]
  
as
	Select
		[d].[Number], 
		[d].[Guid], 
		[d].[ParentGuid], 
		[m].[Code]+'-'+[m].[Name] as [Mat],

		Case when [d].[ItemUnit] = 1 then [d].[Qty]
			 when [d].[ItemUnit] = 2 then [d].[Qty] * m.[UnityFact2]
			 when [d].[ItemUnit] = 3 then [d].[Qty] * m.[UnityFact3]
		end as [Qty],

		Case when [d].[ItemUnit] = 1 then [d].[Qty]
			 when [d].[ItemUnit] = 2 then [d].[Qty] * m.[UnityFact2]
			 when [d].[ItemUnit] = 3 then [d].[Qty] * m.[UnityFact3]
		end as [RQty],

		Case when [d].[ItemUnit] = 1 then [Unity1]
			 when [d].[ItemUnit] = 2 then [Unity2]
			 when [d].[ItemUnit] = 3 then [Unity3]
		end as [Unit],
		
		[d].[Qty2], 
		[d].[Qty2] as [RQty2], 
		m.[Unity2] as [Unit2],
		[d].[Qty3],
		[d].[Qty3] as [RQty3],
		m. [Unity3] as [Unit3],

		Case when [d].[ItemUnit] = 1 then [d].[Price]
			 when [d].[ItemUnit] = 2 then [d].[Price] / m.[UnityFact2]
			 when [d].[ItemUnit] = 3 then [d].[Price] / m.[UnityFact3]
		end as [Price],
		Case when [d].[ItemUnit] = 1 then [d].[Price]
			 when [d].[ItemUnit] = 2 then [d].[Price] / m.[UnityFact2]
			 when [d].[ItemUnit] = 3 then [d].[Price] / m.[UnityFact3]
		end as [RPrice],
				
		[d].[TotalPrice], 
		[d].[Bonus], 

		[d].[DiscountPercent], 
		[d].[Discount], 
		[d].[ExtraPercent], 
		[d].[Extra], 
		[d].[Note], 
		[d].[ProductDate], 
		[d].[ExpireDate], 
		[o].[Code]+'-'+[o].[Name] as [Cost], 
		[d].[CostGuid], 
		[d].[Class], 
		[d].[Length], 
		[d].[width], 
		[d].[height], 
		[d].[Count], 
		[d].[ItemUnit],
		Case when [d].[ItemUnit] = 1 then 1
			 when [d].[ItemUnit] = 2 then [m].[UnityFact2]
			 when [d].[ItemUnit] = 3 then [m].[UnityFact3]
		end [DefUnityFact],
		[m].[UnityFact2],
		[m].[UnityFact3],
		[m].[unityfix2],		[m].[unityfix3],
		[d].[TotalPrice] as [RTotalPrice],
		[d].[DiscountPercent] as [RDiscountPercent],
		[d].[Discount] as [RDiscount],
		[d].[ExtraPercent] as [RExtraPercent],
		[d].[Extra] as [RExtra],
		[MatGuid]
	From
		[TransDetail] [d]
		inner join [vwMat] [m] on [d].[MatGuid] = [m].[Guid]
		left join [Cost] [o] on [d].[CostGuid] = [o].[Guid]


GO
/****** Object:  Table [dbo].[TransDiscount]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TransDiscount](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[ParentGuid] [uniqueidentifier] NULL,
	[AccountGuid] [uniqueidentifier] NULL,
	[Discount] [float] NULL,
	[Extra] [float] NULL,
	[CurrencyGuid] [uniqueidentifier] NULL,
	[CurrencyVal] [float] NULL,
	[CostGuid] [uniqueidentifier] NULL,
	[obverseAccountGuid] [uniqueidentifier] NULL,
	[Note] [varchar](256) NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwTransDiscount]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwTransDiscount]
  
as

	Select
		[d].[Number], 
		[d].[Guid], 
		[d].[ParentGuid], 
		[d].[AccountGuid], 
		[a].[Code]+'-'+[a].[Name] as [Account], 
		[d].[Discount], 
		[d].[Extra], 
		[my].[Code] as [Currency], 
		[d].[CurrencyGuid], 
		[d].[CurrencyVal], 
		[Co].[Code]+'-'+[Co].[Name] as [Cost], 
		[d].[CostGuid], 
		[d].[obverseAccountGuid], 
		[o].[Code]+'-'+[o].[Name] as [obverseAccount], 
		[d].[Note]
	From
		[TransDiscount] [d]
		inner join [vwAccount] [a] on [a].[Guid] = [d].[AccountGuid]
		left join [vwAccount] [o] on [o].[Guid] = [d].[obverseAccountGuid]
		left join [vwCost] [Co] on [Co].[Guid] = [d].[CostGuid]
		left join [vwCurrency] [My] on [My].[Guid] = [d].[CurrencyGuid]


GO
/****** Object:  View [dbo].[vwMaintenanceContractVisit]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwMaintenanceContractVisit]
  
as
	Select
		v.[Number],v.[Guid],v.[SecLvl],
		iSNull(v.[ContractGuid],0x0) as [ContractGuid],
		CustGuid,
		FeeAccountGuid,
		[CreateEntry],
		[EntryNote],
		[CurrencyGuid],
		[CurrencyVal],
		[EntryDebitCostGuid],
		[EntryCreditCostGuid],
		v.[No],v.[Date],v.[ExecState],v.[ExecDate],v.[ExecNote],v.[NotExecNote],
		v.[Note],v.[WorkNote],v.[WithOutContract],
		Case 
			when (execState = 1) then dbo.SC('Êã ÇáÊäÝíÐ')
			when (Date > GetDate()) and (execState = 2) then dbo.SC('áã íÍä æÞÊåÇ')
			when (Date <= GetDate()) and (execState = 2) then dbo.SC('ÍÇä æÞÊåÇ æáã ÊäÝÐ')
			when (execState = 0) then dbo.SC('áã íÊã ÇáÊäÝíÐ')
			else dbo.SC('ÛíÑ ãÍÏÏ')
		end
		as [visitState],
		Case 
			when (execState = 1) then 0
			when (Date > GetDate()) and (execState = 2) then 1
			when (Date <= GetDate()) and (execState = 2) then 2
			when (execState = 0) then 3
			else 4
		end
		as [visitStateId]
	From
		[vbMaintenanceContractVisit] [V]
		

GO
/****** Object:  View [dbo].[vwTrans]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwTrans]
  
as
	Select
		[b].[Number] as [BuNumber], 		[b].[Guid] as [BuGuid], 		[b].[SecLvl] as [BuSecLvl], 		[b].[TypeGuid] as [BuTypeGuid], 		[b].[Date] as [BuDate], 		[b].[CurrencyGuid] as [BuCurrencyGuid], 		[b].[CurrencyVal] as [BuCurrencyVal], 		[b].[PayType] as [BuPayType],		Case when [b].[PayType] = 0 then 'äÞÏÇð' 			 when [b].[PayType] = 1 then 'ÂÌá' 		end as [BuPayTypeStr],		[b].[StoreInGuid] as [BuStoreInGuid], 		[b].[StoreOutGuid] as [BuStoreOutGuid], 		[b].[CostInGuid] as [BuCostInGuid], 		[b].[CostOutGuid] as [BuCostOutGuid], 		[b].[BranchGuid] as [BuBranchGuid], 		[b].[Class] as [BuClass], 		[b].[Note] as [BuNote], 		[b].[isPosted] as [BuisPosted],
		Case when b.isPosted = 0 then dbo.SC('ÛíÑ ãÑÍáÉ')
			 when b.isPosted = 1 then dbo.SC('ãÑÍáÉ')
		end as [TransPost],
		
		[t].[Number] as [BtNumber], 		[t].[Guid] as [BtGuid], 		[t].[SecLvl] as [BtSecLvl], 		[t].[Code] as [BtCode], 		[t].[Name] as [BtName], 		[t].[LtnName] as [BtLtnName], 		[t].[Menu] as [BtMenu], 		[t].[LtnMenu] as [BtLtnMenu], 		[t].[ShortCut] as [BtShortCut], 		[t].[DefPrintPath] as [BtDefPrintPath], 		[t].[Note] as [BtNote], 		[t].[Color1] as [BtColor1], 		[t].[Color2] as [BtColor2], 		[t].[PostToStores] as [BtPostToStores], 		[t].[PostToStoresAuto] as [BtPostToStoresAuto], 
		
		[m].[Code] as [MyCode], 		[m].[LtnCode] as [MyLtnCode], 		[m].[Name] as [MyName], 		[m].[LtnName] as [MyLtnName], 		[m].[CurrencyVal] as [MyCurrencyVal], 		
		[StIn].[Code] as [StCodeIn], 		[StIn].[Name] as [StNameIn], 		[StIn].[LtnName] as [StLtnNameIn], 		
		[StOut].[Code] as [StCodeOut], 		[StOut].[Name] as [StNameOut], 		[StOut].[LtnName] as [StLtnNameOut], 		[CoIn].[Code] as [CoCodeIn], 		[CoIn].[Name] as [CoNameIn], 		[CoIn].[LtnName] as [CoLtnNameIn],		
		[CoOut].[Code] as [CoCodeOut], 		[CoOut].[Name] as [CoNameOut], 		[CoOut].[LtnName] as [CoLtnNameOut]	From
		[vbTrans] [B]
		inner join TransType [t] on [t].Guid = [b].TypeGuid
		inner join Currency [m] on [m].Guid = [b].CurrencyGuid
		inner join vwStore [stIn] on [stIn].Guid = [b].StoreInGuid
		inner join vwStore [stOut] on [stOut].Guid = [b].StoreOutGuid
		left join vwCost [CoIn] on [b].Guid = [b].CostInGuid
		left join vwCost [CoOut] on [b].Guid = [b].CostOutGuid
		left join Branch [br] on [br].Guid = [b].BranchGuid

GO
/****** Object:  View [dbo].[vwMaintenanceContractVisitFull]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwMaintenanceContractVisitFull]
  
as
		
	Select
		Case when isNull(WithOutContract,0) = 1 then dbo.SC('ÈÏæä ÚÞÏ') else C.TypeName end as TypeName,
		C.ContractNo,
		Cu.Name as CustName,
		'['+C.TypeName+' '+C.ContractNo +'] '+ V.No as VisitNo,
		V.CustGuid as CustomerGuid,
		isNull(C.TypeGuid,0x0) as TypeGuid,
		v.*,
		Case 
			when execState = 0 then dbo.SC('áã íÊã ÇáÊäÝíÐ')
			when execState = 1 then dbo.SC('Êã ÇáÊäÝíÐ')
			else dbo.SC('ÛíÑ ãÍÏÏ')
		end as execStateStr
	From
		[vwMaintenanceContractVisit] [V]
		left join [vwCustomer] Cu on Cu.Guid = V.CustGuid
		left join [vwMaintenanceContract] C on C.Guid = V.contractGuid
		

GO
/****** Object:  View [dbo].[vwEntry]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwEntry]
  
as
	Select 
			[Guid]
			,[Number]
			,[Date]
			,Case when (dbo.FnGetLangauge(@@spid) = 1) then 'Entry' else 'ÓäÏ ÇáÞíÏ' end as [Name]
			,1 as [Kind] 
			,[ParentKind]
			,[CurrencyGuid]
			,[CurrencyVal]
			,[Note]
			,0x0 as [AccountGuid]
			,[BranchGuid]
			,[IsPosted]
	From 
			[vbHEntry]


GO
/****** Object:  View [dbo].[vwPricing]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwPricing]
  
as
	Select
		A.*,
		b.Name as CustName
	From
		[vbPricing] [a]
		inner join vwCustomer [b] on [b].Guid = [a].[CustGuid]

GO
/****** Object:  View [dbo].[vbElectricityType]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbElectricityType]
	  
	as
		Select 
			[T].*
		From
			[ElectricityType] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  View [dbo].[vwElectricityType]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE View [dbo].[vwElectricityType]
  
as
	Select
		[A].[Number],
		[A].[Guid],
		[A].[SecLvl],
		[A].[Name] as [ArName],
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[LtnName],'') <> '') then [A].[LtnName] else [A].[Name] end as [Name], 
		[A].[ltnName],
		[A].[Menu] as [arMenu],
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[LtnMenu],'') <> '') then [A].[LtnMenu] else [A].[Menu] end as [Menu], 
		[A].[LtnMenu],
		[A].[DefPrintPath],
		[A].[ShortCut],

		[CreatedEntry],
		[AutoCreatedEntry],
		[BuildingGuid],
		[IncomeAccountGuid],
		[ExtraAccountGuid],
		[DiscountAccountGuid],

		[WaterAccountGuid],
		[DrainageAccountGuid],
		[WaterValue],
		[DrainageValue],
			
		[FineAccountGuid],
		[FeeAccountGuid],
		[FineValue],
		[FeeValue],

		[CurrencyGuid],
		[CurrencyVal],
		DefCheckTypeGuid,
		DefEntryTypeGuid
	From 
		[vbElectricityType] [A]


GO
/****** Object:  View [dbo].[vwTreeAccount]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE View [dbo].[vwTreeAccount]
  
as
	Select
		[A].[Number], [A].[Guid], [A].[Code], [A].[ParentGuid], [A].[Note], [A].[CDate], [A].[CurrencyGUID],
		[A].[CurrencyVal], [A].[Type], [A].[FinalGUID], [A].[LtnName],
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[LtnName],'') <> '') then [A].[LtnName] else [A].[Name] end as [Name], 
		case when [A].[ParentGuid] is Not Null then [A].[ParentGuid] else 0x0 end as [Parent],
		Isnull([S].[NSons],0) as [NSons],
		Isnull([Cu].[Guid],0x0) as [CustGuid],
		
		'('+[F].[Code] +'-'+ [F].[Name]+')' As [FinalAcount]
	From 
		[vbAccount] [A]
		left join (Select 
						Count([Number]) as [NSons], 
						[ParentGuid] as [SGuid]
					From 
						[Account]
					Group By
						[ParentGuid]
					) [S] On [S].[SGuid] = [A].[Guid]

		left join [Customer] [cu] On [Cu].[AcGuid] = [A].[Guid]
		Left join [vwaccount] [F] on [F].[Guid] = [A].[FinalGUID]

GO
/****** Object:  View [dbo].[vwMovingAccount]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE View [dbo].[vwMovingAccount] 
  
as
	Select
		[Ac].*
	From 
		[vwAccount] [Ac]
	where
		NSons = 0
		and ([Ac].[Type] = 0 or [Ac].[Type] = 3)
		--inner join [MovingAccount] [Ac2] on [Ac2].[AccountGuid]  = [Ac].[Guid]

GO
/****** Object:  Table [dbo].[MaintenanceContractVisitRealty]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MaintenanceContractVisitRealty](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[ParentGuid] [uniqueidentifier] NULL,
	[RealtyGuid] [uniqueidentifier] NULL,
	[Note] [varchar](255) NULL
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwMaintenanceContractVisitRealty]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwMaintenanceContractVisitRealty]
  
as
	Select
		a.*,
		R.Name as Realty
	From
		[MaintenanceContractVisitRealty] [a]
		inner join vwAllRealty [R] on [R].Guid = [a].RealtyGuid

GO
/****** Object:  Table [dbo].[ElectricityCachPayment]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ElectricityCachPayment](
	[ContractGuid] [uniqueidentifier] NULL,
	[EntryGuid] [uniqueidentifier] NULL
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwElectricityCachPayment]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwElectricityCachPayment]
  
as
	Select
		[C].[ContractGuid],
		[H].[HNumber] as [Number],
		[H].[DNumber],
		[H].[HDate] as [Date],
		[H].[DCredit] as [Value],
		[H].[CurrencyGuid],
		[H].[CurrencyName] as [Currency],
		[H].[CurrencyVal],
		[H].[HNote],
		[H].[DNote],
		[h].AcGuid,
		1 as [Print],
		[H].[HGuid] as [Guid]
	from 
		[ElectricityCachPayment] [C]
		inner join [vwDetailEntry] [H] on [H].[HGuid] = [C].[EntryGuid] 
	where
		[H].[DCredit] <> 0


GO
/****** Object:  Table [dbo].[MaintenanceContractVisitWorker]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MaintenanceContractVisitWorker](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[ParentGuid] [uniqueidentifier] NULL,
	[HourCount] [float] NULL,
	[Fee] [float] NULL,
	[WorkerGuid] [uniqueidentifier] NULL,
	[Note] [varchar](255) NULL
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwMaintenanceContractVisitWorker]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwMaintenanceContractVisitWorker]
  
as
	Select
		C.*,
		W.Name
	From
		[MaintenanceContractVisitWorker] [C]
		inner join MaintenanceWorker [W] on [W].Guid = [C].WorkerGuid

GO
/****** Object:  View [dbo].[vwBuildingPrint]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create View [dbo].[vwBuildingPrint]
as
	Select
		[b].[Number], 		[b].[Guid],		[b].[SecLvl], 		[b].[Name], 		[b].[LtnName], 		[b].[BuildingCode], 		[b].[Emirate] as [Emirate], 		[b].[Area] as [Area], 		[b].[Suburb] as [Suburb], 		[b].[Street] as [Street], 		[b].[LtnEmirate] as [LtnEmirate], 		[b].[LtnArea] as [LtnArea], 		[b].[LtnSuburb] as [LtnSuburb], 		[b].[LtnStreet] as [LtnStreet], 		[b].[BasinNo] as [BasinNo], 		[b].[PieceNo] as [PieceNo], 		[b].[FloorCount] as [FloorCount], 		[b].[ApartmentCount] as [ApartmentCount], 		[b].[ApartmentCountOfFloor] as [ApartmentCountOfFloor], 		[b].[ShopCount] as [ShopCount], 		[b].[Costunity] as [Costunity], 		[b].[AccountGuid] as [AccountGuid], 		Ac1.Name as [AccountBankBuilding], 		[b].[BuildingAccountGuid] as [BuildingAccountGuid], 		[Co].[Name] as [Cost], 		[b].[BankName] as [BankName], 		[b].[BankAccCode] as [BankAccCode], 		[b].[OpOwner] as [OpOwner], 		[b].[DatePurchase] as [DatePurchase], 		[b].[AmountPurchase] as [AmountPurchase], 		[b].[CurrencyPurchase] as [CurrencyPurchase], 		[b].[CurrencyvalPurchase] as [CurrencyvalPurchase], 		[b].[CustomerPurchase] as [CustomerPurchase], 		[b].[PurchaseNotes] as [PurchaseNotes], 		[b].[CkReceiptBuilding] as [CkReceiptBuilding], 		[b].[ReceiptDate] as [ReceiptDate], 		[b].[ReceiptAmount] as [ReceiptAmount], 		[b].[CurrencyReceipt] as [CurrencyReceipt], 		[b].[CurrencyvalReceipt] as [CurrencyvalReceipt], 		[b].[ReceiptNote] as [ReceiptNote], 		[b].[Note] as [Note], 		Ac3.Name as [OwnerAccount], 		[b].[IdentityValue] as [IdentityValue], 		[b].[CurrencyIdentityGUID] as [CurrencyIdentityGUID], 		[b].[CurrencyValIdentity] as [CurrencyValIdentity], 		[b].[IdentityBeginDate] as [IdentityBeginDate], 		[b].[IdentityEndDate] as [IdentityEndDate], 		[b].[UsedEndDate] as [UsedEndDate], 		[b].[BHouseFloor] as [BHouseFloor], 		[b].[BHouseFlatCount] as [BHouseFlatCount], 		[b].[MBalanceFloor] as [MBalanceFloor], 		[b].[MBalanceFlatCount] as [MBalanceFlatCount], 		[b].[OfficeFloor] as [OfficeFloor], 		[b].[OfficeCount] as [OfficeCount], 		[b].[ParkingFloor] as [ParkingFloor], 		[b].[ParkingCount] as [ParkingCount], 		[b].[ParkingFloorUnder] as [ParkingFloorUnder], 		[b].[ParkingCountUnder] as [ParkingCountUnder], 		[b].[FlatDriverCount] as [FlatDriverCount], 		[b].[FlatServantCount] as [FlatServantCount], 		[b].[StoreCount] as [StoreCount], 		[b].[CreateEntryPurchase] as [CreateEntryPurchase], 		[b].[CrearteEntryInvestment] as [CrearteEntryInvestment], 		Cu.Name as [OwnerName], 		[b].[CommissionPercent] as [CommissionPercent], 		[b].[AccountCommIncomeGuid] as [AccountCommIncomeGuid], 		[b].[BuildingCost] as [BuildingCost], 		[b].[BuildingNo] as [BuildingNo], 		[b].[BondType] as [BondType], 		[b].[BondNo] as [BondNo], 		[b].[BondDate] as [BondDate], 		[R].[Name] as [RentInfo], 		[b].[CkBuildingPayTypelow] as [CkBuildingPayTypelow], 		[O].[Name] as [Owner], 		[b].[ShowInContract] as [ShowInContract], 		[Ac4].[Name] as [CashAccount], 		[Ac5].[Name] as [InsuranceAccount]
	From
		[vbBuilding] [b]
		left join vwAccount [Ac1] on [Ac1].Guid = [B].[AccountBankBuildingGuid]
		left join vwAccount [Ac2] on [b].Guid = [B].[BuildingAccountGuid]
		left join vwCost [Co] on [b].Guid = [b].[CostGuid]
		left join vwAccount [Ac3] on [Ac3].Guid = [B].[OwnerAccountGuid]
		left join vwCustomer [Cu] on [Cu].Guid = [B].[OwnerName]
		left join RentInfo [R] on [R].Guid = [B].[RentInfoGuid]
		left join [Owner] [O] on [O].Guid = [B].[OwnerGuid]
		left join vwAccount [Ac4] on [Ac4].Guid = [B].[CashAccountGuid]
		left join vwAccount [Ac5] on [Ac5].Guid = [B].[InsuranceAccountGuid]

GO
/****** Object:  Table [dbo].[MatUnitsPrice]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MatUnitsPrice](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[MatGuid] [uniqueidentifier] NULL,
	[PriceKind] [varchar](256) NULL,
	[Price1] [float] NULL,
	[Price2] [float] NULL,
	[Price3] [float] NULL
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwMatDescriptionPrice]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE View [dbo].[vwMatDescriptionPrice]
  
as
	Select 
		G.Number,
		[m].[matGuid] ,
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([G].[LtnName],'') <> '') then [G].[LtnName] else [G].[Name] end AS [PriceKind],
		[m].[price1], 
		[m].[price2], 
		[m].[price3]
	From 
		[MatDescriptionConfig] [g]
		left join [MatUnitsPrice] [m] on [m].[Number] = [g].[Number]
	where
		[Kind] = 1
	
		

GO
/****** Object:  View [dbo].[vwShowCustomer]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE view [dbo].[vwShowCustomer]
  
as
	SELECT 
		[Number], 
		[Guid], 
		[Name] as [ArName],
		[LtnName], 
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([LtnName],'') <> '') then [LtnName] else [Name] end as [Name],  
		[Nationality], 
		[Profession], 
		[PassportNO], 
		[Domicile], 
		[Security], 
		[PhoneJob], 
		[Mobile], 
		[Note], 
		[AcGuid],
		[InsuranceAccountGuid]
	FROM 
		[Customer]
	where
		[CkHideInSearch] = 0

GO
/****** Object:  View [dbo].[vwShowSupplier]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE view [dbo].[vwShowSupplier]
  
as
	SELECT 
		[Number], 
		[Guid], 
		[Name] as [ArName],
		[LtnName], 
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([LtnName],'') <> '') then [LtnName] else [Name] end as [Name],  
		[Nationality], 
		[Profession], 
		[PassportNO], 
		[Domicile], 
		[Security], 
		[PhoneJob], 
		[Mobile], 
		[Note], 
		[AcGuid],
		[InsuranceAccountGuid]
	FROM 
		[Customer]
	where
		[CkHideInSearch] = 0
		and CardKind = 1

GO
/****** Object:  View [dbo].[vwAssetsGroup]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE View [dbo].[vwAssetsGroup]
  
as
	Select
		[A].[Number], [A].[Guid], [A].[Code], [A].[ParentGuid], [A].[Note], [A].[LtnName],
		[A].[Name] as [ArName],
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[LtnName],'') <> '') then [A].[LtnName] else [A].[Name] end as [Name]
	From 
		[vbAssetsGroup] [A]


GO
/****** Object:  Table [dbo].[ChangeFlatPrice]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ChangeFlatPrice](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[ParentGuid] [uniqueidentifier] NULL,
	[Date] [datetime] NULL,
	[Price] [float] NULL,
	[CurrencyGuid] [uniqueidentifier] NULL,
	[Kind] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwLastFlatSalesPrice]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwLastFlatSalesPrice]
  
as
	Select 
		[C].[ParentGuid],
		[Price] as [Sale],
		[CurrencyGuid] as [SaleCurrencyGuid]
	From
		[ChangeFlatPrice] [C]
		inner join (
						Select 
								[ParentGuid],
								Max(Date) as [MaxDate],
								Max([Number]) as [MaxNumber]
						From
							[ChangeFlatPrice]
						where
							[Kind] = 1
						Group By
							[ParentGuid]
					) [C2] on [C2].[ParentGuid] = [C].[ParentGuid] 
							and [C].[Date] = [C2].[MaxDate] 
							and (Case when [C].[Date] = [C2].[MaxDate] then [MaxNumber] else [C].[Number] end = [C].[Number])
	where
		[Kind] = 1
							

GO
/****** Object:  Table [dbo].[ChangeBuildingGuard]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ChangeBuildingGuard](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[BuildingGuid] [uniqueidentifier] NULL,
	[GuardGuid] [uniqueidentifier] NULL,
	[Date] [smalldatetime] NULL,
	[Note] [varchar](255) NULL
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwChangeBuildingGuard]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwChangeBuildingGuard]
  
as
	Select
		C.*,
		G.Name
	From
		[ChangeBuildingGuard] [C]
		inner join Building [b] on [b].Guid = [C].[BuildingGuid]
		inner join BuildingGuard [G] on [G].Guid = [C].[GuardGuid]

GO
/****** Object:  View [dbo].[vwLastFlatSalesPrice2]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwLastFlatSalesPrice2]
  
as
	Select 
		[C].[ParentGuid],
		[Price] as [Sale],
		[CurrencyGuid] as [SaleCurrencyGuid]
	From
		[ChangeFlatPrice] [C]
		inner join (
						Select 
								[ParentGuid],
								Max(Date) as [MaxDate],
								Max([Number]) as [MaxNumber]
						From
							[ChangeFlatPrice]
						where
							[Kind] = 2
						Group By
							[ParentGuid]
					) [C2] on [C2].[ParentGuid] = [C].[ParentGuid] 
							and [C].[Date] = [C2].[MaxDate] 
							and (Case when [C].[Date] = [C2].[MaxDate] then [MaxNumber] else [C].[Number] end = [C].[Number])
	where
		[Kind] = 2
							

GO
/****** Object:  View [dbo].[vwBuildingRecElecCounter]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwBuildingRecElecCounter]
  
as
	Select
		E.*,
		[Counter] - oldCounter as Qty,
		b.Name as Building,
		U.LoginName as userName
	From
		[BuildingRecElecCounter] [E]
		inner join Building [b] on [b].Guid = [E].[BuildingGuid]
		inner join Realty_Users [U] on [U].Guid = [E].[UserGuid]

GO
/****** Object:  View [dbo].[vwAssetsArea]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE View [dbo].[vwAssetsArea]
  
as
	Select
		[A].[Number], [A].[Guid], [A].[Code], [A].[ParentGuid], [A].[Note], [A].[LtnName],
		[A].[Name] as [ArName],
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[LtnName],'') <> '') then [A].[LtnName] else [A].[Name] end as [Name]
	From 
		[vbAssetsArea] [A]


GO
/****** Object:  View [dbo].[vwLastFlatSalesPrice3]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwLastFlatSalesPrice3]
  
as
	Select 
		[C].[ParentGuid],
		[Price] as [Sale],
		[CurrencyGuid] as [SaleCurrencyGuid]
	From
		[ChangeFlatPrice] [C]
		inner join (
						Select 
								[ParentGuid],
								Max(Date) as [MaxDate],
								Max([Number]) as [MaxNumber]
						From
							[ChangeFlatPrice]
						where
							[Kind] = 3
						Group By
							[ParentGuid]
					) [C2] on [C2].[ParentGuid] = [C].[ParentGuid] 
							and [C].[Date] = [C2].[MaxDate] 
							and (Case when [C].[Date] = [C2].[MaxDate] then [MaxNumber] else [C].[Number] end = [C].[Number])
	where
		[Kind] = 3
							

GO
/****** Object:  View [dbo].[vwAssets]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE View [dbo].[vwAssets]
  
as

	Select
		[A].[Name] as [ArName],
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[LtnName],'') <> '') then [A].[LtnName] else [A].[Name] end as [Name], 
		A.[Number],A.[Guid],A.[SecLvl],A.[AssetsGroupGuid],
		A.[Code],A.[LtnName],A.[Barcode],A.[IsActive],A.[Note],
		A.[CurrencyGUID],A.[CurrencyVal],A.[AssetsAreaGuid],A.[State],
		A.[Importer],A.[EnterAccountGuid],
		A.[EnterValue],A.[EnterDate],
		A.[Origin],A.[Company],A.[EnterNote],
		A.[AsstesAccountGuid],A.[ExpenseAccountGuid],
		A.[DepreciationAccountGuid],A.[DepreciationTotalAccountGuid],
		A.[ProfitAccountGuid],A.[lossesAccountGuid],
		A.[EvaluationAccountGuid],A.[Shipping],
		A.[ShippingNo],[ShippingDate],A.[ArriveDate],
		A.[ArrivePlace],A.[ImportPermit],A.[CustomsNote],
		A.[CustomsDate],A.[CustomsExpense],A.[ShippingNote],
		A.[MaintenanceContract],A.[MaintenanceBeginDate],A.[MaintenanceEndDate],
		A.[Guaranty],A.[GuarantyBeginDate],A.[GuarantyEndDate],A.[DepreciationMode],
		A.IsDepreciationMonthly,
		Case when A.IsDepreciationMonthly = 0 then dbo.SC('íæãí')	else dbo.SC('ÔåÑí') end as [DepreciationKind],
		A.[DepreciationBeginDate],A.[Age],A.[DepreciationAvg],
		A.[ScrapValue],A.[OldYearExtra],A.[OldYearDecrease],A.[OldYearDepreciation],
		A.[OldYearMaintenance],A.[IsSale],A.[SaleDate],A.[SaleCustomer],
		A.[SalesAccountGuid],A.[SaleValue],A.[CurrencySaleGUID],A.[CurrencySaleVal],
		A.[SaleNote],A.[CurrentAssetsAreaGuid],
		R.Name as CurrentArea,
		G.Name as [AssetsGroup]
	From
		[Assets] A
		inner join [vwAssetsArea] R on R.Guid = A.CurrentAssetsAreaGuid
		inner join [vwAssetsGroup] G on G.Guid = A.AssetsGroupGuid

GO
/****** Object:  Table [dbo].[ChangeFlatRent]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ChangeFlatRent](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[ParentGuid] [uniqueidentifier] NULL,
	[Date] [datetime] NULL,
	[Price] [float] NULL,
	[CurrencyGuid] [uniqueidentifier] NULL
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwLastFlatRentPrice]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwLastFlatRentPrice]
  
as
	Select 
		[C].[ParentGuid],
		[Price] as [Rent],
		[CurrencyGuid] as [RentCurrencyGuid]
	From
		[ChangeFlatRent] [C]
		inner join (
						Select 
								[ParentGuid],
								Max(Date) as [MaxDate],
								Max([Number]) as [MaxNumber]
						From
							[ChangeFlatRent]
						Group By
							[ParentGuid]
					) [C2] on [C2].[ParentGuid] = [C].[ParentGuid] 
							and [C].[Date] = [C2].[MaxDate] 
							and (Case when [C].[Date] = [C2].[MaxDate] then [MaxNumber] else [C].[Number] end = [C].[Number])

GO
/****** Object:  View [dbo].[vwOrderType]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwOrderType]
  
as
	Select
		[A].[Name] as [ArName],
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[LtnName],'') <> '') then [A].[LtnName] else [A].[Name] end as [Name], 
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[LtnMenu],'') <> '') then [A].[LtnMenu] else [A].[Menu] end as [Menu], 
		[A].[Number], 		[A].[Guid], 		[A].[ShortCut], 		[A].[DefStoreGuid], 		[A].[DefCostGuid], 		[A].[BillTypeGuid], 		[A].[CurrencyGuid], 		[A].[CurrencyVal], 		[A].[ChangeBillType], 		[A].[ChangeCurrency], 		[A].[CheckStore], 		[A].[CheckStoreRecipient], 		[A].[RestraintMat], 		[A].[Note], 		[A].[DefUnity]
	From
		[vbOrderType] [A]

GO
/****** Object:  View [dbo].[vwAssetsDepreciation]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwAssetsDepreciation]
  
as
	Select
		A.*,
		
		C.Name as CurrencyName,
		Co1.Code as  CreditCostCode,
		Co1.Name as  CreditCostName,
		Co2.Code as  DebitCostCode,
		Co2.Name as  DebitCostName,
		
		G.Name as AssetsGroupName,
		ast.Name as AssetsName,
		ar.Name as AssetsAreaName
	From
		[AssetsDepreciation] [a]
		inner join vwCurrency [C] on [C].Guid = [a].[CurrencyGUID]
		left join vwCost [Co1] on [Co1].Guid = [a].[CreditCostGUID]
		left join vwCost [Co2] on [Co2].Guid = [a].[DebitCostGUID]

		Left join vwAssetsGroup [G] on [G].Guid = [a].[AssetsGroupGuid]
		Left join vwAssets [ast] on [ast].Guid = [a].[AssetsGuid]
		Left join vwAssetsArea [ar] on [ar].Guid = [a].[AssetsAreaGuid]

GO
/****** Object:  Table [dbo].[ServicesContractDetail]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ServicesContractDetail](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[ParentGuid] [uniqueidentifier] NULL,
	[TypeName] [varchar](255) NULL,
	[Count] [float] NULL,
	[Model] [varchar](255) NULL,
	[WithChangePiece] [bit] NULL,
	[visitCount] [int] NULL,
	[VisitKind] [int] NULL,
	[Note] [varchar](255) NULL
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwServicesContractDetail]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwServicesContractDetail]
  
as
	Select
		[Number],
		[ParentGuid],
		[TypeName],
		[Count],
		[Model],
		[WithChangePiece],
		[visitCount],
		Case when [VisitKind] = 0 then dbo.SC('ÔåÑí') else dbo.SC('Óäæí') end as [StrVisitKind],
		[VisitKind],
		[Note]
	From
		[ServicesContractDetail] [a]

GO
/****** Object:  Table [dbo].[AssetsDepreciationDetail]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AssetsDepreciationDetail](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[ParentGuid] [uniqueidentifier] NULL,
	[AssetsGuid] [uniqueidentifier] NULL,
	[BeginDate] [smalldatetime] NULL,
	[EndDate] [smalldatetime] NULL,
	[AssetsValue] [float] NULL,
	[ScrapValue] [float] NULL,
	[Add] [float] NULL,
	[Decrease] [float] NULL,
	[AssetsCalcValue] [float] NULL,
	[Age] [float] NULL,
	[IsDepreciationMonthly] [int] NULL,
	[DepreciationPercentYear] [float] NULL,
	[OldDepreciation] [float] NULL,
	[DepreciationValue] [float] NULL,
	[NewDepreciation] [float] NULL,
	[NewAssetsValue] [float] NULL,
	[Note] [varchar](256) NULL
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwAssetsDepreciationDetail]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwAssetsDepreciationDetail]
  
as
	Select
		S.code, S.Name ,
		D.*,
		Case when D.IsDepreciationMonthly = 0 then dbo.SC('íæãí')	else dbo.SC('ÔåÑí') end as [DepreciationKind],

		Case 
			when D.IsDepreciationMonthly = 0 then 
			(DATEDIFF(DAY , D.BeginDate , D.EndDate ) )
		else
			(DATEDIFF(Month, D.BeginDate , D.EndDate )) +1
		end	[Period]		
	From
		[AssetsDepreciationDetail] [D]
		inner join Assets [S] on [S].Guid = [D].[AssetsGuid]

GO
/****** Object:  Table [dbo].[ListOrderTypeGroups]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ListOrderTypeGroups](
	[Spid] [int] NULL,
	[GroupGuid] [uniqueidentifier] NULL,
	[OrderTypeGuid] [uniqueidentifier] NULL
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwMatOrder]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create View [dbo].[vwMatOrder]
as
	Select 
		[mt].[Number],
		[Mt].[Code],
		[Mt].[Name],
		Case when T.Defunity = 0 then 
										Case when Mt.Defunity = 1 then [unity1]
											 when Mt.Defunity = 2 then [unity2]
											 when Mt.Defunity = 3 then [unity3]
										end
			 when T.Defunity = 1 then [unity1]
			 when T.Defunity = 2 then 
										Case when [unity2] <> '' then [unity2] else [unity1] end
			 when T.Defunity = 3 then 
										Case when [unity3] <> '' then [unity3] else 
																				Case when [unity2] <> '' then [unity2] else [unity1] end
										end
		end	 as [unitName],
		Case when T.Defunity = 0 then 
										Case when Mt.Defunity = 1 then 1
											 when Mt.Defunity = 2 then 2
											 when Mt.Defunity = 3 then 3
										end
			 when T.Defunity = 1 then 1
			 when T.Defunity = 2 then 
										Case when [unity2] <> '' then 2 else 1 end
			 when T.Defunity = 3 then 
										Case when [unity3] <> '' then 3 else 
																				Case when [unity2] <> '' then 2 else 1 end
										end
		end	 as unit,
		[unityFix2],
		[Mt].[Guid],
		[O].[OrderTypeGuid]
	From
		Mat [mt]
		inner join [ListOrderTypeGroups] [O] on [O].[GroupGuid] = [mt].[GroupGuid] and [Spid] = @@Spid
		inner join [OrderType] T on T.Guid = [O].[OrderTypeGuid]
	--where	
	--	[Mt].[unity1] <> ''

GO
/****** Object:  View [dbo].[vwLeaseApartment_br]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE view [dbo].[vwLeaseApartment_br]
  
as
	Select
		A.*
	from 
		[vbLeaseApartment] [A]
		inner join [vwBuilding] [B] On [A].[BuildingGuid] = [B].[Guid]


GO
/****** Object:  View [dbo].[vbRealty_Users]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbRealty_Users]
	  
	as
		Select 
			[T].*
		From
			[Realty_Users] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  View [dbo].[vwLastFlatContract]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwLastFlatContract]
  
as

	Select 
		[C].[Guid],
		[C].[ApartmentGuid],
		[ContractState],
		[FlatState]
	From
		[vwLeaseApartment] [C]
		inner join (
						Select 
								ApartmentGuid,
								Max([FromDate]) [MaxDate]
						From
							[LeaseApartment]
						Group By
							[ApartmentGuid]
					) [C2] on [C2].[ApartmentGuid] = [C].[ApartmentGuid] 
							and [C].[FromDate] = [C2].[MaxDate] 

GO
/****** Object:  View [dbo].[vwMatUnit]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create View [dbo].[vwMatUnit]
as
	Select 
		[Mt].[Code],
		[Mt].[Name],
		[Mt].[unity1] as UnitName,
		1 as unit,
		1 as [unityFact],
		1 as [unityFix],
		[mt].[GroupGuid],
		[Mt].[Guid]
	From
		Mat [mt]
	where	
		[Mt].[Unity1] <> ''

	union all

	Select 
		[Mt].[Code],
		[Mt].[Name],
		[Mt].[unity2],
		2 as unit,
		[UnityFact2],
		[unityFix2],
		[mt].[GroupGuid],
		[Mt].[Guid]
	From
		Mat [mt]
	where	
		[Mt].[unity2] <> ''
	
	union all 
	Select 
		[Mt].[Code],
		[Mt].[Name],
		[Mt].[unity3],
		3 as unit,
		[UnityFact3],
		[unityFix3],
		[mt].[GroupGuid],
		[Mt].[Guid]
	From
		Mat [mt]
	where	
		[Mt].[unity3] <> ''


GO
/****** Object:  Table [dbo].[ExternalTools]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ExternalTools](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[Name] [varchar](250) NULL,
	[Prog] [varchar](250) NULL,
	[ShortCut] [varchar](250) NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbExternalTools]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbExternalTools]
	  
	as
		Select 
			[T].*
		From
			[ExternalTools] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  Table [dbo].[BillOrder]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BillOrder](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[TypeGuid] [uniqueidentifier] NULL,
	[No] [int] NULL,
	[StoreNo] [int] NULL,
	[Date] [datetime] NULL,
	[CustGuid] [uniqueidentifier] NULL,
	[StoreGuid] [uniqueidentifier] NULL,
	[CostGuid] [uniqueidentifier] NULL,
	[UserGuid] [uniqueidentifier] NULL,
	[CurrencyGuid] [uniqueidentifier] NULL,
	[CurrencyVal] [float] NULL,
	[ExpireDay] [int] NULL,
	[Note] [varchar](256) NULL,
	[CloseOrder] [bit] NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BillOrderDetail]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BillOrderDetail](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[ParentGuid] [uniqueidentifier] NULL,
	[MatGuid] [uniqueidentifier] NULL,
	[unit] [int] NULL,
	[Qty] [float] NULL,
	[Price] [float] NULL,
	[StoreGuid] [uniqueidentifier] NULL,
	[Note] [varchar](256) NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BillOrderRecipient]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BillOrderRecipient](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[Srl] [float] NULL,
	[ParentGuid] [uniqueidentifier] NULL,
	[No] [varchar](256) NULL,
	[UserGuid] [uniqueidentifier] NULL,
	[SaleBillType] [uniqueidentifier] NULL,
	[Date] [datetime] NULL,
	[CurrencyGuid] [uniqueidentifier] NULL,
	[CurrencyVal] [float] NULL,
	[Driver] [varchar](256) NULL,
	[CarNo] [varchar](256) NULL,
	[Note] [varchar](256) NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BillOrderRecipientDetail]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BillOrderRecipientDetail](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[ParentGuid] [uniqueidentifier] NULL,
	[MatGuid] [uniqueidentifier] NULL,
	[StoreGuid] [uniqueidentifier] NULL,
	[Qty] [float] NULL,
	[Qty2] [float] NULL,
	[Qty3] [float] NULL,
	[Price] [float] NULL,
	[ClassPtr] [varchar](256) NULL,
	[Note] [varchar](256) NULL
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwBillOrderDetailFull]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create View [dbo].[vwBillOrderDetailFull]
as
	Select 
		O.No,
		T.Name as TypeName,
		O.StoreNo,
		O.Number,
		O.ExpireDay,
		O.Date,
		O.Note,
		[St].[code]+'-'+[St].[name] as [Store],
		Cu.[Name] as [Cust],
		Cu.Address as CustAddress,
		Cu.Mobile as CustPhone1,
		Cu.PhoneJob as CustPhone2,
		Cu.Mobile as CustMobile,
		Gr.Name as GroupName,
		D.Qty,
		
		Case when [D].[unit] = 1 then [R].[Qty1]
			 when [D].[unit] = 2 then [R].[Qty2]
		end as [QtyRecipient],
		
		D.Price,
		My.Name as Currency,
		
		[mt].[unitName],
		[mt].[code]+'-'+[mt].[name] as [Mat],
		[D].Note as ItemNote,
		D.Number as ItemNumber,
		u.LoginName as [User],
		O.StoreGuid,
		O.Guid as [OrderGuid]
	From
		[BillOrder] O
		inner join OrderType T on T.Guid = O.TypeGuid
		inner join [BillOrderDetail] [D] on O.Guid = D.ParentGuid
		left join Currency My on my.GUID = O.CurrencyGuid
		left join [customer] Cu on Cu.GUID = O.CustGuid
		inner join [vwMatUnit] [mt] on [mt].[Guid] = [D].[matGuid] and [D].[unit] = [mt].[unit]
		inner join [MatGroup] Gr on Gr.GUID = mt.GROUPGUID
		inner join [store] [st] On [St].[Guid] = [o].[StoreGuid]
		left join Realty_Users U on u.Guid = o.UserGuid
		left join (
						Select 
							[O].[ParentGuid] as [OrderGuid],
							[D].[MatGuid],
							Sum([Qty]) as [Qty1],
							Sum([Qty2]) as [Qty2]
						From 
							[BillOrderRecipient] [O]
							inner join [BillOrderRecipientDetail] [D] On [D].[ParentGuid] = [O].[Guid]
						--where
						--	([O].[ParentGuid] = @OrderGuid)
						Group By
							[O].[ParentGuid],
							[D].[MatGuid]		
					) R on R.OrderGuid = O.Guid and d.MatGuid = R.MatGuid

GO
/****** Object:  Table [dbo].[TblShortCut]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TblShortCut](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[ItemName] [varchar](256) NULL,
	[ItemIndex] [int] NULL,
	[Kind] [int] NULL,
	[Text] [varchar](4000) NULL,
	[ShortCut] [varchar](30) NULL,
	[UserGuid] [uniqueidentifier] NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbTblShortCut]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbTblShortCut]
	  
	as
		Select 
			[T].*
		From
			[TblShortCut] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  View [dbo].[vwApartmentFull]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE View [dbo].[vwApartmentFull]
  
as

	Select
		[A].[Number], [A].[Guid], [A].[SecLvl],  [A].[BuildingGuid], [A].[FloorNo], [A].[Area], [A].[unity], [A].[ApartmentType], [A].[FlatKind], [A].[CostPrice], [A].[CostCurrencyGUID], [A].[Note], [A].[CostGuid], [A].[FlatOwner], [A].[CustGuid], [A].[Details], [A].[OfferState], [A].[OfferType], [A].[CustomerName], [A].[CustomerPhone], [A].[Restrained], [A].[PurchaseDate], [A].[PayValue], [A].[BathroomCount], [A].[BalconyCount], [A].[WaterCounter], [A].[ElectricityCounter], [A].[RestrainedUserGuid], [A].[Class], [A].[CardKind], [A].[Overlooking], [A].[Judicial],
		[A].[LtnFlatKind],[A].[LtnApartmentType],[A].[LtnClass],[A].[LtnOverlooking] ,
		[B].[BuildingCode]+[A].[NO] as [NO],
		[A].[Rent],
		[A].[RentCurrencyGuid],
		[S].[Sale],
		[S].[SaleCurrencyGuid],
		[B].[Name] as [BuildingName],
		[B].[Emirate],
		[B].[Area] as [BuildingArea],
		[B].[Suburb],
		[B].[Street],
		[B].[BuildingNo],
		[B].[PieceNo],
		[B].[BasinNo],
		Isnull([My].[CurrencyVal],1) as [CostCurrnecyVal],
		[B].[OpOwner] as [BuildingOpOwner],
		[B].[OwnerName] as [BuildingOwnerName],
		[B].[AccountCommIncomeGuid],
		[B].[AcCommissionFromOwnerGuid],
		[B].[CommissionPercent] as [BuildingCommissionPercent]

		,[L].[Guid] as [LastContractGuid]
		,[L].[ContractState]
		,[L].[FlatState]
	From
		[vbApartment] [A]
		inner join [vwBuilding] [B] On [B].[Guid] = [A].[BuildingGuid]
		left join [vwLastFlatSalesPrice] [S] on [S].[ParentGuid] = [A].[Guid]
		left join [Currency] [My] on [My].[Guid] = [A].[CostCurrencyGuid]
  		left join [vwLastFlatContract] [L] on [L].[ApartmentGuid] = [A].[Guid]

GO
/****** Object:  Table [dbo].[BillOrderRecipientDiscountExtra]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BillOrderRecipientDiscountExtra](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[ParentGuid] [uniqueidentifier] NULL,
	[AccountGUID] [uniqueidentifier] NULL,
	[Discount] [float] NULL,
	[Extra] [float] NULL,
	[CostGUID] [uniqueidentifier] NULL,
	[ContraAccGUID] [uniqueidentifier] NULL,
	[Notes] [varchar](250) NULL
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwBillOrderRecipientDiscountExtra]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create View [dbo].[vwBillOrderRecipientDiscountExtra]
as
	Select
		[D].*,
		[Ac].[Code]+'-'+[Ac].[Name] as [Account],
		[Ac2].[Code]+'-'+[Ac2].[Name] as [ContraAcc],
		[Co].[Code]+'-'+[Co].[Name] as [Cost]
	From
		BillOrderRecipientDiscountExtra [D]
		inner join [Account] [Ac] On [D].[AccountGuid] = [Ac].[Guid]
		left join [Account] [Ac2] On [D].[ContraAccGuid] = [Ac2].[Guid]
		left join [Cost] [Co] On [D].[CostGuid] = [Co].[Guid]

GO
/****** Object:  View [dbo].[vwCustBuilding]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwCustBuilding]
  
as
	Select Distinct
		Cu.Barcode,
		Cu.Name,
		Cu.Mobile,
		Cu.Nationality,
		Cu.Guid,
		[L].BuildingGuid
	From
		Customer Cu
		inner join [LeaseApartment] [L] on [Cu].Guid = [L].CustomerGuid
		inner join Building [b] on [b].Guid = [L].BuildingGuid

GO
/****** Object:  View [dbo].[vwBillOrderDetail]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create View [dbo].[vwBillOrderDetail]
as
	Select 
		[D].*,
		[mt].[code]+'-'+[mt].[name] as [Mat],
		[St].[code]+'-'+[St].[name] as [Store],
		[mt].[unitName],
		[mt].[GroupGuid] as [MatGroupGuid]
	From
		[BillOrderDetail] [D]
		inner join [vwMatUnit] [mt] on [mt].[Guid] = [D].[matGuid] and [D].[unit] = [mt].[unit]
		inner join [store] [st] On [St].[Guid] = [D].[StoreGuid]

GO
/****** Object:  View [dbo].[vbSecondary_Entry]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbSecondary_Entry]
	  
	as
		Select 
			[T].*
		From
			[Secondary_Entry] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  View [dbo].[vwAllShortCut]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwAllShortCut]
  
as
	Select 
		[Guid], [Shortcut],'ÇáÃÏæÇÊ ÇáÎÇÑÌíÉ' as [Name], 0x0 as UserGuid
	From
		[ExternalTools]
	where
		[Shortcut] <> ''

	union all
	Select 
		[Guid], [Shortcut],'ÇáÅÎÊÕÇÑÇÊ' as [Name], UserGuid
	From
		[TblShortCut]
	where
		[Shortcut] <> ''

	union all
	Select 
		[Guid], [Shortcut],'ÃäãÇØ ÇáÓäÏÇÊ' as [Name], 0x0 as UserGuid
	From
		[EntryType]
	where
		[Shortcut] <> ''

	union all
	Select 
		[Guid], [Shortcut],'ÃäãÇØ ÇáÚÞæÏ' as [Name], 0x0 as UserGuid
	From
		[ContractType]
	where
		[Shortcut] <> ''

	union all
	Select 
		[Guid], [Shortcut],'ÃäãÇ ÇáÔíßÇÊ' as [Name], 0x0 as UserGuid
	From
		[CheckType]
	where
		[Shortcut] <> ''

	union all
	Select 
		[Guid], [Shortcut],'ÃäãÇØ ÝæÇÊíÑ ÇáßåÑÈÇÁ' as [Name], 0x0 as UserGuid
	From
		[ElectricityType]
	where
		[Shortcut] <> ''
		
	union all
	Select 
		[Guid], [Shortcut],'ÃäãÇØ ÃæÇãÑ ÇáÞÈÖ' as [Name], 0x0 as UserGuid
	From
		[ReceiptOrderType]
	where
		[Shortcut] <> ''
	


GO
/****** Object:  View [dbo].[AllAccount]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE View [dbo].[AllAccount]
  
as
	Select
		[Number], [Guid], [Code], [ParentGuid], [Note], 
		[CDate], [NSons], [CurrencyGUID], [CurrencyVal], 
		[Type], [FinalGUID], [LtnName],[Name]
		,case when [ParentGuid] is Not Null then [ParentGuid] else 0x0 end as [Parent]
		--,(Select Top 1 [ParentGuid] From [Dentry] [D] where [D].[AcGuid] = [Ac].[Guid]) as [ENGuid]
	From 
		[vwAccount] [Ac]
	where 
		([Type] = 0 or [Type] = 2)


GO
/****** Object:  View [dbo].[FinalAccount]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE View [dbo].[FinalAccount]
  
as
	Select
		*
	From 
		[vwAccount]
	where 
		([Type] = 1)


GO
/****** Object:  Table [dbo].[Salesman]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Salesman](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[Name] [varchar](256) NULL,
	[LtnName] [varchar](256) NULL,
	[WorkCardNo] [varchar](256) NULL,
	[Nationality] [varchar](256) NULL,
	[LtnNationality] [varchar](256) NULL,
	[PersonalityNo] [varchar](256) NULL,
	[PassportNo] [varchar](256) NULL,
	[Address] [varchar](256) NULL,
	[Phone] [varchar](256) NULL,
	[Mobile] [varchar](256) NULL,
	[Fax] [varchar](256) NULL,
	[BoxNo] [varchar](256) NULL,
	[EMail] [varchar](256) NULL,
	[Commissionlimit] [float] NULL,
	[DiscountPercent] [float] NULL,
	[AccountGuid] [uniqueidentifier] NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbSalesman]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbSalesman]
	  
	as
		Select 
			[T].*
		From
			[Salesman] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  View [dbo].[vbParkingContract]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbParkingContract]
	  
	as
		Select 
			[T].*
		From
			[ParkingContract] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  View [dbo].[vwMovingStore]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE View [dbo].[vwMovingStore]
  
as
	Select
		S.*
	From 
		[vwStore] S
		left join [Store] [S2] on [S2].[ParentGuid]  = [S].[Guid]
	where 
		([S2].[Guid] is Null)


GO
/****** Object:  View [dbo].[vwFlatPrint]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwFlatPrint]
  
as
	Select
		[F].[Number] as [Number], 		[F].[Guid] as [Guid], 		[F].[SecLvl] as [SecLvl], 		[F].[CardKind] as [CardKind], 		[F].[Judicial] as [Judicial], 		[F].[Ban] as [Ban], 		[F].[NO] as [NO], 		[B].[Name] as [Building], 		[F].[FloorNo] as [FloorNo], 		[F].[Area] as [Area], 		[F].[unity] as [unity], 		[F].[ApartmentType] as [ApartmentType], 		[F].[FlatKind] as [FlatKind], 		[F].[Class] as [Class], 		[F].[Overlooking] as [Overlooking], 		[F].[CostPrice] as [CostPrice], 		[F].[CostCurrencyGUID] as [CostCurrencyGUID], 		[F].[Note] as [Note], 		[Co].[Name] as [Cost], 		[F].[FlatOwner] as [FlatOwner], 		[F].[Details] as [Details], 		[F].[OfferState] as [OfferState], 		[F].[OfferType] as [OfferType], 		[F].[CustomerName] as [CustomerName], 		[F].[CustomerPhone] as [CustomerPhone], 		[F].[Restrained] as [Restrained], 		[F].[PayValue] as [PayValue], 		[F].[BathroomCount] as [BathroomCount], 		[F].[BalconyCount] as [BalconyCount], 		[F].[WaterCounter] as [WaterCounter], 		[F].[ElectricityCounter] as [ElectricityCounter], 		[F].[RestrainedUserGuid] as [RestrainedUserGuid], 		[F].[PurchaseDate] as [PurchaseDate], 		[Cu1].[Name] as [Cust], 		[F].[LastContractGUID] as [LastContractGUID], 		[F].[LtnFlatKind] as [LtnFlatKind], 		[F].[LtnApartmentType] as [LtnApartmentType], 		[F].[LtnClass] as [LtnClass], 		[F].[LtnOverlooking] as [LtnOverlooking], 		[Cu2].[Name] as [CustOwner]
	From
		[Apartment] [F]
		inner join vwBuilding [b] on [b].Guid = [F].[BuildingGuid]
		left join Cost [Co] on [Co].Guid = [F].[CostGuid]
		left join Customer [Cu1] on [Cu1].Guid = [F].[CustGuid]
		left join Customer [Cu2] on [Cu2].Guid = [F].[CustOwnerGuid]

GO
/****** Object:  View [dbo].[vbChangeCurrencyRate]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbChangeCurrencyRate]
	  
	as
		Select 
			[T].*
		From
			[ChangeCurrencyRate] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  View [dbo].[vwShopPrint]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwShopPrint]
  
as
	Select
		[S].[Number] as [Number], 		[S].[Guid] as [Guid], 		[S].[SecLvl] as [SecLvl], 		[S].[NO] as [NO], 		[S].[Judicial] as [Judicial], 		[S].[Ban] as [Ban], 		[B].[Name] as [Building], 		[S].[Area] as [Area], 		[S].[Unity] as [Unity], 		[S].[ShopKind] as [ShopKind], 		[S].[Description] as [Description], 		[S].[Overlooking] as [Overlooking], 		[S].[CostPrice] as [CostPrice], 		[S].[CostCurrencyGUID] as [CostCurrencyGUID], 		[S].[Rent] as [Rent], 		[S].[RentCurrencyGUID] as [RentCurrencyGUID], 		[S].[Sale] as [Sale], 		[S].[SaleCurrencyGUID] as [SaleCurrencyGUID], 		[S].[Note] as [Note], 		[Co].[Name] as [Cost], 		[S].[FlatOwner] as [FlatOwner], 		[Cu].[Name] as [Cust], 		[S].[Details] as [Details], 		[S].[OfferState] as [OfferState], 		[S].[OfferType] as [OfferType], 		[S].[Restrained] as [Restrained], 		[S].[RestrainedUserGuid] as [RestrainedUserGuid], 		[S].[WaterCounter] as [WaterCounter], 		[S].[ElectricityCounter] as [ElectricityCounter], 		[S].[LtnShopKind] as [LtnShopKind], 		[S].[LtnDescription] as [LtnDescription], 		[S].[LtnOverlooking] as [LtnOverlooking], 		[S].[Class] as [Class], 		[S].[License1] as [License1], 		[S].[License2] as [License2]
	From
		[Shop] [S]
		inner join vwBuilding [b] on [b].Guid = [S].[BuildingGuid]
		left join vwCost [Co] on [Co].Guid = [S].[CostGuid]
		left join vwCustomer [Cu] on [Cu].Guid = [S].[CustGuid]

GO
/****** Object:  View [dbo].[vwParkingPrint]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwParkingPrint]
  
as
	Select
		[P].[Number] as [Number], 		[P].[Guid] as [Guid], 		[P].[SecLvl] as [SecLvl], 		[P].[NO] as [NO], 		[P].[Judicial] as [Judicial], 		[P].[Ban] as [Ban], 		[B].[Name] as [Building], 		[P].[FloorNo] as [FloorNo], 		[P].[Area] as [Area], 		[P].[unity] as [unity], 		[P].[Note] as [Note], 		[P].[ParkingKind] as [ParkingKind], 		[P].[Description] as [Description], 		[P].[Overlooking] as [Overlooking], 		[P].[CostPrice] as [CostPrice], 		[P].[CostCurrencyGUID] as [CostCurrencyGUID], 		[P].[Rent] as [Rent], 		[P].[RentCurrencyGUID] as [RentCurrencyGUID], 		[P].[Sale] as [Sale], 		[P].[SaleCurrencyGUID] as [SaleCurrencyGUID], 		[Co].[Name] as [Cost], 		[P].[FlatOwner] as [FlatOwner], 		[Cu].[Name] as [Cust], 		[P].[Details] as [Details], 		[P].[OfferState] as [OfferState], 		[P].[OfferType] as [OfferType], 		[P].[CustomerName] as [CustomerName], 		[P].[CustomerPhone] as [CustomerPhone], 		[P].[Restrained] as [Restrained], 		[P].[PurchaseDate] as [PurchaseDate], 		[P].[PayValue] as [PayValue], 		[P].[RestrainedUserGuid] as [RestrainedUserGuid]
	From
		[Parking] [P]
		inner join vwBuilding [b] on [b].Guid = [P].[BuildingGuid]
		Left join vwCost [Co] on [Co].Guid = [P].[CostGuid]
		Left join vwCustomer [Cu] on [Cu].Guid = [P].[CustGuid]

GO
/****** Object:  View [dbo].[vwVillaPrint]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwVillaPrint]
  
as
	Select
		[V].[Number] as [Number], 		[V].[Guid] as [Guid], 		[V].[SecLvl] as [SecLvl], 		[V].[Ban] as [Ban], 		[V].[WaterCounter] as [WaterCounter], 		[V].[ElectricityCounter] as [ElectricityCounter], 		[V].[ComplexName] as [ComplexName], 		[V].[Emirate] as [Emirate], 		[V].[Area] as [Area], 		[V].[unity] as [unity], 		[V].[Street] as [Street], 		[V].[Suburb] as [Suburb], 		[V].[PieceNo] as [PieceNo], 		[V].[BasinNo] as [BasinNo], 		[V].[VillaNo] as [VillaNo], 		[V].[DocType] as [DocType], 		[V].[DocNo] as [DocNo], 		[V].[DocDate] as [DocDate], 		[ac].[Name] as [VillaAccount], 		[Cu].[Name] as [CuOwner], 		[Co].[Name] as [Cost], 		[Ac2].[Name] as [AccountBankVilla], 		[R].[Name] as [RentInfo], 		[V].[BranchGuid] as [BranchGuid], 		[V].[FloorCount] as [FloorCount], 		[V].[BalconyCount] as [BalconyCount], 		[V].[RoomCount] as [RoomCount], 		[V].[OtherRoomCount] as [OtherRoomCount], 		[V].[ServiceRoomCount] as [ServiceRoomCount], 		[V].[BathroomCount] as [BathroomCount], 		[V].[StairsInternal] as [StairsInternal], 		[V].[RoomState] as [RoomState], 		[V].[LandArea] as [LandArea], 		[V].[LandAreaBuilding] as [LandAreaBuilding], 		[V].[FinishingState] as [FinishingState], 		[V].[SecurityType] as [SecurityType], 		[V].[SecuritySystem] as [SecuritySystem], 		[V].[wall] as [wall], 		[V].[wallState] as [wallState], 		[V].[lightingCount] as [lightingCount], 		[V].[ParkingCount] as [ParkingCount], 		[V].[ParkingArea] as [ParkingArea], 		[V].[ParkingShaded] as [ParkingShaded], 		[V].[PoolCount] as [PoolCount], 		[V].[PoolState] as [PoolState], 		[V].[PoolSystem] as [PoolSystem], 		[V].[PlaygroundCount] as [PlaygroundCount], 		[V].[PlaygroundArea] as [PlaygroundArea], 		[V].[GardenCount] as [GardenCount], 		[V].[GardenArea] as [GardenArea], 		[V].[GardenState] as [GardenState], 		[V].[OfferType] as [OfferType], 		[V].[OfferState] as [OfferState], 		[V].[Restrained] as [Restrained], 		[V].[RestrainedUserGuid] as [RestrainedUserGuid], 		[V].[CustomerName] as [CustomerName], 		[V].[CustomerPhone] as [CustomerPhone], 		[V].[Details] as [Details], 		[V].[LtnArea] as [LtnArea], 		[V].[LtnEmirate] as [LtnEmirate], 		[V].[LtnSuburb] as [LtnSuburb], 		[V].[LtnStreet] as [LtnStreet], 		[V].[LtnDocType] as [LtnDocType], 		[V].[VillaOwner] as [VillaOwner]
	From
		[Villa] [v]
		left join vwAccount [Ac] on [ac].Guid = [v].[VillaAccountGuid]
		left join vwCustomer [Cu] on [cu].Guid = [v].[CuOwnerGuid]
		left join vwCost [Co] on [Co].Guid = [v].[CostGuid]
		left join vwAccount [Ac2] on [Ac2].Guid = [v].[AccountBankVillaGuid]
		left join RentInfo [R] on [R].Guid = [v].[RentInfoGuid]

GO
/****** Object:  View [dbo].[vwLandPrint]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwLandPrint]
  
as
	Select
		[L].[Number] as [Number], 		[L].[Guid] as [Guid], 		[L].[SecLvl] as [SecLvl], 		[L].[No] as [No], 		[L].[Ban] as [Ban], 		[L].[EarthNo] as [EarthNo], 		[L].[Name] as [Name], 		[L].[ltnName] as [ltnName], 		[Cu].[Name] as [Customer], 		[L].[Date] as [Date], 		[L].[City] as [City], 		[L].[Region] as [Region], 		[L].[Space] as [Space], 		[L].[Area] as [Area], 		[L].[Unity] as [Unity], 		[L].[Price] as [Price], 		[L].[licenseNo] as [licenseNo], 		[L].[license] as [license], 		[L].[licenseDate] as [licenseDate], 		[L].[Details] as [Details], 		[L].[LandType] as [LandType], 		[L].[Side] as [Side], 		[L].[StreetName] as [StreetName], 		[L].[StreetCount] as [StreetCount], 		[L].[Buildble] as [Buildble], 		[L].[LandOwner] as [LandOwner], 		[L].[BeginLandValue] as [BeginLandValue], 		[L].[CurrencyBeginLandGuid] as [CurrencyBeginLandGuid], 		[L].[CurrencyValBeginLand] as [CurrencyValBeginLand], 		[L].[CurrencyPurchaseGuid] as [CurrencyPurchaseGuid], 		[L].[CurrencyValPurchase] as [CurrencyValPurchase], 		[L].[PurchaseNote] as [PurchaseNote], 		[Ac].[Name] as [Account], 		[Cu2].[Name] as [CuOwner], 		[Co2].[Name] as [Cost], 		[ac2].[Name] as [BankAccount], 		[L].[CommissionPercent] as [CommissionPercent], 		[ac3].[Name] as [AccountCommIncome], 		[L].[UsedEndDate] as [UsedEndDate], 		[cu3].[Name] as [CustomerOwner], 		[ac4].[Name] as [OwnerAccount], 		[L].[IdentityValue] as [IdentityValue], 		[L].[CurrencyIdentityGUID] as [CurrencyIdentityGUID], 		[L].[CurrencyValIdentity] as [CurrencyValIdentity], 		[L].[IdentityBeginDate] as [IdentityBeginDate], 		[L].[IdentityEndDate] as [IdentityEndDate], 		[L].[CrearteEntryInvestment] as [CrearteEntryInvestment], 		[L].[IdentityEntryGuid] as [IdentityEntryGuid], 		[L].[IdentityNote] as [IdentityNote], 		[L].[LtnLandType] as [LtnLandType], 		[L].[LtnCity] as [LtnCity], 		[L].[LtnRegion] as [LtnRegion], 		[L].[LtnSpace] as [LtnSpace], 		[L].[Ltnlicense] as [Ltnlicense], 		[L].[Ltnside] as [Ltnside]
	From
		[earth] [L]
		Left join vwCustomer [Cu] on [Cu].Guid = [L].[CustomerGuid]
		Left join Account [ac] on [ac].Guid = [L].[AccountGuid]
		Left join vwCustomer [Cu2] on [Cu2].Guid = [L].[CuOwnerGuid]
		Left join vwCost [Co2] on [Co2].Guid = [L].[CostGuid]
		Left join vwAccount [ac2] on [ac2].Guid = [L].[BankAccountGuid]
		Left join vwAccount [ac3] on [ac3].Guid = [L].[AccountCommIncomeGuid]
		Left join vwCustomer [cu3] on [cu3].Guid = [L].[CustomerOwnerGuid]
		Left join vwAccount [ac4] on [ac4].Guid = [L].[OwnerAccountGuid]

GO
/****** Object:  View [dbo].[vbContractType]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbContractType]
	  
	as
		Select 
			[T].*
		From
			[ContractType] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  View [dbo].[vwCustMail]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE view [dbo].[vwCustMail]
 
as
	SELECT
		[Guid],
		[Barcode],
		[Name] as [ArName],
		[LtnName],
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([LtnName],'') <> '') then [LtnName] else [Name] end as [Name],  
		[Nationality], 
		[PhoneJob], 
		[Mobile], 
		[Note], 
		[Address],
		[BoxNo],
		[Fax],
		[EMail]	,
		Case when CardKind2 = 1 then DBO.SC('ÝÑÏ') else DBO.SC('ÔÑßÉ') end as [CardKind2_Str]
	FROM 
		[vbCustomer]
	where
		EMail <> ''

GO
/****** Object:  Table [dbo].[wallet]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[wallet](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[Code] [nvarchar](256) NULL,
	[Name] [nvarchar](256) NULL,
	[LtnName] [nvarchar](256) NULL,
	[CurrencyGUID] [uniqueidentifier] NULL,
	[CurrencyVal] [float] NULL,
	[Note] [nvarchar](256) NULL,
	[BranchGuid] [uniqueidentifier] NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbwallet]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbwallet]
	  
	as
		Select 
			[T].*
		From
			[wallet] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  View [dbo].[vbElectricityBill]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbElectricityBill]
	  
	as
		Select 
			[T].*
		From
			[ElectricityBill] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  Table [dbo].[EntryDate]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[EntryDate](
	[Guid] [uniqueidentifier] NOT NULL,
	[Number] [int] NOT NULL IDENTITY(1,1),
	[SecLvl] [int] NULL,
	[TypeGuid] [uniqueidentifier] NULL,
	[Kind] [int] NULL,
	[Mark] [bit] NULL,
	[AccountGuid] [uniqueidentifier] NULL,
	[Date] [datetime] NULL,
	[Note] [varchar](256) NULL,
	[CurrencyGuid] [uniqueidentifier] NULL,
	[CurrencyVal] [float] NULL,
	[UserGuid] [uniqueidentifier] NULL,
	[BranchGuid] [uniqueidentifier] NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbEntryDate]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbEntryDate]
	  
	as
		Select 
			[T].*
		From
			[EntryDate] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  View [dbo].[vwCostUsed]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwCostUsed]
  
as
	Select
		[C].[Number], 
		[C].[Guid], 
		[C].[Code], 
		[C].[LtnName], 
		[C].[ParentGUID], 
		[C].[Note],
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([C].[LtnName],'') <> '') then [C].[LtnName] else [C].[Name] end as [Name],

		U.[usedCard]
	From
		[vbCost] [C]
		left join (
					Select Distinct
						C.Guid,
						Case 
							when [S].[Guid] is Not Null then 1 
							when [P].[Guid] is Not Null then 2
							when [G].[Guid] is Not Null then 3
						else
							0
						end as [usedCard]
					From
						Cost C
						left join [Shop] [S] on [S].[CostGuid] = [C].[Guid]
						left join [Apartment] [P] on [P].[CostGuid] = [C].[Guid]
						left join [Parking] [G] on [G].[CostGuid] = [C].[Guid]
					) U on U.Guid = C.Guid


GO
/****** Object:  View [dbo].[vwOldYearEntry]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	Create view [dbo].[vwOldYearEntry]
	as
	Select
		cast( DB_NAME() as Varchar(256) ) as DBNAME,
		[H].[Guid] as [H_Guid],
		[H].[Number] as [H_Number],
		[H].[SecLvl] as [H_SecLvl],
		[H].[Date] as [H_Date]  ,
		[H].[Note] COLLATE SQL_Latin1_General_CP1_CI_AS as [H_Note],
		[H].[ParentKind] as [H_ParentKind],
		[H].[BranchGuid] as [H_BranchGuid],
		[H].[IsPosted] as [H_IsPosted],
		Case when (dbo.FnGetLangauge(@@spid) = 1) then 'Entry' else '??I C???I' end as [H_Name],
		[D].[Guid]  as [D_Guid],
		[D].[ParentGuid] as [D_ParentGuid],
		[D].[AcGuid] as [D_AcGuid] ,
		[D].[Debit] as [D_Debit] ,
		[D].[Credit] as [D_Credit] ,
		[D].[CurrencyGuid] as [D_CurrencyGuid] ,
		[D].[CurrencyVal] as [D_CurrencyVal],
		[D].[ObverseAcGuid] as [D_ObverseAcGuid]  ,
		[D].[CostGuid] as [D_CostGuid] ,
		[D].[Note] COLLATE SQL_Latin1_General_CP1_CI_AS as [D_Note],
		[D].[IsVisible] as [D_IsVisible],
		H.Mark,
		0 as [IsOldEntry]
	From
		[vbHEntry] H
		inner join [DEntry] D on H.Guid = D.ParentGuid
GO
/****** Object:  View [dbo].[vbChecksPartialCollection]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbChecksPartialCollection]
	  
	as
		Select 
			[T].*
		From
			[ChecksPartialCollection] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  View [dbo].[vwFlatContractBrief]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE view [dbo].[vwFlatContractBrief]
  
as
	Select 
		[TypeGuid],
		[EditDate],
		[Mark],
		[ContractNo],
		[T].[Name] as [TypeName],
		[T].[Name]+ ' / ' + Cast([A].[Number] as Varchar(10)) as [ArLeaseKind],
		[B].[Name] as [BuildingName],
		[B].[ArName] as [BuildingArName],
		[B].[LtnName] as [BuildingLtnName],

		[B].[Name] +' '+
		Case when [T].[ContractKind] = 0 then 'ÇíÌÇÑ ÔÞÉ'
			 when [T].[ContractKind] = 1 then 'ÇíÌÇÑ ãÍá'
			 when [T].[ContractKind] = 2 then 'ÈíÚ ÔÞÉ'
			 when [T].[ContractKind] = 3 then 'ÈíÚ ãÍá' end
		+' /'+
		Case when Isnull([P].[Guid],0x0) <> 0x0 then isNull([B].[BuildingCode],'') + Isnull([P].[No],P.Number ) 
			 when Isnull([S].[Guid],0x0) <> 0x0 then Isnull([S].[No],S.Number ) 
		 end +'/' 
		as [ApartmentNo],
		[B].[BuildingCode],
		Case when Isnull([P].[No],'') <> '' then [B].[BuildingCode]+[P].[No]
			 when Isnull([S].[No],'') <> '' then [S].[No]
		 end as [FlatNo],
		[P].[FlatKind],
		[T].[ContractKind],
		[T].[ContractKind] as [Leasekind],
		[T].[Name] + Cast([A].[Number] as Varchar(10))  as [Contract], 

		isnull([P].[Guid],0x0) as [ApartmentGuid],
		isnull([S].[Guid],0x0) as [ShopGuid],
		Case when isnull([P].[Guid],0x0) <> 0x0 then [P].[FlatOwner] else [S].[FlatOwner] end as [FlatOwner],
		[Cu].[Name] as [CustName],
		[Cu].[ArName] as [CustArName],
		[Cu].[LtnName] as [CustLtnName],
		[Cu].[Phonejob] as [CustomerPhonejob],
		[Cu].[Mobile] as [CustomerMobile],
		[A].[BuildingGuid],
		[A].[SalesManGuid],
		[A].[Guid],
		[A].[Number],
		[A].[CustomerGuid],
		[A].[ApartmentType],
		[A].[FromDate],
		[A].[ToDate],
		[A].[Rent],
		[A].[RentContractType],
		[A].[MonthlyValue],
		[A].[CurrencyGuid],
		[A].[CurrencyVal],
		[A].[PayType],
		[A].[Note],
		[A].[Note2],
		[A].[Purpose],
		[A].[RevenueAccountGuid],
		[A].[CustAccountGuid],
		[A].[CommissionFromCustPercent],
		[A].[CommissionFromCustValue],
		[A].[AcCommissionFromCustGuid],
		[A].[CommissionFromOwnerPercent],
		[A].[CommissionFromOwnerValue],
		[A].[AcCommissionFromOwnerGuid],
		[A].[ContractFinish],
		[A].[ContractFinishDate],
		[A].[ResultingAmount],
		[A].[Fine],
		[A].[FineAccount],
		[A].[CreateResultingEntry],
		[A].[InsuranceValue],
		[A].[InsuranceValueOld],
		[A].[ContractPrice],
		[A].[AccountContractPrice],
		[A].[CertificatValue],
		[A].[AccountCertificatValue],
		[A].[RentDuration],
		[A].[Rentype],
		[A].[TermsOfPayment],
		[A].[Seclvl],
		[A].[RentInfoGuid],
		[A].[Step1Complete],
		[A].[Step2Complete],
		[A].[Step3Complete],
		[A].[Step4Complete],
		[A].[Step5Complete],
		[A].[Certification],
		[A].[ElectricityInsurance],
		[A].[ResidentCount],
		[A].[CreateContractEntry],
		[A].[Whereabouts],		
		[A].[DiscountPercent],
		[A].[DiscountValue],
		[A].[Rent] - [A].[DiscountValue] as [RentAfterDiscount],	
		[A].[DiscountAccountGuid],
		[Cr].[Code] as [CurrencyName],
		[A].[BranchGuid],
		[A].[ResultingAmount2],
		[A].[RoundKind],

		Case 
			when ([T].[ContractKind] = 0) or ([T].[ContractKind] = 1) then 
				Case 
					when 
						Case when [ContractFinish] = 0 then [ToDate] else [ContractFinishDate] end 
						<= GetDate() then --ãäÊåí ÇáãÏÉ
											Case when [ContractFinish] = 0 then dbo.SC('ãäÊåí ÇáãÏÉ æáã íÊã ÅäåÇÁ ÇáÚÞÏ') 
											else
											dbo.SC('ãäÊåí ÇáãÏÉ æÊã ÅäåÇÁ ÇáÚÞÏ') end
					when 
						Case when [ContractFinish] = 0 then [ToDate] else [ContractFinishDate] end 
						> GetDate() then dbo.SC('ÛíÑ ãäÊåí') 
				end
			when ([T].[ContractKind] = 2) or ([T].[ContractKind] = 3) then dbo.SC('ÈíÚ')
				
		end as [ContractState],

		Case 
			when ([T].[ContractKind] = 0) or ([T].[ContractKind] = 1) then 
				Case 
					when [ContractFinish] = 0 then dbo.SC('ãÔÛæáÉ') 
					else
					Case 
							when 
								exists(Select 
									Guid
								From 
										LeaseApartment [Q] 
								where 
									[T].[ContractKind] = [T].[ContractKind]
									and [Q].[CustomerGuid] = [A].[CustomerGuid]
									and [Q].[ApartmentGuid] = [A].[ApartmentGuid]
									and [Q].[FromDate] >= [A].[ContractFinishDate]
									and [Q].[Guid] <> [A].[Guid]
								)  then dbo.SC('Êã ÇáÊÌÏíÏ') 
					else
						dbo.SC('Êã ÇáÅÎáÇÁ') 
					end
				end
			when ([T].[ContractKind] = 2) or ([T].[ContractKind] = 3) then ''
		end as [FlatState],
		[A].[Period],
		[p].[FloorNo],

		[B].[Emirate],
		[B].[Area] as [BuildingArea],
		[B].[Suburb],
		[B].[Street],
		[B].[BasinNo],
		[B].[PieceNo],
		[B].[BuildingNo],
		[B].[BondType],
		[B].[BondNo],

		[B].[BankName] as [BuildingBankName],
		[B].[BankAccCode] as [BuildingBankAccCode],

		[P].[Class],
		[P].[Area] as [FlatArea],
		[P].[unity] as [FlatAreaunity],
		[A].[ElectricityCounter],
		[A].[FineRevenueAccountGUID],
		Case when [ContractFinish] = 0 then [ToDate] else [ContractFinishDate]  end as [EndDate],
		[A].[ResultingNote],
		[A].[FineNote],
		[A].[NewState],
		[A].[InsuranceValuePercent],
		[A].[OtherFee],
		[A].[OtherFeeAccountGUID],

		[A].[License1No],
		[A].[License2No],
		[A].[License3No],
		[A].[License1Date1],
		[A].[License2Date1],
		[A].[License3Date1],
		[A].[License1Date2],
		[A].[License2Date2],
		[A].[License3Date2],
		[A].[Ltnwhereabouts],
		[A].[LtnPurpose],
		[A].[LtnRentDuration],
		[A].[LtnRentype],
		[A].[LtnTermsOfPayment],
		[A].[Trademark],

		Case when Isnull([P].[Guid],0x0) <> 0x0 then [P].[CostGuid]
			 when Isnull([S].[Guid],0x0) <> 0x0 then [S].[CostGuid]
		 end as [UnitCostGuid],
		 
		Case when Isnull([P].[Guid],0x0) <> 0x0 then [P].[Judicial]
			 when Isnull([S].[Guid],0x0) <> 0x0 then [S].[Judicial]
		 end as [Judicial],
		[A].[CostGuid],
		[AcCommissionFromCustNote],
		[AcCommissionFromOwnerNote],
		A.[IsRounded],
		[Leave],
		[LeaveDate],
		[CountOldContract],
		A.[InsuranceAccountGuid],
		[A].[AcquittancePrinted],
		[A].[AcquittancePrintDate],
		[A].[Judicial] as [ContractJudicial]
	from 
		[vbLeaseApartment] [A]
		inner join [vwContractType] [T] on [T].[Guid] = [A].[TypeGuid]
		inner join [vwBuilding] [B] On [A].[BuildingGuid] = [B].[Guid]
		left join [Apartment] [P] on [P].[Guid] = [A].[ApartmentGuid]
		left join [Shop] [S] on [S].[Guid] = [A].[ApartmentGuid]
		inner join [vwcustomer] [Cu] On [Cu].[Guid] = [A].[CustomerGuid]
		left join [Currency] [Cr] On [Cr].[Guid] = [A].[CurrencyGuid]


GO
/****** Object:  Table [dbo].[Reminder]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Reminder](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[Subject] [varchar](256) NULL,
	[Date] [datetime] NULL,
	[RemindDate] [datetime] NULL,
	[Finished] [bit] NULL,
	[Mobile] [varchar](256) NULL,
	[Note] [varchar](800) NULL,
	[ForAllUser] [bit] NULL,
	[UserGuid] [uniqueidentifier] NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbReminder]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbReminder]
	  
	as
		Select 
			[T].*
		From
			[Reminder] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  View [dbo].[vbRealtyRestrained]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbRealtyRestrained]
	  
	as
		Select 
			[T].*
		From
			[RealtyRestrained] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  Table [dbo].[MapsConfig]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MapsConfig](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[Country] [varchar](256) NULL,
	[City] [varchar](256) NULL,
	[Map1] [varchar](256) NULL,
	[Map2] [varchar](256) NULL,
	[Map3] [varchar](256) NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vbMapsConfig]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbMapsConfig]
	  
	as
		Select 
			[T].*
		From
			[MapsConfig] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  View [dbo].[vwOwner]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE View [dbo].[vwOwner]
  
as
	Select
		[A].[Number],[A].[Guid],[A].[SecLvl],[A].[Name] as [ArName],
		[A].[LtnName],[A].[Nationality],[A].[PersonalityNo],[A].[Address],[A].[Phone],[A].[Mobile],[A].[Fax],[A].[BoxNo],[A].[EMail],
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[LtnName],'') <> '') then [A].[LtnName] else [A].[Name] end as [Name]
	From 
		[Owner] [A]


GO
/****** Object:  View [dbo].[vwSalesman]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE View [dbo].[vwSalesman]
  
as
	Select
		[A].[Number],[A].[Guid],[A].[SecLvl],[A].[Name] as [ArName],[A].[LtnName],
		[A].[WorkCardNo],[A].[Nationality],[A].[PersonalityNo],[A].[passportNo],[A].[Address],
		[A].[Phone],[A].[Mobile],[A].[Fax],[A].[BoxNo],[A].[EMail],[A].[Commissionlimit],
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[LtnName],'') <> '') then [A].[LtnName] else [A].[Name] end as [Name]
	From 
		[Salesman] [A]


GO
/****** Object:  View [dbo].[vwLawsuit]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwLawsuit]
  
as
	Select 
		L.*
	From
		[Lawsuit] L

GO
/****** Object:  View [dbo].[vwMovingCost]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE View [dbo].[vwMovingCost]
  
as
	Select
		C.*
	From 
		[vwCost] C
		left join [Cost] C2 on C2.ParentGUID = C.Guid 
	where 
		C2.[Guid] is Null


GO
/****** Object:  View [dbo].[vwLawsuitState]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE view [dbo].[vwLawsuitState]
  
as
	Select 
		L.*,
		U.LoginName as [UserName]
	from
		[vbLawsuitState] L
		inner join [realty_Users] U on U.Guid = l.UserGuid

GO
/****** Object:  Table [dbo].[Photos]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Photos](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[ParentGuid] [uniqueidentifier] NULL,
	[TableGUID] [uniqueidentifier] NULL,
	[userGuid] [uniqueidentifier] NULL,
	[Date] [smalldatetime] NULL,
	[Path] [varchar](255) NULL,
	[Tab] [varchar](255) NULL,
	[Desc] [varchar](255) NULL,
	[Note] [varchar](255) NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwLawsuitExpense]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE view [dbo].[vwLawsuitExpense]
  
as
	Select 
		L.*,
		U.LoginName as [UserName],
		(Select Top 1 Path from Photos where ParentGuid = L.Guid and Number = 0) as [Photo]
	from
		[vbLawsuitExpense] L
		left join [realty_Users] U on U.Guid = l.UserGuid

GO
/****** Object:  View [dbo].[vwCheckReturn]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE view [dbo].[vwCheckReturn]
  
as
	Select 
		[P].[Number],
		[P].[TypeName],
		[Cu].[Name] as [CustName],
		[Cu].[ArName] as [CustArName],
		[Cu].[LtnName] as [CustLtnName]
		,[P].[No]
		,[P].[Value]
		,[P].[Date]
		,[P].[DueDate]
		,[P].[BankName]
		,[P].[Note]
		,[P].[Note3]
		,DateDiff(Day,  [C3].[Date], GetDate()) as [DayDiff]
		,[L].[BuildingName]
		,[L].[BuildingArName]
		,[L].[BuildingltnName]
		,[L].[FlatNo]
		,[L].[FloorNo]
		,[L].[ContractNo]
		,[C3].[Date] as [ReturnDate]
		,[P].[Guid]

		,[P].[AccountCode]
		,[P].[AccountName]

		,[L].[Emirate]
		,[L].[BuildingArea]
		,[L].[Suburb]
		,[L].[Street]
		,[L].[BasinNo]
		,[L].[PieceNo]
		,[L].[BuildingNo]
		,[L].[BondType]
		,[L].[BondNo]
		,[L].[FlatKind]
		,[L].[ApartmentType]
		,[L].[Class]
		,[L].[FlatArea]
		,[L].[FlatAreaunity]
		,[Cu].[Mobile] as [CustomerMobile]
		,[L].[BuildingGuid]
		,[P].[CurrencyGuid] as [CheckCurrencyGuid]
		,[P].[TypeGuid]
	From
		[vwChecks] [P]
		left join [vwCustomer] [Cu] on [Cu].[AcGuid] = [P].[Account] or Cu.InsuranceAccountGuid = P.Account
		left join [vwLeaseApartment] [L] on [L].[Guid] = [P].[ContractGuid]
		inner join [vwChecksCollection] [C3] on [C3].[CheckGuid] = [P].[Guid] and [C3].[Kind] = 3

--		left join [RepSMS] [SMS2] on [SMS2].[ObjGuid] = [P].[Guid] and [SMS2].[IdReport] = 1200

GO
/****** Object:  View [dbo].[vwTreeCost]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE View [dbo].[vwTreeCost]
  
as
	Select
		[A].[Number], [A].[Guid], [A].[Code], [A].[ParentGuid], [A].[Note], [A].[LtnName],
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[LtnName],'') <> '') then [A].[LtnName] else [A].[Name] end as [Name], 
		case when [A].[ParentGuid] is Not Null then [A].[ParentGuid] else 0x0 end as [Parent],
		(Select Count(*) From [Cost] where [ParentGuid] = [A].[Guid]) as [NSons], 
		Isnull([F].[Guid],0x0) as [FlatGuid],
		Isnull([K].[Guid],0x0) as [ParkingGuid],
		Isnull([p].[Guid],0x0) as [ShopGuid]
	From 
		[Cost] [A]
		left join [Apartment] [F] On [F].[CostGuid] = [A].[Guid]
		left join [Shop] [P] On [P].[CostGuid] = [A].[Guid]
		left join [Parking] [K] On [K].[CostGuid] = [A].[Guid]


GO
/****** Object:  View [dbo].[vwCheckCollection]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE view [dbo].[vwCheckCollection]
  
as
	Select 
		[P].[Number],
		[P].[TypeName],
		[Cu].[Name] as [CustName],
		[Cu].[ArName] as [CustArName],
		[Cu].[LtnName] as [CustLtnName]
		,[P].[No]
		,[P].[Value]
		,[P].[Date]
		,[P].[DueDate]
		,[P].[BankName]
		,[P].[Note]
		,[P].[Note3]
		,DateDiff(Day,  [C3].[Date], GetDate()) as [DayDiff]
		,[L].[BuildingName]
		,[L].[BuildingArName]
		,[L].[BuildingltnName]
		,[L].[FlatNo]
		,[L].[FloorNo]
		,[L].[ContractNo]
		,[C3].[Date] as [CollectionDate]
		,[P].[Guid]

		,[P].[AccountCode]
		,[P].[AccountName]

		,[L].[Emirate]
		,[L].[BuildingArea]
		,[L].[Suburb]
		,[L].[Street]
		,[L].[BasinNo]
		,[L].[PieceNo]
		,[L].[BuildingNo]
		,[L].[BondType]
		,[L].[BondNo]
		,[L].[FlatKind]
		,[L].[ApartmentType]
		,[L].[Class]
		,[L].[FlatArea]
		,[L].[FlatAreaunity]
		,[Cu].[Mobile] as [CustomerMobile]
		,[L].[BuildingGuid]
		,[P].[CurrencyGuid] as [CheckCurrencyGuid]
		,[P].[TypeGuid]
		,C3.FixReturn
		,C3.FixReturnNote
	From
		[vwChecks] [P]
		left join [vwCustomer] [Cu] on [Cu].[AcGuid] = [P].[Account] or [Cu].[InsuranceAccountGuid] = [P].[Account]
		left join [vwLeaseApartment] [L] on [L].[Guid] = [P].[ContractGuid]
		inner join [ChecksCollection] [C3] on [C3].[CheckGuid] = [P].[Guid] and [C3].[Kind] = 1

--		left join [RepSMS] [SMS2] on [SMS2].[ObjGuid] = [P].[Guid] and [SMS2].[IdReport] = 1200

GO
/****** Object:  View [dbo].[vbMaintenanceOrder]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE View [dbo].[vbMaintenanceOrder]
	  
	as
		Select 
			[T].*
		From
			[MaintenanceOrder] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
GO
/****** Object:  Table [dbo].[AccountAccumulate]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AccountAccumulate](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[ParentGuid] [uniqueidentifier] NULL,
	[AccountGuid] [uniqueidentifier] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AccountDistributive]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AccountDistributive](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[ParentGuid] [uniqueidentifier] NULL,
	[AccountGuid] [uniqueidentifier] NULL,
	[Percent] [float] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AccountFavoriteConfig]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AccountFavoriteConfig](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[UserGuid] [uniqueidentifier] NULL,
	[AccountGuid] [uniqueidentifier] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AccumulateFlat]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AccumulateFlat](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[ParentGuid] [uniqueidentifier] NULL,
	[FlatGuid] [uniqueidentifier] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AccumulateLand]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AccumulateLand](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[ParentGuid] [uniqueidentifier] NULL,
	[LandGuid] [uniqueidentifier] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AccumulateParking]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AccumulateParking](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[ParentGuid] [uniqueidentifier] NULL,
	[ParkingGuid] [uniqueidentifier] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AccumulateShop]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AccumulateShop](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[ParentGuid] [uniqueidentifier] NULL,
	[ShopGuid] [uniqueidentifier] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AlarmCheckTypeSource]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AlarmCheckTypeSource](
	[UserGuid] [uniqueidentifier] NULL,
	[CheckTypeGuid] [uniqueidentifier] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Alerts]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Alerts](
	[Guid] [uniqueidentifier] NOT NULL,
	[Number] [int] IDENTITY(1,1) NOT NULL,
	[isRead] [bit] NULL,
	[Expdate] [date] NULL,
	[Details] [varchar](250) NULL,
	[Table_name] [varchar](50) NULL,
	[Entry_number] [int] NULL,
	[Date] [datetime] NULL,
PRIMARY KEY CLUSTERED 
(
	[Number] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AppReport]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AppReport](
	[date] [datetime] NULL,
	[HostName] [varchar](256) NULL,
	[Comp] [varchar](256) NULL,
	[hardlimit] [int] NULL,
	[SN] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[arv_files]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[arv_files](
	[ParentGuid] [uniqueidentifier] NULL,
	[Blobfile] [varbinary](max) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[arv_Filter]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[arv_Filter](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[SecLvl] [int] NULL,
	[Kind] [int] NULL,
	[Name] [varchar](250) NULL,
	[LtnName] [varchar](250) NULL,
	[TableGuid] [uniqueidentifier] NULL,
	[ParentName] [varchar](255) NULL,
	[Note] [varchar](256) NULL,
	[sqlCmd] [varchar](8000) NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[arv_FilterDetail]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[arv_FilterDetail](
	[ParentGuid] [uniqueidentifier] NULL,
	[id] [int] NULL,
	[Parentid] [int] NULL,
	[IsGroup] [bit] NULL,
	[Link] [int] NULL,
	[FldCaption] [varchar](255) NULL,
	[FldName] [varchar](255) NULL,
	[Condition] [varchar](25) NULL,
	[ParamKind] [int] NULL,
	[Value1] [varchar](255) NULL,
	[Value2] [varchar](255) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BillDetail_Tmp]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BillDetail_Tmp](
	[Kind] [int] NULL,
	[Number] [int] NOT NULL IDENTITY(1,1),
	[ParentGuid] [uniqueidentifier] NULL,
	[BillKind] [int] NULL,
	[MatGuid] [uniqueidentifier] NULL,
	[Qty] [float] NULL,
	[Qty2] [float] NULL,
	[Qty3] [float] NULL,
	[Bonus] [float] NULL,
	[StoreGuid] [uniqueidentifier] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BillNumber]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BillNumber](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Kind] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BillTypeField]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BillTypeField](
	[BillTypeGuid] [uniqueidentifier] NULL,
	[FieldName] [varchar](256) NULL,
	[Visible] [bit] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BillTypePrivilege]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BillTypePrivilege](
	[UserGuid] [uniqueidentifier] NULL,
	[BillTypeGuid] [uniqueidentifier] NULL,
	[Open] [bit] NULL,
	[Add] [bit] NULL,
	[Edit] [bit] NULL,
	[Del] [bit] NULL,
	[Print] [bit] NULL,
	[Design] [bit] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BrowsCard]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BrowsCard](
	[IdCard] [int] NULL,
	[CardGuid] [uniqueidentifier] NULL,
	[ComputerName] [varchar](50) NULL,
	[CheckRefrech] [bit] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BuildingAssets]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BuildingAssets](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[ParentGuid] [uniqueidentifier] NULL,
	[AssetsGuid] [uniqueidentifier] NULL,
	[Value] [float] NULL,
	[Note] [varchar](255) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BuildingIdentity]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BuildingIdentity](
	[BuildingGuid] [uniqueidentifier] NULL,
	[OwnerAccountGuid] [uniqueidentifier] NULL,
	[Value] [float] NULL,
	[CurrencyGUID] [uniqueidentifier] NULL,
	[BeginDate] [datetime] NULL,
	[cachEntryGuid] [uniqueidentifier] NULL,
	[InsuranceEntryGuid] [uniqueidentifier] NULL,
	[DoReconciliation] [bit] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BuildingIdentityDetail]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BuildingIdentityDetail](
	[BuildingGuid] [uniqueidentifier] NULL,
	[RentName] [varchar](256) NULL,
	[BeginContractDate] [datetime] NULL,
	[EndContractDate] [datetime] NULL,
	[ContractPeriod] [float] NULL,
	[ContractValue] [float] NULL,
	[BeginInvestmentDate] [datetime] NULL,
	[DeservedDay] [float] NULL,
	[DeservedValue] [float] NULL,
	[checkValue] [float] NULL,
	[DeservedCashValue] [float] NULL,
	[InsuranceValue] [float] NULL,
	[FlatGuid] [uniqueidentifier] NULL,
	[Mobile] [varchar](256) NULL,
	[ContractNo] [varchar](256) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Buildinglicense]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Buildinglicense](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[BuildingGuid] [uniqueidentifier] NULL,
	[No] [varchar](255) NULL,
	[Date] [smalldatetime] NULL,
	[IssueDate] [smalldatetime] NULL,
	[EndIssueDate] [smalldatetime] NULL,
	[Owner] [varchar](255) NULL,
	[trademark] [varchar](255) NULL,
	[Worker] [varchar](255) NULL,
	[NoWorker] [varchar](255) NULL,
	[Note] [varchar](255) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BuildingPayType]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BuildingPayType](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NULL,
	[BuildingGuid] [uniqueidentifier] NULL,
	[Date] [datetime] NULL,
	[Percentage] [float] NULL,
	[PayValue] [float] NULL,
	[Note] [varchar](256) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BuildingPlanConfig]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BuildingPlanConfig](
	[Tag] [int] NULL,
	[Kind] [varchar](256) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ChangeLandRent]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ChangeLandRent](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[ParentGuid] [uniqueidentifier] NULL,
	[Date] [datetime] NULL,
	[Price] [float] NULL,
	[CurrencyGuid] [uniqueidentifier] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ChangeParkingPrice]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ChangeParkingPrice](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[ParentGuid] [uniqueidentifier] NULL,
	[Date] [datetime] NULL,
	[Price] [float] NULL,
	[CurrencyGuid] [uniqueidentifier] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ChangeShopPrice]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ChangeShopPrice](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[ParentGuid] [uniqueidentifier] NULL,
	[Date] [datetime] NULL,
	[Price] [float] NULL,
	[CurrencyGuid] [uniqueidentifier] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ChangeShopRent]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ChangeShopRent](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[ParentGuid] [uniqueidentifier] NULL,
	[Date] [datetime] NULL,
	[Price] [float] NULL,
	[CurrencyGuid] [uniqueidentifier] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ChangeVillaPrice]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ChangeVillaPrice](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[ParentGuid] [uniqueidentifier] NULL,
	[Date] [datetime] NULL,
	[Price] [float] NULL,
	[CurrencyGuid] [uniqueidentifier] NULL,
	[Kind] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ChangeVillaRent]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ChangeVillaRent](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[ParentGuid] [uniqueidentifier] NULL,
	[Date] [datetime] NULL,
	[Price] [float] NULL,
	[CurrencyGuid] [uniqueidentifier] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ChecksAccountDetail]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ChecksAccountDetail](
	[ParentGuid] [uniqueidentifier] NULL,
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Kind] [int] NULL,
	[AccountGuid] [uniqueidentifier] NULL,
	[CostGuid] [uniqueidentifier] NULL,
	[Percent] [float] NULL,
	[Value] [float] NULL,
	[Note] [varchar](255) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ChecksCostDetail]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ChecksCostDetail](
	[ParentGuid] [uniqueidentifier] NULL,
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Kind] [int] NULL,
	[CostGuid] [uniqueidentifier] NULL,
	[Percent] [float] NULL,
	[Value] [float] NULL,
	[Note] [varchar](255) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CheckTypePrivilege]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CheckTypePrivilege](
	[UserGuid] [uniqueidentifier] NULL,
	[CheckTypeGuid] [uniqueidentifier] NULL,
	[Open] [bit] NULL,
	[Add] [bit] NULL,
	[Edit] [bit] NULL,
	[Del] [bit] NULL,
	[Mark] [bit] NULL,
	[MarkEdit] [bit] NULL,
	[Markdel] [bit] NULL,
	[ShowMark] [bit] NULL,
	[Print] [bit] NULL,
	[Design] [bit] NULL,
	[Posted] [bit] NULL,
	[DelPosted] [bit] NULL,
	[collected] [bit] NULL,
	[Delcollected] [bit] NULL,
	[partialcollected] [bit] NULL,
	[partialcollectedEdit] [bit] NULL,
	[partialcollectedDel] [bit] NULL,
	[Endorsement] [bit] NULL,
	[DelEndorsement] [bit] NULL,
	[Returned] [bit] NULL,
	[DelReturned] [bit] NULL,
	[CreateEntry] [bit] NULL,
	[ChangeAcc] [bit] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ContractAccountDetail]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ContractAccountDetail](
	[ParentGuid] [uniqueidentifier] NULL,
	[Number] [int] NOT NULL IDENTITY(1,1),
	[AccountGuid] [uniqueidentifier] NULL,
	[Percent] [float] NULL,
	[Value] [float] NULL,
	[Note] [varchar](255) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ContractFlatAssets]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ContractFlatAssets](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[ContractGuid] [uniqueidentifier] NULL,
	[AssetsGuid] [uniqueidentifier] NULL,
	[Value] [float] NULL,
	[Note] [varchar](255) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ContractLandAssets]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ContractLandAssets](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[ContractGuid] [uniqueidentifier] NULL,
	[AssetsGuid] [uniqueidentifier] NULL,
	[Value] [float] NULL,
	[Note] [varchar](255) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ContractTypeFeeAccount]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ContractTypeFeeAccount](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[ParentGuid] [uniqueidentifier] NULL,
	[AccountGuid] [uniqueidentifier] NULL,
	[Note] [varchar](255) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ContractTypeFineAccount]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ContractTypeFineAccount](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[ParentGuid] [uniqueidentifier] NULL,
	[AccountGuid] [uniqueidentifier] NULL,
	[Note] [varchar](255) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ContractTypePrivilege]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ContractTypePrivilege](
	[UserGuid] [uniqueidentifier] NULL,
	[ContractTypeGuid] [uniqueidentifier] NULL,
	[Open] [bit] NULL,
	[Add] [bit] NULL,
	[Edit] [bit] NULL,
	[Del] [bit] NULL,
	[Mark] [bit] NULL,
	[MarkEdit] [bit] NULL,
	[MarkDel] [bit] NULL,
	[ShowMark] [bit] NULL,
	[Print] [bit] NULL,
	[Design] [bit] NULL,
	[Field7] [bit] NULL,
	[Field8] [bit] NULL,
	[Field9] [bit] NULL,
	[Field10] [bit] NULL,
	[Field11] [bit] NULL,
	[Field12] [bit] NULL,
	[Field13] [bit] NULL,
	[Field14] [bit] NULL,
	[Field15] [bit] NULL,
	[Field16] [bit] NULL,
	[Field17] [bit] NULL,
	[Field18] [bit] NULL,
	[Field19] [bit] NULL,
	[Field20] [bit] NULL,
	[Field21] [bit] NULL,
	[MaxDiscount] [float] NULL,
	[CustBalance] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DefaultMenuBank]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DefaultMenuBank](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](255) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DefaultMenuLtnNationality]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DefaultMenuLtnNationality](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](255) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DefaultMenuNationality]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DefaultMenuNationality](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](255) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DMD_const]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DMD_const](
	[VName] [nvarchar](2048) NULL,
	[Value] [nvarchar](2048) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ElectricityTypePrivilege]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ElectricityTypePrivilege](
	[UserGuid] [uniqueidentifier] NULL,
	[ElectricityTypeGuid] [uniqueidentifier] NULL,
	[Open] [bit] NULL,
	[Add] [bit] NULL,
	[Edit] [bit] NULL,
	[Del] [bit] NULL,
	[Mark] [bit] NULL,
	[MarkEdit] [bit] NULL,
	[MarkDel] [bit] NULL,
	[ShowMark] [bit] NULL,
	[Print] [bit] NULL,
	[Design] [bit] NULL,
	[Field1] [bit] NULL,
	[Field2] [bit] NULL,
	[MaxDiscount] [float] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[EntryDateDetail]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[EntryDateDetail](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[Date] [datetime] NULL,
	[ParentGuid] [uniqueidentifier] NULL,
	[AcGuid] [uniqueidentifier] NULL,
	[Debit] [float] NULL,
	[Credit] [float] NULL,
	[CurrencyGuid] [uniqueidentifier] NULL,
	[CurrencyVal] [float] NULL,
	[ObverseAcGuid] [uniqueidentifier] NULL,
	[CostGuid] [uniqueidentifier] NULL,
	[Note] [varchar](256) NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[EntryDateTypePrivilege]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[EntryDateTypePrivilege](
	[UserGuid] [uniqueidentifier] NULL,
	[EntryTypeGuid] [uniqueidentifier] NULL,
	[Open] [bit] NULL,
	[Add] [bit] NULL,
	[Edit] [bit] NULL,
	[Del] [bit] NULL,
	[Mark] [bit] NULL,
	[MarkEdit] [bit] NULL,
	[MarkDel] [bit] NULL,
	[ShowMark] [bit] NULL,
	[Print] [bit] NULL,
	[Design] [bit] NULL,
	[CreateEntry] [bit] NULL,
	[ChangeAcc] [bit] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[EntryTypePrivilege]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[EntryTypePrivilege](
	[UserGuid] [uniqueidentifier] NULL,
	[EntryTypeGuid] [uniqueidentifier] NULL,
	[Open] [bit] NULL,
	[Add] [bit] NULL,
	[Edit] [bit] NULL,
	[Del] [bit] NULL,
	[Mark] [bit] NULL,
	[MarkEdit] [bit] NULL,
	[MarkDel] [bit] NULL,
	[ShowMark] [bit] NULL,
	[Print] [bit] NULL,
	[Design] [bit] NULL,
	[CreateEntry] [bit] NULL,
	[ChangeAcc] [bit] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[FlatAssets]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FlatAssets](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[ParentGuid] [uniqueidentifier] NULL,
	[AssetsGuid] [uniqueidentifier] NULL,
	[Value] [float] NULL,
	[Note] [varchar](255) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[FlatBuilding]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FlatBuilding](
	[BuildingGuid] [uniqueidentifier] NULL,
	[CostGuid] [uniqueidentifier] NULL,
	[BuildingAcGuid] [uniqueidentifier] NULL,
	[ProjectAcGuid] [uniqueidentifier] NULL,
	[ClientAcGuid] [uniqueidentifier] NULL,
	[CreateEntry] [bit] NULL,
	[EntryDate] [datetime] NULL,
	[FloorCount] [int] NULL,
	[FlatByFloor] [int] NULL,
	[RealFlatCount] [int] NULL,
	[Area] [float] NULL,
	[CostProject] [float] NULL,
	[Costunity] [float] NULL,
	[CurrencyGuid] [uniqueidentifier] NULL,
	[CurrencyVal] [float] NULL,
	[MBalanceFloor] [int] NULL,
	[BHouseFloor] [int] NULL,
	[ShopFloor] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[FlatBuildingDetails]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FlatBuildingDetails](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[BuildingGuid] [uniqueidentifier] NULL,
	[Color] [int] NULL,
	[Count] [int] NULL,
	[FlatKind] [varchar](256) NULL,
	[Type] [varchar](256) NULL,
	[Class] [varchar](256) NULL,
	[Area] [float] NULL,
	[Unity] [varchar](256) NULL,
	[Rent] [float] NULL,
	[CostPrice] [float] NULL,
	[SalePrice] [float] NULL,
	[SalePrice2] [float] NULL,
	[SalePrice3] [float] NULL,
	[FlatOwner] [int] NULL,
	[CustGuid] [uniqueidentifier] NULL,
	[Details] [varchar](256) NULL,
	[Overlooking] [varchar](256) NULL,
	[OfferType] [int] NULL,
	[Restrained] [bit] NULL,
	[BathroomCount] [int] NULL,
	[BalconyCount] [int] NULL,
	[Note] [varchar](256) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[FlatBuildingDetails_2]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FlatBuildingDetails_2](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[BuildingGuid] [uniqueidentifier] NULL,
	[Floor] [varchar](8000) NULL,
	[Note] [varchar](256) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[FlatBuildingDetails_BHouse]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FlatBuildingDetails_BHouse](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[BuildingGuid] [uniqueidentifier] NULL,
	[Floor] [varchar](8000) NULL,
	[Note] [varchar](256) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[FlatBuildingDetails_FlatDriver]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FlatBuildingDetails_FlatDriver](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[BuildingGuid] [uniqueidentifier] NULL,
	[Floor] [varchar](8000) NULL,
	[Note] [varchar](256) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[FlatBuildingDetails_FlatServant]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FlatBuildingDetails_FlatServant](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[BuildingGuid] [uniqueidentifier] NULL,
	[Floor] [varchar](8000) NULL,
	[Note] [varchar](256) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[FlatBuildingDetails_MBalance]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FlatBuildingDetails_MBalance](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[BuildingGuid] [uniqueidentifier] NULL,
	[Floor] [varchar](8000) NULL,
	[Note] [varchar](256) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[FlatBuildingDetails_Office]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FlatBuildingDetails_Office](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[BuildingGuid] [uniqueidentifier] NULL,
	[Floor] [varchar](8000) NULL,
	[Note] [varchar](256) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[FlatBuildingDetails_Parking]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FlatBuildingDetails_Parking](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[BuildingGuid] [uniqueidentifier] NULL,
	[Floor] [varchar](8000) NULL,
	[Note] [varchar](256) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[FlatBuildingDetails_Shop]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FlatBuildingDetails_Shop](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[BuildingGuid] [uniqueidentifier] NULL,
	[Floor] [varchar](8000) NULL,
	[Note] [varchar](256) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[FlatBuildingDetails_Store]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FlatBuildingDetails_Store](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[BuildingGuid] [uniqueidentifier] NULL,
	[Floor] [varchar](8000) NULL,
	[Note] [varchar](256) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[FlatContractFee]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FlatContractFee](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[EntryNumber] [int] NULL,
	[Guid] [uniqueidentifier] NOT NULL,
	[ParentGuid] [uniqueidentifier] NULL,
	[Date] [smalldatetime] NULL,
	[AccountGuid] [uniqueidentifier] NULL,
	[Value] [float] NULL,
	[CreateEntry] [bit] NULL,
	[Note] [varchar](255) NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[FlatContractFine]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FlatContractFine](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[ParentGuid] [uniqueidentifier] NULL,
	[AccountGuid] [uniqueidentifier] NULL,
	[Value] [float] NULL,
	[Note] [varchar](255) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Flatwallet]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Flatwallet](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[ParentGuid] [uniqueidentifier] NULL,
	[BuildingGuid] [uniqueidentifier] NULL,
	[FlatGuid] [uniqueidentifier] NULL,
	[MainCost] [float] NULL,
	[Expense] [float] NULL,
	[BeginDate] [datetime] NULL,
	[SaleDate] [datetime] NULL,
	[SaleValue] [float] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[HjrConfig]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[HjrConfig](
	[hjrYear] [int] NULL,
	[hjrMonth] [int] NULL,
	[Date] [datetime] NULL,
	[Day] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[HjrMonthDayCount]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[HjrMonthDayCount](
	[Month] [int] NULL,
	[DayCount] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ImportAccTmp]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ImportAccTmp](
	[Id] [int] NULL,
	[Livel1Code] [varchar](255) NULL,
	[Livel2Code] [varchar](255) NULL,
	[Livel3Code] [varchar](255) NULL,
	[Livel4Code] [varchar](255) NULL,
	[Livel1Name] [varchar](255) NULL,
	[Livel2Name] [varchar](255) NULL,
	[Livel3Name] [varchar](255) NULL,
	[Livel4Name] [varchar](255) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ImportMatTmp]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ImportMatTmp](
	[Id] [int] NULL,
	[GroupCode] [varchar](255) NULL,
	[GroupName] [varchar](255) NULL,
	[Code] [varchar](255) NULL,
	[Name] [varchar](255) NULL,
	[LtnName] [varchar](255) NULL,
	[MatType] [int] NULL,
	[SecLvl] [int] NULL,
	[unity1] [varchar](255) NULL,
	[Defunity1] [float] NULL,
	[Barcode] [varchar](255) NULL,
	[unity2] [varchar](255) NULL,
	[Defunity2] [bit] NULL,
	[unityFact2] [float] NULL,
	[UnityFix2] [bit] NULL,
	[Barcode2] [varchar](255) NULL,
	[unity3] [varchar](255) NULL,
	[Defunity3] [bit] NULL,
	[unityFact3] [float] NULL,
	[UnityFix3] [bit] NULL,
	[Barcode3] [varchar](255) NULL,
	[Price11] [float] NULL,
	[Price12] [float] NULL,
	[Price13] [float] NULL,
	[Price14] [float] NULL,
	[Price15] [float] NULL,
	[Price16] [float] NULL,
	[Price17] [float] NULL,
	[Price21] [float] NULL,
	[Price22] [float] NULL,
	[Price23] [float] NULL,
	[Price24] [float] NULL,
	[Price25] [float] NULL,
	[Price26] [float] NULL,
	[Price27] [float] NULL,
	[Price31] [float] NULL,
	[Price32] [float] NULL,
	[Price33] [float] NULL,
	[Price34] [float] NULL,
	[Price35] [float] NULL,
	[Price36] [float] NULL,
	[Price37] [float] NULL,
	[Note] [varchar](255) NULL,
	[State] [varchar](255) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[IncAccountListDetail]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[IncAccountListDetail](
	[ParentGuid] [uniqueidentifier] NULL,
	[AccountGuid] [uniqueidentifier] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[IncomeSavedDetail]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[IncomeSavedDetail](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[ParentGuid] [uniqueidentifier] NULL,
	[ContractGuid] [uniqueidentifier] NULL,
	[strKind] [varchar](256) NULL,
	[RentPrice] [float] NULL,
	[FromDate] [datetime] NULL,
	[ToDate] [datetime] NULL,
	[EndDate] [datetime] NULL,
	[Days] [int] NULL,
	[DayPrice] [float] NULL,
	[DayPeriod] [int] NULL,
	[Income] [float] NULL,
	[ContractFinish] [bit] NULL,
	[Collection] [float] NULL,
	[CheckNotCollection] [float] NULL,
	[Cash] [float] NULL,
	[TotalPays] [float] NULL,
	[ContractRest] [float] NULL,
	[CustBalance] [float] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[InfofldCaption]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[InfofldCaption](
	[Cardid] [int] NULL,
	[id] [int] NULL,
	[FldCaption] [varchar](255) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[InfofldValue]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[InfofldValue](
	[CardGuid] [uniqueidentifier] NULL,
	[Cardid] [int] NULL,
	[id] [int] NULL,
	[FldValue] [varchar](255) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[LandContractFee]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LandContractFee](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[EntryNumber] [int] NULL,
	[Guid] [uniqueidentifier] NOT NULL,
	[ParentGuid] [uniqueidentifier] NULL,
	[Date] [smalldatetime] NULL,
	[AccountGuid] [uniqueidentifier] NULL,
	[Value] [float] NULL,
	[CreateEntry] [bit] NULL,
	[Note] [varchar](255) NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Landwallet]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Landwallet](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[ParentGuid] [uniqueidentifier] NULL,
	[LandGuid] [uniqueidentifier] NULL,
	[MainCost] [float] NULL,
	[Expense] [float] NULL,
	[BeginDate] [datetime] NULL,
	[SaleDate] [datetime] NULL,
	[SaleValue] [float] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[LastLoginUser]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LastLoginUser](
	[UserName] [varchar](256) NULL,
	[HostName] [varchar](256) NULL,
	[Date] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[LinkCe]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LinkCe](
	[Guid] [uniqueidentifier] NULL,
	[CeGuid] [uniqueidentifier] NULL,
	[Kind] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[LinkEntry_Checks]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LinkEntry_Checks](
	[CheckGuid] [uniqueidentifier] NULL,
	[EntryGuid] [uniqueidentifier] NULL,
	[EntryNum] [int] NULL,
	[Kind] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[LinkEntryType_Checks]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LinkEntryType_Checks](
	[CheckGuid] [uniqueidentifier] NULL,
	[EntryGuid] [uniqueidentifier] NULL,
	[EntryNum] [int] NULL,
	[Kind] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[LockCard]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LockCard](
	[IdCard] [int] NULL,
	[CardGuid] [uniqueidentifier] NULL,
	[ComputerName] [varchar](50) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[LogFile]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LogFile](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Username] [varchar](50) NULL,
	[UserGuid] [uniqueidentifier] NULL,
	[ComputerName] [varchar](50) NULL,
	[CardId] [int] NULL,
	[ODate] [datetime] NULL,
	[Opration] [varchar](100) NULL,
	[Note] [varchar](250) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MaintenanceContractTypePrivilege]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MaintenanceContractTypePrivilege](
	[UserGuid] [uniqueidentifier] NULL,
	[ContractTypeGuid] [uniqueidentifier] NULL,
	[Open] [bit] NULL,
	[Add] [bit] NULL,
	[Edit] [bit] NULL,
	[Del] [bit] NULL,
	[Mark] [bit] NULL,
	[MarkEdit] [bit] NULL,
	[MarkDel] [bit] NULL,
	[ShowMark] [bit] NULL,
	[Print] [bit] NULL,
	[Design] [bit] NULL,
	[Field7] [bit] NULL,
	[Field8] [bit] NULL,
	[Field9] [bit] NULL,
	[Field10] [bit] NULL,
	[Field11] [bit] NULL,
	[Field12] [bit] NULL,
	[Field13] [bit] NULL,
	[Field14] [bit] NULL,
	[Field15] [bit] NULL,
	[Field16] [bit] NULL,
	[Field17] [bit] NULL,
	[Field18] [bit] NULL,
	[Field19] [bit] NULL,
	[Field20] [bit] NULL,
	[Field21] [bit] NULL,
	[MaxDiscount] [float] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MapsObject]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MapsObject](
	[Guid] [uniqueidentifier] NOT NULL,
	[MapGuid] [uniqueidentifier] NULL,
	[X] [int] NULL,
	[Y] [int] NULL,
	[Kind] [int] NULL,
	[BuildingGuid] [uniqueidentifier] NULL,
	[LandGuid] [uniqueidentifier] NULL,
	[VillaGuid] [uniqueidentifier] NULL,
	[Note] [varchar](256) NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MatBalance]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MatBalance](
	[ParentGuid] [uniqueidentifier] NULL,
	[StoreGuid] [uniqueidentifier] NULL,
	[Qty] [float] NULL,
	[Qty2] [float] NULL,
	[Qty3] [float] NULL,
	[Note] [varchar](256) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MatDescription]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MatDescription](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[MatGuid] [uniqueidentifier] NULL,
	[Name] [varchar](256) NULL,
	[Value] [varchar](256) NULL,
	[Note] [varchar](256) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MatMinMax]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MatMinMax](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[ParentGuid] [uniqueidentifier] NULL,
	[StoreGuid] [uniqueidentifier] NULL,
	[Minimum] [float] NULL,
	[Maximum] [float] NULL,
	[Note] [varchar](256) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MenuPrivilege]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MenuPrivilege](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[UserGuid] [uniqueidentifier] NULL,
	[MenuName] [varchar](256) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MovingAccount]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MovingAccount](
	[AccountGuid] [uniqueidentifier] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[OfferPriceIns]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[OfferPriceIns](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[ParentGuid] [uniqueidentifier] NULL,
	[DueDate] [datetime] NULL,
	[Value] [float] NULL,
	[Note] [varchar](256) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[OldYearConfig]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[OldYearConfig](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[dbName] [varchar](256) NULL,
	[BeginEntryNo] [varchar](256) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[OnlyCheck]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[OnlyCheck](
	[Spid] [int] NULL,
	[Guid] [uniqueidentifier] NULL,
	[Only] [varchar](256) NULL,
	[LtnOnly] [varchar](256) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[OrderCheckMatBalance_Tmp]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[OrderCheckMatBalance_Tmp](
	[Spid] [int] NULL,
	[Number] [int] NOT NULL IDENTITY(1,1),
	[MatGuid] [uniqueidentifier] NULL,
	[StoreGuid] [uniqueidentifier] NULL,
	[Qty] [float] NULL,
	[unit] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[OrderTypeGroup]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[OrderTypeGroup](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[ParentGuid] [uniqueidentifier] NULL,
	[GroupGuid] [uniqueidentifier] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[OrderTypePrivilege]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[OrderTypePrivilege](
	[UserGuid] [uniqueidentifier] NULL,
	[TypeGuid] [uniqueidentifier] NULL,
	[Open] [bit] NULL,
	[Add] [bit] NULL,
	[Edit] [bit] NULL,
	[Del] [bit] NULL,
	[Print] [bit] NULL,
	[Design] [bit] NULL,
	[CloseOrder] [bit] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ParkingContractFee]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ParkingContractFee](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[EntryNumber] [int] NULL,
	[Guid] [uniqueidentifier] NOT NULL,
	[ParentGuid] [uniqueidentifier] NULL,
	[Date] [smalldatetime] NULL,
	[AccountGuid] [uniqueidentifier] NULL,
	[Value] [float] NULL,
	[CreateEntry] [bit] NULL,
	[Note] [varchar](255) NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ParkingWallet]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ParkingWallet](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[ParentGuid] [uniqueidentifier] NULL,
	[BuildingGuid] [uniqueidentifier] NULL,
	[ParkingGuid] [uniqueidentifier] NULL,
	[MainCost] [float] NULL,
	[Expense] [float] NULL,
	[BeginDate] [datetime] NULL,
	[SaleDate] [datetime] NULL,
	[SaleValue] [float] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Partnerwallet]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Partnerwallet](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[ParentGuid] [uniqueidentifier] NULL,
	[CustGuid] [uniqueidentifier] NULL,
	[Value] [float] NULL,
	[BeginDate] [datetime] NULL,
	[EndDate] [datetime] NULL,
	[RealWorkDay] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PathCustomPrint]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PathCustomPrint](
	[FormName] [varchar](256) NULL,
	[Path] [varchar](512) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PricingDetail]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PricingDetail](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Kind] [int] NULL,
	[ParentGuid] [uniqueidentifier] NULL,
	[Note] [varchar](255) NULL,
	[Analysis] [varchar](255) NULL,
	[Value] [float] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Progress_Tbl]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Progress_Tbl](
	[Spid] [int] NULL,
	[Msg] [varchar](255) NULL,
	[SubMsg] [varchar](255) NULL,
	[MaxPos] [int] NULL,
	[Pos] [int] NULL,
	[Time] [smalldatetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ProjectCost]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ProjectCost](
	[BuildingGuid] [uniqueidentifier] NOT NULL,
	[AccountGuid] [uniqueidentifier] NULL,
	[CurrencyGuid] [uniqueidentifier] NULL,
	[CurrencyVal] [float] NULL,
	[CostTotal] [float] NULL,
	[AreaTotal] [float] NULL,
	[Unity] [varchar](256) NULL,
	[Note] [varchar](256) NULL,
	[CostGuid] [uniqueidentifier] NULL,
PRIMARY KEY CLUSTERED 
(
	[BuildingGuid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ProjectCostDetail]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ProjectCostDetail](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NULL,
	[ParentGuid] [uniqueidentifier] NULL,
	[Date] [datetime] NULL,
	[AccountGuid] [uniqueidentifier] NULL,
	[Value] [float] NULL,
	[Note] [varchar](256) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[pRun]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[pRun](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[Date] [datetime] NULL,
	[Note] [varchar](256) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[QueryDefaultValue]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[QueryDefaultValue](
	[UserGuid] [uniqueidentifier] NULL,
	[RepName] [varchar](256) NULL,
	[FormName] [varchar](256) NULL,
	[ComponentName] [varchar](256) NULL,
	[Value] [varchar](256) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[QueryFeature]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[QueryFeature](
	[No] [int] IDENTITY(1,1) NOT NULL,
	[ID] [int] NULL,
	[Value] [varchar](800) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ReceiptOrderDetail]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ReceiptOrderDetail](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[ParentGuid] [uniqueidentifier] NULL,
	[Label] [varchar](255) NULL,
	[AccountGuid] [uniqueidentifier] NULL,
	[Date] [datetime] NULL,
	[Value] [float] NULL,
	[CashValue] [float] NULL,
	[checkValue] [float] NULL,
	[Note] [varchar](255) NULL,
	[IsReceipt] [bit] NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ReceiptOrderTypeDetail]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ReceiptOrderTypeDetail](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[ParentGuid] [uniqueidentifier] NULL,
	[Label] [varchar](255) NULL,
	[AccountGuid] [uniqueidentifier] NULL,
	[ArNote] [varchar](255) NULL,
	[EnNote] [varchar](255) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ReceiptOrderTypePrivilege]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ReceiptOrderTypePrivilege](
	[UserGuid] [uniqueidentifier] NULL,
	[TypeGuid] [uniqueidentifier] NULL,
	[Open] [bit] NULL,
	[Add] [bit] NULL,
	[Edit] [bit] NULL,
	[Del] [bit] NULL,
	[Mark] [bit] NULL,
	[MarkEdit] [bit] NULL,
	[MarkDel] [bit] NULL,
	[ShowMark] [bit] NULL,
	[Print] [bit] NULL,
	[Design] [bit] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RepCheck]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RepCheck](
	[ObjGuid] [uniqueidentifier] NULL,
	[UserGuid] [uniqueidentifier] NULL,
	[IdReport] [int] NULL,
	[date] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RepCheckCount]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RepCheckCount](
	[ObjGuid] [uniqueidentifier] NULL,
	[UserGuid] [uniqueidentifier] NULL,
	[IdReport] [int] NULL,
	[date] [datetime] NULL,
	[Count] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ReportSort]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ReportSort](
	[UserGuid] [uniqueidentifier] NULL,
	[ReportName] [varchar](256) NULL,
	[SortValue] [varchar](500) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RepSMS]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RepSMS](
	[ObjGuid] [uniqueidentifier] NULL,
	[UserGuid] [uniqueidentifier] NULL,
	[IdReport] [int] NULL,
	[date] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RepSMSCount]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RepSMSCount](
	[ObjGuid] [uniqueidentifier] NULL,
	[UserGuid] [uniqueidentifier] NULL,
	[IdReport] [int] NULL,
	[date] [datetime] NULL,
	[Count] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Resource]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Resource](
	[Spid] [int] NULL,
	[Guid] [uniqueidentifier] NULL,
	[Kind] [int] NULL,
	[Tag] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Secondary_EntryDetail]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Secondary_EntryDetail](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[ParentGuid] [uniqueidentifier] NULL,
	[AcGuid] [uniqueidentifier] NULL,
	[Debit] [float] NULL,
	[Credit] [float] NULL,
	[CurrencyGuid] [uniqueidentifier] NULL,
	[CurrencyVal] [float] NULL,
	[ObverseAcGuid] [uniqueidentifier] NULL,
	[CostGuid] [uniqueidentifier] NULL,
	[Note] [varchar](256) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ServicesContractTypePrivilege]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ServicesContractTypePrivilege](
	[UserGuid] [uniqueidentifier] NULL,
	[ContractTypeGuid] [uniqueidentifier] NULL,
	[Open] [bit] NULL,
	[Add] [bit] NULL,
	[Edit] [bit] NULL,
	[Del] [bit] NULL,
	[Mark] [bit] NULL,
	[MarkEdit] [bit] NULL,
	[MarkDel] [bit] NULL,
	[ShowMark] [bit] NULL,
	[Print] [bit] NULL,
	[Design] [bit] NULL,
	[Field7] [bit] NULL,
	[Field8] [bit] NULL,
	[Field9] [bit] NULL,
	[Field10] [bit] NULL,
	[Field11] [bit] NULL,
	[Field12] [bit] NULL,
	[Field13] [bit] NULL,
	[Field14] [bit] NULL,
	[Field15] [bit] NULL,
	[Field16] [bit] NULL,
	[Field17] [bit] NULL,
	[Field18] [bit] NULL,
	[Field19] [bit] NULL,
	[Field20] [bit] NULL,
	[Field21] [bit] NULL,
	[MaxDiscount] [float] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ShopAssets]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ShopAssets](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[ParentGuid] [uniqueidentifier] NULL,
	[AssetsGuid] [uniqueidentifier] NULL,
	[Value] [float] NULL,
	[Note] [varchar](255) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ShopWallet]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ShopWallet](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[ParentGuid] [uniqueidentifier] NULL,
	[BuildingGuid] [uniqueidentifier] NULL,
	[ShopGuid] [uniqueidentifier] NULL,
	[MainCost] [float] NULL,
	[Expense] [float] NULL,
	[BeginDate] [datetime] NULL,
	[SaleDate] [datetime] NULL,
	[SaleValue] [float] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SMSInfo]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SMSInfo](
	[Guid] [uniqueidentifier] NOT NULL,
	[ServerName] [varchar](256) NULL,
	[Unicode] [int] NULL,
	[ArLink] [varchar](1000) NULL,
	[EnLink] [varchar](1000) NULL,
	[BalanceLink] [varchar](1000) NULL,
	[Note] [varchar](256) NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SMSInfoDetail]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SMSInfoDetail](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[ParentGuid] [uniqueidentifier] NULL,
	[Result] [varchar](256) NULL,
	[ArNote] [varchar](256) NULL,
	[EnNote] [varchar](256) NULL,
	[IsSend] [bit] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SMSLog]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SMSLog](
	[UserGuid] [uniqueidentifier] NULL,
	[Date] [datetime] NULL,
	[Host_Name] [varchar](256) NULL,
	[Phone] [varchar](256) NULL,
	[Msg] [varchar](256) NULL,
	[Result] [varchar](256) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SMSSetup]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SMSSetup](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[Guid] [uniqueidentifier] NOT NULL,
	[Tag] [int] NULL,
	[AutoSend] [bit] NULL,
	[immediateSend] [bit] NULL,
	[Day] [int] NULL,
	[ArMsg] [varchar](500) NULL,
	[EnMsg] [varchar](500) NULL,
	[Note] [varchar](256) NULL,
PRIMARY KEY CLUSTERED 
(
	[Guid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[StrSource]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[StrSource](
	[Ar] [varchar](256) NULL,
	[En] [varchar](256) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TableNumber]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TableNumber](
	[TableName] [varchar](50) NULL,
	[TypeGuid] [uniqueidentifier] NULL,
	[LastNumber] [int] NULL,
	[RecCount] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TblLangauge]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TblLangauge](
	[Spid] [int] NULL,
	[Lang] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TblUpdateFlatSpecifications]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TblUpdateFlatSpecifications](
	[NO] [varchar](255) NULL,
	[NewNo] [varchar](255) NULL,
	[FloorNo] [varchar](255) NULL,
	[FlatKind] [varchar](255) NULL,
	[ApartmentType] [varchar](255) NULL,
	[Overlooking] [varchar](255) NULL,
	[ltnFlatKind] [varchar](255) NULL,
	[ltnApartmentType] [varchar](255) NULL,
	[ltnOverlooking] [varchar](255) NULL,
	[Class] [varchar](255) NULL,
	[Area] [float] NULL,
	[unity] [varchar](255) NULL,
	[Note] [varchar](255) NULL,
	[UnifiedNum] [varchar](256) NULL,
	[ManservantRoom] [int] NULL,
	[DriverRoom] [int] NULL,
	[CustOwnerGuid] [uniqueidentifier] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TblUpdateParkingSpecifications]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TblUpdateParkingSpecifications](
	[NO] [varchar](255) NULL,
	[NewNo] [varchar](255) NULL,
	[ParkingKind] [varchar](255) NULL,
	[Description] [varchar](255) NULL,
	[Overlooking] [varchar](255) NULL,
	[FloorNo] [int] NULL,
	[Area] [float] NULL,
	[unity] [varchar](255) NULL,
	[Note] [varchar](255) NULL,
	[CustGuid] [uniqueidentifier] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TblUpdateShopSpecifications]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TblUpdateShopSpecifications](
	[NO] [varchar](255) NULL,
	[NewNo] [varchar](255) NULL,
	[ShopKind] [varchar](255) NULL,
	[Description] [varchar](255) NULL,
	[Overlooking] [varchar](255) NULL,
	[ltnShopKind] [varchar](255) NULL,
	[LtnDescription] [varchar](255) NULL,
	[ltnOverlooking] [varchar](255) NULL,
	[Class] [varchar](255) NULL,
	[Area] [float] NULL,
	[unity] [varchar](255) NULL,
	[Note] [varchar](255) NULL,
	[UnifiedNum] [varchar](256) NULL,
	[ManservantRoom] [int] NULL,
	[DriverRoom] [int] NULL,
	[CustGuid] [uniqueidentifier] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Term]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Term](
	[Old] [varchar](256) NULL,
	[New] [varchar](256) NULL,
	[Wind] [varchar](256) NULL,
 CONSTRAINT [Uk_OldTerm] UNIQUE NONCLUSTERED 
(
	[Old] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TmpCSV]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TmpCSV](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[txt] [varchar](8000) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TransTypeField]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TransTypeField](
	[TransTypeGuid] [uniqueidentifier] NULL,
	[FieldName] [varchar](256) NULL,
	[Visible] [bit] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TransTypePrivilege]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TransTypePrivilege](
	[UserGuid] [uniqueidentifier] NULL,
	[TransTypeGuid] [uniqueidentifier] NULL,
	[Open] [bit] NULL,
	[Add] [bit] NULL,
	[Edit] [bit] NULL,
	[Del] [bit] NULL,
	[Print] [bit] NULL,
	[Design] [bit] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Tree_ParentList]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Tree_ParentList](
	[Spid] [int] NULL,
	[Id] [int] NULL,
	[Guid] [uniqueidentifier] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ucsTbl]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ucsTbl](
	[Char] [varchar](2) NULL,
	[ucs] [varchar](4) NULL,
	[UCS2] [varchar](8) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ucsTbl2]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ucsTbl2](
	[Char] [varchar](2) NULL,
	[ucs] [varchar](10) NULL,
	[unicode] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[VillaAssets]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[VillaAssets](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[ParentGuid] [uniqueidentifier] NULL,
	[AssetsGuid] [uniqueidentifier] NULL,
	[Value] [float] NULL,
	[Note] [varchar](255) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Villawallet]    Script Date: 12/27/2022 11:46:37 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Villawallet](
	[Number] [int] NOT NULL IDENTITY(1,1),
	[ParentGuid] [uniqueidentifier] NULL,
	[VillaGuid] [uniqueidentifier] NULL,
	[MainCost] [float] NULL,
	[Expense] [float] NULL,
	[BeginDate] [datetime] NULL,
	[SaleDate] [datetime] NULL,
	[SaleValue] [float] NULL
) ON [PRIMARY]
GO
/****** Object:  Index [IX_Account_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_Account_Seclvl] ON [dbo].[Account]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Apartment_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_Apartment_Seclvl] ON [dbo].[Apartment]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_ApartmentOffer_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_ApartmentOffer_Seclvl] ON [dbo].[ApartmentOffer]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Assets_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_Assets_Seclvl] ON [dbo].[Assets]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_AssetsArea_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_AssetsArea_Seclvl] ON [dbo].[AssetsArea]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_AssetsChangeArea_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_AssetsChangeArea_Seclvl] ON [dbo].[AssetsChangeArea]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_AssetsDepreciation_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_AssetsDepreciation_Seclvl] ON [dbo].[AssetsDepreciation]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_AssetsGroup_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_AssetsGroup_Seclvl] ON [dbo].[AssetsGroup]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_AssetsOperation_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_AssetsOperation_Seclvl] ON [dbo].[AssetsOperation]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Bill_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_Bill_Seclvl] ON [dbo].[Bill]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_BillType_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_BillType_Seclvl] ON [dbo].[BillType]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Branch_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_Branch_Seclvl] ON [dbo].[Branch]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Building_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_Building_Seclvl] ON [dbo].[Building]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_BuildingGuard_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_BuildingGuard_Seclvl] ON [dbo].[BuildingGuard]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_BuildingOffer_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_BuildingOffer_Seclvl] ON [dbo].[BuildingOffer]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_BuildingRecElecCounter_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_BuildingRecElecCounter_Seclvl] ON [dbo].[BuildingRecElecCounter]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_CalcQty_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_CalcQty_Seclvl] ON [dbo].[CalcQty]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_ChangeCurrencyRate_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_ChangeCurrencyRate_Seclvl] ON [dbo].[ChangeCurrencyRate]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Checks_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_Checks_Seclvl] ON [dbo].[Checks]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_ChecksPartialCollection_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_ChecksPartialCollection_Seclvl] ON [dbo].[ChecksPartialCollection]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_CheckType_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_CheckType_Seclvl] ON [dbo].[CheckType]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Complaint_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_Complaint_Seclvl] ON [dbo].[Complaint]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_ContractLog_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_ContractLog_Seclvl] ON [dbo].[ContractLog]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_ContractType_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_ContractType_Seclvl] ON [dbo].[ContractType]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_ContractWorkFlow_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_ContractWorkFlow_Seclvl] ON [dbo].[ContractWorkFlow]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Cost_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_Cost_Seclvl] ON [dbo].[Cost]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Currency_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_Currency_Seclvl] ON [dbo].[Currency]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Customer_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_Customer_Seclvl] ON [dbo].[Customer]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Earth_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_Earth_Seclvl] ON [dbo].[Earth]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_ElectricityBill_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_ElectricityBill_Seclvl] ON [dbo].[ElectricityBill]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_ElectricityType_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_ElectricityType_Seclvl] ON [dbo].[ElectricityType]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_EntryDate_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_EntryDate_Seclvl] ON [dbo].[EntryDate]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_EntryDateType_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_EntryDateType_Seclvl] ON [dbo].[EntryDateType]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_EntryType_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_EntryType_Seclvl] ON [dbo].[EntryType]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_ExternalTools_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_ExternalTools_Seclvl] ON [dbo].[ExternalTools]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_FlatContractReceiptNO_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_FlatContractReceiptNO_Seclvl] ON [dbo].[FlatContractReceiptNO]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_HEntry_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_HEntry_Seclvl] ON [dbo].[HEntry]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_IncAccount_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_IncAccount_Seclvl] ON [dbo].[IncAccount]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_IncomeSaved_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_IncomeSaved_Seclvl] ON [dbo].[IncomeSaved]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_LandContract_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_LandContract_Seclvl] ON [dbo].[LandContract]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_LandContractReceiptNO_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_LandContractReceiptNO_Seclvl] ON [dbo].[LandContractReceiptNO]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_LandOffer_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_LandOffer_Seclvl] ON [dbo].[LandOffer]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Lawsuit_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_Lawsuit_Seclvl] ON [dbo].[Lawsuit]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_LawsuitExpense_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_LawsuitExpense_Seclvl] ON [dbo].[LawsuitExpense]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_LawsuitState_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_LawsuitState_Seclvl] ON [dbo].[LawsuitState]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_LeaseApartment_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_LeaseApartment_Seclvl] ON [dbo].[LeaseApartment]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_MaintenanceContract_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_MaintenanceContract_Seclvl] ON [dbo].[MaintenanceContract]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_MaintenanceContractType_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_MaintenanceContractType_Seclvl] ON [dbo].[MaintenanceContractType]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_MaintenanceContractVisit_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_MaintenanceContractVisit_Seclvl] ON [dbo].[MaintenanceContractVisit]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_MaintenanceItem_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_MaintenanceItem_Seclvl] ON [dbo].[MaintenanceItem]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_MaintenanceOrder_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_MaintenanceOrder_Seclvl] ON [dbo].[MaintenanceOrder]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_MaintenanceWorker_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_MaintenanceWorker_Seclvl] ON [dbo].[MaintenanceWorker]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_MapsConfig_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_MapsConfig_Seclvl] ON [dbo].[MapsConfig]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Mat_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_Mat_Seclvl] ON [dbo].[Mat]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_MatGroup_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_MatGroup_Seclvl] ON [dbo].[MatGroup]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_OfferPrice_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_OfferPrice_Seclvl] ON [dbo].[OfferPrice]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_OrderType_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_OrderType_Seclvl] ON [dbo].[OrderType]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Owner_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_Owner_Seclvl] ON [dbo].[Owner]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_OwnerUnionFee_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_OwnerUnionFee_Seclvl] ON [dbo].[OwnerUnionFee]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_parking_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_parking_Seclvl] ON [dbo].[parking]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_ParkingContract_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_ParkingContract_Seclvl] ON [dbo].[ParkingContract]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_ParkingContractReceiptNO_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_ParkingContractReceiptNO_Seclvl] ON [dbo].[ParkingContractReceiptNO]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Pricing_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_Pricing_Seclvl] ON [dbo].[Pricing]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_QtyGroup_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_QtyGroup_Seclvl] ON [dbo].[QtyGroup]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Realty_Users_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_Realty_Users_Seclvl] ON [dbo].[Realty_Users]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_RealtyRestrained_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_RealtyRestrained_Seclvl] ON [dbo].[RealtyRestrained]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_ReceiptOrder_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_ReceiptOrder_Seclvl] ON [dbo].[ReceiptOrder]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_ReceiptOrderType_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_ReceiptOrderType_Seclvl] ON [dbo].[ReceiptOrderType]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Reminder_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_Reminder_Seclvl] ON [dbo].[Reminder]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_RentInfo_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_RentInfo_Seclvl] ON [dbo].[RentInfo]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Salesman_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_Salesman_Seclvl] ON [dbo].[Salesman]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Secondary_Entry_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_Secondary_Entry_Seclvl] ON [dbo].[Secondary_Entry]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_ServicesContract_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_ServicesContract_Seclvl] ON [dbo].[ServicesContract]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_ServicesContractType_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_ServicesContractType_Seclvl] ON [dbo].[ServicesContractType]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Shop_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_Shop_Seclvl] ON [dbo].[Shop]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_ShopOffer_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_ShopOffer_Seclvl] ON [dbo].[ShopOffer]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Store_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_Store_Seclvl] ON [dbo].[Store]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_StrSource_Ar]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_StrSource_Ar] ON [dbo].[StrSource]
(
	[Ar] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = ON, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_TblShortCut_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_TblShortCut_Seclvl] ON [dbo].[TblShortCut]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Trans_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_Trans_Seclvl] ON [dbo].[Trans]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_TransType_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_TransType_Seclvl] ON [dbo].[TransType]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_Villa_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_Villa_Seclvl] ON [dbo].[Villa]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_VillaOffer_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_VillaOffer_Seclvl] ON [dbo].[VillaOffer]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_wallet_Seclvl]    Script Date: 12/27/2022 11:46:37 PM ******/
CREATE NONCLUSTERED INDEX [IX_wallet_Seclvl] ON [dbo].[wallet]
(
	[SecLvl] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
ALTER TABLE [dbo].[Account] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[Account]
ADD DEFAULT GETDATE() FOR CDate;
GO
ALTER TABLE [dbo].[AccountConformity] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[Apartment] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[Apartment] ADD  DEFAULT ('') FOR [CustomerName]
GO
ALTER TABLE [dbo].[Apartment] ADD  DEFAULT ('') FOR [CustomerPhone]
GO
ALTER TABLE [dbo].[ApartmentOffer] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[AppReport] ADD  DEFAULT (getdate()) FOR [date]
GO
ALTER TABLE [dbo].[AppReport] ADD  DEFAULT (host_name()) FOR [HostName]
GO
ALTER TABLE [dbo].[arv_Filter] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[Assets] ADD  DEFAULT ((0)) FOR [Number]
GO
ALTER TABLE [dbo].[Assets] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[AssetsArea] ADD  DEFAULT ((0)) FOR [Number]
GO
ALTER TABLE [dbo].[AssetsArea] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[AssetsChangeArea] ADD  DEFAULT ((0)) FOR [Number]
GO
ALTER TABLE [dbo].[AssetsChangeArea] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[AssetsDepreciation] ADD  DEFAULT ((0)) FOR [Number]
GO
ALTER TABLE [dbo].[AssetsDepreciation] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[AssetsDepreciation] ADD  DEFAULT ((0)) FOR [IsRounded]
GO
ALTER TABLE [dbo].[AssetsGroup] ADD  DEFAULT ((0)) FOR [Number]
GO
ALTER TABLE [dbo].[AssetsGroup] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[AssetsOperation] ADD  DEFAULT ((0)) FOR [Number]
GO
ALTER TABLE [dbo].[AssetsOperation] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[AssetsOperation] ADD  DEFAULT ((0)) FOR [IsRounded]
GO
ALTER TABLE [dbo].[Bill] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[BillDetail] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[BillDiscount] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[BillOrder] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[BillOrderDetail] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[BillOrderRecipient] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[BillType] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[Branch] ADD  DEFAULT ((0)) FOR [Number]
GO
ALTER TABLE [dbo].[Branch] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[BrowsCard] ADD  DEFAULT ('') FOR [ComputerName]
GO
ALTER TABLE [dbo].[BrowsCard] ADD  DEFAULT ((0)) FOR [CheckRefrech]
GO
ALTER TABLE [dbo].[Building] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[BuildingAssets] ADD  DEFAULT ((0)) FOR [Number]
GO
ALTER TABLE [dbo].[BuildingGuard] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[BuildingOffer] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[BuildingPayType] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[BuildingRecElecCounter] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[CalcQty] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[ChangeCurrencyRate] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[Checks] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[Checks] ADD  DEFAULT ((0)) FOR [IsRounded]
GO
ALTER TABLE [dbo].[ChecksCollection] ADD  DEFAULT ((0)) FOR [IsRounded]
GO
ALTER TABLE [dbo].[ChecksCollection] ADD  DEFAULT ((1)) FOR [OperationCreateEntry]
GO
ALTER TABLE [dbo].[ChecksCollection] ADD  DEFAULT ((1)) FOR [ReturnCreateEntry]
GO
ALTER TABLE [dbo].[ChecksCollection] ADD  DEFAULT ((1)) FOR [CommCreateEntry]
GO
ALTER TABLE [dbo].[ChecksPartialCollection] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[ChecksPartialCollection] ADD  DEFAULT ((0)) FOR [IsRounded]
GO
ALTER TABLE [dbo].[CheckType] ADD  DEFAULT ((0)) FOR [Number]
GO
ALTER TABLE [dbo].[CheckType] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[CheckType] ADD  DEFAULT ('') FOR [Menu]
GO
ALTER TABLE [dbo].[Complaint] ADD  DEFAULT ((0)) FOR [Number]
GO
ALTER TABLE [dbo].[Complaint] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[ContractFlatAssets] ADD  DEFAULT ((0)) FOR [Number]
GO
ALTER TABLE [dbo].[ContractLandAssets] ADD  DEFAULT ((0)) FOR [Number]
GO
ALTER TABLE [dbo].[ContractType] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[ContractWorkFlow] ADD  DEFAULT ((0)) FOR [Number]
GO
ALTER TABLE [dbo].[ContractWorkFlow] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[Cost] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[Currency] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[CurrentUsers] ADD  DEFAULT (@@spid) FOR [Spid]
GO
ALTER TABLE [dbo].[Customer] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[Customer] ADD  DEFAULT ((0)) FOR [CardKind]
GO
ALTER TABLE [dbo].[Customer] ADD  DEFAULT ((0)) FOR [CustKind]
GO
ALTER TABLE [dbo].[DEntry] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[DEntry] ADD  DEFAULT ((1)) FOR [IsVisible]
GO
ALTER TABLE [dbo].[DMD_const] ADD  DEFAULT ('') FOR [VName]
GO
ALTER TABLE [dbo].[DMD_const] ADD  DEFAULT ('') FOR [Value]
GO
ALTER TABLE [dbo].[Earth] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[ElectricityBill] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[ElectricityType] ADD  DEFAULT ((0)) FOR [Number]
GO
ALTER TABLE [dbo].[ElectricityType] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[EntryDateType] ADD  DEFAULT ((0)) FOR [Number]
GO
ALTER TABLE [dbo].[EntryDateType] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[EntryType] ADD  DEFAULT ((0)) FOR [Number]
GO
ALTER TABLE [dbo].[EntryType] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[ExternalTools] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[FlatAssets] ADD  DEFAULT ((0)) FOR [Number]
GO
ALTER TABLE [dbo].[FlatContractFee] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[FlatContractReceiptNO] ADD  DEFAULT ((0)) FOR [Number]
GO
ALTER TABLE [dbo].[FlatContractReceiptNO] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[HEntry] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[HEntry] ADD  DEFAULT ((0)) FOR [ParentKind]
GO
ALTER TABLE [dbo].[HEntry] ADD  DEFAULT ((0)) FOR [IsPosted]
GO
ALTER TABLE [dbo].[IncAccount] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[IncomeSaved] ADD  DEFAULT ((0)) FOR [Number]
GO
ALTER TABLE [dbo].[IncomeSaved] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[IncomeSaved] ADD  DEFAULT (getdate()) FOR [Date]
GO
ALTER TABLE [dbo].[LandContract] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[LandContract] ADD  DEFAULT ((0)) FOR [IsRounded]
GO
ALTER TABLE [dbo].[LandContractFee] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[LandContractReceiptNO] ADD  DEFAULT ((0)) FOR [Number]
GO
ALTER TABLE [dbo].[LandContractReceiptNO] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[LandOffer] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[Lawsuit] ADD  DEFAULT ((0)) FOR [Number]
GO
ALTER TABLE [dbo].[Lawsuit] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[LawsuitExpense] ADD  DEFAULT ((0)) FOR [Number]
GO
ALTER TABLE [dbo].[LawsuitExpense] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[LawsuitExpense] ADD  DEFAULT ((0)) FOR [IsRounded]
GO
ALTER TABLE [dbo].[LawsuitState] ADD  DEFAULT ((0)) FOR [Number]
GO
ALTER TABLE [dbo].[LawsuitState] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[LeaseApartment] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[LeaseApartment] ADD  DEFAULT ((0)) FOR [IsRounded]
GO
ALTER TABLE [dbo].[LinkCe] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[ListOrderTypeGroups] ADD  DEFAULT (@@spid) FOR [Spid]
GO
ALTER TABLE [dbo].[LockCard] ADD  DEFAULT ('') FOR [ComputerName]
GO
ALTER TABLE [dbo].[LogFile] ADD  DEFAULT ('') FOR [Username]
GO
ALTER TABLE [dbo].[LogFile] ADD  DEFAULT ('') FOR [ComputerName]
GO
ALTER TABLE [dbo].[LogFile] ADD  DEFAULT ((0)) FOR [CardId]
GO
ALTER TABLE [dbo].[LogFile] ADD  DEFAULT (getdate()) FOR [ODate]
GO
ALTER TABLE [dbo].[LogFile] ADD  DEFAULT ('') FOR [Opration]
GO
ALTER TABLE [dbo].[LogFile] ADD  DEFAULT ('') FOR [Note]
GO
ALTER TABLE [dbo].[MaintenanceContract] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[MaintenanceContract] ADD  DEFAULT ((0)) FOR [IsRounded]
GO
ALTER TABLE [dbo].[MaintenanceContractType] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[MaintenanceContractVisit] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[MaintenanceItem] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[MaintenanceOrder] ADD  DEFAULT ((0)) FOR [Number]
GO
ALTER TABLE [dbo].[MaintenanceOrder] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[MaintenanceWorker] ADD  DEFAULT ((0)) FOR [Number]
GO
ALTER TABLE [dbo].[MaintenanceWorker] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[MapsConfig] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[MapsObject] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[Mat] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[MatGroup] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[MsgTbl] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[MsgTbl] ADD  DEFAULT (getdate()) FOR [Date]
GO
ALTER TABLE [dbo].[OfferPrice] ADD  DEFAULT ((0)) FOR [Number]
GO
ALTER TABLE [dbo].[OfferPrice] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[OfferPrice] ADD  DEFAULT (getdate()) FOR [Date]
GO
ALTER TABLE [dbo].[OnlyCheck] ADD  DEFAULT (@@spid) FOR [Spid]
GO
ALTER TABLE [dbo].[OrderType] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[Owner] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[OwnerUnionFee] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[parking] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[parking] ADD  DEFAULT ('') FOR [CustomerName]
GO
ALTER TABLE [dbo].[parking] ADD  DEFAULT ('') FOR [CustomerPhone]
GO
ALTER TABLE [dbo].[ParkingContract] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[ParkingContract] ADD  DEFAULT ((0)) FOR [IsRounded]
GO
ALTER TABLE [dbo].[ParkingContractFee] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[ParkingContractReceiptNO] ADD  DEFAULT ((0)) FOR [Number]
GO
ALTER TABLE [dbo].[ParkingContractReceiptNO] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[Photos] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[Pricing] ADD  DEFAULT ((0)) FOR [Number]
GO
ALTER TABLE [dbo].[Pricing] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[PricingDetail] ADD  DEFAULT ((-1)) FOR [Number]
GO
ALTER TABLE [dbo].[Progress_Tbl] ADD  DEFAULT (@@spid) FOR [Spid]
GO
ALTER TABLE [dbo].[Progress_Tbl] ADD  DEFAULT (getdate()) FOR [Time]
GO
ALTER TABLE [dbo].[ProjectCostDetail] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[pRun] ADD  DEFAULT (getdate()) FOR [Date]
GO
ALTER TABLE [dbo].[QtyGroup] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[Realty_Detail_users] ADD  DEFAULT ((-1)) FOR [Number]
GO
ALTER TABLE [dbo].[Realty_Detail_users] ADD  DEFAULT ((0)) FOR [IdCard]
GO
ALTER TABLE [dbo].[Realty_LogCard] ADD  DEFAULT ('') FOR [ComputerName]
GO
ALTER TABLE [dbo].[Realty_LogCard] ADD  DEFAULT ((0)) FOR [CardId]
GO
ALTER TABLE [dbo].[Realty_LogCard] ADD  DEFAULT (getdate()) FOR [Date]
GO
ALTER TABLE [dbo].[Realty_LogCard] ADD  DEFAULT ('') FOR [Opration]
GO
ALTER TABLE [dbo].[Realty_LogCard] ADD  DEFAULT ('') FOR [Note]
GO
ALTER TABLE [dbo].[Realty_Users] ADD  DEFAULT ((0)) FOR [Number]
GO
ALTER TABLE [dbo].[Realty_Users] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[Realty_Users] ADD  DEFAULT ('') FOR [Password]
GO
ALTER TABLE [dbo].[Realty_Users] ADD  DEFAULT ((0)) FOR [bAdmin]
GO
ALTER TABLE [dbo].[RealtyRestrained] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[ReceiptOrder] ADD  DEFAULT ((0)) FOR [Number]
GO
ALTER TABLE [dbo].[ReceiptOrder] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[ReceiptOrderDetail] ADD  DEFAULT ((0)) FOR [Number]
GO
ALTER TABLE [dbo].[ReceiptOrderDetail] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[ReceiptOrderType] ADD  DEFAULT ((0)) FOR [Number]
GO
ALTER TABLE [dbo].[ReceiptOrderType] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[ReceiptOrderTypeDetail] ADD  DEFAULT ((0)) FOR [Number]
GO
ALTER TABLE [dbo].[Reminder] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[Reminder] ADD  DEFAULT ((0)) FOR [Finished]
GO
ALTER TABLE [dbo].[RentInfo] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[Resource] ADD  DEFAULT (@@spid) FOR [Spid]
GO
ALTER TABLE [dbo].[Resource] ADD  DEFAULT ((0)) FOR [Kind]
GO
ALTER TABLE [dbo].[Resource] ADD  DEFAULT ((0)) FOR [Tag]
GO
ALTER TABLE [dbo].[Salesman] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[Secondary_Entry] ADD  DEFAULT ((0)) FOR [IsRounded]
GO
ALTER TABLE [dbo].[ServicesContract] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[ServicesContract] ADD  DEFAULT ((0)) FOR [IsRounded]
GO
ALTER TABLE [dbo].[ServicesContractType] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[Shop] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[ShopAssets] ADD  DEFAULT ((0)) FOR [Number]
GO
ALTER TABLE [dbo].[ShopOffer] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[SMSInfo] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[SMSLog] ADD  DEFAULT (getdate()) FOR [Date]
GO
ALTER TABLE [dbo].[SMSLog] ADD  DEFAULT (host_name()) FOR [Host_Name]
GO
ALTER TABLE [dbo].[SMSSetup] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[Store] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[TblShortCut] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[Trace] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[Trans] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[TransDetail] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[TransDiscount] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[TransType] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[Tree_ParentList] ADD  DEFAULT (@@spid) FOR [Spid]
GO
ALTER TABLE [dbo].[Villa] ADD  DEFAULT ((0)) FOR [Number]
GO
ALTER TABLE [dbo].[Villa] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[VillaAssets] ADD  DEFAULT ((0)) FOR [Number]
GO
ALTER TABLE [dbo].[VillaOffer] ADD  DEFAULT ((0)) FOR [Number]
GO
ALTER TABLE [dbo].[VillaOffer] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[wallet] ADD  DEFAULT (newid()) FOR [Guid]
GO
ALTER TABLE [dbo].[Account]  WITH CHECK ADD  CONSTRAINT [FK_Account_CurrencyGuid] FOREIGN KEY([CurrencyGUID])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[Account] CHECK CONSTRAINT [FK_Account_CurrencyGuid]
GO
ALTER TABLE [dbo].[Account]  WITH CHECK ADD  CONSTRAINT [FK_Account_FinalGUID] FOREIGN KEY([FinalGUID])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[Account] CHECK CONSTRAINT [FK_Account_FinalGUID]
GO
ALTER TABLE [dbo].[Account]  WITH CHECK ADD  CONSTRAINT [FK_Account_ParentGUID] FOREIGN KEY([ParentGUID])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[Account] CHECK CONSTRAINT [FK_Account_ParentGUID]
GO
ALTER TABLE [dbo].[AccountAccumulate]  WITH CHECK ADD  CONSTRAINT [FK_AccountAccumulate_AccountGuid] FOREIGN KEY([AccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[AccountAccumulate] CHECK CONSTRAINT [FK_AccountAccumulate_AccountGuid]
GO
ALTER TABLE [dbo].[AccountAccumulate]  WITH CHECK ADD  CONSTRAINT [FK_AccountAccumulate_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[Account] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[AccountAccumulate] CHECK CONSTRAINT [FK_AccountAccumulate_ParentGuid]
GO
ALTER TABLE [dbo].[AccountConformity]  WITH CHECK ADD  CONSTRAINT [FK_AccountConformity_AccountGuid] FOREIGN KEY([AccountGuid])
REFERENCES [dbo].[Account] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[AccountConformity] CHECK CONSTRAINT [FK_AccountConformity_AccountGuid]
GO
ALTER TABLE [dbo].[AccountConformity]  WITH CHECK ADD  CONSTRAINT [FK_AccountConformity_CostGuid] FOREIGN KEY([CostGuid])
REFERENCES [dbo].[Cost] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[AccountConformity] CHECK CONSTRAINT [FK_AccountConformity_CostGuid]
GO
ALTER TABLE [dbo].[AccountConformity]  WITH CHECK ADD  CONSTRAINT [FK_AccountConformity_CurrencyGuid] FOREIGN KEY([CurrencyGuid])
REFERENCES [dbo].[Currency] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[AccountConformity] CHECK CONSTRAINT [FK_AccountConformity_CurrencyGuid]
GO
ALTER TABLE [dbo].[AccountConformity]  WITH CHECK ADD  CONSTRAINT [FK_AccountConformity_UserGuid] FOREIGN KEY([UserGuid])
REFERENCES [dbo].[Realty_Users] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[AccountConformity] CHECK CONSTRAINT [FK_AccountConformity_UserGuid]
GO
ALTER TABLE [dbo].[AccountDistributive]  WITH CHECK ADD  CONSTRAINT [FK_AccountDistributive_AccountGuid] FOREIGN KEY([AccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[AccountDistributive] CHECK CONSTRAINT [FK_AccountDistributive_AccountGuid]
GO
ALTER TABLE [dbo].[AccountDistributive]  WITH CHECK ADD  CONSTRAINT [FK_AccountDistributive_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[Account] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[AccountDistributive] CHECK CONSTRAINT [FK_AccountDistributive_ParentGuid]
GO
ALTER TABLE [dbo].[AccountFavoriteConfig]  WITH CHECK ADD  CONSTRAINT [FK_AccountFavoriteConfig_AccountGuid] FOREIGN KEY([AccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[AccountFavoriteConfig] CHECK CONSTRAINT [FK_AccountFavoriteConfig_AccountGuid]
GO
ALTER TABLE [dbo].[AccountFavoriteConfig]  WITH CHECK ADD  CONSTRAINT [FK_AccountFavoriteConfig_Realty_Users] FOREIGN KEY([UserGuid])
REFERENCES [dbo].[Realty_Users] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[AccountFavoriteConfig] CHECK CONSTRAINT [FK_AccountFavoriteConfig_Realty_Users]
GO
ALTER TABLE [dbo].[AccumulateFlat]  WITH CHECK ADD  CONSTRAINT [FK_AccumulateFlat_FlatGuid] FOREIGN KEY([FlatGuid])
REFERENCES [dbo].[Apartment] ([Guid])
GO
ALTER TABLE [dbo].[AccumulateFlat] CHECK CONSTRAINT [FK_AccumulateFlat_FlatGuid]
GO
ALTER TABLE [dbo].[AccumulateFlat]  WITH CHECK ADD  CONSTRAINT [FK_AccumulateFlat_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[Apartment] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[AccumulateFlat] CHECK CONSTRAINT [FK_AccumulateFlat_ParentGuid]
GO
ALTER TABLE [dbo].[AccumulateLand]  WITH CHECK ADD  CONSTRAINT [FK_AccumulateLand_LandGuid] FOREIGN KEY([LandGuid])
REFERENCES [dbo].[Earth] ([Guid])
GO
ALTER TABLE [dbo].[AccumulateLand] CHECK CONSTRAINT [FK_AccumulateLand_LandGuid]
GO
ALTER TABLE [dbo].[AccumulateLand]  WITH CHECK ADD  CONSTRAINT [FK_AccumulateLand_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[Earth] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[AccumulateLand] CHECK CONSTRAINT [FK_AccumulateLand_ParentGuid]
GO
ALTER TABLE [dbo].[AccumulateParking]  WITH CHECK ADD  CONSTRAINT [FK_Accumulateparking_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[parking] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[AccumulateParking] CHECK CONSTRAINT [FK_Accumulateparking_ParentGuid]
GO
ALTER TABLE [dbo].[AccumulateParking]  WITH CHECK ADD  CONSTRAINT [FK_Accumulateparking_parkingGuid] FOREIGN KEY([ParkingGuid])
REFERENCES [dbo].[parking] ([Guid])
GO
ALTER TABLE [dbo].[AccumulateParking] CHECK CONSTRAINT [FK_Accumulateparking_parkingGuid]
GO
ALTER TABLE [dbo].[AccumulateShop]  WITH CHECK ADD  CONSTRAINT [FK_AccumulateShop_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[Shop] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[AccumulateShop] CHECK CONSTRAINT [FK_AccumulateShop_ParentGuid]
GO
ALTER TABLE [dbo].[AccumulateShop]  WITH CHECK ADD  CONSTRAINT [FK_AccumulateShop_ShopGuid] FOREIGN KEY([ShopGuid])
REFERENCES [dbo].[Shop] ([Guid])
GO
ALTER TABLE [dbo].[AccumulateShop] CHECK CONSTRAINT [FK_AccumulateShop_ShopGuid]
GO
ALTER TABLE [dbo].[AlarmCheckTypeSource]  WITH CHECK ADD  CONSTRAINT [FK_AlarmCheckTypeSource_CheckTypeGuid] FOREIGN KEY([CheckTypeGuid])
REFERENCES [dbo].[CheckType] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[AlarmCheckTypeSource] CHECK CONSTRAINT [FK_AlarmCheckTypeSource_CheckTypeGuid]
GO
ALTER TABLE [dbo].[AlarmCheckTypeSource]  WITH CHECK ADD  CONSTRAINT [FK_AlarmCheckTypeSource_UserGuid] FOREIGN KEY([UserGuid])
REFERENCES [dbo].[Realty_Users] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[AlarmCheckTypeSource] CHECK CONSTRAINT [FK_AlarmCheckTypeSource_UserGuid]
GO
ALTER TABLE [dbo].[Apartment]  WITH CHECK ADD  CONSTRAINT [FK_Apartment_BuildingGuid] FOREIGN KEY([BuildingGuid])
REFERENCES [dbo].[Building] ([Guid])
GO
ALTER TABLE [dbo].[Apartment] CHECK CONSTRAINT [FK_Apartment_BuildingGuid]
GO
ALTER TABLE [dbo].[Apartment]  WITH CHECK ADD  CONSTRAINT [FK_Apartment_CostCurrencyGUID] FOREIGN KEY([CostCurrencyGUID])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[Apartment] CHECK CONSTRAINT [FK_Apartment_CostCurrencyGUID]
GO
ALTER TABLE [dbo].[Apartment]  WITH CHECK ADD  CONSTRAINT [FK_Apartment_CostGuid] FOREIGN KEY([CostGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[Apartment] CHECK CONSTRAINT [FK_Apartment_CostGuid]
GO
ALTER TABLE [dbo].[Apartment]  WITH CHECK ADD  CONSTRAINT [FK_Apartment_CurrencyBeginLandGuid] FOREIGN KEY([CurrencyBeginLandGuid])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[Apartment] CHECK CONSTRAINT [FK_Apartment_CurrencyBeginLandGuid]
GO
ALTER TABLE [dbo].[Apartment]  WITH CHECK ADD  CONSTRAINT [FK_Apartment_CustGuid] FOREIGN KEY([CustGuid])
REFERENCES [dbo].[Customer] ([Guid])
GO
ALTER TABLE [dbo].[Apartment] CHECK CONSTRAINT [FK_Apartment_CustGuid]
GO
ALTER TABLE [dbo].[Apartment]  WITH CHECK ADD  CONSTRAINT [FK_Apartment_CustOwnerGuid] FOREIGN KEY([CustOwnerGuid])
REFERENCES [dbo].[Customer] ([Guid])
GO
ALTER TABLE [dbo].[Apartment] CHECK CONSTRAINT [FK_Apartment_CustOwnerGuid]
GO
ALTER TABLE [dbo].[Apartment]  WITH CHECK ADD  CONSTRAINT [FK_Apartment_PurchaseAccountGuid] FOREIGN KEY([PurchaseAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[Apartment] CHECK CONSTRAINT [FK_Apartment_PurchaseAccountGuid]
GO
ALTER TABLE [dbo].[Apartment]  WITH CHECK ADD  CONSTRAINT [FK_Apartment_RentCurrencyGuid] FOREIGN KEY([RentCurrencyGuid])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[Apartment] CHECK CONSTRAINT [FK_Apartment_RentCurrencyGuid]
GO
ALTER TABLE [dbo].[Apartment]  WITH CHECK ADD  CONSTRAINT [FK_Apartment_UserGuid] FOREIGN KEY([RestrainedUserGuid])
REFERENCES [dbo].[Realty_Users] ([Guid])
GO
ALTER TABLE [dbo].[Apartment] CHECK CONSTRAINT [FK_Apartment_UserGuid]
GO
ALTER TABLE [dbo].[arv_files]  WITH CHECK ADD  CONSTRAINT [FK_arv_files_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[Photos] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[arv_files] CHECK CONSTRAINT [FK_arv_files_ParentGuid]
GO
ALTER TABLE [dbo].[arv_FilterDetail]  WITH CHECK ADD  CONSTRAINT [Fk_arv_FilterDetail_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[arv_Filter] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[arv_FilterDetail] CHECK CONSTRAINT [Fk_arv_FilterDetail_ParentGuid]
GO
ALTER TABLE [dbo].[arv_FilterParams]  WITH CHECK ADD  CONSTRAINT [Fk_arv_FilterParams_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[arv_Filter] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[arv_FilterParams] CHECK CONSTRAINT [Fk_arv_FilterParams_ParentGuid]
GO
ALTER TABLE [dbo].[Assets]  WITH CHECK ADD  CONSTRAINT [FK_Assets_AssetsAreaGuid] FOREIGN KEY([AssetsAreaGuid])
REFERENCES [dbo].[AssetsArea] ([Guid])
GO
ALTER TABLE [dbo].[Assets] CHECK CONSTRAINT [FK_Assets_AssetsAreaGuid]
GO
ALTER TABLE [dbo].[Assets]  WITH CHECK ADD  CONSTRAINT [FK_Assets_AssetsGroupGuid] FOREIGN KEY([AssetsGroupGuid])
REFERENCES [dbo].[AssetsGroup] ([Guid])
GO
ALTER TABLE [dbo].[Assets] CHECK CONSTRAINT [FK_Assets_AssetsGroupGuid]
GO
ALTER TABLE [dbo].[Assets]  WITH CHECK ADD  CONSTRAINT [FK_Assets_AsstesAccountGuid] FOREIGN KEY([AsstesAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[Assets] CHECK CONSTRAINT [FK_Assets_AsstesAccountGuid]
GO
ALTER TABLE [dbo].[Assets]  WITH CHECK ADD  CONSTRAINT [FK_Assets_CurrencyGuid] FOREIGN KEY([CurrencyGUID])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[Assets] CHECK CONSTRAINT [FK_Assets_CurrencyGuid]
GO
ALTER TABLE [dbo].[Assets]  WITH CHECK ADD  CONSTRAINT [FK_Assets_CurrencySaleGuid] FOREIGN KEY([CurrencySaleGUID])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[Assets] CHECK CONSTRAINT [FK_Assets_CurrencySaleGuid]
GO
ALTER TABLE [dbo].[Assets]  WITH CHECK ADD  CONSTRAINT [FK_Assets_CurrentAssetsAreaGuid] FOREIGN KEY([CurrentAssetsAreaGuid])
REFERENCES [dbo].[AssetsArea] ([Guid])
GO
ALTER TABLE [dbo].[Assets] CHECK CONSTRAINT [FK_Assets_CurrentAssetsAreaGuid]
GO
ALTER TABLE [dbo].[Assets]  WITH CHECK ADD  CONSTRAINT [FK_Assets_DepreciationAccountGuid] FOREIGN KEY([DepreciationAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[Assets] CHECK CONSTRAINT [FK_Assets_DepreciationAccountGuid]
GO
ALTER TABLE [dbo].[Assets]  WITH CHECK ADD  CONSTRAINT [FK_Assets_DepreciationTotalAccountGuid] FOREIGN KEY([DepreciationTotalAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[Assets] CHECK CONSTRAINT [FK_Assets_DepreciationTotalAccountGuid]
GO
ALTER TABLE [dbo].[Assets]  WITH CHECK ADD  CONSTRAINT [FK_Assets_EnterAccountGuid] FOREIGN KEY([EnterAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[Assets] CHECK CONSTRAINT [FK_Assets_EnterAccountGuid]
GO
ALTER TABLE [dbo].[Assets]  WITH CHECK ADD  CONSTRAINT [FK_Assets_EnterCostGuid] FOREIGN KEY([EnterCostGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[Assets] CHECK CONSTRAINT [FK_Assets_EnterCostGuid]
GO
ALTER TABLE [dbo].[Assets]  WITH CHECK ADD  CONSTRAINT [FK_Assets_EnterCreditCostGuid] FOREIGN KEY([EnterCreditCostGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[Assets] CHECK CONSTRAINT [FK_Assets_EnterCreditCostGuid]
GO
ALTER TABLE [dbo].[Assets]  WITH CHECK ADD  CONSTRAINT [FK_Assets_EvaluationAccountGuid] FOREIGN KEY([EvaluationAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[Assets] CHECK CONSTRAINT [FK_Assets_EvaluationAccountGuid]
GO
ALTER TABLE [dbo].[Assets]  WITH CHECK ADD  CONSTRAINT [FK_Assets_ExpenseAccountGuid] FOREIGN KEY([ExpenseAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[Assets] CHECK CONSTRAINT [FK_Assets_ExpenseAccountGuid]
GO
ALTER TABLE [dbo].[Assets]  WITH CHECK ADD  CONSTRAINT [FK_Assets_lossesAccountGuid] FOREIGN KEY([lossesAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[Assets] CHECK CONSTRAINT [FK_Assets_lossesAccountGuid]
GO
ALTER TABLE [dbo].[Assets]  WITH CHECK ADD  CONSTRAINT [FK_Assets_ProfitAccountGuid] FOREIGN KEY([ProfitAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[Assets] CHECK CONSTRAINT [FK_Assets_ProfitAccountGuid]
GO
ALTER TABLE [dbo].[Assets]  WITH CHECK ADD  CONSTRAINT [FK_Assets_SalesAccountGuid] FOREIGN KEY([SalesAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[Assets] CHECK CONSTRAINT [FK_Assets_SalesAccountGuid]
GO
ALTER TABLE [dbo].[AssetsArea]  WITH CHECK ADD  CONSTRAINT [FK_AssetsArea_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[AssetsArea] ([Guid])
GO
ALTER TABLE [dbo].[AssetsArea] CHECK CONSTRAINT [FK_AssetsArea_ParentGuid]
GO
ALTER TABLE [dbo].[AssetsChangeArea]  WITH CHECK ADD  CONSTRAINT [FK_AssetsChangeArea_AreaGuid] FOREIGN KEY([AreaGuid])
REFERENCES [dbo].[AssetsArea] ([Guid])
GO
ALTER TABLE [dbo].[AssetsChangeArea] CHECK CONSTRAINT [FK_AssetsChangeArea_AreaGuid]
GO
ALTER TABLE [dbo].[AssetsChangeArea]  WITH CHECK ADD  CONSTRAINT [FK_AssetsChangeArea_AssetsGuid] FOREIGN KEY([AssetsGuid])
REFERENCES [dbo].[Assets] ([Guid])
GO
ALTER TABLE [dbo].[AssetsChangeArea] CHECK CONSTRAINT [FK_AssetsChangeArea_AssetsGuid]
GO
ALTER TABLE [dbo].[AssetsChangeArea]  WITH CHECK ADD  CONSTRAINT [FK_AssetsChangeArea_CurrentAreaGuid] FOREIGN KEY([CurrentAreaGuid])
REFERENCES [dbo].[AssetsArea] ([Guid])
GO
ALTER TABLE [dbo].[AssetsChangeArea] CHECK CONSTRAINT [FK_AssetsChangeArea_CurrentAreaGuid]
GO
ALTER TABLE [dbo].[AssetsDepreciation]  WITH CHECK ADD  CONSTRAINT [FK_AAssetsDepreciation_AssetsGroupGuid] FOREIGN KEY([AssetsGroupGuid])
REFERENCES [dbo].[AssetsGroup] ([Guid])
GO
ALTER TABLE [dbo].[AssetsDepreciation] CHECK CONSTRAINT [FK_AAssetsDepreciation_AssetsGroupGuid]
GO
ALTER TABLE [dbo].[AssetsDepreciation]  WITH CHECK ADD  CONSTRAINT [FK_AssetsDepreciation_AssetsAreaGuid] FOREIGN KEY([AssetsAreaGuid])
REFERENCES [dbo].[AssetsArea] ([Guid])
GO
ALTER TABLE [dbo].[AssetsDepreciation] CHECK CONSTRAINT [FK_AssetsDepreciation_AssetsAreaGuid]
GO
ALTER TABLE [dbo].[AssetsDepreciation]  WITH CHECK ADD  CONSTRAINT [FK_AssetsDepreciation_AssetsGuid] FOREIGN KEY([AssetsGuid])
REFERENCES [dbo].[Assets] ([Guid])
GO
ALTER TABLE [dbo].[AssetsDepreciation] CHECK CONSTRAINT [FK_AssetsDepreciation_AssetsGuid]
GO
ALTER TABLE [dbo].[AssetsDepreciation]  WITH CHECK ADD  CONSTRAINT [FK_AssetsDepreciation_CreditCostGUID] FOREIGN KEY([CreditCostGUID])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[AssetsDepreciation] CHECK CONSTRAINT [FK_AssetsDepreciation_CreditCostGUID]
GO
ALTER TABLE [dbo].[AssetsDepreciation]  WITH CHECK ADD  CONSTRAINT [FK_AssetsDepreciation_CurrencyGuid] FOREIGN KEY([CurrencyGUID])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[AssetsDepreciation] CHECK CONSTRAINT [FK_AssetsDepreciation_CurrencyGuid]
GO
ALTER TABLE [dbo].[AssetsDepreciation]  WITH CHECK ADD  CONSTRAINT [FK_AssetsDepreciation_DebitCostGUID] FOREIGN KEY([DebitCostGUID])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[AssetsDepreciation] CHECK CONSTRAINT [FK_AssetsDepreciation_DebitCostGUID]
GO
ALTER TABLE [dbo].[AssetsDepreciationDetail]  WITH CHECK ADD  CONSTRAINT [FK_AssetsDepreciationDetail_AssetsGuid] FOREIGN KEY([AssetsGuid])
REFERENCES [dbo].[Assets] ([Guid])
GO
ALTER TABLE [dbo].[AssetsDepreciationDetail] CHECK CONSTRAINT [FK_AssetsDepreciationDetail_AssetsGuid]
GO
ALTER TABLE [dbo].[AssetsDepreciationDetail]  WITH CHECK ADD  CONSTRAINT [FK_AssetsDepreciationDetail_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[AssetsDepreciation] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[AssetsDepreciationDetail] CHECK CONSTRAINT [FK_AssetsDepreciationDetail_ParentGuid]
GO
ALTER TABLE [dbo].[AssetsGroup]  WITH CHECK ADD  CONSTRAINT [FK_AssetsGroup_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[AssetsGroup] ([Guid])
GO
ALTER TABLE [dbo].[AssetsGroup] CHECK CONSTRAINT [FK_AssetsGroup_ParentGuid]
GO
ALTER TABLE [dbo].[AssetsOperation]  WITH CHECK ADD  CONSTRAINT [FK_Assets_CreditCostGuid] FOREIGN KEY([CreditCostGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[AssetsOperation] CHECK CONSTRAINT [FK_Assets_CreditCostGuid]
GO
ALTER TABLE [dbo].[AssetsOperation]  WITH CHECK ADD  CONSTRAINT [FK_Assets_DebitCostGuid] FOREIGN KEY([DebitCostGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[AssetsOperation] CHECK CONSTRAINT [FK_Assets_DebitCostGuid]
GO
ALTER TABLE [dbo].[AssetsOperation]  WITH CHECK ADD  CONSTRAINT [FK_AssetsOperation_AccountGuid] FOREIGN KEY([AccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[AssetsOperation] CHECK CONSTRAINT [FK_AssetsOperation_AccountGuid]
GO
ALTER TABLE [dbo].[AssetsOperation]  WITH CHECK ADD  CONSTRAINT [FK_AssetsOperation_AssetsGuid] FOREIGN KEY([AssetsGuid])
REFERENCES [dbo].[Assets] ([Guid])
GO
ALTER TABLE [dbo].[AssetsOperation] CHECK CONSTRAINT [FK_AssetsOperation_AssetsGuid]
GO
ALTER TABLE [dbo].[AssetsOperation]  WITH CHECK ADD  CONSTRAINT [FK_AssetsOperation_CurrencyGuid] FOREIGN KEY([CurrencyGUID])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[AssetsOperation] CHECK CONSTRAINT [FK_AssetsOperation_CurrencyGuid]
GO
ALTER TABLE [dbo].[Bill]  WITH CHECK ADD  CONSTRAINT [FK_Bill_BranchGuid] FOREIGN KEY([BranchGuid])
REFERENCES [dbo].[Branch] ([Guid])
GO
ALTER TABLE [dbo].[Bill] CHECK CONSTRAINT [FK_Bill_BranchGuid]
GO
ALTER TABLE [dbo].[Bill]  WITH CHECK ADD  CONSTRAINT [FK_Bill_CostGuid] FOREIGN KEY([CostGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[Bill] CHECK CONSTRAINT [FK_Bill_CostGuid]
GO
ALTER TABLE [dbo].[Bill]  WITH CHECK ADD  CONSTRAINT [FK_Bill_CurrencyGuid] FOREIGN KEY([CurrencyGuid])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[Bill] CHECK CONSTRAINT [FK_Bill_CurrencyGuid]
GO
ALTER TABLE [dbo].[Bill]  WITH CHECK ADD  CONSTRAINT [FK_Bill_CustAccGuid] FOREIGN KEY([CustAccGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[Bill] CHECK CONSTRAINT [FK_Bill_CustAccGuid]
GO
ALTER TABLE [dbo].[Bill]  WITH CHECK ADD  CONSTRAINT [FK_Bill_CustGuid] FOREIGN KEY([CustGuid])
REFERENCES [dbo].[Customer] ([Guid])
GO
ALTER TABLE [dbo].[Bill] CHECK CONSTRAINT [FK_Bill_CustGuid]
GO
ALTER TABLE [dbo].[Bill]  WITH CHECK ADD  CONSTRAINT [FK_Bill_StoreGuid] FOREIGN KEY([StoreGuid])
REFERENCES [dbo].[Store] ([Guid])
GO
ALTER TABLE [dbo].[Bill] CHECK CONSTRAINT [FK_Bill_StoreGuid]
GO
ALTER TABLE [dbo].[Bill]  WITH CHECK ADD  CONSTRAINT [FK_Bill_TypeGuid] FOREIGN KEY([TypeGuid])
REFERENCES [dbo].[BillType] ([Guid])
GO
ALTER TABLE [dbo].[Bill] CHECK CONSTRAINT [FK_Bill_TypeGuid]
GO
ALTER TABLE [dbo].[BillDetail]  WITH CHECK ADD  CONSTRAINT [FK_BillDetail_CostGuid] FOREIGN KEY([CostGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[BillDetail] CHECK CONSTRAINT [FK_BillDetail_CostGuid]
GO
ALTER TABLE [dbo].[BillDetail]  WITH CHECK ADD  CONSTRAINT [FK_BillDetail_MatGuid] FOREIGN KEY([MatGuid])
REFERENCES [dbo].[Mat] ([Guid])
GO
ALTER TABLE [dbo].[BillDetail] CHECK CONSTRAINT [FK_BillDetail_MatGuid]
GO
ALTER TABLE [dbo].[BillDetail]  WITH CHECK ADD  CONSTRAINT [Fk_BillDetail_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[Bill] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[BillDetail] CHECK CONSTRAINT [Fk_BillDetail_ParentGuid]
GO
ALTER TABLE [dbo].[BillDetail]  WITH CHECK ADD  CONSTRAINT [FK_BillDetail_StoretGuid] FOREIGN KEY([StoreGuid])
REFERENCES [dbo].[Store] ([Guid])
GO
ALTER TABLE [dbo].[BillDetail] CHECK CONSTRAINT [FK_BillDetail_StoretGuid]
GO
ALTER TABLE [dbo].[BillDetail_Tmp]  WITH CHECK ADD  CONSTRAINT [FK_BillDetail_Tmp_MatGuid] FOREIGN KEY([MatGuid])
REFERENCES [dbo].[Mat] ([Guid])
GO
ALTER TABLE [dbo].[BillDetail_Tmp] CHECK CONSTRAINT [FK_BillDetail_Tmp_MatGuid]
GO
ALTER TABLE [dbo].[BillDetail_Tmp]  WITH CHECK ADD  CONSTRAINT [FK_BillDetail_Tmp_StoretGuid] FOREIGN KEY([StoreGuid])
REFERENCES [dbo].[Store] ([Guid])
GO
ALTER TABLE [dbo].[BillDetail_Tmp] CHECK CONSTRAINT [FK_BillDetail_Tmp_StoretGuid]
GO
ALTER TABLE [dbo].[BillDiscount]  WITH CHECK ADD  CONSTRAINT [FK_BillDiscount_AccountGuid] FOREIGN KEY([AccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[BillDiscount] CHECK CONSTRAINT [FK_BillDiscount_AccountGuid]
GO
ALTER TABLE [dbo].[BillDiscount]  WITH CHECK ADD  CONSTRAINT [FK_BillDiscount_CostGuid] FOREIGN KEY([CostGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[BillDiscount] CHECK CONSTRAINT [FK_BillDiscount_CostGuid]
GO
ALTER TABLE [dbo].[BillDiscount]  WITH CHECK ADD  CONSTRAINT [FK_BillDiscount_CurrencyGuid] FOREIGN KEY([CurrencyGuid])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[BillDiscount] CHECK CONSTRAINT [FK_BillDiscount_CurrencyGuid]
GO
ALTER TABLE [dbo].[BillDiscount]  WITH CHECK ADD  CONSTRAINT [FK_BillDiscount_obverseAccountGuid] FOREIGN KEY([obverseAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[BillDiscount] CHECK CONSTRAINT [FK_BillDiscount_obverseAccountGuid]
GO
ALTER TABLE [dbo].[BillDiscount]  WITH CHECK ADD  CONSTRAINT [Fk_BillDiscount_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[Bill] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[BillDiscount] CHECK CONSTRAINT [Fk_BillDiscount_ParentGuid]
GO
ALTER TABLE [dbo].[BillOrder]  WITH CHECK ADD  CONSTRAINT [FK_BillOrder_TypeGuid] FOREIGN KEY([TypeGuid])
REFERENCES [dbo].[OrderType] ([Guid])
GO
ALTER TABLE [dbo].[BillOrder] CHECK CONSTRAINT [FK_BillOrder_TypeGuid]
GO
ALTER TABLE [dbo].[BillOrder]  WITH CHECK ADD  CONSTRAINT [FK_Order_CostGuid] FOREIGN KEY([CostGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[BillOrder] CHECK CONSTRAINT [FK_Order_CostGuid]
GO
ALTER TABLE [dbo].[BillOrder]  WITH CHECK ADD  CONSTRAINT [FK_Order_CurrencyGuid] FOREIGN KEY([CurrencyGuid])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[BillOrder] CHECK CONSTRAINT [FK_Order_CurrencyGuid]
GO
ALTER TABLE [dbo].[BillOrder]  WITH CHECK ADD  CONSTRAINT [FK_Order_CustGuid] FOREIGN KEY([CustGuid])
REFERENCES [dbo].[Customer] ([Guid])
GO
ALTER TABLE [dbo].[BillOrder] CHECK CONSTRAINT [FK_Order_CustGuid]
GO
ALTER TABLE [dbo].[BillOrder]  WITH CHECK ADD  CONSTRAINT [FK_Order_StoreGuid] FOREIGN KEY([StoreGuid])
REFERENCES [dbo].[Store] ([Guid])
GO
ALTER TABLE [dbo].[BillOrder] CHECK CONSTRAINT [FK_Order_StoreGuid]
GO
ALTER TABLE [dbo].[BillOrder]  WITH CHECK ADD  CONSTRAINT [FK_Order_userGuid] FOREIGN KEY([UserGuid])
REFERENCES [dbo].[Realty_Users] ([Guid])
GO
ALTER TABLE [dbo].[BillOrder] CHECK CONSTRAINT [FK_Order_userGuid]
GO
ALTER TABLE [dbo].[BillOrderDetail]  WITH CHECK ADD  CONSTRAINT [FK_BillOrderDetail_MatGuid] FOREIGN KEY([MatGuid])
REFERENCES [dbo].[Mat] ([Guid])
GO
ALTER TABLE [dbo].[BillOrderDetail] CHECK CONSTRAINT [FK_BillOrderDetail_MatGuid]
GO
ALTER TABLE [dbo].[BillOrderDetail]  WITH CHECK ADD  CONSTRAINT [FK_BillOrderDetail_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[BillOrder] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[BillOrderDetail] CHECK CONSTRAINT [FK_BillOrderDetail_ParentGuid]
GO
ALTER TABLE [dbo].[BillOrderDetail]  WITH CHECK ADD  CONSTRAINT [FK_KZ_OrderDetail_StoreGuid] FOREIGN KEY([StoreGuid])
REFERENCES [dbo].[Store] ([Guid])
GO
ALTER TABLE [dbo].[BillOrderDetail] CHECK CONSTRAINT [FK_KZ_OrderDetail_StoreGuid]
GO
ALTER TABLE [dbo].[BillOrderRecipient]  WITH CHECK ADD  CONSTRAINT [FK_BillOrderRecipient_CurrencyGuid] FOREIGN KEY([CurrencyGuid])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[BillOrderRecipient] CHECK CONSTRAINT [FK_BillOrderRecipient_CurrencyGuid]
GO
ALTER TABLE [dbo].[BillOrderRecipient]  WITH CHECK ADD  CONSTRAINT [FK_BillOrderRecipient_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[BillOrder] ([Guid])
GO
ALTER TABLE [dbo].[BillOrderRecipient] CHECK CONSTRAINT [FK_BillOrderRecipient_ParentGuid]
GO
ALTER TABLE [dbo].[BillOrderRecipient]  WITH CHECK ADD  CONSTRAINT [FK_BillOrderRecipient_SaleBillType] FOREIGN KEY([SaleBillType])
REFERENCES [dbo].[BillType] ([Guid])
GO
ALTER TABLE [dbo].[BillOrderRecipient] CHECK CONSTRAINT [FK_BillOrderRecipient_SaleBillType]
GO
ALTER TABLE [dbo].[BillOrderRecipient]  WITH CHECK ADD  CONSTRAINT [FK_BillOrderRecipient_userGuid] FOREIGN KEY([UserGuid])
REFERENCES [dbo].[Realty_Users] ([Guid])
GO
ALTER TABLE [dbo].[BillOrderRecipient] CHECK CONSTRAINT [FK_BillOrderRecipient_userGuid]
GO
ALTER TABLE [dbo].[BillOrderRecipientDetail]  WITH CHECK ADD  CONSTRAINT [FK_BillOrderRecipientDetail_MatGuid] FOREIGN KEY([MatGuid])
REFERENCES [dbo].[Mat] ([Guid])
GO
ALTER TABLE [dbo].[BillOrderRecipientDetail] CHECK CONSTRAINT [FK_BillOrderRecipientDetail_MatGuid]
GO
ALTER TABLE [dbo].[BillOrderRecipientDetail]  WITH CHECK ADD  CONSTRAINT [FK_BillOrderRecipientDetail_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[BillOrderRecipient] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[BillOrderRecipientDetail] CHECK CONSTRAINT [FK_BillOrderRecipientDetail_ParentGuid]
GO
ALTER TABLE [dbo].[BillOrderRecipientDetail]  WITH CHECK ADD  CONSTRAINT [FK_BillOrderRecipientDetail_StoreGuid] FOREIGN KEY([StoreGuid])
REFERENCES [dbo].[Store] ([Guid])
GO
ALTER TABLE [dbo].[BillOrderRecipientDetail] CHECK CONSTRAINT [FK_BillOrderRecipientDetail_StoreGuid]
GO
ALTER TABLE [dbo].[BillOrderRecipientDiscountExtra]  WITH CHECK ADD  CONSTRAINT [FK_BillOrderRecipientDiscountExtra_AccountGUID] FOREIGN KEY([AccountGUID])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[BillOrderRecipientDiscountExtra] CHECK CONSTRAINT [FK_BillOrderRecipientDiscountExtra_AccountGUID]
GO
ALTER TABLE [dbo].[BillOrderRecipientDiscountExtra]  WITH CHECK ADD  CONSTRAINT [FK_BillOrderRecipientDiscountExtra_ContraAccGuid] FOREIGN KEY([ContraAccGUID])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[BillOrderRecipientDiscountExtra] CHECK CONSTRAINT [FK_BillOrderRecipientDiscountExtra_ContraAccGuid]
GO
ALTER TABLE [dbo].[BillOrderRecipientDiscountExtra]  WITH CHECK ADD  CONSTRAINT [FK_BillOrderRecipientDiscountExtra_CostGuid] FOREIGN KEY([CostGUID])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[BillOrderRecipientDiscountExtra] CHECK CONSTRAINT [FK_BillOrderRecipientDiscountExtra_CostGuid]
GO
ALTER TABLE [dbo].[BillOrderRecipientDiscountExtra]  WITH CHECK ADD  CONSTRAINT [FK_BillOrderRecipientDiscountExtra_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[BillOrderRecipient] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[BillOrderRecipientDiscountExtra] CHECK CONSTRAINT [FK_BillOrderRecipientDiscountExtra_ParentGuid]
GO
ALTER TABLE [dbo].[BillType]  WITH CHECK ADD  CONSTRAINT [Fk_BillType_CurrencyGuid] FOREIGN KEY([CurrencyGuid])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[BillType] CHECK CONSTRAINT [Fk_BillType_CurrencyGuid]
GO
ALTER TABLE [dbo].[BillType]  WITH CHECK ADD  CONSTRAINT [Fk_BillType_DefCashAccountGuid] FOREIGN KEY([DefCashAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[BillType] CHECK CONSTRAINT [Fk_BillType_DefCashAccountGuid]
GO
ALTER TABLE [dbo].[BillType]  WITH CHECK ADD  CONSTRAINT [Fk_BillType_DefCostGuid] FOREIGN KEY([DefCostGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[BillType] CHECK CONSTRAINT [Fk_BillType_DefCostGuid]
GO
ALTER TABLE [dbo].[BillType]  WITH CHECK ADD  CONSTRAINT [Fk_BillType_DefDiscountAccountGuid] FOREIGN KEY([DefDiscountAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[BillType] CHECK CONSTRAINT [Fk_BillType_DefDiscountAccountGuid]
GO
ALTER TABLE [dbo].[BillType]  WITH CHECK ADD  CONSTRAINT [Fk_BillType_DefExtraAccountGuid] FOREIGN KEY([DefExtraAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[BillType] CHECK CONSTRAINT [Fk_BillType_DefExtraAccountGuid]
GO
ALTER TABLE [dbo].[BillType]  WITH CHECK ADD  CONSTRAINT [Fk_BillType_DefMatAccountGuid] FOREIGN KEY([DefMatAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[BillType] CHECK CONSTRAINT [Fk_BillType_DefMatAccountGuid]
GO
ALTER TABLE [dbo].[BillType]  WITH CHECK ADD  CONSTRAINT [Fk_BillType_DefStoreGuid] FOREIGN KEY([DefStoreGuid])
REFERENCES [dbo].[Store] ([Guid])
GO
ALTER TABLE [dbo].[BillType] CHECK CONSTRAINT [Fk_BillType_DefStoreGuid]
GO
ALTER TABLE [dbo].[BillTypeField]  WITH CHECK ADD  CONSTRAINT [FK_BillTypeField_BillTypeGuid] FOREIGN KEY([BillTypeGuid])
REFERENCES [dbo].[BillType] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[BillTypeField] CHECK CONSTRAINT [FK_BillTypeField_BillTypeGuid]
GO
ALTER TABLE [dbo].[BillTypePrivilege]  WITH CHECK ADD  CONSTRAINT [FK_BillTypePrivilege_BillTypeGuid] FOREIGN KEY([BillTypeGuid])
REFERENCES [dbo].[BillType] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[BillTypePrivilege] CHECK CONSTRAINT [FK_BillTypePrivilege_BillTypeGuid]
GO
ALTER TABLE [dbo].[BillTypePrivilege]  WITH CHECK ADD  CONSTRAINT [FK_BillTypePrivilege_UserGuid] FOREIGN KEY([UserGuid])
REFERENCES [dbo].[Realty_Users] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[BillTypePrivilege] CHECK CONSTRAINT [FK_BillTypePrivilege_UserGuid]
GO
ALTER TABLE [dbo].[Branch]  WITH CHECK ADD  CONSTRAINT [FK_Branch_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[Branch] ([Guid])
GO
ALTER TABLE [dbo].[Branch] CHECK CONSTRAINT [FK_Branch_ParentGuid]
GO
ALTER TABLE [dbo].[Building]  WITH CHECK ADD  CONSTRAINT [FK_Building_AcCommissionFromOwnerGUID] FOREIGN KEY([AcCommissionFromOwnerGUID])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[Building] CHECK CONSTRAINT [FK_Building_AcCommissionFromOwnerGUID]
GO
ALTER TABLE [dbo].[Building]  WITH CHECK ADD  CONSTRAINT [FK_Building_CurrencyGuid] FOREIGN KEY([CurrencyIdentityGUID])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[Building] CHECK CONSTRAINT [FK_Building_CurrencyGuid]
GO
ALTER TABLE [dbo].[Building]  WITH CHECK ADD  CONSTRAINT [FK_Building_OwnerName] FOREIGN KEY([OwnerName])
REFERENCES [dbo].[Customer] ([Guid])
GO
ALTER TABLE [dbo].[Building] CHECK CONSTRAINT [FK_Building_OwnerName]
GO
ALTER TABLE [dbo].[Building]  WITH CHECK ADD  CONSTRAINT [UK_Building_AccountBankBuildingGuid] FOREIGN KEY([AccountBankBuildingGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[Building] CHECK CONSTRAINT [UK_Building_AccountBankBuildingGuid]
GO
ALTER TABLE [dbo].[Building]  WITH CHECK ADD  CONSTRAINT [UK_Building_AccountCommIncome] FOREIGN KEY([AccountCommIncomeGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[Building] CHECK CONSTRAINT [UK_Building_AccountCommIncome]
GO
ALTER TABLE [dbo].[Building]  WITH CHECK ADD  CONSTRAINT [UK_Building_AccountGuid] FOREIGN KEY([AccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[Building] CHECK CONSTRAINT [UK_Building_AccountGuid]
GO
ALTER TABLE [dbo].[Building]  WITH CHECK ADD  CONSTRAINT [UK_Building_BuildingAccountGuid] FOREIGN KEY([BuildingAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[Building] CHECK CONSTRAINT [UK_Building_BuildingAccountGuid]
GO
ALTER TABLE [dbo].[Building]  WITH CHECK ADD  CONSTRAINT [UK_Building_CashAccountGuid] FOREIGN KEY([CashAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[Building] CHECK CONSTRAINT [UK_Building_CashAccountGuid]
GO
ALTER TABLE [dbo].[Building]  WITH CHECK ADD  CONSTRAINT [UK_Building_CostGuid] FOREIGN KEY([CostGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[Building] CHECK CONSTRAINT [UK_Building_CostGuid]
GO
ALTER TABLE [dbo].[Building]  WITH CHECK ADD  CONSTRAINT [UK_Building_CurrencyPurchase] FOREIGN KEY([CurrencyPurchase])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[Building] CHECK CONSTRAINT [UK_Building_CurrencyPurchase]
GO
ALTER TABLE [dbo].[Building]  WITH CHECK ADD  CONSTRAINT [UK_Building_CurrencyReceipt] FOREIGN KEY([CurrencyReceipt])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[Building] CHECK CONSTRAINT [UK_Building_CurrencyReceipt]
GO
ALTER TABLE [dbo].[Building]  WITH CHECK ADD  CONSTRAINT [UK_Building_CustomerPurchase] FOREIGN KEY([CustomerPurchase])
REFERENCES [dbo].[Customer] ([Guid])
GO
ALTER TABLE [dbo].[Building] CHECK CONSTRAINT [UK_Building_CustomerPurchase]
GO
ALTER TABLE [dbo].[Building]  WITH CHECK ADD  CONSTRAINT [UK_Building_InsuranceAccountGuid] FOREIGN KEY([InsuranceAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[Building] CHECK CONSTRAINT [UK_Building_InsuranceAccountGuid]
GO
ALTER TABLE [dbo].[Building]  WITH CHECK ADD  CONSTRAINT [UK_Building_OwnerAccountGuid] FOREIGN KEY([OwnerAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[Building] CHECK CONSTRAINT [UK_Building_OwnerAccountGuid]
GO
ALTER TABLE [dbo].[Building]  WITH CHECK ADD  CONSTRAINT [UK_Building_OwnerGuid] FOREIGN KEY([OwnerGuid])
REFERENCES [dbo].[Owner] ([Guid])
GO
ALTER TABLE [dbo].[Building] CHECK CONSTRAINT [UK_Building_OwnerGuid]
GO
ALTER TABLE [dbo].[Building]  WITH CHECK ADD  CONSTRAINT [UK_Building_ParentRentAccountGuid] FOREIGN KEY([ParentRentAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[Building] CHECK CONSTRAINT [UK_Building_ParentRentAccountGuid]
GO
ALTER TABLE [dbo].[Building]  WITH CHECK ADD  CONSTRAINT [UK_Building_ParentRentInsuranceAccountGuid] FOREIGN KEY([ParentRentInsuranceAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[Building] CHECK CONSTRAINT [UK_Building_ParentRentInsuranceAccountGuid]
GO
ALTER TABLE [dbo].[Building]  WITH CHECK ADD  CONSTRAINT [UK_Building_RentInfoGuid] FOREIGN KEY([RentInfoGuid])
REFERENCES [dbo].[RentInfo] ([Guid])
GO
ALTER TABLE [dbo].[Building] CHECK CONSTRAINT [UK_Building_RentInfoGuid]
GO
ALTER TABLE [dbo].[BuildingAssets]  WITH CHECK ADD  CONSTRAINT [FK_BuildingAssets_AssetsGuid] FOREIGN KEY([AssetsGuid])
REFERENCES [dbo].[Assets] ([Guid])
GO
ALTER TABLE [dbo].[BuildingAssets] CHECK CONSTRAINT [FK_BuildingAssets_AssetsGuid]
GO
ALTER TABLE [dbo].[BuildingAssets]  WITH CHECK ADD  CONSTRAINT [FK_BuildingAssets_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[Building] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[BuildingAssets] CHECK CONSTRAINT [FK_BuildingAssets_ParentGuid]
GO
ALTER TABLE [dbo].[BuildingIdentity]  WITH CHECK ADD  CONSTRAINT [FK_Identity_CurrencyGuid] FOREIGN KEY([CurrencyGUID])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[BuildingIdentity] CHECK CONSTRAINT [FK_Identity_CurrencyGuid]
GO
ALTER TABLE [dbo].[BuildingIdentity]  WITH CHECK ADD  CONSTRAINT [UK_BuildingIdentity_OwnerAccountGuid] FOREIGN KEY([OwnerAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[BuildingIdentity] CHECK CONSTRAINT [UK_BuildingIdentity_OwnerAccountGuid]
GO
ALTER TABLE [dbo].[BuildingIdentity]  WITH CHECK ADD  CONSTRAINT [UK_Identity_BuildingGuid] FOREIGN KEY([BuildingGuid])
REFERENCES [dbo].[Building] ([Guid])
GO
ALTER TABLE [dbo].[BuildingIdentity] CHECK CONSTRAINT [UK_Identity_BuildingGuid]
GO
ALTER TABLE [dbo].[BuildingIdentityDetail]  WITH CHECK ADD  CONSTRAINT [UK_BuildingIdentity_BuildingGuid] FOREIGN KEY([BuildingGuid])
REFERENCES [dbo].[Building] ([Guid])
GO
ALTER TABLE [dbo].[BuildingIdentityDetail] CHECK CONSTRAINT [UK_BuildingIdentity_BuildingGuid]
GO
ALTER TABLE [dbo].[Buildinglicense]  WITH CHECK ADD  CONSTRAINT [FK_Buildinglicense_BuildingGuid] FOREIGN KEY([BuildingGuid])
REFERENCES [dbo].[Building] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[Buildinglicense] CHECK CONSTRAINT [FK_Buildinglicense_BuildingGuid]
GO
ALTER TABLE [dbo].[BuildingPayType]  WITH CHECK ADD  CONSTRAINT [FK_BuildingPayType_BuildingGuid] FOREIGN KEY([BuildingGuid])
REFERENCES [dbo].[Building] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[BuildingPayType] CHECK CONSTRAINT [FK_BuildingPayType_BuildingGuid]
GO
ALTER TABLE [dbo].[BuildingPrivilege]  WITH CHECK ADD  CONSTRAINT [UK_BuildingPrivilege_BuildingGuid] FOREIGN KEY([BuildingGuid])
REFERENCES [dbo].[Building] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[BuildingPrivilege] CHECK CONSTRAINT [UK_BuildingPrivilege_BuildingGuid]
GO
ALTER TABLE [dbo].[BuildingPrivilege]  WITH CHECK ADD  CONSTRAINT [UK_BuildingPrivilege_userGuid] FOREIGN KEY([UserGuid])
REFERENCES [dbo].[Realty_Users] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[BuildingPrivilege] CHECK CONSTRAINT [UK_BuildingPrivilege_userGuid]
GO
ALTER TABLE [dbo].[BuildingRecElecCounter]  WITH CHECK ADD  CONSTRAINT [UK_BuildingRecElecCounter_BuildingGuid] FOREIGN KEY([BuildingGuid])
REFERENCES [dbo].[Building] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[BuildingRecElecCounter] CHECK CONSTRAINT [UK_BuildingRecElecCounter_BuildingGuid]
GO
ALTER TABLE [dbo].[BuildingRecElecCounter]  WITH CHECK ADD  CONSTRAINT [UK_BuildingRecElecCounter_UserGuid] FOREIGN KEY([UserGuid])
REFERENCES [dbo].[Realty_Users] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[BuildingRecElecCounter] CHECK CONSTRAINT [UK_BuildingRecElecCounter_UserGuid]
GO
ALTER TABLE [dbo].[ChangeBuildingGuard]  WITH CHECK ADD  CONSTRAINT [UK_ChangeBuildingGuard_BuildingGuid] FOREIGN KEY([BuildingGuid])
REFERENCES [dbo].[Building] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ChangeBuildingGuard] CHECK CONSTRAINT [UK_ChangeBuildingGuard_BuildingGuid]
GO
ALTER TABLE [dbo].[ChangeBuildingGuard]  WITH CHECK ADD  CONSTRAINT [UK_ChangeBuildingGuard_GuardGuid] FOREIGN KEY([GuardGuid])
REFERENCES [dbo].[BuildingGuard] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ChangeBuildingGuard] CHECK CONSTRAINT [UK_ChangeBuildingGuard_GuardGuid]
GO
ALTER TABLE [dbo].[ChangeCurrencyRate]  WITH CHECK ADD  CONSTRAINT [FK_ChangeCurrencyRate_CurrencyGuid] FOREIGN KEY([CurrencyGUID])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[ChangeCurrencyRate] CHECK CONSTRAINT [FK_ChangeCurrencyRate_CurrencyGuid]
GO
ALTER TABLE [dbo].[ChangeFlatPrice]  WITH CHECK ADD  CONSTRAINT [FK_ChangeFlatPrice_CurrencyGuid] FOREIGN KEY([CurrencyGuid])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[ChangeFlatPrice] CHECK CONSTRAINT [FK_ChangeFlatPrice_CurrencyGuid]
GO
ALTER TABLE [dbo].[ChangeFlatPrice]  WITH CHECK ADD  CONSTRAINT [FK_ChangeFlatPrice_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[Apartment] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ChangeFlatPrice] CHECK CONSTRAINT [FK_ChangeFlatPrice_ParentGuid]
GO
ALTER TABLE [dbo].[ChangeFlatRent]  WITH CHECK ADD  CONSTRAINT [FK_ChangeFlatRent_CurrencyGuid] FOREIGN KEY([CurrencyGuid])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[ChangeFlatRent] CHECK CONSTRAINT [FK_ChangeFlatRent_CurrencyGuid]
GO
ALTER TABLE [dbo].[ChangeFlatRent]  WITH CHECK ADD  CONSTRAINT [FK_ChangeFlatRent_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[Apartment] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ChangeFlatRent] CHECK CONSTRAINT [FK_ChangeFlatRent_ParentGuid]
GO
ALTER TABLE [dbo].[ChangeLandRent]  WITH CHECK ADD  CONSTRAINT [FK_ChangeLandRent_CurrencyGuid] FOREIGN KEY([CurrencyGuid])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[ChangeLandRent] CHECK CONSTRAINT [FK_ChangeLandRent_CurrencyGuid]
GO
ALTER TABLE [dbo].[ChangeLandRent]  WITH CHECK ADD  CONSTRAINT [FK_ChangeLandRent_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[Earth] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ChangeLandRent] CHECK CONSTRAINT [FK_ChangeLandRent_ParentGuid]
GO
ALTER TABLE [dbo].[ChangeParkingPrice]  WITH CHECK ADD  CONSTRAINT [FK_ChangeParkingPrice_CurrencyGuid] FOREIGN KEY([CurrencyGuid])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[ChangeParkingPrice] CHECK CONSTRAINT [FK_ChangeParkingPrice_CurrencyGuid]
GO
ALTER TABLE [dbo].[ChangeParkingPrice]  WITH CHECK ADD  CONSTRAINT [FK_ChangeParkingPrice_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[parking] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ChangeParkingPrice] CHECK CONSTRAINT [FK_ChangeParkingPrice_ParentGuid]
GO
ALTER TABLE [dbo].[ChangeParkingRent]  WITH CHECK ADD  CONSTRAINT [FK_ChangeParkingRent_CurrencyGuid] FOREIGN KEY([CurrencyGuid])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[ChangeParkingRent] CHECK CONSTRAINT [FK_ChangeParkingRent_CurrencyGuid]
GO
ALTER TABLE [dbo].[ChangeParkingRent]  WITH CHECK ADD  CONSTRAINT [FK_ChangeParkingRent_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[parking] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ChangeParkingRent] CHECK CONSTRAINT [FK_ChangeParkingRent_ParentGuid]
GO
ALTER TABLE [dbo].[ChangeShopPrice]  WITH CHECK ADD  CONSTRAINT [FK_ChangeShopPrice_CurrencyGuid] FOREIGN KEY([CurrencyGuid])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[ChangeShopPrice] CHECK CONSTRAINT [FK_ChangeShopPrice_CurrencyGuid]
GO
ALTER TABLE [dbo].[ChangeShopPrice]  WITH CHECK ADD  CONSTRAINT [FK_ChangeShopPrice_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[Shop] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ChangeShopPrice] CHECK CONSTRAINT [FK_ChangeShopPrice_ParentGuid]
GO
ALTER TABLE [dbo].[ChangeShopRent]  WITH CHECK ADD  CONSTRAINT [FK_ChangeShopRent_CurrencyGuid] FOREIGN KEY([CurrencyGuid])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[ChangeShopRent] CHECK CONSTRAINT [FK_ChangeShopRent_CurrencyGuid]
GO
ALTER TABLE [dbo].[ChangeShopRent]  WITH CHECK ADD  CONSTRAINT [FK_ChangeShopRent_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[Shop] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ChangeShopRent] CHECK CONSTRAINT [FK_ChangeShopRent_ParentGuid]
GO
ALTER TABLE [dbo].[ChangeVillaPrice]  WITH CHECK ADD  CONSTRAINT [FK_ChangeVillaPrice_CurrencyGuid] FOREIGN KEY([CurrencyGuid])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[ChangeVillaPrice] CHECK CONSTRAINT [FK_ChangeVillaPrice_CurrencyGuid]
GO
ALTER TABLE [dbo].[ChangeVillaPrice]  WITH CHECK ADD  CONSTRAINT [FK_ChangeVillaPrice_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[Villa] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ChangeVillaPrice] CHECK CONSTRAINT [FK_ChangeVillaPrice_ParentGuid]
GO
ALTER TABLE [dbo].[ChangeVillaRent]  WITH CHECK ADD  CONSTRAINT [FK_ChangeVillaRent_CurrencyGuid] FOREIGN KEY([CurrencyGuid])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[ChangeVillaRent] CHECK CONSTRAINT [FK_ChangeVillaRent_CurrencyGuid]
GO
ALTER TABLE [dbo].[ChangeVillaRent]  WITH CHECK ADD  CONSTRAINT [FK_ChangeVillaRent_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[Villa] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ChangeVillaRent] CHECK CONSTRAINT [FK_ChangeVillaRent_ParentGuid]
GO
ALTER TABLE [dbo].[Checks]  WITH CHECK ADD  CONSTRAINT [FK_Checks_Account_Guid] FOREIGN KEY([Account])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[Checks] CHECK CONSTRAINT [FK_Checks_Account_Guid]
GO
ALTER TABLE [dbo].[Checks]  WITH CHECK ADD  CONSTRAINT [FK_Checks_BranchGuid] FOREIGN KEY([BranchGuid])
REFERENCES [dbo].[Branch] ([Guid])
GO
ALTER TABLE [dbo].[Checks] CHECK CONSTRAINT [FK_Checks_BranchGuid]
GO
ALTER TABLE [dbo].[Checks]  WITH CHECK ADD  CONSTRAINT [FK_Checks_CheckTypeGuid] FOREIGN KEY([TypeGuid])
REFERENCES [dbo].[CheckType] ([Guid])
GO
ALTER TABLE [dbo].[Checks] CHECK CONSTRAINT [FK_Checks_CheckTypeGuid]
GO
ALTER TABLE [dbo].[Checks]  WITH CHECK ADD  CONSTRAINT [FK_Checks_CostGuid] FOREIGN KEY([CostGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[Checks] CHECK CONSTRAINT [FK_Checks_CostGuid]
GO
ALTER TABLE [dbo].[Checks]  WITH CHECK ADD  CONSTRAINT [FK_Checks_CostObverseGuid] FOREIGN KEY([CostObverseGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[Checks] CHECK CONSTRAINT [FK_Checks_CostObverseGuid]
GO
ALTER TABLE [dbo].[Checks]  WITH CHECK ADD  CONSTRAINT [FK_Checks_CurrencyGuid] FOREIGN KEY([CurrencyGUID])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[Checks] CHECK CONSTRAINT [FK_Checks_CurrencyGuid]
GO
ALTER TABLE [dbo].[Checks]  WITH CHECK ADD  CONSTRAINT [FK_Checks_ObverseAccount_Guid] FOREIGN KEY([ObverseAccount])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[Checks] CHECK CONSTRAINT [FK_Checks_ObverseAccount_Guid]
GO
ALTER TABLE [dbo].[Checks]  WITH CHECK ADD  CONSTRAINT [FK_Checks_UserGuid] FOREIGN KEY([UserGuid])
REFERENCES [dbo].[Realty_Users] ([Guid])
GO
ALTER TABLE [dbo].[Checks] CHECK CONSTRAINT [FK_Checks_UserGuid]
GO
ALTER TABLE [dbo].[Checks]  WITH CHECK ADD  CONSTRAINT [UK_Checks_SalesManGuid] FOREIGN KEY([SalesManGuid])
REFERENCES [dbo].[Salesman] ([Guid])
GO
ALTER TABLE [dbo].[Checks] CHECK CONSTRAINT [UK_Checks_SalesManGuid]
GO
ALTER TABLE [dbo].[ChecksAccountDetail]  WITH CHECK ADD  CONSTRAINT [FK_ChecksAccountDetail_AccountGuid] FOREIGN KEY([AccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ChecksAccountDetail] CHECK CONSTRAINT [FK_ChecksAccountDetail_AccountGuid]
GO
ALTER TABLE [dbo].[ChecksAccountDetail]  WITH CHECK ADD  CONSTRAINT [FK_ChecksAccountDetail_CostGuid] FOREIGN KEY([CostGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[ChecksAccountDetail] CHECK CONSTRAINT [FK_ChecksAccountDetail_CostGuid]
GO
ALTER TABLE [dbo].[ChecksAccountDetail]  WITH CHECK ADD  CONSTRAINT [FK_ChecksAccountDetail_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[Checks] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ChecksAccountDetail] CHECK CONSTRAINT [FK_ChecksAccountDetail_ParentGuid]
GO
ALTER TABLE [dbo].[ChecksCollection]  WITH CHECK ADD  CONSTRAINT [FK_ChecksCollection_CheckGuid] FOREIGN KEY([CheckGuid])
REFERENCES [dbo].[Checks] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ChecksCollection] CHECK CONSTRAINT [FK_ChecksCollection_CheckGuid]
GO
ALTER TABLE [dbo].[ChecksCollection]  WITH CHECK ADD  CONSTRAINT [FK_ChecksCollection_CreditCostGuid] FOREIGN KEY([CreditCostGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[ChecksCollection] CHECK CONSTRAINT [FK_ChecksCollection_CreditCostGuid]
GO
ALTER TABLE [dbo].[ChecksCollection]  WITH CHECK ADD  CONSTRAINT [FK_ChecksCollection_CurrencyGuid] FOREIGN KEY([CurrencyGUID])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[ChecksCollection] CHECK CONSTRAINT [FK_ChecksCollection_CurrencyGuid]
GO
ALTER TABLE [dbo].[ChecksCollection]  WITH CHECK ADD  CONSTRAINT [FK_ChecksCollection_DebitCostGuid] FOREIGN KEY([DebitCostGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[ChecksCollection] CHECK CONSTRAINT [FK_ChecksCollection_DebitCostGuid]
GO
ALTER TABLE [dbo].[ChecksCollection]  WITH CHECK ADD  CONSTRAINT [FK_ChecksCollectiont_CommAccountCreditGuid] FOREIGN KEY([CommAccountCreditGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ChecksCollection] CHECK CONSTRAINT [FK_ChecksCollectiont_CommAccountCreditGuid]
GO
ALTER TABLE [dbo].[ChecksCollection]  WITH CHECK ADD  CONSTRAINT [FK_ChecksCollectiont_CommAccountGuid] FOREIGN KEY([CommAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ChecksCollection] CHECK CONSTRAINT [FK_ChecksCollectiont_CommAccountGuid]
GO
ALTER TABLE [dbo].[ChecksCollection]  WITH CHECK ADD  CONSTRAINT [FK_ChecksCollectiont_CommCostGuid] FOREIGN KEY([CommCostGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[ChecksCollection] CHECK CONSTRAINT [FK_ChecksCollectiont_CommCostGuid]
GO
ALTER TABLE [dbo].[ChecksCollection]  WITH CHECK ADD  CONSTRAINT [FK_ChecksCollectiont_CreditAccountGuid] FOREIGN KEY([CreditAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ChecksCollection] CHECK CONSTRAINT [FK_ChecksCollectiont_CreditAccountGuid]
GO
ALTER TABLE [dbo].[ChecksCollection]  WITH CHECK ADD  CONSTRAINT [FK_ChecksCollectiont_DebitAccountGuid] FOREIGN KEY([DebitAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ChecksCollection] CHECK CONSTRAINT [FK_ChecksCollectiont_DebitAccountGuid]
GO
ALTER TABLE [dbo].[ChecksCollection]  WITH CHECK ADD  CONSTRAINT [FK_ChecksCollectiont_DelayAccountCreditGuid] FOREIGN KEY([DelayAccountCreditGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ChecksCollection] CHECK CONSTRAINT [FK_ChecksCollectiont_DelayAccountCreditGuid]
GO
ALTER TABLE [dbo].[ChecksCollection]  WITH CHECK ADD  CONSTRAINT [FK_ChecksCollectiont_DelayAccountDebitGuid] FOREIGN KEY([DelayAccountDebitGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ChecksCollection] CHECK CONSTRAINT [FK_ChecksCollectiont_DelayAccountDebitGuid]
GO
ALTER TABLE [dbo].[ChecksCollection]  WITH CHECK ADD  CONSTRAINT [FK_ChecksCollectiont_DelayCostGuid] FOREIGN KEY([DelayCostGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[ChecksCollection] CHECK CONSTRAINT [FK_ChecksCollectiont_DelayCostGuid]
GO
ALTER TABLE [dbo].[ChecksCostDetail]  WITH CHECK ADD  CONSTRAINT [FK_ChecksCostDetail_CostGuid] FOREIGN KEY([CostGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[ChecksCostDetail] CHECK CONSTRAINT [FK_ChecksCostDetail_CostGuid]
GO
ALTER TABLE [dbo].[ChecksCostDetail]  WITH CHECK ADD  CONSTRAINT [FK_ChecksCostDetail_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[Checks] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ChecksCostDetail] CHECK CONSTRAINT [FK_ChecksCostDetail_ParentGuid]
GO
ALTER TABLE [dbo].[ChecksPartialCollection]  WITH CHECK ADD  CONSTRAINT [FK_ChecksPartialCollection_CheckGuid] FOREIGN KEY([CheckGuid])
REFERENCES [dbo].[Checks] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ChecksPartialCollection] CHECK CONSTRAINT [FK_ChecksPartialCollection_CheckGuid]
GO
ALTER TABLE [dbo].[ChecksPartialCollection]  WITH CHECK ADD  CONSTRAINT [FK_ChecksPartialCollection_CommCostGuid] FOREIGN KEY([CommCostGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[ChecksPartialCollection] CHECK CONSTRAINT [FK_ChecksPartialCollection_CommCostGuid]
GO
ALTER TABLE [dbo].[ChecksPartialCollection]  WITH CHECK ADD  CONSTRAINT [FK_ChecksPartialCollection_CreditCostGuid] FOREIGN KEY([CreditCostGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[ChecksPartialCollection] CHECK CONSTRAINT [FK_ChecksPartialCollection_CreditCostGuid]
GO
ALTER TABLE [dbo].[ChecksPartialCollection]  WITH CHECK ADD  CONSTRAINT [FK_ChecksPartialCollection_CurrencyGuid] FOREIGN KEY([CurrencyGUID])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[ChecksPartialCollection] CHECK CONSTRAINT [FK_ChecksPartialCollection_CurrencyGuid]
GO
ALTER TABLE [dbo].[ChecksPartialCollection]  WITH CHECK ADD  CONSTRAINT [FK_ChecksPartialCollection_DebitCostGuid] FOREIGN KEY([DebitCostGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[ChecksPartialCollection] CHECK CONSTRAINT [FK_ChecksPartialCollection_DebitCostGuid]
GO
ALTER TABLE [dbo].[ChecksPartialCollection]  WITH CHECK ADD  CONSTRAINT [FK_ChecksPartialCollectiont_CommAccountCreditGuid] FOREIGN KEY([CommAccountCreditGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ChecksPartialCollection] CHECK CONSTRAINT [FK_ChecksPartialCollectiont_CommAccountCreditGuid]
GO
ALTER TABLE [dbo].[ChecksPartialCollection]  WITH CHECK ADD  CONSTRAINT [FK_ChecksPartialCollectiont_CommAccountGuid] FOREIGN KEY([CommAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ChecksPartialCollection] CHECK CONSTRAINT [FK_ChecksPartialCollectiont_CommAccountGuid]
GO
ALTER TABLE [dbo].[ChecksPartialCollection]  WITH CHECK ADD  CONSTRAINT [FK_ChecksPartialCollectiont_CreditAccountGuid] FOREIGN KEY([CreditAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ChecksPartialCollection] CHECK CONSTRAINT [FK_ChecksPartialCollectiont_CreditAccountGuid]
GO
ALTER TABLE [dbo].[ChecksPartialCollection]  WITH CHECK ADD  CONSTRAINT [FK_ChecksPartialCollectiont_DebitAccountGuid] FOREIGN KEY([DebitAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ChecksPartialCollection] CHECK CONSTRAINT [FK_ChecksPartialCollectiont_DebitAccountGuid]
GO
ALTER TABLE [dbo].[CheckType]  WITH CHECK ADD  CONSTRAINT [FK_CheckType_collectedDefAccountGuid] FOREIGN KEY([collectedDefAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[CheckType] CHECK CONSTRAINT [FK_CheckType_collectedDefAccountGuid]
GO
ALTER TABLE [dbo].[CheckType]  WITH CHECK ADD  CONSTRAINT [FK_CheckType_collectedDefAccountObverseGuid] FOREIGN KEY([collectedDefAccountObverseGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[CheckType] CHECK CONSTRAINT [FK_CheckType_collectedDefAccountObverseGuid]
GO
ALTER TABLE [dbo].[CheckType]  WITH CHECK ADD  CONSTRAINT [FK_CheckType_CollectedEntryTypeGuid] FOREIGN KEY([CollectedEntryTypeGuid])
REFERENCES [dbo].[EntryType] ([Guid])
GO
ALTER TABLE [dbo].[CheckType] CHECK CONSTRAINT [FK_CheckType_CollectedEntryTypeGuid]
GO
ALTER TABLE [dbo].[CheckType]  WITH CHECK ADD  CONSTRAINT [FK_CheckType_CommAccountCreditGuid] FOREIGN KEY([CommAccountCreditGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[CheckType] CHECK CONSTRAINT [FK_CheckType_CommAccountCreditGuid]
GO
ALTER TABLE [dbo].[CheckType]  WITH CHECK ADD  CONSTRAINT [FK_CheckType_CommAccountDebitGuid] FOREIGN KEY([CommAccountDebitGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[CheckType] CHECK CONSTRAINT [FK_CheckType_CommAccountDebitGuid]
GO
ALTER TABLE [dbo].[CheckType]  WITH CHECK ADD  CONSTRAINT [FK_CheckType_DefAccountGuid] FOREIGN KEY([DefAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[CheckType] CHECK CONSTRAINT [FK_CheckType_DefAccountGuid]
GO
ALTER TABLE [dbo].[CheckType]  WITH CHECK ADD  CONSTRAINT [FK_CheckType_delayDefAccountGuid] FOREIGN KEY([delayDefAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[CheckType] CHECK CONSTRAINT [FK_CheckType_delayDefAccountGuid]
GO
ALTER TABLE [dbo].[CheckType]  WITH CHECK ADD  CONSTRAINT [FK_CheckType_delayDefAccountObverseGuid] FOREIGN KEY([delayDefAccountObverseGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[CheckType] CHECK CONSTRAINT [FK_CheckType_delayDefAccountObverseGuid]
GO
ALTER TABLE [dbo].[CheckType]  WITH CHECK ADD  CONSTRAINT [FK_CheckType_EndorsementDefAccountCreateGuid] FOREIGN KEY([EndorsementDefAccountCreateGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[CheckType] CHECK CONSTRAINT [FK_CheckType_EndorsementDefAccountCreateGuid]
GO
ALTER TABLE [dbo].[CheckType]  WITH CHECK ADD  CONSTRAINT [FK_CheckType_EndorsementDefAccountDebitGuid] FOREIGN KEY([EndorsementDefAccountDebitGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[CheckType] CHECK CONSTRAINT [FK_CheckType_EndorsementDefAccountDebitGuid]
GO
ALTER TABLE [dbo].[CheckType]  WITH CHECK ADD  CONSTRAINT [FK_CheckType_partialcollectedDefAccountGuid] FOREIGN KEY([partialcollectedDefAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[CheckType] CHECK CONSTRAINT [FK_CheckType_partialcollectedDefAccountGuid]
GO
ALTER TABLE [dbo].[CheckType]  WITH CHECK ADD  CONSTRAINT [FK_CheckType_partialcollectedDefAccountObverseGuid] FOREIGN KEY([partialcollectedDefAccountObverseGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[CheckType] CHECK CONSTRAINT [FK_CheckType_partialcollectedDefAccountObverseGuid]
GO
ALTER TABLE [dbo].[CheckType]  WITH CHECK ADD  CONSTRAINT [FK_CheckType_partialCollectedEntryTypeGuid] FOREIGN KEY([partialCollectedEntryTypeGuid])
REFERENCES [dbo].[EntryType] ([Guid])
GO
ALTER TABLE [dbo].[CheckType] CHECK CONSTRAINT [FK_CheckType_partialCollectedEntryTypeGuid]
GO
ALTER TABLE [dbo].[CheckType]  WITH CHECK ADD  CONSTRAINT [FK_CheckType_PostedDefAccountGuid] FOREIGN KEY([PostedDefAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[CheckType] CHECK CONSTRAINT [FK_CheckType_PostedDefAccountGuid]
GO
ALTER TABLE [dbo].[CheckType]  WITH CHECK ADD  CONSTRAINT [FK_CheckType_PostedDefCreditAccountGuid] FOREIGN KEY([PostedDefCreditAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[CheckType] CHECK CONSTRAINT [FK_CheckType_PostedDefCreditAccountGuid]
GO
ALTER TABLE [dbo].[CheckType]  WITH CHECK ADD  CONSTRAINT [FK_CheckType_ReturnedDefAccountCreditGuid] FOREIGN KEY([ReturnedDefAccountCreditGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[CheckType] CHECK CONSTRAINT [FK_CheckType_ReturnedDefAccountCreditGuid]
GO
ALTER TABLE [dbo].[CheckType]  WITH CHECK ADD  CONSTRAINT [FK_CheckType_ReturnedDefAccountGuid] FOREIGN KEY([ReturnedDefAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[CheckType] CHECK CONSTRAINT [FK_CheckType_ReturnedDefAccountGuid]
GO
ALTER TABLE [dbo].[CheckTypePrivilege]  WITH CHECK ADD  CONSTRAINT [FK_CheckTypePrivilege_CheckTypeGuid] FOREIGN KEY([CheckTypeGuid])
REFERENCES [dbo].[CheckType] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[CheckTypePrivilege] CHECK CONSTRAINT [FK_CheckTypePrivilege_CheckTypeGuid]
GO
ALTER TABLE [dbo].[CheckTypePrivilege]  WITH CHECK ADD  CONSTRAINT [FK_CheckTypePrivilege_UserGuid] FOREIGN KEY([UserGuid])
REFERENCES [dbo].[Realty_Users] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[CheckTypePrivilege] CHECK CONSTRAINT [FK_CheckTypePrivilege_UserGuid]
GO
ALTER TABLE [dbo].[Complaint]  WITH CHECK ADD  CONSTRAINT [FK_Complaint_ApartmentGuid] FOREIGN KEY([FlatGuid])
REFERENCES [dbo].[Apartment] ([Guid])
GO
ALTER TABLE [dbo].[Complaint] CHECK CONSTRAINT [FK_Complaint_ApartmentGuid]
GO
ALTER TABLE [dbo].[Complaint]  WITH CHECK ADD  CONSTRAINT [FK_Complaint_BuildingGuid] FOREIGN KEY([BuildingGuid])
REFERENCES [dbo].[Building] ([Guid])
GO
ALTER TABLE [dbo].[Complaint] CHECK CONSTRAINT [FK_Complaint_BuildingGuid]
GO
ALTER TABLE [dbo].[Complaint]  WITH CHECK ADD  CONSTRAINT [FK_Complaint_CustGuid] FOREIGN KEY([CustGuid])
REFERENCES [dbo].[Customer] ([Guid])
GO
ALTER TABLE [dbo].[Complaint] CHECK CONSTRAINT [FK_Complaint_CustGuid]
GO
ALTER TABLE [dbo].[Complaint]  WITH CHECK ADD  CONSTRAINT [FK_Complaint_LandGuid] FOREIGN KEY([LandGuid])
REFERENCES [dbo].[Earth] ([Guid])
GO
ALTER TABLE [dbo].[Complaint] CHECK CONSTRAINT [FK_Complaint_LandGuid]
GO
ALTER TABLE [dbo].[Complaint]  WITH CHECK ADD  CONSTRAINT [FK_Complaint_ParkingGuid] FOREIGN KEY([ParkingGuid])
REFERENCES [dbo].[parking] ([Guid])
GO
ALTER TABLE [dbo].[Complaint] CHECK CONSTRAINT [FK_Complaint_ParkingGuid]
GO
ALTER TABLE [dbo].[Complaint]  WITH CHECK ADD  CONSTRAINT [FK_Complaint_ShopGuid] FOREIGN KEY([ShopGuid])
REFERENCES [dbo].[Shop] ([Guid])
GO
ALTER TABLE [dbo].[Complaint] CHECK CONSTRAINT [FK_Complaint_ShopGuid]
GO
ALTER TABLE [dbo].[Complaint]  WITH CHECK ADD  CONSTRAINT [FK_Complaint_VillaGuid] FOREIGN KEY([VillaGuid])
REFERENCES [dbo].[Villa] ([Guid])
GO
ALTER TABLE [dbo].[Complaint] CHECK CONSTRAINT [FK_Complaint_VillaGuid]
GO
ALTER TABLE [dbo].[ContractAccountDetail]  WITH CHECK ADD  CONSTRAINT [FK_ContractAccountDetail_AccountGuid] FOREIGN KEY([AccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ContractAccountDetail] CHECK CONSTRAINT [FK_ContractAccountDetail_AccountGuid]
GO
ALTER TABLE [dbo].[ContractAccountDetail]  WITH CHECK ADD  CONSTRAINT [FK_ContractAccountDetail_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[LeaseApartment] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ContractAccountDetail] CHECK CONSTRAINT [FK_ContractAccountDetail_ParentGuid]
GO
ALTER TABLE [dbo].[ContractCachPayment]  WITH CHECK ADD  CONSTRAINT [FK_ContractCachPayment_ContractGuid] FOREIGN KEY([ContractGuid])
REFERENCES [dbo].[LeaseApartment] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ContractCachPayment] CHECK CONSTRAINT [FK_ContractCachPayment_ContractGuid]
GO
ALTER TABLE [dbo].[ContractCachPayment]  WITH CHECK ADD  CONSTRAINT [FK_ContractCachPayment_EntryGuid] FOREIGN KEY([EntryGuid])
REFERENCES [dbo].[HEntry] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ContractCachPayment] CHECK CONSTRAINT [FK_ContractCachPayment_EntryGuid]
GO
ALTER TABLE [dbo].[ContractFlatAssets]  WITH CHECK ADD  CONSTRAINT [FK_ContractFlatAssets_AssetsGuid] FOREIGN KEY([AssetsGuid])
REFERENCES [dbo].[Assets] ([Guid])
GO
ALTER TABLE [dbo].[ContractFlatAssets] CHECK CONSTRAINT [FK_ContractFlatAssets_AssetsGuid]
GO
ALTER TABLE [dbo].[ContractFlatAssets]  WITH CHECK ADD  CONSTRAINT [FK_ContractFlatAssets_ContractGuid] FOREIGN KEY([ContractGuid])
REFERENCES [dbo].[LeaseApartment] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ContractFlatAssets] CHECK CONSTRAINT [FK_ContractFlatAssets_ContractGuid]
GO
ALTER TABLE [dbo].[ContractLandAssets]  WITH CHECK ADD  CONSTRAINT [FK_ContractLandAssets_AssetsGuid] FOREIGN KEY([AssetsGuid])
REFERENCES [dbo].[Assets] ([Guid])
GO
ALTER TABLE [dbo].[ContractLandAssets] CHECK CONSTRAINT [FK_ContractLandAssets_AssetsGuid]
GO
ALTER TABLE [dbo].[ContractLandAssets]  WITH CHECK ADD  CONSTRAINT [FK_ContractLandAssets_ContractGuid] FOREIGN KEY([ContractGuid])
REFERENCES [dbo].[LandContract] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ContractLandAssets] CHECK CONSTRAINT [FK_ContractLandAssets_ContractGuid]
GO
ALTER TABLE [dbo].[ContractLog]  WITH CHECK ADD  CONSTRAINT [FK_ContractLog_Realty_Users] FOREIGN KEY([UserGuid])
REFERENCES [dbo].[Realty_Users] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ContractLog] CHECK CONSTRAINT [FK_ContractLog_Realty_Users]
GO
ALTER TABLE [dbo].[ContractParkingCachPayment]  WITH CHECK ADD  CONSTRAINT [FK_ContractParkingCachPayment_ContractGuid] FOREIGN KEY([ContractGuid])
REFERENCES [dbo].[ParkingContract] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ContractParkingCachPayment] CHECK CONSTRAINT [FK_ContractParkingCachPayment_ContractGuid]
GO
ALTER TABLE [dbo].[ContractParkingCachPayment]  WITH CHECK ADD  CONSTRAINT [FK_ContractParkingCachPayment_EntryGuid] FOREIGN KEY([EntryGuid])
REFERENCES [dbo].[HEntry] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ContractParkingCachPayment] CHECK CONSTRAINT [FK_ContractParkingCachPayment_EntryGuid]
GO
ALTER TABLE [dbo].[ContractType]  WITH CHECK ADD  CONSTRAINT [FK_ContractType_AcCommissionExpenseGuid] FOREIGN KEY([AcCommissionExpenseGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ContractType] CHECK CONSTRAINT [FK_ContractType_AcCommissionExpenseGuid]
GO
ALTER TABLE [dbo].[ContractType]  WITH CHECK ADD  CONSTRAINT [FK_ContractType_AcCommissionFromCustGUID] FOREIGN KEY([AcCommissionFromCustGUID])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ContractType] CHECK CONSTRAINT [FK_ContractType_AcCommissionFromCustGUID]
GO
ALTER TABLE [dbo].[ContractType]  WITH CHECK ADD  CONSTRAINT [FK_ContractType_AcCommissionFromOwnerGUID] FOREIGN KEY([AcCommissionFromOwnerGUID])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ContractType] CHECK CONSTRAINT [FK_ContractType_AcCommissionFromOwnerGUID]
GO
ALTER TABLE [dbo].[ContractType]  WITH CHECK ADD  CONSTRAINT [FK_ContractType_AccountCertificatValueGUID] FOREIGN KEY([AccountCertificatValueGUID])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ContractType] CHECK CONSTRAINT [FK_ContractType_AccountCertificatValueGUID]
GO
ALTER TABLE [dbo].[ContractType]  WITH CHECK ADD  CONSTRAINT [FK_ContractType_AccountContractPriceGUID] FOREIGN KEY([AccountContractPriceGUID])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ContractType] CHECK CONSTRAINT [FK_ContractType_AccountContractPriceGUID]
GO
ALTER TABLE [dbo].[ContractType]  WITH CHECK ADD  CONSTRAINT [FK_ContractType_AcIncomNextYearGUID] FOREIGN KEY([AcIncomNextYearGUID])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ContractType] CHECK CONSTRAINT [FK_ContractType_AcIncomNextYearGUID]
GO
ALTER TABLE [dbo].[ContractType]  WITH CHECK ADD  CONSTRAINT [FK_ContractType_DeflawsuitCreditAccountGUID] FOREIGN KEY([DeflawsuitCreditAccountGUID])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ContractType] CHECK CONSTRAINT [FK_ContractType_DeflawsuitCreditAccountGUID]
GO
ALTER TABLE [dbo].[ContractType]  WITH CHECK ADD  CONSTRAINT [FK_ContractType_DeflawsuitDebitAccountGUID] FOREIGN KEY([DeflawsuitDebitAccountGUID])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ContractType] CHECK CONSTRAINT [FK_ContractType_DeflawsuitDebitAccountGUID]
GO
ALTER TABLE [dbo].[ContractType]  WITH CHECK ADD  CONSTRAINT [FK_ContractType_DiscountAccountGUID] FOREIGN KEY([DiscountAccountGUID])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ContractType] CHECK CONSTRAINT [FK_ContractType_DiscountAccountGUID]
GO
ALTER TABLE [dbo].[ContractType]  WITH CHECK ADD  CONSTRAINT [FK_ContractType_FineAccountGUID] FOREIGN KEY([FineAccountGUID])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ContractType] CHECK CONSTRAINT [FK_ContractType_FineAccountGUID]
GO
ALTER TABLE [dbo].[ContractType]  WITH CHECK ADD  CONSTRAINT [FK_ContractType_InsuranceAccountGuid] FOREIGN KEY([InsuranceAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ContractType] CHECK CONSTRAINT [FK_ContractType_InsuranceAccountGuid]
GO
ALTER TABLE [dbo].[ContractType]  WITH CHECK ADD  CONSTRAINT [FK_ContractType_OtherFeeAccount1GUID] FOREIGN KEY([OtherFeeAccount1GUID])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ContractType] CHECK CONSTRAINT [FK_ContractType_OtherFeeAccount1GUID]
GO
ALTER TABLE [dbo].[ContractType]  WITH CHECK ADD  CONSTRAINT [FK_ContractType_OtherFeeAccount2GUID] FOREIGN KEY([OtherFeeAccount2GUID])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ContractType] CHECK CONSTRAINT [FK_ContractType_OtherFeeAccount2GUID]
GO
ALTER TABLE [dbo].[ContractType]  WITH CHECK ADD  CONSTRAINT [FK_ContractType_OtherFeeAccount3GUID] FOREIGN KEY([OtherFeeAccount3GUID])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ContractType] CHECK CONSTRAINT [FK_ContractType_OtherFeeAccount3GUID]
GO
ALTER TABLE [dbo].[ContractType]  WITH CHECK ADD  CONSTRAINT [FK_ContractType_OtherFeeAccount4GUID] FOREIGN KEY([OtherFeeAccount4GUID])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ContractType] CHECK CONSTRAINT [FK_ContractType_OtherFeeAccount4GUID]
GO
ALTER TABLE [dbo].[ContractType]  WITH CHECK ADD  CONSTRAINT [FK_ContractType_OtherFeeAccount5GUID] FOREIGN KEY([OtherFeeAccount5GUID])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ContractType] CHECK CONSTRAINT [FK_ContractType_OtherFeeAccount5GUID]
GO
ALTER TABLE [dbo].[ContractType]  WITH CHECK ADD  CONSTRAINT [FK_ContractType_RevenueAccountGUID] FOREIGN KEY([RevenueAccountGUID])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ContractType] CHECK CONSTRAINT [FK_ContractType_RevenueAccountGUID]
GO
ALTER TABLE [dbo].[ContractType]  WITH CHECK ADD  CONSTRAINT [FK_ContractType_TaxAccount] FOREIGN KEY([TaxAccount])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ContractType] CHECK CONSTRAINT [FK_ContractType_TaxAccount]
GO
ALTER TABLE [dbo].[ContractTypeFeeAccount]  WITH CHECK ADD  CONSTRAINT [FK_ContractTypeFeeAccount_AccountGuid] FOREIGN KEY([AccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ContractTypeFeeAccount] CHECK CONSTRAINT [FK_ContractTypeFeeAccount_AccountGuid]
GO
ALTER TABLE [dbo].[ContractTypeFeeAccount]  WITH CHECK ADD  CONSTRAINT [FK_ContractTypeFeeAccount_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[ContractType] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ContractTypeFeeAccount] CHECK CONSTRAINT [FK_ContractTypeFeeAccount_ParentGuid]
GO
ALTER TABLE [dbo].[ContractTypeFineAccount]  WITH CHECK ADD  CONSTRAINT [FK_ContractTypeFineAccount_AccountGuid] FOREIGN KEY([AccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ContractTypeFineAccount] CHECK CONSTRAINT [FK_ContractTypeFineAccount_AccountGuid]
GO
ALTER TABLE [dbo].[ContractTypeFineAccount]  WITH CHECK ADD  CONSTRAINT [FK_ContractTypeFineAccount_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[ContractType] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ContractTypeFineAccount] CHECK CONSTRAINT [FK_ContractTypeFineAccount_ParentGuid]
GO
ALTER TABLE [dbo].[ContractTypePrivilege]  WITH CHECK ADD  CONSTRAINT [FK_ContractTypePrivilege_ContractTypeGuid] FOREIGN KEY([ContractTypeGuid])
REFERENCES [dbo].[ContractType] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ContractTypePrivilege] CHECK CONSTRAINT [FK_ContractTypePrivilege_ContractTypeGuid]
GO
ALTER TABLE [dbo].[ContractTypePrivilege]  WITH CHECK ADD  CONSTRAINT [FK_ContractTypePrivilege_UserGuid] FOREIGN KEY([UserGuid])
REFERENCES [dbo].[Realty_Users] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ContractTypePrivilege] CHECK CONSTRAINT [FK_ContractTypePrivilege_UserGuid]
GO
ALTER TABLE [dbo].[Cost]  WITH CHECK ADD  CONSTRAINT [FK_Cost_ParentGUID] FOREIGN KEY([ParentGUID])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[Cost] CHECK CONSTRAINT [FK_Cost_ParentGUID]
GO
ALTER TABLE [dbo].[CurrentUsers]  WITH CHECK ADD  CONSTRAINT [FK_CurrentUsers_Realty_Users] FOREIGN KEY([UserGuid])
REFERENCES [dbo].[Realty_Users] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[CurrentUsers] CHECK CONSTRAINT [FK_CurrentUsers_Realty_Users]
GO
ALTER TABLE [dbo].[Customer]  WITH CHECK ADD  CONSTRAINT [FK_Customer_Account_Guid] FOREIGN KEY([AcGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[Customer] CHECK CONSTRAINT [FK_Customer_Account_Guid]
GO
ALTER TABLE [dbo].[Customer]  WITH CHECK ADD  CONSTRAINT [FK_Customer_InsuranceAccountGuid] FOREIGN KEY([InsuranceAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[Customer] CHECK CONSTRAINT [FK_Customer_InsuranceAccountGuid]
GO
ALTER TABLE [dbo].[Customer]  WITH CHECK ADD  CONSTRAINT [FK_Customer_VATAccountGuid] FOREIGN KEY([VATAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[Customer] CHECK CONSTRAINT [FK_Customer_VATAccountGuid]
GO
ALTER TABLE [dbo].[DEntry]  WITH CHECK ADD  CONSTRAINT [FK_DEntry_Account_Guid] FOREIGN KEY([AcGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[DEntry] CHECK CONSTRAINT [FK_DEntry_Account_Guid]
GO
ALTER TABLE [dbo].[DEntry]  WITH CHECK ADD  CONSTRAINT [FK_DEntry_Cost_Guid] FOREIGN KEY([CostGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[DEntry] CHECK CONSTRAINT [FK_DEntry_Cost_Guid]
GO
ALTER TABLE [dbo].[DEntry]  WITH CHECK ADD  CONSTRAINT [FK_DEntry_Currency_Guid] FOREIGN KEY([CurrencyGuid])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[DEntry] CHECK CONSTRAINT [FK_DEntry_Currency_Guid]
GO
ALTER TABLE [dbo].[DEntry]  WITH CHECK ADD  CONSTRAINT [FK_DEntry_Guid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[HEntry] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[DEntry] CHECK CONSTRAINT [FK_DEntry_Guid]
GO
ALTER TABLE [dbo].[DEntry]  WITH CHECK ADD  CONSTRAINT [FK_DEntry_ObverseAcGuid_Guid] FOREIGN KEY([ObverseAcGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[DEntry] CHECK CONSTRAINT [FK_DEntry_ObverseAcGuid_Guid]
GO
ALTER TABLE [dbo].[Earth]  WITH CHECK ADD  CONSTRAINT [FK_Earth_AccountCommIncomeGuidGuid] FOREIGN KEY([AccountCommIncomeGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[Earth] CHECK CONSTRAINT [FK_Earth_AccountCommIncomeGuidGuid]
GO
ALTER TABLE [dbo].[Earth]  WITH CHECK ADD  CONSTRAINT [FK_Earth_AccountGuid] FOREIGN KEY([AccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[Earth] CHECK CONSTRAINT [FK_Earth_AccountGuid]
GO
ALTER TABLE [dbo].[Earth]  WITH CHECK ADD  CONSTRAINT [FK_Earth_BankAccountGuid] FOREIGN KEY([BankAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[Earth] CHECK CONSTRAINT [FK_Earth_BankAccountGuid]
GO
ALTER TABLE [dbo].[Earth]  WITH CHECK ADD  CONSTRAINT [FK_Earth_BeginLandCostGuid] FOREIGN KEY([BeginLandCostGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[Earth] CHECK CONSTRAINT [FK_Earth_BeginLandCostGuid]
GO
ALTER TABLE [dbo].[Earth]  WITH CHECK ADD  CONSTRAINT [FK_Earth_CostGuid] FOREIGN KEY([CostGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[Earth] CHECK CONSTRAINT [FK_Earth_CostGuid]
GO
ALTER TABLE [dbo].[Earth]  WITH CHECK ADD  CONSTRAINT [FK_Earth_CuOwnerGuid] FOREIGN KEY([CuOwnerGuid])
REFERENCES [dbo].[Customer] ([Guid])
GO
ALTER TABLE [dbo].[Earth] CHECK CONSTRAINT [FK_Earth_CuOwnerGuid]
GO
ALTER TABLE [dbo].[Earth]  WITH CHECK ADD  CONSTRAINT [FK_Earth_CurrencyBeginLandGuid] FOREIGN KEY([CurrencyBeginLandGuid])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[Earth] CHECK CONSTRAINT [FK_Earth_CurrencyBeginLandGuid]
GO
ALTER TABLE [dbo].[Earth]  WITH CHECK ADD  CONSTRAINT [FK_Earth_CurrencyGuid] FOREIGN KEY([CurrencyIdentityGUID])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[Earth] CHECK CONSTRAINT [FK_Earth_CurrencyGuid]
GO
ALTER TABLE [dbo].[Earth]  WITH CHECK ADD  CONSTRAINT [FK_Earth_CurrencyPurchaseGuid] FOREIGN KEY([CurrencyPurchaseGuid])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[Earth] CHECK CONSTRAINT [FK_Earth_CurrencyPurchaseGuid]
GO
ALTER TABLE [dbo].[Earth]  WITH CHECK ADD  CONSTRAINT [FK_Earth_CustomerGuid] FOREIGN KEY([CustomerGuid])
REFERENCES [dbo].[Customer] ([Guid])
GO
ALTER TABLE [dbo].[Earth] CHECK CONSTRAINT [FK_Earth_CustomerGuid]
GO
ALTER TABLE [dbo].[Earth]  WITH CHECK ADD  CONSTRAINT [FK_Earth_CustomerOwnerGuid] FOREIGN KEY([CustomerOwnerGuid])
REFERENCES [dbo].[Customer] ([Guid])
GO
ALTER TABLE [dbo].[Earth] CHECK CONSTRAINT [FK_Earth_CustomerOwnerGuid]
GO
ALTER TABLE [dbo].[Earth]  WITH CHECK ADD  CONSTRAINT [FK_Earth_RentCurrencyGuid] FOREIGN KEY([RentCurrencyGuid])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[Earth] CHECK CONSTRAINT [FK_Earth_RentCurrencyGuid]
GO
ALTER TABLE [dbo].[Earth]  WITH CHECK ADD  CONSTRAINT [UK_Earth_OwnerAccountGuid] FOREIGN KEY([OwnerAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[Earth] CHECK CONSTRAINT [UK_Earth_OwnerAccountGuid]
GO
ALTER TABLE [dbo].[ElectricityBill]  WITH CHECK ADD  CONSTRAINT [FK_ElectricityBill_BuildingGuid] FOREIGN KEY([BuildingGuid])
REFERENCES [dbo].[Building] ([Guid])
GO
ALTER TABLE [dbo].[ElectricityBill] CHECK CONSTRAINT [FK_ElectricityBill_BuildingGuid]
GO
ALTER TABLE [dbo].[ElectricityBill]  WITH CHECK ADD  CONSTRAINT [FK_ElectricityBill_CurrencyGuid] FOREIGN KEY([CurrencyGuid])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[ElectricityBill] CHECK CONSTRAINT [FK_ElectricityBill_CurrencyGuid]
GO
ALTER TABLE [dbo].[ElectricityBill]  WITH CHECK ADD  CONSTRAINT [FK_ElectricityBill_CustGuid] FOREIGN KEY([CustGuid])
REFERENCES [dbo].[Customer] ([Guid])
GO
ALTER TABLE [dbo].[ElectricityBill] CHECK CONSTRAINT [FK_ElectricityBill_CustGuid]
GO
ALTER TABLE [dbo].[ElectricityBill]  WITH CHECK ADD  CONSTRAINT [FK_ElectricityBill_DiscountAccountGuid] FOREIGN KEY([DiscountAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ElectricityBill] CHECK CONSTRAINT [FK_ElectricityBill_DiscountAccountGuid]
GO
ALTER TABLE [dbo].[ElectricityBill]  WITH CHECK ADD  CONSTRAINT [FK_ElectricityBill_DrainageAccountGuid] FOREIGN KEY([DrainageAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ElectricityBill] CHECK CONSTRAINT [FK_ElectricityBill_DrainageAccountGuid]
GO
ALTER TABLE [dbo].[ElectricityBill]  WITH CHECK ADD  CONSTRAINT [FK_ElectricityBill_ElectricityTypeGuid] FOREIGN KEY([TypeGuid])
REFERENCES [dbo].[ElectricityType] ([Guid])
GO
ALTER TABLE [dbo].[ElectricityBill] CHECK CONSTRAINT [FK_ElectricityBill_ElectricityTypeGuid]
GO
ALTER TABLE [dbo].[ElectricityBill]  WITH CHECK ADD  CONSTRAINT [FK_ElectricityBill_ExtraAccountGuid] FOREIGN KEY([ExtraAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ElectricityBill] CHECK CONSTRAINT [FK_ElectricityBill_ExtraAccountGuid]
GO
ALTER TABLE [dbo].[ElectricityBill]  WITH CHECK ADD  CONSTRAINT [FK_ElectricityBill_FeeAccountGuid] FOREIGN KEY([FeeAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ElectricityBill] CHECK CONSTRAINT [FK_ElectricityBill_FeeAccountGuid]
GO
ALTER TABLE [dbo].[ElectricityBill]  WITH CHECK ADD  CONSTRAINT [FK_ElectricityBill_FineAccountGuid] FOREIGN KEY([FineAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ElectricityBill] CHECK CONSTRAINT [FK_ElectricityBill_FineAccountGuid]
GO
ALTER TABLE [dbo].[ElectricityBill]  WITH CHECK ADD  CONSTRAINT [FK_ElectricityBill_FlatGuid] FOREIGN KEY([FlatGuid])
REFERENCES [dbo].[Apartment] ([Guid])
GO
ALTER TABLE [dbo].[ElectricityBill] CHECK CONSTRAINT [FK_ElectricityBill_FlatGuid]
GO
ALTER TABLE [dbo].[ElectricityBill]  WITH CHECK ADD  CONSTRAINT [FK_ElectricityBill_IncomeAccountGuid] FOREIGN KEY([IncomeAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ElectricityBill] CHECK CONSTRAINT [FK_ElectricityBill_IncomeAccountGuid]
GO
ALTER TABLE [dbo].[ElectricityBill]  WITH CHECK ADD  CONSTRAINT [FK_ElectricityBill_ShopGuid] FOREIGN KEY([ShopGuid])
REFERENCES [dbo].[Shop] ([Guid])
GO
ALTER TABLE [dbo].[ElectricityBill] CHECK CONSTRAINT [FK_ElectricityBill_ShopGuid]
GO
ALTER TABLE [dbo].[ElectricityBill]  WITH CHECK ADD  CONSTRAINT [FK_ElectricityBill_WaterAccountGuid] FOREIGN KEY([WaterAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ElectricityBill] CHECK CONSTRAINT [FK_ElectricityBill_WaterAccountGuid]
GO
ALTER TABLE [dbo].[ElectricityCachPayment]  WITH CHECK ADD  CONSTRAINT [FK_ElectricityCachPayment_ContractGuid] FOREIGN KEY([ContractGuid])
REFERENCES [dbo].[ElectricityBill] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ElectricityCachPayment] CHECK CONSTRAINT [FK_ElectricityCachPayment_ContractGuid]
GO
ALTER TABLE [dbo].[ElectricityCachPayment]  WITH CHECK ADD  CONSTRAINT [FK_ElectricityCachPayment_EntryGuid] FOREIGN KEY([EntryGuid])
REFERENCES [dbo].[HEntry] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ElectricityCachPayment] CHECK CONSTRAINT [FK_ElectricityCachPayment_EntryGuid]
GO
ALTER TABLE [dbo].[ElectricityType]  WITH CHECK ADD  CONSTRAINT [FK_ElectricityType_BuildingGuid] FOREIGN KEY([BuildingGuid])
REFERENCES [dbo].[Building] ([Guid])
GO
ALTER TABLE [dbo].[ElectricityType] CHECK CONSTRAINT [FK_ElectricityType_BuildingGuid]
GO
ALTER TABLE [dbo].[ElectricityType]  WITH CHECK ADD  CONSTRAINT [FK_ElectricityType_CurrencyGuid] FOREIGN KEY([CurrencyGuid])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[ElectricityType] CHECK CONSTRAINT [FK_ElectricityType_CurrencyGuid]
GO
ALTER TABLE [dbo].[ElectricityType]  WITH CHECK ADD  CONSTRAINT [FK_ElectricityType_DefCheckTypeGuid] FOREIGN KEY([DefCheckTypeGuid])
REFERENCES [dbo].[CheckType] ([Guid])
GO
ALTER TABLE [dbo].[ElectricityType] CHECK CONSTRAINT [FK_ElectricityType_DefCheckTypeGuid]
GO
ALTER TABLE [dbo].[ElectricityType]  WITH CHECK ADD  CONSTRAINT [FK_ElectricityType_DefEntryTypeGuid] FOREIGN KEY([DefEntryTypeGuid])
REFERENCES [dbo].[EntryType] ([Guid])
GO
ALTER TABLE [dbo].[ElectricityType] CHECK CONSTRAINT [FK_ElectricityType_DefEntryTypeGuid]
GO
ALTER TABLE [dbo].[ElectricityType]  WITH CHECK ADD  CONSTRAINT [FK_ElectricityType_DiscountAccountGuid] FOREIGN KEY([DiscountAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ElectricityType] CHECK CONSTRAINT [FK_ElectricityType_DiscountAccountGuid]
GO
ALTER TABLE [dbo].[ElectricityType]  WITH CHECK ADD  CONSTRAINT [FK_ElectricityType_DrainageAccountGuid] FOREIGN KEY([DrainageAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ElectricityType] CHECK CONSTRAINT [FK_ElectricityType_DrainageAccountGuid]
GO
ALTER TABLE [dbo].[ElectricityType]  WITH CHECK ADD  CONSTRAINT [FK_ElectricityType_ExtraAccountGuid] FOREIGN KEY([ExtraAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ElectricityType] CHECK CONSTRAINT [FK_ElectricityType_ExtraAccountGuid]
GO
ALTER TABLE [dbo].[ElectricityType]  WITH CHECK ADD  CONSTRAINT [FK_ElectricityType_FeeAccountGuid] FOREIGN KEY([FeeAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ElectricityType] CHECK CONSTRAINT [FK_ElectricityType_FeeAccountGuid]
GO
ALTER TABLE [dbo].[ElectricityType]  WITH CHECK ADD  CONSTRAINT [FK_ElectricityType_FineAccountGuid] FOREIGN KEY([FineAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ElectricityType] CHECK CONSTRAINT [FK_ElectricityType_FineAccountGuid]
GO
ALTER TABLE [dbo].[ElectricityType]  WITH CHECK ADD  CONSTRAINT [FK_ElectricityType_IncomeAccountGuid] FOREIGN KEY([IncomeAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ElectricityType] CHECK CONSTRAINT [FK_ElectricityType_IncomeAccountGuid]
GO
ALTER TABLE [dbo].[ElectricityType]  WITH CHECK ADD  CONSTRAINT [FK_ElectricityType_WaterAccountGuid] FOREIGN KEY([WaterAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ElectricityType] CHECK CONSTRAINT [FK_ElectricityType_WaterAccountGuid]
GO
ALTER TABLE [dbo].[ElectricityTypePrivilege]  WITH CHECK ADD  CONSTRAINT [FK_ElectricityTypePrivilege_ElectricityTypeGuid] FOREIGN KEY([ElectricityTypeGuid])
REFERENCES [dbo].[ElectricityType] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ElectricityTypePrivilege] CHECK CONSTRAINT [FK_ElectricityTypePrivilege_ElectricityTypeGuid]
GO
ALTER TABLE [dbo].[ElectricityTypePrivilege]  WITH CHECK ADD  CONSTRAINT [FK_ElectricityTypePrivilege_UserGuid] FOREIGN KEY([UserGuid])
REFERENCES [dbo].[Realty_Users] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ElectricityTypePrivilege] CHECK CONSTRAINT [FK_ElectricityTypePrivilege_UserGuid]
GO
ALTER TABLE [dbo].[EntryDate]  WITH CHECK ADD  CONSTRAINT [FK_EntryDate_Account_Guid] FOREIGN KEY([AccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[EntryDate] CHECK CONSTRAINT [FK_EntryDate_Account_Guid]
GO
ALTER TABLE [dbo].[EntryDate]  WITH CHECK ADD  CONSTRAINT [FK_EntryDate_BranchGuid] FOREIGN KEY([BranchGuid])
REFERENCES [dbo].[Branch] ([Guid])
GO
ALTER TABLE [dbo].[EntryDate] CHECK CONSTRAINT [FK_EntryDate_BranchGuid]
GO
ALTER TABLE [dbo].[EntryDate]  WITH CHECK ADD  CONSTRAINT [FK_EntryDate_Currency_Guid] FOREIGN KEY([CurrencyGuid])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[EntryDate] CHECK CONSTRAINT [FK_EntryDate_Currency_Guid]
GO
ALTER TABLE [dbo].[EntryDate]  WITH CHECK ADD  CONSTRAINT [FK_EntryDate_TypeGuid] FOREIGN KEY([TypeGuid])
REFERENCES [dbo].[EntryDateType] ([Guid])
GO
ALTER TABLE [dbo].[EntryDate] CHECK CONSTRAINT [FK_EntryDate_TypeGuid]
GO
ALTER TABLE [dbo].[EntryDate]  WITH CHECK ADD  CONSTRAINT [FK_EntryDate_UserGuid] FOREIGN KEY([UserGuid])
REFERENCES [dbo].[Realty_Users] ([Guid])
GO
ALTER TABLE [dbo].[EntryDate] CHECK CONSTRAINT [FK_EntryDate_UserGuid]
GO
ALTER TABLE [dbo].[EntryDateDetail]  WITH CHECK ADD  CONSTRAINT [FK_EntryDateDetail_Account_Guid] FOREIGN KEY([AcGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[EntryDateDetail] CHECK CONSTRAINT [FK_EntryDateDetail_Account_Guid]
GO
ALTER TABLE [dbo].[EntryDateDetail]  WITH CHECK ADD  CONSTRAINT [FK_EntryDateDetail_Cost_Guid] FOREIGN KEY([CostGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[EntryDateDetail] CHECK CONSTRAINT [FK_EntryDateDetail_Cost_Guid]
GO
ALTER TABLE [dbo].[EntryDateDetail]  WITH CHECK ADD  CONSTRAINT [FK_EntryDateDetail_Currency_Guid] FOREIGN KEY([CurrencyGuid])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[EntryDateDetail] CHECK CONSTRAINT [FK_EntryDateDetail_Currency_Guid]
GO
ALTER TABLE [dbo].[EntryDateDetail]  WITH CHECK ADD  CONSTRAINT [FK_EntryDateDetail_Guid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[EntryDate] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[EntryDateDetail] CHECK CONSTRAINT [FK_EntryDateDetail_Guid]
GO
ALTER TABLE [dbo].[EntryDateDetail]  WITH CHECK ADD  CONSTRAINT [FK_EntryDateDetail_ObverseAcGuid_Guid] FOREIGN KEY([ObverseAcGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[EntryDateDetail] CHECK CONSTRAINT [FK_EntryDateDetail_ObverseAcGuid_Guid]
GO
ALTER TABLE [dbo].[EntryDateType]  WITH CHECK ADD  CONSTRAINT [FK_EntryDateType_DefAccountGuid] FOREIGN KEY([DefAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[EntryDateType] CHECK CONSTRAINT [FK_EntryDateType_DefAccountGuid]
GO
ALTER TABLE [dbo].[EntryDateTypePrivilege]  WITH CHECK ADD  CONSTRAINT [FK_EntryDateTypePrivilege_EntryTypeGuid] FOREIGN KEY([EntryTypeGuid])
REFERENCES [dbo].[EntryDateType] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[EntryDateTypePrivilege] CHECK CONSTRAINT [FK_EntryDateTypePrivilege_EntryTypeGuid]
GO
ALTER TABLE [dbo].[EntryDateTypePrivilege]  WITH CHECK ADD  CONSTRAINT [FK_EntryDateTypePrivilege_UserGuid] FOREIGN KEY([UserGuid])
REFERENCES [dbo].[Realty_Users] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[EntryDateTypePrivilege] CHECK CONSTRAINT [FK_EntryDateTypePrivilege_UserGuid]
GO
ALTER TABLE [dbo].[EntryType]  WITH CHECK ADD  CONSTRAINT [FK_EntryType_DefAccountGuid] FOREIGN KEY([DefAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[EntryType] CHECK CONSTRAINT [FK_EntryType_DefAccountGuid]
GO
ALTER TABLE [dbo].[EntryTypePrivilege]  WITH CHECK ADD  CONSTRAINT [FK_EntryTypePrivilege_EntryTypeGuid] FOREIGN KEY([EntryTypeGuid])
REFERENCES [dbo].[EntryType] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[EntryTypePrivilege] CHECK CONSTRAINT [FK_EntryTypePrivilege_EntryTypeGuid]
GO
ALTER TABLE [dbo].[EntryTypePrivilege]  WITH CHECK ADD  CONSTRAINT [FK_EntryTypePrivilege_UserGuid] FOREIGN KEY([UserGuid])
REFERENCES [dbo].[Realty_Users] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[EntryTypePrivilege] CHECK CONSTRAINT [FK_EntryTypePrivilege_UserGuid]
GO
ALTER TABLE [dbo].[FlatAssets]  WITH CHECK ADD  CONSTRAINT [FK_FlatAssets_AssetsGuid] FOREIGN KEY([AssetsGuid])
REFERENCES [dbo].[Assets] ([Guid])
GO
ALTER TABLE [dbo].[FlatAssets] CHECK CONSTRAINT [FK_FlatAssets_AssetsGuid]
GO
ALTER TABLE [dbo].[FlatAssets]  WITH CHECK ADD  CONSTRAINT [FK_FlatAssets_ContractGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[Apartment] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[FlatAssets] CHECK CONSTRAINT [FK_FlatAssets_ContractGuid]
GO
ALTER TABLE [dbo].[FlatBuilding]  WITH CHECK ADD  CONSTRAINT [FK_FlatBuilding_BuildingAcGuid] FOREIGN KEY([BuildingAcGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[FlatBuilding] CHECK CONSTRAINT [FK_FlatBuilding_BuildingAcGuid]
GO
ALTER TABLE [dbo].[FlatBuilding]  WITH CHECK ADD  CONSTRAINT [FK_FlatBuilding_BuildingGuid] FOREIGN KEY([BuildingGuid])
REFERENCES [dbo].[Building] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[FlatBuilding] CHECK CONSTRAINT [FK_FlatBuilding_BuildingGuid]
GO
ALTER TABLE [dbo].[FlatBuilding]  WITH CHECK ADD  CONSTRAINT [FK_FlatBuilding_ClientAcGuid] FOREIGN KEY([ClientAcGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[FlatBuilding] CHECK CONSTRAINT [FK_FlatBuilding_ClientAcGuid]
GO
ALTER TABLE [dbo].[FlatBuilding]  WITH CHECK ADD  CONSTRAINT [FK_FlatBuilding_CostGuid] FOREIGN KEY([CostGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[FlatBuilding] CHECK CONSTRAINT [FK_FlatBuilding_CostGuid]
GO
ALTER TABLE [dbo].[FlatBuilding]  WITH CHECK ADD  CONSTRAINT [FK_FlatBuilding_CurrencyGuid] FOREIGN KEY([CurrencyGuid])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[FlatBuilding] CHECK CONSTRAINT [FK_FlatBuilding_CurrencyGuid]
GO
ALTER TABLE [dbo].[FlatBuilding]  WITH CHECK ADD  CONSTRAINT [FK_FlatBuilding_ProjectAcGuid] FOREIGN KEY([ProjectAcGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[FlatBuilding] CHECK CONSTRAINT [FK_FlatBuilding_ProjectAcGuid]
GO
ALTER TABLE [dbo].[FlatBuildingDetails]  WITH CHECK ADD  CONSTRAINT [FK_FlatBuildingDetails_BuildingGuid] FOREIGN KEY([BuildingGuid])
REFERENCES [dbo].[Building] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[FlatBuildingDetails] CHECK CONSTRAINT [FK_FlatBuildingDetails_BuildingGuid]
GO
ALTER TABLE [dbo].[FlatBuildingDetails]  WITH CHECK ADD  CONSTRAINT [FK_FlatBuildingDetails_CustGuid] FOREIGN KEY([CustGuid])
REFERENCES [dbo].[Customer] ([Guid])
GO
ALTER TABLE [dbo].[FlatBuildingDetails] CHECK CONSTRAINT [FK_FlatBuildingDetails_CustGuid]
GO
ALTER TABLE [dbo].[FlatBuildingDetails_2]  WITH CHECK ADD  CONSTRAINT [FK_FlatBuildingDetails_2_BuildingGuid] FOREIGN KEY([BuildingGuid])
REFERENCES [dbo].[Building] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[FlatBuildingDetails_2] CHECK CONSTRAINT [FK_FlatBuildingDetails_2_BuildingGuid]
GO
ALTER TABLE [dbo].[FlatBuildingDetails_BHouse]  WITH CHECK ADD  CONSTRAINT [FK_FlatBuildingDetails_BHouse_BuildingGuid] FOREIGN KEY([BuildingGuid])
REFERENCES [dbo].[Building] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[FlatBuildingDetails_BHouse] CHECK CONSTRAINT [FK_FlatBuildingDetails_BHouse_BuildingGuid]
GO
ALTER TABLE [dbo].[FlatBuildingDetails_FlatDriver]  WITH CHECK ADD  CONSTRAINT [FK_FlatBuildingDetails_FlatDriver_BuildingGuid] FOREIGN KEY([BuildingGuid])
REFERENCES [dbo].[Building] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[FlatBuildingDetails_FlatDriver] CHECK CONSTRAINT [FK_FlatBuildingDetails_FlatDriver_BuildingGuid]
GO
ALTER TABLE [dbo].[FlatBuildingDetails_FlatServant]  WITH CHECK ADD  CONSTRAINT [FK_FlatBuildingDetails_FlatServant_BuildingGuid] FOREIGN KEY([BuildingGuid])
REFERENCES [dbo].[Building] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[FlatBuildingDetails_FlatServant] CHECK CONSTRAINT [FK_FlatBuildingDetails_FlatServant_BuildingGuid]
GO
ALTER TABLE [dbo].[FlatBuildingDetails_MBalance]  WITH CHECK ADD  CONSTRAINT [FK_FlatBuildingDetails_MBalance_BuildingGuid] FOREIGN KEY([BuildingGuid])
REFERENCES [dbo].[Building] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[FlatBuildingDetails_MBalance] CHECK CONSTRAINT [FK_FlatBuildingDetails_MBalance_BuildingGuid]
GO
ALTER TABLE [dbo].[FlatBuildingDetails_Office]  WITH CHECK ADD  CONSTRAINT [FK_FlatBuildingDetails_Office_BuildingGuid] FOREIGN KEY([BuildingGuid])
REFERENCES [dbo].[Building] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[FlatBuildingDetails_Office] CHECK CONSTRAINT [FK_FlatBuildingDetails_Office_BuildingGuid]
GO
ALTER TABLE [dbo].[FlatBuildingDetails_Parking]  WITH CHECK ADD  CONSTRAINT [FK_FlatBuildingDetails_Parking_BuildingGuid] FOREIGN KEY([BuildingGuid])
REFERENCES [dbo].[Building] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[FlatBuildingDetails_Parking] CHECK CONSTRAINT [FK_FlatBuildingDetails_Parking_BuildingGuid]
GO
ALTER TABLE [dbo].[FlatBuildingDetails_Shop]  WITH CHECK ADD  CONSTRAINT [FK_FlatBuildingDetails_Shop_BuildingGuid] FOREIGN KEY([BuildingGuid])
REFERENCES [dbo].[Building] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[FlatBuildingDetails_Shop] CHECK CONSTRAINT [FK_FlatBuildingDetails_Shop_BuildingGuid]
GO
ALTER TABLE [dbo].[FlatBuildingDetails_Store]  WITH CHECK ADD  CONSTRAINT [FK_FlatBuildingDetails_Store_BuildingGuid] FOREIGN KEY([BuildingGuid])
REFERENCES [dbo].[Building] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[FlatBuildingDetails_Store] CHECK CONSTRAINT [FK_FlatBuildingDetails_Store_BuildingGuid]
GO
ALTER TABLE [dbo].[FlatContractFee]  WITH CHECK ADD  CONSTRAINT [FK_FlatContractFee_AccountGuid] FOREIGN KEY([AccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[FlatContractFee] CHECK CONSTRAINT [FK_FlatContractFee_AccountGuid]
GO
ALTER TABLE [dbo].[FlatContractFee]  WITH CHECK ADD  CONSTRAINT [FK_FlatContractFee_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[LeaseApartment] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[FlatContractFee] CHECK CONSTRAINT [FK_FlatContractFee_ParentGuid]
GO
ALTER TABLE [dbo].[FlatContractFine]  WITH CHECK ADD  CONSTRAINT [FK_FlatContractFine_AccountGuid] FOREIGN KEY([AccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[FlatContractFine] CHECK CONSTRAINT [FK_FlatContractFine_AccountGuid]
GO
ALTER TABLE [dbo].[FlatContractFine]  WITH CHECK ADD  CONSTRAINT [FK_FlatContractFine_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[LeaseApartment] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[FlatContractFine] CHECK CONSTRAINT [FK_FlatContractFine_ParentGuid]
GO
ALTER TABLE [dbo].[FlatContractReceiptNO]  WITH CHECK ADD  CONSTRAINT [FK_FlatContractReceiptNO_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[LeaseApartment] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[FlatContractReceiptNO] CHECK CONSTRAINT [FK_FlatContractReceiptNO_ParentGuid]
GO
ALTER TABLE [dbo].[Flatwallet]  WITH CHECK ADD  CONSTRAINT [FK_Flatwallet_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[wallet] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[Flatwallet] CHECK CONSTRAINT [FK_Flatwallet_ParentGuid]
GO
ALTER TABLE [dbo].[Flatwallet]  WITH CHECK ADD  CONSTRAINT [UK_wallet_FlatGuid] FOREIGN KEY([FlatGuid])
REFERENCES [dbo].[Apartment] ([Guid])
GO
ALTER TABLE [dbo].[Flatwallet] CHECK CONSTRAINT [UK_wallet_FlatGuid]
GO
ALTER TABLE [dbo].[Flatwallet]  WITH CHECK ADD  CONSTRAINT [UK_wallet_Flatwallet] FOREIGN KEY([BuildingGuid])
REFERENCES [dbo].[Building] ([Guid])
GO
ALTER TABLE [dbo].[Flatwallet] CHECK CONSTRAINT [UK_wallet_Flatwallet]
GO
ALTER TABLE [dbo].[HEntry]  WITH CHECK ADD  CONSTRAINT [FK_HEntry_BranchGuid] FOREIGN KEY([BranchGuid])
REFERENCES [dbo].[Branch] ([Guid])
GO
ALTER TABLE [dbo].[HEntry] CHECK CONSTRAINT [FK_HEntry_BranchGuid]
GO
ALTER TABLE [dbo].[HEntry]  WITH CHECK ADD  CONSTRAINT [FK_HEntry_Currency_Guid] FOREIGN KEY([CurrencyGuid])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[HEntry] CHECK CONSTRAINT [FK_HEntry_Currency_Guid]
GO
ALTER TABLE [dbo].[HEntry]  WITH CHECK ADD  CONSTRAINT [FK_HEntry_UserGuid] FOREIGN KEY([UserGuid])
REFERENCES [dbo].[Realty_Users] ([Guid])
GO
ALTER TABLE [dbo].[HEntry] CHECK CONSTRAINT [FK_HEntry_UserGuid]
GO
ALTER TABLE [dbo].[IncAccount]  WITH CHECK ADD  CONSTRAINT [Fk_IncAccount_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[IncAccount] ([Guid])
GO
ALTER TABLE [dbo].[IncAccount] CHECK CONSTRAINT [Fk_IncAccount_ParentGuid]
GO
ALTER TABLE [dbo].[IncAccountDetailAc]  WITH CHECK ADD  CONSTRAINT [Fk_IncAccountDetailAc_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[IncAccount] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[IncAccountDetailAc] CHECK CONSTRAINT [Fk_IncAccountDetailAc_ParentGuid]
GO
ALTER TABLE [dbo].[IncomeSavedDetail]  WITH CHECK ADD  CONSTRAINT [FK_IncomeSavedDetail_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[IncomeSaved] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[IncomeSavedDetail] CHECK CONSTRAINT [FK_IncomeSavedDetail_ParentGuid]
GO
ALTER TABLE [dbo].[LandContract]  WITH CHECK ADD  CONSTRAINT [FK_LandContract_AcCommissionExpenseGuid] FOREIGN KEY([AcCommissionExpenseGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[LandContract] CHECK CONSTRAINT [FK_LandContract_AcCommissionExpenseGuid]
GO
ALTER TABLE [dbo].[LandContract]  WITH CHECK ADD  CONSTRAINT [FK_LandContract_AcCommissionFromCustGuid] FOREIGN KEY([AcCommissionFromCustGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[LandContract] CHECK CONSTRAINT [FK_LandContract_AcCommissionFromCustGuid]
GO
ALTER TABLE [dbo].[LandContract]  WITH CHECK ADD  CONSTRAINT [FK_LandContract_AcCommissionFromOwnerGuid] FOREIGN KEY([AcCommissionFromOwnerGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[LandContract] CHECK CONSTRAINT [FK_LandContract_AcCommissionFromOwnerGuid]
GO
ALTER TABLE [dbo].[LandContract]  WITH CHECK ADD  CONSTRAINT [FK_LandContract_AccountCertificatValue] FOREIGN KEY([AccountCertificatValue])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[LandContract] CHECK CONSTRAINT [FK_LandContract_AccountCertificatValue]
GO
ALTER TABLE [dbo].[LandContract]  WITH CHECK ADD  CONSTRAINT [FK_LandContract_AccountContractPrice] FOREIGN KEY([AccountContractPrice])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[LandContract] CHECK CONSTRAINT [FK_LandContract_AccountContractPrice]
GO
ALTER TABLE [dbo].[LandContract]  WITH CHECK ADD  CONSTRAINT [FK_LandContract_AcIncomNextYearGUID] FOREIGN KEY([AcIncomNextYearGUID])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[LandContract] CHECK CONSTRAINT [FK_LandContract_AcIncomNextYearGUID]
GO
ALTER TABLE [dbo].[LandContract]  WITH CHECK ADD  CONSTRAINT [FK_LandContract_AcquittancePrintedByGuid] FOREIGN KEY([AcquittancePrintedByGuid])
REFERENCES [dbo].[Realty_Users] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[LandContract] CHECK CONSTRAINT [FK_LandContract_AcquittancePrintedByGuid]
GO
ALTER TABLE [dbo].[LandContract]  WITH CHECK ADD  CONSTRAINT [FK_LandContract_AcSalesManCommissionGuid] FOREIGN KEY([AcSalesManCommissionGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[LandContract] CHECK CONSTRAINT [FK_LandContract_AcSalesManCommissionGuid]
GO
ALTER TABLE [dbo].[LandContract]  WITH CHECK ADD  CONSTRAINT [FK_LandContract_BranchGuid] FOREIGN KEY([BranchGuid])
REFERENCES [dbo].[Branch] ([Guid])
GO
ALTER TABLE [dbo].[LandContract] CHECK CONSTRAINT [FK_LandContract_BranchGuid]
GO
ALTER TABLE [dbo].[LandContract]  WITH CHECK ADD  CONSTRAINT [FK_LandContract_CurrencyGuid] FOREIGN KEY([CurrencyGuid])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[LandContract] CHECK CONSTRAINT [FK_LandContract_CurrencyGuid]
GO
ALTER TABLE [dbo].[LandContract]  WITH CHECK ADD  CONSTRAINT [FK_LandContract_CustAccountGuid] FOREIGN KEY([CustAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[LandContract] CHECK CONSTRAINT [FK_LandContract_CustAccountGuid]
GO
ALTER TABLE [dbo].[LandContract]  WITH CHECK ADD  CONSTRAINT [FK_LandContract_DiscountAccountGuid] FOREIGN KEY([DiscountAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[LandContract] CHECK CONSTRAINT [FK_LandContract_DiscountAccountGuid]
GO
ALTER TABLE [dbo].[LandContract]  WITH CHECK ADD  CONSTRAINT [FK_LandContract_FineAccount] FOREIGN KEY([FineAccount])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[LandContract] CHECK CONSTRAINT [FK_LandContract_FineAccount]
GO
ALTER TABLE [dbo].[LandContract]  WITH CHECK ADD  CONSTRAINT [FK_LandContract_FineRevenueAccountGUID] FOREIGN KEY([FineRevenueAccountGUID])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[LandContract] CHECK CONSTRAINT [FK_LandContract_FineRevenueAccountGUID]
GO
ALTER TABLE [dbo].[LandContract]  WITH CHECK ADD  CONSTRAINT [FK_LandContract_InsuranceAccountGuid] FOREIGN KEY([InsuranceAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[LandContract] CHECK CONSTRAINT [FK_LandContract_InsuranceAccountGuid]
GO
ALTER TABLE [dbo].[LandContract]  WITH CHECK ADD  CONSTRAINT [FK_LandContract_OtherFeeAccount1GUID] FOREIGN KEY([OtherFeeAccount1GUID])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[LandContract] CHECK CONSTRAINT [FK_LandContract_OtherFeeAccount1GUID]
GO
ALTER TABLE [dbo].[LandContract]  WITH CHECK ADD  CONSTRAINT [FK_LandContract_OtherFeeAccount2GUID] FOREIGN KEY([OtherFeeAccount2GUID])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[LandContract] CHECK CONSTRAINT [FK_LandContract_OtherFeeAccount2GUID]
GO
ALTER TABLE [dbo].[LandContract]  WITH CHECK ADD  CONSTRAINT [FK_LandContract_OtherFeeAccount3GUID] FOREIGN KEY([OtherFeeAccount3GUID])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[LandContract] CHECK CONSTRAINT [FK_LandContract_OtherFeeAccount3GUID]
GO
ALTER TABLE [dbo].[LandContract]  WITH CHECK ADD  CONSTRAINT [FK_LandContract_OtherFeeAccount4GUID] FOREIGN KEY([OtherFeeAccount4GUID])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[LandContract] CHECK CONSTRAINT [FK_LandContract_OtherFeeAccount4GUID]
GO
ALTER TABLE [dbo].[LandContract]  WITH CHECK ADD  CONSTRAINT [FK_LandContract_OtherFeeAccount5GUID] FOREIGN KEY([OtherFeeAccount5GUID])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[LandContract] CHECK CONSTRAINT [FK_LandContract_OtherFeeAccount5GUID]
GO
ALTER TABLE [dbo].[LandContract]  WITH CHECK ADD  CONSTRAINT [FK_LandContract_OtherFeeAccountGUID] FOREIGN KEY([OtherFeeAccountGUID])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[LandContract] CHECK CONSTRAINT [FK_LandContract_OtherFeeAccountGUID]
GO
ALTER TABLE [dbo].[LandContract]  WITH CHECK ADD  CONSTRAINT [FK_LandContract_RevenueAccountGuid] FOREIGN KEY([RevenueAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[LandContract] CHECK CONSTRAINT [FK_LandContract_RevenueAccountGuid]
GO
ALTER TABLE [dbo].[LandContract]  WITH CHECK ADD  CONSTRAINT [FK_LandContract_UserGuid] FOREIGN KEY([UserGuid])
REFERENCES [dbo].[Realty_Users] ([Guid])
GO
ALTER TABLE [dbo].[LandContract] CHECK CONSTRAINT [FK_LandContract_UserGuid]
GO
ALTER TABLE [dbo].[LandContract]  WITH CHECK ADD  CONSTRAINT [UK_LandContract_CostGuid] FOREIGN KEY([CostGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[LandContract] CHECK CONSTRAINT [UK_LandContract_CostGuid]
GO
ALTER TABLE [dbo].[LandContract]  WITH CHECK ADD  CONSTRAINT [UK_LandContract_CustomerGuid] FOREIGN KEY([CustomerGuid])
REFERENCES [dbo].[Customer] ([Guid])
GO
ALTER TABLE [dbo].[LandContract] CHECK CONSTRAINT [UK_LandContract_CustomerGuid]
GO
ALTER TABLE [dbo].[LandContract]  WITH CHECK ADD  CONSTRAINT [UK_LandContract_LandGuid] FOREIGN KEY([LandGuid])
REFERENCES [dbo].[Earth] ([Guid])
GO
ALTER TABLE [dbo].[LandContract] CHECK CONSTRAINT [UK_LandContract_LandGuid]
GO
ALTER TABLE [dbo].[LandContract]  WITH CHECK ADD  CONSTRAINT [UK_LandContract_RentInfoGuid] FOREIGN KEY([RentInfoGuid])
REFERENCES [dbo].[RentInfo] ([Guid])
GO
ALTER TABLE [dbo].[LandContract] CHECK CONSTRAINT [UK_LandContract_RentInfoGuid]
GO
ALTER TABLE [dbo].[LandContract]  WITH CHECK ADD  CONSTRAINT [UK_LandContract_SalesManGuid] FOREIGN KEY([SalesManGuid])
REFERENCES [dbo].[Salesman] ([Guid])
GO
ALTER TABLE [dbo].[LandContract] CHECK CONSTRAINT [UK_LandContract_SalesManGuid]
GO
ALTER TABLE [dbo].[LandContract]  WITH CHECK ADD  CONSTRAINT [UK_LandContract_TypeGuid] FOREIGN KEY([TypeGuid])
REFERENCES [dbo].[ContractType] ([Guid])
GO
ALTER TABLE [dbo].[LandContract] CHECK CONSTRAINT [UK_LandContract_TypeGuid]
GO
ALTER TABLE [dbo].[LandContract]  WITH CHECK ADD  CONSTRAINT [UK_LandContract_VillaGuid] FOREIGN KEY([VillaGuid])
REFERENCES [dbo].[Villa] ([Guid])
GO
ALTER TABLE [dbo].[LandContract] CHECK CONSTRAINT [UK_LandContract_VillaGuid]
GO
ALTER TABLE [dbo].[LandContractCachPayment]  WITH CHECK ADD  CONSTRAINT [FK_LandContractCachPayment_ContractGuid] FOREIGN KEY([ContractGuid])
REFERENCES [dbo].[LandContract] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[LandContractCachPayment] CHECK CONSTRAINT [FK_LandContractCachPayment_ContractGuid]
GO
ALTER TABLE [dbo].[LandContractCachPayment]  WITH CHECK ADD  CONSTRAINT [FK_LandContractCachPayment_EntryGuid] FOREIGN KEY([EntryGuid])
REFERENCES [dbo].[HEntry] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[LandContractCachPayment] CHECK CONSTRAINT [FK_LandContractCachPayment_EntryGuid]
GO
ALTER TABLE [dbo].[LandContractFee]  WITH CHECK ADD  CONSTRAINT [FK_LandContractFee_AccountGuid] FOREIGN KEY([AccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[LandContractFee] CHECK CONSTRAINT [FK_LandContractFee_AccountGuid]
GO
ALTER TABLE [dbo].[LandContractFee]  WITH CHECK ADD  CONSTRAINT [FK_LandContractFee_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[LandContract] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[LandContractFee] CHECK CONSTRAINT [FK_LandContractFee_ParentGuid]
GO
ALTER TABLE [dbo].[LandContractReceiptNO]  WITH CHECK ADD  CONSTRAINT [FK_LandContractReceiptNO_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[LandContract] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[LandContractReceiptNO] CHECK CONSTRAINT [FK_LandContractReceiptNO_ParentGuid]
GO
ALTER TABLE [dbo].[Landwallet]  WITH CHECK ADD  CONSTRAINT [FK_Landwallet_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[wallet] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[Landwallet] CHECK CONSTRAINT [FK_Landwallet_ParentGuid]
GO
ALTER TABLE [dbo].[Landwallet]  WITH CHECK ADD  CONSTRAINT [UK_wallet_LandGuid] FOREIGN KEY([LandGuid])
REFERENCES [dbo].[Earth] ([Guid])
GO
ALTER TABLE [dbo].[Landwallet] CHECK CONSTRAINT [UK_wallet_LandGuid]
GO
ALTER TABLE [dbo].[Lawsuit]  WITH CHECK ADD  CONSTRAINT [FK_Lawsuit_CurrencyGuid] FOREIGN KEY([CurrencyGUID])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[Lawsuit] CHECK CONSTRAINT [FK_Lawsuit_CurrencyGuid]
GO
ALTER TABLE [dbo].[Lawsuit]  WITH CHECK ADD  CONSTRAINT [FK_Lawsuit_FurnitureCreditAccountGuid] FOREIGN KEY([FurnitureCreditAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[Lawsuit] CHECK CONSTRAINT [FK_Lawsuit_FurnitureCreditAccountGuid]
GO
ALTER TABLE [dbo].[Lawsuit]  WITH CHECK ADD  CONSTRAINT [FK_Lawsuit_FurnitureDebitAccountGuid] FOREIGN KEY([FurnitureDebitAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[Lawsuit] CHECK CONSTRAINT [FK_Lawsuit_FurnitureDebitAccountGuid]
GO
ALTER TABLE [dbo].[Lawsuit]  WITH CHECK ADD  CONSTRAINT [FK_Lawsuit_LawyerCreditAccountGuid] FOREIGN KEY([LawyerCreditAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[Lawsuit] CHECK CONSTRAINT [FK_Lawsuit_LawyerCreditAccountGuid]
GO
ALTER TABLE [dbo].[Lawsuit]  WITH CHECK ADD  CONSTRAINT [FK_Lawsuit_LawyerDebitAccountGuid] FOREIGN KEY([LawyerDebitAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[Lawsuit] CHECK CONSTRAINT [FK_Lawsuit_LawyerDebitAccountGuid]
GO
ALTER TABLE [dbo].[Lawsuit]  WITH CHECK ADD  CONSTRAINT [FK_Lawsuit_maintenanceCreditAccountGuid] FOREIGN KEY([maintenanceCreditAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[Lawsuit] CHECK CONSTRAINT [FK_Lawsuit_maintenanceCreditAccountGuid]
GO
ALTER TABLE [dbo].[Lawsuit]  WITH CHECK ADD  CONSTRAINT [FK_Lawsuit_maintenanceDebitAccountGuid] FOREIGN KEY([maintenanceDebitAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[Lawsuit] CHECK CONSTRAINT [FK_Lawsuit_maintenanceDebitAccountGuid]
GO
ALTER TABLE [dbo].[LawsuitExpense]  WITH CHECK ADD  CONSTRAINT [FK_LawsuitExpense_CreditAccountGuid] FOREIGN KEY([CreditAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[LawsuitExpense] CHECK CONSTRAINT [FK_LawsuitExpense_CreditAccountGuid]
GO
ALTER TABLE [dbo].[LawsuitExpense]  WITH CHECK ADD  CONSTRAINT [FK_LawsuitExpense_CreditCostGuid] FOREIGN KEY([CreditCostGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[LawsuitExpense] CHECK CONSTRAINT [FK_LawsuitExpense_CreditCostGuid]
GO
ALTER TABLE [dbo].[LawsuitExpense]  WITH CHECK ADD  CONSTRAINT [FK_LawsuitExpense_CurrencyGuid] FOREIGN KEY([CurrencyGUID])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[LawsuitExpense] CHECK CONSTRAINT [FK_LawsuitExpense_CurrencyGuid]
GO
ALTER TABLE [dbo].[LawsuitExpense]  WITH CHECK ADD  CONSTRAINT [FK_LawsuitExpense_DebitAccountGuid] FOREIGN KEY([DebitAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[LawsuitExpense] CHECK CONSTRAINT [FK_LawsuitExpense_DebitAccountGuid]
GO
ALTER TABLE [dbo].[LawsuitExpense]  WITH CHECK ADD  CONSTRAINT [FK_LawsuitExpense_DebitCostGuid] FOREIGN KEY([DebitCostGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[LawsuitExpense] CHECK CONSTRAINT [FK_LawsuitExpense_DebitCostGuid]
GO
ALTER TABLE [dbo].[LawsuitExpense]  WITH CHECK ADD  CONSTRAINT [FK_LawsuitExpense_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[Lawsuit] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[LawsuitExpense] CHECK CONSTRAINT [FK_LawsuitExpense_ParentGuid]
GO
ALTER TABLE [dbo].[LawsuitExpense]  WITH CHECK ADD  CONSTRAINT [FK_LawsuitExpense_UserGuid] FOREIGN KEY([UserGuid])
REFERENCES [dbo].[Realty_Users] ([Guid])
GO
ALTER TABLE [dbo].[LawsuitExpense] CHECK CONSTRAINT [FK_LawsuitExpense_UserGuid]
GO
ALTER TABLE [dbo].[LawsuitState]  WITH CHECK ADD  CONSTRAINT [FK_LawsuitState_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[Lawsuit] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[LawsuitState] CHECK CONSTRAINT [FK_LawsuitState_ParentGuid]
GO
ALTER TABLE [dbo].[LawsuitState]  WITH CHECK ADD  CONSTRAINT [FK_LawsuitState_UserGuid] FOREIGN KEY([UserGuid])
REFERENCES [dbo].[Realty_Users] ([Guid])
GO
ALTER TABLE [dbo].[LawsuitState] CHECK CONSTRAINT [FK_LawsuitState_UserGuid]
GO
ALTER TABLE [dbo].[LeaseApartment]  WITH CHECK ADD  CONSTRAINT [FK_LeaseApartment_AcCommissionExpenseGuid] FOREIGN KEY([AcCommissionExpenseGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[LeaseApartment] CHECK CONSTRAINT [FK_LeaseApartment_AcCommissionExpenseGuid]
GO
ALTER TABLE [dbo].[LeaseApartment]  WITH CHECK ADD  CONSTRAINT [FK_LeaseApartment_AcCommissionFromCustGuid] FOREIGN KEY([AcCommissionFromCustGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[LeaseApartment] CHECK CONSTRAINT [FK_LeaseApartment_AcCommissionFromCustGuid]
GO
ALTER TABLE [dbo].[LeaseApartment]  WITH CHECK ADD  CONSTRAINT [FK_LeaseApartment_AcCommissionFromOwnerGuid] FOREIGN KEY([AcCommissionFromOwnerGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[LeaseApartment] CHECK CONSTRAINT [FK_LeaseApartment_AcCommissionFromOwnerGuid]
GO
ALTER TABLE [dbo].[LeaseApartment]  WITH CHECK ADD  CONSTRAINT [FK_LeaseApartment_AccountCertificatValue] FOREIGN KEY([AccountCertificatValue])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[LeaseApartment] CHECK CONSTRAINT [FK_LeaseApartment_AccountCertificatValue]
GO
ALTER TABLE [dbo].[LeaseApartment]  WITH CHECK ADD  CONSTRAINT [FK_LeaseApartment_AccountContractPrice] FOREIGN KEY([AccountContractPrice])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[LeaseApartment] CHECK CONSTRAINT [FK_LeaseApartment_AccountContractPrice]
GO
ALTER TABLE [dbo].[LeaseApartment]  WITH CHECK ADD  CONSTRAINT [FK_LeaseApartment_AcIncomNextYearGUID] FOREIGN KEY([AcIncomNextYearGUID])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[LeaseApartment] CHECK CONSTRAINT [FK_LeaseApartment_AcIncomNextYearGUID]
GO
ALTER TABLE [dbo].[LeaseApartment]  WITH CHECK ADD  CONSTRAINT [FK_LeaseApartment_AcquittancePrintedByGuid] FOREIGN KEY([AcquittancePrintedByGuid])
REFERENCES [dbo].[Realty_Users] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[LeaseApartment] CHECK CONSTRAINT [FK_LeaseApartment_AcquittancePrintedByGuid]
GO
ALTER TABLE [dbo].[LeaseApartment]  WITH CHECK ADD  CONSTRAINT [FK_LeaseApartment_AcSalesManCommissionGuid] FOREIGN KEY([AcSalesManCommissionGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[LeaseApartment] CHECK CONSTRAINT [FK_LeaseApartment_AcSalesManCommissionGuid]
GO
ALTER TABLE [dbo].[LeaseApartment]  WITH CHECK ADD  CONSTRAINT [FK_LeaseApartment_BranchGuid] FOREIGN KEY([BranchGuid])
REFERENCES [dbo].[Branch] ([Guid])
GO
ALTER TABLE [dbo].[LeaseApartment] CHECK CONSTRAINT [FK_LeaseApartment_BranchGuid]
GO
ALTER TABLE [dbo].[LeaseApartment]  WITH CHECK ADD  CONSTRAINT [FK_LeaseApartment_CurrencyGuid] FOREIGN KEY([CurrencyGuid])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[LeaseApartment] CHECK CONSTRAINT [FK_LeaseApartment_CurrencyGuid]
GO
ALTER TABLE [dbo].[LeaseApartment]  WITH CHECK ADD  CONSTRAINT [FK_LeaseApartment_CustAccountGuid] FOREIGN KEY([CustAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[LeaseApartment] CHECK CONSTRAINT [FK_LeaseApartment_CustAccountGuid]
GO
ALTER TABLE [dbo].[LeaseApartment]  WITH CHECK ADD  CONSTRAINT [FK_LeaseApartment_DiscountAccountGuid] FOREIGN KEY([DiscountAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[LeaseApartment] CHECK CONSTRAINT [FK_LeaseApartment_DiscountAccountGuid]
GO
ALTER TABLE [dbo].[LeaseApartment]  WITH CHECK ADD  CONSTRAINT [FK_LeaseApartment_FineAccount] FOREIGN KEY([FineAccount])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[LeaseApartment] CHECK CONSTRAINT [FK_LeaseApartment_FineAccount]
GO
ALTER TABLE [dbo].[LeaseApartment]  WITH CHECK ADD  CONSTRAINT [FK_LeaseApartment_FineRevenueAccountGUID] FOREIGN KEY([FineRevenueAccountGUID])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[LeaseApartment] CHECK CONSTRAINT [FK_LeaseApartment_FineRevenueAccountGUID]
GO
ALTER TABLE [dbo].[LeaseApartment]  WITH CHECK ADD  CONSTRAINT [FK_LeaseApartment_InsuranceAccountGuid] FOREIGN KEY([InsuranceAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[LeaseApartment] CHECK CONSTRAINT [FK_LeaseApartment_InsuranceAccountGuid]
GO
ALTER TABLE [dbo].[LeaseApartment]  WITH CHECK ADD  CONSTRAINT [FK_LeaseApartment_OtherFeeAccountGUID] FOREIGN KEY([OtherFeeAccountGUID])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[LeaseApartment] CHECK CONSTRAINT [FK_LeaseApartment_OtherFeeAccountGUID]
GO
ALTER TABLE [dbo].[LeaseApartment]  WITH CHECK ADD  CONSTRAINT [FK_LeaseApartment_RevenueAccountGuid] FOREIGN KEY([RevenueAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[LeaseApartment] CHECK CONSTRAINT [FK_LeaseApartment_RevenueAccountGuid]
GO
ALTER TABLE [dbo].[LeaseApartment]  WITH CHECK ADD  CONSTRAINT [FK_LeaseApartment_UserGuid] FOREIGN KEY([UserGuid])
REFERENCES [dbo].[Realty_Users] ([Guid])
GO
ALTER TABLE [dbo].[LeaseApartment] CHECK CONSTRAINT [FK_LeaseApartment_UserGuid]
GO
ALTER TABLE [dbo].[LeaseApartment]  WITH CHECK ADD  CONSTRAINT [UK_LeaseApartment_BuildingGuid] FOREIGN KEY([BuildingGuid])
REFERENCES [dbo].[Building] ([Guid])
GO
ALTER TABLE [dbo].[LeaseApartment] CHECK CONSTRAINT [UK_LeaseApartment_BuildingGuid]
GO
ALTER TABLE [dbo].[LeaseApartment]  WITH CHECK ADD  CONSTRAINT [UK_LeaseApartment_CostGuid] FOREIGN KEY([CostGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[LeaseApartment] CHECK CONSTRAINT [UK_LeaseApartment_CostGuid]
GO
ALTER TABLE [dbo].[LeaseApartment]  WITH CHECK ADD  CONSTRAINT [UK_LeaseApartment_CustomerGuid] FOREIGN KEY([CustomerGuid])
REFERENCES [dbo].[Customer] ([Guid])
GO
ALTER TABLE [dbo].[LeaseApartment] CHECK CONSTRAINT [UK_LeaseApartment_CustomerGuid]
GO
ALTER TABLE [dbo].[LeaseApartment]  WITH CHECK ADD  CONSTRAINT [UK_LeaseApartment_RentInfoGuid] FOREIGN KEY([RentInfoGuid])
REFERENCES [dbo].[RentInfo] ([Guid])
GO
ALTER TABLE [dbo].[LeaseApartment] CHECK CONSTRAINT [UK_LeaseApartment_RentInfoGuid]
GO
ALTER TABLE [dbo].[LeaseApartment]  WITH CHECK ADD  CONSTRAINT [UK_LeaseApartment_SalesManGuid] FOREIGN KEY([SalesManGuid])
REFERENCES [dbo].[Salesman] ([Guid])
GO
ALTER TABLE [dbo].[LeaseApartment] CHECK CONSTRAINT [UK_LeaseApartment_SalesManGuid]
GO
ALTER TABLE [dbo].[LeaseApartment]  WITH CHECK ADD  CONSTRAINT [UK_LeaseApartment_TypeGuid] FOREIGN KEY([TypeGuid])
REFERENCES [dbo].[ContractType] ([Guid])
GO
ALTER TABLE [dbo].[LeaseApartment] CHECK CONSTRAINT [UK_LeaseApartment_TypeGuid]
GO
ALTER TABLE [dbo].[LinkCe]  WITH CHECK ADD  CONSTRAINT [FK_LinkCe_CeGuid] FOREIGN KEY([CeGuid])
REFERENCES [dbo].[HEntry] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[LinkCe] CHECK CONSTRAINT [FK_LinkCe_CeGuid]
GO
ALTER TABLE [dbo].[LinkCheckContract]  WITH CHECK ADD  CONSTRAINT [FK_LinkCheckContract_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[Checks] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[LinkCheckContract] CHECK CONSTRAINT [FK_LinkCheckContract_ParentGuid]
GO
ALTER TABLE [dbo].[LinkEntry_Checks]  WITH CHECK ADD  CONSTRAINT [FK_LinkEntry_Checks_CheckGuid] FOREIGN KEY([CheckGuid])
REFERENCES [dbo].[Checks] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[LinkEntry_Checks] CHECK CONSTRAINT [FK_LinkEntry_Checks_CheckGuid]
GO
ALTER TABLE [dbo].[LinkEntry_Checks]  WITH CHECK ADD  CONSTRAINT [FK_LinkEntry_Checks_EntryGuid] FOREIGN KEY([EntryGuid])
REFERENCES [dbo].[HEntry] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[LinkEntry_Checks] CHECK CONSTRAINT [FK_LinkEntry_Checks_EntryGuid]
GO
ALTER TABLE [dbo].[LinkEntryType_Checks]  WITH CHECK ADD  CONSTRAINT [FK_LinkEntryType_Checks_CheckGuid] FOREIGN KEY([CheckGuid])
REFERENCES [dbo].[Checks] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[LinkEntryType_Checks] CHECK CONSTRAINT [FK_LinkEntryType_Checks_CheckGuid]
GO
ALTER TABLE [dbo].[LinkEntryType_Checks]  WITH CHECK ADD  CONSTRAINT [FK_LinkEntryType_Checks_EntryGuid] FOREIGN KEY([EntryGuid])
REFERENCES [dbo].[Secondary_Entry] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[LinkEntryType_Checks] CHECK CONSTRAINT [FK_LinkEntryType_Checks_EntryGuid]
GO
ALTER TABLE [dbo].[LinkParkingContract]  WITH CHECK ADD  CONSTRAINT [UK_LinkParkingContract_LeaseApartmentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[LeaseApartment] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[LinkParkingContract] CHECK CONSTRAINT [UK_LinkParkingContract_LeaseApartmentGuid]
GO
ALTER TABLE [dbo].[LinkParkingContract]  WITH CHECK ADD  CONSTRAINT [UK_LinkParkingContract_ParkingContractGuid] FOREIGN KEY([ParkingContractGuid])
REFERENCES [dbo].[ParkingContract] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[LinkParkingContract] CHECK CONSTRAINT [UK_LinkParkingContract_ParkingContractGuid]
GO
ALTER TABLE [dbo].[ListOrderTypeGroups]  WITH CHECK ADD  CONSTRAINT [FK_ListOrderTypeGroups_OrderTypeGuid] FOREIGN KEY([OrderTypeGuid])
REFERENCES [dbo].[OrderType] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ListOrderTypeGroups] CHECK CONSTRAINT [FK_ListOrderTypeGroups_OrderTypeGuid]
GO
ALTER TABLE [dbo].[LogFile]  WITH CHECK ADD  CONSTRAINT [FK_LogFile_UsersGuid] FOREIGN KEY([UserGuid])
REFERENCES [dbo].[Realty_Users] ([Guid])
GO
ALTER TABLE [dbo].[LogFile] CHECK CONSTRAINT [FK_LogFile_UsersGuid]
GO
ALTER TABLE [dbo].[MaintenanceContract]  WITH CHECK ADD  CONSTRAINT [FK_MaintenanceContract_AcquittancePrintedByGuid] FOREIGN KEY([AcquittancePrintedByGuid])
REFERENCES [dbo].[Realty_Users] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[MaintenanceContract] CHECK CONSTRAINT [FK_MaintenanceContract_AcquittancePrintedByGuid]
GO
ALTER TABLE [dbo].[MaintenanceContract]  WITH CHECK ADD  CONSTRAINT [FK_MaintenanceContract_BranchGuid] FOREIGN KEY([BranchGuid])
REFERENCES [dbo].[Branch] ([Guid])
GO
ALTER TABLE [dbo].[MaintenanceContract] CHECK CONSTRAINT [FK_MaintenanceContract_BranchGuid]
GO
ALTER TABLE [dbo].[MaintenanceContract]  WITH CHECK ADD  CONSTRAINT [FK_MaintenanceContract_BuildingGuid] FOREIGN KEY([BuildingGuid])
REFERENCES [dbo].[Building] ([Guid])
GO
ALTER TABLE [dbo].[MaintenanceContract] CHECK CONSTRAINT [FK_MaintenanceContract_BuildingGuid]
GO
ALTER TABLE [dbo].[MaintenanceContract]  WITH CHECK ADD  CONSTRAINT [FK_MaintenanceContract_CostGuid] FOREIGN KEY([CostGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[MaintenanceContract] CHECK CONSTRAINT [FK_MaintenanceContract_CostGuid]
GO
ALTER TABLE [dbo].[MaintenanceContract]  WITH CHECK ADD  CONSTRAINT [FK_MaintenanceContract_CurrencyGuid] FOREIGN KEY([CurrencyGuid])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[MaintenanceContract] CHECK CONSTRAINT [FK_MaintenanceContract_CurrencyGuid]
GO
ALTER TABLE [dbo].[MaintenanceContract]  WITH CHECK ADD  CONSTRAINT [FK_MaintenanceContract_CustAccountGuid] FOREIGN KEY([CustAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[MaintenanceContract] CHECK CONSTRAINT [FK_MaintenanceContract_CustAccountGuid]
GO
ALTER TABLE [dbo].[MaintenanceContract]  WITH CHECK ADD  CONSTRAINT [FK_MaintenanceContract_CustomerGuid] FOREIGN KEY([CustomerGuid])
REFERENCES [dbo].[Customer] ([Guid])
GO
ALTER TABLE [dbo].[MaintenanceContract] CHECK CONSTRAINT [FK_MaintenanceContract_CustomerGuid]
GO
ALTER TABLE [dbo].[MaintenanceContract]  WITH CHECK ADD  CONSTRAINT [FK_MaintenanceContract_DiscountAccountGuid] FOREIGN KEY([DiscountAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[MaintenanceContract] CHECK CONSTRAINT [FK_MaintenanceContract_DiscountAccountGuid]
GO
ALTER TABLE [dbo].[MaintenanceContract]  WITH CHECK ADD  CONSTRAINT [FK_MaintenanceContract_FineExpenceAccountGUID] FOREIGN KEY([FineExpenceAccountGUID])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[MaintenanceContract] CHECK CONSTRAINT [FK_MaintenanceContract_FineExpenceAccountGUID]
GO
ALTER TABLE [dbo].[MaintenanceContract]  WITH CHECK ADD  CONSTRAINT [FK_MaintenanceContract_IncomeAccountGUID] FOREIGN KEY([IncomeAccountGUID])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[MaintenanceContract] CHECK CONSTRAINT [FK_MaintenanceContract_IncomeAccountGUID]
GO
ALTER TABLE [dbo].[MaintenanceContract]  WITH CHECK ADD  CONSTRAINT [FK_MaintenanceContract_OtherFeeAccountGUID] FOREIGN KEY([OtherFeeAccountGUID])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[MaintenanceContract] CHECK CONSTRAINT [FK_MaintenanceContract_OtherFeeAccountGUID]
GO
ALTER TABLE [dbo].[MaintenanceContract]  WITH CHECK ADD  CONSTRAINT [FK_MaintenanceContract_TypeGuid] FOREIGN KEY([TypeGuid])
REFERENCES [dbo].[MaintenanceContractType] ([Guid])
GO
ALTER TABLE [dbo].[MaintenanceContract] CHECK CONSTRAINT [FK_MaintenanceContract_TypeGuid]
GO
ALTER TABLE [dbo].[MaintenanceContract]  WITH CHECK ADD  CONSTRAINT [FK_MaintenanceContract_UserGuid] FOREIGN KEY([UserGuid])
REFERENCES [dbo].[Realty_Users] ([Guid])
GO
ALTER TABLE [dbo].[MaintenanceContract] CHECK CONSTRAINT [FK_MaintenanceContract_UserGuid]
GO
ALTER TABLE [dbo].[MaintenanceContractCachPayment]  WITH CHECK ADD  CONSTRAINT [FK_MaintenanceContractCachPayment_ContractGuid] FOREIGN KEY([ContractGuid])
REFERENCES [dbo].[MaintenanceContract] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[MaintenanceContractCachPayment] CHECK CONSTRAINT [FK_MaintenanceContractCachPayment_ContractGuid]
GO
ALTER TABLE [dbo].[MaintenanceContractCachPayment]  WITH CHECK ADD  CONSTRAINT [FK_MaintenanceContractCachPayment_EntryGuid] FOREIGN KEY([EntryGuid])
REFERENCES [dbo].[HEntry] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[MaintenanceContractCachPayment] CHECK CONSTRAINT [FK_MaintenanceContractCachPayment_EntryGuid]
GO
ALTER TABLE [dbo].[MaintenanceContractMaintenanceItem]  WITH CHECK ADD  CONSTRAINT [FK_MaintenanceContractMaintenanceItem_ContractGuid] FOREIGN KEY([ContractGuid])
REFERENCES [dbo].[MaintenanceContract] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[MaintenanceContractMaintenanceItem] CHECK CONSTRAINT [FK_MaintenanceContractMaintenanceItem_ContractGuid]
GO
ALTER TABLE [dbo].[MaintenanceContractMaintenanceItem]  WITH CHECK ADD  CONSTRAINT [FK_MaintenanceContractMaintenanceItem_MaintenanceItemGuid] FOREIGN KEY([MaintenanceItemGuid])
REFERENCES [dbo].[MaintenanceItem] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[MaintenanceContractMaintenanceItem] CHECK CONSTRAINT [FK_MaintenanceContractMaintenanceItem_MaintenanceItemGuid]
GO
ALTER TABLE [dbo].[MaintenanceContractType]  WITH CHECK ADD  CONSTRAINT [FK_MaintenanceContractType_DiscountAccountGUID] FOREIGN KEY([DiscountAccountGUID])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[MaintenanceContractType] CHECK CONSTRAINT [FK_MaintenanceContractType_DiscountAccountGUID]
GO
ALTER TABLE [dbo].[MaintenanceContractType]  WITH CHECK ADD  CONSTRAINT [FK_MaintenanceContractType_IncomeAccountGUID] FOREIGN KEY([IncomeAccountGUID])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[MaintenanceContractType] CHECK CONSTRAINT [FK_MaintenanceContractType_IncomeAccountGUID]
GO
ALTER TABLE [dbo].[MaintenanceContractTypePrivilege]  WITH CHECK ADD  CONSTRAINT [FK_MaintenanceContractTypePrivilege_ContractTypeGuid] FOREIGN KEY([ContractTypeGuid])
REFERENCES [dbo].[MaintenanceContractType] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[MaintenanceContractTypePrivilege] CHECK CONSTRAINT [FK_MaintenanceContractTypePrivilege_ContractTypeGuid]
GO
ALTER TABLE [dbo].[MaintenanceContractTypePrivilege]  WITH CHECK ADD  CONSTRAINT [FK_MaintenanceContractTypePrivilege_UserGuid] FOREIGN KEY([UserGuid])
REFERENCES [dbo].[Realty_Users] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[MaintenanceContractTypePrivilege] CHECK CONSTRAINT [FK_MaintenanceContractTypePrivilege_UserGuid]
GO
ALTER TABLE [dbo].[MaintenanceContractVisit]  WITH CHECK ADD  CONSTRAINT [FK_MaintenanceContractVisit_ContractGuid] FOREIGN KEY([ContractGuid])
REFERENCES [dbo].[MaintenanceContract] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[MaintenanceContractVisit] CHECK CONSTRAINT [FK_MaintenanceContractVisit_ContractGuid]
GO
ALTER TABLE [dbo].[MaintenanceContractVisit]  WITH CHECK ADD  CONSTRAINT [FK_MaintenanceContractVisit_CurrencyGuid] FOREIGN KEY([CurrencyGuid])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[MaintenanceContractVisit] CHECK CONSTRAINT [FK_MaintenanceContractVisit_CurrencyGuid]
GO
ALTER TABLE [dbo].[MaintenanceContractVisit]  WITH CHECK ADD  CONSTRAINT [FK_MaintenanceContractVisit_CustGuid] FOREIGN KEY([CustGuid])
REFERENCES [dbo].[Customer] ([Guid])
GO
ALTER TABLE [dbo].[MaintenanceContractVisit] CHECK CONSTRAINT [FK_MaintenanceContractVisit_CustGuid]
GO
ALTER TABLE [dbo].[MaintenanceContractVisit]  WITH CHECK ADD  CONSTRAINT [FK_MaintenanceContractVisit_EntryCreditCostGuid] FOREIGN KEY([EntryCreditCostGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[MaintenanceContractVisit] CHECK CONSTRAINT [FK_MaintenanceContractVisit_EntryCreditCostGuid]
GO
ALTER TABLE [dbo].[MaintenanceContractVisit]  WITH CHECK ADD  CONSTRAINT [FK_MaintenanceContractVisit_EntryDebitCostGuid] FOREIGN KEY([EntryDebitCostGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[MaintenanceContractVisit] CHECK CONSTRAINT [FK_MaintenanceContractVisit_EntryDebitCostGuid]
GO
ALTER TABLE [dbo].[MaintenanceContractVisit]  WITH CHECK ADD  CONSTRAINT [FK_MaintenanceContractVisit_FeeAccountGuid] FOREIGN KEY([FeeAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[MaintenanceContractVisit] CHECK CONSTRAINT [FK_MaintenanceContractVisit_FeeAccountGuid]
GO
ALTER TABLE [dbo].[MaintenanceContractVisit]  WITH CHECK ADD  CONSTRAINT [FK_MaintenanceContractVisit_MaintenanceWorkerGuid] FOREIGN KEY([MaintenanceWorkerGuid])
REFERENCES [dbo].[MaintenanceWorker] ([Guid])
GO
ALTER TABLE [dbo].[MaintenanceContractVisit] CHECK CONSTRAINT [FK_MaintenanceContractVisit_MaintenanceWorkerGuid]
GO
ALTER TABLE [dbo].[MaintenanceContractVisitRealty]  WITH CHECK ADD  CONSTRAINT [FK_MaintenanceContractVisitRealty_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[MaintenanceContractVisit] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[MaintenanceContractVisitRealty] CHECK CONSTRAINT [FK_MaintenanceContractVisitRealty_ParentGuid]
GO
ALTER TABLE [dbo].[MaintenanceContractVisitWorker]  WITH CHECK ADD  CONSTRAINT [FK_MaintenanceContractVisitWorker_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[MaintenanceContractVisit] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[MaintenanceContractVisitWorker] CHECK CONSTRAINT [FK_MaintenanceContractVisitWorker_ParentGuid]
GO
ALTER TABLE [dbo].[MaintenanceContractVisitWorker]  WITH CHECK ADD  CONSTRAINT [FK_MaintenanceContractVisitWorker_WorkerGuid] FOREIGN KEY([WorkerGuid])
REFERENCES [dbo].[MaintenanceWorker] ([Guid])
GO
ALTER TABLE [dbo].[MaintenanceContractVisitWorker] CHECK CONSTRAINT [FK_MaintenanceContractVisitWorker_WorkerGuid]
GO
ALTER TABLE [dbo].[MaintenanceOrder]  WITH CHECK ADD  CONSTRAINT [FK_MaintenanceOrder_ComplaintGuid] FOREIGN KEY([ComplaintGuid])
REFERENCES [dbo].[Complaint] ([Guid])
GO
ALTER TABLE [dbo].[MaintenanceOrder] CHECK CONSTRAINT [FK_MaintenanceOrder_ComplaintGuid]
GO
ALTER TABLE [dbo].[MaintenanceOrder]  WITH CHECK ADD  CONSTRAINT [FK_MaintenanceOrder_CreditAccountGuid] FOREIGN KEY([CreditAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[MaintenanceOrder] CHECK CONSTRAINT [FK_MaintenanceOrder_CreditAccountGuid]
GO
ALTER TABLE [dbo].[MaintenanceOrder]  WITH CHECK ADD  CONSTRAINT [FK_MaintenanceOrder_CreditCostGuid] FOREIGN KEY([CreditCostGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[MaintenanceOrder] CHECK CONSTRAINT [FK_MaintenanceOrder_CreditCostGuid]
GO
ALTER TABLE [dbo].[MaintenanceOrder]  WITH CHECK ADD  CONSTRAINT [FK_MaintenanceOrder_DebitAccountGuid] FOREIGN KEY([DebitAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[MaintenanceOrder] CHECK CONSTRAINT [FK_MaintenanceOrder_DebitAccountGuid]
GO
ALTER TABLE [dbo].[MaintenanceOrder]  WITH CHECK ADD  CONSTRAINT [FK_MaintenanceOrder_DebitCostGuid] FOREIGN KEY([DebitCostGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[MaintenanceOrder] CHECK CONSTRAINT [FK_MaintenanceOrder_DebitCostGuid]
GO
ALTER TABLE [dbo].[MaintenanceOrder]  WITH CHECK ADD  CONSTRAINT [FK_MaintenanceOrder_EntryCurrencyGuid] FOREIGN KEY([EntryCurrencyGUID])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[MaintenanceOrder] CHECK CONSTRAINT [FK_MaintenanceOrder_EntryCurrencyGuid]
GO
ALTER TABLE [dbo].[MaintenanceOrder]  WITH CHECK ADD  CONSTRAINT [FK_MaintenanceOrder_MaintenanceWorkerGuid] FOREIGN KEY([MaintenanceWorkerGuid])
REFERENCES [dbo].[MaintenanceWorker] ([Guid])
GO
ALTER TABLE [dbo].[MaintenanceOrder] CHECK CONSTRAINT [FK_MaintenanceOrder_MaintenanceWorkerGuid]
GO
ALTER TABLE [dbo].[MaintenanceWorker]  WITH CHECK ADD  CONSTRAINT [FK_MaintenanceWorker_AccountGuid] FOREIGN KEY([AccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[MaintenanceWorker] CHECK CONSTRAINT [FK_MaintenanceWorker_AccountGuid]
GO
ALTER TABLE [dbo].[MapsObject]  WITH CHECK ADD  CONSTRAINT [FK_MapsObject_BuildingGuid] FOREIGN KEY([BuildingGuid])
REFERENCES [dbo].[Building] ([Guid])
GO
ALTER TABLE [dbo].[MapsObject] CHECK CONSTRAINT [FK_MapsObject_BuildingGuid]
GO
ALTER TABLE [dbo].[MapsObject]  WITH CHECK ADD  CONSTRAINT [FK_MapsObject_LandGuid] FOREIGN KEY([LandGuid])
REFERENCES [dbo].[Earth] ([Guid])
GO
ALTER TABLE [dbo].[MapsObject] CHECK CONSTRAINT [FK_MapsObject_LandGuid]
GO
ALTER TABLE [dbo].[MapsObject]  WITH CHECK ADD  CONSTRAINT [FK_MapsObject_MapGuid] FOREIGN KEY([MapGuid])
REFERENCES [dbo].[MapsConfig] ([Guid])
GO
ALTER TABLE [dbo].[MapsObject] CHECK CONSTRAINT [FK_MapsObject_MapGuid]
GO
ALTER TABLE [dbo].[MapsObject]  WITH CHECK ADD  CONSTRAINT [FK_MapsObject_VillaGuid] FOREIGN KEY([VillaGuid])
REFERENCES [dbo].[Villa] ([Guid])
GO
ALTER TABLE [dbo].[MapsObject] CHECK CONSTRAINT [FK_MapsObject_VillaGuid]
GO
ALTER TABLE [dbo].[Mat]  WITH CHECK ADD  CONSTRAINT [Fk_Mat_CurrencyGuid] FOREIGN KEY([CurrencyGuid])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[Mat] CHECK CONSTRAINT [Fk_Mat_CurrencyGuid]
GO
ALTER TABLE [dbo].[Mat]  WITH CHECK ADD  CONSTRAINT [Fk_Mat_GroupGuid] FOREIGN KEY([GroupGuid])
REFERENCES [dbo].[MatGroup] ([Guid])
GO
ALTER TABLE [dbo].[Mat] CHECK CONSTRAINT [Fk_Mat_GroupGuid]
GO
ALTER TABLE [dbo].[MatBalance]  WITH CHECK ADD  CONSTRAINT [Fk_MatBalance_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[Mat] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[MatBalance] CHECK CONSTRAINT [Fk_MatBalance_ParentGuid]
GO
ALTER TABLE [dbo].[MatBalance]  WITH CHECK ADD  CONSTRAINT [Fk_MatBalance_StoreGuid] FOREIGN KEY([StoreGuid])
REFERENCES [dbo].[Store] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[MatBalance] CHECK CONSTRAINT [Fk_MatBalance_StoreGuid]
GO
ALTER TABLE [dbo].[MatDescription]  WITH CHECK ADD  CONSTRAINT [Fk_MatDescription_MatGuid] FOREIGN KEY([MatGuid])
REFERENCES [dbo].[Mat] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[MatDescription] CHECK CONSTRAINT [Fk_MatDescription_MatGuid]
GO
ALTER TABLE [dbo].[MatGroup]  WITH CHECK ADD  CONSTRAINT [Fk_MatGroup_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[MatGroup] ([Guid])
GO
ALTER TABLE [dbo].[MatGroup] CHECK CONSTRAINT [Fk_MatGroup_ParentGuid]
GO
ALTER TABLE [dbo].[MatMinMax]  WITH CHECK ADD  CONSTRAINT [Fk_MatMinMax_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[Mat] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[MatMinMax] CHECK CONSTRAINT [Fk_MatMinMax_ParentGuid]
GO
ALTER TABLE [dbo].[MatMinMax]  WITH CHECK ADD  CONSTRAINT [Fk_MatMinMax_StoreGuid] FOREIGN KEY([StoreGuid])
REFERENCES [dbo].[Store] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[MatMinMax] CHECK CONSTRAINT [Fk_MatMinMax_StoreGuid]
GO
ALTER TABLE [dbo].[MatUnitsPrice]  WITH CHECK ADD  CONSTRAINT [Fk_MatUnitsPrice_MatGuid] FOREIGN KEY([MatGuid])
REFERENCES [dbo].[Mat] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[MatUnitsPrice] CHECK CONSTRAINT [Fk_MatUnitsPrice_MatGuid]
GO
ALTER TABLE [dbo].[MenuPrivilege]  WITH CHECK ADD  CONSTRAINT [FK_MenuPrivilege_Realty_Users] FOREIGN KEY([UserGuid])
REFERENCES [dbo].[Realty_Users] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[MenuPrivilege] CHECK CONSTRAINT [FK_MenuPrivilege_Realty_Users]
GO
ALTER TABLE [dbo].[MovingAccount]  WITH CHECK ADD  CONSTRAINT [FK_MovingAccount_AccountGuid] FOREIGN KEY([AccountGuid])
REFERENCES [dbo].[Account] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[MovingAccount] CHECK CONSTRAINT [FK_MovingAccount_AccountGuid]
GO
ALTER TABLE [dbo].[OfferPrice]  WITH CHECK ADD  CONSTRAINT [FK_OfferPrice_CurrencyGuid] FOREIGN KEY([CurrencyGUID])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[OfferPrice] CHECK CONSTRAINT [FK_OfferPrice_CurrencyGuid]
GO
ALTER TABLE [dbo].[OfferPrice]  WITH CHECK ADD  CONSTRAINT [UK_OfferPrice_BuildingGuid] FOREIGN KEY([BuildingGuid])
REFERENCES [dbo].[Building] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[OfferPrice] CHECK CONSTRAINT [UK_OfferPrice_BuildingGuid]
GO
ALTER TABLE [dbo].[OfferPriceFee]  WITH CHECK ADD  CONSTRAINT [FK_OfferPriceFee_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[OfferPrice] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[OfferPriceFee] CHECK CONSTRAINT [FK_OfferPriceFee_ParentGuid]
GO
ALTER TABLE [dbo].[OfferPriceIns]  WITH CHECK ADD  CONSTRAINT [FK_OfferPriceIns_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[OfferPrice] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[OfferPriceIns] CHECK CONSTRAINT [FK_OfferPriceIns_ParentGuid]
GO
ALTER TABLE [dbo].[OrderCheckMatBalance_Tmp]  WITH CHECK ADD  CONSTRAINT [FK_OrderCheckMatBalance_Tmp_MatGuid] FOREIGN KEY([MatGuid])
REFERENCES [dbo].[Mat] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[OrderCheckMatBalance_Tmp] CHECK CONSTRAINT [FK_OrderCheckMatBalance_Tmp_MatGuid]
GO
ALTER TABLE [dbo].[OrderCheckMatBalance_Tmp]  WITH CHECK ADD  CONSTRAINT [FK_OrderCheckMatBalance_Tmp_StoreGuid] FOREIGN KEY([StoreGuid])
REFERENCES [dbo].[Store] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[OrderCheckMatBalance_Tmp] CHECK CONSTRAINT [FK_OrderCheckMatBalance_Tmp_StoreGuid]
GO
ALTER TABLE [dbo].[OrderType]  WITH CHECK ADD  CONSTRAINT [FK_OrderType_BillTypeGuid] FOREIGN KEY([BillTypeGuid])
REFERENCES [dbo].[BillType] ([Guid])
GO
ALTER TABLE [dbo].[OrderType] CHECK CONSTRAINT [FK_OrderType_BillTypeGuid]
GO
ALTER TABLE [dbo].[OrderType]  WITH CHECK ADD  CONSTRAINT [FK_OrderType_CurrencyGuid] FOREIGN KEY([CurrencyGuid])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[OrderType] CHECK CONSTRAINT [FK_OrderType_CurrencyGuid]
GO
ALTER TABLE [dbo].[OrderType]  WITH CHECK ADD  CONSTRAINT [FK_OrderType_DefCost] FOREIGN KEY([DefCostGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[OrderType] CHECK CONSTRAINT [FK_OrderType_DefCost]
GO
ALTER TABLE [dbo].[OrderType]  WITH CHECK ADD  CONSTRAINT [FK_OrderType_DefStore] FOREIGN KEY([DefStoreGuid])
REFERENCES [dbo].[Store] ([Guid])
GO
ALTER TABLE [dbo].[OrderType] CHECK CONSTRAINT [FK_OrderType_DefStore]
GO
ALTER TABLE [dbo].[OrderTypeGroup]  WITH CHECK ADD  CONSTRAINT [FK_OrderTypeGroup_GroupGuid] FOREIGN KEY([GroupGuid])
REFERENCES [dbo].[MatGroup] ([Guid])
GO
ALTER TABLE [dbo].[OrderTypeGroup] CHECK CONSTRAINT [FK_OrderTypeGroup_GroupGuid]
GO
ALTER TABLE [dbo].[OrderTypeGroup]  WITH CHECK ADD  CONSTRAINT [FK_OrderTypeGroup_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[OrderType] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[OrderTypeGroup] CHECK CONSTRAINT [FK_OrderTypeGroup_ParentGuid]
GO
ALTER TABLE [dbo].[OrderTypePrivilege]  WITH CHECK ADD  CONSTRAINT [FK_OrderTypePrivilege_TypeGuid] FOREIGN KEY([TypeGuid])
REFERENCES [dbo].[OrderType] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[OrderTypePrivilege] CHECK CONSTRAINT [FK_OrderTypePrivilege_TypeGuid]
GO
ALTER TABLE [dbo].[OrderTypePrivilege]  WITH CHECK ADD  CONSTRAINT [FK_OrderTypePrivilege_UserGuid] FOREIGN KEY([UserGuid])
REFERENCES [dbo].[Realty_Users] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[OrderTypePrivilege] CHECK CONSTRAINT [FK_OrderTypePrivilege_UserGuid]
GO
ALTER TABLE [dbo].[OwnerUnionFee]  WITH CHECK ADD  CONSTRAINT [FK_OwnerUnionFee_AccountGuid] FOREIGN KEY([AccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[OwnerUnionFee] CHECK CONSTRAINT [FK_OwnerUnionFee_AccountGuid]
GO
ALTER TABLE [dbo].[OwnerUnionFee]  WITH CHECK ADD  CONSTRAINT [FK_OwnerUnionFee_CurrencyGuid] FOREIGN KEY([CurrencyGUID])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[OwnerUnionFee] CHECK CONSTRAINT [FK_OwnerUnionFee_CurrencyGuid]
GO
ALTER TABLE [dbo].[OwnerUnionFee]  WITH CHECK ADD  CONSTRAINT [UK_OwnerUnionFee_BuildingGuid] FOREIGN KEY([BuildingGuid])
REFERENCES [dbo].[Building] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[OwnerUnionFee] CHECK CONSTRAINT [UK_OwnerUnionFee_BuildingGuid]
GO
ALTER TABLE [dbo].[OwnerUnionFeeDetail]  WITH CHECK ADD  CONSTRAINT [UK_OwnerUnionFee_AccountGuid] FOREIGN KEY([AccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[OwnerUnionFeeDetail] CHECK CONSTRAINT [UK_OwnerUnionFee_AccountGuid]
GO
ALTER TABLE [dbo].[OwnerUnionFeeDetail]  WITH CHECK ADD  CONSTRAINT [UK_OwnerUnionFee_CostGuid] FOREIGN KEY([CostGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[OwnerUnionFeeDetail] CHECK CONSTRAINT [UK_OwnerUnionFee_CostGuid]
GO
ALTER TABLE [dbo].[OwnerUnionFeeDetail]  WITH CHECK ADD  CONSTRAINT [UK_OwnerUnionFee_ParentGuid] FOREIGN KEY([parentGuid])
REFERENCES [dbo].[OwnerUnionFee] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[OwnerUnionFeeDetail] CHECK CONSTRAINT [UK_OwnerUnionFee_ParentGuid]
GO
ALTER TABLE [dbo].[parking]  WITH CHECK ADD  CONSTRAINT [FK_Parking_CostCurrencyGUID] FOREIGN KEY([CostCurrencyGUID])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[parking] CHECK CONSTRAINT [FK_Parking_CostCurrencyGUID]
GO
ALTER TABLE [dbo].[parking]  WITH CHECK ADD  CONSTRAINT [FK_parking_CostGuid] FOREIGN KEY([CostGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[parking] CHECK CONSTRAINT [FK_parking_CostGuid]
GO
ALTER TABLE [dbo].[parking]  WITH CHECK ADD  CONSTRAINT [FK_parking_CustGuid] FOREIGN KEY([CustGuid])
REFERENCES [dbo].[Customer] ([Guid])
GO
ALTER TABLE [dbo].[parking] CHECK CONSTRAINT [FK_parking_CustGuid]
GO
ALTER TABLE [dbo].[parking]  WITH CHECK ADD  CONSTRAINT [FK_Parking_RentCurrencyGUID] FOREIGN KEY([RentCurrencyGUID])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[parking] CHECK CONSTRAINT [FK_Parking_RentCurrencyGUID]
GO
ALTER TABLE [dbo].[parking]  WITH CHECK ADD  CONSTRAINT [FK_Parking_SaleCurrencyGUID] FOREIGN KEY([SaleCurrencyGUID])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[parking] CHECK CONSTRAINT [FK_Parking_SaleCurrencyGUID]
GO
ALTER TABLE [dbo].[parking]  WITH CHECK ADD  CONSTRAINT [FK_Parking_UserGuid] FOREIGN KEY([RestrainedUserGuid])
REFERENCES [dbo].[Realty_Users] ([Guid])
GO
ALTER TABLE [dbo].[parking] CHECK CONSTRAINT [FK_Parking_UserGuid]
GO
ALTER TABLE [dbo].[parking]  WITH CHECK ADD  CONSTRAINT [UK_parking_BuildingGuid] FOREIGN KEY([BuildingGuid])
REFERENCES [dbo].[Building] ([Guid])
GO
ALTER TABLE [dbo].[parking] CHECK CONSTRAINT [UK_parking_BuildingGuid]
GO
ALTER TABLE [dbo].[ParkingContract]  WITH CHECK ADD  CONSTRAINT [FK_ParkingContract_AcCommissionExpenseGuid] FOREIGN KEY([AcCommissionExpenseGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ParkingContract] CHECK CONSTRAINT [FK_ParkingContract_AcCommissionExpenseGuid]
GO
ALTER TABLE [dbo].[ParkingContract]  WITH CHECK ADD  CONSTRAINT [FK_ParkingContract_AcCommissionFromCustGuid] FOREIGN KEY([AcCommissionFromCustGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ParkingContract] CHECK CONSTRAINT [FK_ParkingContract_AcCommissionFromCustGuid]
GO
ALTER TABLE [dbo].[ParkingContract]  WITH CHECK ADD  CONSTRAINT [FK_ParkingContract_AcCommissionFromOwnerGuid] FOREIGN KEY([AcCommissionFromOwnerGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ParkingContract] CHECK CONSTRAINT [FK_ParkingContract_AcCommissionFromOwnerGuid]
GO
ALTER TABLE [dbo].[ParkingContract]  WITH CHECK ADD  CONSTRAINT [FK_ParkingContract_AccountCertificatValue] FOREIGN KEY([AccountCertificatValue])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ParkingContract] CHECK CONSTRAINT [FK_ParkingContract_AccountCertificatValue]
GO
ALTER TABLE [dbo].[ParkingContract]  WITH CHECK ADD  CONSTRAINT [FK_ParkingContract_AccountContractPrice] FOREIGN KEY([AccountContractPrice])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ParkingContract] CHECK CONSTRAINT [FK_ParkingContract_AccountContractPrice]
GO
ALTER TABLE [dbo].[ParkingContract]  WITH CHECK ADD  CONSTRAINT [FK_ParkingContract_AcIncomNextYearGUID] FOREIGN KEY([AcIncomNextYearGUID])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ParkingContract] CHECK CONSTRAINT [FK_ParkingContract_AcIncomNextYearGUID]
GO
ALTER TABLE [dbo].[ParkingContract]  WITH CHECK ADD  CONSTRAINT [FK_ParkingContract_AcSalesManCommissionGuid] FOREIGN KEY([AcSalesManCommissionGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ParkingContract] CHECK CONSTRAINT [FK_ParkingContract_AcSalesManCommissionGuid]
GO
ALTER TABLE [dbo].[ParkingContract]  WITH CHECK ADD  CONSTRAINT [FK_ParkingContract_BranchGuid] FOREIGN KEY([BranchGuid])
REFERENCES [dbo].[Branch] ([Guid])
GO
ALTER TABLE [dbo].[ParkingContract] CHECK CONSTRAINT [FK_ParkingContract_BranchGuid]
GO
ALTER TABLE [dbo].[ParkingContract]  WITH CHECK ADD  CONSTRAINT [FK_ParkingContract_CurrencyGuid] FOREIGN KEY([CurrencyGuid])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[ParkingContract] CHECK CONSTRAINT [FK_ParkingContract_CurrencyGuid]
GO
ALTER TABLE [dbo].[ParkingContract]  WITH CHECK ADD  CONSTRAINT [FK_ParkingContract_CustAccountGuid] FOREIGN KEY([CustAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ParkingContract] CHECK CONSTRAINT [FK_ParkingContract_CustAccountGuid]
GO
ALTER TABLE [dbo].[ParkingContract]  WITH CHECK ADD  CONSTRAINT [FK_ParkingContract_DiscountAccountGuid] FOREIGN KEY([DiscountAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ParkingContract] CHECK CONSTRAINT [FK_ParkingContract_DiscountAccountGuid]
GO
ALTER TABLE [dbo].[ParkingContract]  WITH CHECK ADD  CONSTRAINT [FK_ParkingContract_FineAccount] FOREIGN KEY([FineAccount])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ParkingContract] CHECK CONSTRAINT [FK_ParkingContract_FineAccount]
GO
ALTER TABLE [dbo].[ParkingContract]  WITH CHECK ADD  CONSTRAINT [FK_ParkingContract_FineRevenueAccountGUID] FOREIGN KEY([FineRevenueAccountGUID])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ParkingContract] CHECK CONSTRAINT [FK_ParkingContract_FineRevenueAccountGUID]
GO
ALTER TABLE [dbo].[ParkingContract]  WITH CHECK ADD  CONSTRAINT [FK_ParkingContract_OtherFeeAccount1GUID] FOREIGN KEY([OtherFeeAccount1GUID])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ParkingContract] CHECK CONSTRAINT [FK_ParkingContract_OtherFeeAccount1GUID]
GO
ALTER TABLE [dbo].[ParkingContract]  WITH CHECK ADD  CONSTRAINT [FK_ParkingContract_OtherFeeAccount2GUID] FOREIGN KEY([OtherFeeAccount2GUID])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ParkingContract] CHECK CONSTRAINT [FK_ParkingContract_OtherFeeAccount2GUID]
GO
ALTER TABLE [dbo].[ParkingContract]  WITH CHECK ADD  CONSTRAINT [FK_ParkingContract_OtherFeeAccount3GUID] FOREIGN KEY([OtherFeeAccount3GUID])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ParkingContract] CHECK CONSTRAINT [FK_ParkingContract_OtherFeeAccount3GUID]
GO
ALTER TABLE [dbo].[ParkingContract]  WITH CHECK ADD  CONSTRAINT [FK_ParkingContract_OtherFeeAccount4GUID] FOREIGN KEY([OtherFeeAccount4GUID])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ParkingContract] CHECK CONSTRAINT [FK_ParkingContract_OtherFeeAccount4GUID]
GO
ALTER TABLE [dbo].[ParkingContract]  WITH CHECK ADD  CONSTRAINT [FK_ParkingContract_OtherFeeAccount5GUID] FOREIGN KEY([OtherFeeAccount5GUID])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ParkingContract] CHECK CONSTRAINT [FK_ParkingContract_OtherFeeAccount5GUID]
GO
ALTER TABLE [dbo].[ParkingContract]  WITH CHECK ADD  CONSTRAINT [FK_ParkingContract_RevenueAccountGuid] FOREIGN KEY([RevenueAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ParkingContract] CHECK CONSTRAINT [FK_ParkingContract_RevenueAccountGuid]
GO
ALTER TABLE [dbo].[ParkingContract]  WITH CHECK ADD  CONSTRAINT [UK_ParkingContract_BuildingGuid] FOREIGN KEY([BuildingGuid])
REFERENCES [dbo].[Building] ([Guid])
GO
ALTER TABLE [dbo].[ParkingContract] CHECK CONSTRAINT [UK_ParkingContract_BuildingGuid]
GO
ALTER TABLE [dbo].[ParkingContract]  WITH CHECK ADD  CONSTRAINT [UK_ParkingContract_CostGuid] FOREIGN KEY([CostGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[ParkingContract] CHECK CONSTRAINT [UK_ParkingContract_CostGuid]
GO
ALTER TABLE [dbo].[ParkingContract]  WITH CHECK ADD  CONSTRAINT [UK_ParkingContract_CustomerGuid] FOREIGN KEY([CustomerGuid])
REFERENCES [dbo].[Customer] ([Guid])
GO
ALTER TABLE [dbo].[ParkingContract] CHECK CONSTRAINT [UK_ParkingContract_CustomerGuid]
GO
ALTER TABLE [dbo].[ParkingContract]  WITH CHECK ADD  CONSTRAINT [UK_ParkingContract_FlatContractGuid] FOREIGN KEY([FlatContractGuid])
REFERENCES [dbo].[LeaseApartment] ([Guid])
GO
ALTER TABLE [dbo].[ParkingContract] CHECK CONSTRAINT [UK_ParkingContract_FlatContractGuid]
GO
ALTER TABLE [dbo].[ParkingContract]  WITH CHECK ADD  CONSTRAINT [UK_ParkingContract_ParkingGuid] FOREIGN KEY([ParkingGuid])
REFERENCES [dbo].[parking] ([Guid])
GO
ALTER TABLE [dbo].[ParkingContract] CHECK CONSTRAINT [UK_ParkingContract_ParkingGuid]
GO
ALTER TABLE [dbo].[ParkingContract]  WITH CHECK ADD  CONSTRAINT [UK_ParkingContract_RentInfoGuid] FOREIGN KEY([RentInfoGuid])
REFERENCES [dbo].[RentInfo] ([Guid])
GO
ALTER TABLE [dbo].[ParkingContract] CHECK CONSTRAINT [UK_ParkingContract_RentInfoGuid]
GO
ALTER TABLE [dbo].[ParkingContract]  WITH CHECK ADD  CONSTRAINT [UK_ParkingContract_SalesManGuid] FOREIGN KEY([SalesManGuid])
REFERENCES [dbo].[Salesman] ([Guid])
GO
ALTER TABLE [dbo].[ParkingContract] CHECK CONSTRAINT [UK_ParkingContract_SalesManGuid]
GO
ALTER TABLE [dbo].[ParkingContract]  WITH CHECK ADD  CONSTRAINT [UK_ParkingContract_TypeGuid] FOREIGN KEY([TypeGuid])
REFERENCES [dbo].[ContractType] ([Guid])
GO
ALTER TABLE [dbo].[ParkingContract] CHECK CONSTRAINT [UK_ParkingContract_TypeGuid]
GO
ALTER TABLE [dbo].[ParkingContractFee]  WITH CHECK ADD  CONSTRAINT [FK_ParkingContractFee_AccountGuid] FOREIGN KEY([AccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ParkingContractFee] CHECK CONSTRAINT [FK_ParkingContractFee_AccountGuid]
GO
ALTER TABLE [dbo].[ParkingContractFee]  WITH CHECK ADD  CONSTRAINT [FK_ParkingContractFee_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[ParkingContract] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ParkingContractFee] CHECK CONSTRAINT [FK_ParkingContractFee_ParentGuid]
GO
ALTER TABLE [dbo].[ParkingContractReceiptNO]  WITH CHECK ADD  CONSTRAINT [FK_ParkingContractReceiptNO_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[ParkingContract] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ParkingContractReceiptNO] CHECK CONSTRAINT [FK_ParkingContractReceiptNO_ParentGuid]
GO
ALTER TABLE [dbo].[ParkingWallet]  WITH CHECK ADD  CONSTRAINT [FK_ParkingWallet_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[wallet] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ParkingWallet] CHECK CONSTRAINT [FK_ParkingWallet_ParentGuid]
GO
ALTER TABLE [dbo].[ParkingWallet]  WITH CHECK ADD  CONSTRAINT [UK_wallet_ParkingGuid] FOREIGN KEY([ParkingGuid])
REFERENCES [dbo].[parking] ([Guid])
GO
ALTER TABLE [dbo].[ParkingWallet] CHECK CONSTRAINT [UK_wallet_ParkingGuid]
GO
ALTER TABLE [dbo].[ParkingWallet]  WITH CHECK ADD  CONSTRAINT [UK_wallet_ParkingWallet] FOREIGN KEY([BuildingGuid])
REFERENCES [dbo].[Building] ([Guid])
GO
ALTER TABLE [dbo].[ParkingWallet] CHECK CONSTRAINT [UK_wallet_ParkingWallet]
GO
ALTER TABLE [dbo].[Partnerwallet]  WITH CHECK ADD  CONSTRAINT [FK_Partnerwallet_CustGuid] FOREIGN KEY([CustGuid])
REFERENCES [dbo].[Customer] ([Guid])
GO
ALTER TABLE [dbo].[Partnerwallet] CHECK CONSTRAINT [FK_Partnerwallet_CustGuid]
GO
ALTER TABLE [dbo].[Partnerwallet]  WITH CHECK ADD  CONSTRAINT [FK_Partnerwallet_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[wallet] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[Partnerwallet] CHECK CONSTRAINT [FK_Partnerwallet_ParentGuid]
GO
ALTER TABLE [dbo].[Photos]  WITH CHECK ADD  CONSTRAINT [FK_Photos_UserGuid] FOREIGN KEY([userGuid])
REFERENCES [dbo].[Realty_Users] ([Guid])
GO
ALTER TABLE [dbo].[Photos] CHECK CONSTRAINT [FK_Photos_UserGuid]
GO
ALTER TABLE [dbo].[Pricing]  WITH CHECK ADD  CONSTRAINT [FK_Pricing_CreditAccountGuid] FOREIGN KEY([CreditAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[Pricing] CHECK CONSTRAINT [FK_Pricing_CreditAccountGuid]
GO
ALTER TABLE [dbo].[Pricing]  WITH CHECK ADD  CONSTRAINT [FK_Pricing_CreditCostGuid] FOREIGN KEY([CreditCostGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[Pricing] CHECK CONSTRAINT [FK_Pricing_CreditCostGuid]
GO
ALTER TABLE [dbo].[Pricing]  WITH CHECK ADD  CONSTRAINT [FK_Pricing_CustGuid] FOREIGN KEY([CustGuid])
REFERENCES [dbo].[Customer] ([Guid])
GO
ALTER TABLE [dbo].[Pricing] CHECK CONSTRAINT [FK_Pricing_CustGuid]
GO
ALTER TABLE [dbo].[Pricing]  WITH CHECK ADD  CONSTRAINT [FK_Pricing_DebitAccountGuid] FOREIGN KEY([DebitAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[Pricing] CHECK CONSTRAINT [FK_Pricing_DebitAccountGuid]
GO
ALTER TABLE [dbo].[Pricing]  WITH CHECK ADD  CONSTRAINT [FK_Pricing_DebitCostGuid] FOREIGN KEY([DebitCostGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[Pricing] CHECK CONSTRAINT [FK_Pricing_DebitCostGuid]
GO
ALTER TABLE [dbo].[Pricing]  WITH CHECK ADD  CONSTRAINT [FK_Pricing_EntryCurrencyGuid] FOREIGN KEY([EntryCurrencyGUID])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[Pricing] CHECK CONSTRAINT [FK_Pricing_EntryCurrencyGuid]
GO
ALTER TABLE [dbo].[PricingDetail]  WITH CHECK ADD  CONSTRAINT [FK_PricingDetail_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[Pricing] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[PricingDetail] CHECK CONSTRAINT [FK_PricingDetail_ParentGuid]
GO
ALTER TABLE [dbo].[ProjectCost]  WITH CHECK ADD  CONSTRAINT [FK_ProjectCost_AccountGuid] FOREIGN KEY([AccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ProjectCost] CHECK CONSTRAINT [FK_ProjectCost_AccountGuid]
GO
ALTER TABLE [dbo].[ProjectCost]  WITH CHECK ADD  CONSTRAINT [FK_ProjectCost_BuildingGuid] FOREIGN KEY([BuildingGuid])
REFERENCES [dbo].[Building] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ProjectCost] CHECK CONSTRAINT [FK_ProjectCost_BuildingGuid]
GO
ALTER TABLE [dbo].[ProjectCost]  WITH CHECK ADD  CONSTRAINT [FK_ProjectCost_CurrencyGuid] FOREIGN KEY([CurrencyGuid])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[ProjectCost] CHECK CONSTRAINT [FK_ProjectCost_CurrencyGuid]
GO
ALTER TABLE [dbo].[ProjectCost]  WITH CHECK ADD  CONSTRAINT [UK_ProjectCost_CostGuid] FOREIGN KEY([CostGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[ProjectCost] CHECK CONSTRAINT [UK_ProjectCost_CostGuid]
GO
ALTER TABLE [dbo].[ProjectCostDetail]  WITH CHECK ADD  CONSTRAINT [FK_ProjectCostDetail_AccountGuid] FOREIGN KEY([AccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ProjectCostDetail] CHECK CONSTRAINT [FK_ProjectCostDetail_AccountGuid]
GO
ALTER TABLE [dbo].[ProjectCostDetail]  WITH CHECK ADD  CONSTRAINT [FK_ProjectCostDetail_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[ProjectCost] ([BuildingGuid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ProjectCostDetail] CHECK CONSTRAINT [FK_ProjectCostDetail_ParentGuid]
GO
ALTER TABLE [dbo].[QtyGroup]  WITH CHECK ADD  CONSTRAINT [Fk_QtyGroup_CalcQtyGuid] FOREIGN KEY([CalcQtyGuid])
REFERENCES [dbo].[CalcQty] ([Guid])
GO
ALTER TABLE [dbo].[QtyGroup] CHECK CONSTRAINT [Fk_QtyGroup_CalcQtyGuid]
GO
ALTER TABLE [dbo].[QtyGroup]  WITH CHECK ADD  CONSTRAINT [Fk_QtyGroup_GroupGuid] FOREIGN KEY([GroupGuid])
REFERENCES [dbo].[MatGroup] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[QtyGroup] CHECK CONSTRAINT [Fk_QtyGroup_GroupGuid]
GO
ALTER TABLE [dbo].[QueryDefaultValue]  WITH CHECK ADD  CONSTRAINT [FK_QueryDefaultValue_Realty_Users] FOREIGN KEY([UserGuid])
REFERENCES [dbo].[Realty_Users] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[QueryDefaultValue] CHECK CONSTRAINT [FK_QueryDefaultValue_Realty_Users]
GO
ALTER TABLE [dbo].[Realty_Detail_users]  WITH CHECK ADD  CONSTRAINT [FK_Realty_Detail_users_Realty_Users] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[Realty_Users] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[Realty_Detail_users] CHECK CONSTRAINT [FK_Realty_Detail_users_Realty_Users]
GO
ALTER TABLE [dbo].[Realty_LogCard]  WITH CHECK ADD  CONSTRAINT [FK_Realty_LogCard_Users] FOREIGN KEY([UserGuid])
REFERENCES [dbo].[Realty_Users] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[Realty_LogCard] CHECK CONSTRAINT [FK_Realty_LogCard_Users]
GO
ALTER TABLE [dbo].[Realty_Users]  WITH CHECK ADD  CONSTRAINT [FK_Realty_Users_BranchGuid] FOREIGN KEY([BranchGuid])
REFERENCES [dbo].[Branch] ([Guid])
GO
ALTER TABLE [dbo].[Realty_Users] CHECK CONSTRAINT [FK_Realty_Users_BranchGuid]
GO
ALTER TABLE [dbo].[RealtyMaintenanceContract]  WITH CHECK ADD  CONSTRAINT [FK_RealtyMaintenanceContract_CostGuid] FOREIGN KEY([CostGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[RealtyMaintenanceContract] CHECK CONSTRAINT [FK_RealtyMaintenanceContract_CostGuid]
GO
ALTER TABLE [dbo].[RealtyMaintenanceContract]  WITH CHECK ADD  CONSTRAINT [FK_RealtyMaintenanceContract_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[MaintenanceContract] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RealtyMaintenanceContract] CHECK CONSTRAINT [FK_RealtyMaintenanceContract_ParentGuid]
GO
ALTER TABLE [dbo].[RealtyRestrained]  WITH CHECK ADD  CONSTRAINT [FK_RealtyRestrained_BuildingGuid] FOREIGN KEY([BuildingGuid])
REFERENCES [dbo].[Building] ([Guid])
GO
ALTER TABLE [dbo].[RealtyRestrained] CHECK CONSTRAINT [FK_RealtyRestrained_BuildingGuid]
GO
ALTER TABLE [dbo].[RealtyRestrained]  WITH CHECK ADD  CONSTRAINT [FK_RealtyRestrained_CheckTypeGuid] FOREIGN KEY([CheckTypeGuid])
REFERENCES [dbo].[CheckType] ([Guid])
GO
ALTER TABLE [dbo].[RealtyRestrained] CHECK CONSTRAINT [FK_RealtyRestrained_CheckTypeGuid]
GO
ALTER TABLE [dbo].[RealtyRestrained]  WITH CHECK ADD  CONSTRAINT [FK_RealtyRestrained_CostCreditGuid] FOREIGN KEY([CostCreditGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[RealtyRestrained] CHECK CONSTRAINT [FK_RealtyRestrained_CostCreditGuid]
GO
ALTER TABLE [dbo].[RealtyRestrained]  WITH CHECK ADD  CONSTRAINT [FK_RealtyRestrained_CostDebitGuid] FOREIGN KEY([CostDebitGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[RealtyRestrained] CHECK CONSTRAINT [FK_RealtyRestrained_CostDebitGuid]
GO
ALTER TABLE [dbo].[RealtyRestrained]  WITH CHECK ADD  CONSTRAINT [FK_RealtyRestrained_CreditAccountGuid] FOREIGN KEY([CreditAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[RealtyRestrained] CHECK CONSTRAINT [FK_RealtyRestrained_CreditAccountGuid]
GO
ALTER TABLE [dbo].[RealtyRestrained]  WITH CHECK ADD  CONSTRAINT [FK_RealtyRestrained_CurrencyGuid] FOREIGN KEY([CurrencyGuid])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[RealtyRestrained] CHECK CONSTRAINT [FK_RealtyRestrained_CurrencyGuid]
GO
ALTER TABLE [dbo].[RealtyRestrained]  WITH CHECK ADD  CONSTRAINT [FK_RealtyRestrained_CustGuid] FOREIGN KEY([CustomerGuid])
REFERENCES [dbo].[Customer] ([Guid])
GO
ALTER TABLE [dbo].[RealtyRestrained] CHECK CONSTRAINT [FK_RealtyRestrained_CustGuid]
GO
ALTER TABLE [dbo].[RealtyRestrained]  WITH CHECK ADD  CONSTRAINT [FK_RealtyRestrained_DebitAccountGuid] FOREIGN KEY([DebitAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[RealtyRestrained] CHECK CONSTRAINT [FK_RealtyRestrained_DebitAccountGuid]
GO
ALTER TABLE [dbo].[RealtyRestrained]  WITH CHECK ADD  CONSTRAINT [FK_RealtyRestrained_EarthGuid] FOREIGN KEY([LandGuid])
REFERENCES [dbo].[Earth] ([Guid])
GO
ALTER TABLE [dbo].[RealtyRestrained] CHECK CONSTRAINT [FK_RealtyRestrained_EarthGuid]
GO
ALTER TABLE [dbo].[RealtyRestrained]  WITH CHECK ADD  CONSTRAINT [FK_RealtyRestrained_FlatGuid] FOREIGN KEY([FlatGuid])
REFERENCES [dbo].[Apartment] ([Guid])
GO
ALTER TABLE [dbo].[RealtyRestrained] CHECK CONSTRAINT [FK_RealtyRestrained_FlatGuid]
GO
ALTER TABLE [dbo].[RealtyRestrained]  WITH CHECK ADD  CONSTRAINT [FK_RealtyRestrained_ParkingGuid] FOREIGN KEY([ParkingNo])
REFERENCES [dbo].[parking] ([Guid])
GO
ALTER TABLE [dbo].[RealtyRestrained] CHECK CONSTRAINT [FK_RealtyRestrained_ParkingGuid]
GO
ALTER TABLE [dbo].[RealtyRestrained]  WITH CHECK ADD  CONSTRAINT [FK_RealtyRestrained_ShopGuid] FOREIGN KEY([Shop])
REFERENCES [dbo].[Shop] ([Guid])
GO
ALTER TABLE [dbo].[RealtyRestrained] CHECK CONSTRAINT [FK_RealtyRestrained_ShopGuid]
GO
ALTER TABLE [dbo].[RealtyRestrained]  WITH CHECK ADD  CONSTRAINT [FK_RealtyRestrained_VillaGuid] FOREIGN KEY([VillaGuid])
REFERENCES [dbo].[Villa] ([Guid])
GO
ALTER TABLE [dbo].[RealtyRestrained] CHECK CONSTRAINT [FK_RealtyRestrained_VillaGuid]
GO
ALTER TABLE [dbo].[ReceiptOrder]  WITH CHECK ADD  CONSTRAINT [FK_ReceiptOrder_TypeGuid] FOREIGN KEY([TypeGuid])
REFERENCES [dbo].[ReceiptOrderType] ([Guid])
GO
ALTER TABLE [dbo].[ReceiptOrder] CHECK CONSTRAINT [FK_ReceiptOrder_TypeGuid]
GO
ALTER TABLE [dbo].[ReceiptOrderDetail]  WITH CHECK ADD  CONSTRAINT [FK_ReceiptOrderDetail_AccountGuid] FOREIGN KEY([AccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ReceiptOrderDetail] CHECK CONSTRAINT [FK_ReceiptOrderDetail_AccountGuid]
GO
ALTER TABLE [dbo].[ReceiptOrderDetail]  WITH CHECK ADD  CONSTRAINT [FK_ReceiptOrderDetail_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[ReceiptOrder] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ReceiptOrderDetail] CHECK CONSTRAINT [FK_ReceiptOrderDetail_ParentGuid]
GO
ALTER TABLE [dbo].[ReceiptOrderType]  WITH CHECK ADD  CONSTRAINT [FK_ReceiptOrderType_EntryTypeGuid] FOREIGN KEY([EntryTypeGuid])
REFERENCES [dbo].[EntryType] ([Guid])
GO
ALTER TABLE [dbo].[ReceiptOrderType] CHECK CONSTRAINT [FK_ReceiptOrderType_EntryTypeGuid]
GO
ALTER TABLE [dbo].[ReceiptOrderTypeDetail]  WITH CHECK ADD  CONSTRAINT [FK_ReceiptOrderTypeDetail_AccountGuid] FOREIGN KEY([AccountGuid])
REFERENCES [dbo].[Account] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ReceiptOrderTypeDetail] CHECK CONSTRAINT [FK_ReceiptOrderTypeDetail_AccountGuid]
GO
ALTER TABLE [dbo].[ReceiptOrderTypeDetail]  WITH CHECK ADD  CONSTRAINT [FK_ReceiptOrderTypeDetail_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[ReceiptOrderType] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ReceiptOrderTypeDetail] CHECK CONSTRAINT [FK_ReceiptOrderTypeDetail_ParentGuid]
GO
ALTER TABLE [dbo].[ReceiptOrderTypePrivilege]  WITH CHECK ADD  CONSTRAINT [FK_ReceiptOrderTypePrivilege_TypeGuid] FOREIGN KEY([TypeGuid])
REFERENCES [dbo].[ReceiptOrderType] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ReceiptOrderTypePrivilege] CHECK CONSTRAINT [FK_ReceiptOrderTypePrivilege_TypeGuid]
GO
ALTER TABLE [dbo].[ReceiptOrderTypePrivilege]  WITH CHECK ADD  CONSTRAINT [FK_ReceiptOrderTypePrivilege_UserGuid] FOREIGN KEY([UserGuid])
REFERENCES [dbo].[Realty_Users] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ReceiptOrderTypePrivilege] CHECK CONSTRAINT [FK_ReceiptOrderTypePrivilege_UserGuid]
GO
ALTER TABLE [dbo].[Reminder]  WITH CHECK ADD  CONSTRAINT [FK_Reminder_Realty_Users] FOREIGN KEY([UserGuid])
REFERENCES [dbo].[Realty_Users] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[Reminder] CHECK CONSTRAINT [FK_Reminder_Realty_Users]
GO
ALTER TABLE [dbo].[ReportSort]  WITH CHECK ADD  CONSTRAINT [FK_ReportSort_Realty_Users] FOREIGN KEY([UserGuid])
REFERENCES [dbo].[Realty_Users] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ReportSort] CHECK CONSTRAINT [FK_ReportSort_Realty_Users]
GO
ALTER TABLE [dbo].[Salesman]  WITH CHECK ADD  CONSTRAINT [FK_Salesman_AccountGuid] FOREIGN KEY([AccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[Salesman] CHECK CONSTRAINT [FK_Salesman_AccountGuid]
GO
ALTER TABLE [dbo].[Secondary_Entry]  WITH CHECK ADD  CONSTRAINT [FK_Secondary_Entry_Account_Guid] FOREIGN KEY([AccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[Secondary_Entry] CHECK CONSTRAINT [FK_Secondary_Entry_Account_Guid]
GO
ALTER TABLE [dbo].[Secondary_Entry]  WITH CHECK ADD  CONSTRAINT [FK_Secondary_Entry_BranchGuid] FOREIGN KEY([BranchGuid])
REFERENCES [dbo].[Branch] ([Guid])
GO
ALTER TABLE [dbo].[Secondary_Entry] CHECK CONSTRAINT [FK_Secondary_Entry_BranchGuid]
GO
ALTER TABLE [dbo].[Secondary_Entry]  WITH CHECK ADD  CONSTRAINT [FK_Secondary_Entry_Currency_Guid] FOREIGN KEY([CurrencyGuid])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[Secondary_Entry] CHECK CONSTRAINT [FK_Secondary_Entry_Currency_Guid]
GO
ALTER TABLE [dbo].[Secondary_Entry]  WITH CHECK ADD  CONSTRAINT [FK_Secondary_Entry_SalesManGuid] FOREIGN KEY([SalesManGuid])
REFERENCES [dbo].[Salesman] ([Guid])
GO
ALTER TABLE [dbo].[Secondary_Entry] CHECK CONSTRAINT [FK_Secondary_Entry_SalesManGuid]
GO
ALTER TABLE [dbo].[Secondary_Entry]  WITH CHECK ADD  CONSTRAINT [FK_Secondary_Entry_TypeGuid] FOREIGN KEY([TypeGuid])
REFERENCES [dbo].[EntryType] ([Guid])
GO
ALTER TABLE [dbo].[Secondary_Entry] CHECK CONSTRAINT [FK_Secondary_Entry_TypeGuid]
GO
ALTER TABLE [dbo].[Secondary_Entry]  WITH CHECK ADD  CONSTRAINT [FK_Secondary_Entry_UserGuid] FOREIGN KEY([UserGuid])
REFERENCES [dbo].[Realty_Users] ([Guid])
GO
ALTER TABLE [dbo].[Secondary_Entry] CHECK CONSTRAINT [FK_Secondary_Entry_UserGuid]
GO
ALTER TABLE [dbo].[Secondary_EntryDetail]  WITH CHECK ADD  CONSTRAINT [FK_Secondary_EntryDetail_Account_Guid] FOREIGN KEY([AcGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[Secondary_EntryDetail] CHECK CONSTRAINT [FK_Secondary_EntryDetail_Account_Guid]
GO
ALTER TABLE [dbo].[Secondary_EntryDetail]  WITH CHECK ADD  CONSTRAINT [FK_Secondary_EntryDetail_Cost_Guid] FOREIGN KEY([CostGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[Secondary_EntryDetail] CHECK CONSTRAINT [FK_Secondary_EntryDetail_Cost_Guid]
GO
ALTER TABLE [dbo].[Secondary_EntryDetail]  WITH CHECK ADD  CONSTRAINT [FK_Secondary_EntryDetail_Currency_Guid] FOREIGN KEY([CurrencyGuid])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[Secondary_EntryDetail] CHECK CONSTRAINT [FK_Secondary_EntryDetail_Currency_Guid]
GO
ALTER TABLE [dbo].[Secondary_EntryDetail]  WITH CHECK ADD  CONSTRAINT [FK_Secondary_EntryDetail_Guid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[Secondary_Entry] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[Secondary_EntryDetail] CHECK CONSTRAINT [FK_Secondary_EntryDetail_Guid]
GO
ALTER TABLE [dbo].[Secondary_EntryDetail]  WITH CHECK ADD  CONSTRAINT [FK_Secondary_EntryDetail_ObverseAcGuid_Guid] FOREIGN KEY([ObverseAcGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[Secondary_EntryDetail] CHECK CONSTRAINT [FK_Secondary_EntryDetail_ObverseAcGuid_Guid]
GO
ALTER TABLE [dbo].[ServicesContract]  WITH CHECK ADD  CONSTRAINT [FK_ServicesContract_AcquittancePrintedByGuid] FOREIGN KEY([AcquittancePrintedByGuid])
REFERENCES [dbo].[Realty_Users] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ServicesContract] CHECK CONSTRAINT [FK_ServicesContract_AcquittancePrintedByGuid]
GO
ALTER TABLE [dbo].[ServicesContract]  WITH CHECK ADD  CONSTRAINT [FK_ServicesContract_BranchGuid] FOREIGN KEY([BranchGuid])
REFERENCES [dbo].[Branch] ([Guid])
GO
ALTER TABLE [dbo].[ServicesContract] CHECK CONSTRAINT [FK_ServicesContract_BranchGuid]
GO
ALTER TABLE [dbo].[ServicesContract]  WITH CHECK ADD  CONSTRAINT [FK_ServicesContract_BuildingGuid] FOREIGN KEY([BuildingGuid])
REFERENCES [dbo].[Building] ([Guid])
GO
ALTER TABLE [dbo].[ServicesContract] CHECK CONSTRAINT [FK_ServicesContract_BuildingGuid]
GO
ALTER TABLE [dbo].[ServicesContract]  WITH CHECK ADD  CONSTRAINT [FK_ServicesContract_CostGuid] FOREIGN KEY([CostGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[ServicesContract] CHECK CONSTRAINT [FK_ServicesContract_CostGuid]
GO
ALTER TABLE [dbo].[ServicesContract]  WITH CHECK ADD  CONSTRAINT [FK_ServicesContract_CurrencyGuid] FOREIGN KEY([CurrencyGuid])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[ServicesContract] CHECK CONSTRAINT [FK_ServicesContract_CurrencyGuid]
GO
ALTER TABLE [dbo].[ServicesContract]  WITH CHECK ADD  CONSTRAINT [FK_ServicesContract_CustAccountGuid] FOREIGN KEY([CustAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ServicesContract] CHECK CONSTRAINT [FK_ServicesContract_CustAccountGuid]
GO
ALTER TABLE [dbo].[ServicesContract]  WITH CHECK ADD  CONSTRAINT [FK_ServicesContract_CustomerGuid] FOREIGN KEY([CustomerGuid])
REFERENCES [dbo].[Customer] ([Guid])
GO
ALTER TABLE [dbo].[ServicesContract] CHECK CONSTRAINT [FK_ServicesContract_CustomerGuid]
GO
ALTER TABLE [dbo].[ServicesContract]  WITH CHECK ADD  CONSTRAINT [FK_ServicesContract_DiscountAccountGuid] FOREIGN KEY([DiscountAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ServicesContract] CHECK CONSTRAINT [FK_ServicesContract_DiscountAccountGuid]
GO
ALTER TABLE [dbo].[ServicesContract]  WITH CHECK ADD  CONSTRAINT [FK_ServicesContract_ExpenceAccountGUID] FOREIGN KEY([ExpenceAccountGUID])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ServicesContract] CHECK CONSTRAINT [FK_ServicesContract_ExpenceAccountGUID]
GO
ALTER TABLE [dbo].[ServicesContract]  WITH CHECK ADD  CONSTRAINT [FK_ServicesContract_FineExpenceAccountGUID] FOREIGN KEY([FineExpenceAccountGUID])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ServicesContract] CHECK CONSTRAINT [FK_ServicesContract_FineExpenceAccountGUID]
GO
ALTER TABLE [dbo].[ServicesContract]  WITH CHECK ADD  CONSTRAINT [FK_ServicesContract_OtherFeeAccountGUID] FOREIGN KEY([OtherFeeAccountGUID])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ServicesContract] CHECK CONSTRAINT [FK_ServicesContract_OtherFeeAccountGUID]
GO
ALTER TABLE [dbo].[ServicesContract]  WITH CHECK ADD  CONSTRAINT [FK_ServicesContract_TypeGuid] FOREIGN KEY([TypeGuid])
REFERENCES [dbo].[ServicesContractType] ([Guid])
GO
ALTER TABLE [dbo].[ServicesContract] CHECK CONSTRAINT [FK_ServicesContract_TypeGuid]
GO
ALTER TABLE [dbo].[ServicesContract]  WITH CHECK ADD  CONSTRAINT [FK_ServicesContract_UserGuid] FOREIGN KEY([UserGuid])
REFERENCES [dbo].[Realty_Users] ([Guid])
GO
ALTER TABLE [dbo].[ServicesContract] CHECK CONSTRAINT [FK_ServicesContract_UserGuid]
GO
ALTER TABLE [dbo].[ServicesContractCachPayment]  WITH CHECK ADD  CONSTRAINT [FK_ServicesContractCachPayment_ContractGuid] FOREIGN KEY([ContractGuid])
REFERENCES [dbo].[ServicesContract] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ServicesContractCachPayment] CHECK CONSTRAINT [FK_ServicesContractCachPayment_ContractGuid]
GO
ALTER TABLE [dbo].[ServicesContractCachPayment]  WITH CHECK ADD  CONSTRAINT [FK_ServicesContractCachPayment_EntryGuid] FOREIGN KEY([EntryGuid])
REFERENCES [dbo].[HEntry] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ServicesContractCachPayment] CHECK CONSTRAINT [FK_ServicesContractCachPayment_EntryGuid]
GO
ALTER TABLE [dbo].[ServicesContractDetail]  WITH CHECK ADD  CONSTRAINT [FK_ServicesContractDetail_ContractGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[ServicesContract] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ServicesContractDetail] CHECK CONSTRAINT [FK_ServicesContractDetail_ContractGuid]
GO
ALTER TABLE [dbo].[ServicesContractType]  WITH CHECK ADD  CONSTRAINT [FK_ServicesContractType_DiscountAccountGUID] FOREIGN KEY([DiscountAccountGUID])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ServicesContractType] CHECK CONSTRAINT [FK_ServicesContractType_DiscountAccountGUID]
GO
ALTER TABLE [dbo].[ServicesContractType]  WITH CHECK ADD  CONSTRAINT [FK_ServicesContractType_ExpenceAccountGUID] FOREIGN KEY([ExpenceAccountGUID])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[ServicesContractType] CHECK CONSTRAINT [FK_ServicesContractType_ExpenceAccountGUID]
GO
ALTER TABLE [dbo].[ServicesContractTypePrivilege]  WITH CHECK ADD  CONSTRAINT [FK_ServicesContractTypePrivilege_ContractTypeGuid] FOREIGN KEY([ContractTypeGuid])
REFERENCES [dbo].[ServicesContractType] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ServicesContractTypePrivilege] CHECK CONSTRAINT [FK_ServicesContractTypePrivilege_ContractTypeGuid]
GO
ALTER TABLE [dbo].[ServicesContractTypePrivilege]  WITH CHECK ADD  CONSTRAINT [FK_ServicesContractTypePrivilege_UserGuid] FOREIGN KEY([UserGuid])
REFERENCES [dbo].[Realty_Users] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ServicesContractTypePrivilege] CHECK CONSTRAINT [FK_ServicesContractTypePrivilege_UserGuid]
GO
ALTER TABLE [dbo].[Shop]  WITH CHECK ADD  CONSTRAINT [FK_Shop_Cost_Guid] FOREIGN KEY([CostGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[Shop] CHECK CONSTRAINT [FK_Shop_Cost_Guid]
GO
ALTER TABLE [dbo].[Shop]  WITH CHECK ADD  CONSTRAINT [FK_Shop_CostCurrencyGUID] FOREIGN KEY([CostCurrencyGUID])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[Shop] CHECK CONSTRAINT [FK_Shop_CostCurrencyGUID]
GO
ALTER TABLE [dbo].[Shop]  WITH CHECK ADD  CONSTRAINT [FK_Shop_CustGuid] FOREIGN KEY([CustGuid])
REFERENCES [dbo].[Customer] ([Guid])
GO
ALTER TABLE [dbo].[Shop] CHECK CONSTRAINT [FK_Shop_CustGuid]
GO
ALTER TABLE [dbo].[Shop]  WITH CHECK ADD  CONSTRAINT [FK_Shop_RentCurrencyGUID] FOREIGN KEY([RentCurrencyGUID])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[Shop] CHECK CONSTRAINT [FK_Shop_RentCurrencyGUID]
GO
ALTER TABLE [dbo].[Shop]  WITH CHECK ADD  CONSTRAINT [FK_Shop_SaleCurrencyGUID] FOREIGN KEY([SaleCurrencyGUID])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[Shop] CHECK CONSTRAINT [FK_Shop_SaleCurrencyGUID]
GO
ALTER TABLE [dbo].[Shop]  WITH CHECK ADD  CONSTRAINT [FK_Shop_UserGuid] FOREIGN KEY([RestrainedUserGuid])
REFERENCES [dbo].[Realty_Users] ([Guid])
GO
ALTER TABLE [dbo].[Shop] CHECK CONSTRAINT [FK_Shop_UserGuid]
GO
ALTER TABLE [dbo].[Shop]  WITH CHECK ADD  CONSTRAINT [UK_Shop_BuildingGuid] FOREIGN KEY([BuildingGuid])
REFERENCES [dbo].[Building] ([Guid])
GO
ALTER TABLE [dbo].[Shop] CHECK CONSTRAINT [UK_Shop_BuildingGuid]
GO
ALTER TABLE [dbo].[ShopAssets]  WITH CHECK ADD  CONSTRAINT [FK_ShopAssets_AssetsGuid] FOREIGN KEY([AssetsGuid])
REFERENCES [dbo].[Assets] ([Guid])
GO
ALTER TABLE [dbo].[ShopAssets] CHECK CONSTRAINT [FK_ShopAssets_AssetsGuid]
GO
ALTER TABLE [dbo].[ShopAssets]  WITH CHECK ADD  CONSTRAINT [FK_ShopAssets_ContractGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[Shop] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ShopAssets] CHECK CONSTRAINT [FK_ShopAssets_ContractGuid]
GO
ALTER TABLE [dbo].[ShopWallet]  WITH CHECK ADD  CONSTRAINT [FK_ShopWallet_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[wallet] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ShopWallet] CHECK CONSTRAINT [FK_ShopWallet_ParentGuid]
GO
ALTER TABLE [dbo].[ShopWallet]  WITH CHECK ADD  CONSTRAINT [UK_wallet_ShopGuid] FOREIGN KEY([ShopGuid])
REFERENCES [dbo].[Shop] ([Guid])
GO
ALTER TABLE [dbo].[ShopWallet] CHECK CONSTRAINT [UK_wallet_ShopGuid]
GO
ALTER TABLE [dbo].[ShopWallet]  WITH CHECK ADD  CONSTRAINT [UK_wallet_ShopWallet] FOREIGN KEY([BuildingGuid])
REFERENCES [dbo].[Building] ([Guid])
GO
ALTER TABLE [dbo].[ShopWallet] CHECK CONSTRAINT [UK_wallet_ShopWallet]
GO
ALTER TABLE [dbo].[SMSInfoDetail]  WITH CHECK ADD  CONSTRAINT [FK_SMSInfo_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[SMSInfo] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[SMSInfoDetail] CHECK CONSTRAINT [FK_SMSInfo_ParentGuid]
GO
ALTER TABLE [dbo].[SMSLog]  WITH CHECK ADD  CONSTRAINT [FK_SMSLog_Realty_Users] FOREIGN KEY([UserGuid])
REFERENCES [dbo].[Realty_Users] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[SMSLog] CHECK CONSTRAINT [FK_SMSLog_Realty_Users]
GO
ALTER TABLE [dbo].[Store]  WITH CHECK ADD  CONSTRAINT [FK_Store_AcFinalGUID] FOREIGN KEY([AcFinalGUID])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[Store] CHECK CONSTRAINT [FK_Store_AcFinalGUID]
GO
ALTER TABLE [dbo].[Store]  WITH CHECK ADD  CONSTRAINT [Fk_Store_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[Store] ([Guid])
GO
ALTER TABLE [dbo].[Store] CHECK CONSTRAINT [Fk_Store_ParentGuid]
GO
ALTER TABLE [dbo].[TblShortCut]  WITH CHECK ADD  CONSTRAINT [FK_TblShortCut_UserGUID] FOREIGN KEY([UserGuid])
REFERENCES [dbo].[Realty_Users] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[TblShortCut] CHECK CONSTRAINT [FK_TblShortCut_UserGUID]
GO
ALTER TABLE [dbo].[TraceDetail]  WITH CHECK ADD  CONSTRAINT [FK_TraceDetail_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[Trace] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[TraceDetail] CHECK CONSTRAINT [FK_TraceDetail_ParentGuid]
GO
ALTER TABLE [dbo].[Trans]  WITH CHECK ADD  CONSTRAINT [FK_Trans_AcMatInGuid] FOREIGN KEY([AcMatInGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[Trans] CHECK CONSTRAINT [FK_Trans_AcMatInGuid]
GO
ALTER TABLE [dbo].[Trans]  WITH CHECK ADD  CONSTRAINT [FK_Trans_AcMatOutGuid] FOREIGN KEY([AcMatOutGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[Trans] CHECK CONSTRAINT [FK_Trans_AcMatOutGuid]
GO
ALTER TABLE [dbo].[Trans]  WITH CHECK ADD  CONSTRAINT [FK_Trans_BranchGuid] FOREIGN KEY([BranchGuid])
REFERENCES [dbo].[Branch] ([Guid])
GO
ALTER TABLE [dbo].[Trans] CHECK CONSTRAINT [FK_Trans_BranchGuid]
GO
ALTER TABLE [dbo].[Trans]  WITH CHECK ADD  CONSTRAINT [FK_Trans_CostInGuid] FOREIGN KEY([CostInGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[Trans] CHECK CONSTRAINT [FK_Trans_CostInGuid]
GO
ALTER TABLE [dbo].[Trans]  WITH CHECK ADD  CONSTRAINT [FK_Trans_CostOutGuid] FOREIGN KEY([CostOutGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[Trans] CHECK CONSTRAINT [FK_Trans_CostOutGuid]
GO
ALTER TABLE [dbo].[Trans]  WITH CHECK ADD  CONSTRAINT [FK_Trans_CurrencyGuid] FOREIGN KEY([CurrencyGuid])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[Trans] CHECK CONSTRAINT [FK_Trans_CurrencyGuid]
GO
ALTER TABLE [dbo].[Trans]  WITH CHECK ADD  CONSTRAINT [FK_Trans_StoreInGuid] FOREIGN KEY([StoreInGuid])
REFERENCES [dbo].[Store] ([Guid])
GO
ALTER TABLE [dbo].[Trans] CHECK CONSTRAINT [FK_Trans_StoreInGuid]
GO
ALTER TABLE [dbo].[Trans]  WITH CHECK ADD  CONSTRAINT [FK_Trans_StoreOutGuid] FOREIGN KEY([StoreOutGuid])
REFERENCES [dbo].[Store] ([Guid])
GO
ALTER TABLE [dbo].[Trans] CHECK CONSTRAINT [FK_Trans_StoreOutGuid]
GO
ALTER TABLE [dbo].[Trans]  WITH CHECK ADD  CONSTRAINT [FK_Trans_TmpAcInGuid] FOREIGN KEY([TmpAcInGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[Trans] CHECK CONSTRAINT [FK_Trans_TmpAcInGuid]
GO
ALTER TABLE [dbo].[Trans]  WITH CHECK ADD  CONSTRAINT [FK_Trans_TmpAcOutGuid] FOREIGN KEY([TmpAcOutGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[Trans] CHECK CONSTRAINT [FK_Trans_TmpAcOutGuid]
GO
ALTER TABLE [dbo].[Trans]  WITH CHECK ADD  CONSTRAINT [FK_Trans_TypeGuid] FOREIGN KEY([TypeGuid])
REFERENCES [dbo].[TransType] ([Guid])
GO
ALTER TABLE [dbo].[Trans] CHECK CONSTRAINT [FK_Trans_TypeGuid]
GO
ALTER TABLE [dbo].[TransDetail]  WITH CHECK ADD  CONSTRAINT [FK_TransDetail_CostGuid] FOREIGN KEY([CostGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[TransDetail] CHECK CONSTRAINT [FK_TransDetail_CostGuid]
GO
ALTER TABLE [dbo].[TransDetail]  WITH CHECK ADD  CONSTRAINT [FK_TransDetail_MatGuid] FOREIGN KEY([MatGuid])
REFERENCES [dbo].[Mat] ([Guid])
GO
ALTER TABLE [dbo].[TransDetail] CHECK CONSTRAINT [FK_TransDetail_MatGuid]
GO
ALTER TABLE [dbo].[TransDetail]  WITH CHECK ADD  CONSTRAINT [Fk_TransDetail_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[Trans] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[TransDetail] CHECK CONSTRAINT [Fk_TransDetail_ParentGuid]
GO
ALTER TABLE [dbo].[TransDiscount]  WITH CHECK ADD  CONSTRAINT [FK_TransDiscount_AccountGuid] FOREIGN KEY([AccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[TransDiscount] CHECK CONSTRAINT [FK_TransDiscount_AccountGuid]
GO
ALTER TABLE [dbo].[TransDiscount]  WITH CHECK ADD  CONSTRAINT [FK_TransDiscount_CostGuid] FOREIGN KEY([CostGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[TransDiscount] CHECK CONSTRAINT [FK_TransDiscount_CostGuid]
GO
ALTER TABLE [dbo].[TransDiscount]  WITH CHECK ADD  CONSTRAINT [FK_TransDiscount_CurrencyGuid] FOREIGN KEY([CurrencyGuid])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[TransDiscount] CHECK CONSTRAINT [FK_TransDiscount_CurrencyGuid]
GO
ALTER TABLE [dbo].[TransDiscount]  WITH CHECK ADD  CONSTRAINT [FK_TransDiscount_obverseAccountGuid] FOREIGN KEY([obverseAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[TransDiscount] CHECK CONSTRAINT [FK_TransDiscount_obverseAccountGuid]
GO
ALTER TABLE [dbo].[TransDiscount]  WITH CHECK ADD  CONSTRAINT [Fk_TransDiscount_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[Trans] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[TransDiscount] CHECK CONSTRAINT [Fk_TransDiscount_ParentGuid]
GO
ALTER TABLE [dbo].[TransType]  WITH CHECK ADD  CONSTRAINT [Fk_TransType_DefCostInGuid] FOREIGN KEY([DefCostinGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[TransType] CHECK CONSTRAINT [Fk_TransType_DefCostInGuid]
GO
ALTER TABLE [dbo].[TransType]  WITH CHECK ADD  CONSTRAINT [Fk_TransType_DefCostOutGuid] FOREIGN KEY([DefCostOutGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[TransType] CHECK CONSTRAINT [Fk_TransType_DefCostOutGuid]
GO
ALTER TABLE [dbo].[TransType]  WITH CHECK ADD  CONSTRAINT [Fk_TransType_DefStoreInGuid] FOREIGN KEY([DefStoreInGuid])
REFERENCES [dbo].[Store] ([Guid])
GO
ALTER TABLE [dbo].[TransType] CHECK CONSTRAINT [Fk_TransType_DefStoreInGuid]
GO
ALTER TABLE [dbo].[TransType]  WITH CHECK ADD  CONSTRAINT [Fk_TransType_DefStoreOutGuid] FOREIGN KEY([DefStoreOutGuid])
REFERENCES [dbo].[Store] ([Guid])
GO
ALTER TABLE [dbo].[TransType] CHECK CONSTRAINT [Fk_TransType_DefStoreOutGuid]
GO
ALTER TABLE [dbo].[TransTypeField]  WITH CHECK ADD  CONSTRAINT [FK_TransTypeField_TransTypeGuid] FOREIGN KEY([TransTypeGuid])
REFERENCES [dbo].[TransType] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[TransTypeField] CHECK CONSTRAINT [FK_TransTypeField_TransTypeGuid]
GO
ALTER TABLE [dbo].[TransTypePrivilege]  WITH CHECK ADD  CONSTRAINT [FK_TransTypePrivilege_TransTypeGuid] FOREIGN KEY([TransTypeGuid])
REFERENCES [dbo].[TransType] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[TransTypePrivilege] CHECK CONSTRAINT [FK_TransTypePrivilege_TransTypeGuid]
GO
ALTER TABLE [dbo].[TransTypePrivilege]  WITH CHECK ADD  CONSTRAINT [FK_TransTypePrivilege_UserGuid] FOREIGN KEY([UserGuid])
REFERENCES [dbo].[Realty_Users] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[TransTypePrivilege] CHECK CONSTRAINT [FK_TransTypePrivilege_UserGuid]
GO
ALTER TABLE [dbo].[Villa]  WITH CHECK ADD  CONSTRAINT [FK_Villa_AccountBankVillaGuid] FOREIGN KEY([AccountBankVillaGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[Villa] CHECK CONSTRAINT [FK_Villa_AccountBankVillaGuid]
GO
ALTER TABLE [dbo].[Villa]  WITH CHECK ADD  CONSTRAINT [FK_Villa_AccountCommIncomeGuidGuid] FOREIGN KEY([AccountCommIncomeGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[Villa] CHECK CONSTRAINT [FK_Villa_AccountCommIncomeGuidGuid]
GO
ALTER TABLE [dbo].[Villa]  WITH CHECK ADD  CONSTRAINT [FK_Villa_BranchGuid] FOREIGN KEY([BranchGuid])
REFERENCES [dbo].[Branch] ([Guid])
GO
ALTER TABLE [dbo].[Villa] CHECK CONSTRAINT [FK_Villa_BranchGuid]
GO
ALTER TABLE [dbo].[Villa]  WITH CHECK ADD  CONSTRAINT [FK_Villa_CuOwnerGuid] FOREIGN KEY([CuOwnerGuid])
REFERENCES [dbo].[Customer] ([Guid])
GO
ALTER TABLE [dbo].[Villa] CHECK CONSTRAINT [FK_Villa_CuOwnerGuid]
GO
ALTER TABLE [dbo].[Villa]  WITH CHECK ADD  CONSTRAINT [FK_Villa_UserGuid] FOREIGN KEY([RestrainedUserGuid])
REFERENCES [dbo].[Realty_Users] ([Guid])
GO
ALTER TABLE [dbo].[Villa] CHECK CONSTRAINT [FK_Villa_UserGuid]
GO
ALTER TABLE [dbo].[Villa]  WITH CHECK ADD  CONSTRAINT [FK_Villa_VillaAccountGuid] FOREIGN KEY([VillaAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[Villa] CHECK CONSTRAINT [FK_Villa_VillaAccountGuid]
GO
ALTER TABLE [dbo].[Villa]  WITH CHECK ADD  CONSTRAINT [FK_Villa_VillaCostGuid] FOREIGN KEY([CostGuid])
REFERENCES [dbo].[Cost] ([Guid])
GO
ALTER TABLE [dbo].[Villa] CHECK CONSTRAINT [FK_Villa_VillaCostGuid]
GO
ALTER TABLE [dbo].[Villa]  WITH CHECK ADD  CONSTRAINT [UK_Villa_CashAccountGuid] FOREIGN KEY([CashAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[Villa] CHECK CONSTRAINT [UK_Villa_CashAccountGuid]
GO
ALTER TABLE [dbo].[Villa]  WITH CHECK ADD  CONSTRAINT [UK_Villa_InsuranceAccountGuid] FOREIGN KEY([InsuranceAccountGuid])
REFERENCES [dbo].[Account] ([Guid])
GO
ALTER TABLE [dbo].[Villa] CHECK CONSTRAINT [UK_Villa_InsuranceAccountGuid]
GO
ALTER TABLE [dbo].[Villa]  WITH CHECK ADD  CONSTRAINT [UK_Villa_RentInfoGuid] FOREIGN KEY([RentInfoGuid])
REFERENCES [dbo].[RentInfo] ([Guid])
GO
ALTER TABLE [dbo].[Villa] CHECK CONSTRAINT [UK_Villa_RentInfoGuid]
GO
ALTER TABLE [dbo].[VillaAssets]  WITH CHECK ADD  CONSTRAINT [FK_VillaAssets_AssetsGuid] FOREIGN KEY([AssetsGuid])
REFERENCES [dbo].[Assets] ([Guid])
GO
ALTER TABLE [dbo].[VillaAssets] CHECK CONSTRAINT [FK_VillaAssets_AssetsGuid]
GO
ALTER TABLE [dbo].[VillaAssets]  WITH CHECK ADD  CONSTRAINT [FK_VillaAssets_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[Villa] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[VillaAssets] CHECK CONSTRAINT [FK_VillaAssets_ParentGuid]
GO
ALTER TABLE [dbo].[Villawallet]  WITH CHECK ADD  CONSTRAINT [FK_Villawallet_ParentGuid] FOREIGN KEY([ParentGuid])
REFERENCES [dbo].[wallet] ([Guid])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[Villawallet] CHECK CONSTRAINT [FK_Villawallet_ParentGuid]
GO
ALTER TABLE [dbo].[Villawallet]  WITH CHECK ADD  CONSTRAINT [UK_wallet_VillaGuid] FOREIGN KEY([VillaGuid])
REFERENCES [dbo].[Villa] ([Guid])
GO
ALTER TABLE [dbo].[Villawallet] CHECK CONSTRAINT [UK_wallet_VillaGuid]
GO
ALTER TABLE [dbo].[wallet]  WITH CHECK ADD  CONSTRAINT [FK_wallet_BranchGuid] FOREIGN KEY([BranchGuid])
REFERENCES [dbo].[Branch] ([Guid])
GO
ALTER TABLE [dbo].[wallet] CHECK CONSTRAINT [FK_wallet_BranchGuid]
GO
ALTER TABLE [dbo].[wallet]  WITH CHECK ADD  CONSTRAINT [FK_wallet_CurrencyGuid] FOREIGN KEY([CurrencyGUID])
REFERENCES [dbo].[Currency] ([Guid])
GO
ALTER TABLE [dbo].[wallet] CHECK CONSTRAINT [FK_wallet_CurrencyGuid]
GO
/****** Object:  StoredProcedure [dbo].[arv_prcPhotoForDownload]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[arv_prcPhotoForDownload]
 
as
	Select 
		p.Guid,
		P.ParentGuid,
		P.[Date],
		P.[Path],
		p.[Desc],
		p.Note,
		U.LoginName as [UserName] ,
		p.TableGUID,
		1 as [Download]
	from 
		Photos P
		inner join Realty_Users U on U.Guid = p.userGuid
		inner join arv_files d on D.parentGuid = p.Guid
	

GO
/****** Object:  StoredProcedure [dbo].[asp_GetAccountGuid]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROC [dbo].[asp_GetAccountGuid]
(
	@ID VARCHAR(255)
)
AS
	select 
		Guid 
	from 
		vwAccount 
	where 
		Name+Code like @ID

GO
/****** Object:  StoredProcedure [dbo].[asp_getBuilding]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROC [dbo].[asp_getBuilding]

AS

select Name from vwBuilding

GO
/****** Object:  StoredProcedure [dbo].[asp_getCheckType]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROC [dbo].[asp_getCheckType]

AS

select Name from vwCheckType

GO
/****** Object:  StoredProcedure [dbo].[asp_getContractType]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROC [dbo].[asp_getContractType]

AS

select Name from vwContractType

GO
/****** Object:  StoredProcedure [dbo].[asp_GetCostGuid]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROC [dbo].[asp_GetCostGuid]
(
	@ID VARCHAR(255)
)
AS

	select 
		Guid 
	from 
		vwCost
	where 
		Name like @ID

GO
/****** Object:  StoredProcedure [dbo].[asp_LOGIN]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROC [dbo].[asp_LOGIN]
(
	@ID VARCHAR(255)
)
AS
	SELECT Top 1 
		* 
	FROM 
		Realty_Users
	WHERE 
		LoginName = @ID

GO
/****** Object:  StoredProcedure [dbo].[CreateChildAccount]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[CreateChildAccount]
(
	@ChildAccountGuid uniqueidentifier = 0x0,
	@ParentGuid uniqueidentifier = '{7F6A6D1D-D505-46E1-A6DD-A62E53990A26}',
	@Name Varchar(256) = 'fkhx',
	@LtnName Varchar(256) = ''
)
  
as
	Set NoCount On
	EXEC PrcInsertSC 'ÅÓã ÇáÍÓÇÈ ãßÑÑ'
	Declare @Ms Varchar(256)
	Set @Ms = dbo.SC('ÅÓã ÇáÍÓÇÈ ãßÑÑ')

	if exists(Select Top 1 * from Account 
	where [Name] = @Name and [ParentGuid] = @ParentGuid)
	begin
		RAISERROR (@Ms, 16, 1)
	end

	DECLARE @Code Varchar(256)
			,@NewCode  Varchar(256)
			,@CurrencyGUID uniqueidentifier
			,@CurrencyVal Float
			,@Type int
			,@FinalGUID uniqueidentifier
			,@NSons Int

	if @ChildAccountGuid = 0x0
	Set @ChildAccountGuid = Newid()

	-- ãÝæÇÕÝÇÊ ÇáÍÓÇÈ ÇáÃÈ		
	Select 
		@Code = [Code]				
		,@CurrencyGUID = [CurrencyGUID]
		,@CurrencyVal = [CurrencyVal]
		,@Type = [Type]
		,@FinalGUID = [FinalGUID]
		,@NSons = [NSons]
	from 
		[vwAccount] where [Guid] = @ParentGuid


	-- ÍÓÇÈ ÇáÑãÒ
	Create Table #Code_Ac
	(Code varchar(255))
	insert into #Code_Ac
	exec PrcCalcMaxAccountcode @ParentGuid
	
	Select @NewCode = Code from #Code_Ac
	
	------
	insert into [Account]
	([Number],[Guid],[Name],[LtnName],[Code],[CDate],[NSons],[Note],[CurrencyGUID],[CurrencyVal],[Type],[ParentGUID],[FinalGUID])
	Select
	(Select isnull(Max([Number]),0)+ 1 from [Account]) as [Number]
	,@ChildAccountGuid as [Guid]
	,@Name as [Name]
	,@LtnName as [LtnName]
	,@NewCode-- + dbo.FnFormatNumber (@Count, 4) as [Code]
	,GetDate() as [CDate]
	,0 as [NSons]
	,'' as [Note]
	,@CurrencyGUID as [CurrencyGUID]
	,@CurrencyVal as [CurrencyVal]
	,@Type as [Type]
	,@ParentGuid as [ParentGUID]
	,@FinalGUID as [FinalGUID]
  
	
	insert into [MovingAccount]
	Select
		@ChildAccountGuid
	
	Select * from Account where [Guid] = @ChildAccountGuid	

GO
/****** Object:  StoredProcedure [dbo].[CreateChildCost]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[CreateChildCost]
(
	@ChildCostGuid uniqueidentifier = 0x0,
	@ParentGuid uniqueidentifier = '{4548FDB3-7054-4D3D-93C6-D6E17641D677}',
	@Name Varchar(256) = 'ãÍá 1',
	@LtnName Varchar(256) = 'òíÓíÓí'
)
  as
	Set NoCount On
	EXEC PrcInsertSC 'ãÑßÒ ÇáßáÝÉ ãßÑÑ'
	Declare @Ms Varchar(256)
	Set @Ms = dbo.SC('ãÑßÒ ÇáßáÝÉ ãßÑÑ')

	if exists(Select Top 1 * from Cost
	where [Name] = @Name and [ParentGuid] = @ParentGuid)
	begin
		RAISERROR (@Ms, 16, 1)
	end

	DECLARE @NewCode  Varchar(256)
			

	if @ChildCostGuid = 0x0
	Set @ChildCostGuid = Newid()
	
	Create Table #CostCode
	(Code varchar(255))
	Delete #CostCode
	insert into #CostCode
	exec PrcCalcMaxCostcode @ParentGuid 

	Set @NewCode = (Select Code from #CostCode)
	------
	insert into [Cost]
	([Number],SecLvl,[Guid],[Name],[LtnName],[Code],[Note],[ParentGUID])
	Select
	(Select isnull(Max([Number]),0)+ 1 from [Cost]) as [Number]
	,0
	,@ChildCostGuid as [Guid]
	,@Name as [Name]
	,@LtnName as [LtnName]
	,@NewCode-- + dbo.FnFormatNumber (@Count, 4) as [Code]
	,''
	,@ParentGuid as [ParentGUID]
  
	
	Select * from [Cost] where [Guid] = @ChildCostGuid	

GO
/****** Object:  StoredProcedure [dbo].[crosstab]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[crosstab] 
	@select varchar(8000),
	@sumfunc varchar(100), 
	@pivot varchar(100), 
	@table varchar(100),
	@TotalRowName varchar(100),
	@TotalColName varchar(100)	
  
AS

	DECLARE @sql varchar(8000), @delim varchar(1)
	SET NOCOUNT ON
	SET ANSI_WARNINGS OFF

	Print 'SELECT ' + @pivot + ' AS [pivot] INTO ##pivot FROM ' + @table + ' WHERE 1=2'
	EXEC ('SELECT ' + @pivot + ' AS [pivot] INTO ##pivot FROM ' + @table + ' WHERE 1=2')

	Print 'INSERT INTO ##pivot SELECT DISTINCT ' + @pivot + ' FROM ' + @table + ' WHERE ' 
	+ @pivot + ' Is Not Null'

	EXEC ('INSERT INTO ##pivot SELECT DISTINCT ' + @pivot + ' FROM ' + @table + ' WHERE ' 
	+ @pivot + ' Is Not Null')

	SELECT @sql='',  @sumfunc=stuff(@sumfunc, len(@sumfunc), 1, ' END)' )

	SELECT @delim=CASE Sign( CharIndex('char', data_type)+CharIndex('date', data_type) ) 
	WHEN 0 THEN '' ELSE '''' END 
	FROM tempdb.information_schema.columns 
	WHERE table_name='##pivot' AND column_name='pivot'

	
	SELECT @sql=@sql + '''' + convert(varchar(100), [pivot]) + ''' = ' + 
	stuff(@sumfunc,charindex( '(', @sumfunc )+1, 0, ' CASE ' + @pivot + ' WHEN ' 
	+ @delim + convert(varchar(100), [pivot]) + @delim + ' THEN ' ) 
	+ ', ' FROM ##pivot


	SELECT @sql=@sql +''''+ @TotalRowName+''''+' = ' + replace(@sumfunc, 'END', '')+','

	DROP TABLE ##pivot


	SELECT @sql=left(@sql, len(@sql)-1)

	-- For Sum Column
	Declare @Sq Varchar(8000),
			@Sq2 Varchar(8000)
	Set @Sq = Left (@select, charindex('Group', @select)-1)
	Set @Sq2 = 'Select '''+@TotalColName+''''+','+@sql + ' From '+@table
	

	SELECT @select=stuff(@select, charindex(' FROM ', @select)+1, 0, ', ' + @sql + ' ')
	+'union All
'+@Sq2

	

	Print @select
	EXEC (@select)
	SET ANSI_WARNINGS ON

GO
/****** Object:  StoredProcedure [dbo].[CrossTabToTable]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[CrossTabToTable] 
	@select varchar(8000),
	@sumfunc varchar(100), 
	@pivot varchar(100), 
	@table varchar(100),
	@TotalRowName varchar(100),
	@TotalColName varchar(100)	
  
AS

	DECLARE @sql varchar(8000), @delim varchar(1)
	SET NOCOUNT ON
	SET ANSI_WARNINGS OFF

	--Print 'SELECT ' + @pivot + ' AS [pivot] INTO ##pivot FROM ' + @table + ' WHERE 1=2'
	EXEC ('SELECT ' + @pivot + ' AS [pivot] INTO ##pivot FROM ' + @table + ' WHERE 1=2')

	--Print 'INSERT INTO ##pivot SELECT DISTINCT ' + @pivot + ' FROM ' + @table + ' WHERE ' 
	--+ @pivot + ' Is Not Null'

	EXEC ('INSERT INTO ##pivot SELECT DISTINCT ' + @pivot + ' FROM ' + @table + ' WHERE ' 
	+ @pivot + ' Is Not Null')

	SELECT @sql='',  @sumfunc=stuff(@sumfunc, len(@sumfunc), 1, ' END)' )

	SELECT @delim=CASE Sign( CharIndex('char', data_type)+CharIndex('date', data_type) ) 
	WHEN 0 THEN '' ELSE '''' END 
	FROM tempdb.information_schema.columns 
	WHERE table_name='##pivot' AND column_name='pivot'

	
	SELECT @sql=@sql + '''' + convert(varchar(100), [pivot]) + ''' = ' + 
	stuff(@sumfunc,charindex( '(', @sumfunc )+1, 0, ' CASE ' + @pivot + ' WHEN ' 
	+ @delim + convert(varchar(100), [pivot]) + @delim + ' THEN ' ) 
	+ ', ' FROM ##pivot


	SELECT @sql=@sql +''''+ @TotalRowName+''''+' = ' + replace(@sumfunc, 'END', '')+','

	DROP TABLE ##pivot


	SELECT @sql=left(@sql, len(@sql)-1)

	-- For Sum Column
	Declare @Sq Varchar(8000),
			@Sq2 Varchar(8000)
	Set @Sq = Left (@select, charindex('Group', @select)-1)
	Set @Sq2 = 'Select '''+@TotalColName+''''+','+@sql + ' From '+@table
	
	Declare @SSS Varchar(800)
	Set @SSS = @Sq
	
	SELECT @SSS=stuff(@select, charindex(' FROM ', @select)+1, 0, ', ' + @sql + ' ')
	SELECT @SSS=stuff(@SSS, charindex(' FROM ', @SSS)+1, 0, ' Into ResTblValue ')
	--Set @SSS = Left (@SSS, LEN(@SSS)-1)
	
	-- End 
	SELECT @select=stuff(@select, charindex(' FROM ', @select)+1, 0, ', ' + @sql + ' ')
	+'union All
'+@Sq2


	Set @select = 'insert into ResTblValue ' + @select
	
	if exists(Select * from SysObjects where name = 'ResTblValue')
	Drop Table ResTblValue
	
	Print @SSS
	exec (@SSS)

--	Select * from ResTblValue
	
	Truncate Table ResTblValue
	Print @select
	EXEC (@select)

	--Select * from ResTblValue

	SET ANSI_WARNINGS ON

GO
/****** Object:  StoredProcedure [dbo].[DeleteChecksCollection]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[DeleteChecksCollection]
(
	@CheckGuid uniqueidentifier = 0x0,
	@Kind INT = 0
)
  
as
	DELETE [ChecksCollection]
	WHERE	
		[CheckGuid] = @CheckGuid
		AND [Kind] = @Kind

	-- ÍÐÝ ÇáÞíæÏ ÇáÞÏíãÉ
	Delete
		[LinkEntry_Checks]
	where
		[CheckGuid] = @CheckGuid
		AND [kind] = 1660 + @Kind

	-- ÍÐÝ ÇáÞíæÏ ÇáÞÏíãÉ
	Delete
		[LinkEntryType_Checks]
	where
		[CheckGuid] = @CheckGuid
		AND [kind] = 1660 + @Kind
		

GO
/****** Object:  StoredProcedure [dbo].[DistributionWalletProfit]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[DistributionWalletProfit]
(
	@Guid uniqueidentifier = '60D735E2-766D-4B24-8F56-7F4CCDD808D0',
	@RoundKind int = 0
)
  
as
	CREATE TABLE #FlatWallet
	(
		[Building] [varchar](256) NULL,
		[Flat] [varchar](513) NULL,
		[MainCost] [float] NULL,
		[Expense] [float] NULL,
		[BeginDate] [datetime] NULL,
		[SaleDate] [datetime] NULL,
		[DayCount] [int] NULL,
		[SaleValue] [float] NULL,
		[Profit] [float] NULL,
		[BuildingGuid] [uniqueidentifier] NULL,
		[FlatGuid] [uniqueidentifier] NULL
	)

	insert into #FlatWallet
	exec [PrcGetFlatWallet] @Guid

	insert into #FlatWallet
	exec [PrcGetShopWallet] @Guid

	insert into #FlatWallet
	exec [PrcGetParkingWallet] @Guid

	insert into #FlatWallet
	exec [PrcGetLandWallet] @Guid

	insert into #FlatWallet
	exec [PrcGetVillaWallet] @Guid


	Select 
		[P].[CustName],
		[p].[BeginDate] as [CustBeginDate],
		[p].[EndDate] as [CustEndDate],
		[P].[Value],
		[F].[Flat],
		[F].[BeginDate] as [FlatBeginDate],
		[F].[saleDate] as [FlatSaleDate],
		DateDiff(Day, [F].[BeginDate], [F].[SaleDate]) as [AllDay],
		[F].[Profit],
		Case when [P].[endDate] >= [F].[SaleDate] then
		DateDiff(Day
					,Case when [F].[BeginDate] < [P].[BeginDate] then [P].[BeginDate] else [F].[BeginDate] end
					,Case when [F].[SaleDate] < [P].[endDate] then [F].[SaleDate] else [P].[endDate] end
				) end
		as [DayWork]
		,[F].[FlatGuid]
		,[P].[Number]
		Into #Res
	From 
		(Select
			[P1].[Number],
			[P1].[ParentGuid],
			[C].[Name] as [CustName],
			[p1].[BeginDate],
			[p1].[EndDate],
			[P1].[Value]
		From
			[Partnerwallet] [P1]
			inner join [vwCustomer] [C] on [C].[Guid] = [P1].[CustGuid]
		) [P],
		#FlatWallet [F]
	where
		[P].[ParentGuid] = @Guid
	Order By 
		[P].[Number]

	--ÍÓÇÈ ãÌãæÚ ÑÃÓ ÇáãÇá ÇáÚÇãá áßá ÔÞÉ
	Select 
		[FlatGuid] as [Fw_FlatGuid],
		Sum([Value] * [DayWork] / Case when [AllDay] <> 0 then [AllDay] end)  as [FW_ValueWork]
		into #FlatValueWork
	from 
		#Res
	Group By
		[FlatGuid]

	--Select * from #FlatValueWork

	Select 
		[R].* 
		--ÑÃÓ ÇáãÇá ÇáÚÇãá = ÇáãÈáÛ * ÚÏÏ ÇíÇã ÇáÚãá / ÚÏÏ ÇáÃíÇã Çáßáí
		,[Value] * [DayWork] / Case when [AllDay] <> 0 then [AllDay] end
		as [ValueWork]
		-- äÓÈÉ ÇáÑÈÍ = ÇáÑÈÍ ÇáÅÌãÇáí ááÔÞÉ / ãÌãæÚ ÑÃÓ ÇáãÇá ÇáÚÇãá
		,
		Case when [Value] * [DayWork] / Case when [AllDay] <> 0 then [AllDay] end <> 0 then [Profit] 
		/
		[FW_ValueWork]

		end *100
		as [Percent]
		-- ÇáÑÈÍ ÇáÕÇÝí= äÓÈÉ ÇáÑÈÍ * ÑÃÓ ÇáãÇá ÇáÚÇãá
		,(
			Case when [Value] * [DayWork] / Case when [AllDay] <> 0 then [AllDay] end <> 0 then [Profit] 
			/
			[FW_ValueWork]

			end
		)
		*
		[Value] * [DayWork] / Case when [AllDay] <> 0 then [AllDay] end
		as [CustProfit]
		,Cast([R].[Number] as Varchar(256))+[CustName] as [Order]
		, 0 as [Kind]
	into #Res2
	from 
		#Res [R]
		inner join #FlatValueWork [F] on [F].[Fw_FlatGuid] = [R].[FlatGuid]

	--Select * from #REs2

	Insert into #Res2
	Select
		Dbo.SC('ãÌãæÚ')+': ' +[CustName],
		Null as [CustBeginDate],
		Null as [CustEndDate],
		[Value],
		'' as [Flat],
		Null as [FlatBeginDate],
		Null as [FlatSaleDate],
		Null as [AllDay],
		Sum([Profit]),
		Null as [DayWork],
		0x0 as [FlatGuid],
		0 as [Number],
		dbo.FnMyRound([ValueWork], @RoundKind),
		Sum([Percent]),
		dbo.FnMyRound(Sum([CustProfit]), @RoundKind),
		Max([Order]) + 'Z',
		1 as [kind]
	From
		#Res2
	Group By
		[CustName],[ValueWork], [Value]

	
	--ÇáÅÌãÇáí ÇáÚÇã
	Insert into #Res2
	Select
		Dbo.SC('ÇáÅÌãÇáí'),
		Null as [CustBeginDate],
		Null as [CustEndDate],
		Sum([Value]),
		'' as [Flat],
		Null as [FlatBeginDate],
		Null as [FlatSaleDate],
		Null as [AllDay],
		[Profit],
		null as [DayWork],
		0x0 as [FlatGuid],
		0 as [Number],
		dbo.FnMyRound(Sum([ValueWork]), @RoundKind),
		avg([Percent]),
		dbo.FnMyRound(Sum([CustProfit]), @RoundKind),
		Max([Order]) + 'Z',
		2 as [kind]
	From
		#Res2
	where
		[Kind] = 0
	Group By
		[Profit]


	Select * from #Res2
	Order By [Order], [Kind]
	

GO
/****** Object:  StoredProcedure [dbo].[DropObject]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[DropObject]
(
	@ObjName Varchar(256) = '#CountCurrentContract'
)
  
as
	Declare @Id Int

	Select 
		@id = Id
	From
		dbo.sysobjects 
	where 
		id = object_id(@ObjName) 

	if OBJECTPROPERTY(@id, N'IsView') = 1
	EXEC ('DROP View '+ @ObjName)

	if OBJECTPROPERTY(@id, N'IsProcedure') = 1
	EXEC ('DROP Procedure '+ @ObjName)


	if OBJECTPROPERTY(@id, N'IsTrigger') = 1
	EXEC ('DROP trigger '+ @ObjName)


	if exists (select * from dbo.sysobjects where id = @id and xtype in (N'FN', N'IF', N'TF'))
	EXEC ('DROP Function '+ @ObjName)


	if exists( Select *	From dbo.sysobjects where Name = @ObjName and Type = 'f')
	begin
		Declare @TblName Varchar(256)
		Set @TblName = (Select Name From dbo.sysobjects where Id = 
							( Select Parent_obj	From dbo.sysobjects where Name = @ObjName and Type = 'f')
						)	
						
		print 'Alter Table '+@TblName+' Drop '+@ObjName
		exec ('Alter Table '+@TblName+' Drop '+@ObjName)
	end

	if (
	Select 
		[xtype]
	From
		dbo.sysobjects 
	where 
		id = object_id(@ObjName) 
		) = 'U'
	begin
		Print 'DROP Table '+ @ObjName
		EXEC ('DROP Table '+ @ObjName)
	end


	
	if LEFT(@ObjName, 1) = '#'
	begin
		Declare @tmptblName varchar(255)
		
		Select @tmptblName = Name from tempdb.sys.objects where name like  @ObjName+'%'
		begin
			if @tmptblName is Not Null 
			begin
				Print 'DROP Table tempdb..'+ @tmptblName
				EXEC ('DROP Table tempdb..'+ @tmptblName)
			end
		end
	end


GO
/****** Object:  StoredProcedure [dbo].[FlatMove]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create Procedure [dbo].[FlatMove]
(
	@CustGuid uniqueidentifier = 0x0
	,@BuildingGuid uniqueidentifier = 0x0
	,@FlatGuid uniqueidentifier = 0x0
	,@CkFlat bit = 0

	,@ShopGuid uniqueidentifier = 0x0
	,@CkShop bit = 0

	,@ParkingGuid uniqueidentifier = 0x0
	,@CkParking bit = 0

	,@VillaGuid uniqueidentifier = 0x0
	,@CkVilla bit = 0

	,@LandGuid uniqueidentifier = 0x0
	,@CkLand bit = 1

	,@Date1 DateTime = '1/1/2007'
	,@Date2 DateTime = '1/1/2015'
	,@Datewith int = 0
	,@ShowIsCheck Bit = 1
	,@ShowIsNotCheck Bit = 1
	,@CkDate Bit = 0
)
as

	Create Table #Res
	(
		[CustName] Varchar(256),
		[BuildingName] Varchar(256),
		[Flat] Varchar(256),
		[Contract] Varchar(256),
		[FromDate] Datetime,
		[ToDate] Datetime,
		[ContractFinishDate] Datetime,
		[Rent] Float,
		[CurrencyName] Varchar(256),
		[LeaseKind] int,
		[Guid] uniqueidentifier,
		[RealtyGuid] uniqueidentifier,
		[Check] bit,
		[Flag] int
	)
	

	If @CkFlat = 1
	Insert into #Res
	Select 
		[L].[CustName],
		[L].[BuildingName],
		[L].[FlatNo] +' '+[L].[FlatKind] as [Flat],
		[L].[Contract],
		[L].[FromDate],
		[L].[ToDate],
		Case when [L].[ContractFinish] = 1 then [L].[ContractFinishDate] end As [ContractFinishDate],
		[L].[Rent],
		[L].[CurrencyName],
		[L].[LeaseKind],
		[L].[Guid],
		L.[ApartmentGuid],
		Case when [R].[ObjGuid] is null then 0 
			 when [R].[ObjGuid] is not null  then 1 end as [Check],
		0 as Flag
	From 
		[vwLeaseApartment] [L]
		left join [RepCheck] [R] on [R].[ObjGuid] = [L].[Guid] and [R].[IdReport] = 6000 and [R].[ObjGuid] <> 0x0
	where
		([LeaseKind] = 0 or [LeaseKind] = 2)
		and ([l].[CustomerGuid] = @CustGuid or @CustGuid = 0x0)	
		and ([BuildingGuid] = @BuildingGuid or @BuildingGuid = 0x0)
		and ([ApartmentGuid] = @FlatGuid or @FlatGuid = 0x0)
		and (
				(
					([FromDate] > @Date1 and @Datewith  = 0)
					and ([FromDate] < @Date2 and @Datewith  = 0 or @Date2 = '12/30/1899')
				)
				or
				(
					([ToDate] > @Date1 and @Datewith  = 1)
					and ([ToDate] < @Date2 and @Datewith  = 1 or @Date2 = '12/30/1899')
				)
				or @CkDate = 0
			) 
		and(
			([R].[ObjGuid] is not null and @ShowIsCheck = 1)
			or
			([R].[ObjGuid] is null and @ShowIsNotCheck = 1)
			)



	If @CkShop = 1
	Insert into #Res
	Select 
		[L].[CustName],
		[L].[BuildingName],
		[L].[FlatNo]  as [Flat],
		[L].[Contract],
		[L].[FromDate],
		[L].[ToDate],
		Case when [L].[ContractFinish] = 1 then [L].[ContractFinishDate] end As [ContractFinishDate],
		[L].[Rent],
		[L].[CurrencyName],
		[L].[LeaseKind],
		[L].[Guid],
		l.ShopGuid,
		Case when [R].[ObjGuid] is null then 0 
			 when [R].[ObjGuid] is not null  then 1 end as [Check],
		0 as Flag
	From 
		[vwLeaseApartment] [L]
		left join [RepCheck] [R] on [R].[ObjGuid] = [L].[Guid] and [R].[IdReport] = 6000
	where
		([LeaseKind] = 1 or [LeaseKind] = 3)	
		and ([l].[CustomerGuid] = @CustGuid or @CustGuid = 0x0)	
		and ([BuildingGuid] = @BuildingGuid or @BuildingGuid = 0x0)
		and ([ShopGuid] = @ShopGuid or @ShopGuid = 0x0)
		and (
				(
					([FromDate] > @Date1 and @Datewith  = 0)
					and ([FromDate] < @Date2 and @Datewith  = 0 or @Date2 = '12/30/1899')
				)
				or
				(
					([ToDate] > @Date1 and @Datewith  = 1)
					and ([ToDate] < @Date2 and @Datewith  = 1 or @Date2 = '12/30/1899')
				)
				or @CkDate = 0
			) 
		and(
			([R].[ObjGuid] is not null and @ShowIsCheck = 1)
			or
			([R].[ObjGuid] is null and @ShowIsNotCheck = 1)
			)


	If @CkParking = 1
	Insert into #Res
	Select 
		[L].[CustName],
		[L].[BuildingName],
		[L].[ParkingNo]  as [Flat],
		[L].[Contract],
		[L].[FromDate],
		[L].[ToDate],
		Case when [L].[ContractFinish] = 1 then [L].[ContractFinishDate] end As [ContractFinishDate],
		[L].[Rent],
		[L].[CurrencyName],
		[L].[ContractKind],
		[L].[Guid],
		l.ParkingGuid,
		Case when [R].[ObjGuid] is null then 0 
			 when [R].[ObjGuid] is not null  then 1 end as [Check],
		0 as Flag
	From 
		[vwParkingContract] [L]
		left join [RepCheck] [R] on [R].[ObjGuid] = [L].[Guid] and [R].[IdReport] = 6000
	where
		([BuildingGuid] = @BuildingGuid or @BuildingGuid = 0x0)
		and ([l].[CustomerGuid] = @CustGuid or @CustGuid = 0x0)	
		and ([ParkingGuid] = @ParkingGuid or @ParkingGuid = 0x0)
		and (
				(
					([FromDate] > @Date1 and @Datewith  = 0)
					and ([FromDate] < @Date2 and @Datewith  = 0 or @Date2 = '12/30/1899')
				)
				or
				(
					([ToDate] > @Date1 and @Datewith  = 1)
					and ([ToDate] < @Date2 and @Datewith  = 1 or @Date2 = '12/30/1899')
				)
				or @CkDate = 0
			) 
		and(
			([R].[ObjGuid] is not null and @ShowIsCheck = 1)
			or
			([R].[ObjGuid] is null and @ShowIsNotCheck = 1)
			)


	If @CkLand = 1 and @BuildingGuid = 0x0
	Insert into #Res
	Select 
		[L].[CustName],
		'' as [BuildingName],
		[L].[Name]  as [Flat],
		[L].[ContractNo],
		[L].[FromDate],
		[L].[ToDate],
		Case when [L].[ContractFinish] = 1 then [L].[ContractFinishDate] end As [ContractFinishDate],
		[L].[Rent],
		[L].[CurrencyName],
		[L].[ContractKind],
		[L].[Guid],
		L.landGuid,
		Case when [R].[ObjGuid] is null then 0 
			 when [R].[ObjGuid] is not null  then 1 end as [Check],
		0 as Flag
	From 
		[vwLandContract] [L]
		left join [RepCheck] [R] on [R].[ObjGuid] = [L].[Guid] and [R].[IdReport] = 6000
	where
		([LandGuid] = @LandGuid or @LandGuid = 0x0)
		and ([l].[CustomerGuid] = @CustGuid or @CustGuid = 0x0)	
		and ([L].[ContractKind] = 6 or [L].[ContractKind] = 7)
		and (
				(
					([FromDate] > @Date1 and @Datewith  = 0)
					and ([FromDate] < @Date2 and @Datewith  = 0 or @Date2 = '12/30/1899')
				)
				or
				(
					([ToDate] > @Date1 and @Datewith  = 1)
					and ([ToDate] < @Date2 and @Datewith  = 1 or @Date2 = '12/30/1899')
				)
				or @CkDate = 0
			) 
		and(
			([R].[ObjGuid] is not null and @ShowIsCheck = 1)
			or
			([R].[ObjGuid] is null and @ShowIsNotCheck = 1)
			)


	If @CkVilla = 1 and @BuildingGuid = 0x0
	Insert into #Res
	Select 
		[L].[CustName],
		'' as [BuildingName],
		[L].[Name]  as [Flat],
		[L].[ContractNo],
		[L].[FromDate],
		[L].[ToDate],
		Case when [L].[ContractFinish] = 1 then [L].[ContractFinishDate] end As [ContractFinishDate],
		[L].[Rent],
		[L].[CurrencyName],
		[L].[ContractKind],
		[L].[Guid],
		L.LandGuid,
		Case when [R].[ObjGuid] is null then 0 
			 when [R].[ObjGuid] is not null  then 1 end as [Check],
		0 as Flag
	From 
		[vwLandContract] [L]
		left join [RepCheck] [R] on [R].[ObjGuid] = [L].[Guid] and [R].[IdReport] = 6000
	where
		([LandGuid] = @VillaGuid or @VillaGuid = 0x0)
		and ([l].[CustomerGuid] = @CustGuid or @CustGuid = 0x0)	
		and ([L].[ContractKind] = 8 or [L].[ContractKind] = 9)
		and (
				(
					([FromDate] > @Date1 and @Datewith  = 0)
					and ([FromDate] < @Date2 and @Datewith  = 0 or @Date2 = '12/30/1899')
				)
				or
				(
					([ToDate] > @Date1 and @Datewith  = 1)
					and ([ToDate] < @Date2 and @Datewith  = 1 or @Date2 = '12/30/1899')
				)
				or @CkDate = 0
			) 
		and(
			([R].[ObjGuid] is not null and @ShowIsCheck = 1)
			or
			([R].[ObjGuid] is null and @ShowIsNotCheck = 1)
			)

	
	Create Table #Res_F
	(
		[id] int identity(1,1),
		[CustName] Varchar(256),
		[BuildingName] Varchar(256),
		[Flat] Varchar(256),
		[Contract] Varchar(256),
		[FromDate] Datetime,
		[ToDate] Datetime,
		[ContractFinishDate] Datetime,
		[EmptyDay] int,
		[EmptyDayValue] Float,
		[Rent] Float,
		[CurrencyName] Varchar(256),
		[LeaseKind] int,
		[Guid] uniqueidentifier,
		[RealtyGuid] uniqueidentifier,
		[Check] bit,
		[Flag] int
	)
	
	insert into #Res_F
	([CustName],[BuildingName],[Flat],[Contract],[FromDate],[ToDate],[ContractFinishDate],[Rent],[CurrencyName],[LeaseKind],[Guid],[RealtyGuid],[Check],[Flag])
	Select
		[CustName],[BuildingName],[Flat],[Contract],[FromDate],[ToDate],[ContractFinishDate],[Rent],[CurrencyName],[LeaseKind],[Guid],[RealtyGuid],[Check],[Flag]
	From
		#Res	
	Order By
		[BuildingName],[Flat],FromDate
		
	Select * into #Res_F2 from #Res_F
	
	update #Res_F Set [EmptyDay] = DATEDIFF(DAY, T.[ContractFinishDate], T2.[FromDate]) -1
	From
		#Res_F T
		inner join #Res_F2 T2 on T.id = T2.id - 1 and T.RealtyGuid = T2.RealtyGuid
	
	update #Res_F Set [EmptyDayValue] = [EmptyDay] * Rent / dbo.fnGetCountDayofYear()

	Insert into #Res_F
	([CustName],[BuildingName],[Flat],[Contract],EmptyDay,[EmptyDayValue],[ContractFinishDate],[Rent],[CurrencyName],[LeaseKind],[Guid],[Check],[Flag])
	Select 
		dbo.SC('ÇáãÌãæÚ') as[CustName],
		dbo.SC('ÇáãÌãæÚ') as [BuildingName],
		'' as [Flat],
		'' as [ContractNo],
		SUM(EmptyDay) as [EmptyDay],
		SUM([EmptyDayValue]) as [EmptyDayValue],
		Null as [ContractFinishDate],
		Sum([Rent]),
		'' as [CurrencyName],
		0 as [ContractKind],
		0x0 as [Guid],
		0 as [Check],
		1
	From 
		#Res_F
		
	Select * From #Res_f
	Order By
		Flag,
		[BuildingName],
		[Flat]
		

GO
/****** Object:  StoredProcedure [dbo].[FlatProfit]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[FlatProfit]
(
	@Flat Bit = 1,
	@Shop Bit = 1,
	@CurrencyVal Float = 1,
	@Date1 DateTime = '1/1/2007',
	@Date2 DateTime = '1/1/2008'
)
  
as

	Exec PrcInsertSC 'ÔÞÉ'	
	Exec PrcInsertSC 'ãÍá'	
	Exec PrcInsertSC 'ÇáãÌãæÚ'
	
	
	Declare @Tbl Table
	(
		[ContractNo] Varchar(256)
		,[Date] DateTime
		,[BuildingName] Varchar(256)
		,[StrKind] Varchar(256)
		,[FlatName] Varchar(256)
		,[CostPice] Float
		,[SalePrice] Float
		,[ContractGuid] uniqueidentifier
		,[FlatGuid] uniqueidentifier
		,[Kind] Int
		,[Sort] int
	)

	if @Flat = 1	
	Insert Into @Tbl
	Select 
		[ContractNo]
		,[FromDate] as [Date]
		,[F].[BuildingName]
		,dbo.SC('ÔÞÉ')
		,[F].[No]+' '+[F].[ApartmentType] as [FlatName]
		,[F].[CostPrice] * [CostCurrnecyVal] / @CurrencyVal as [CostPice]
		,[C].[Rent] * [C].[CurrencyVal] / @CurrencyVal as [SalePrice]
		,[C].[Guid] as [ContractGuid]
		,[F].[Guid]
		,0
		,0 
	From 
		[LeaseApartment] [C]
		inner join [vwApartment] [F] on [F].[Guid] = [C].[ApartmentGuid]
		inner join [Resource] [R] on [R].[Guid] = [C].[BuildingGuid] and [R].[Spid] = @@Spid
	where
		([LeaseKind] = 2) and ([C].[Fromdate] Between @Date1 And @Date2)
		
	if @Shop = 1	
	Insert Into @Tbl
	Select 
		[ContractNo]
		,[FromDate] as [Date]
		,[F].[BuildingName]
		,dbo.SC('ãÍá')
		,[F].[No]+' ' as [FlatName]
		,[F].[CostPrice] * [CostCurrnecyVal] / @CurrencyVal as [CostPice]
		,[C].[Rent] * [C].[CurrencyVal] / @CurrencyVal as [SalePrice]
		,[C].[Guid] as [ContractGuid]
		,[F].[Guid]
		,1
		,0
	From 
		[LeaseApartment] [C]
		inner join [vwShop] [F] on [F].[Guid] = [C].[ApartmentGuid]
		inner join [Resource] [R] on [R].[Guid] = [C].[BuildingGuid] and [R].[Spid] = @@Spid
	where
		([LeaseKind] = 3)
		and ([C].[Fromdate] Between @Date1 And @Date2)

	Insert Into @Tbl
	Select 
		'ÇáãÌãæÚ' as [ContractNo]
		,Null as [Date]
		,'' as [BuildingName]
		,'' as [StrKind]
		,'' as [FlatName]
		,Sum([CostPice])
		,Sum([SalePrice])
		,0x0 as [ContractGuid]
		,0x0 as [FlatGuid]
		,-1 as [Kind]
		,1 [Sort]
	from 
		@Tbl 
	Order By [Date]
	
	Select 
		* 
		,isnull([SalePrice],0) - isnull([CostPice],0)  as [Profit]
	from @Tbl 
	Order By Sort

GO
/****** Object:  StoredProcedure [dbo].[Gold_PrcAddToextendedproperty]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [dbo].[Gold_PrcAddToextendedproperty]
  @PropertyName varchar (50) = 'verstion',
  @PropertyValue varchar (50) = ''
  
as
   EXEC  sp_addextendedproperty @PropertyName,@PropertyValue



GO
/****** Object:  StoredProcedure [dbo].[Gold_prcBackup]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE  PROCEDURE [dbo].[Gold_prcBackup]
	@DbName varchar(128) = 'Order22',
	@Path varchar(4000) = 'C:\',
	@Path2 varchar(4000) = ''

  
AS

	IF RIGHT(@Path, 1) <> '\' 
	SET @Path = @Path + '\'	

	SET @Path = @Path + @DbName

	Declare @Disk varchar(4000),
			@SQL varchar(4000)
	SET @Disk = ''''+ @Path +'_'+ 
				Cast(DatePart(dd, GetDate()) AS varchar(2)) + '_' +
				Cast(DatePart(mm, GetDate()) AS varchar(2)) + '_' +
				Cast(DatePart(yyyy, GetDate()) AS varchar(4)) + '_'+

				Cast(DatePart(hh, GetDate()) AS varchar(2)) + '_' +
				Cast(DatePart(mi, GetDate()) AS varchar(2)) +'.bak' + ''''

	--Print(@Disk)
	SET @SQL = 'BACKUP DATABASE' +' '+ @DbName + ' TO DISK = '+ @Disk
        print (@SQL)
	Exec(@SQL)

	---- Backup2
	IF (@path2 <> '')
	BEGIN
		IF (RIGHT(@Path2, 1) <> '\' )
		SET @Path2 = @Path2 + '\'	
	
		SET @Path2 = @Path2 + @DbName
	
		SET @Disk = ''''+ @Path2 +'_'+ 
					Cast(DatePart(dd, GetDate()) AS varchar(2)) + '_' +
					Cast(DatePart(mm, GetDate()) AS varchar(2)) + '_' +
					Cast(DatePart(yyyy, GetDate()) AS varchar(4)) + '_'+
	
					Cast(DatePart(hh, GetDate()) AS varchar(2)) + '_' +
					Cast(DatePart(mi, GetDate()) AS varchar(2)) +'.bak' + ''''
	
		--Print(@Disk)
		SET @SQL = 'BACKUP DATABASE' +' '+ @DbName + ' TO DISK = '+ @Disk +'WITH DESCRIPTION ='''' ,COMPRESSION,init'
	        print (@SQL)
		Exec(@SQL)
	END


GO
/****** Object:  StoredProcedure [dbo].[Gold_PrcUpDateToextendedproperty]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [dbo].[Gold_PrcUpDateToextendedproperty]
  @PropertyName varchar (50) = 'Vestion',
  @PropertyValue varchar (50) = ''
  
as
	   EXEC  sp_updateextendedproperty @PropertyName,@PropertyValue


GO
/****** Object:  StoredProcedure [dbo].[prc__AddJob]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[prc__AddJob]
	@JobName		[VARCHAR]( 256), --name of job 
	@JobType		[INT], -- type of job 4 d, 8 w, 16 m 
	@JobTime		[INT],  
	@Jobday			[INT],  
	@JobStartDate	[INT],  
	@DBName			[VARCHAR]( 256),  
	@Command		[VARCHAR]( 8000) 
  
AS 
/* 
	this procedure Add Job To database 
	this job Execute the Command 
*/ 
	/* Delete Job If Exsist*/
--	EXECUTE [msdb].[dbo].[sp_delete_job] @job_name = @JobName
	
	SET XACT_ABORT ON  
	BEGIN TRANSACTION  
	DECLARE @JobID [BINARY](16)  
	DECLARE @ReturnCode [INT]  
	DECLARE @RetryNum [INT]  
	DECLARE @RetryInter [INT]  
	IF(@JobType = 4)  
	BEGIN 
		SELECT @RetryNum = 23  
		SELECT @RetryInter = 60  
	END ELSE BEGIN  
		SELECT @RetryNum = 4  
		SELECT @RetryInter = 1440  
	END  
	SET @ReturnCode = 0 
--	IF (SELECT COUNT(*) FROM msdb.dbo.syscategories WHERE name = N'[Uncategorized (Local)]') < 1  
	IF NOT EXISTS(SELECT * FROM [msdb].[dbo].[syscategories] WHERE [name] = N'[Uncategorized (Local)]') 
		EXECUTE [msdb].[dbo].[sp_add_category] @name = N'[Uncategorized (Local)]' 
	-- Delete the job with the same name (if it exists)  
	SELECT @JobID = [job_id] FROM [msdb].[dbo].[sysjobs] WHERE ([name] = @JobName) 
	IF (@JobID IS NOT NULL)  
	BEGIN -- Check if the job is a multi-server job  
		IF (EXISTS (SELECT * FROM [msdb].[dbo].[sysjobservers] WHERE ([job_id] = @JobID) AND ([server_id] <> 0)))  
		BEGIN -- There is, so abort the script  
			RAISERROR (N'Unable to import job | '' since there is already a multi-server job with this name.', 16, 1)  
			
			IF (@@TRANCOUNT > 0) 
			ROLLBACK TRANSACTION 
  
		END  
		ELSE -- Delete the [local] job  
			EXECUTE [msdb].[dbo].[sp_delete_job] @job_name = @JobName  
		SELECT @JobID = NULL  
	END 
	-- Add the job  
	EXECUTE @ReturnCode = [msdb].[dbo].[sp_add_job] @job_id = @JobID OUTPUT , @job_name = @JobName , @owner_login_name = NULL, @description = N'No description available.', @category_name = N'[Uncategorized (Local)]', @enabled = 1, @notify_level_email = 0, @notify_level_page = 0, @notify_level_netsend = 0, @notify_level_eventlog = 2, @delete_level= 0  
	IF (@@ERROR <> 0 OR @ReturnCode <> 0) 
		IF (@@TRANCOUNT > 0) 
		ROLLBACK TRANSACTION 

	-- Add the job steps  
	EXECUTE @ReturnCode = [msdb].[dbo].[sp_add_jobstep] @job_id = @JobID, @step_id = 1, @step_name = N'Step 1', @command = @Command, @database_name = @DBName, @server = N'', @database_user_name = N'', @subsystem = N'TSQL', @cmdexec_success_code = 0, @flags = 0, @retry_attempts = @RetryNum, @retry_interval = @RetryInter, @output_file_name = N'', @on_success_step_id = 0, @on_success_action = 1, @on_fail_step_id = 0, @on_fail_action = 2  
	IF (@@ERROR <> 0 OR @ReturnCode <> 0) 
		IF (@@TRANCOUNT > 0) 
		ROLLBACK TRANSACTION 

	EXECUTE @ReturnCode = [msdb].[dbo].[sp_update_job] @job_id = @JobID, @start_step_id = 1 
	IF (@@ERROR <> 0 OR @ReturnCode <> 0) 
		IF (@@TRANCOUNT > 0) 
		ROLLBACK TRANSACTION 
	
	-- Add the job schedules  
	EXECUTE @ReturnCode = [msdb].[dbo].[sp_add_jobschedule] @job_id = @JobID, @name = N'Schedule 1', @enabled = 1, @freq_type = @JobType , @active_start_date = @JobStartDate, @active_start_time = @JobTime, @freq_interval = @Jobday, @freq_subday_type = 1, @freq_subday_interval = 0, @freq_relative_interval = 0, @freq_recurrence_factor = 1, @active_end_date = 99991231, @active_end_time = 235959 
	IF (@@ERROR <> 0 OR @ReturnCode <> 0) 
		IF (@@TRANCOUNT > 0) 
		ROLLBACK TRANSACTION 

	-- Add the Target Servers  
	EXECUTE @ReturnCode = [msdb].[dbo].[sp_add_jobserver] @job_id = @JobID, @server_name = N'(local)' 
	IF (@@ERROR <> 0 OR @ReturnCode <> 0) 
		IF (@@TRANCOUNT > 0) 
		ROLLBACK TRANSACTION 

	COMMIT TRANSACTION  
	RETURN 


GO
/****** Object:  StoredProcedure [dbo].[PRC__GetJobSchedule]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[PRC__GetJobSchedule] 
	@jobName [varchar](256) =  ''
  
AS  
SELECT  
	[sj].[name] [JobName],
--	CAST( [sjs].[freq_type] AS [VARCHAR](10)) AS [type],  
--	CAST( [sjs].[freq_interval] AS [VARCHAR](10)) AS [Interval],  
--	CAST( [sjs].[active_start_date] AS [VARCHAR](10)) AS [SDate],  
--	CAST( [sjs].[active_start_time] AS [VARCHAR](10)) AS [STime], 
	CAST( [js].[last_run_date] AS [VARCHAR](10)) AS [RunDate],  
	CAST( [js].[last_run_time] AS [VARCHAR](10)) AS [RunTime], 
	CAST( [js].[last_run_outcome] AS [VARCHAR](10)) AS [RunStat],  
	CAST( [sj].[enabled] AS [VARCHAR](10)) AS [Enable]
FROM  
	[msdb].[dbo].[sysjobschedules] AS [sjs] INNER JOIN [msdb].[dbo].[sysjobs] AS [sj]  
	ON [sjs].[job_id] = [sj].[job_id] INNER JOIN [msdb].[dbo].[sysjobservers] AS [js] 
	ON [sjs].[job_id] = [js].[job_id]  
WHERE  
		([sj].[name] = @jobName or @jobName = '')  


GO
/****** Object:  StoredProcedure [dbo].[Prc_AddToLogFile]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Proc [dbo].[Prc_AddToLogFile]
  (
   @UserName varchar(100) = '' ,
   @CardId int =0,
   @Opration varchar(50) = '',
   @Note varchar(100) = ''
  )
  
AS
 
   insert into LogFile
   (Username,UserGuid,ComputerName,CardId,Opration,Note)  
   Select
		@Username,
		(Select Top 1 Guid From Realty_Users where [LoginName] = @Username),
		Host_name(),
		@CardId,
		@Opration,
		@Note
	

GO
/****** Object:  StoredProcedure [dbo].[Prc_GeneralLedger]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Proc [dbo].[Prc_GeneralLedger]
(
	@AccountGuid [uniqueidentifier]= 'E93E2BEF-0FFF-425F-BF90-DFCCC9E3D958'
	,@MultiAccount Bit = 0
	,@CostGuid [uniqueidentifier]= 0x0
	,@ObverseAcGuid [uniqueidentifier] = 0x0
	,@CurrencyGuid [uniqueidentifier] = '11111111-C748-4B13-8B91-1E9B299DF1C1'
	,@CurrencyVal Float = 1
	,@Date1 DateTime = '2010-1-2'
	,@Date2 DateTime = '2016-12-31'
	,@BranchGuid [uniqueidentifier] = 0x0
	,@ShowIsCheck Bit = 1
	,@ShowIsNotCheck Bit = 1
	,@LikeNote varchar(256) = ''
	,@NotLikeNote varchar(256) = ''
	,@IsPosted Bit = 1
	,@IsNotPosted Bit = 1

	,@IsMark Bit = 1
	,@IsNotMark Bit = 1

	,@CkDate Bit = 1
	,@ShowEmptyBranchAccount Bit = 0
	,@ShowMainAccount bit = 0
	,@level int = 0
	,@ShowDebit Bit = 1
    ,@ShowCredit Bit = 1
    ,@ContainOldEntry Bit = 0
    ,@BeginEntryNo varchar(256) = ''
)
  
as
	Set nocount on

	Set @AccountGuid = IsNull(@AccountGuid,0x0)
	Set @MultiAccount = IsNull(@MultiAccount ,0)
	Set @CostGuid = ISNULL(@CostGuid,0x0)
	Set @ObverseAcGuid  = ISNULL(@ObverseAcGuid ,0x0)
	
	if ISNULL(@CurrencyGuid,0x0) = 0x0
	begin
		Select
			@CurrencyGuid = CurrencyGUID,
			@CurrencyVal = CurrencyVal
		From
			Account
		where
			Guid = @AccountGuid
	end
	
	Set @CurrencyVal = IsNull(@CurrencyVal ,1)
	
	if @Date1 is Null
	begin
		Set @Date1 = dbo.fnEncodeDate(DatePart(Year, GetDate()), 1, 1)
	end

	if @Date2 is Null
	begin
		Set @Date1 = dbo.fnEncodeDate(DatePart(Year, GetDate()), 12, 31)
	end

	Set @BranchGuid  = ISNULL(@BranchGuid,0x0)
	
	Set @ShowIsCheck = ISNULL(@ShowIsCheck, 1)
	
	Set @ShowIsNotCheck = ISNULL(@ShowIsNotCheck, 1)
	Set @LikeNote = ISNULL(@LikeNote, '')
	Set @NotLikeNote = ISNULL(@NotLikeNote, '')
	Set @IsPosted = ISNULL(@IsPosted,1)
	Set @IsNotPosted = ISNULL(@IsNotPosted,1)
	Set @IsMark  = ISNULL(@IsMark ,1)
	Set @IsNotMark  = ISNULL(@IsNotMark,1)
	Set @CkDate = ISNULL(@CkDate,1)
	Set @ShowEmptyBranchAccount  = ISNULL(@ShowEmptyBranchAccount,0)
	Set @ShowMainAccount = ISNULL(@ShowMainAccount,0)
	Set @level = ISNULL(@level,0)
	Set @ShowDebit = ISNULL(@ShowDebit,1)
    Set @ShowCredit = ISNULL(@ShowCredit,1)
    Set @ContainOldEntry = ISNULL(@ContainOldEntry,0)
    Set @BeginEntryNo = ISNULL(@BeginEntryNo,'')

	Declare @AccountCardNote varchar(255)
	
	Select @AccountCardNote = Note From Account where Guid = @AccountGuid
	
	Declare @Msg varchar(255)
	Set @Msg = dbo.SC('ÞÇÆãÉ ÇáÍÓÇÈÇÊ')
	exec PrcSetProgrss @Msg, 100, 0

	Select * Into #fnGetAccountList_GL from [dbo].[fnGetAccountList](@AccountGuid)
	
	Set @Msg = dbo.SC('ãÑÇßÒ ÇáßáÝÉ')
	exec PrcSetProgrss @Msg, 100, 5

	Select O.* 
	Into #fnGetCostList_GL 
	from 
		[dbo].[fnGetCostList](@CostGuid) C
		inner join [Cost] O on O.Guid = C.GUID
		
	
	
	Select Top 1
		@level = @level + IsNull([Level],0)
	From
		#fnGetAccountList_GL

	if @CurrencyVal = 0 
	Set @CurrencyVal = 1

	CREATE TABLE #Res
	(
		[Date] DATETIME
		,[AcCode] [varchar] (256) COLLATE SQL_Latin1_General_CP1_CI_AS
		,[AcName] [varchar] (256) COLLATE SQL_Latin1_General_CP1_CI_AS
		,[AcPath] [varchar] (256) COLLATE SQL_Latin1_General_CP1_CI_AS
		,[Note] [varchar] (256) COLLATE SQL_Latin1_General_CP1_CI_AS
		,[Debit] FLOAT
		,[Credit] FLOAT
		,[Cost] [varchar] (256) COLLATE SQL_Latin1_General_CP1_CI_AS
		,[CostCode] [varchar] (256) COLLATE SQL_Latin1_General_CP1_CI_AS
		,[Posted] bit
		,[Mark] bit
		,[Kind] INT
		,[Name] [varchar] (256) COLLATE SQL_Latin1_General_CP1_CI_AS
		,[ObverseAc] [varchar] (256) COLLATE SQL_Latin1_General_CP1_CI_AS
		,[EntryNo] int
		,[ParentKind] int
		,[OrgNumber] varchar(256)
		,[OrgName] varchar(256)
		,[Sort] INT
		,[SortNum] INT
		,[Guid] [uniqueidentifier]
		,[ItemGuid] [uniqueidentifier]
		,[AcGuid] [uniqueidentifier]
		,[ObverseAcGuid]  [uniqueidentifier]
		,[CostGuid]  [uniqueidentifier]
		,[AcNSons] int
		,[level] int
		,[Id] int identity(1,1)
	)


	Set @Msg = dbo.SC('ÇáÑÕíÏ ÇáÓÇÈÞ')
	exec PrcSetProgrss @Msg, 100, 10
	INSERT INTO #Res
	(
		[Date]
		,[AcCode]
		,[AcName]
		,[AcPath]
		,[Note]
		,[Debit]
		,[Credit]
		,[Cost]
		,[CostCode]
		,[Kind]
		,[Name]
		,[ObverseAc]
		,[EntryNo]
		,[Sort]
		,[SortNum]
		,[Guid]
		,[ItemGuid]
		,[AcGuid]
		,[ObverseAcGuid]
		,[CostGuid]
		,[level]
	)
	Select 
		Null as [Date]
		,'' as [AcountName]
		,''
		,'0'
		,dbo.sc('ÇáÑÕíÏ ÇáÓÇÈÞ') as [Note]
		,Isnull(Sum(case when [En].[D_Debit] <> 0 then [En].[D_Debit] * 
			Case when [En].[D_CurrencyGuid] = @CurrencyGuid then 1 
			else [En].[D_CurrencyVal] / @CurrencyVal end
		end),0) as [Debit]
		,Isnull(Sum(case when [En].[D_Credit] <> 0 then [En].[D_Credit] * 
			Case when [En].[D_CurrencyGuid] = @CurrencyGuid then 1 
			else [En].[D_CurrencyVal] / @CurrencyVal end
		end),0) as [Credit]
		,'' as [Cost]
		,'' as [CostCode]
		,0 as [Kind]
		,''
		,'' as [ObverseAc]
		,Null as [EntryNo]
		,0
		,0
		,0x0
		,0x0
		,0x0
		,0x0
		,0x0
		,0
	from 
		[vwOldYearEntry] En
		--[DEntry] [En]
		--inner Join [vwEntry] [M] on [En].[H_Guid] = [En].[ParentGuid]
		inner Join #fnGetAccountList_GL [Ac] on [Ac].[Guid] = [En].[D_AcGuid]
		inner join [vwAccount] [Ac2] on [Ac2].[Guid] = [En].[D_AcGuid]
		left Join #fnGetCostList_GL [Co2] on [Co2].[Guid] = [En].[D_CostGuid]
	where 
		([En].[H_Date] < @Date1 and @CkDate = 1)
		and ([en].[D_ObverseAcGuid] = @ObverseAcGuid or @ObverseAcGuid = 0x0)
		and ([Co2].[Guid] Is Not Null or @CostGuid = 0x0)
		and ([En].[H_BranchGuid] = @BranchGuid or @BranchGuid = 0x0)
		and ([En].[D_IsVisible] = 1 or [En].[D_CurrencyGuid] = @CurrencyGuid)
		and (isNull([En].[D_Note],'') Not Like '%'+@NotLikeNote+'%' or @NotLikeNote = '')
		and (isNull([En].[D_Note],'') Like '%'+@LikeNote+'%' )
		and (En.isOldEntry = 0 or @ContainOldEntry = 1)
		and (
				H_Number Not in (SELECT str from dbo.FnStrToTable (@BeginEntryNo) )
				or en.dbname <> DB_NAME()
			)
		and (
				(isNull([En].[H_IsPosted],0) = 1 and @IsPosted = 1)
				or (isNull([En].[H_IsPosted],0) = 0  and @IsNotPosted = 1)
			)
		and (
				(isNull([En].[Mark],0) = 1 and @IsMark = 1)
				or (isNull([En].[Mark],0) = 0  and @IsNotMark = 1)
			)
	

	--Select * from #res
	
	--Ýí ÍÇá ÚÏã æ ÌæÏ ÑÕíÏ ÓÇÈÞ
	if Not Exists(Select Top 1 * from #Res)
	INSERT INTO #Res
	(
		[Date]
		,[AcCode]
		,[AcName]
		,[AcPath]
		,[Note]
		,[Debit]
		,[Credit]
		,[Cost]
		,[CostCode]
		,[Kind]
		,[Name]
		,[ObverseAc]
		,[EntryNo]
		,[Sort]
		,[SortNum]
		,[Guid]
		,[ItemGuid]
		,[AcGuid]
		,[ObverseAcGuid]
		,[level]
	)
	Select 
		Null as [Date]
		,'' as [AcountName]
		,''
		,'0'
		,dbo.sc('ÇáÑÕíÏ ÇáÓÇÈÞ') as [Note]
		,0 as [Debit]
		,0 as [Credit]
		,'' as [Cost]
		,'' as [CostCode]
		,0 as [Kind]
		,''
		,'' as [ObverseAc]
		,Null as [EntryNo]
		,0
		,0
		,0x0
		,0x0
		,0x0
		,0x0
		,0


	Set @Msg = dbo.SC('ÇáÞíæÏ')
	exec PrcSetProgrss @Msg, 100, 20

	INSERT INTO #Res
	(
		[Date]
		,[AcCode]
		,[AcName]
		,[AcPath]
		,[Note]
		,[Debit]
		,[Credit]
		,[Cost]
		,[CostCode]
		,[Posted]
		,[Mark]
		,[Kind]
		,[Name]
		,[ObverseAc]
		,[EntryNo]
		,[ParentKind]
		,[Sort]
		,[SortNum]
		,[Guid]
		,[ItemGuid]
		,[AcGuid]
		,[ObverseAcGuid]
		,[AcNSons]
		,[level]
	)
	Select 
		[En].[H_Date]
		,[Ac2].[Code]
		,[Ac2].[Name] as [AcountName]
		,[Ac].[Path]
		,[En].[D_Note] as [Note]
		,Isnull(case when [En].[D_Debit] <> 0 then [En].[D_Debit] * 
			Case when [En].[D_CurrencyGuid] = @CurrencyGuid then 1 
			else [En].[D_CurrencyVal] / @CurrencyVal end
		end,0) as [Debit]
		,Isnull(case when [En].[D_Credit] <> 0 then [En].[D_Credit] * 
			Case when [En].[D_CurrencyGuid] = @CurrencyGuid then 1 
			else [En].[D_CurrencyVal] / @CurrencyVal end
		end,0) as [Credit]
		,[Co2].[Name] as [Cost]
		,[Co2].[Code] as [CostCode]
		,[En].[H_IsPosted]
		,[En].[Mark]
		,1 as [Kind]
		,[En].[H_Name]
		,'' as [ObverseAc]
		,[En].[H_Number] as [EntryNo]
		,H_ParentKind
		,1
		,[En].[H_Number]
		,[En].[H_Guid]
		,[En].[D_Guid] as [ItemGuid]
		,[Ac2].[Guid]
		,[En].[D_ObverseAcGuid]
		,0 as [AcNSons]
		,ac.[Level]
	from 
		--[DEntry] [En]
		--inner Join [vwEntry] [m] on [En].[H_Guid] = [En].[ParentGuid]
		[vwOldYearEntry] En
		inner Join #fnGetAccountList_GL [Ac] on [Ac].[Guid] = [En].[D_AcGuid]
		inner join [vwAccount] [Ac2] on [Ac2].[Guid] = [En].[D_AcGuid]
		left Join #fnGetCostList_GL [Co2] on [Co2].[Guid] = [En].[D_CostGuid]
	where 
		([En].[H_Date] Between @Date1 and @Date2 or @CkDate = 0)
		and ([en].[D_ObverseAcGuid] = @ObverseAcGuid or @ObverseAcGuid = 0x0)
		and ([Co2].[Guid] Is Not Null or @CostGuid = 0x0)
		and (isnull([En].[H_BranchGuid],0x0) = @BranchGuid or @BranchGuid = 0x0)
		and ([En].[D_IsVisible] = 1 or [En].[D_CurrencyGuid] = @CurrencyGuid)
		and (isNull([En].[D_Note],'') Not Like '%'+@NotLikeNote+'%' or @NotLikeNote = '')
		and (isNull([En].[D_Note],'') Like '%'+@LikeNote+'%' )
		and (
				([En].[H_IsPosted] = 1 and @IsPosted = 1)
				or ([En].[H_IsPosted] = 0  and @IsNotPosted = 1)
			)
		and (
				([En].[Mark] = 1 and @IsMark = 1)
				or (isNull([En].[Mark],0) = 0  and @IsNotMark = 1)
			)
		and (En.isOldEntry = 0 or @ContainOldEntry = 1)
		and (
				H_Number Not in (SELECT str from dbo.FnStrToTable (@BeginEntryNo) )
				or en.dbname <> DB_NAME()
			)
		and (
				([En].[H_IsPosted] = 1 and @IsPosted = 1)
				or ([En].[H_IsPosted] = 0  and @IsNotPosted = 1)
			)
			
	update #Res 
	Set 
		[ObverseAc] = [Ac3].[Code]+'-'+[Ac3].[Name]
	From
		#res R
		inner join [vwAccount] [Ac3] on [Ac3].[Guid] = [R].[ObverseAcGuid]

	--Select '3', GetDate()
	--Select * from #Res
	--return
	
	--ÑÞã ÇáÇÕá
	--ÇäãÇØ ÇáÓäÏÇÊ
	update #res 
	Set 
		OrgName = T.Name,
		OrgNumber = S.Number
	From
		#res R
		inner join Secondary_Entry S on R.Guid = S.Guid
		inner join EntryType T on T.Guid = S.TypeGuid
	where
		R.ParentKind = 8000

	--ÑÞã ÇáÇÕá
	--ÇáÞíÏ ÇáÍÓÇÈí
	update #res 
	Set 
		OrgName = T.Name,
		OrgNumber = E.Number
	From
		#res R
		inner join EntryDateDetail S on R.Guid = S.Guid
		inner join [EntryDate] [E] On [E].[Guid] = [S].[ParentGuid]
		inner join EntryDateType T on T.Guid = E.TypeGuid
	where
		R.ParentKind = 1


	--ÑÞã ÇáÇÕá
	--ÇáÔíßÇÊ
	update #res 
	Set 
		OrgName = T.typeName +' / '+ t.NO,
		OrgNumber = T.Number
	From
		#res R
		inner join LinkEntry_Checks F on F.[EntryGuid] = R.Guid
		inner join vwChecks T on T.Guid = F.[CheckGuid]
	where
		R.ParentKind in (1600, 1660, 1661, 1662, 1663, 1664)


	--ÑÞã ÇáÇÕá
	--ÚãáíÇÊ ÇáÓíßÇÊ
	update #res 
	Set 
		OrgName = T.typeName,
		OrgNumber = T.Number
	From
		#res R
		inner join ChecksPartialCollection F on F.[Guid] = R.Guid
		inner join vwChecks T on T.Guid = F.[CheckGuid]
	where
		R.ParentKind = 1670

	--ÑÞã ÇáÇÕá
	--ÚÞæÏ
	update #res 
	Set 
		OrgName = T.Name,
		OrgNumber = T.ContractNumber
	From
		#res R
		inner join vwAllContractGuid T on R.Guid = T.Guid
	where
		R.ParentKind in (2000, 1000, 1001, 1002, 1003,1004, 1005, 1006, 1007, 1008, 1009, 11004, 11005, 1800)
	
	--ÑÞã ÇáÇÕá
	--ÝæÇÊíÑ
	update #res 
	Set 
		OrgName = T.[BtName],
		OrgNumber = T.[BuNumber]
	From
		#res R
		inner join vwBill T on R.Guid = T.BuGuid
	where
		R.ParentKind = 22

	--ÑÞã ÇáÇÕá
	--ÚÞæÏ
	update #res 
	Set 
		OrgName = T.Name,
		OrgNumber = T.ContractNumber
	From
		#res R
		inner join LinkCe F on F.CeGuid = R.Guid
		inner join vwAllContractGuid T on R.Guid = T.Guid
	where
		R.ParentKind in (1100, 1101, 1102, 1103, 1104, 110004, 110005)

	--ÑÞã ÇáÇÕá
	--ÑÓæã ÇáÚÞæÏ
	update #res 
	Set 
		OrgName = T.Name,
		OrgNumber = T.ContractNumber
	From
		#res R
		inner join FlatContractFee F on F.Guid = R.Guid
		inner join vwAllContractGuid T on F.ParentGuid = T.Guid
	where
		R.ParentKind = 23

	--ÑÞã ÇáÇÕá
	--ÑÓæã ÇáÚÞæÏ
	update #res 
	Set 
		OrgName = T.Name,
		OrgNumber = T.ContractNumber
	From
		#res R
		inner join ParkingContractFee F on F.Guid = R.Guid
		inner join vwAllContractGuid T on F.ParentGuid = T.Guid
	where
		R.ParentKind = 24

	--ÑÞã ÇáÇÕá
	--ÑÓæã ÇáÚÞæÏ
	update #res 
	Set 
		OrgName = T.Name,
		OrgNumber = T.ContractNumber
	From
		#res R
		inner join LandContractFee F on F.Guid = R.Guid
		inner join vwAllContractGuid T on F.ParentGuid = T.Guid
	where
		R.ParentKind = 25

	--ÑÞã ÇáÇÕá
	--ÚÞæÏ ÇáÎÏãÇÊ
	update #res 
	Set 
		OrgName = T.TypeName,
		OrgNumber = T.Number
	From
		#res R
		inner join vwServicesContract T on R.Guid = T.Guid
	where
		R.ParentKind = 26

	--ÑÞã ÇáÇÕá
	--ÚÞæÏ
	update #res 
	Set 
		OrgName = T.TypeName,
		OrgNumber = T.Number
	From
		#res R
		inner join LinkCe F on F.CeGuid = R.Guid
		inner join vwServicesContract T on R.Guid = T.Guid
	where
		R.ParentKind = 1105


	--ÑÞã ÇáÇÕá
	--ÑÓæã ÇÊÍÇÏ ÇáãáÇß
	update #res 
	Set 
		OrgName = dbo.SC('ÑÓæã ÇÊÍÇÏ ÇáãáÇß'),
		OrgNumber = F.Number
	From
		#res R
		inner join OwnerUnionFee F on F.[Guid] = R.Guid
	where
		R.ParentKind = 160

	Set @Msg = dbo.SC('ÇáãÏÞÞ')
	exec PrcSetProgrss @Msg, 100, 30

	Delete #res
	FROM
		#Res [E]
		left join [RepCheck] [R] on [R].[ObjGuid] = [E].[ItemGuid] and [R].[IdReport] = 1000
	where
		(
		Case when [R].[ObjGuid] is null and [E].[Kind] = 1 then 0 
			 when [R].[ObjGuid] is not null and [E].[Kind] = 1 then 1 end  
		= 0 and @ShowIsNotCheck = 0)
		or 
		(
		Case when [R].[ObjGuid] is null and [E].[Kind] = 1 then 0 
			 when [R].[ObjGuid] is not null and [E].[Kind] = 1 then 1 end  
		= 1 and @ShowIsCheck = 0)

	--Select * from #Res
	
	Set @Msg = dbo.SC('ÑÕíÏ ÇáÍÑßÉ')
	exec PrcSetProgrss @Msg, 100, 35
	--Select '1', GetDate()
	INSERT INTO #Res
	(
		[Date]
		,[AcCode]
		,[AcName]
		,[AcPath]
		,[Note]
		,[Debit]
		,[Credit]
		,[Cost]
		,[CostCode]
		,[Kind]
		,[Name]
		,[ObverseAc]
		,[Sort]
		,[SortNum]
		,[Guid]
		,[ItemGuid]
	)
	SELECT
		Null
		,''
		,''
		,''
		,dbo.sc('ÑÕíÏ ÇáÍÑßÉ')
		,SUM([Debit])
		,SUM([Credit])
		,''
		,''
		,-1
		,''
		,''
		,2
		,0
		,0x0
		,0x0
	FROM
		#Res
	where
		[Sort] = 1

	Set @Msg = dbo.SC('ÇáÑÕíÏ ÇáäåÇÆí')
	exec PrcSetProgrss @Msg, 100, 40
	
	
	
	INSERT INTO #Res
	(
		[Date]
		,[AcCode]
		,[AcName]
		,[AcPath]
		,[Note]
		,[Debit]
		,[Credit]
		,[Cost]
		,[CostCode]
		,[Kind]
		,[Name]
		,[ObverseAc]
		,[Sort]
		,[SortNum]
		,[Guid]
		,[ItemGuid]
	)
	SELECT
		Null
		,''
		,''
		,''
		,dbo.sc('ÇáÑÕíÏ ÇáäåÇÆí')
		,SUM([Debit])
		,SUM([Credit])
		,''
		,''
		,-1
		,''
		,''
		,3
		,0
		,0x0
		,0x0
	FROM
		#Res
	where
		[Sort] <> 2

	Set @Msg = dbo.SC('ÇáÍÓÇÈÇÊ ÇáÑÆíÓíÉ')
	exec PrcSetProgrss @Msg, 100, 50

	if @ShowMainAccount = 1
 	insert into #Res
 	(
 		[AcCode]
 		,[AcName]
 		,[AcPath]
 		,[Debit]
 		,[Credit]
 		,[Sort]
 		,[AcGuid]
		,[AcNSons]
 	)
	Select
		[Ac].[Code]
		,[Ac].[Name]
		,[Ac].[Path]
		,0 as [Debit]
		,0 as [Credit]
		,4
		,[Ac].[Guid]
		,[Acn].[AcNSons]
	From
		#fnGetAccountList_GL [Ac]
 		left join [#Res] [R] on [R].[AcGuid] = [Ac].[Guid]
		left join (Select 
						Count(Number)as [AcNSons] 
						,[ParentGuid] 
					From 
						[Account] [SAc] 
					Group By
						[ParentGuid]					
				)[AcN] on [AcN].[ParentGuid] = [Ac].[Guid]
 	where
 		[R].[Guid] is Null

	--Select * from #Res
		
	Set @Msg = dbo.SC('1 ÇáÑÕíÏ')
	exec PrcSetProgrss @Msg, 100, 60

	Select 
		[R1].[AcGuid],
		[R1].[AcPath],
		Sum([R1].[Debit]) as [Debit],
		Sum([R1].[Credit]) as [Credit]
	Into #Sum_G1
	From
		#Res [R1]
	Group By
		[R1].[AcGuid],
		[R1].[AcPath]
	--Select '5', GetDate()
	
	--Select * from #Sum_G1
	--return

	Set @Msg = dbo.SC('ÇáÝåÇÑÓ')
	exec PrcSetProgrss @Msg, 100, 60

	CREATE INDEX IX_Sum_G1_AcPath ON #Sum_G1 (AcPath)
	CREATE INDEX IX_Res_AcPath ON #Res (AcPath)
	
	Set @Msg = dbo.SC('ÇáÑÕíÏ')
	exec PrcSetProgrss @Msg, 100, 65
	
	CREATE CLUSTERED INDEX #IXResacPath ON #Res([AcPath])	
	CREATE CLUSTERED INDEX #IXSum_GPath ON #Sum_G1([AcPath])	
	CREATE INDEX #IXSum_GAcGuid ON #Sum_G1([AcGuid])	
	CREATE INDEX #IXRescGuid ON #Res([AcGuid])	
	
	Select 
		[R2].[AcGuid],
		Sum([R1].[Debit]) as [Debit],
		Sum([R1].[Credit]) as [Credit]
	Into #Sum
	From
		#Res [R1]
		inner join #Sum_G1 [R2] on [R1].[AcPath] Like [R2].[AcPath] + '%'
	where 
		[R2].[AcPath] <> '' and [R2].[AcPath] <> '0'		
		and [R1].[AcPath] <> [R2].[AcPath]	
	Group By
		[R2].[AcGuid]

	Set @Msg = dbo.SC('ÇáÑÕíÏ 2')
	exec PrcSetProgrss @Msg, 100, 70

	Update #Res 
		Set [Debit] = [S].[Debit],
			[Credit] = [S].[Credit]
	From
		#Res [R]
		inner join [#Sum] [S] on [S].[AcGuid]  = [R].[AcGuid]


	if @ShowEmptyBranchAccount = 0
	Delete #Res where Debit = 0 and [Credit] = 0 and IsNull([Kind],1) <> 0


	Set @Msg = dbo.SC('ÇáãÓÊæì')
	exec PrcSetProgrss @Msg, 100, 75

--	Select id, * from #Res	Order By id
 	--ÇáãÓÊæì
 	delete from #Res
 	where ([level] >= @Level and @Level <> 0)

	Create TABLE #Res_G1 
	(
		[Date] DATETIME
		,[AcCode] [varchar] (256) COLLATE SQL_Latin1_General_CP1_CI_AS
		,[AcName] [varchar] (256) COLLATE SQL_Latin1_General_CP1_CI_AS
		,[AcPath] [varchar] (256) COLLATE SQL_Latin1_General_CP1_CI_AS
		,[Note] [varchar] (256) COLLATE SQL_Latin1_General_CP1_CI_AS
		,[Debit] FLOAT
		,[Credit] FLOAT
		,[RunTotal] FLOAT
		,[Cost] [varchar] (256) COLLATE SQL_Latin1_General_CP1_CI_AS
		,[CostCode] [varchar] (256) COLLATE SQL_Latin1_General_CP1_CI_AS
		,[Posted] bit
		,[Mark] bit
		,[Kind] INT
		,[Name] [varchar] (256) COLLATE SQL_Latin1_General_CP1_CI_AS
		,[ObverseAc] [varchar] (256) COLLATE SQL_Latin1_General_CP1_CI_AS
		,[EntryNo] int
		,[OrgNumber] varchar(256)
		,[OrgName] varchar(256)
		,[Sort] INT
		,[SortNum] INT
		,[Guid] [uniqueidentifier]
		,[ItemGuid] [uniqueidentifier]
		,[AcGuid] [uniqueidentifier]
		,[CostGuid] [uniqueidentifier]
		,[AcNSons] int
		,[Id] int identity(1,1)
	)

	Set @Msg = dbo.SC('ÇáäÊíÌÉ')
	exec PrcSetProgrss @Msg, 100, 80

	insert into #Res_G1
		([Date],[AcCode],[AcName],[AcPath], [Note], [Debit], [Credit], [Cost],[CostCode], [Posted] ,[Mark],[Kind], [Name], [ObverseAc], [EntryNo],[OrgNumber],[OrgName],[Sort], [SortNum], [Guid], [ItemGuid], [AcGuid], [AcNSons], [CostGuid])
	Select
		[Date], [AcCode], [AcName], [AcPath],[Note], [Debit], [Credit], [Cost],[CostCode],[Posted] ,[Mark],[Kind], [Name], [ObverseAc], [EntryNo],[OrgNumber],[OrgName],[Sort], [SortNum], [Guid], [ItemGuid], [AcGuid], [AcNSons], [CostGuid]
	From
		#Res
	Order By
		Case when Kind is Null then 0
			 when Kind = 1 then 1
			 when Kind = -1 then 2
		end,
		[Date],
		Case when [AcPath] = '' then 'ZZZZZZZZZZZZZZZZZ' else [AcPath]end , [Sort], [EntryNo], [SortNum]

	update #Res_G1 set Debit = 0 where Debit is Null
	update #Res_G1 set Credit = 0 where Credit is Null
	

	Create Index IDX_ResIX on #Res_G1 ([ID])
	
	Set @Msg = dbo.SC('ÇáÑÕíÏ áßá Þáã')
	exec PrcSetProgrss @Msg, 100, 90

	Declare @I int, @Cnt int, @Rt Float
	Set @Cnt = (Select MAX(Id) From #Res_G1)
	
	Set @Rt = 0
	Set @i = 0
	While @I < @Cnt
	begin
		Set @Rt = (Select [RunTotal] From #Res_G1 where Id = @i - 1)

		update #Res_G1 Set [RunTotal] = [Debit] - [Credit] + isNull(@Rt,0)
		where
			Id = @i
					
		Set @I = @i + 1
	end
	
	SELECT
		[E].*,

		Case when [R].[ObjGuid] is null and [E].[Kind] = 1 then 0 
			 when [R].[ObjGuid] is not null and [E].[Kind] = 1 then 1 end as [Check]
	into #Final
	FROM
		#Res_G1 [E]
		left join [RepCheck] [R] on [R].[ObjGuid] = [E].[ItemGuid] and [R].[IdReport] = 1000 and [R].[ObjGuid] <> 0x0
		

	UpDate #Final set [RunTotal] = [Debit]  - [Credit]
	where
		[Kind] = -1
	
	Set @Msg = dbo.SC('ÅäÊåì')
	exec PrcSetProgrss @Msg, 0, 0

	Select
		@AccountGuid as RepAccountGuid,
		
		@AccountCardNote as [AccountCardNote], 
		[AcCode]+'-'+[AcName] as [AcountName] ,
		* ,
		0 as Operation
	from 
		#Final
  	where	
 		([Debit] <> 0 and @ShowDebit = 1)
 		Or
 		([Credit] <> 0 and @ShowCredit = 1)
 		or Kind = 0
	Order By 
		[Id]

	if @MultiAccount = 0
	Select
		Ac.Code as AccountCode,
		Ac.Name as AccountName,
		(Select  [Debit] - [Credit] From #res where Sort = 3) as [Balance],
		@Date1 as [Date1],
		@Date2 as [Date2]
	From
		Account Ac
	where
		Guid = @AccountGuid


GO
/****** Object:  StoredProcedure [dbo].[Prc_GeneralLedgerCost]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Proc [dbo].[Prc_GeneralLedgerCost]
(
	@AccountGuid [uniqueidentifier]= 0x0
	,@BranchGuid uniqueidentifier = 0x0
	,@CostGuid [uniqueidentifier]= 'C1DC33AC-F73E-4C69-93BA-A8B25C4325C6'
	,@CurrencyGuid [uniqueidentifier] = 0x0
	,@CurrencyVal Float = 1
	,@IsPosted Bit = 1
	,@IsNotPosted Bit = 1
	,@CkDate Bit = 0
	,@Date1 DateTime = '1/1/2007'
	,@Date2 DateTime = '12/30/2008'
	,@Level int = 0
	,@ShowDebit Bit = 1
	,@ShowCredit Bit = 1
)
  
as
	--Set NoCount On
	Exec PrcInsertSC 'ÇáÑÕíÏ' 

	Select * Into #fnGetAccountList from [dbo].[fnGetAccountList](@AccountGuid)
	Select * Into [dbo].#fnGetCostList From [dbo].[fnGetCostList](@CostGuid)
	
	Select Top 1
		@level = @level + IsNull([Level],0)
	From
		[dbo].[#fnGetAccountList]

	if @CurrencyVal = 0 
	Set @CurrencyVal = 1
	
	CREATE TABLE #Res
	(
		[Date] DATETIME
		,[AccountName] [varchar] (256) COLLATE SQL_Latin1_General_CP1_CI_AS
		,[Note] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS
		,[Debit] FLOAT
		,[Credit] FLOAT
		,[Cost] [varchar] (256) COLLATE SQL_Latin1_General_CP1_CI_AS
		,[Kind] INT
		,[Name] [varchar] (256) COLLATE SQL_Latin1_General_CP1_CI_AS
		,Sort INT
		,[Guid] [uniqueidentifier]
		,[level] int
		,[Number] int
		,[Id] int identity(1,1)
	)

	

	INSERT INTO #Res
	(
		[Date]
		,[AccountName]
		,[Note]
		,[Debit]
		,[Credit]
		,[Cost]
		,[Kind]
		,[Name]
		,[Sort]
		,[level]
		,[Number]
		,[Guid]
	)
	Select 
		[m].[Date]
		,[Ac2].[Code]+'-'+[Ac2].[Name] as [AccountName]
		,'['+Cast([M].[Number] as Varchar(20) )+'] '+ [En].[Note] as [Note]
		,Isnull(case when [En].[Debit] <> 0 then [En].[Debit] * 
			Case when [En].[CurrencyGuid] = @CurrencyGuid then 1 
			else [En].[CurrencyVal] / @CurrencyVal end
		end,0) as [Debit]
		,Isnull(case when [En].[Credit] <> 0 then [En].[Credit] * 
			Case when [En].[CurrencyGuid] = @CurrencyGuid then 1 
			else [En].[CurrencyVal] / @CurrencyVal end
		end,0) as [Credit]
		,[Co2].[Code]+'-'+[Co2].[Name] as [Cost]
		,[M].[Kind]
		,[M].[Name]
		,1
		,Co.[Level]
		,m.Number
		,[M].[Guid]
	from 
		[DEntry] [En]
		inner Join [vwEntry] [m] on [M].[Guid] = [En].[ParentGuid]
		inner Join [dbo].[#fnGetAccountList] [Ac] on [Ac].[Guid] = [En].[AcGuid]
		inner join [Account] [Ac2] on [Ac2].[Guid] = [En].[AcGuid]
		inner Join [dbo].[#fnGetCostList] [Co] on [Co].[Guid] = [En].[CostGuid]
		inner join [Cost] [Co2] on [Co2].[Guid] = [Co].[Guid]
	where 
		([M].[Date] Between @Date1 and @Date2 or @CkDate = 0)
		and ([Co2].[Guid] Is Not Null or @CostGuid = 0x0)
		and ([Co].[Guid] Is Not Null)
		and ([M].[BranchGuid] = @BranchGuid or @BranchGuid = 0x0)
		and (
				([M].[IsPosted] = 1 and @IsPosted = 1)
				or ([M].[IsPosted] = 0  and @IsNotPosted = 1)
			)
	Order By 
		[M].[Date], M.Number, [AccountName]


	/*
	INSERT INTO #Res
	(
		[Date]
		,[AccountName]
		,[Note]
		,[Debit]
		,[Credit]
		,[Cost]
		,[Kind]
		,[Name]
		,[Sort]
		,[level]
		,[Guid]
	)
	SELECT
		Null
		,''
		,dbo.SC('ÇáÑÕíÏ')
		,SUM([Debit])
		,SUM([Credit])
		,0x0
		,-1
		,''
		,3
		,0
		,0x0
	FROM
		#Res
	where
		[Sort] <> 2
		*/

 	--ÇáãÓÊæì
 	delete from #Res
 	where ([level] >= @Level and @Level <> 0)

	SELECT 
		*,
		(	SELECT 
				isnull(Sum([Debit]),0) - isnull(SUM([Credit]),0)
			FROM 
				#Res D 
			WHERE 
				D.[ID] <= E.[ID] 
				and [Kind] <> -1 
				--and ([D].[Id] <> 1 or E.[ID] = 1 or [E].[Id] = (Select Max([Id]) From #Res))
		) AS [RunTotal]
	FROM
		#Res [E]
  	where	
 		([Debit] <> 0 and @ShowDebit = 1)
 		Or
 		([Credit] <> 0 and @ShowCredit = 1)
	Order By 
		[Sort], [Date], Number, [AccountName]

	SELECT
		dbo.SC('ÇáÑÕíÏ') as [Note]
		,SUM([Debit]) as [Debit]
		,SUM([Credit]) as [Credit]
		,SUM([Debit] - [Credit]) as [RunTotal]
	FROM
		#Res
	where [Sort] <> 2
	

GO
/****** Object:  StoredProcedure [dbo].[Prc_GeneralLedgerMultiAccount]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Proc [dbo].[Prc_GeneralLedgerMultiAccount]
(
	@AccountGuid [uniqueidentifier]= 'ADCE91EB-16AD-49DB-8F74-410DC81E3E1C'
	,@CostGuid [uniqueidentifier]= 0x0
	,@ObverseAcGuid [uniqueidentifier] = 0x0
	,@CurrencyGuid [uniqueidentifier] = '11111111-C748-4B13-8B91-1E9B299DF1C1'
	,@CurrencyVal Float = 1
	,@Date1 DateTime = '2010-1-2'
	,@Date2 DateTime = '2016-12-31'
	,@BranchGuid [uniqueidentifier] = 0x0
	,@ShowIsCheck Bit = 1
	,@ShowIsNotCheck Bit = 1
	,@LikeNote varchar(256) = ''
	,@NotLikeNote varchar(256) = ''
	,@IsPosted Bit = 1
	,@IsNotPosted Bit = 1

	,@IsMark Bit = 1
	,@IsNotMark Bit = 1

	,@CkDate Bit = 1
	,@ShowEmptyBranchAccount Bit = 0
	,@ShowMainAccount bit = 0
	,@level int = 0
	,@ShowDebit Bit = 1
    ,@ShowCredit Bit = 1
    ,@ContainOldEntry Bit = 0
    ,@BeginEntryNo varchar(256) = ''
)
  
as
	Set nocount on
	

	CREATE TABLE [dbo].[#MultiAccount]
	(
		[RepAccountGuid] [uniqueidentifier] NULL,
		[AccountCardNote] [varchar](255) NULL,
		[AcountName] [varchar](513) NULL,
		[Date] [datetime] NULL,
		[AcCode] [varchar](256) NULL,
		[AcName] [varchar](256) NULL,
		[AcPath] [varchar](256) NULL,
		[Note] [varchar](256) NULL,
		[Debit] [float] NULL,
		[Credit] [float] NULL,
		[RunTotal] [float] NULL,
		[Cost] [varchar](256) NULL,
		[CostCode] [varchar](256) NULL,
		[Posted] [bit] NULL,
		[Mark] [bit] NULL,
		[Kind] [int] NULL,
		[Name] [varchar](256) NULL,
		[ObverseAc] [varchar](256) NULL,
		[EntryNo] [int] NULL,
		[OrgNumber] [varchar](256) NULL,
		[OrgName] [varchar](256) NULL,
		[Sort] [int] NULL,
		[SortNum] [int] NULL,
		[Guid] [uniqueidentifier] NULL,
		[ItemGuid] [uniqueidentifier] NULL,
		[AcGuid] [uniqueidentifier] NULL,
		[CostGuid] [uniqueidentifier] NULL,
		[AcNSons] [int] NULL,
		[Id] [int] NOT NULL,
		[Check] [int] NULL,
		[Operation] [int] NOT NULL
	)
	
	Declare @MltAccountGuid uniqueidentifier
	DECLARE @cursor_Name CURSOR 
	Set @cursor_Name = CURSOR FAST_FORWARD FOR 

	Select Guid from [dbo].[fnGetAccountList](@AccountGuid)
	where
		Guid <> @AccountGuid
	OPEN @cursor_Name
	FETCH NEXT FROM @cursor_Name INTO @MltAccountGuid
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
		insert into [#MultiAccount]
		exec [Prc_GeneralLedger]
		@MltAccountGuid 
		,1
		,@CostGuid 
		,@ObverseAcGuid 
		,@CurrencyGuid 
		,@CurrencyVal 
		,@Date1 
		,@Date2 
		,@BranchGuid 
		,@ShowIsCheck 
		,@ShowIsNotCheck 
		,@LikeNote 
		,@NotLikeNote 
		,@IsPosted 
		,@IsNotPosted 
		,@IsMark 
		,@IsNotMark 
		,@CkDate 
		,@ShowEmptyBranchAccount 
		,@ShowMainAccount 
		,@level 
		,@ShowDebit 
		,@ShowCredit
		,@ContainOldEntry 
		,@BeginEntryNo 
	  
	  FETCH NEXT FROM @cursor_Name INTO @MltAccountGuid
	
	END
	
	CLOSE @cursor_Name
	DEALLOCATE @cursor_Name
	
	Select
		RepAccountGuid
	into #EmptyAccount
	From
		[#MultiAccount]
	Group by
		RepAccountGuid
	having 
		COUNT(*) = 1
	
	Delete [#MultiAccount]
	From
		[#MultiAccount] M
		inner join #EmptyAccount E on E.RepAccountGuid = m.RepAccountGuid
		
	Select 
		Ac.Code as AccountCode,
		Ac.Name as AccountName,
		@Date1 as [Date1],
		@Date2 as [Date2],
		 M.id,
		M.*
	from 
		[#MultiAccount]	M
		inner join Account ac on Ac.Guid = M.RepAccountGuid
	Order by
		ac.Code, M.id

	Select
		Ac.Code as AccountCode,
		Ac.Name as AccountName,
		0 as [Balance],
		@Date1 as [Date1],
		@Date2 as [Date2]
	From
		Account Ac
	where
		Guid = @AccountGuid
	


GO
/****** Object:  StoredProcedure [dbo].[Prc_GetLogFile]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Proc [dbo].[Prc_GetLogFile]
(
 @UserName varchar(250) = ''
 ,@ComputerName varchar(250) = ''
 ,@Date1 dateTime ='8/10/2005'
 ,@Date2 dateTime ='12/30/1899'
)
  
as

	select 
		* 
	from 
		[LogFile]
	where 
		([UserName]=@username or @UserName = '')
		and	(ComputerName = @ComputerName or @ComputerName = '')		
		and	(DBO.fnDateOnly(Odate) Between @date1 and @date2)
	Order by 
		[Odate] desc



GO
/****** Object:  StoredProcedure [dbo].[Prc_sp_Who]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Proc [dbo].[Prc_sp_Who]
  
as
	Select 
		p.hostName,
		p.nt_username as loginname,
		p.login_time,
		p.Spid,
		p.Status,
		R.LoginName as UserName,
		p.cmd,
		Case when p.Spid = @@SPID then 1 else 0 end as [CurrentSession]
	from 
		master..sysprocesses P
		inner join master..sysDataBases d on p.[dbid] = d.[dbid]
		inner join [CurrentUsers] U on U.Spid = P.Spid
		inner join [Realty_Users] R on R.Guid = U.UserGuid
	where
		d.name = DB_NAME()
		and p.spid <> @@spid	
	Order By
		p.Spid

GO
/****** Object:  StoredProcedure [dbo].[PrcAccountBalance]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcAccountBalance]
(
	@Guid uniqueidentifier = 0x0
)
  
as
	Select 
		Sum([Debit]* [CurrencyVal] - [Credit]*[CurrencyVal]) as [Balance]
	From 
		[DEntry]
	where
		[ACGuid] = @Guid Or @Guid = 0x0

GO
/****** Object:  StoredProcedure [dbo].[PrcAccountFavorite]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcAccountFavorite]
(
	@UserGuid uniqueidentifier = Null
)
  as
	if @UserGuid is Null
	Set @UserGuid = (SELECT Top 1 UserGuid FROM [AccountFavoriteConfig])

	Declare @AccountGuid uniqueidentifier, @I int
	
	Declare @CurrencyGuid uniqueidentifier,
			@CurrencyVal Float
	Set @CurrencyVal = (Select Top 1 Value From DMD_const where VName = 'AccountFavoriteConfigCurrencyVal')
	Set @CurrencyGuid = (Select Top 1 Value From DMD_const where VName = 'AccountFavoriteConfigCurrency')
	
	Create Table #AccountFavoriteTmp
	(
		[Number] int,
		[Code] Varchar(256),
		[Name] Varchar(256),
		[Debit] Float,
		[Credit] Float,
		[Balance]  Float,
		[Currency] Varchar(256),
		[Guid] uniqueidentifier
	)
	
	Create Table #fnGetAccountList
	(
		[Guid] uniqueidentifier,
		[Code] varchar(255),
		[Name] varchar(255),
		[Level] int,
		[Path] varchar(255)
	)	
	
	DECLARE @cursor_Name CURSOR 
	Set @cursor_Name = CURSOR FAST_FORWARD FOR 

	SELECT AccountGuid
	FROM [AccountFavoriteConfig]
	where UserGuid = @UserGuid
	--and accountGuid = '1496D712-1409-448A-B9C8-D248E304F36D'
	Order By Number
	
	OPEN @cursor_Name
	FETCH NEXT FROM @cursor_Name INTO @AccountGuid
	
	Set @I = 0
	WHILE @@FETCH_STATUS = 0
	BEGIN
		Select
			@CurrencyVal = CurrencyVal,
			@CurrencyGuid = CurrencyGuid
		From
			Account
		where
			Guid = @AccountGuid
			
		--Set @CurrencyVal = (Select Top 1 Value From DMD_const where VName = 'AccountFavoriteConfigCurrencyVal')
		--Set @CurrencyGuid = (Select Top 1 Value From DMD_const where VName = 'AccountFavoriteConfigCurrency')
		
		Truncate Table #fnGetAccountList
		insert into #fnGetAccountList
		Select * from dbo.fnGetAccountList(@AccountGuid)

		Set @I = @I +1
		insert into #AccountFavoriteTmp
		Select 
			@I,
			(Select Code from Account where Guid = @AccountGuid ) as Code,
			(Select Name from vwAccount where Guid = @AccountGuid ) as Name,
			SUM(Isnull(case when [En].[Debit] <> 0 then [En].[Debit] * 
			Case when [En].[CurrencyGuid] = @CurrencyGuid then 1 
			else [En].[CurrencyVal] / @CurrencyVal end
			end,0)) as [Debit],
			SUM(Isnull(case when [En].[Credit] <> 0 then [En].[Credit] * 
			Case when [En].[CurrencyGuid] = @CurrencyGuid then 1 
			else [En].[CurrencyVal] / @CurrencyVal end
			end,0)) as [Credit],
			SUM(Isnull(case when [En].[Debit] <> 0 then [En].[Debit] * 
			Case when [En].[CurrencyGuid] = @CurrencyGuid then 1 
			else [En].[CurrencyVal] / @CurrencyVal end
			end,0)
			-
			Isnull(case when [En].[Credit] <> 0 then [En].[Credit] * 
			Case when [En].[CurrencyGuid] = @CurrencyGuid then 1 
			else [En].[CurrencyVal] / @CurrencyVal end
			end,0)) as [Balance],
			(Select Code from vwCurrency where Guid = @CurrencyGuid ) as Currency,
			@AccountGuid
		From 
			DEntry en 
			inner join #fnGetAccountList L on L.GUID = en.AcGuid 
		
		--Group By
		--	Ac.Guid,
		--	Ac.Code ,Ac.Name
		--Select * from #AccountFavoriteTmp
		
	  FETCH NEXT FROM @cursor_Name INTO @AccountGuid
	END
	
	CLOSE @cursor_Name
	DEALLOCATE @cursor_Name
			
	Select * from #AccountFavoriteTmp Order By Number

GO
/****** Object:  StoredProcedure [dbo].[PrcAccountsChart]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcAccountsChart]
(
	@AccountGuid uniqueidentifier = '3D2B933E-C93D-49E8-A9C0-8DC4FAA91850',
	@CostGuid [uniqueidentifier]= 0x0,
	@CurrencyGuid [uniqueidentifier] = '11111111-C748-4B13-8B91-1E9B299DF1C1',
	@CurrencyVal Float = 1,
	@CalcKind int = 0,
	@InstType int = 1, --0  Day 1 w 2 m
	@Date1 DateTime = '1/1/2007',
	@Date2 DateTime = '1/1/2018'
)
  
as
	Select * Into #fnGetAccountList_GL from [dbo].[fnGetAccountList](@AccountGuid)

	Select O.* 
	Into #fnGetCostList_GL 
	from 
		[dbo].[fnGetCostList](@CostGuid) C
		inner join [Cost] O on O.Guid = C.GUID
	
	Select 
		Case 
			when @InstType = 0 then dbo.FnFormatNumber( Datepart(day,[H_Date]),2)+'-'+dbo.FnFormatNumber( Datepart(Month,[H_Date]),2)
			when @InstType = 1 then dbo.FnFormatNumber( Datepart(wk,[H_Date]),2)
			when @InstType = 2 then dbo.FnFormatNumber( Datepart(Month,[H_Date]),2)
		end as [Date],
		
		Case 
			when @CalcKind = 0 then 
			Isnull(Sum(case when ([En].[D_Debit] - [En].[D_Credit]) <> 0 then ([En].[D_Debit] - [En].[D_Credit]) * 
				Case when [En].[D_CurrencyGuid] = @CurrencyGuid then 1 
				else [En].[D_CurrencyVal] / @CurrencyVal end
			end),0) 

			when @CalcKind = 1 then 
			Isnull(Sum(case when ([En].[D_Credit] - [En].[D_Debit]) <> 0 then ([En].[D_Credit] - [En].[D_Debit]) * 
				Case when [En].[D_CurrencyGuid] = @CurrencyGuid then 1 
				else [En].[D_CurrencyVal] / @CurrencyVal end
			end),0) 
		end as Balance
	From 
		[vwOldYearEntry] En
		inner Join #fnGetAccountList_GL [Ac] on [Ac].[Guid] = [En].[D_AcGuid]
		left Join #fnGetCostList_GL [Co2] on [Co2].[Guid] = [En].[D_CostGuid]
	where
		(H_Date between @Date1 and @Date2)
		and ([Co2].[Guid] Is Not Null or @CostGuid = 0x0)
	Group by
		Case 
			when @InstType = 0 then dbo.FnFormatNumber( Datepart(day,[H_Date]),2)+'-'+dbo.FnFormatNumber( Datepart(Month,[H_Date]),2)
			when @InstType = 1 then dbo.FnFormatNumber( Datepart(wk,[H_Date]),2)
			when @InstType = 2 then dbo.FnFormatNumber( Datepart(Month,[H_Date]),2)
		end
	order by
		Case 
			when @InstType = 0 then dbo.FnFormatNumber( Datepart(day,[H_Date]),2)+'-'+dbo.FnFormatNumber( Datepart(Month,[H_Date]),2)
			when @InstType = 1 then dbo.FnFormatNumber( Datepart(wk,[H_Date]),2)
			when @InstType = 2 then dbo.FnFormatNumber( Datepart(Month,[H_Date]),2)
		end

GO
/****** Object:  StoredProcedure [dbo].[PrcAddBackupJob]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[PrcAddBackupJob] 
	@JobName [varchar](256), 
	@JobType [int], 
	@JobTime [int], 
	@Jobday [int], 
	@JobStartDate [int], 
	@DBName [varchar](256), 
	@Dir [varchar](256), 
	@Dir2 [varchar](256), 
	@BkNum [INT], 
	@Occurance		[INT]= 1   , --1 Once Only, 2 Every  
	@HoursNumber [INT] = 1--Number of hours    
  
As 
	SET NOCOUNT ON 
	DECLARE @Command [VARCHAR]( 255) 
	
	SELECT @Command = 'Execute '+DB_NAME()+'.dbo.[PrcDoBackupJob] @JobType = '+  
						CAST(@JobType AS [Char](10))+  
							', @DBName = '''+  @DBName  
							+  ''', @DirName = ''' + @Dir  
							+  ''', @BkNum = ' +CAST(@BkNum AS [VarChar](10))  
	EXEC [dbo].[prcAddJob] 	@JobName, @JobType, @JobTime, @Jobday, @JobStartDate, @DBName, 
							@Command,@Occurance,@HoursNumber   

	if @Dir2 = '' return
							
	Set @JobName = @JobName +'_2'	
	SELECT @Command = 'Execute '+DB_NAME()+'.dbo.[PrcDoBackupJob] @JobType = '+  
						CAST(@JobType AS [Char](10))+  
							', @DBName = '''+  @DBName  
							+  ''', @DirName = ''' + @Dir2
							+  ''', @BkNum = ' +CAST(@BkNum AS [VarChar](10))  
	EXEC [dbo].[prcAddJob] 	@JobName, @JobType, @JobTime, @Jobday, @JobStartDate, @DBName, 
							@Command,@Occurance,@HoursNumber   
							

GO
/****** Object:  StoredProcedure [dbo].[PrcAddDate]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcAddDate]
(
	@Kind varchar(2) = 'm', 
	@inc int = 0, 
	@Date Datetime = '2/10/2016'
)
--RETURNS datetime
  
AS
--BEGIN
	Declare @RDate Datetime

	Declare @Hijridate int
	Select 
		@Hijridate = Value
	From
		dmd_Const where vName = 'Hijridate'

	if @Hijridate = 1
	begin
		if LOWER(@Kind) = 'm'
		Set @RDate = dbo.fnIncMonthHijriDate(@Date, @inc)
		if LOWER(@Kind) = 'y'
		Set @RDate = dbo.fnIncYearHijriDate(@Date, @inc)
	end
	else
	begin
		if LOWER(@Kind) = 'm'
		Set @RDate = dateadd(m ,@inc, @Date)
		if LOWER(@Kind) = 'y'
		Set @RDate = dateadd(y ,@inc, @Date)
	end

	if LOWER(@Kind) = 'wk'
	begin
		Set @RDate = dateadd(wk ,@inc, @Date)
	end
		
	Select @RDate, LOWER(@Kind)

--END

GO
/****** Object:  StoredProcedure [dbo].[prcAddDEntry]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create procedure [dbo].[prcAddDEntry]
(
	@ParentGuid uniqueidentifier,
	@DetailNum int,
	@AccountGuid uniqueidentifier,
	@Debit float,
	@Credit float,
	@CurrencyGuid uniqueidentifier,
	@CurrencyVal float,
	@CostGuid uniqueidentifier,
	@ObverseAcGuid uniqueidentifier,
	@EntryNote varchar(255)
)
as
	Insert into [DEntry]
	([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
	Select
		@parentGuid,
		@DetailNum,
		@AccountGuid,
		@Debit,
		@Credit,
		@CurrencyGuid,
		@CurrencyVal,
		@CostGuid,
		@ObverseAcGuid,
		@EntryNote

GO
/****** Object:  StoredProcedure [dbo].[prcAddFld]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[prcAddFld] 
(
	@Table [VARCHAR](128), 
	@Column [VARCHAR](128), 
	@Type [VARCHAR](300) 
)
  
AS 
	SET @Table = REPLACE(REPLACE(@Table, ']', ''), '[', '') 
	SET @Column = REPLACE(REPLACE(@Column, ']', ''), '[', '') 

	-- assure that the table exists, and the column doesn't 
	IF [dbo].[fnObjectExists](@Table + '.' + @Column) <> 0 OR [dbo].[fnObjectExists](@Table) = 0 
	begin
		Print 'Field is exists  '+@Table +'.'+@Column 
		RETURN 0 
	end
	DECLARE @Sql AS [VARCHAR](500) 

	SET @Sql = 'ALTER TABLE [' + @Table + '] ADD [' + @Column + '] ' + @Type 
	EXEC( @Sql) 
	RETURN 1 


GO
/****** Object:  StoredProcedure [dbo].[PrcAddIncAccountDetail]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcAddIncAccountDetail]
(
	@ParentGuid uniqueidentifier = 'D5189137-88E3-457F-9CF4-1579E1E7983D',
	@Guid uniqueidentifier = 'DF3F6DCD-17B0-46D9-9893-84CD2A0EFB18'
)
  
AS
	Set NoCount on
	Declare 
		@S Varchar(256),
		@P_IncName Varchar(256),
		@P_IncNumber int
		
	Set @P_IncName = Null
	
	Select
		@P_IncName = I.Name,
		@P_IncNumber = I.Number
	From
		dbo.[fnGetAccountList] (@Guid) Ac
		inner join [IncAccountDetailAc] D on Ac.Guid = D.AccountGuid
		inner join [IncAccount] I on I.Guid = D.ParentGuid
	where
		D.parentGuid <> @ParentGuid

	if @P_IncName is Not Null
	begin
		Set @S = dbo.sc('ÇáÍÓÇÈ Çæ ÇÍÏ ÇÈäÇÆå ãÓÊÎÏã Ýí ÈØÇÞÉ ÊÕäíÝ ')+' : '+@P_IncName+'. '+dbo.sc('ÑÞã ÇáÈØÇÞÉ')+' '+Cast( @P_IncNumber as varchar(10))
		RAISERROR (@s, 16, 1)
		ROLLBACK TRANSACTION
		return
	end
		

	/*
	--ÇÈ ÇáÍÓÇÈ ãÓÊÎÏã
	Set @P_IncName = Null
	
	Select
		@P_IncName = I.Name,
		@P_IncNumber = I.Number
	From
		dbo.[fnGetAccountParents] (@Guid) Ac
		inner join [IncAccountDetailAc] D on Ac.Guid = D.AccountGuid
		inner join [IncAccount] I on I.Guid = D.ParentGuid
	where
		D.parentGuid <> @ParentGuid

	if @P_IncName is Not Null
	begin
		Set @S = dbo.sc('ÇÈ ÇáÍÓÇÈ ãÓÊÎÏã Ýí ÈØÇÞÉ ÊÕäíÝ ')+' : '+@P_IncName+'. '+dbo.sc('ÑÞã ÇáÈØÇÞÉ')+' '+Cast( @P_IncNumber as varchar(10))
		RAISERROR (@s, 16, 1)
		ROLLBACK TRANSACTION
		return
	end
	*/

	insert into IncAccountDetailAc
	([Number],[ParentGuid] ,[AccountGuid])
	Select 
		(Select IsNull(Max(Number),0)+1 From IncAccountDetailAc where ParentGuid=@ParentGuid),
		@ParentGuid,
		Ac.Guid
	From
		Account Ac
		left join [IncAccountDetailAc] D on Ac.Guid = D.AccountGuid
	where
		D.parentGuid is Null
		and Ac.Guid = @Guid
		
	exec PrcGetIncAccountListDetail
	
	Select 
		*
	From 
		[vwIncAccountDetailAc]
	where
		ParentGuid = @ParentGuid
	Order by 
		AccountCode
		

GO
/****** Object:  StoredProcedure [dbo].[prcAddJob]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[prcAddJob]  
(
	@JobName		[VARCHAR]( 256), --name of job 
	@JobType		[INT], -- type of job 4_ d, 8_ w, 16_ m 
	@JobTime		[INT],  
	@Jobday			[INT],  
	@JobStartDate	[INT],  
	@DBName			[VARCHAR]( 256),  
	@Command		[VARCHAR]( 8000), 
	@Occurance		[INT] = 2, --1 Once Only, 2 Every  
	@HoursNumber [INT]  = 250--Number of hours  
)
  
AS 
	/* 
		this procedure Add Job To database 
		this job Execute the Command 
	*/ 
		SET NOCOUNT ON 
		 
		SET XACT_ABORT ON  
		BEGIN TRANSACTION  
		DECLARE @JobID [BINARY](16)  
		DECLARE @ReturnCode [INT]  
		DECLARE @RetryNum [INT]  
		DECLARE @RetryInter [INT]  
		IF(@JobType = 4)  
		BEGIN 
			SELECT @RetryNum = 23  
			SELECT @RetryInter = 60  
		END ELSE BEGIN  
			SELECT @RetryNum = 4  
			SELECT @RetryInter = 1440  
		END  
		SET @ReturnCode = 0 
	--	IF (SELECT COUNT(*) FROM msdb.dbo.syscategories WHERE name = N'[Uncategorized (Local)]') < 1  
		IF NOT EXISTS(SELECT * FROM [msdb].[dbo].[syscategories] WHERE [name] = N'[Uncategorized (Local)]') 
			EXECUTE [msdb].[dbo].[sp_add_category] @name = N'[Uncategorized (Local)]' 
		-- Delete the job with the same name (if it exists)  
		SELECT @JobID = [job_id] FROM [msdb].[dbo].[sysjobs] WHERE ([name] = @JobName) 
		IF (@JobID IS NOT NULL)  
		BEGIN -- Check if the job is a multi-server job  
			IF (EXISTS (SELECT * FROM [msdb].[dbo].[sysjobservers] WHERE ([job_id] = @JobID) AND ([server_id] <> 0)))  
			BEGIN -- There is, so abort the script  
				RAISERROR (N'Unable to import job _ '' since there is already a multi-server job with this name.', 16, 1)  
				IF (@@TRANCOUNT > 0) 
					ROLLBACK TRANSACTION 
				return
			END  
			ELSE -- Delete the [local] job  
				EXECUTE [msdb].[dbo].[sp_delete_job] @job_name = @JobName  
			SELECT @JobID = NULL  
		END 
		-- Add the job  
		EXECUTE @ReturnCode = [msdb].[dbo].[sp_add_job] @job_id = @JobID OUTPUT , @job_name = @JobName , @owner_login_name = NULL, @description = N'No description available.', @category_name = N'[Uncategorized (Local)]', @enabled = 1, @notify_level_email = 0, @notify_level_page = 0, @notify_level_netsend = 0, @notify_level_eventlog = 2, @delete_level= 0  
		IF (@@ERROR <> 0 OR @ReturnCode <> 0) 
		--GOTO QuitWithRollback 
		begin
			IF (@@TRANCOUNT > 0) 
			ROLLBACK TRANSACTION 
			return
		end

		-- Add the job steps  
		EXECUTE @ReturnCode = [msdb].[dbo].[sp_add_jobstep] @job_id = @JobID, @step_id = 1, @step_name = N'Step 1', @command = @Command, @database_name = @DBName, @server = N'', @database_user_name = N'', @subsystem = N'TSQL', @cmdexec_success_code = 0, @flags = 0, @retry_attempts = @RetryNum, @retry_interval = @RetryInter, @output_file_name = N'', @on_success_step_id = 0, @on_success_action = 1, @on_fail_step_id = 0, @on_fail_action = 2  
		IF (@@ERROR <> 0 OR @ReturnCode <> 0) 
		--GOTO QuitWithRollback 
		begin
			IF (@@TRANCOUNT > 0) 
			ROLLBACK TRANSACTION 
			return
		end

		EXECUTE @ReturnCode = [msdb].[dbo].[sp_update_job] @job_id = @JobID, @start_step_id = 1 
		IF (@@ERROR <> 0 OR @ReturnCode <> 0) --GOTO QuitWithRollback 
		begin
			IF (@@TRANCOUNT > 0) 
			ROLLBACK TRANSACTION 
			return
		end
		-- Add the job schedules  
		IF (@Occurance = 1 ) 
		BEGIN  
		EXECUTE @ReturnCode = [msdb].[dbo].[sp_add_jobschedule] @job_id = @JobID, @name = N'Schedule 1', @enabled = 1, @freq_type = @JobType , @active_start_date = @JobStartDate, @active_start_time = @JobTime, @freq_interval = @Jobday, @freq_subday_type = 1, @freq_subday_interval = 0, @freq_relative_interval = 0, @freq_recurrence_factor = 1, @active_end_date = 99991231, @active_end_time = 235959 
		IF (@@ERROR <> 0 OR @ReturnCode <> 0) --GOTO QuitWithRollback 
		begin
			IF (@@TRANCOUNT > 0) 
			ROLLBACK TRANSACTION 
			return
		end
		END  
		 
		IF (@Occurance = 2) 
		BEGIN 
		EXECUTE @ReturnCode = [msdb].[dbo].[sp_add_jobschedule] @job_id = @JobID, @name = N'Schedule 1', @enabled = 1, @freq_type = @JobType , @active_start_date = @JobStartDate, @active_start_time = @JobTime, @freq_interval = @Jobday, @freq_subday_type = 8, @freq_subday_interval = @HoursNumber, @freq_relative_interval = 0, @freq_recurrence_factor = 1, @active_end_date = 99991231, @active_end_time = 235959  
		IF (@@ERROR <> 0 OR @ReturnCode <> 0) --GOTO QuitWithRollback  
		begin
			IF (@@TRANCOUNT > 0) 
			ROLLBACK TRANSACTION 
			return
		end
		END  
		-- Add the Target Servers  
		EXECUTE @ReturnCode = [msdb].[dbo].[sp_add_jobserver] @job_id = @JobID, @server_name = N'(local)' 
		IF (@@ERROR <> 0 OR @ReturnCode <> 0) --GOTO QuitWithRollback 
		begin
			IF (@@TRANCOUNT > 0) 
			ROLLBACK TRANSACTION 
			return
		end
		COMMIT TRANSACTION  
		RETURN 
		


GO
/****** Object:  StoredProcedure [dbo].[PrcAddTextTofile]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create Procedure [dbo].[PrcAddTextTofile]
(
	@Txt varchar(8000) = 'ãÍãÏ'
)
as
	if isNull(@Txt,'') = '' return
	Declare @t varchar(8000)

	Declare @FileName varchar(255) Set @FileName = 'E:\log.sql'

	Set @t = '
	ECHO OFF
	REM change CHCP to UTF-8
	CHCP 65001
	ECHO ON'
	
	--exec xp_cmdshell @t

	Set @t = '
	echo '+IsNull(@Txt,'')+''
	
	Set @t = @t+ ' >> E:\log.sql' 
	
	print @t
	exec xp_cmdshell @t

GO
/****** Object:  StoredProcedure [dbo].[PrcAddUser]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcAddUser]
(
	@UserName Varchar(256) =''
)   as
	if IsNull(@UserName,'') = ''
	Select Top 1 @UserName = LoginName From Realty_Users where bAdmin = 1
	
	Delete [CurrentUsers]
	where	
		[spid] = @@Spid

	insert into [CurrentUsers]
	(
		[UserGuid],
		[Spid],
		[SecLvl],
		[Admin]
	)
	Select
		[Guid],
		@@Spid,
		[UserSecLvl],
		[BAdmin]
	from
		[Realty_Users]
	where
		[LoginName] = @UserName

GO
/****** Object:  StoredProcedure [dbo].[PrcAlarmCheckReturn]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcAlarmCheckReturn]
  
as
	Select
		COUNT(*) as [Count]
	From
		Checks C
		inner join ChecksCollection L on [L].[CheckGuid] = C.Guid 
	where
		[L].[kind] = 3
		and isNull([L].[Finished],0) = 0

GO
/****** Object:  StoredProcedure [dbo].[PrcAlarmCheckSMS]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcAlarmCheckSMS]
(
	@SMSText varchar(256) = '[A]'
)
  
as
	Set NoCount on

	Select 
		C.AccountName as [CustName],
		(Select Top 1 Mobile from Customer where AcGuid = C.Account) as [CustMobile],
		[T].[CustArName],
		[T].[CustLtnName],
		[T].[BuildingArName],
		[T].[BuildingltnName],
		[T].[FlatNo],
		[C].[NO],
		t.ContractNo,
		C.DueDate,
		C.date,
		C.Value,
		C.endDueDate,
		C.BankName,
		C.Guid,
		@SMSText as [SMSText]
	into #CheckSMS
	From
		[vwChecks] [C]
		left join vwAllContract T on T.Guid = C.ContractGuid
--		left join [ChecksCollection] L on L.CheckGuid = C.Guid and L.Kind = 1
--		left join [ChecksCollection] Rt on RT.CheckGuid = C.Guid and Rt.Kind = 3
		inner join [Resource] R on R.Guid = C.Guid and R.kind = 3700 and R.Spid = @@Spid
	
	update #CheckSMS Set [SMSText] = REPLACE([SMSText], '[A]', IsNull([CustArName],''))
	update #CheckSMS Set [SMSText] = REPLACE([SMSText], '[B]', IsNull([CustLtnName],''))
	update #CheckSMS Set [SMSText] = REPLACE([SMSText], '[T]', IsNull([BuildingArName],''))
	update #CheckSMS Set [SMSText] = REPLACE([SMSText], '[R]', IsNull([BuildingltnName],''))
	update #CheckSMS Set [SMSText] = REPLACE([SMSText], '[V]', IsNull([Value],''))
	update #CheckSMS Set [SMSText] = REPLACE([SMSText], '[C]', IsNull([FlatNo],''))
	update #CheckSMS Set [SMSText] = REPLACE([SMSText], '[D]', IsNull([NO],''))
	update #CheckSMS Set [SMSText] = REPLACE([SMSText], '[E]',IsNull( ContractNo,''))
	update #CheckSMS Set [SMSText] = REPLACE([SMSText], '[F]',IsNull( dbo.fndate(DueDate),''))
	update #CheckSMS Set [SMSText] = REPLACE([SMSText], '[G]',IsNull( dbo.fndate(Date),''))
	update #CheckSMS Set [SMSText] = REPLACE([SMSText], '[H]',IsNull( dbo.fndate(endDueDate),''))
	update #CheckSMS Set [SMSText] = REPLACE([SMSText], '[J]',IsNull( BankName,''))
	
	Select * from #CheckSMS
	order By
		duedate
	


GO
/****** Object:  StoredProcedure [dbo].[PrcAlarmEndLease]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcAlarmEndLease]
(	
	@Day Int = 30,
	@All bit = 1
)
  
as
	Declare @Check Bit,
			@NotCheck Bit
	Set @Check = 1
	Set @NotCheck = 0

	Select 
		[ContractNo],
		[B].[Name] as [BuildingName],
		[B].[ltnName] as [BuildingltnName],
		[B].[ArName] as [BuildingArName],
		Case when Isnull([A].[No], '') <> '' then [A].[No] else [S].[No] end as [No],
		Case when Isnull([A].[No], '') <> '' then dbo.SC('ÔÞÉ') else dbo.SC('ãÍá') end as [FlatKind],
		Case when Isnull([A].[No], '') <> '' then [A].[FloorNo] else Null end as [Floor],
		[cu].[Name] as [CustomerName],
		[cu].[ltnName] as [CustomerltnName],
		[cu].[arName] as [CustomerArName],
		[FromDate],
		[ToDate],
		DateDiff(Day, GetDate(), [ToDate]) as [Datediff],
		[LeaseKind],
		[L].[Note2],
		Case when [R2].[ObjGuid] is null then ( @NotCheck )
			 when [R2].[ObjGuid] is not null  then @Check end as [AlertPrinted],
		Null as [AlertPrint],
		[L].[Guid]
	From
		[vbLeaseApartment] [L]
		inner join [vwBuilding] [B] On [L].[BuildingGuid] = [B].[Guid]
		inner join [vwCustomer] [cu] on [cu].[Guid] = [L].[CustomerGuid]
		left join [vwApartment] [A] On [A].[Guid] = [L].[ApartmentGuid]
		left join [vwShop] [S] On [S].[Guid] = [L].[ApartmentGuid]
		left join [RepCheck] [R] on [R].[ObjGuid] = [L].[Guid] and [R].[IdReport] = 7001
		left join [RepCheck] [R2] on [R2].[ObjGuid] = [L].[Guid] and [R2].[IdReport] = 7000
	where
		(DateDiff(Day, GetDate(), [ToDate]) < @Day)
		and (DateDiff(Day, GetDate(), [ToDate]) > 0)
		and ([LeaseKind] = 0 or [LeaseKind] = 1)
		and ([Contractfinish] = 0)
		and ([R].[ObjGuid] is Not Null or @All = 1)
	Order By 
		[B].[Name],
		DateDiff(Day, GetDate(), [ToDate]),
		[ContractNo],
		[ToDate]

GO
/****** Object:  StoredProcedure [dbo].[PrcAlarmEndPeriodNotendContract]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcAlarmEndPeriodNotendContract]
(
	@All Bit = 1
)
  
as
	Declare @Check Bit,
			@NotCheck Bit
	Set @Check = 1
	Set @NotCheck = 0


	Create Table #AlarmEndPeriodNotendContract
	(
		[ContractNo] Varchar(256),
		[BuildingName] Varchar(256),
		[BuildingltnName] Varchar(256),
		[BuildingArName] Varchar(256),
		[CustomerName] Varchar(256),
		[CustomerltnName] Varchar(256),
		[CustomerArName] Varchar(256),
		[No] Varchar(256),
		[FlatKind] Varchar(256),
		[Floor] Varchar(256),
		[FromDate] Datetime,
		[ToDate] Datetime,
		[Datediff] int,
		[LeaseKind] int,
		[AlertPrinted] Bit,
		[AlertPrint] Bit,
		[Guid] uniqueidentifier
	)
	
	insert into #AlarmEndPeriodNotendContract
	Select 
		[ContractNo],
		[B].[Name] as [BuildingName],
		[B].[ltnName] as [BuildingltnName],
		[B].[ArName] as [BuildingArName],
		[cu].[Name] as [CustomerName],
		[cu].[ltnName] as [CustomerltnName],
		[cu].[arName] as [CustomerArName],
		Case when Isnull([A].[No], '') <> '' then [A].[No] else [S].[No] end as [No],
		Case when Isnull([A].[No], '') <> '' then dbo.SC('ÔÞÉ') else dbo.SC('ãÍá') end as [FlatKind],
		Case when Isnull([A].[No], '') <> '' then [A].[FloorNo] else Null end as [Floor],
		[FromDate],
		[ToDate],
		DateDiff(Day,  [ToDate], GetDate()) as [Datediff],
		[LeaseKind],
		Case when [R2].[ObjGuid] is null then ( @NotCheck )
			 when [R2].[ObjGuid] is not null  then @Check end as [AlertPrinted],
		Null as [AlertPrint],
		[L].[Guid]
	From
		[vbLeaseApartment] [L]
		inner join [vwBuilding] [B] On [L].[BuildingGuid] = [B].[Guid]
		inner join [vwCustomer] [cu] on [cu].[Guid] = [L].[CustomerGuid]
		left join [vwApartment] [A] On [A].[Guid] = [L].[ApartmentGuid]
		left join [vwShop] [S] On [S].[Guid] = [L].[ApartmentGuid]
		left join [RepCheck] [R] on [R].[ObjGuid] = [L].[Guid] and [R].[IdReport] = 9001
		left join [RepCheck] [R2] on [R2].[ObjGuid] = [L].[Guid] and [R2].[IdReport] = 9000
	where
		([LeaseKind] = 0 or [LeaseKind] = 1)
		and ([Todate] <= GetDate() and [ContractFinish] = 0)
		and ([R].[ObjGuid] is Not Null or @All = 1)
		
	insert into #AlarmEndPeriodNotendContract
	Select 
		[ContractNo],
		[B].[Name] as [BuildingName],
		[B].[ltnName] as [BuildingltnName],
		[B].[ArName] as [BuildingArName],
		[cu].[Name] as [CustomerName],
		[cu].[ltnName] as [CustomerltnName],
		[cu].[arName] as [CustomerArName],
		[A].[No]as [No],
		dbo.SC('ãæÞÝ') as [FlatKind],
		'' as [Floor],
		[FromDate],
		[ToDate],
		case when DateDiff(Day,  [ToDate], GetDate()) > 0 then DateDiff(Day,  [ToDate], GetDate()) end as [Datediff],
		[ContractKind],

		Case when [R2].[ObjGuid] is null then ( @NotCheck )
			 when [R2].[ObjGuid] is not null  then @Check end as [AlertPrinted],
		Null as [AlertPrint],
		[L].[Guid]
	From
		[vbParkingContract] [L]
		inner join [vwBuilding] [B] On [L].[BuildingGuid] = [B].[Guid]
		inner join [vwCustomer] [cu] on [cu].[Guid] = [L].[CustomerGuid]
		left join [vwParking] [A] On [A].[Guid] = [L].[ParkingGuid]
		left join [RepCheck] [R] on [R].[ObjGuid] = [L].[Guid] and [R].[IdReport] = 9001
		left join [RepCheck] [R2] on [R2].[ObjGuid] = [L].[Guid] and [R2].[IdReport] = 9000
		left join (Select 
						[ObjGuid],
						[IdReport],
						Count(*) as [Count]
					From
						[RepCheckCount] 
					Group By
						[ObjGuid],
						[IdReport]
					)[R3] on [R3].[ObjGuid] = [L].[Guid] and [R3].[IdReport] = 9000

 	where
 		([ContractKind] = 4)
		and 
		([Todate] <= GetDate() and [ContractFinish] = 0)
		and ([R].[ObjGuid] is Not Null or @All = 1)
		
	insert into #AlarmEndPeriodNotendContract
	Select 
		[ContractNo],
		'' as [BuildingName],
		'' as [BuildingltnName],
		'' as [BuildingArName],
		[cu].[Name] as [CustomerName],
		[cu].[ltnName] as [CustomerltnName],
		[cu].[arName] as [CustomerArName],
		[L].[Name]as [No],
		Case when [ContractKind] = 6 or [ContractKind] = 7 then dbo.SC('ÃÑÖ')
		 when [ContractKind] = 8 or [ContractKind] = 9 then dbo.SC('ÝíáÇ')
		end 
		as [FlatKind],
		'' as [Floor],
		[FromDate],
		[ToDate],
		case when DateDiff(Day,  [ToDate], GetDate()) > 0 then DateDiff(Day,  [ToDate], GetDate()) end as [Datediff],
		[ContractKind],

		Case when [R2].[ObjGuid] is null then ( @NotCheck )
			 when [R2].[ObjGuid] is not null  then @Check end as [AlertPrinted],
		Null as [AlertPrint],

		[L].[Guid]
	From
		[vwLandContract] [L]
		inner join [vwCustomer] [cu] on [cu].[Guid] = [L].[CustomerGuid]
		left join [RepCheck] [R] on [R].[ObjGuid] = [L].[Guid] and [R].[IdReport] = 9001
		left join [RepCheck] [R2] on [R2].[ObjGuid] = [L].[Guid] and [R2].[IdReport] = 9000
		left join (Select 
						[ObjGuid],
						[IdReport],
						Count(*) as [Count]
					From
						[RepCheckCount] 
					Group By
						[ObjGuid],
						[IdReport]
					)[R3] on [R3].[ObjGuid] = [L].[Guid] and [R3].[IdReport] = 9000
 	where
 		([ContractKind] = 4)
		and ([Todate] <= GetDate() and [ContractFinish] = 0)
		and ([R].[ObjGuid] is Not Null or @All = 1)

	Select
		*
	From
		#AlarmEndPeriodNotendContract
	Order By 
		BuildingName, [Datediff]

GO
/****** Object:  StoredProcedure [dbo].[PrcAlarmPaperMonetary]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcAlarmPaperMonetary]
(	
	@DayPayable Int = 10,
	@DayReceivable Int = 30,
	@ShowAll Bit = 0
)
  
as
	Declare @Check Bit,
			@NotCheck Bit
	Set @Check = 1
	Set @NotCheck = 0

	Set NoCount On
	Select
		[v].[Guid], 
		[v].[TypeName],
		[v].[No],
		[v].[Value],
		[v].[CurrencyCode],
		[v].[CurrencyVal],
		[v].[Date],
		[v].[dueDate],
		[v].[BankName]	

		,[L].[BuildingName]
		,[L].[FlatNo]
		,[L].[FloorNo]

		,[Ac].[Code] as [AccountCode]
		,[Ac].[Name] as [AccountName]
		,(Select Top 1 Mobile from Customer where AcGuid = V.account) as [CustMobile]
		,C4.Value as [PartialCollectionValue]
	Into #R
	From
		[vwChecks] [v]
		left join [vwChecksCollection] [C] on [C].[CheckGuid] = [V].[Guid] --and [C].[Kind] = 1
		left join (
						Select 
							[CheckGuid],
							Sum([Value]) as [Value] 
						From
							[ChecksPartialCollection] 
						Group By
							[CheckGuid]
					) [C4] on [C4].[CheckGuid] = [V].[Guid]

		left join (Select
						[CheckTypeGuid]
					From
						[AlarmCheckTypeSource]  [A]
						inner join [CurrentUsers] [U] on [A].[UserGuid] = [U].[UserGuid] And [U].[spid] = @@Spid
					) [AU] on [Au].[CheckTypeGuid] = [V].[TypeGuid]
		left join [vwAllContract] [L] on [L].[Guid] = [V].[ContractGuid]
		Inner Join [vwAccount] [Ac] On [V].[Account] = [Ac].[Guid]

	where
		(
			(([v].[DueDate] <= DateAdd(d, @DayPayable, GetDate()))
			and [checkkind] = 1)
			or
			(([v].[DueDate] <= DateAdd(d, @DayReceivable, GetDate()))
			and [checkkind] = 0)
		)
		and (([C].[CheckGuid] Is null) and ([C4].[CheckGuid] is Null or [C4].[Value] < [V].[Value] ))
		and ([Au].[CheckTypeGuid] is Not Null or @ShowAll = 1)
		and (
				(IsNull([V].[NoneDueDate],1) = 0)
				or [v].[DueDate] = 0
			)
	Order By 
		[v].[DueDate] 


	Update #R Set AccountName = dbo.SC('ÍÓÇÈÇÊ ãÊÚÏÏÉ'), 
				  AccountCode = dbo.SC('ÍÓÇÈÇÊ ãÊÚÏÏÉ')
	From
		#R R
		inner join ChecksAccountDetail D on D.[ParentGuid] = R.Guid and Kind = 1

	Select *, 0 as [Operation] from #R
	Order By
		[DueDate] 

	Select 
		[TypeName],
		Count(*) As [Count],
		Sum([Value] * [CurrencyVal])  as [Total]
	From
		#R
	Group By
		[TypeName]
		


GO
/****** Object:  StoredProcedure [dbo].[PrcAllChecksCollection]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcAllChecksCollection]
(
	@Kind int = 1,
	@SecLvlKind Bit = 1,
    @SecLvl int = 0,
	@Date DateTime = '1/1/2010',
	@DueDate bit = 1,
	@FixDate DateTime = '1/1/2010',
	@LossComm Bit = 1,

	@DefAccounts Bit = 1,
	@AcDebit uniqueidentifier = 0x0,
	@CoDebit uniqueidentifier = 0x0,
	@AcCredit uniqueidentifier = 0x0,
	@CoCredit uniqueidentifier =0x0,

	@CommissionPercent float = 10,
	@CommAccountGuid uniqueidentifier = 0x0,
	@CommAccountCreditGuid uniqueidentifier = 0x0,
	@Note Varchar(256) = '',
	@Delay Float = 0,
	@DelayAccountDebitGuid uniqueidentifier = 0x0,
	@DelayAccountCreditGuid uniqueidentifier = 0x0,
	@Finished Bit = 1,	
	@ForTest Bit = 0	
)
  
as

	Create Table #R
	(
		[CheckNo] Varchar(256),
		[State] Varchar(256),
		[Guid] uniqueidentifier
	)


	Declare @CheckGuid uniqueidentifier

	Declare @Continue Bit,
			@Post Bit,
			@collecte bit,
			@Endor bit,
			@Return Bit,
			@Posted int,
			@collected int,
			@Endorsement int,
			@Returned int,
			@No Varchar(256),
			@CheckSecLvl int,
			@Value Float,
			@OperationDate Datetime,
			@CurrencyGUID uniqueidentifier,
			@CurrencyVal Float,
			@TypeGuid uniqueidentifier,
			@CheckKind int,
			@collectedSanctionBankAccountBuilding Bit,
			@ReturnedSanctionCustAccountDefAccount Bit,
			@AccountBankBuildingGuid  uniqueidentifier,
			@AcChecks uniqueidentifier,
			@DefOwnerBuildingPosted Bit,
			@AcTmp uniqueidentifier,
			@DefCustPosted Bit,
			@CommOwnerBuilding Bit,
			@DefBuildingComm Bit,
			@TmpFloat Float,
			@ReturnedSanctionBankBuilding Bit,
			@ReturnedSanctionBankBuildingCaseCollOnly Bit,
			@collectedSanctionCustObverse Bit,
			@DefBuildingIncomComm Bit,
			@EnableAtherOperationOnReturn Bit,
			@DefMoveCostDebit bit,
			@DefMoveCostCredit bit


	DECLARE cursor_Name CURSOR FAST_FORWARD FOR 
	Select [Guid] From [Resource]
	where [Kind] = 8
		and [Spid] = @@Spid
	
	OPEN cursor_Name
	FETCH NEXT FROM cursor_Name INTO @CheckGuid

	WHILE @@FETCH_STATUS = 0
	BEGIN

		-- áãÚÑÝÉ ÇáÍÇáÇÊ ÇáÓÇÈÞÉ
		Select
			@Posted = Sum(Case when Kind = 0 then 1 else 0 end ),
			@collected = Sum(Case when Kind = 1 then 1 else 0 end ),
			@Endorsement = Sum(Case when Kind = 2 then 1 else 0 end ),
			@Returned = Sum(Case when Kind = 3 then 1 else 0 end )
		from
			ChecksCollection
		where
			[CheckGuid] = @CheckGuid

		Select @Posted 		= isnull(@Posted,0)
		Select @collected 	= isnull(@collected,0)
		Select @Endorsement = isnull(@Endorsement,0)
		Select @Returned 	= isnull(@Returned,0)

		--ÊËÈíÊ ÇáÚãáíÇÊ
		Select 
			@No = [C].[No],
			@OperationDate = Case when @DueDate = 1 then
					(Select [DueDate] From [Checks] where [Guid] = @CheckGuid)
			else @Date end
		From 
			[Checks] [C] 
		where 
			[C].[Guid] = @CheckGuid
			
		if @OperationDate < @FixDate 
		begin
			insert into #R
			Select @No, dbo.SC('ÊÇÑíÎ ÇáÚãáíÉ ÃÕÛÑ ãä ÊÇÑíÎ ÇáÊËÈíÊ'), @CheckGuid
			
			FETCH NEXT FROM cursor_Name INTO @CheckGuid
			CONTINUE 				
		end 


		--Ýí ÍÇá ÇáÊÑÍíá
		if (@Kind = 0) 
		begin
			-- ÝÍÕ ÞÇÈáíÉ ÇáÊÑÍíá
			--ÝÍÕ ÇáäãØ
			Select 
				@No = [C].[No],
				@CheckSecLvl = [C].SecLvl,
				@CheckKind = [CheckKind],
				@Post = [Posted],
				@AcDebit = Case when @DefAccounts = 0 then @AcDebit else [PostedDefAccountGuid] end,
				@AcCredit = Case when @DefAccounts = 0 then @AcCredit else [PostedDefCreditAccountGuid] end,
				@Value =[Value],
				@CurrencyGUID = [CurrencyGUID],
				@CurrencyVal = [CurrencyVal],
				@TypeGuid = [T].[Guid],
				@DefOwnerBuildingPosted = [T].[DefOwnerBuildingPosted],
				@DefCustPosted = [T].[DefCustPosted],
				@EnableAtherOperationOnReturn = [T].[EnableAtherOperationOnReturn],
				@DefMoveCostDebit = PostMoveCostDebit,
				@DefMoveCostCredit = PostMoveCostCredit
			From 
				[CheckType] [T]
				inner join [Checks] [C] On [C].[TypeGuid] = [T].[Guid]
			where 
				[C].[Guid] = @CheckGuid

			if @Post = 0
			begin
				insert into #R
				Select @No, dbo.SC('ÛíÑ ÞÇÈá ááÊÑÍíá'), @CheckGuid
				
				FETCH NEXT FROM cursor_Name INTO @CheckGuid
				CONTINUE 				
			end 

			--ÇÚÊãÇÏ ÍÓÇÈ ãÇáß ÇáÈäÇÁ ßÍÓÇÈ ÇÝÊÑÇÖí ááÊÑÍíá
			if (@DefOwnerBuildingPosted = 1) and (@DefAccounts = 1)
			begin
				Select
					@AcTmp = [Cu].[AcGuid]
				from
					[Checks] [C]
					inner join [LeaseApartment] [L] On [L].[Guid] = [C].[ContractGuid]
					inner join [Building] [B] On [B].[Guid] = [L].[BuildingGuid]
				    inner join [Customer] [Cu] on [Cu].[Guid] =[B].[OwnerName]
				where 
					[C].[Guid] = @CheckGuid
				

				if @AcTmp is Not Null
				begin
					
					if @CheckKind = 0
					Set @AcCredit =@AcTmp

					if @CheckKind = 1
					Set @AcDebit = @AcTmp
				end
			end

			--ÇÚÊãÇÏ ÍÓÇÈ ÇáÒÈæä ßÍÓÇÈ ãÞÇÈá ÇÝÊÑÇÖí ááÊÑÍíá
			if (@DefCustPosted = 1) and (@DefAccounts = 1)
			begin
				Select
					@AcTmp = [C].[Account]
				from
					[Checks] [C]
				where [C].[Guid] = @CheckGuid
				
				if @AcTmp is Not Null
				begin
					if @CheckKind = 0
					Set @AcDebit = @AcTmp

					if @CheckKind = 1
					Set @AcCredit =@AcTmp
				end
			end

			--ãÑÍá ãÓÈÞÇð
			if (@Posted > 0) or (@collected > 0) or (@Endorsement > 0) or ( @Returned > 0 and @EnableAtherOperationOnReturn = 0)
			begin
				insert into #R
				Select @No, dbo.SC('ÛíÑ ÞÇÈá ááÊÑÍíá') +' '+Case 
															when (@Posted > 0) then dbo.SC('áÇä ÇáæÑÞÉ ÇáãÇáíÉ ãÑÍáÉ ãÓÈÞÇ')
															when (@collected > 0) then dbo.SC('áÇä ÇáæÑÞÉ ÇáãÇáíÉ ãÍÕáÉ')
															when (@Endorsement > 0) then dbo.SC('áÇä ÇáæÑÞÉ ÇáãÇáíÉ ãÙåÑÉ')
															when (@Returned > 0) then dbo.SC('áÇä ÇáæÑÞÉ ÇáãÇáíÉ ãÑÊÌÚÉ')
															else '' end
				, @CheckGuid
				
				FETCH NEXT FROM cursor_Name INTO @CheckGuid
				CONTINUE 				
			end


			if (isnull(@AcDebit, 0x0) = 0x0) or (isnull(@AcCredit,0x0) =0x0 )
			begin
				insert into #R
				Select @No, dbo.SC('ÛíÑ ÞÇÈá ááÊÑÍíá') +' '+dbo.SC('ÃÏÎá ÇáÍÓÇÈÇÊ ÇáÅÝÊÑÇÖíÉ ááäãØ')	, @CheckGuid
				
				FETCH NEXT FROM cursor_Name INTO @CheckGuid
				CONTINUE 				
			end
	
		end		
		
		--Ýí ÍÇá ÇáÊÍÕíá
		if (@Kind = 1) 
		begin
			-- ÝÍÕ ÞÇÈáíÉ ÇáÊÍÕíá
			--ÝÍÕ ÇáäãØ
			Select 
				@No = [C].[No],
				@CheckSecLvl = [C].SecLvl,
				@collecte = [collected],
				@AcDebit = Case when @DefAccounts = 0 then @AcDebit else [collectedDefAccountGuid] end,
				@AcCredit = Case when @DefAccounts = 0 then @AcCredit else [collectedDefAccountObverseGuid] end,
				@Value =[Value],
				@CurrencyGUID = [CurrencyGUID],
				@CurrencyVal = [CurrencyVal],
				@TypeGuid = [T].[Guid],
				@CheckKind = [T].[CheckKind],
				@collectedSanctionBankAccountBuilding = [T].[collectedSanctionBankAccountBuilding],
				@CommOwnerBuilding = [T].[CommOwnerBuilding],
				@DefBuildingComm = [T].[DefBuildingComm],
				@CommAccountGuid = Case when @DefAccounts = 0 then @CommAccountGuid else [CommAccountDebitGuid] end,
				@CommAccountCreditGuid = Case when @DefAccounts = 0 then @CommAccountCreditGuid else [CommAccountCreditGuid] end,
				@collectedSanctionCustObverse = [T].[collectedSanctionCustObverse],
				@DefBuildingIncomComm = [T].[DefBuildingIncomComm],
				@EnableAtherOperationOnReturn = [T].[EnableAtherOperationOnReturn],
				@DefMoveCostDebit = collectedMoveCostDebit,
				@DefMoveCostCredit = collectedMoveCostCredit
			From 
				[CheckType] [T]
				inner join [Checks] [C] On [C].[TypeGuid] = [T].[Guid]
			where 
				[C].[Guid] = @CheckGuid

			if @collecte = 0
			begin
				insert into #R
				Select @No, dbo.SC('ÛíÑ ÞÇÈá ááÊÍÕíá'), @CheckGuid
				
				FETCH NEXT FROM cursor_Name INTO @CheckGuid
				CONTINUE 				
			end 

			--ÇÚÊãÇÏ ÍÓÇÈ ÇáãÕÑÝ ááÈäÇÁ ßÍÓÇÈ ÇÝÊÑÇÖí ááÊÍÕíá	
			if (@collectedSanctionBankAccountBuilding = 1) and (@DefAccounts = 1)
			begin
				Select
					@AccountBankBuildingGuid = [B].[AccountBankBuildingGuid]
				from
					[Checks] [C]
					inner join [LeaseApartment] [L] On [L].[Guid] = [C].[ContractGuid]
					inner join [Building] [B] On [B].[Guid] = [L].[BuildingGuid]
				where [C].[Guid] = @CheckGuid
				
				if @AccountBankBuildingGuid is Not Null
				begin
					if @CheckKind = 0
					Set @AcDebit = @AccountBankBuildingGuid

					if @CheckKind = 1
					Set @AcCredit = @AccountBankBuildingGuid
				end
			end

			--ÇÚÊãÇÏ ÍÓÇÈ ãÇáß ÇáÈäÇÁ ßÍÓÇÈ ÇÝÊÑÇÖí áÚãæáÉ ÇáÊÍÕíá
			if (@CommOwnerBuilding = 1) and (@DefAccounts = 1)
			begin
				print 'ÇÚÊãÇÏ ÍÓÇÈ ãÇáß ÇáÈäÇÁ ßÍÓÇÈ ÇÝÊÑÇÖí áÚãæáÉ ÇáÊÍÕíá'
				Select
					@AcTmp = [Cu].[AcGuid]
				from
					[Checks] [C]
					inner join [LeaseApartment] [L] On [L].[Guid] = [C].[ContractGuid]
					inner join [Building] [B] On [B].[Guid] = [L].[BuildingGuid]
				    inner join [Customer] [Cu] on [Cu].[Guid] =[B].[OwnerName]
				where 
					[C].[Guid] = @CheckGuid
				
				if @AcTmp is Not Null
				begin
					if @CheckKind = 0
					Set @CommAccountGuid = @AcTmp

					if @CheckKind = 1
					Set @CommAccountCreditGuid = @AcTmp
				end
			end

			--ÅÚÊãÇÏ ÍÓÇÈ ÇáÅíÑÇÏ ááÈäÇÁ ßÍÓÇÈ ãÞÇÈá ÇÝÊÑÇÖí áÚãæáÉ ÇáÊÍÕíá
			if (@DefBuildingIncomComm = 1) and (@DefAccounts = 1)
			begin
				Select
				   @AcTmp = [B].[AccountCommIncomeGuid]
				from
					[Checks] [C]
					inner join [LeaseApartment] [L] On [L].[Guid] = [C].[ContractGuid]
					inner join [Building] [B] On [B].[Guid] = [L].[BuildingGuid]
				where 
					[C].[Guid] = @CheckGuid
				
				if @AcTmp is Not Null
				begin
					if @CheckKind = 0
					Set @CommAccountCreditGuid = @AcTmp

					if @CheckKind = 1
					Set @CommAccountGuid = @AcTmp
				end
			end

			--ÇÚÊãÇÏ ãÞÏÇÑ ÇáÚãæáÉ ãä ÈØÇÞÉ ÇáÈäÇÁ
			if (@DefBuildingComm = 1) and (@DefAccounts = 1)
			begin
				Select
				   @TmpFloat = [B].[CommissionPercent]
				from
					[Checks] [C]
					inner join [LeaseApartment] [L] On [L].[Guid] = [C].[ContractGuid]
					inner join [Building] [B] On [B].[Guid] = [L].[BuildingGuid]
				where 
					[C].[Guid] = @CheckGuid
				
				if @TmpFloat is Not Null
				begin
					Set @CommissionPercent = @TmpFloat
					Set @LossComm = 1
				end
				print 'ÚãæáÉ ÇáÊÍÕíá : '
				print @CommissionPercent
			end


			--ÅÚÊãÇÏ ÍÓÇÈ ÇáÒÈæä ßÍÓÇÈ ãÞÇÈá ÇÝÊÑÇÖí ááÊÍÕíá
			if (@collectedSanctionCustObverse = 1) and (@DefAccounts = 1)
			begin
				Select
					@AcTmp = [C].[Account]
				from
					[Checks] [C]
				where [C].[Guid] = @CheckGuid
				
				if @AcTmp is Not Null
				begin
					if @CheckKind = 0
					Set @AcCredit = @AcTmp

					if @CheckKind = 1
					Set @AcDebit = @AcTmp
				end
			end

			--ãÍÕá ãÓÈÞÇð
			if (@collected > 0) or (@Endorsement > 0) or ( @Returned > 0 and @EnableAtherOperationOnReturn = 0)
			begin
				insert into #R
				Select @No, dbo.SC('ÛíÑ ÞÇÈá ááÊÍÕíá') +' '+Case 
															when (@collected > 0) then dbo.SC('áÇä ÇáæÑÞÉ ÇáãÇáíÉ ãÍÕáÉ ãÓÈÞÇ')
															when (@Endorsement > 0) then dbo.SC('áÇä ÇáæÑÞÉ ÇáãÇáíÉ ãÙåÑÉ')
															when (@Returned > 0) then dbo.SC('áÇä ÇáæÑÞÉ ÇáãÇáíÉ ãÑÊÌÚÉ')
															else '' end
				, @CheckGuid
				
				FETCH NEXT FROM cursor_Name INTO @CheckGuid
				CONTINUE 				
			end

			
			if (isnull(@AcDebit, 0x0) = 0x0) or (isnull(@AcCredit,0x0) =0x0 ) 
				or (isnull(@CommAccountCreditGuid,0x0) = 0x0 and isnull(@CommissionPercent,0) <> 0)
			begin
				insert into #R
				Select @No, dbo.SC('ÛíÑ ÞÇÈá ááÊÍÕíá') +' '+dbo.SC('ÃÏÎá ÇáÍÓÇÈÇÊ ÇáÅÝÊÑÇÖíÉ ááäãØ')	, @CheckGuid
				
				FETCH NEXT FROM cursor_Name INTO @CheckGuid
				CONTINUE 				
			end
	
		end		
		
		--Ýí ÍÇá ÇáÊÙåíÑ
		if (@Kind = 2) 
		begin
			-- ÝÍÕ ÞÇÈáíÉ ÇáÊÙåíÑ
			--ÝÍÕ ÇáäãØ
			Select 
				@No = [C].[No],
				@CheckSecLvl = [C].SecLvl,
				@Endor = [Endorsement],
				@AcDebit = Case when @DefAccounts = 0 then @AcDebit else [EndorsementDefAccountDebitGuid] end,
				@AcCredit = Case when @DefAccounts = 0 then @AcCredit else [EndorsementDefAccountCreateGuid] end,
				@Value =[Value],
				@CurrencyGUID = [CurrencyGUID],
				@CurrencyVal = [CurrencyVal],
				@TypeGuid = [T].[Guid],
				@CheckKind = [T].[CheckKind],
				@EnableAtherOperationOnReturn = [T].[EnableAtherOperationOnReturn],
				@DefMoveCostDebit = EndorsementMoveCostDebit,
				@DefMoveCostCredit = EndorsementMoveCostCredit
			From 
				[CheckType] [T]
				inner join [Checks] [C] On [C].[TypeGuid] = [T].[Guid]
			where 
				[C].[Guid] = @CheckGuid

			if @Endor = 0
			begin
				insert into #R
				Select @No, dbo.SC('ÛíÑ ÞÇÈá ááÊÙåíÑ'), @CheckGuid
				
				FETCH NEXT FROM cursor_Name INTO @CheckGuid
				CONTINUE 				
			end 


			--ãÙåÑ ãÓÈÞÇ
			if (@Posted > 0) or (@collected > 0) or (@Endorsement > 0) or ( @Returned > 0 and @EnableAtherOperationOnReturn = 0)
			begin
				insert into #R
				Select @No, dbo.SC('ÛíÑ ÞÇÈá ááÊÙåíÑ') +' '+Case 
															when (@Posted > 0) then dbo.SC('áÇä ÇáæÑÞÉ ÇáãÇáíÉ ãÑÍáÉ')
															when (@collected > 0) then dbo.SC('áÇä ÇáæÑÞÉ ÇáãÇáíÉ ãÍÕáÉ')
															when (@Endorsement > 0) then dbo.SC('áÇä ÇáæÑÞÉ ÇáãÇáíÉ ãÙåÑÉ')
															when (@Returned > 0) then dbo.SC('áÇä ÇáæÑÞÉ ÇáãÇáíÉ ãÑÊÌÚÉ')
															else '' end
				, @CheckGuid
				
				FETCH NEXT FROM cursor_Name INTO @CheckGuid
				CONTINUE 				
			end

			if (isnull(@AcDebit, 0x0) = 0x0) or (isnull(@AcCredit,0x0) =0x0 )
			begin
				insert into #R
				Select @No, dbo.SC('ÛíÑ ÞÇÈá ááÊÙåíÑ') +' '+dbo.SC('ÃÏÎá ÇáÍÓÇÈÇÊ ÇáÅÝÊÑÇÖíÉ ááäãØ')	, @CheckGuid
				
				FETCH NEXT FROM cursor_Name INTO @CheckGuid
				CONTINUE 				
			end
	
		end

		--Ýí ÍÇá ÇáÅÑÌÇÚ
		if (@Kind = 3) 
		begin
			-- ÝÍÕ ÞÇÈáíÉ ÇáÅÑÌÇÚ
			--ÝÍÕ ÇáäãØ
			Select 
				@No = [C].[No],
				@CheckSecLvl = [C].SecLvl,
				@Return = [Returned],
				@AcDebit = Case when @DefAccounts = 0 then @AcDebit else [ReturnedDefAccountGuid] end,
				@AcCredit = Case when @DefAccounts = 0 then @AcCredit else [ReturnedDefAccountCreditGuid] end,
				@Value =[Value],
				@CurrencyGUID = [CurrencyGUID],
				@CurrencyVal = [CurrencyVal],
				@TypeGuid = [T].[Guid],
				@CheckKind = [T].[CheckKind],
				@ReturnedSanctionCustAccountDefAccount = [ReturnedSanctionCustAccountDefAccount],
				@ReturnedSanctionBankBuilding = [ReturnedSanctionBankBuilding],
				@ReturnedSanctionBankBuildingCaseCollOnly = T.[ReturnedSanctionBankBuildingCaseCollOnly],
				@DefMoveCostDebit = ReturnMoveCostDebit,
				@DefMoveCostCredit = ReturnMoveCostCredit
			From 
				[CheckType] [T]
				inner join [Checks] [C] On [C].[TypeGuid] = [T].[Guid]
			where 
				[C].[Guid] = @CheckGuid

			--ÇÚÊãÇÏ ÍÓÇÈ ÇáÒÈæä / ÇáãæÑÏ ßÍÓÇÈ ÇÝÊÑÇÖí ááÅÑÌÇÚ
			if (@ReturnedSanctionCustAccountDefAccount = 1)  and (@DefAccounts = 1)
			begin
				Select
					@AcChecks = [C].[Account]
				from
					[Checks] [C]
				where [C].[Guid] = @CheckGuid
				
				if @AcChecks is Not Null
				begin
					if @CheckKind = 0
					Set @AcDebit = @AcChecks

					if @CheckKind = 1
					Set @AcCredit = @AcChecks
				end
			end

			--ÇÚÊãÇÏ ÍÓÇÈ ÇáãÕÑÝ ááÈäÇÁ  ßÍÓÇÈ ÇÝÊÑÇÖí ááÅÑÌÇÚ
			if (@ReturnedSanctionBankBuilding = 1)  and (@DefAccounts = 1)
			begin
				Select
					@AcTmp = [B].[AccountBankBuildingGuid]
				from
					[Checks] [C]
					inner join [LeaseApartment] [L] On [C].[ContractGuid] = [L].[Guid]
					inner join [Building] [B] on [B].[Guid] = [L].[BuildingGuid]
				where 
					[C].[Guid] = @CheckGuid
				
				if @AcTmp is Not Null
				begin
					if @CheckKind = 0
					Set @AcCredit = @AcTmp

					if @CheckKind = 1
					Set @AcDebit = @AcTmp
				end
			end

			--ÇÚÊãÇÏ ÍÓÇÈ ÇáãÕÑÝ ááÈäÇÁ ßÍÓÇÈ ÇÝÊÑÇÖí ááÅÑÌÇÚ ÚäÏ ÊÍÕíá ÇáÔíß ÝÞØ
			if (@ReturnedSanctionBankBuildingCaseCollOnly = 1)
			begin
				Declare @IsColl bit
					Set @IsColl = (Select dbo.FnTestCheckCollection(@CheckGuid))
					
				Select
					@AcTmp = [B].[AccountBankBuildingGuid]
				from
					[Checks] [C]
					inner join [LeaseApartment] [L] On [C].[ContractGuid] = [L].[Guid]
					inner join [Building] [B] on [B].[Guid] = [L].[BuildingGuid]
				where 
					[C].[Guid] = @CheckGuid
				
				if (@AcTmp is Not Null) and (@IsColl = 1)
				begin
					if @CheckKind = 0
					Set @AcCredit = @AcTmp

					if @CheckKind = 1
					Set @AcDebit = @AcTmp
				end
			end

			if @Return = 0
			begin
				insert into #R
				Select @No, dbo.SC('ÛíÑ ÞÇÈá ááÅÑÌÇÚ'), @CheckGuid
				
				FETCH NEXT FROM cursor_Name INTO @CheckGuid
				CONTINUE 				
			end 


			--ãÑÊÌÚ ãÓÈÞÇð
			if (@Returned > 0)
			begin
				insert into #R
				Select @No, dbo.SC('ÛíÑ ÞÇÈá ááÅÑÌÇÚ') +' '+Case when (@Returned > 0) then dbo.SC('ãÑÊÌÚ ãÓÈÞÇð')
															else '' end
				, @CheckGuid
				
				FETCH NEXT FROM cursor_Name INTO @CheckGuid
				CONTINUE 				
			end

			if (isnull(@AcDebit, 0x0) = 0x0) or (isnull(@AcCredit,0x0) =0x0 )
			begin
				insert into #R
				Select @No, dbo.SC('ÛíÑ ÞÇÈá ááÅÑÌÇÚ') +' '+dbo.SC('ÃÏÎá ÇáÍÓÇÈÇÊ ÇáÅÝÊÑÇÖíÉ ááäãØ')	, @CheckGuid
				
				FETCH NEXT FROM cursor_Name INTO @CheckGuid
				CONTINUE 				
			end
	
		end

		--ÊÔßíá ÇáÈíÇä
		Declare @NewNote Varchar(256)
		Set @NewNote = 
		(
			Select 
				Case 
					when @Kind = 0 then 
					Case when dbo.FnGetLangauge(@@spid) = 0 then Notecollected
					else LtnNotePosted
					end
					when @Kind = 1 then 
					Case when dbo.FnGetLangauge(@@spid) = 0 then Notecollected
					else LtnNotecollected
					end
					when @Kind = 2 then 
					Case when dbo.FnGetLangauge(@@spid) = 0 then NoteEndorsement
					else LtnNoteEndorsement
					end
					when @Kind = 3 then 
					Case when dbo.FnGetLangauge(@@spid) = 0 then NoteReturn
					else LtnNoteReturn
					end
				end
			From	
				[CheckType] [T]
				inner join [Checks] [C] On [C].[TypeGuid] = [T].[Guid]
			where 
				[C].[Guid] = @CheckGuid
		)
		
		-- ÇáÍÓÇÈ
		Declare @ACName_Note Varchar(256),
				@obverseAccountName_Note Varchar(256),
				@Value_Note Varchar(256),
				@BankName_Note Varchar(256),
				@No_Note Varchar(256),
				@DueDate_Note Varchar(256),
				@CheckDate Varchar(256)
				
		Select
			@ACName_Note = AccountName,
			@obverseAccountName_Note = ObverseAccountName,
			@Value_Note = Cast(Value as Varchar(256)) +' '+CurrencyName,
			@BankName_Note = BankName,
			@No_Note = [No],
			@DueDate_Note = Cast(DueDate as Varchar(256)),
			@CheckDate = dbo.FnFormatDate([Date])
		From	
			vwChecks
		where
			[Guid] = @CheckGuid
			
		-- ÇáÈäÇÁ
		Declare @FlatNo_Note Varchar(256),
				@BuildingName_Note Varchar(256)
		
		Select
			@FlatNo_Note = [FlatNo],
			@BuildingName_Note = [BuildingName]
		From
			vwAllContract C
			inner join Checks S on C.Guid = S.ContractGuid
		where
			S.Guid = @CheckGuid
			
		Set @NewNote = REPLACE(@NewNote, '[A]', isNull(@ACName_Note,''))
		Set @NewNote = REPLACE(@NewNote, '[B]', isNull(@obverseAccountName_Note,''))
		Set @NewNote = REPLACE(@NewNote, '[C]', isNull(@Value_Note,''))
		Set @NewNote = REPLACE(@NewNote, '[D]', isNull(@BankName_Note,''))
		Set @NewNote = REPLACE(@NewNote, '[E]', isNull(@No_Note,''))
		Set @NewNote = REPLACE(@NewNote, '[F]', isNull(@DueDate_Note,''))
		Set @NewNote = REPLACE(@NewNote, '[J]', isNull(@FlatNo_Note,''))
		Set @NewNote = REPLACE(@NewNote, '[H]', isNull(@BuildingName_Note,''))
		Set @NewNote = REPLACE(@NewNote, '[T]', isNull(@CheckDate,''))
		Set @NewNote = REPLACE(@NewNote, '[O]', isNull(dbo.FnFormatDate(@OperationDate),''))
			

		if @DefAccounts = 1
		begin
			Declare @UnitCostGuid uniqueidentifier
			Declare @DebitUnitCostGuid uniqueidentifier
			Declare @CreditUnitCostGuid uniqueidentifier
			
			Select
				@UnitCostGuid = [L].[UnitCostGuid]
			from
        		[Checks] [C]
        		inner join [vwAllContract] [L] On [L].[Guid] = [C].[ContractGuid]
			where [C].[Guid] = @CheckGuid
			
			if @DefMoveCostDebit = 1 Set @CoDebit = @UnitCostGuid
			if @DefMoveCostCredit = 1 Set @CoCredit = @UnitCostGuid

		end
		
		--ÊäÝíÐ ÇáÚãáíÉ
		if @ForTest = 0
		begin
			begin Tran Tr_ChecksCollection
			
			insert into [ChecksCollection]
		  	([SecLvl],[Date], [CheckGuid], [DebitAccountGuid], [DebitCostGuid], [CreditAccountGuid], [CreditCostGuid], [Value],[Commission],[LossComm],[CommAccountGuid],[CommAccountCreditGuid],[CurrencyGUID],[CurrencyVal],[Note],[Kind],[Delay],[DelayAccountDebitGuid],[DelayAccountCreditGuid], [Finished])
			Select
				Case when @SecLvlKind = 1 then @CheckSecLvl else @SecLvl end,
				Case when @DueDate = 1 then
						(Select [DueDate] From [Checks] where [Guid] = @CheckGuid)
				else @Date end as [Date]
				,@CheckGuid as [CheckGuid]
				,@AcDebit as [DebitAccountGuid]
				,Case when @CoDebit <> 0x0 then @CoDebit end as [DebitCostGuid]
				,@AcCredit [CreditAccountGuid]
				,Case when @CoCredit <> 0x0 then @CoCredit end as [CreditCostGuid]
				,@Value as [Value]
				,case when @LossComm <> 0 then @Value * (@CommissionPercent / 100) end as [Commission]
				,@LossComm
				,Case when @CommAccountGuid <> 0x0 then @CommAccountGuid end as [CommAccountGuid]
				,Case when @CommAccountCreditGuid <> 0x0 then @CommAccountCreditGuid end as [CommAccountCreditGuid]
				,@CurrencyGUID as [CurrencyGUID]
				,@CurrencyVal as [CurrencyVal]
				,@NewNote as [Note]
				,@Kind as [Kind]
				,@Delay as [Delay]
				,Case when @DelayAccountDebitGuid <> 0x0 then @DelayAccountDebitGuid end  as [DelayAccountDebitGuid]
				,Case when @DelayAccountCreditGuid <> 0x0 then @DelayAccountCreditGuid end as [DelayAccountCreditGuid]
				,Case when (@Kind = 3) then @Finished else 0 end
		
				-- ÊæáíÏ ÇáÞíÏ
		    	Exec [PrcCreateEntryChecksCollection] @CheckGuid ,@Kind 
		
				commit Tran Tr_ChecksCollection
				insert into #R
				Select @No, dbo.SC('ÊãÊ ÇáÚãáíÉ ÈäÌÇÍ') , @CheckGuid
		end
		if @ForTest = 1
			insert into #R
			Select @No, dbo.SC('ÊÊã ÇáÚãáíÉ ÈäÌÇÍ') , @CheckGuid
	
	 	FETCH NEXT FROM cursor_Name INTO @CheckGuid
	
	END
	
	CLOSE cursor_Name
	DEALLOCATE cursor_Name


	Select * from #R	
	Order By [CheckNo]
		


GO
/****** Object:  StoredProcedure [dbo].[PrcAllChecksCollectionCancel]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcAllChecksCollectionCancel]
(
	@Kind int = 3,
	@ForTest Bit = 1,
	@FixDate DateTime = '1/1/2010'
)
  
as
	Exec PrcInsertSC 'ÛíÑ ãÑÍá ÃÕáÇð'
	Exec PrcInsertSC 'ÛíÑ ãÍÕá ÃÕáÇð'
	Exec PrcInsertSC 'ÛíÑ ãÙåÑ ÃÕáÇð'
	Exec PrcInsertSC 'ÛíÑ ãÑÌÚ ÃÕáÇð'
	Exec PrcInsertSC 'ÊãÊ ÇáÚãáíÉ ÈäÌÇÍ'
	Exec PrcInsertSC 'ÊÊã ÇáÚãáíÉ ÈäÌÇÍ'

	Create Table #R
	(
		[CheckNo] Varchar(256),
		[State] Varchar(256),
		[Guid] uniqueidentifier
	)


	Declare @CheckGuid uniqueidentifier
	

	DECLARE cursor_Name CURSOR FAST_FORWARD FOR 
	Select [Guid] From [Resource]
	where [Kind] = 8
		and [Spid] = @@Spid
	
	OPEN cursor_Name
	FETCH NEXT FROM cursor_Name INTO @CheckGuid

	Declare @Continue Bit,
			@Post Bit,
			@collecte bit,
			@Endor bit,
			@Return Bit,
			@Posted int,
			@collected int,
			@Endorsement int,
			@Returned int,
			@No Varchar(256),
			@CheckKind int,
			@OperationDate Datetime

	WHILE @@FETCH_STATUS = 0
	BEGIN

		Select 
			@No = [C].[No]
		From 
			[Checks] [C] 
		where 
			[C].[Guid] = @CheckGuid

		--ÊËÈíÊ ÇáÚãáíÇÊ
		Select
			@OperationDate = [Date]
		from
			ChecksCollection
		where
			[CheckGuid] = @CheckGuid

		if @OperationDate < @FixDate 
		begin
			insert into #R
			Select @No, dbo.SC('ÊÇÑíÎ ÇáÚãáíÉ ÃÕÛÑ ãä ÊÇÑíÎ ÇáÊËÈíÊ'), @CheckGuid
			
			FETCH NEXT FROM cursor_Name INTO @CheckGuid
			CONTINUE 				
		end 

		-- áãÚÑÝÉ ÇáÍÇáÇÊ ÇáÓÇÈÞÉ
		Select
			@Posted = Sum(Case when Kind = 0 then 1 else 0 end ),
			@collected = Sum(Case when Kind = 1 then 1 else 0 end ),
			@Endorsement = Sum(Case when Kind = 2 then 1 else 0 end ),
			@Returned = Sum(Case when Kind = 3 then 1 else 0 end )
		from
			ChecksCollection
		where
		[CheckGuid] = @CheckGuid

		Select @Posted 		= isnull(@Posted,0)
		Select @collected 	= isnull(@collected,0)
		Select @Endorsement = isnull(@Endorsement,0)
		Select @Returned 	= isnull(@Returned,0)

		--Ýí ÍÇá ÇáÊÑÍíá
		if (@Kind = 0) 
		begin
			--ãÑÍá ãÓÈÞÇð
			if (@Posted <= 0)
			begin
				insert into #R
				Select @No, dbo.SC('ÛíÑ ãÑÍá ÃÕáÇð')
				,@CheckGuid
				
				FETCH NEXT FROM cursor_Name INTO @CheckGuid
				CONTINUE 				
			end
			
	
		end		
		
		--Ýí ÍÇá ÇáÊÍÕíá
		if (@Kind = 1) 
		begin
			--ãÍÕá ãÓÈÞÇð
			if (@collected = 0)
			begin
				insert into #R
				Select @No, dbo.SC('ÛíÑ ãÍÕá ÃÕáÇð')
				, @CheckGuid
				
				FETCH NEXT FROM cursor_Name INTO @CheckGuid
				CONTINUE 				
			end
		end		
		
		--Ýí ÍÇá ÇáÊÙåíÑ
		if (@Kind = 2) 
		begin
			--ãÙåÑ ãÓÈÞÇ
			if (@Endorsement = 0)
			begin
				insert into #R
				Select @No, dbo.SC('ÛíÑ ãÙåÑ ÃÕáÇð')
				, @CheckGuid
				
				FETCH NEXT FROM cursor_Name INTO @CheckGuid
				CONTINUE 				
			end

		end

		--Ýí ÍÇá ÇáÅÑÌÇÚ
		if (@Kind = 3) 
		begin
			--ãÑÊÌÚ ãÓÈÞÇð
			if (@Returned = 0)
			begin
				insert into #R
				Select @No, dbo.SC('ÛíÑ ãÑÌÚ ÃÕáÇð') 
				, @CheckGuid
				
				FETCH NEXT FROM cursor_Name INTO @CheckGuid
				CONTINUE 				
			end

		end

		--ÊäÝíÐ ÇáÚãáíÉ
		if @ForTest = 0
		begin
				Exec [DeleteChecksCollection] @CheckGuid ,@Kind 
		
				insert into #R
				Select @No, dbo.SC('ÊãÊ ÇáÚãáíÉ ÈäÌÇÍ') , @CheckGuid
		end
		if @ForTest = 1
			insert into #R
			Select @No, dbo.SC('ÊÊã ÇáÚãáíÉ ÈäÌÇÍ') , @CheckGuid
	
	 	FETCH NEXT FROM cursor_Name INTO @CheckGuid
	
	END
	
	CLOSE cursor_Name
	DEALLOCATE cursor_Name

	Select * from #R	
	Order By [CheckNo]
		


GO
/****** Object:  StoredProcedure [dbo].[PrcAllCustomer]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcAllCustomer]
(
	@CardKind int = 2,
	@CustKind int = 6,
	@Name Varchar(256) = '',
	@LtnName Varchar(256) = '',
	@Nationality Varchar(256) = '',
	@Security Varchar(256) = '',
	@Profession Varchar(256) = '',
	@Adjective Varchar(256) = '',
	@Address Varchar(256) = '',
	@Ban Int = 1,
	@ActiveDate Bit = 0,
	@Datewith int = 0,
	@Date1 DateTime = '2009-7-1',
	@Date2 DateTime = '2022-1-2'

)
  
as
	Select 
		* ,
		arName as [NewName],
		Case when isnull([Ban],0) = 0 then dbo.SC('áÇ') else dbo.SC('äÚã') end As [BanStr]
	From 
		[vwCustomer]
	where
		([CardKind] = @CardKind or @CardKind = 2)
		and ([CustKind] = @CustKind or @CustKind = 6)
 		and ([ArName] Like '%'+@Name+'%')
 		and ([LtnName] like '%'+@LtnName+'%')
 		and ([Nationality] = @Nationality or @Nationality = '')
 		and ([Security] = @Security or @Security = '')
 		and ([Profession] = @Profession or @Profession = '')
 		and ([Adjective] = @Adjective or @Adjective = '')
 		and ([Address] like '%'+@Address+'%' )
		and (IsNull([Ban],0) = @Ban  or @Ban = 2)
		and (
			 ([PassportExpireDate] Between @Date1 And @Date2 and @Datewith = 0)	
			 or ([DomicileEndDate] Between @Date1 And @Date2 and @Datewith = 1)	
			 or ([PersonalityEndDate] Between @Date1 And @Date2 and @Datewith = 2)	
			 or @ActiveDate = 0
			)
	Order By
		Number,[Name]
	

GO
/****** Object:  StoredProcedure [dbo].[PrcApartmentOffer]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcApartmentOffer]
(
	@NO VARCHAR(256) = '',
	@Building VARCHAR(256) = '',
	@Customer VARCHAR(256) = '',
	@FloorNo Varchar(256) = '',
	@Area1 Float = 0,
	@Area2 Float = 0,
	@ApartmentType VARCHAR(256) = '',
	@FlatKind VARCHAR(256) = '',
	@Class VARCHAR(256) = '',
	@Overlooking VARCHAR(256) = '',
	@OfferKind Int = 0,
	@OfferValue1 Float = 0,
	@OfferValue2 Float = 0,
	@Delegated VARCHAR(256) = '',
	@CustPhone VARCHAR(256) = '',
	@CustMobile VARCHAR(256) = ''
)
  
as
	Select 
		*,
		Case when OfferKind = 0 then 'ÈíÚ'
			 when OfferKind = 1 then 'ÔÑÇÁ'
			 when OfferKind = 2 then 'ÅíÌÇÑ'
		end as OfferKindStr
	From 
		ApartmentOffer
	where
		([NO] Like '%'+@NO+'%')
		and ([Building] Like '%'+@Building+'%')
		and ([Customer] Like '%'+@Customer+'%')
		and ([FloorNo] Like '%'+@FloorNo+'%')
		and ([Area] Between @Area1 and @Area2 Or @Area2 = 0)
		and ([ApartmentType] Like '%'+@ApartmentType+'%')
		and ([FlatKind] Like '%'+@FlatKind+'%')
		and ([Class] Like '%'+@Class+'%')
		and ([Overlooking] Like '%'+@Overlooking+'%')
		and ([OfferKind] = @OfferKind or @OfferKind = 3)
		and (OfferValue Between @OfferValue1 and @OfferValue2 or @OfferValue2 = 0)
		and ([Delegated] Like '%'+@Delegated+'%')
		and ([CustPhone] Like '%'+@CustPhone+'%')
		and ([CustMobile] Like '%'+@CustMobile+'%')
		

GO
/****** Object:  StoredProcedure [dbo].[PrcApproachLeaveContract]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcApproachLeaveContract]
(	
	@CustGuid uniqueidentifier = 0x0,
	@FlatNo Varchar(256) = '',
	@FloorNo Varchar(256) = '',	
	@FlatKind Varchar(256) = '',	
	@ApartmentType Varchar(256) = '',	
	@Class Varchar(256) = '',	
	@Day Int = 730,
	@All bit = 1,
	@ActiveDate Bit = 0,
	@Date1 DateTime = '2009-1-1',
	@Date2 DateTime = '2010-1-1'

	,@ActiveNote Bit = 0
	,@OperationNote int = 0
	,@RealtyNote  Varchar(256) = '' 
	,@ContractActiveNote Bit = 0
	,@ContractOpNote int = 0
	,@ContractNote  Varchar(256) = '' 

	,@SMS int = 2
)
  
as
	Set NoCount on
	Declare @Check Bit,
			@NotCheck Bit
	Set @Check = 1
	Set @NotCheck = 0

	--ãÚÇáÌÉ ÈíÇä ÇáÚÞÇÑ
	if @OperationNote = 0 --íÍæí
	Set @RealtyNote = '%'+@RealtyNote+'%'
	
	--ãÚÇáÌÉ ÈíÇä ÇáÚÞÏ
	if @ContractOpNote = 0 --íÍæí
	Set @ContractNote = '%'+@ContractNote+'%'

	CREATE TABLE #R
	(
		[ContractNo] [varchar](256),
		[BuildingName] [varchar](256),
		[BuildingltnName] [varchar](256),
		[BuildingArName] [varchar](256),
		[No] [varchar](256),
		[FlatKind] [varchar](256),
		[Floor] [varchar](256),
		[CustomerName] [varchar](256),
		[CustomerltnName] [varchar](256),
		[CustomerArName] [varchar](256),
		[CustomerMobile] [varchar](256),
		[FromDate] [datetime],
		[ToDate] [datetime],
		[LeaveDate] [datetime],
		[Datediff] Float,
		[RentAfterDiscount] [float],
		[LeaseKind] [int],
		[Note2] [varchar](1000),
		[AlertPrinted] [bit],
		[AlertPrintedDate] [datetime],
		[AlertPrintedCount] [int],
		[SMSSended] [bit],
		[SMSCount] [int],
		[AlertPrint] [int],
		[Guid] [uniqueidentifier],
		[FlatNote] [varchar](256),
		[ContractNote] [varchar](1000),
		[Bulding_Emirate] [varchar](256),
		[Bulding_Area] [varchar](256),
		[Bulding_Street] [varchar](256),
		[Bulding_BuildingNo] [varchar](256),
		[Bulding_PieceNo] [varchar](256),
		[Bulding_BasinNo] [varchar](256),
		[Bulding_BondType] [varchar](256),
		[Bulding_BondNo] [varchar](256),
		[Bulding_BondDate] [datetime]
	)

	
	--ÚÞæÏ ÇáÔÞæ ÇáãÍá
	Insert into #R
	Select 
		[ContractNo],
		[B].[Name] as [BuildingName],
		[B].[ltnName] as [BuildingltnName],
		[B].[ArName] as [BuildingArName],
		Case when Isnull([A].[No], '') <> '' then [A].[No] else [S].[No] end as [No],
		Case when Isnull([A].[No], '') <> '' then dbo.SC('ÔÞÉ') else dbo.SC('ãÍá') end as [FlatKind],
		Case when Isnull([A].[No], '') <> '' then [A].[FloorNo] else Null end as [Floor],
		[cu].[Name] as [CustomerName],
		[cu].[ltnName] as [CustomerltnName],
		[cu].[arName] as [CustomerArName],
		[cu].[Mobile] as [CustomerMobile],
		[FromDate],
		[ToDate],
		[LeaveDate],
		DateDiff(Day, GetDate(), [LeaveDate]) as [Datediff],
		[L].[Rent] - [L].[DiscountValue] as [RentAfterDiscount],
		[LeaseKind],
		[L].[Note2],
		Case when [R2].[ObjGuid] is null then ( @NotCheck )
			 when [R2].[ObjGuid] is not null  then @Check end as [AlertPrinted],
		[R2].[Date] as [AlertPrintedDate],
		[R3].[Count] as [AlertPrintedCount],

		Case when [SMS2].[ObjGuid] is null then ( @NotCheck )
			 when [SMS2].[ObjGuid] is not null  then @Check end as [SMSSended],
		[SMS3].[Count] as [SMSCount],

		Null as [AlertPrint],
		[L].[Guid]
		,[A].[Note] as [FlatNote]
		,[L].[Note2] as [ContractNote]
		,[B].[Emirate] as [Bulding_Emirate]
		,[B].[Area] as [Bulding_Area]
		,[B].[Street] as [Bulding_Street]
		,[B].[BuildingNo] as [Bulding_BuildingNo]
		,[B].[PieceNo] as [Bulding_PieceNo]
		,[B].[BasinNo] as [Bulding_BasinNo]
		,[B].[BondType] as [Bulding_BondType]
		,[B].[BondNo] as [Bulding_BondNo]
		,[B].[BondDate] as [Bulding_BondDate]
	From
		[vbLeaseApartment] [L]
		inner join [vwBuilding] [B] On [L].[BuildingGuid] = [B].[Guid]
		inner join [Resource] [RS] on [RS].[Guid] = [B].[Guid] and [RS].[Spid] = @@Spid and [RS].[Kind] = 3001
		inner join [Resource] [RS2] on [RS2].[Guid] = [L].[TypeGuid] and [RS2].[Spid] = @@Spid and [RS2].[Kind] = 3002
		inner join [vwCustomer] [cu] on [cu].[Guid] = [L].[CustomerGuid]
		left join [vwApartment] [A] On [A].[Guid] = [L].[ApartmentGuid]
		left join [vwShop] [S] On [S].[Guid] = [L].[ApartmentGuid]
		left join [RepCheck] [R] on [R].[ObjGuid] = [L].[Guid] and [R].[IdReport] = 2
		left join [RepCheck] [R2] on [R2].[ObjGuid] = [L].[Guid] and [R2].[IdReport] = 1
		left join (Select 
						[ObjGuid],
						[IdReport],
						Count(*) as [Count]
					From
						[RepCheckCount] 
					Group By
						[ObjGuid],
						[IdReport]
					)[R3] on [R3].[ObjGuid] = [L].[Guid] and [R3].[IdReport] = 1

		left join [RepSMS] [SMS2] on [SMS2].[ObjGuid] = [L].[Guid] and [SMS2].[IdReport] = 1
		left join (Select 
						[ObjGuid],
						[IdReport],
						Count(*) as [Count]
					From
						[RepSMSCount] 
					Group By
						[ObjGuid],
						[IdReport]
					)[SMS3] on [SMS3].[ObjGuid] = [L].[Guid] and [SMS3].[IdReport] = 1
 	where
 		(Leave = 1)
 		and (DateDiff(Day, GetDate(), [LeaveDate] ) <= @Day or @Day = 0)
 		and (DateDiff(Day, GetDate(), [LeaveDate] ) >= 0 or @ActiveDate = 0)
		and ([L].[LeaveDate] Between @Date1 And @Date2 or @ActiveDate = 0)
 		and ([LeaseKind] = 0 or [LeaseKind] = 1)
 		and ([R].[ObjGuid] is Not Null or @All = 1)
 
 		and (
 				([SMS2].[ObjGuid] is Not Null and @SMS = 0)
 				or ([SMS2].[ObjGuid] is Null and @SMS = 1)
 				or @SMS = 2
 			)
 
  		and ([L].[CustomerGuid] = @CustGuid or @CustGuid = 0x0)
  		and ([A].[No] = @FlatNo or @FlatNo = '')
  		and ([A].[FloorNo] = @FloorNo or @FloorNo = '')
  		and ([A].[FlatKind] = @FlatKind or @FlatKind = '')
  		and ([A].[ApartmentType] = @ApartmentType or @ApartmentType = '')
  		and ([A].[Class] = @Class or @Class = '')
 		and 
 			(
 				[A].[Note] Like @RealtyNote 
 				or @ActiveNote = 0
 			)
 
 		and 
 			(
 				[L].[Note2] Like @ContractNote 
 				or @ContractActiveNote = 0
			)

	Order By 
		[B].[Name],
		DateDiff(Day, GetDate(), [LeaveDate]) desc,
		[ContractNo],
		[LeaveDate]
		
/*
	--ÚÞæÏ ÇáãæÞÝ
	Insert into #R
	Select 
		[ContractNo],
		[B].[Name] as [BuildingName],
		[B].[ltnName] as [BuildingltnName],
		[B].[ArName] as [BuildingArName],
		[A].[No]as [No],
		dbo.SC('ãæÞÝ') as [FlatKind],
		'' as [Floor],
		[cu].[Name] as [CustomerName],
		[cu].[ltnName] as [CustomerltnName],
		[cu].[arName] as [CustomerArName],
		[cu].[Mobile] as [CustomerMobile],
		[FromDate],
		[ToDate],
		DateDiff(Day, GetDate(), [ToDate]) as [Datediff],
		[L].[Rent] as [RentAfterDiscount],
		[ContractKind],
		[L].[Note2],
		Case when [R2].[ObjGuid] is null then ( @NotCheck )
			 when [R2].[ObjGuid] is not null  then @Check end as [AlertPrinted],
		[R2].[Date] as [AlertPrintedDate],
		[R3].[Count] as [AlertPrintedCount],

		Case when [SMS2].[ObjGuid] is null then ( @NotCheck )
			 when [SMS2].[ObjGuid] is not null  then @Check end as [SMSSended],
		[SMS3].[Count] as [SMSCount],

		Null as [AlertPrint],
		[L].[Guid]
		,[A].[Note] as [FlatNote]
		,[L].[Note2] as [ContractNote]
		,[B].[Emirate] as [Bulding_Emirate]
		,[B].[Area] as [Bulding_Area]
		,[B].[Street] as [Bulding_Street]
		,[B].[BuildingNo] as [Bulding_BuildingNo]
		,[B].[PieceNo] as [Bulding_PieceNo]
		,[B].[BasinNo] as [Bulding_BasinNo]
		,[B].[BondType] as [Bulding_BondType]
		,[B].[BondNo] as [Bulding_BondNo]
		,[B].[BondDate] as [Bulding_BondDate]
	From
		[vbParkingContract] [L]
		inner join [vwBuilding] [B] On [L].[BuildingGuid] = [B].[Guid]
		inner join [Resource] [RS] on [RS].[Guid] = [B].[Guid] and [RS].[Spid] = @@Spid and [RS].[Kind] = 3001
		inner join [Resource] [RS2] on [RS2].[Guid] = [L].[TypeGuid] and [RS2].[Spid] = @@Spid and [RS2].[Kind] = 3002
		inner join [vwCustomer] [cu] on [cu].[Guid] = [L].[CustomerGuid]
		left join [vwParking] [A] On [A].[Guid] = [L].[ParkingGuid]
		left join [RepCheck] [R] on [R].[ObjGuid] = [L].[Guid] and [R].[IdReport] = 2
		left join [RepCheck] [R2] on [R2].[ObjGuid] = [L].[Guid] and [R2].[IdReport] = 1
		left join (Select 
						[ObjGuid],
						[IdReport],
						Count(*) as [Count]
					From
						[RepCheckCount] 
					Group By
						[ObjGuid],
						[IdReport]
					)[R3] on [R3].[ObjGuid] = [L].[Guid] and [R3].[IdReport] = 1

		left join [RepSMS] [SMS2] on [SMS2].[ObjGuid] = [L].[Guid] and [SMS2].[IdReport] = 1
		left join (Select 
						[ObjGuid],
						[IdReport],
						Count(*) as [Count]
					From
						[RepSMSCount] 
					Group By
						[ObjGuid],
						[IdReport]
					)[SMS3] on [SMS3].[ObjGuid] = [L].[Guid] and [SMS3].[IdReport] = 1
 	where
 		(DateDiff(Day, GetDate(), [ToDate]) <= @Day)
 		and (DateDiff(Day, GetDate(), [ToDate]) > 0)
 		and ([ContractKind] = 4)
 		and ([Contractfinish] = 0)
 		and ([R].[ObjGuid] is Not Null or @All = 1)
 
 		and (
 				([SMS2].[ObjGuid] is Not Null and @SMS = 0)
 				or ([SMS2].[ObjGuid] is Null and @SMS = 1)
 				or @SMS = 2
 			)
 
  		and ([L].[CustomerGuid] = @CustGuid or @CustGuid = 0x0)
  		and ([A].[No] = @FlatNo or @FlatNo = '')
  		and ([A].[FloorNo] = @FloorNo or @FloorNo = '')
  		and ([A].[ParkingKind] = @FlatKind or @FlatKind = '')
  		and ([A].[Description] = @ApartmentType or @ApartmentType = '')
  		--and ([A].[Class] = @Class or @Class = '')
 		and 
 			(
 				[A].[Note] Like @RealtyNote 
 				or @ActiveNote = 0
 			)
 
 		and 
 			(
 				[L].[Note2] Like @ContractNote 
 				or @ContractActiveNote = 0
			)

	Order By 
		[B].[Name],
		DateDiff(Day, GetDate(), [ToDate]) desc,
		[ContractNo],
		[ToDate]
*/		
	


	--ÇáÃÑÖ æ ÇáÝíáÇ
	Insert into #R
	Select 
		[ContractNo],
		'' as [BuildingName],
		'' as [BuildingltnName],
		'' as [BuildingArName],
		[L].[Name]as [No],
		Case when [ContractKind] = 6 or [ContractKind] = 7 then dbo.SC('ÃÑÖ')
		 when [ContractKind] = 8 or [ContractKind] = 9 then dbo.SC('ÝíáÇ')
		end 
		as [FlatKind],
		'' as [Floor],
		[cu].[Name] as [CustomerName],
		[cu].[ltnName] as [CustomerltnName],
		[cu].[arName] as [CustomerArName],
		[cu].[Mobile] as [CustomerMobile],
		[FromDate],
		[ToDate],
		[LeaveDate],
		DateDiff(Day, GetDate(), [LeaveDate]) as [Datediff],
		[L].[Rent] as [RentAfterDiscount],
		[ContractKind],
		[L].[Note2],
		Case when [R2].[ObjGuid] is null then ( @NotCheck )
			 when [R2].[ObjGuid] is not null  then @Check end as [AlertPrinted],
		[R2].[Date] as [AlertPrintedDate],
		[R3].[Count] as [AlertPrintedCount],

		Case when [SMS2].[ObjGuid] is null then ( @NotCheck )
			 when [SMS2].[ObjGuid] is not null  then @Check end as [SMSSended],
		[SMS3].[Count] as [SMSCount],

		Null as [AlertPrint],
		[L].[Guid]
		,[L].UnitNote as [FlatNote]
		,[L].[Note2] as [ContractNote]
		,'' as [Bulding_Emirate]
		,'' as [Bulding_Area]
		,'' as [Bulding_Street]
		,'' as [Bulding_BuildingNo]
		,'' as [Bulding_PieceNo]
		,'' as [Bulding_BasinNo]
		,'' as [Bulding_BondType]
		,'' as [Bulding_BondNo]
		,Null as [Bulding_BondDate]
	From
		[vwLandContract] [L]
		inner join [Resource] [RS2] on [RS2].[Guid] = [L].[TypeGuid] and [RS2].[Spid] = @@Spid and [RS2].[Kind] = 3002
		inner join [vwCustomer] [cu] on [cu].[Guid] = [L].[CustomerGuid]
		left join [RepCheck] [R] on [R].[ObjGuid] = [L].[Guid] and [R].[IdReport] = 2
		left join [RepCheck] [R2] on [R2].[ObjGuid] = [L].[Guid] and [R2].[IdReport] = 1
		left join (Select 
						[ObjGuid],
						[IdReport],
						Count(*) as [Count]
					From
						[RepCheckCount] 
					Group By
						[ObjGuid],
						[IdReport]
					)[R3] on [R3].[ObjGuid] = [L].[Guid] and [R3].[IdReport] = 1

		left join [RepSMS] [SMS2] on [SMS2].[ObjGuid] = [L].[Guid] and [SMS2].[IdReport] = 1
		left join (Select 
						[ObjGuid],
						[IdReport],
						Count(*) as [Count]
					From
						[RepSMSCount] 
					Group By
						[ObjGuid],
						[IdReport]
					)[SMS3] on [SMS3].[ObjGuid] = [L].[Guid] and [SMS3].[IdReport] = 1
 	where
 		(Leave = 1)
 		and (DateDiff(Day, GetDate(), [LeaveDate] ) <= @Day or @Day = 0)
 		and (DateDiff(Day, GetDate(), [LeaveDate] ) >= 0 or @ActiveDate = 0)
		and ([L].[LeaveDate] Between @Date1 And @Date2 or @ActiveDate = 0)
 		and ([ContractKind] = 7 or [ContractKind] = 9)
 		and ([Contractfinish] = 0)
 		and ([R].[ObjGuid] is Not Null or @All = 1)
 
 		and (
 				([SMS2].[ObjGuid] is Not Null and @SMS = 0)
 				or ([SMS2].[ObjGuid] is Null and @SMS = 1)
 				or @SMS = 2
 			)
 
  		and ([L].[CustomerGuid] = @CustGuid or @CustGuid = 0x0)
  		and ([L].[Name] = @FlatNo or @FlatNo = '')
 		and 
 			(
 				[L].[UnitNote] Like @RealtyNote 
 				or @ActiveNote = 0
 			)
 
 		and 
 			(
 				[L].[Note2] Like @ContractNote 
 				or @ContractActiveNote = 0
			)

	Order By 
		DateDiff(Day, GetDate(), [LeaveDate]) desc,
		[ContractNo],
		[LeaveDate]

	Select 
		COUNT(*) as [Count],
		SUM([RentAfterDiscount]) as [RentAfterDiscount]
	From
		#R

	Select
		*,
		0 as Operation,
		0 as SMS,
		0 as msgSend
	From
		#R
	Order By
		[BuildingName], 
		[Datediff],
		[ContractNo],
		[LeaveDate]
		

GO
/****** Object:  StoredProcedure [dbo].[PrcAssetsChangeArea]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcAssetsChangeArea]
(
	@AssetsGruopGuid uniqueidentifier = 0x0,
	@AssetsGuid uniqueidentifier = 0x0,
	@CurrentAreaGuid uniqueidentifier = 0x0,
	@FromAreaGuid uniqueidentifier = 0x0,
	@ToAreaGuid uniqueidentifier = 0x0,
	@Date1 DateTime = '1/1/2007',
	@Date2 DateTime = '1/1/2014'
)   as

	Select 
		A.Date,
		A.Number,
		S.Code,
		S.name,
		s.ltnName,
		S.[AssetsGroup],
		S.CurrentArea,
		F.Name as FromArea,
		T.Name as ToArea,
		A.Note,
		A.Guid,
		S.Guid as AssetsGuid
	From 
		[AssetsChangeArea] A
		inner join [vwAssets] S on S.Guid = A.AssetsGuid
		inner join [AssetsArea] F on F.Guid = A.[CurrentAreaGuid]
		inner join [AssetsArea] T on T.Guid = A.[AreaGuid]
	where
		 (S.[AssetsGroupGuid] = @AssetsGruopGuid or @AssetsGruopGuid = 0x0)
		and (A.Guid = @AssetsGuid or @AssetsGuid = 0x0)
		and (S.CurrentAssetsAreaGuid = @CurrentAreaGuid or @CurrentAreaGuid = 0x0)
		and (A.Date between @Date1 and @Date2)
	

GO
/****** Object:  StoredProcedure [dbo].[PrcAssetsInventory]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcAssetsInventory]
(
	@AssetsGruopGuid uniqueidentifier = 0x0,
	@AssetsGuid uniqueidentifier = 0x0,
	@AssetsAreaGuid uniqueidentifier = 0x0,
	@CurrencyGuid [uniqueidentifier] = '11111111-C748-4B13-8B91-1E9B299DF1C1',
	@CurrencyVal Float = 1,
	@TotalOnly bit = 1,
	@AssetsDepreciation bit = 1,
	@Date1 DateTime = '1/1/2007',
	@Date2 DateTime = '1/1/2016'
)   
as
	if @CurrencyVal = 0 
	Set @CurrencyVal = 1

	Select
		A.AssetsGuid,
		Sum(
			Case when A.Flag = 1 then A.value *
			Case when [A].[CurrencyGuid] = @CurrencyGuid then 1 
					else [A].[CurrencyVal] / @CurrencyVal 
			end 
			end
			)as Addition,
		Sum(
			Case when A.Flag = 2 then A.value *
			Case when [A].[CurrencyGuid] = @CurrencyGuid then 1 
					else [A].[CurrencyVal] / @CurrencyVal 
			end 
			end
			) as [Decrease],
		Sum(
			Case when A.Flag = 3 then A.value *
			Case when [A].[CurrencyGuid] = @CurrencyGuid then 1 
					else [A].[CurrencyVal] / @CurrencyVal 
			end 
			end
			) as [Maintenance]
	into #InvAssetsOperation
	From
		[AssetsOperation] A
	Group By
		A.AssetsGuid
		
	-- ÇáÇåÊáÇßÇÊ
	Select
		D.AssetsGuid,
		Sum(
			D.DepreciationValue *
			Case when [A].[CurrencyGuid] = @CurrencyGuid then 1 
					else [A].[CurrencyVal] / @CurrencyVal 
			end 
			)as Depreciation
	into #InvAssetsDepreciation
	From
		[AssetsDepreciation] A
		inner join [AssetsDepreciationDetail] D on D.ParentGuid = A.Guid
	Group By
		D.AssetsGuid
		
	Select 
		S.Code,
		S.name,
		s.ltnName,
		S.BarCode,
		S.[AssetsGroup],
		S.CurrentArea,
		S.Age,
		S.OldYearDepreciation,
		S.EnterValue,
		S.ScrapValue,
		Cast(0 as Float) as [NewAssetsValue],
		Cast(0 as Float) as [Addition],
		Cast(0 as Float) as [Decrease],
		Cast(0 as Float) as [Maintenance],
		Cast(0 as Float) as [Depreciation],
		Cast(0 as Float) as [Total],
		
		S.Note,
		S.Guid as AssetsGuid,
		0 as [Sort]
	into #RPrcAssetsInventory
	From 
		[vwAssets] S
	where
		 (S.[AssetsGroupGuid] = @AssetsGruopGuid or @AssetsGruopGuid = 0x0)
		and (S.Guid = @AssetsGuid or @AssetsGuid = 0x0)
		and (S.CurrentAssetsAreaGuid = @AssetsAreaGuid or @AssetsAreaGuid = 0x0)
		
	---------ÇáÞíãÉ ÇáÌÏíÏÉ
	Select 
		Max(beginDate) as [MaxDate],
		D.AssetsGuid
	into #NewAssetsValue1
	from 
		AssetsDepreciationDetail D
		inner join #RPrcAssetsInventory S on S.AssetsGuid = D.AssetsGuid
	Group By
		D.AssetsGuid
		
	Select 
		D.AssetsGuid,
		NewAssetsValue
	into #NewAssetsValue
	from 
		AssetsDepreciationDetail D
		inner join #NewAssetsValue1 S on S.AssetsGuid = D.AssetsGuid and MaxDate = D.BeginDate
		
	Update #RPrcAssetsInventory
	Set
		[NewAssetsValue] = O.[NewAssetsValue]
	From
		#RPrcAssetsInventory R
		inner join #NewAssetsValue O on O.AssetsGuid = R.AssetsGuid
	--------------		
	Update #RPrcAssetsInventory
	Set
		[Addition] = O.[Addition],
		[Decrease] = O.[Decrease],
		[Maintenance] = O.[Maintenance]
	From
		#RPrcAssetsInventory R
		inner join #InvAssetsOperation O on O.AssetsGuid = R.AssetsGuid
		
	Update #RPrcAssetsInventory
	Set
		[Depreciation] = O.[Depreciation]
	From
		#RPrcAssetsInventory R
		inner join #InvAssetsDepreciation O on O.AssetsGuid = R.AssetsGuid

	Update #RPrcAssetsInventory
	Set
		[Total] = ISNULL(EnterValue,0) - ISNULL(ScrapValue,0) + ISNULL([Addition],0) - ISNULL([Decrease],0) - ISNULL([Depreciation],0)
		
	insert into #RPrcAssetsInventory
	Select 
		'' as Code,
		'' as name,
		'' as ltnName,
		'' as BarCode,
		[AssetsGroup] as [AssetsGroup],
		'' as CurrentArea,
		Null as [Age],
		Sum(OldYearDepreciation),
		
		Sum(EnterValue),
		Sum(ScrapValue),
		Sum([NewAssetsValue]),
		Sum([Addition]),
		Sum([Decrease]),
		Sum([Maintenance]),		
		Sum([Depreciation]),
		Sum([Total]),
		
		'' as Note,
		0x0 as AssetsGuid,
		1 as [Sort]
	From
		#RPrcAssetsInventory
	group By
		[AssetsGroup]

	insert into #RPrcAssetsInventory
	Select 
		'' as Code,
		'' as name,
		'' as ltnName,
		'' as BarCode,
		dbo.SC('ÇáãÌãæÚ') as [AssetsGroup],
		'' as CurrentArea,
		Null as [Age] ,
		Sum(OldYearDepreciation),
		Sum(EnterValue),
		Sum(ScrapValue),
		Sum([NewAssetsValue]),
		Sum([Addition]),
		Sum([Decrease]),
		Sum([Maintenance]),		
		Sum([Depreciation]),
		Sum([Total]),
		
		'' as Note,
		0x0 as AssetsGuid,
		2 as [Sort]
	From
		#RPrcAssetsInventory
	where
		Sort = 1

	Select
		*
	From
		#RPrcAssetsInventory
	where
		(Sort <> 0 or @TotalOnly = 0)
		and ( IsNull(Depreciation,0) <> 0 or @AssetsDepreciation = 1 or Sort = 2)
	Order By
		Case when sort = 2 then 1 else 0 end ,  [AssetsGroup], Sort, Code

	

GO
/****** Object:  StoredProcedure [dbo].[PrcAssetsOperation]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcAssetsOperation]
(
	@AssetsGruopGuid uniqueidentifier = 0x0,
	@AssetsGuid uniqueidentifier = 0x0,
	@AssetsAreaGuid uniqueidentifier = 0x0,
	@Flag1 Bit = 1,
	@Flag2 Bit = 1,
	@Flag3 Bit = 1,
	@CurrencyGuid [uniqueidentifier] = '11111111-C748-4B13-8B91-1E9B299DF1C1',
	@CurrencyVal Float = 1,
	@Date1 DateTime = '1/1/2007',
	@Date2 DateTime = '1/1/2014'
)   
as
	if @CurrencyVal = 0 
	Set @CurrencyVal = 1

	Select 
		A.Date,
		A.Number,
		S.Code,
		S.name,
		s.ltnName,
		S.[AssetsGroup],
		S.CurrentArea,
		Case 
			when A.Flag = 1 then dbo.SC('ÅÖÇÝÉ')
			when A.Flag = 2 then dbo.SC('ÅÓÊÈÚÇÏ')
			when A.Flag = 3 then dbo.SC('ÕíÇäÉ')
		end as [StrFlag],
		C.Code as AccountCode,
		C.Name as AccountName,
		A.value *
		Case when [A].[CurrencyGuid] = @CurrencyGuid then 1 
				else [A].[CurrencyVal] / @CurrencyVal 
		end as Value,
		My.Code as Currency,
		A.age,
		A.Note,
		A.[flag],
		A.Guid,
		S.Guid as AssetsGuid,
		0 as [Sort]
	into #RPrcAssetsOperation
	From 
		[AssetsOperation] A
		inner join [vwAssets] S on S.Guid = A.AssetsGuid
		inner join [vwAccount] C on C.Guid = A.accountGuid
		inner join [vwCurrency] My on My.Guid = A.CurrencyGuid
	where
		 (S.[AssetsGroupGuid] = @AssetsGruopGuid or @AssetsGruopGuid = 0x0)
		and (A.Guid = @AssetsGuid or @AssetsGuid = 0x0)
		and (S.CurrentAssetsAreaGuid = @AssetsAreaGuid or @AssetsAreaGuid = 0x0)
		and (A.Date between @Date1 and @Date2)
		and (
				(A.flag = 1 and @Flag1 = 1)
				or (A.flag = 2 and @Flag2 = 1)
				or (A.flag = 3 and @Flag3 = 1)
			)

	insert into #RPrcAssetsOperation
	Select 
		Null as Date,
		Null as Number,
		Null as Code,
		Null as name,
		Null as ltnName,
		Null as [AssetsGroup],
		Null as CurrentArea,
		Null as [StrFlag],
		Null as AccountCode,
		Null as AccountName,
		Sum(value),
		Null as Currency,
		Null as age,
		Null as Note,
		0 as [flag],
		0x0 as Guid,
		0x0 as AssetsGuid,
		1 as [Sort]
	From 
		#RPrcAssetsOperation
		
	Select
		*
	From
		#RPrcAssetsOperation
	Order By
		Sort, Date, Code
	

GO
/****** Object:  StoredProcedure [dbo].[PrcAutoRenewalContract]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcAutoRenewalContract]
(
	@MaxDate int = 42644,
	@EndOnly Bit = 1
)
  
as
	
	Declare @RC int

	----Diable Index
	exec PrcCheckIndex '', 'LeaseApartment', 0

	--ÇáÈÇÆÚ
	Declare @SalesMan uniqueidentifier	
	Select @SalesMan = [Str] from [Realty_Detail_users]
    where [ParentGuid]=(Select Top 1 userGuid from CurrentUsers where Spid = @@spid)
    and [IdCard]= 34
    
    if @SalesMan = 0x0
    Set @SalesMan = Null
    
	--ÌáÈ ÂÎÑ ÚÞÏ ááÔÞÉ ÇáãÍÏÏÉ
	Select
		ApartmentGuid,
		MAX(FromDate) as FromDate
	into #LastContract
    From 	
		LeaseApartment [Tb]
		inner join Resource R on R.Guid = tb.Guid and Spid = @@Spid
	where
		[Tb].[IsAutoRenewal] = 1
	Group by
		ApartmentGuid
	
	--ÅäåÇÁ ÇáÚÞæÏ
	if @EndOnly = 1 
	Update
		LeaseApartment
	set
		ContractFinish = 1,
		ContractFinishDate = tb.ToDate
    From 	
		LeaseApartment [Tb]
		inner join [vwContractType] [T] on [T].[Guid] = [tb].[TypeGuid]
		inner join Resource R on R.Guid = tb.Guid and Spid = @@Spid
		
		inner join #LastContract L on L.ApartmentGuid = tb.ApartmentGuid and L.FromDate = tb.FromDate
	where
		--(([Tb].[IsAutoRenewal] = 1) or (@EndOnly = 1))and
		 (isNull(ContractFinish,0) = 0)
		--and Tb.Guid Not in (Select Guid from #T_RNConmp_contra)

	Set @RC = @@ROWCOUNT

	
	if @EndOnly = 1 
	begin
		Select 
			@RC as [RowCount],
			0 as FailCount

		return
	end
	
	--ÝÍÕ ÇáÊÇÑíÎ
	Declare @p_FromDate Datetime,
			@p_ToDate Datetime,
			@P_RealtyGuid uniqueidentifier
			
	Create Table #T_RNConmp_contra
	(Number int, Guid uniqueidentifier)
	DECLARE @cursor_Name CURSOR 
	Set @cursor_Name = CURSOR FAST_FORWARD FOR 

	Select
		[Tb].[ApartmentGuid], 
		Case 
			when [ContractFinish] = 0 then Dateadd(Day,1,[ToDate]) 
			when [ContractFinish] = 1 then Dateadd(Day,1,[ContractFinishDate]) 
		end as [FromDate],
		
		Case when Period <> 12 then dbo.FnAddDate('m',Period+1,
											Case 
												when [ContractFinish] = 0 then [ToDate]
												when [ContractFinish] = 1 then [ContractFinishDate]
											end)
			 when Period = 12 then Dateadd(Day,DATEDIFF(Day, [Tb].Fromdate, [Tb].Todate),
											Case 
												when [ContractFinish] = 0 then [ToDate]
												when [ContractFinish] = 1 then [ContractFinishDate]
											end)
		end as [ToDate]
	From 	
		LeaseApartment [Tb]
		inner join [vwContractType] [T] on [T].[Guid] = [tb].[TypeGuid]
		inner join Resource R on R.Guid = tb.Guid and Spid = @@Spid
		
		inner join #LastContract L on L.ApartmentGuid = tb.ApartmentGuid and L.FromDate = tb.FromDate
	where
		([Tb].[IsAutoRenewal] = 1) or (@EndOnly = 1)
	
	OPEN @cursor_Name
	FETCH NEXT FROM @cursor_Name INTO @P_RealtyGuid, @p_FromDate, @p_ToDate
			
	WHILE @@FETCH_STATUS = 0
	BEGIN
		insert into #T_RNConmp_contra
		exec PrcTestRentedFlat 0x0, @P_RealtyGuid, @p_FromDate, @p_ToDate
	  FETCH NEXT FROM @cursor_Name INTO @P_RealtyGuid, @p_FromDate, @p_ToDate
	
	END
	
	CLOSE @cursor_Name
	DEALLOCATE @cursor_Name
	-------------
	
	Update
		LeaseApartment
	set
		ContractFinish = 1,
		ContractFinishDate = tb.ToDate
    From 	
		LeaseApartment [Tb]
		inner join [vwContractType] [T] on [T].[Guid] = [tb].[TypeGuid]
		inner join Resource R on R.Guid = tb.Guid and Spid = @@Spid
		
		inner join #LastContract L on L.ApartmentGuid = tb.ApartmentGuid and L.FromDate = tb.FromDate
	where
		([Tb].[IsAutoRenewal] = 1) 
		and (isNull(ContractFinish,0) = 0)
		and Tb.Guid Not in (Select Guid from #T_RNConmp_contra)

	insert into dbo.[LeaseApartment] 
	([Number], [Guid], [SecLvl], [EditDate], [Mark], [TypeGuid], [ContractNo], [CustomerGuid], [RentInfoGuid], [SalesManGuid], [BuildingGuid], [ApartmentGuid], [ApartmentType], [CostGuid], [FromDate], [ToDate], [Period], [RentContractType], [Rent], [MonthlyValue], [CurrencyGuid], [CurrencyVal], [PayType], [Note], [Note2], [Trademark], [Purpose], [Whereabouts], [LeaseKind], [RevenueAccountGuid], [CustAccountGuid], [CommissionFromCustPercent], [CommissionFromCustValue], [AcCommissionFromCustGuid], [AcCommissionFromCustNote], [CommissionFromOwnerPercent], [CommissionFromOwnerValue], [AcCommissionFromOwnerGuid], [AcCommissionFromOwnerNote], [CreateContractEntry], [ContractFinish], [ContractFinishDate], [ResultingAmount], [ResultingAmount2], [RoundKind], [ResultingNote], [Fine], [FineAccount], [CreateResultingEntry], [FineNote], [InsuranceValuePercent], [InsuranceValue], [InsuranceAccountGuid], [InsuranceValueOld], [ContractPrice], [AccountContractPrice], [CertificatValue], [AccountCertificatValue], [RentDuration], [Rentype], [TermsOfPayment], [ResidentCount], [ElectricityInsurance], [Step1Complete], [Step2Complete], [Step3Complete], [Step4Complete], [Step5Complete], [Certification], [DiscountPercent], [DiscountValue], [DiscountAccountGuid], [UserGuid], [BranchGuid], [ElectricityCounter], [FineRevenueAccountGUID], [NewState], [OtherFee], [OtherFeeAccountGUID], [License1No], [License2No], [License3No], [License1Date1], [License2Date1], [License3Date1], [License1Date2], [License2Date2], [License3Date2], [Ltnwhereabouts], [LtnPurpose], [LtnRentDuration], [LtnRentype], [LtnTermsOfPayment], [IsRounded], [Leave], [LeaveDate], [CountOldContract], [AcquittancePrinted], [AcquittancePrintDate], [AcquittancePrintedByGuid], [Judicial], [PrvContractGuid],  [IsAutoRenewal])
	Select	
		Null as [Number], 
		Newid() as [Guid], 
		[Tb].[SecLvl], 
		dbo.fndateonly(GETDATE()) as [EditDate], 
		[Tb].[Mark], 
		[Tb].[TypeGuid], 
		[Tb].[ContractNo]+'/2' as [ContractNo], 
		[Tb].[CustomerGuid], 
		[Tb].[RentInfoGuid], 
		@SalesMan as [SalesManGuid], 
		[Tb].[BuildingGuid], 
		[Tb].[ApartmentGuid], 
		[Tb].[ApartmentType], 
		[Tb].[CostGuid], 
		Case 
			when [ContractFinish] = 0 then Dateadd(Day,1,[ToDate]) 
			when [ContractFinish] = 1 then Dateadd(Day,1,[ContractFinishDate]) 
		end as [FromDate],
		
		Case when Period <> 12 then dbo.FnAddDate('m',Period+1,
											Case 
												when [ContractFinish] = 0 then [ToDate]
												when [ContractFinish] = 1 then [ContractFinishDate]
											end)
			 when Period = 12 then Dateadd(Day,DATEDIFF(Day, [Tb].Fromdate, [Tb].Todate),
											Case 
												when [ContractFinish] = 0 then [ToDate]
												when [ContractFinish] = 1 then [ContractFinishDate]
											end)
		end as [ToDate],
		[Tb].[Period], 
		[Tb].[RentContractType], 
		[Tb].[Rent], 
		[Tb].[MonthlyValue], 
		[Tb].[CurrencyGuid], 
		[Tb].[CurrencyVal], 
		[Tb].[PayType], 
		[Tb].[Note], 
		[Tb].[Note2], 
		[Tb].[Trademark], 
		[Tb].[Purpose], 
		[Tb].[Whereabouts], 
		[Tb].[LeaseKind], 
		[Tb].[RevenueAccountGuid], 
		[Tb].[CustAccountGuid], 
		case when SUBSTRING([OpNewContract], 4, 1) = '1' then [CommissionFromCustPercent] else 0 end [CommissionFromCustPercent], 
		case when SUBSTRING([OpNewContract], 4, 1) = '1' then [CommissionFromCustValue] else 0 end as [CommissionFromCustValue],
		[Tb].[AcCommissionFromCustGuid], 
		[Tb].[AcCommissionFromCustNote], 
		case when SUBSTRING([OpNewContract], 5, 1) = '1' then [CommissionFromOwnerPercent] else 0 end [CommissionFromOwnerPercent], 
		case when SUBSTRING([OpNewContract], 5, 1) = '1' then [CommissionFromOwnerValue] else 0 end [CommissionFromOwnerValue],
		[Tb].[AcCommissionFromOwnerGuid], 
		[Tb].[AcCommissionFromOwnerNote], 
		[Tb].[CreateContractEntry], 
		Cast( 0 as bit) as [ContractFinish], 
		Cast( Null as DateTime)  as [ContractFinishDate],
		0 as [ResultingAmount],
		0 as [ResultingAmount2],
		[Tb].[RoundKind], 
		[Tb].[ResultingNote], 
		0 as [Fine],
		[Tb].[FineAccount], 
		Cast( 0 as bit) as [CreateResultingEntry],
		[Tb].[FineNote], 
		[Tb].[InsuranceValuePercent], 
		0 as [InsuranceValue],
		[Tb].[InsuranceAccountGuid], 
		[InsuranceValue] + Isnull([InsuranceValueOld],0) as [InsuranceValueOld],
		case when SUBSTRING([OpNewContract], 1, 1) = '1' then [ContractPrice] else 0 end as [ContractPrice], 
		[Tb].[AccountContractPrice], 
		case when SUBSTRING([OpNewContract], 2, 1) = '1' then [CertificatValue] else 0 end [CertificatValue],
		[Tb].[AccountCertificatValue], 
		[Tb].[RentDuration], 
		[Tb].[Rentype], 
		[Tb].[TermsOfPayment], 
		[Tb].[ResidentCount], 
		[Tb].[ElectricityInsurance], 
		[Tb].[Step1Complete], 
		[Tb].[Step2Complete], 
		[Tb].[Step3Complete], 
		[Tb].[Step4Complete], 
		[Tb].[Step5Complete], 
		[Tb].[Certification], 
		[Tb].[DiscountPercent], 
		[Tb].[DiscountValue], 
		[Tb].[DiscountAccountGuid], 
		[Tb].[UserGuid], 
		[Tb].[BranchGuid], 
		[Tb].[ElectricityCounter], 
		[Tb].[FineRevenueAccountGUID], 
		[Tb].[NewState], 
		case when SUBSTRING([OpNewContract], 3, 1) = '1' then [OtherFee] else 0 end OtherFee,		
		
		[Tb].[OtherFeeAccountGUID], 
		[Tb].[License1No], 
		[Tb].[License2No], 
		[Tb].[License3No], 
		[Tb].[License1Date1], 
		[Tb].[License2Date1], 
		[Tb].[License3Date1], 
		[Tb].[License1Date2], 
		[Tb].[License2Date2], 
		[Tb].[License3Date2], 
		[Tb].[Ltnwhereabouts], 
		[Tb].[LtnPurpose],
		[Tb].[LtnRentDuration],
		[Tb].[LtnRentype],
		[Tb].[LtnTermsOfPayment],
		[Tb].[IsRounded],
		[Tb].[Leave],
		[Tb].[LeaveDate],
		[Tb].[CountOldContract],
		[Tb].[AcquittancePrinted],
		[Tb].[AcquittancePrintDate],
		[Tb].[AcquittancePrintedByGuid],
		[Tb].[Judicial],
		[Tb].[PrvContractGuid],
		[Tb].[IsAutoRenewal]
	From 	
		LeaseApartment [Tb]
		inner join [vwContractType] [T] on [T].[Guid] = [tb].[TypeGuid]
		inner join Resource R on R.Guid = tb.Guid and Spid = @@Spid
		
		inner join #LastContract L on L.ApartmentGuid = tb.ApartmentGuid and L.FromDate = tb.FromDate
	where
		[Tb].[IsAutoRenewal] = 1
		and Tb.ApartmentGuid Not in (Select Guid from #T_RNConmp_contra)
	
	Set @RC = @@ROWCOUNT
	
	Declare @CreateEntry bit, 
			@Guid uniqueidentifier,
			@TypeGuid uniqueidentifier
			
	-- ÃäãÇØ ÇáÚÞæÏ
		Create Table #T_RNCon
		(
			[Id] int Identity(1,1),
			[Guid] Uniqueidentifier,
			[TypeGuid] Uniqueidentifier,
			CreateEntry bit
		)
		insert into #T_RNCon
		([Guid], [TypeGuid],CreateEntry)	
		Select 
			[Guid],
			[TypeGuid],
			CreateContractEntry
		From
			[LeaseApartment]
		where 
			[Number] is Null
		Order By
			[FromDate]

		Alter Table [LeaseApartment] Disable Trigger All
		
		--	ÇÚÇÏÉ ÊæáíÏ ÇáÞíæÏ
		DECLARE cursor_Name CURSOR FAST_FORWARD FOR 
		Select Guid, [TypeGuid],CreateEntry from #T_RNCon
		
		OPEN cursor_Name
		FETCH NEXT FROM cursor_Name INTO @Guid, @TypeGuid,@CreateEntry
		
		WHILE @@FETCH_STATUS = 0
		BEGIN
			Update [LeaseApartment] Set Number = (Select Max(Number) + 1 From [LeaseApartment] where TypeGuid = @TypeGuid)
			where 
				(Guid = @Guid )
				
			if @CreateEntry = 1
			begin
				exec [PrcCreateContractFlatShopEntry] @Guid, @MaxDate
			end
			else
			begin
				Delete HEntry where Guid = @Guid 
			end
			
		  FETCH NEXT FROM cursor_Name INTO @Guid, @TypeGuid,@CreateEntry
		
		END
		
		CLOSE cursor_Name
		DEALLOCATE cursor_Name
		
		
		Alter Table [LeaseApartment] Enable Trigger All

	
	exec PrcCheckIndex '', 'LeaseApartment', 1
	
	Select 
		@RC as [RowCount],
		(Select Count(*) from #T_RNConmp_contra) as FailCount


GO
/****** Object:  StoredProcedure [dbo].[PrcAutoRenewalContractLand]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcAutoRenewalContractLand]
(
	@MaxDate int = 42644
)
  
as	
	Select 0 as [RowCount], 0 as FailCount
	return	


GO
/****** Object:  StoredProcedure [dbo].[PrcAutoRenewalContractParking]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcAutoRenewalContractParking]
(
	@MaxDate int = 42644
)
  
as
	Select 0 as [RowCount], 0 as FailCount
	return	
	

GO
/****** Object:  StoredProcedure [dbo].[prcBackupJob]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE  PROCEDURE [dbo].[prcBackupJob]
	@DbName varchar(128) = 'Aq',
	@Path varchar(4000) = 'D:\',
	@Path2 varchar(4000) = ''
  
AS
	IF RIGHT(@Path, 1) <> '\' 
	SET @Path = @Path + '\'	

	SET @Path = @Path + @DbName

	Declare @Disk varchar(4000),
			@SQL varchar(4000)
	SET @Disk = ''''+ @Path +'_'+ 
				Cast(DatePart(dd, GetDate()) AS varchar(2)) + '_' +
				Cast(DatePart(mm, GetDate()) AS varchar(2)) + '_' +
				Cast(DatePart(yyyy, GetDate()) AS varchar(4)) + '_'+

				Cast(DatePart(hh, GetDate()) AS varchar(2)) + '_' +
				Cast(DatePart(mi, GetDate()) AS varchar(2)) +'.bak' + ''''

	--Print(@Disk)
	SET @SQL = 'BACKUP DATABASE' +' '+ @DbName + ' TO DISK = '+ @Disk+'WITH INIT,SKIP, NOREWIND, NOUNLOAD, COMPRESSION,  STATS = 10'
        print (@SQL)
	Exec(@SQL)

	---- Backup2
	IF (@path2 <> '')
	BEGIN
		IF (RIGHT(@Path2, 1) <> '\' )
		SET @Path2 = @Path2 + '\'	
	
		SET @Path2 = @Path2 + @DbName
	
		SET @Disk = ''''+ @Path2 +'_'+ 
					Cast(DatePart(dd, GetDate()) AS varchar(2)) + '_' +
					Cast(DatePart(mm, GetDate()) AS varchar(2)) + '_' +
					Cast(DatePart(yyyy, GetDate()) AS varchar(4)) + '_'+
	
					Cast(DatePart(hh, GetDate()) AS varchar(2)) + '_' +
					Cast(DatePart(mi, GetDate()) AS varchar(2)) +'.bak' + ''''
	
		--Print(@Disk)
	SET @SQL = 'BACKUP DATABASE' +' '+ @DbName + ' TO DISK = '+ @Disk+'WITH INIT,SKIP, NOREWIND, NOUNLOAD, COMPRESSION,  STATS = 10'
	        print (@SQL)
		Exec(@SQL)
	END


GO
/****** Object:  StoredProcedure [dbo].[PrcBalance]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[PrcBalance]
 
as
	Select
		(Select Count(*) From Account) as Ac,
		(Select Count(*) From HEntry) as H,
		(Select Count(*) From Secondary_Entry) as SE,
		(Select Count(*) From Bill) as B,
		(Select Count(*) From LeaseApartment) as L
GO
/****** Object:  StoredProcedure [dbo].[PrcBalanceSheet]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Proc [dbo].[PrcBalanceSheet]
(
	@AccountGuid [uniqueidentifier]= 'FB389436-59C8-441D-9AD3-75668D64D6F7'
	,@BranchGuid [uniqueidentifier] = 0x0
	,@CostGuid [uniqueidentifier] = 0x0
	,@Level int = 5
	,@ShowEmptyBal Bit = 0
	,@ShowMainAccount Bit = 0
	,@CurrencyGuid [uniqueidentifier] = '11111111-C748-4B13-8B91-1E9B299DF1C1'
	,@CurrencyVal Float = 1
	,@ShowDetails bit = 1 -- ÅÙåÇÑ ÊÝÇÕíá ÇáÍÓÇÈÇÊ ÇáÎÊÇãíÉ
	,@IsPosted Bit = 1
	,@IsNotPosted Bit = 1
	,@Date1 DateTime = '1/2/2007'
	,@Date2 DateTime = '12/30/2015'
    ,@ContainOldEntry Bit = 0
	,@PriceMode int = 1
	,@SpecificPrice int = -1
)
  
as
	set nocount on 
	
	--ÞíÏ ÈÖÇÚÉ ÂÎÑ ÇáãÏÉ
	exec [dbo].[PrcMatInventory]
		@GroupGuid = 0x0,
		@MatGuid = 0x0,
		@StoreGuid = 0x0,
		@CostGuid = @CostGuid,
		@Class  = '',
		@ClassGrouping = 0,
		@Unit = 0,
		@BillPost = 2,
		@CkDate = 0,
		@PriceMode = @PriceMode,
		@SpecificPrice = @SpecificPrice,
		@CurrencyGuid = @CurrencyGuid,
		@CurrencyVal = @CurrencyVal,
		@ShowEmpltyMat = 0,
		@ShowDetailStore = 0,
		@ShowMatTypeStore = 1,
		@ShowMatTypeService = 0,
		@Date1 = '1/1/2007',
		@Date2 = '1/1/2015',		
		@RepKind = 1 --0 Normal		1 Total

	--Select * from Dentry where ParentGuid = '{19191919-8282-7373-6464-656565656566}'
	
	
	Select * Into dbo.#fnGetAccountList_BS from [dbo].[fnGetAccountList](@AccountGuid)
	Select * Into dbo.#fnGetAccountList from [dbo].[fnGetAccountList](0x0)
	
	--Select * from #fnGetAccountList
	
	Select O.* Into #fnGetCostList_BS 
	from 
		[dbo].[fnGetCostList](@CostGuid) C
		inner join [Cost] O on O.Guid = C.GUID
	
	Set noCount on
	-- ßÇãá ÇáÍÓÇÈÇÊ
	Select
		[Ac2].[Code] COLLATE database_default as [Code]
		,[Ac2].[Code]+'-'+[Ac2].[Name] COLLATE database_default as [AccountName]
		,[Ac].[Level]
		,isnull([Ac].[Path],'') as [Path]
		,[Ac2].[Guid]
		,[Ac2].[ParentGuid]
		,Case when Type = 0 then [Ac2].[FinalGuid] 
			  when Type = 1 then [Ac2].[ParentGuid] 
		end as [FinalGuid]
		,[Ac2].[Type]
		,Cast('' as Varchar(256)) COLLATE database_default as [Sort]
		,Isnull([SAc].[AcNSons],0) as [AcNSons]
	into #Ac
	From
		#fnGetAccountList [Ac] 
		inner join [vwAccount] [Ac2] on [Ac2].[Guid] = [Ac].[Guid]
		left join [dbo].#fnGetAccountList_BS [AcF] on [AcF].[Guid] = [Ac2].[FinalGuid]   
		left join (Select 
						Count(Number)as [AcNSons] 
						,[ParentGuid] 
					From 
						[Account] [SAc] 
					Group By
						[ParentGuid]					
				)[SAc] on [SAc].[ParentGuid] = [Ac2].[Guid]
	--Select * from #Ac order by Path
--	return

	CREATE INDEX IX_AC_Code ON #Ac (Code)
	CREATE INDEX IX_AC_Type ON #Ac ([Type])
	
	-- ÝÑÒ ÇáÍÓÇÈÇÊ
	Declare @AcSort Varchar(256)
	Declare @SortCode Varchar(256)
	Set @SortCode = ''

	DECLARE cursor_Name CURSOR FAST_FORWARD FOR 
	SELECT ([Code]) FROM [#Ac] where [Type] = 1	Order By [Code]
	OPEN cursor_Name
	FETCH NEXT FROM cursor_Name INTO @AcSort
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
		
		Set @SortCode = @SortCode + 'Z'
	
		
		UpDate #Ac Set [Sort] = @SortCode
		where [Code] = @AcSort and Type = 1

		
		update Ac1 Set [Sort] = @SortCode + isNull([Ac1].[Code],'')
			From 
				#Ac Ac1 
				inner join #Ac Ac2 On Ac1.[FinalGuid] = [Ac2].[Guid]
		where
			[Ac2].[Code] = @AcSort and [Ac1].[Type] = 0
		
		
		Print '_______________________________'
	  FETCH NEXT FROM cursor_Name INTO @AcSort
	
	END
	
	CLOSE cursor_Name
	DEALLOCATE cursor_Name

	--Select * from #Ac Order by [Sort]
	--Return
	--

	-- ÍÑßÇÊ ÇáÞíæÏ
	Select 
		[Ac].[Guid] as [AcGuid]
		,Sum([En].[D_Debit]*
			Case when [En].[D_CurrencyGuid] = @CurrencyGuid then 1 
			else [En].[D_CurrencyVal] / @CurrencyVal end
			) as [Debit]
		,Sum([En].[D_Credit]*
			Case when [En].[D_CurrencyGuid] = @CurrencyGuid then 1 
			else [En].[D_CurrencyVal] / @CurrencyVal end
			) as [Credit]
	into #Entry
	from 
		--[DEntry] [En]
		--inner Join [VwEntry] [M] on [M].[Guid] = [En].[ParentGuid]
		[vwOldYearEntry] En
		inner Join [dbo].#fnGetAccountList [Ac] on [Ac].[Guid] = [En].[D_AcGuid]
		left Join #fnGetCostList_BS [Co2] on [Co2].[Guid] = [En].[D_CostGuid]
	where 
		([En].[H_Date] between @Date1 And @Date2)
		and ([En].[H_BranchGuid] = @BranchGuid or @BranchGuid = 0x0)
		and ([Co2].[Guid] Is Not Null or @CostGuid = 0x0)
		and ([En].[D_IsVisible] = 1 or [En].[D_CurrencyGuid] = @CurrencyGuid)
		and (
				([En].[H_IsPosted] = 1 and @IsPosted = 1)
				or ([En].[H_IsPosted] = 0  and @IsNotPosted = 1)
			)
		and (En.isOldEntry = 0 or @ContainOldEntry = 1)
	Group By
		[Ac].[Guid]
	
	--Select * from #Entry	
	--return
	--

	-- ÇáÑÕíÏ ÇáÓÇÈÞ
	Select 
		[Ac].[Guid] as [AcGuid]
		,Sum([En].[D_Debit]) as [Debit]
		,Sum([En].[D_Credit]) as [Credit]
	into #OldBalance
	from 
		--[DEntry] [En]
		--inner Join [vwEntry] [M] on [M].[Guid] = [En].[ParentGuid]
		[vwOldYearEntry] En
		inner Join [dbo].#fnGetAccountList_BS [Ac] on [Ac].[Guid] = [En].[D_AcGuid]
		left Join #fnGetCostList_BS [Co2] on [Co2].[Guid] = [En].[D_CostGuid]
	where 
		([En].[H_Date] < @Date1)
		and ([En].[H_BranchGuid] = @BranchGuid or @BranchGuid = 0x0)
		and ([En].[D_IsVisible] = 1 or [En].[D_CurrencyGuid] = @CurrencyGuid)
		and (
				([En].[H_IsPosted] = 1 and @IsPosted = 1)
				or ([En].[H_IsPosted] = 0  and @IsNotPosted = 1)
			)
		and ([Co2].[Guid] Is Not Null or @CostGuid = 0x0)
	Group By [Ac].[Guid]
	
	
--	Select * from #OldBalance	
	--	

	Select 
		[Ac].[AccountName] COLLATE database_default as [AccountName]
		,[Ac].[Level]
		,[E].[Debit]
		,[E].[Credit]
		,[B].[Debit] as [OldDebit]
		,[B].[Credit] as [OldCredit]
		,[Ac].[Path]
		,[Ac].[Guid] as [AcGuid]
		,[Ac].[ParentGuid]
		,[Ac].[FinalGuid]
		,[Ac].[Type]
		,[Ac].[Sort]
		,[Ac].[AcNSons]
	Into #Tmp_Balance_Res1
	From
		#Ac	[Ac]
		left join #Entry [E] on [E].[AcGuid] = [Ac].[Guid]
		left join #OldBalance [B] on [B].[AcGuid] = [Ac].[Guid]
	
	
	Declare @AcLevel int, @Tmp_FinalGuid uniqueidentifier

	Create Table #Res2
	(
		[FinalGuid] uniqueidentifier
		,[SumDebit] Float
		,[SumCredit] Float
		,[SumOldDebit] Float
		,[SumOldCredit] Float
	)
	-- ÇáÍÓÇÈÇÊ ÇáÎÊÇãíÉ
	SET @acLevel = (SELECT MAX([Level]) FROM [#Tmp_Balance_Res1] where Type = 1) 
	WHILE @acLevel >= 0  
	BEGIN  

		print '@acLevel'
		print @acLevel
		
		--Select [Level], Guid From #Ac where [Level] = @acLevel and Type = 1

		Set @Tmp_FinalGuid = (Select Top 1 Guid From #Ac where [Level] = @acLevel and Type = 1)
		
		Delete #Res2
		
		insert into #Res2
		SELECT
			[FinalGuid] 
			,isnull(Sum([Debit]),0)			as  [SumDebit]
			,isnull(Sum([Credit]),0)		as  [SumCredit]
			,isnull(Sum([OldDebit]),0)		as  [SumOldDebit]
			,isnull(Sum([OldCredit]),0)		as  [SumOldCredit]
		FROM 
			[#Tmp_Balance_Res1]  
		WHERE  
			[FinalGuid] = @Tmp_FinalGuid
		GROUP BY 
			[FinalGuid]		
	
			
		UPDATE [#Tmp_Balance_Res1] SET  
			[Debit] 		= isnull([Sons].[SumDebit],0)
			,[Credit]	 	= isnull([Sons].[SumCredit],0)
			,[OldDebit]		= isnull([Sons].[SumOldDebit],0) 
			,[OldCredit]	= isnull([Sons].[SumOldCredit],0)
		FROM  
				[#Tmp_Balance_Res1] AS [Father] 
				INNER JOIN #Res2 AS [Sons] ON [Father].[acGUID] = [Sons].[FinalGuid] 
		
		SET @acLevel = @acLevel - 1 
	End

	--Select * from [#Tmp_Balance_Res1]
	--return
	
	SET @acLevel = (SELECT MAX([Level]) FROM [#Tmp_Balance_Res1]) 
	WHILE @acLevel >= 0  
	BEGIN  
		UPDATE [#Tmp_Balance_Res1] SET  
			[Debit] 		= isnull([SumDebit],0)
			,[Credit]	 	= isnull([SumCredit],0)
			,[OldDebit]		= isnull([SumOldDebit],0) 
			,[OldCredit]	= isnull([SumOldCredit],0)
			FROM  
				[#Tmp_Balance_Res1] AS [Father] INNER JOIN (  
					SELECT 
						[ParentGuid] 
						,isnull(Sum([Debit]),0)			as  [SumDebit]
						,isnull(Sum([Credit]),0)		as  [SumCredit]
						,isnull(Sum([OldDebit]),0)		as  [SumOldDebit]
						,isnull(Sum([OldCredit]),0)		as  [SumOldCredit]
					FROM 
						[#Tmp_Balance_Res1]  
					WHERE  
						[Level] = @acLevel and [Type] = 0
					GROUP BY 
						[ParentGuid] 
					) AS [Sons] 
				ON [Father].[acGUID] = [Sons].[ParentGuid] 

		SET @acLevel = @acLevel - 1 
	End

	--return
	--Select * from #Tmp_Balance_Res1
	Create index IX_Path_Tmp_Balance_Res1 On #Tmp_Balance_Res1 ([Path])
	
--	Select 
--		[R].[AccountName] COLLATE database_default as [AccountName] ,
--		--(Select Case when [Debit] > [Credit] then 0 else 1 end From #Tmp_Balance_Res1 where [Path] = left([R].[Path],9))  as [Pa],
--		left([R].[Path],9) ,
--		Case when 
--				(Select Case when isNull([Debit],0) > isNull([Credit],0) then 0 else 1 end From #Tmp_Balance_Res1 where [Path] = left([R].[Path],9)) = 0
--			 then isnull([Debit],0) - isnull([Credit],0) 
--			 else 
--				0 
--		end as [BalanceDebit],

--		Case when 
--				(Select Case when isNull([Debit],0) > isNull([Credit],0) then 0 else 1 end From #Tmp_Balance_Res1 where [Path] = left([R].[Path],9)) = 1
--			 then isnull([Credit],0) - isnull([Debit],0) else 
--				0
--		end as [BalanceCredit],

----		Case when isnull([Debit],0) > isnull([Credit],0) then isnull([Debit],0) - isnull([Credit],0) else 0 end as [BalanceDebit],
----		Case when isnull([Debit],0) < isnull([Credit],0) then isnull([Credit],0) - isnull([Debit],0) else 0 end as [BalanceCredit],
--		Case when isnull([Debit],0) > isnull([Credit],0) And Type = 1 then dbo.sc('ÎÓÇÑÉ')
--			 when isnull([Debit],0) < isnull([Credit],0) And Type = 1 then dbo.sc('ÑÈÍ') end COLLATE database_default as [Result],
--		Case when [R].[Type] = 1 then 0 else [R].[Level] end as [Level],
--		[R].[Path],
--		[R].[AcGuid],
--		[R].[ParentGuid],
--		[R].[FinalGuid],
--		[R].[Type],
--		[R].[AcnSons],
--		[R].[Sort]
--	from 
--		#Tmp_Balance_Res1 [R]
--		left join [dbo].#fnGetAccountList_BS [Ac] on [R].[FinalGuid] = [Ac].[Guid]
--	where
--		[Ac].[Guid] is Not Null and ([FinalGuid] = @AccountGuid or @ShowDetails = 1)
		
--		and [R].[AccountName] = '01-ÇáÇÑÈÇÍ æÇáÎÓÇÆÑ '	
--	Order by 
--		[Sort]
	--Select isNull([Debit],0) - isNull([Credit],0)  From #Tmp_Balance_Res1 where [Path] = '0.0000001'
	Select 
		[R].[AccountName] COLLATE database_default as [AccountName] ,
		(Select Case when [Debit] > [Credit] then 0 else 1 end From #Tmp_Balance_Res1 where [Path] = left([R].[Path],9))  as [Pa],
		
		Case when Type = 0 then
			Case when  
					(Select Case when isNull([Debit],0) >= isNull([Credit],0) then 0 else 1 end From #Tmp_Balance_Res1 where [Path] = left([R].[Path],9)) = 0
				 then isnull([Debit],0) - isnull([Credit],0) 
				 else 
					0 
			end 
		else
		Case when isnull([Debit],0) > isnull([Credit],0) then isnull([Debit],0) - isnull([Credit],0) else 0 end
		end
		as [BalanceDebit],

		Case when Type = 0 then
			Case when  
					(Select Case when isNull([Debit],0) < isNull([Credit],0) then 0 else 1 end From #Tmp_Balance_Res1 where [Path] = left([R].[Path],9)) = 0
				 then isnull([Credit],0)  - isnull([Debit],0) 
				 else 
					0 
			end 
		else
		Case when isnull([Debit],0) < isnull([Credit],0) then isnull([Credit],0)  - isnull([Debit],0)  else 0 end
		end
		as [BalanceCredit],

		--Case when isnull([Debit],0) > isnull([Credit],0) then isnull([Debit],0) - isnull([Credit],0) else 0 end as [BalanceDebit],
		--Case when isnull([Debit],0) < isnull([Credit],0) then isnull([Credit],0) - isnull([Debit],0) else 0 end as [BalanceCredit],
		Case when isnull([Debit],0) > isnull([Credit],0) And Type = 1 then dbo.sc('ÎÓÇÑÉ')
			 when isnull([Debit],0) < isnull([Credit],0) And Type = 1 then dbo.sc('ÑÈÍ') end COLLATE database_default as [Result],
		Case when [R].[Type] = 1 then 0 else [R].[Level] end as [Level],
		[R].[Path],
		[R].[AcGuid],
		[R].[ParentGuid],
		[R].[FinalGuid],
		[R].[Type],
		[R].[AcnSons],
		[R].[Sort]
	Into #FirstRes
	from 
		#Tmp_Balance_Res1 [R]
		left join [dbo].#fnGetAccountList_BS [Ac] on [R].[FinalGuid] = [Ac].[Guid]
	where
		[Ac].[Guid] is Not Null and ([FinalGuid] = @AccountGuid or @ShowDetails = 1)
	Order by 
		[Sort]

	--Select * from #FirstRes 

	-- ÇáãÌãæÚ
	Create Table #EndRes 
	(
		[SumDebit] Float Default 0,
		[DebitNote] Varchar(256) COLLATE database_default ,
		[SumCredit] Float Default 0,
		[CreditNote] Varchar(256) COLLATE database_default ,
		[Sort] int
	)
	insert into #EndRes
	Select 
		Sum([BalanceDebit]) as [SumDebit],
		dbo.sc('ÇáãÌãæÚ'),
		Sum([BalanceCredit]),
		dbo.sc('ÇáãÌãæÚ'),
		0
	From 
		#FirstRes [R]
	where
		[Level] = 0 and ([Type] <> 1 or @ShowDetails = 0)

	--ÇáÍÓÇÈÇÊ ÇáÝÇÑÛÉ
	if @ShowEmptyBal = 0 
	delete from #FirstRes
	where isnull([BalanceDebit],0) = 0  and isnull([BalanceCredit],0) = 0
			and Level <> 0

	--ÇáÍÓÇÈÇÊ ÇáÑÆÓíÉ
	if @ShowMainAccount	= 0 
	delete from #FirstRes
	where ([AcnSons] <> 0) and Type = 0


	--ÇáãÓÊæì
	delete from #FirstRes
	where ([level] >= @Level and @Level <> 0) and [Type] <> 1


	Select * from #FirstRes
	Order by 
		[Sort]


	exec dbo.PrcInsertSC 'ÕÇÝí ÇáÑÈÍ'

	Declare @AccountKind int
	Select @AccountKind = COUNT(*) -1 from [dbo].[fnGetAccountParents] (@AccountGuid)
	Declare 
		@EndResTxt1 varchar(255),
		@EndResTxt2 varchar(255)
	Select 
		@EndResTxt1 = 
		Case 
			when @AccountKind = 1 then  
				dbo.sc('ÕÇÝí ÇáÑÈÍ')
			else
				dbo.sc('ãÌãá ÇáÑÈÍ')
		end,
		@EndResTxt2 = 
		Case 
			when @AccountKind = 1 then  
				dbo.sc('ÕÇÝí ÇáÎÓÇÑÉ')
			else
				dbo.sc('ãÌãá ÇáÎÓÇÑÉ')
		end
	
	insert into #EndRes
	Select 
		Case when [SumDebit] < [SumCredit] then [SumCredit] - [SumDebit] end,
		Case when [SumDebit] < [SumCredit] then @EndResTxt1 end ,
		Case when [SumDebit] > [SumCredit] then [SumDebit] - [SumCredit] end,
		Case when [SumDebit] > [SumCredit] then @EndResTxt2 end ,
		1
	From 
		#EndRes [R]
	where
		abs(isnull([SumDebit],0) - isNull([SumCredit],0)) > 0.001

	insert into #EndRes
	Select 
		Sum([SumDebit]),
		dbo.sc('ÇáãÌãæÚ ÇáÚÇã'),
		Sum([SumCredit]),
		dbo.sc('ÇáãÌãæÚ ÇáÚÇã'),
		2
	From 
		#EndRes [R]
	
	Select * from #EndRes

	Delete HEntry where Guid = '{19191919-8282-7373-6464-656565656566}'
	

GO
/****** Object:  StoredProcedure [dbo].[PrcBill_BillPost]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[PrcBill_BillPost]
(
	@BillGuid uniqueidentifier = '6D16C88A-93DD-4A8E-9C45-6A5AF8D62838'
)
  
as
	Declare @IsPost Bit 
	Select @IsPost = [IsPosted] From Bill where Guid = @BillGuid
	
	if @IsPost = 0 return
	
	Declare 
			@BuDate datetime,
			@MatGuid uniqueidentifier,
			@StoreGuid uniqueidentifier,
			@mtQnt Float, 
			@Direction int, 
			@biQty Float, 
			@biQty2 Float, 
			@biQty3 Float, 
			@biBonusQnt Float,
			@btPriceEffected bit
	

	DECLARE @cursor_Name CURSOR 
	Set @cursor_Name = CURSOR FAST_FORWARD FOR 

	SELECT
		D.MatGuid,
		[D].[StoreGuid],
		Case when [t].[BillKind] = 0 then 1			 when [t].[BillKind] = 3 then 1			 when [t].[BillKind] = 4 then 1			 when [t].[BillKind] = 1 then -1			 when [t].[BillKind] = 2 then -1			 when [t].[BillKind] = 5 then -1		end [Direction],		[d].[Qty], 
		[d].[Qty2],
		[d].[Qty3],
		[d].[Bonus],		t.PriceEffected	From
		Bill B
		inner join BillType [t] on [t].Guid = [b].TypeGuid
		inner join [BillDetail] D on D.parentGuid = B.Guid
	where
		B.Guid = @BillGuid
	
	OPEN @cursor_Name
	FETCH NEXT FROM @cursor_Name INTO @MatGuid ,@StoreGuid ,@Direction ,@biQty,@biQty2,@biQty3,@biBonusQnt,@btPriceEffected
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
		--ÍÓÇÈ ÑÕíÏ ÇáãÇÏÉ
		SET @mtQnt = @Direction * (@biQty + @biBonusQnt)  
		Set @BiQty2 = @Direction * @BiQty2
		Set @BiQty3 = @Direction * @BiQty3
		
		UPDATE MatBalance 
		SET 
			[Qty] = [Qty]+ @mtQnt ,
			[Qty2] = [Qty2]+ @BiQty2 ,
			[Qty3] = [Qty3]+ @BiQty3 
		WHERE 
			[StoreGUID] = @StoreGuid
			AND [ParentGUID] = @MatGuid
			
		IF @@ROWCOUNT = 0 
		INSERT INTO [MatBalance]
		([ParentGuid], [StoreGUID],[Qty],[Qty2],[Qty3]) VALUES 
		(@MatGuid, @StoreGuid, @mtQnt, @BiQty2, @BiQty3)
		--end --ÍÓÇÈ ÑÕíÏ ÇáãÇÏÉ
		

	FETCH NEXT FROM @cursor_Name INTO @MatGuid ,@StoreGuid ,@Direction ,@biQty,@biQty2,@biQty3,@biBonusQnt, @btPriceEffected
	
	END
	
	CLOSE @cursor_Name
	DEALLOCATE @cursor_Name
	
	--ÊÚÏíá ÇáÇÓÚÇÑ	
	Delete [Resource] where Spid = @@Spid
	insert into [Resource] ([Guid]) Select MatGuid from BillDetail where ParentGuid = @billGuid
	exec [PrcUpdateMatPrice]

GO
/****** Object:  StoredProcedure [dbo].[PrcBill_CheckMatBalance]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcBill_CheckMatBalance]
(
	@GroupGuid uniqueidentifier = 0x0,
	@MatGuid uniqueidentifier = 0x0,
	@StoreGuid uniqueidentifier = 0x0
)
  
as
	CREATE TABLE #MatCheckMatBalance
	(
		[MatCode] [varchar](256) COLLATE database_default,
		[MatName] [varchar](256) COLLATE database_default,
		[MatltnName] [varchar](256) COLLATE database_default,
		[GroupName] [varchar](513) COLLATE database_default,
		[StCode] [varchar](256) COLLATE database_default,
		[StName] [varchar](256) COLLATE database_default,
		[Qty] [float],
		[Unit] [varchar](256) COLLATE database_default,
		[Qty2] [float],
		[Unity2] [varchar](256) COLLATE database_default,
		[Qty3] [float],
		[Unity3] [varchar](256) COLLATE database_default,
		[Price] [float],
		[TotalPrice] [float],
		[Class] [varchar](256) COLLATE database_default,
		[MatGuid] [uniqueidentifier],
		[StoreGuid] [uniqueidentifier],
		[Kind] int
	)

	Insert into #MatCheckMatBalance
	Exec [dbo].[PrcMatInventory] 		@GroupGuid = @GroupGuid, 		@MatGuid = @MatGuid ,		@StoreGuid = @StoreGuid, 		@CostGuid = 0x0, 		@Class = '', 		@ClassGrouping = 0, 		@Unit = 0, 		@BillPost = 1, 		@CkDate = 0, 		@PriceMode = 0, 		@SpecificPrice = 0, 				@CurrencyGuid  = '11111111-C748-4B13-8B91-1E9B299DF1C1',
		@CurrencyVal = 1,				@ShowEmpltyMat = 0, 		@ShowDetailStore = 1, 		@ShowMatTypeStore = 1, 		@ShowMatTypeService = 1, 		@Date1 = 0, 		@Date2 = 0,		@RepKind = 3		Delete Matbalance	From		Matbalance M		inner join [Mat] [mt] on [mt].Guid = [M].[ParentGuid]
		inner join dbo.[fnGetGroupList](@GroupGuid) [G] on [G].Guid = [mt].[GroupGuid]
		inner join dbo.[fnGetStoreList](@StoreGuid) [Sl] on [Sl].Guid = M.[StoreGuid]
		insert into [Matbalance]	(ParentGuid, StoreGuid,Qty, Qty2, Qty3, Note)	Select		MatGuid,		StoreGuid,		Qty, Qty2, Qty3, ''	From		#MatCheckMatBalance				Select * from Matbalance

GO
/****** Object:  StoredProcedure [dbo].[PrcBill_GetMatInventorySummary]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[PrcBill_GetMatInventorySummary]
(
	@MatGuid uniqueidentifier = 0x0,
	@StoreGuid uniqueidentifier = 0x0,
	@Unit int = 0,
	@BillPost int = 2,
	@CkDate Bit = 1,
	@Date1 DateTime = '1/1/2007',
	@Date2 DateTime = '1/1/2015'
)
  
as

	CREATE TABLE #MatInventorySummary
	(
		[MatCode] [varchar](256) COLLATE database_default,
		[MatName] [varchar](256) COLLATE database_default,
		[MatltnName] [varchar](256) COLLATE database_default,
		[StCode] [varchar](256) COLLATE database_default,
		[StName] [varchar](256) COLLATE database_default,
		[Qty] [float],
		[Unit] [varchar](256) COLLATE database_default,
		[Qty2] [float],
		[Unity2] [varchar](256) COLLATE database_default,
		[Qty3] [float],
		[Unity3] [varchar](256) COLLATE database_default,
		[BtInOut] [int],
		[MatGuid] [uniqueidentifier],
		[StoreGuid] [uniqueidentifier]
	)

	insert into #MatInventorySummary
	Select 
		[mt].[Code] as MatCode,		[mt].[Name] as [MatName],		[mt].[LtnName] as [MatltnName],				[St].[Code] as [StCode],		[St].[Name] as [StName],		Case when @Unit = 1 then [d].[Qty]
			 when @Unit = 2 then [d].[Qty2]
			 when @Unit = 3 then [d].[Qty3]
			 when @Unit = 0 then 
								Case when mt.[DefUnity] = 1 then [d].[Qty]
									 when mt.[DefUnity] = 2 then [d].[Qty2]
									 when mt.[DefUnity] = 3 then [d].[Qty3]
								end
		end as [Qty],
		Case when @Unit = 1 then mt.[Unity1]
			 when @Unit = 2 then mt.[Unity2]
			 when @Unit = 3 then mt.[Unity3]
			 when @Unit = 0 then 
								Case when mt.[DefUnity] = 1 then mt.[Unity1]
									 when mt.[DefUnity] = 2 then mt.[Unity2]
									 when mt.[DefUnity] = 3 then mt.[Unity3]
								end	
		end as [Unit],
		[d].[Qty2],		mt.[Unity2],		[d].[Qty3],		mt.[Unity3],		BtInOut,		[D].[MatGuid],		[D].[StoreGuid]	From 
		[vwbill] Bu
		inner join [BillDetail] D on d.ParentGuid = buGuid
		inner join [vwMat] mt on mt.Guid = d.MatGuid
		inner join dbo.[fnGetStoreList](@StoreGuid) Sl on Sl.Guid = D.StoreGuid
		inner join [vwStore] [St] on St.Guid = D.StoreGuid
	where
		(d.matGuid = @MatGuid or @MatGuid = 0x0)
		and (
				(BuisPosted = 0 and @BillPost = 0)
				or (BuisPosted = 1 and @BillPost = 1)
				or @BillPost = 2
			)
		and ([BuDate] Between @Date1 And @Date2 or @CkDate = 0)

	--ãäÇÞáÉ ÇÏÎÇá
	insert into #MatInventorySummary
	Select 
		[mt].[Code] as MatCode,		[mt].[Name] as [MatName],		[mt].[LtnName] as [MatltnName],				[StCodeIn],		[StNameIn],		Case when @Unit = 1 then [d].[Qty]
			 when @Unit = 2 then [d].[Qty2]
			 when @Unit = 3 then [d].[Qty3]
			 when @Unit = 0 then 
								Case when mt.[DefUnity] = 1 then [d].[Qty]
									 when mt.[DefUnity] = 2 then [d].[Qty2]
									 when mt.[DefUnity] = 3 then [d].[Qty3]
								end
		end as [Qty],
		Case when @Unit = 1 then mt.[Unity1]
			 when @Unit = 2 then mt.[Unity2]
			 when @Unit = 3 then mt.[Unity3]
			 when @Unit = 0 then 
								Case when mt.[DefUnity] = 1 then mt.[Unity1]
									 when mt.[DefUnity] = 2 then mt.[Unity2]
									 when mt.[DefUnity] = 3 then mt.[Unity3]
								end	
		end as [Unit],
		[d].[Qty2],		mt.[Unity2],		[d].[Qty3],		mt.[Unity3],
		1,		[D].[MatGuid],		[BuStoreInGuid]	From 
		[vwTrans] [Bu]
		inner join [TransDetail] [D] on [d].ParentGuid = buGuid
		inner join [vwMat] [mt] on [mt].Guid = [d].[MatGuid]
		inner join dbo.[fnGetStoreList](@StoreGuid) [Sl] on [Sl].Guid = [BuStoreInGuid]
	where
		(d.matGuid = @MatGuid or @MatGuid = 0x0)
		and (
				(BuisPosted = 0 and @BillPost = 0)
				or (BuisPosted = 1 and @BillPost = 1)
				or @BillPost = 2
			)
		and ([BuDate] Between @Date1 And @Date2 or @CkDate = 0)

		
	--ãäÇÞáÉ ÇáÇÎÑÇÌ
	insert into #MatInventorySummary
	Select 
		[mt].[Code] as MatCode,		[mt].[Name] as [MatName],		[mt].[LtnName] as [MatltnName],				[StCodeOut],		[StNameOut],		Case when @Unit = 1 then [d].[Qty]
			 when @Unit = 2 then [d].[Qty2]
			 when @Unit = 3 then [d].[Qty3]
			 when @Unit = 0 then 
								Case when mt.[DefUnity] = 1 then [d].[Qty]
									 when mt.[DefUnity] = 2 then [d].[Qty2]
									 when mt.[DefUnity] = 3 then [d].[Qty3]
								end
		end as [Qty],
		Case when @Unit = 1 then mt.[Unity1]
			 when @Unit = 2 then mt.[Unity2]
			 when @Unit = 3 then mt.[Unity3]
			 when @Unit = 0 then 
								Case when mt.[DefUnity] = 1 then mt.[Unity1]
									 when mt.[DefUnity] = 2 then mt.[Unity2]
									 when mt.[DefUnity] = 3 then mt.[Unity3]
								end	
		end as [Unit],
		[d].[Qty2],		mt.[Unity2],		[d].[Qty3],		mt.[Unity3],		-1,		[D].[MatGuid],		BuStoreOutGuid	From 
		[vwTrans] Bu
		inner join TransDetail D on d.ParentGuid = buGuid
		inner join vwMat mt on mt.Guid = d.MatGuid
		inner join dbo.fnGetStoreList(@StoreGuid) Sl on Sl.Guid = BuStoreOutGuid
	where
		(d.matGuid = @MatGuid or @MatGuid = 0x0)
		and (
				(BuisPosted = 0 and @BillPost = 0)
				or (BuisPosted = 1 and @BillPost = 1)
				or @BillPost = 2
			)
		and ([BuDate] Between @Date1 And @Date2 or @CkDate = 0)

	Select 
		[MatCode],		[MatName],		[MatltnName],		Sum([Qty] * [BtInOut]) as [Qty],
		[Unit],
		Sum([Qty2] * BtInOut) as [Qty2],		[Unity2],		Sum([Qty3] * BtInOut) as [Qty3],		[Unity3],		[MatGuid],		[StoreGuid]	from 
		#MatInventorySummary Mt
	Group By
		[MatCode],
		[matname],
		[unit],
		[unity2],
		[unity3],
		[MatGuid],
		[StoreGuid]

GO
/****** Object:  StoredProcedure [dbo].[PrcBill_TestMatQtyMinMax]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcBill_TestMatQtyMinMax]
(
	@BillGuid uniqueidentifier = '2BA95684-5E0E-485E-A3CC-946A07737697'
)
  
as
	
	Create Table #TestMatQtyMinMax
	(
		[MatName] varchar(8000),
		[StName] varchar(256),
		[Qty] Float,
		[Minimum] Float,
		[Maximum] Float,
		[Unity] varchar(256),
		[MatGuid] uniqueidentifier,
		[StoreGuid] uniqueidentifier
	)

	Declare @IsPost Bit 
	Select @IsPost = [IsPosted] From [Bill] where Guid = @BillGuid
	
	if @IsPost = 0 
	begin
		Select * from #TestMatQtyMinMax
		return
	end

	
	Declare @Dir int
	
	Select Top 1
		@Dir =
		Case when [b].[BillKind] = 0 then 1
		     when [b].[BillKind] = 3 then 1
		     when [b].[BillKind] = 4 then 1
		     when [b].[BillKind] = 1 then -1
		     when [b].[BillKind] = 2 then -1
		     when [b].[BillKind] = 5 then -1
		end
	from 
		[BillDetail_tmp] B 
	where
		(B.ParentGuid = @BillGuid or @BillGuid = 0x0)

	
	--Select @dir, @IsPost
	

	insert into #TestMatQtyMinMax
	Select distinct
		mt.code+'-'+mt.Name as MatName,
		st.Name as [StName],
		case 
			when [Mt].[defUnity] = 1 then M.[Qty]
			when [Mt].[defUnity] = 2 then M.[Qty2]
			when [Mt].[defUnity] = 3 then M.[Qty3]
		end as[Qty],
		[X].[Minimum],
		[X].[Maximum],
		case 
			when [Mt].[defUnity] = 1 then Mt.[Unity1]
			when [Mt].[defUnity] = 2 then Mt.[Unity2]
			when [Mt].[defUnity] = 3 then Mt.[Unity3]
		end as[Unity],
		b.matGuid,
		B.StoreGuid
	from 
		[BillDetail_tmp] B --Select * from [BillDetail_tmp]
		inner join [Matbalance] M on B.matGuid = M.ParentGuid
		inner join Store St on M.storeGuid = St.Guid and B.StoreGuid = St.Guid 
		left join [MatMinMax] x on x.ParentGuid = B.matGuid and x.storeGuid = B.StoreGuid
		inner join [vwmat] mt on mt.Guid = M.[ParentGuid]
	where
		(B.ParentGuid = @BillGuid or @BillGuid = 0x0)

	--Select * from #TestMatQtyMinMax
	
	
	Select distinct
		b.Kind,
		B.MatGuid,
		B.StoreGuid,
		Sum(case 
			when [Mt].[defUnity] = 1 then B.[Qty]
			when [Mt].[defUnity] = 2 then B.[Qty2]
			when [Mt].[defUnity] = 3 then B.[Qty3]
		     end + [b].[Bonus]
		    )as[Qty],
		Case 	when [b].[BillKind] = 0 then 1
			when [b].[BillKind] = 3 then 1
			when [b].[BillKind] = 4 then 1
			when [b].[BillKind] = 1 then -1
			when [b].[BillKind] = 2 then -1
			when [b].[BillKind] = 5 then -1
		end [Direction]
	Into #CurrentBill
	from 
		[BillDetail_tmp] B 
		inner join [mat] mt on mt.Guid = B.[MatGuid]
	where
		(B.ParentGuid = @BillGuid or @BillGuid = 0x0)
	Group By	
		B.Kind,
		B.MatGuid,
		B.StoreGuid,
		[b].[BillKind]
	
	

	Select 
		Cast(B.matName as varchar(256))COLLATE database_default as matName,
		B.StName COLLATE database_default as StName ,
		B.Qty - Case when Kind = 1 then IsNull((C.Qty  * C.[Direction]),0) else 0 end as [CurrentQty],
		IsNull((C.Qty  * C.[Direction]),0) as BillQty,
		B.Qty - Case when Kind = 1 then IsNull((C.Qty  * C.[Direction]),0) else 0 end --as [CurrentQty]
		+ IsNull((C.Qty  * C.[Direction]),0) as
		[NewQty],
		B.minimum,
		B.Maximum
	into #TestMatQtyMinMax_R2
	From
		#TestMatQtyMinMax B
		left join #CurrentBill C on B.matGuid = C.matGuid and B.storeGuid = C.storeGuid

	Select
		*
	From
		#TestMatQtyMinMax_R2
	where
		(NewQty >= Maximum)
	

	Select
		*
	From
		#TestMatQtyMinMax_R2
	where
		(NewQty <= Minimum)
	

	Select
		*
	From
		#TestMatQtyMinMax_R2
	where
		(NewQty < 0) and (@Dir = -1)

	--Select * from #CurrentBill
	
	--Select * from #TestMatQtyMinMax

	

GO
/****** Object:  StoredProcedure [dbo].[PrcBill_TransPost]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[PrcBill_TransPost]
(
	@BillGuid uniqueidentifier = '235A2188-A90C-472D-8E24-AB496F988AAC'
)
  
as
	Declare @IsPost Bit 
	Select @IsPost = [IsPosted] From Bill where Guid = @BillGuid
	
	if @IsPost = 0 return
	
	Declare @MatGuid uniqueidentifier,
			@StoreInGuid uniqueidentifier,
			@StoreOutGuid uniqueidentifier,
			@mtQnt Float, 
			@Direction int, 
			@biQty Float, 
			@biQty2 Float, 
			@biQty3 Float
	
	DECLARE @cursor_Name CURSOR 
	Set @cursor_Name = CURSOR FAST_FORWARD FOR 

	SELECT 
		D.MatGuid,
		[B].[StoreInGuid],
		[B].[StoreOutGuid],
		[d].[Qty], 
		[d].[Qty2], 
		[d].[Qty3]	From
		[Trans] B
		inner join [TransDetail] D on D.parentGuid = B.Guid
	where
		B.Guid = @BillGuid
	
	OPEN @cursor_Name
	FETCH NEXT FROM @cursor_Name INTO @MatGuid ,@StoreInGuid, @StoreOutGuid,@biQty,@biQty2,@biQty3
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @mtQnt = (@biQty)  
		
		UPDATE MatBalance 
		SET 
			[Qty] = [Qty] + @mtQnt ,
			[Qty2] = [Qty2] + @BiQty2 ,
			[Qty3] = [Qty3] + @BiQty3 
		WHERE 
			[StoreGUID] = @StoreInGuid
			AND [ParentGUID] = @MatGuid
			
		IF @@ROWCOUNT = 0 
		INSERT INTO [MatBalance]
		([ParentGuid], [StoreGUID],[Qty],[Qty2],[Qty3]) VALUES 
		(@MatGuid, @StoreInGuid, @mtQnt, @BiQty2, @BiQty3)


		UPDATE MatBalance 
		SET 
			[Qty] = [Qty] - @mtQnt ,
			[Qty2] = [Qty2] - @BiQty2 ,
			[Qty3] = [Qty3] - @BiQty3 
		WHERE 
			[StoreGUID] = @StoreOutGuid
			AND [ParentGUID] = @MatGuid

		IF @@ROWCOUNT = 0 
		INSERT INTO [MatBalance]
		([ParentGuid], [StoreGUID],[Qty],[Qty2],[Qty3]) VALUES 
		(@MatGuid, @StoreOutGuid, -@mtQnt, -@BiQty2, -@BiQty3)

	FETCH NEXT FROM @cursor_Name INTO @MatGuid ,@StoreInGuid, @StoreOutGuid,@biQty,@biQty2,@biQty3
	
	END
	
	CLOSE @cursor_Name
	DEALLOCATE @cursor_Name
	
	Select * from MatBalance

GO
/****** Object:  StoredProcedure [dbo].[PrcBill_UpdateMatBalanceBeforePost]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[PrcBill_UpdateMatBalanceBeforePost]
(
	@BillGuid uniqueidentifier = 'C8A40236-C298-4904-A5C1-9D90BC2D082C'
)
  
as

	Declare @IsPost Bit 
	Select @IsPost = [IsPosted] From [Bill] where Guid = @BillGuid
	
	if @IsPost = 0 return

	Declare @MatGuid uniqueidentifier,
			@StoreGuid uniqueidentifier,
			@mtQnt Float, 
			@Direction int, 
			@biQty Float, 
			@biQty2 Float, 
			@biQty3 Float, 
			@biBonusQnt Float
	
	DECLARE @cursor_Name CURSOR 
	Set @cursor_Name = CURSOR FAST_FORWARD FOR 

	SELECT 
		D.MatGuid,
		[D].[StoreGuid],
		Case when [t].[BillKind] = 0 then 1			 when [t].[BillKind] = 3 then 1			 when [t].[BillKind] = 4 then 1			 when [t].[BillKind] = 1 then -1			 when [t].[BillKind] = 2 then -1			 when [t].[BillKind] = 5 then -1		end [Direction],		[d].[Qty], 
		[d].[Qty2], 
		[d].[Qty3],
		[d].[Bonus]	From
		Bill B
		inner join BillType [t] on [t].Guid = [b].TypeGuid
		inner join [BillDetail] D on D.parentGuid = B.Guid
	where
		B.Guid = @BillGuid
	
	OPEN @cursor_Name
	FETCH NEXT FROM @cursor_Name INTO @MatGuid ,@StoreGuid ,@Direction ,@biQty,@biQty2,@biQty3,@biBonusQnt
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @mtQnt = @Direction * (@biQty + @biBonusQnt)  
		Set @BiQty2 = @Direction * @BiQty2
		Set @BiQty3 = @Direction * @BiQty3
		
		UPDATE MatBalance 
		SET 
			[Qty] = [Qty] - @mtQnt ,
			[Qty2] = [Qty2] - @BiQty2 ,
			[Qty3] = [Qty3] - @BiQty3 
		WHERE 
			[StoreGUID] = @StoreGuid
			AND [ParentGUID] = @MatGuid

		IF @@ROWCOUNT = 0 
		INSERT INTO [MatBalance]
		([ParentGuid], [StoreGUID],[Qty],[Qty2],[Qty3]) VALUES 
		(@MatGuid, @StoreGuid, @mtQnt, @BiQty2, @BiQty3)

	FETCH NEXT FROM @cursor_Name INTO @MatGuid ,@StoreGuid ,@Direction ,@biQty,@biQty2,@biQty3,@biBonusQnt
	
	END
	
	CLOSE @cursor_Name
	DEALLOCATE @cursor_Name
	
	Select * from MatBalance

GO
/****** Object:  StoredProcedure [dbo].[PrcBill_UpdateMatBalanceBeforePost_Trans]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[PrcBill_UpdateMatBalanceBeforePost_Trans]
(
	@BillGuid uniqueidentifier = 'B7606AD9-6CC3-4FEB-BF4C-A925053B9793'
)
  
as

	Declare @IsPost Bit 
	Select @IsPost = [IsPosted] From [Trans] where Guid = @BillGuid
	
	if @IsPost = 0 return

	Declare @MatGuid uniqueidentifier,
			@StoreInGuid uniqueidentifier,
			@StoreOutGuid uniqueidentifier,
			@mtQnt Float, 
			@Direction int, 
			@biQty Float, 
			@biQty2 Float, 
			@biQty3 Float
	
	DECLARE @cursor_Name CURSOR 
	Set @cursor_Name = CURSOR FAST_FORWARD FOR 

	SELECT 
		[D].[MatGuid],
		[B].[StoreInGuid],
		[B].[StoreOutGuid],
		[d].[Qty], 
		[d].[Qty2], 
		[d].[Qty3]	From
		[Trans] B
		inner join [TransDetail] D on D.parentGuid = B.Guid
	where
		B.Guid = @BillGuid
	
	OPEN @cursor_Name
	FETCH NEXT FROM @cursor_Name INTO @MatGuid ,@StoreInGuid, @StoreOutGuid,@biQty,@biQty2,@biQty3
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @mtQnt = (@biQty)  
		
		UPDATE MatBalance 
		SET 
			[Qty] = [Qty] - @mtQnt ,
			[Qty2] = [Qty2] - @BiQty2 ,
			[Qty3] = [Qty3] - @BiQty3 
		WHERE 
			[StoreGUID] = @StoreInGuid
			AND [ParentGUID] = @MatGuid
			
		IF @@ROWCOUNT = 0 
		INSERT INTO [MatBalance]
		([ParentGuid], [StoreGUID],[Qty],[Qty2],[Qty3]) VALUES 
		(@MatGuid, @StoreInGuid, -@mtQnt, -@BiQty2, -@BiQty3)


		UPDATE MatBalance 
		SET 
			[Qty] = [Qty] + @mtQnt ,
			[Qty2] = [Qty2] + @BiQty2 ,
			[Qty3] = [Qty3] + @BiQty3 
		WHERE 
			[StoreGUID] = @StoreOutGuid
			AND [ParentGUID] = @MatGuid

		IF @@ROWCOUNT = 0 
		INSERT INTO [MatBalance]
		([ParentGuid], [StoreGUID],[Qty],[Qty2],[Qty3]) VALUES 
		(@MatGuid, @StoreOutGuid, @mtQnt, @BiQty2, @BiQty3)

	FETCH NEXT FROM @cursor_Name INTO @MatGuid ,@StoreInGuid, @StoreOutGuid,@biQty,@biQty2,@biQty3
	
	END
	
	CLOSE @cursor_Name
	DEALLOCATE @cursor_Name
	
	Select * from MatBalance

GO
/****** Object:  StoredProcedure [dbo].[PrcBillOrderCheckMatBalance]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create Procedure [dbo].[PrcBillOrderCheckMatBalance]
as

	Select 
		[bi].[MatGuid] as MatGuid,
		[bi].[StoreGuid] as StoreGuid,
		SUM(([bi].[Qty] + [bi].[Bonus]) * bt.[Direction])  As [Qty], 
		SUM(([bi].[Qty2]) * bt.[Direction]) As [Qty2],
		SUM(([bi].[Qty3]) * bt.[Direction]) As [Qty3]
	Into #Res
	from 
		[bill] [Bu] 
		inner join BillDetail bi on bi.ParentGuid = bu.Guid
		inner join vwBillType [bt] on [bt].Guid = [bu].TypeGuid
		inner join [OrderCheckMatBalance_Tmp] T on T.MatGuid = Bi.[MatGuid]  and
												 T.StoreGuid = Bi.[StoreGuid] 
												 and [T].[Spid] = @@Spid
	where
		[bu].[IsPosted] = 1
	Group By
		[bi].[MatGuid], [bi].[StoreGuid] 

	UPDATE [bi] SET  
		[Qty2] = (CASE [mt].[unityfix2] WHEN 0 THEN CASE [mt].[unityFact2] WHEN 0 THEN 0 ELSE [bi].[Qty] /  [mt].[unityFact2] END ELSE [bi].[Qty2] END),
		[Qty3] = (CASE [mt].[unityfix3] WHEN 0 THEN CASE [mt].[unityFact3] WHEN 0 THEN 0 ELSE [bi].[Qty] /  [mt].[unityFact3] END ELSE [bi].[Qty3] END)
	FROM #Res AS [bi] INNER JOIN [Mat] AS [mt]  ON  [mt].[Guid] = [bi].[MatGuid]

	Select 
		Mt.code+'-'+Mt.Name as Mat,
		Case when T.unit = 1 then Bu.[Qty]
			 when T.unit = 1 then Bu.[Qty2]
			 when T.unit = 1 then Bu.[Qty3]
		end as [Qty],
		Case when T.unit = 1 then Mt.[Unity1] 
			 when T.unit = 1 then Mt.[unity2]
			 when T.unit = 1 then Mt.[unity3]
		end as [Unit]
	From 
		#Res Bu
		inner join Mat Mt on Mt.Guid = Bu.MatGuid
		inner join [OrderCheckMatBalance_Tmp] T on T.MatGuid = Bu.[MatGuid] and
												 T.StoreGuid = Bu.[StoreGuid]
												 and [T].[Spid] = @@Spid
	where
		Case when T.unit = 1 then Bu.[Qty]
			 when T.unit = 1 then Bu.[Qty2]
			 when T.unit = 1 then Bu.[Qty3]
		end	< T.Qty
	Order By
		T.Number
		

GO
/****** Object:  StoredProcedure [dbo].[PrcBillOrderCreateBillRecipient]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create Procedure [dbo].[PrcBillOrderCreateBillRecipient]
(
	@Guid uniqueidentifier = 'DF20A342-478B-4117-B5EC-A2B9FA61297E'
)
as
	Declare 
		@CustGuid uniqueidentifier,
		@CustAccGuid uniqueidentifier,
		@CostGuid uniqueidentifier,
		@BillTypeGuid uniqueidentifier,
		@Note Varchar(255),
		@BillNum int
		
	Select 
		@CustGuid  = O.custGuid,
		@CostGuid = O.CostGuid,
		@BillTypeGuid = R.[SaleBillType],
		@Note = T.Name
	From 
		[BillOrder] O
		inner join [BillOrderRecipient] R on R.[ParentGuid] = O.Guid
		inner join [OrderType] T on T.Guid = O.TypeGuid
	where
		R.Guid = @Guid		
		
	Select
		@CustAccGuid = AcGuid
	From
		Customer
	where
		Guid = @CustGuid
	Select
		@BillNum = Number
	From
		Bill
	where
		Guid = @Guid
		
	if IsNull(@BillNum,0) = 0
	begin
		Set @BillNum = (Select isNull(Max(Number),0) +1 as Number From Bill where TypeGuid = @BillTypeGuid)
	end
	
	Delete [Bill] where Guid = @Guid
	
	insert into [Bill]
	([Number],[Guid],[SecLvl],[TypeGuid],[Date],[CustGuid],[CurrencyGuid],[CurrencyVal],[PayType],[StoreGuid],[CustAccGuid],[CostGuid],[BranchGuid],[Class],[Note],[EntryGuid],[EntryNumber],[CheckCreateEntry],[ItemsTotal],[ItemsDiscount],[ItemsExtra],[BuExtra],[BuDiscount],[BuOnly],[ContractGuid],[IsPosted])
	Select
		@BillNum as [Number],
		[Guid],
		[SecLvl],
		[SaleBillType] as [TypeGuid],
		[Date],
		@CustGuid [CustGuid],
		[CurrencyGuid],
		[CurrencyVal],
		1 as [PayType],
		(Select Top 1 [StoreGuid] From BillOrderRecipientDetail where ParentGuid = @Guid)[StoreGuid],
		@CustAccGuid as [CustAccGuid],
		@CostGuid [CostGuid],
		Null as [BranchGuid],
		'' as [Class],
		[Note],
		Null as [EntryGuid],
		0 as [EntryNumber],
		1 as [CheckCreateEntry],
		0 as [ItemsTotal],
		0 as [ItemsDiscount],
		0 as [ItemsExtra],
		0 as [BuExtra],
		0 as [BuDiscount],
		'' as [BuOnly],
		Null as [ContractGuid],
		0 as [IsPosted]
	From
		[BillOrderRecipient]
	where
		Guid = @Guid
		

	insert into BillDetail	
	([Number],[ParentGuid],[MatGuid],[Qty],[Qty2],[Qty3],[Price],[TotalPrice],[Bonus],[StoreGuid],[DiscountPercent],[Discount],[ExtraPercent],[Extra],[Note],[ProductDate],[ExpireDate],[CostGuid],[Class],[Length],[width],[height],[Count],[ItemUnit])
	Select
		d.[Number],
		d.[ParentGuid],
		d.[MatGuid],
		d.[Qty],
		d.[Qty2] * mt.unityFact2,
		d.[Qty] * mt.unityFact3 as [Qty3],
		d.[Price],
		d.[Qty] * d.[Price] as [TotalPrice],
		0 as [Bonus],
		d.[StoreGuid],
		0 as [DiscountPercent],
		0 as [Discount],
		0 as [ExtraPercent],
		0 as [Extra],
		d.[Note],
		Null as [ProductDate],
		Null as [ExpireDate],
		Null as [CostGuid],
		d.ClassPtr as [Class],
		Null as [Length],
		Null as [width],
		Null as [height],
		Null as [Count],
		1 as [ItemUnit]
	From
		[BillOrderRecipientDetail] d
		inner join [Mat] mt on mt.Guid = D.MatGuid
	where 
		[parentGuid] = @Guid
		and (d.[Qty] <> 0)
	
	insert into [BillDiscount]
	([Number],[ParentGuid],[AccountGuid],[Discount],[Extra],[CurrencyGuid],[CurrencyVal],[CostGuid],[obverseAccountGuid],[Note])
	Select
		d.[Number],
		d.[ParentGuid],
		d.[AccountGuid],
		d.[Discount],
		d.[Extra],
		O.[CurrencyGuid],
		O.[CurrencyVal],
		d.[CostGuid],
		d.[ContraAccGUID] as [obverseAccountGuid],
		d.[Notes]
	From
		[BillOrderRecipientDiscountExtra] d
		inner join [BillOrderRecipient] O on o.Guid = D.parentGuid
	where 
		d.[parentGuid] = @Guid


	Declare 
		@AutoPost Bit,
		@EntryCreatedAuto bit

	Select
		@AutoPost = Case when PostToStores = 1 and PostToStoresAuto = 1 then 1 else 0 end,
		@EntryCreatedAuto = Case when EntryCreatedAuto = 1 and EntryCreated = 1 then 1 else 0 end
	From
		[BillType]
	where
		[Guid] = @BillTypeGuid 
		
	if @AutoPost = 1
	Update Bill Set IsPosted = 1 where Guid = @Guid
	
	if @EntryCreatedAuto = 1
	exec PrcCreateBillEntry @Guid

	Select * from Bill	where Guid = @Guid

GO
/****** Object:  StoredProcedure [dbo].[PrcBillOrders]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create Procedure [dbo].[PrcBillOrders]
(
	@No int = 0,
	@CustGuid uniqueidentifier = 0x0,
	@StoreGuid uniqueidentifier = 0x0,
	@CostGuid uniqueidentifier = 0x0,
	@UserGuid uniqueidentifier = 0x0,
	@MatGuid uniqueidentifier = 0x0,
	@GroupGuid uniqueidentifier = 0x0,
	@LikeNote Varchar(256) = '',
	@NotLikeNote Varchar(256) = '',
	@CloseState int = 2,
	@Date1 DateTime = '1/1/2007',
	@Date2 DateTime = '1/1/2010'
)
as
	Select Distinct
		[O].[No],
		[O].[Number],
		[T].[Name] as [TypeName],
		[O].[Date],
		[O].[ExpireDay],
		[Cu].[Name] as [CustomerName],
		[st].[Code]+'-'+[st].[Name] as [StoreName],
		[Co].[Code]+'-'+[Co].[Name] as [CostName],
		[U].[LoginName] as [UserName],
		[O].[Note],
		[O].[CloseOrder] as [CloseState],
		[O].[Guid]
	From 
		[BillOrder] [O]
		inner join [OrderType] [T] On [T].[Guid] = [O].[TypeGuid]
		inner join [BillOrderDetail] [D] on [O].[Guid] = [D].[ParentGuid]
		inner join dbo.fnGetStoreList(@StoreGuid) Stl on Stl.GUID = D.StoreGuid
		inner join [mat] [mt] On [mt].[Guid] = [D].[MatGuid]
		inner join dbo.fnGetGroupList(@GroupGuid) [gr] on [gr].[Guid] = [mt].[GroupGuid]
		inner join [vwCustomer] [Cu] On [Cu].[Guid] = [O].[CustGuid]
		left join [vwStore] [St] On [st].[Guid] = [D].[StoreGuid]
		left join [vwCost] [Co] On [Co].[Guid] = [O].[CostGuid]
		inner join [Realty_Users]  [U] On [U].[Guid] = [O].[UserGuid]
		inner join [Resource] [R] On [R].[Guid] = [O].[TypeGuid] and [Spid] = @@Spid
	where
		([O].[No] = @No or @No = 0)
		and ([O].[CustGuid] = @CustGuid or @CustGuid = 0x0)
		and ([O].[CostGuid] = @CostGuid or @CostGuid = 0x0)
		and ([O].[UserGuid] = @UserGuid or @UserGuid = 0x0)
		and ([D].[MatGuid] = @MatGuid or @MatGuid = 0x0)
		and (
				( 
					([O].[Note] Like '%'+@LikeNote+'%')
					and ([O].[Note] Not Like '%'+@NotLikeNote +'%' or @NotLikeNote = '')
				)
				or
				( 
					([D].[Note] Like '%'+@LikeNote+'%')
					and ([D].[Note] Not Like '%'+@NotLikeNote +'%' or @NotLikeNote = '')
				)
			)
		and ([O].[Date] Between @Date1 And @Date2)
		and ([O].[CloseOrder] = @CloseState or @CloseState = 2)
		
	Order By
		[Date],
		[No]
		

GO
/****** Object:  StoredProcedure [dbo].[PrcBuildingIdentityCreateAccounts]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcBuildingIdentityCreateAccounts]
(
	@Guid uniqueidentifier = '696C763B-9272-49AB-BB72-41BB43E1B063'
)
  
as

	Declare @ParentRentAccountGuid uniqueidentifier,
			@ParentRentInsuranceAccountGuid uniqueidentifier
			--ÍÓÇÈ ÇíÑÇÏ ÇáÅíÌÇÑ
			,@RevenueRentAccountFlatGuid uniqueidentifier

	Select @RevenueRentAccountFlatGuid = [Value] From [DMD_Const] where [VName] = 'RevenueRentAccountFlat'

	if (isnull(@RevenueRentAccountFlatGuid , 0x0) = 0x0)
	BEGIN
	   RAISERROR ('ÊÇßÏ ãä ÅÏÎÇá ÍÓÇÈ ÇíÑÇÏ ÅíÌÇÑ ÇáÔÞÞ Ýí ÅÚÏÇÏÇÊ ÇáÈÑäÇãÌ', 16, 1)
	   ROLLBACK TRANSACTION
	END
	
	
	Select
		@ParentRentAccountGuid = [ParentRentAccountGuid],
		@ParentRentInsuranceAccountGuid = [ParentRentInsuranceAccountGuid]
	From 
		[Building]
	where
		[Guid] = @Guid


	DECLARE @RentName Varchar(256)
			,@Mobile  Varchar(256)
			,@ContractNo Varchar(256)
			,@FlatGuid uniqueidentifier
			,@Code Varchar(256)
			,@CurrencyGUID uniqueidentifier
			,@CurrencyVal Float
			,@Type int
			,@FinalGUID uniqueidentifier
			,@RentAccountGUID uniqueidentifier
			,@InsuranceAccountGUID uniqueidentifier
			,@RentContractGuid uniqueidentifier
			,@CustomerGuid uniqueidentifier
		
			,@Count Int

	-- ÌÏæá æÓíØ áãÚÑÝÉ ÇáÍÓÇÈÇÊ ÇáãÊæáÏÉ æ ÚÏã ÊæáíÏåÇ ãÑÉ ËÇäíÉ
	Create Table #TmAccountName
	(
		[RentName] Varchar(256)
	)

	DECLARE cursor_Name CURSOR FAST_FORWARD FOR 
	Select Distinct
		[RentName],[Mobile],[ContractNo],[FlatGuid]
	From 
		[BuildingIdentityDetail] [D]
	where
		[BuildingGuid] = @Guid
	
	OPEN cursor_Name
	FETCH NEXT FROM cursor_Name INTO @RentName, @Mobile, @ContractNo, @FlatGuid
	
	Set @Count = 0
	WHILE @@FETCH_STATUS = 0
	BEGIN
		-- ÇáßÇíÏ ÇáÌÏíÏ
		Set @RentAccountGUID = Newid()
		Set @InsuranceAccountGUID = Newid()

		Set @Count = @Count + 1
		
		-- Rent Account

		-- ãÝæÇÕÝÇÊ ÇáÍÓÇÈ ÇáÃÈ		
		Select 
			@Code = [Code]				
			,@CurrencyGUID = [CurrencyGUID]
			,@CurrencyVal = [CurrencyVal]
			,@Type = [Type]
			,@FinalGUID = [FinalGUID]
		from 
			[Account] where [Guid] = @ParentRentAccountGuid

		if (not exists(Select Top 1 * from #TmAccountName where [RentName] = @RentName)) 
			and (not exists(Select Top 1 * from [vwCustomer] where [Name] = @RentName))
		begin
				insert into [Account]
				([Number],[Guid],[Name],[LtnName],[Code],[CDate],[NSons],[Note],[CurrencyGUID],[CurrencyVal],[Type],[ParentGUID],[FinalGUID])
				Select
				(Select isnull(Max([Number]),0)+ 1 from [Account]) as [Number]
				,@RentAccountGUID as [Guid]
				,@RentName as [Name]
				,'' as [LtnName]
				,@Code + dbo.FnFormatNumber (@Count, 4) as [Code]
				,GetDate() as [CDate]
				,0 as [NSons]
				,'' as [Note]
				,@CurrencyGUID as [CurrencyGUID]
				,@CurrencyVal as [CurrencyVal]
				,@Type as [Type]
				,@ParentRentAccountGuid as [ParentGUID]
				,@FinalGUID as [FinalGUID]
			  
				-- Insurance Account
				Select 
					@Code = [Code]				
					,@CurrencyGUID = [CurrencyGUID]
					,@CurrencyVal = [CurrencyVal]
					,@Type = [Type]
					,@FinalGUID = [FinalGUID]
				from 
					[Account] where [Guid] = @ParentRentInsuranceAccountGuid
		
				insert into [Account]
				([Number],[Guid],[Name],[LtnName],[Code],[CDate],[NSons],[Note],[CurrencyGUID],[CurrencyVal],[Type],[ParentGUID],[FinalGUID])
				Select
				(Select isnull(Max([Number]),0)+ 1 from [Account]) as [Number]
				,@InsuranceAccountGUID as [Guid]
				,@RentName as [Name]
				,'' as [LtnName]
				,@Code + dbo.FnFormatNumber (@Count, 4) as [Code]
				,GetDate() as [CDate]
				,0 as [NSons]
				,'' as [Note]
				,@CurrencyGUID as [CurrencyGUID]
				,@CurrencyVal as [CurrencyVal]
				,@Type as [Type]
				,@ParentRentInsuranceAccountGuid as [ParentGUID]
				,@FinalGUID as [FinalGUID]
		
				-- Customer
				Set @CustomerGuid = Newid()
		
				insert into [Customer]
				([Number],[Guid],[Name],[LtnName],[Nationality],[Profession],[PassportNO],[Domicile],[Security],[PhoneJob],[Mobile],[Note],[AcGuid],[InsuranceAccountGuid])
				Select
				(Select isnull(Max([Number]),0)+ 1 from [Customer]) as [Number]
				,@CustomerGuid as [Guid]
				,@RentName as [Name]
				,'' as [LtnName]
				,'' as [Nationality]
				,'' as [Profession]
				,'' as [PassportNO]
				,'' as [Domicile]
				,'' as [Security]
				,'' as [PhoneJob]
				,@Mobile as [Mobile]
				,'' as [Note]
				,@RentAccountGUID as [AcGuid]
				,@InsuranceAccountGUID as [InsuranceAccountGuid]

				insert into #TmAccountName
				Select @RentName
		end
		else
		begin
			Set @CustomerGuid = (Select Top 1 [Guid] From [Customer] where [Name] = @RentName)
			Set @RentAccountGUID = (Select Top 1 [AcGuid] From [Customer] where [Guid] = @CustomerGuid)
			Set @InsuranceAccountGUID = (Select Top 1 [InsuranceAccountGuid] From [Customer] where [Guid] = @CustomerGuid)
		end


		-- Rent Contract
		Set @RentContractGuid = Newid()
		

		Print 'Contract'
		-- ÝÍÕ æÌæÏ ÚÞÏ ÓÇÈÞ áäÝÓ ÇáÔÞÉ
		if (not exists(Select Top 1 * from [LeaseApartment] where [ApartmentGuid] = @FlatGuid and [CustomerGuid] = @CustomerGuid and [LeaseKind] = 0)) 
		insert into [LeaseApartment]
		([Number],[Guid],[ContractNo],[CustomerGuid],[BuildingGuid],[ApartmentGuid],[ApartmentType],[FromDate],[ToDate],[Rent],[CurrencyGuid],[CurrencyVal],[PayType],[Note],[Purpose],[LeaseKind],[RevenueAccountGuid],[CustAccountGuid],[CommissionFromCustPercent],[CommissionFromCustValue],[AcCommissionFromCustGuid],[CommissionFromOwnerPercent],[CommissionFromOwnerValue],[AcCommissionFromOwnerGuid])
		Select
		(Select isnull(Max([Number]),0)+ 1 from [LeaseApartment]) as [Number]
		,@RentContractGuid as [Guid]
		,@ContractNo
		,@CustomerGuid as [CustomerGuid]
		,@Guid as [BuildingGuid]
		,@FlatGuid as [ApartmentGuid]
		,'' as [ApartmentType]
		,(Select Top 1 [BeginContractDate] From [BuildingIdentityDetail] where [FlatGuid] = @FlatGuid and [RentName] = @RentName) as [FromDate]
		,(Select Top 1 [EndContractDate] From [BuildingIdentityDetail] where [FlatGuid] = @FlatGuid and [RentName] = @RentName) as [ToDate]
		,(Select Top 1 [ContractValue] From [BuildingIdentityDetail] where [FlatGuid] = @FlatGuid and [RentName] = @RentName) as [Rent]
		,(Select Top 1 [CurrencyGuid] From [BuildingIdentity] where [BuildingGuid] = @Guid) as [CurrencyGuid]
		,(Select Top 1 [CurrencyVal] From [Currency] where [Guid] = (Select Top 1 [CurrencyGuid] From [BuildingIdentity] where [BuildingGuid] = @Guid)) as [CurrencyVal]
		,3 as [PayType]
		,'' as [Note]
		,''as [Purpose]
		,0 as [LeaseKind]
		,@RevenueRentAccountFlatGuid as [RevenueAccountGuid]
		,@RentAccountGUID as [CustAccountGuid]
		,0 as [CommissionFromCustPercent]
		,0 as [CommissionFromCustValue]
		,Null as [AcCommissionFromCustGuid]
		,0 as [CommissionFromOwnerPercent]
		,0 as [CommissionFromOwnerValue]
		,Null as [AcCommissionFromOwnerGuid]
		
	  	FETCH NEXT FROM cursor_Name INTO @RentName, @Mobile, @ContractNo, @FlatGuid
	
	END
	
	CLOSE cursor_Name
	DEALLOCATE cursor_Name


GO
/****** Object:  StoredProcedure [dbo].[PrcBuildingOffer]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcBuildingOffer]
(
    @Name VARCHAR(256) = '',
    @LtnName VARCHAR(256) = '',
    @Emirate Varchar(256) = '',
    @Area Varchar(256) = '',
    @Suburb Varchar(256) = '',
    @Street Varchar(256) = '',
    @BasinNO Varchar(256) = '',
    @PieceNO Varchar(256) = '',
    @BondType VARCHAR(256) = '',
    @BondNo VARCHAR(256) = '',
    @OfferKind Int = 3,
    @OfferValue1 Float = 0,
    @OfferValue2 Float = 0,
    @Delegated VARCHAR(256) = '',
    @LandArea1 Float = 0,
    @LandArea2 Float = 0,
    @CustName Varchar(256) = '',
    @CustPhone Varchar(256) = '',
    @CustMobile Varchar(256) = ''
)
  
as
	Select 
		*,
		Case when OfferKind = 0 then 'ÈíÚ'
			 when OfferKind = 0 then 'ÔÑÇÁ'
			 when OfferKind = 0 then 'ÅÓÊËãÇÑ'
		end OfferKindStr
	From 
		BuildingOffer
	where
		([Name] Like '%'+@Name+'%')
		and ([LtnName] Like '%'+@LtnName+'%')
		and ([Emirate] Like '%'+@Emirate+'%')
		and ([Area] Like '%'+@Area+'%')
		and ([Suburb] Like '%'+@Suburb+'%')
		and ([Street] Like '%'+@Street+'%')
		and ([BasinNO] Like '%'+@BasinNO+'%')
		and ([PieceNO] Like '%'+@PieceNO+'%')
		and ([BondType] Like '%'+@BondType+'%')
		and ([BondNo] Like '%'+@BondNo+'%')
		and ([OfferKind] = @OfferKind Or @OfferKind = 3)
		and  (
			([OfferValue] Between @OfferValue1 and @OfferValue2)
			Or @OfferValue2 = 0
		)
		and ([Delegated] Like '%'+@Delegated+'%')
		and (
				([LandArea] Between @LandArea1 and @LandArea2)
				Or @LandArea2 = 0
			)
		and ([CustName] Like '%'+@CustName+'%')
		and ([CustPhone] Like '%'+@CustPhone+'%')
		and ([CustMobile] Like '%'+@CustMobile+'%')
	

GO
/****** Object:  StoredProcedure [dbo].[PrcBuildingPayType]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcBuildingPayType]
(
	@BuildingGuid uniqueidentifier = 0x0
)
  
as
	Create Table #Res1
	(
		[Guid] uniqueidentifier,
		[BuildingName] Varchar(256),
		[BuildingGuid] uniqueidentifier,
		[Date] DateTime,
		[Percentage] Float,
		[CostProject] Float,
		[Currency] Varchar(256),
		[SumFlatSaleCost] Float,
		[DueValue] Float,
		[PayValue] Float,
		[Note] Varchar(256),
		[CkBuildingPayTypelow] Bit
	)
	Insert into #res1
	Select 
		[P].[Guid],
		[B].[Name] as [BuildingName],
		[B].[Guid] as [BuildingGuid],
		[P].[Date],
		[P].[Percentage]+0.0 as [Percentage],
		[B].[AmountPurchase]+0.0 as [CostProject],
		[my].[Code] as [Currency],
		0.0 as [SumFlatSaleCost],
		0.0 as [DueValue],
		[p].[PayValue]+0.0 as [PayValue],
		[P].[Note],
		[B].[CkBuildingPayTypelow]
	From 
		[BuildingPayType] [P]
		inner join [Building] [b] on [b].[Guid] = [p].[BuildingGuid]
		inner join [Currency] [my] on [my].[Guid] = [B].[CurrencyPurchase]
	where
		([P].[BuildingGuid] = @BuildingGuid or @BuildingGuid = 0x0)


	Declare @CkBuildingPayTypelow bit
	Select 
		@CkBuildingPayTypelow = [B].[CkBuildingPayTypelow]
	From 
		[BuildingPayType] [P]
		inner join [Building] [b] on [b].[Guid] = [p].[BuildingGuid]
	where
		([P].[BuildingGuid] = @BuildingGuid or @BuildingGuid = 0x0)
		
	Declare @RGuid uniqueidentifier,
			@RBuildingGuid uniqueidentifier,
			@RDate DateTime,
			@RDate1 DateTime,
			@FlatCostPrice Float

	DECLARE cursor_Name CURSOR FOR 
	SELECT 
		[Guid],
		[BuildingGuid],
		[Date]
	FROM 
		#Res1
	Order By
		[BuildingGuid],
		[Date]
	
	OPEN cursor_Name
	FETCH NEXT FROM cursor_Name INTO @RGuid, @RBuildingGuid, @RDate
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
		Set @RDate1 = ( Select Top 1
							[Date]
						From
							#Res1
						where
							[Date] < @RDate
							and [BuildingGuid] = @RBuildingGuid
						Order By
							[Date]
						)

		Set @RDate1 = (isnull(@RDate1,0))

		Set @FlatCostPrice = (
								Select
									Sum([A].[CostPrice])
								from
									[LeaseApartment] [L]
									Inner join [Apartment] [A] on [L].[ApartmentGuid] = [A].[Guid] 
								where
									[LeaseKind] = 2
									and ([L].[FromDate] < @RDate)
									and [A].[BuildingGuid] = @RBuildingGuid
								)
		update #Res1 Set [SumFlatSaleCost] = @FlatCostPrice
		where [Guid] = @RGuid

		FETCH NEXT FROM cursor_Name INTO @RGuid, @RBuildingGuid	, @Rdate
	END
	
	CLOSE cursor_Name
	DEALLOCATE cursor_Name

	Select 
		[BuildingName],
		[Date],
		[CostProject],
		[SumFlatSaleCost],
		[Percentage],
		(([CostProject] - Case when @CkBuildingPayTypelow = 1 then isnull([SumFlatSaleCost],0) else 0 end) * [Percentage] / 100) as [DueValue],
		[PayValue],
		(([CostProject] - Case when @CkBuildingPayTypelow = 1 then isnull([SumFlatSaleCost],0) else 0 end) * [Percentage] / 100) - [PayValue] as [RestValue],
		[Currency],
		[Note]
	From
		#Res1
	Order By
		[BuildingGuid],
		[Date]


GO
/****** Object:  StoredProcedure [dbo].[PrcCalcAssetsDepreciation]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcCalcAssetsDepreciation]
(
	@AssetsGruopGuid uniqueidentifier = 0x0,
	@AssetsGuid uniqueidentifier = 0x0,
	@CurrentAreaGuid uniqueidentifier = 0x0,
	@ToDate DateTime = '12/31/2016',
	@RoundKind int = 0
)
  
as
	Select 
		S.Code,
		S.name,

		[DepreciationKind],
		IsDepreciationMonthly,
		
		[DepreciationBeginDate] as [BeginDate],
		@ToDate as [EndDate],
		
		CAST(0 as Float) as [Period],
		[EnterValue] as [AssetsValue],
		S.ScrapValue,
		
		CAST(0 as Float) as DepreciationYear,
		
		CAST(0 as Float) as [Add],
		CAST(0 as Float) as [Decrease],
		
		CAST(0 as Float) as [AssetsCalcValue],
		
		S.[Age],
		CAST(0 as Float) as [DepreciationPercentYear],
		
		CAST(0 as Float) as [DepreciationValue],
		
		CAST(0 as Float) as [OldDepreciation],
		
		CAST(0 as Float) as [NewDepreciation],
		CAST(0 as Float) as [NewAssetsValue],

		S.CurrencyGUID,
		S.CurrencyVal,
		S.Guid as AssetsGuid
	into #AssetsDepreciation_Tmp
	From 
		[vwAssets] S 
		inner join [AssetsArea] F on F.Guid = S.[CurrentAssetsAreaGuid]
	where
		 (S.[AssetsGroupGuid] = @AssetsGruopGuid or @AssetsGruopGuid = 0x0)
		and (S.Guid = @AssetsGuid or @AssetsGuid = 0x0)
		and (S.CurrentAssetsAreaGuid = @CurrentAreaGuid or @CurrentAreaGuid = 0x0)
		and (S.DepreciationMode = 1)
	
	--ÊÇÑíÎ ÇáÈÏÇíÉ
	Select
		O.AssetsGuid,
		MAX(O.EndDate) as [EndDate]
	Into #AssetsendDate_Tmp
	From
		#AssetsDepreciation_Tmp T
		inner join [AssetsDepreciationDetail] O on o.AssetsGuid = T.AssetsGuid
	where
		(O.EndDate <= @ToDate)
	Group By
		O.[AssetsGuid]
	
	update #AssetsDepreciation_Tmp 
	Set
		[BeginDate] = O.endDate + 1
	From
		#AssetsDepreciation_Tmp T
		inner join #AssetsendDate_Tmp O on O.AssetsGuid = T.AssetsGuid

	--ÞíãÉ ÇáÇÕá
	
	Select
		O.AssetsGuid,
		SUM(Case when Flag = 1 then 1 
				 when Flag = 2 then -1 
			End 
			* O.Value
			) as AssetsValue
	Into #AssetsValue_Tmp
	From
		#AssetsDepreciation_Tmp T
		inner join AssetsOperation O on o.AssetsGuid = T.AssetsGuid
	where
		(o.Flag = 1 or o.Flag = 2)
		and (O.Date <= T.beginDate)
		--and (O.Date between T.beginDate and @ToDate)
	Group By
		O.[AssetsGuid]
	

	update #AssetsDepreciation_Tmp 
	Set
		[AssetsValue] = T.[AssetsValue] + O.AssetsValue
	From
		#AssetsDepreciation_Tmp T
		inner join #AssetsValue_Tmp O on O.AssetsGuid = T.AssetsGuid
	
	--ÂÎÑ Þíã ÎÑÏÉ 
	Select
		AssetsGuid,
		MAX(Date) as Date
	Into #LastAssetsOperation
	From
		AssetsOperation O
	where
		(o.Flag = 1 or o.Flag = 2)
		and (O.Date <= @ToDate)		
	Group By
		AssetsGuid		
	
	--Select * from #LastAssetsOperation
	--return
	
	Select
		O.[AssetsGuid],
		Min(O.[ScrapValue]) as [ScrapValue]
	Into #AssetsScrapValue_Tmp
	From
		#AssetsDepreciation_Tmp T
		inner join AssetsOperation O on o.AssetsGuid = T.AssetsGuid
		inner join #LastAssetsOperation L on L.AssetsGuid = T.AssetsGuid and L.Date = O.Date
	where
		(o.Flag = 1 or o.Flag = 2)
		and (O.Date <= @ToDate)
	Group By
		O.[AssetsGuid]
		
	--Select * from #AssetsScrapValue_Tmp
	--return

	update #AssetsDepreciation_Tmp 
	Set
		[ScrapValue] = O.[ScrapValue]
	From
		#AssetsDepreciation_Tmp T
		inner join #AssetsScrapValue_Tmp O on O.AssetsGuid = T.AssetsGuid
	

	--ÞíãÉ ÇáÅÖÇÝÇÊ
	Select
		O.[AssetsGuid],
		Sum([Value]) as [Value]
	Into #AssetsAdd_Tmp
	From
		#AssetsDepreciation_Tmp T
		inner join AssetsOperation O on o.AssetsGuid = T.AssetsGuid
	where
		(o.Flag = 1) 
		and (O.Date between T.beginDate and @ToDate)
	Group By
		O.[AssetsGuid]
	
	update #AssetsDepreciation_Tmp 
	Set
		[Add] = O.[Value]
	From
		#AssetsDepreciation_Tmp T
		inner join #AssetsAdd_Tmp O on O.AssetsGuid = T.AssetsGuid

	--ÞíãÉ ÇáÅÓÊÈÚÇÏÇÊ
	Select
		O.[AssetsGuid],
		Sum([Value]) as [Value]
	Into #AssetsDecrease_Tmp
	From
		#AssetsDepreciation_Tmp T
		inner join AssetsOperation O on o.AssetsGuid = T.AssetsGuid
	where
		(o.Flag = 2) 
		and (O.Date between T.beginDate and @ToDate)
	Group By
		O.[AssetsGuid]
	
	update #AssetsDepreciation_Tmp 
	Set
		[Decrease] = O.[Value]
	From
		#AssetsDepreciation_Tmp T
		inner join #AssetsDecrease_Tmp O on O.AssetsGuid = T.AssetsGuid

	--
	update #AssetsDepreciation_Tmp 
	Set
		[AssetsCalcValue] = [AssetsValue] - [ScrapValue] + isNull([Add],0) - isNull([Decrease],0)



	--ÇáÚãÑ ÇáÇäÊÇÌí	
	Select
		O.AssetsGuid,
		SUM(Case when Flag = 1 then 1 
				 when Flag = 2 then -1 
			End 
			* O.Age
			) as AssetsAge
	Into #AssetsAge_Tmp
	From
		#AssetsDepreciation_Tmp T
		inner join AssetsOperation O on o.AssetsGuid = T.AssetsGuid
	where
		(o.Flag = 1 or o.Flag = 2)
		and (O.Date <= @ToDate)
		--and (O.Date between T.beginDate and @ToDate)
	Group By
		O.[AssetsGuid]

	update #AssetsDepreciation_Tmp 
	Set
		[Age]  = T.[Age] + O.AssetsAge
	From
		#AssetsDepreciation_Tmp T
		inner join #AssetsAge_Tmp O on O.AssetsGuid = T.AssetsGuid


	--äÓÈÉ ÇáÇåÊáÇß ÇáÓäæíÉ
	update #AssetsDepreciation_Tmp 
	Set
		[DepreciationPercentYear] = ([AssetsValue] - [ScrapValue]) / Age / ([AssetsValue] - [ScrapValue]) * 100


	update #AssetsDepreciation_Tmp 
	Set
		[Period] = Case 
						when [IsDepreciationMonthly] = 0 then 
						(DATEDIFF(DAY , BeginDate , EndDate ) )+1
					else
						(DATEDIFF(Month, BeginDate , EndDate )) +1
					end

	Set Dateformat mdy
	
	Declare @TmpDate1 datetime,
			@TmpDate2 datetime
	Set @TmpDate1 = Cast(
						'1/1/'+CAST(DATEPART(Year, @ToDate) as varchar(4)) 
						AS Datetime)

	Set @TmpDate2 = Cast(
						'12/31/'+CAST(DATEPART(Year, @ToDate) as varchar(4)) 
						AS Datetime)
	
	--Select @TmpDate1, @TmpDate2, DATEDIFF(Day,@TmpDate1, @TmpDate2) 
	
	update #AssetsDepreciation_Tmp 
	Set
		DepreciationYear = Case when IsDepreciationMonthly = 0 then 
								Case when dbo.fnWorkHijridate() = 0 then DATEDIFF(Day,@TmpDate1, @TmpDate2) +1
								else 355 end
							else 12 end
	
	
	--ÞíãÉ ÇáÇåÊáÇß	
	update #AssetsDepreciation_Tmp 
	Set
		[DepreciationValue] = dbo.FnMyRound(
											([AssetsCalcValue] * ([DepreciationPercentYear] / 100) )* 
											([Period] / DepreciationYear)
											, @RoundKind)

	--ãÌãÚ ÇáÇåÊáÇßÇÊ ÇáÓÇÈÞÉ	
	Select
		O.AssetsGuid,
		Sum(O.[DepreciationValue]) as [DepreciationValue]
	Into #AssetsDepreciationValue_Tmp
	From
		#AssetsDepreciation_Tmp T
		inner join [AssetsDepreciationDetail] O on o.AssetsGuid = T.AssetsGuid
	where
		(O.EndDate <= @ToDate)
	Group By
		O.[AssetsGuid]

	update #AssetsDepreciation_Tmp 
	Set
		[OldDepreciation] = dbo.FnMyRound(O.DepreciationValue, @RoundKind)
	From
		#AssetsDepreciation_Tmp T
		inner join #AssetsDepreciationValue_Tmp O on O.AssetsGuid = T.AssetsGuid

	--ãÌãÚ ÇáÇåÊáÇß ÇáÌÏíÏ		
	update #AssetsDepreciation_Tmp 
	Set
		[NewDepreciation] = dbo.FnMyRound(OldDepreciation + DepreciationValue
										 , @RoundKind)

	--ÞíãÉ ÇáÇÕá ÇáÌÏíÏÉ
	update #AssetsDepreciation_Tmp 
	Set
		[NewAssetsValue] = dbo.FnMyRound(AssetsCalcValue + ScrapValue  - [NewDepreciation]
										, @RoundKind)
										
		
	
	Select * from #AssetsDepreciation_Tmp
	

GO
/****** Object:  StoredProcedure [dbo].[PrcCalcAvgPrice]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create Procedure [dbo].[PrcCalcAvgPrice]
(
	@GroupGuid uniqueidentifier = 0x0,
	@MatGuid uniqueidentifier = 0x0,--'C8E548B1-B7A0-4A68-A52F-8D4CF46CE624',
 	@StoreGuid uniqueidentifier = 0x0,
	@CostGuid uniqueidentifier = 0x0,
	@Class Varchar(256) = '',
	@Unit int = 0,
	@BillPost int = 2,
	@CurrencyGuid [uniqueidentifier] = '11111111-C748-4B13-8B91-1E9B299DF1C1',
	@CurrencyVal Float = 1,
	@CkDate Bit = 0,
	@Date1 DateTime = '1/1/2007',
	@Date2 DateTime = '1/1/2017'
)
as
	Set NoCount On
	exec [dbo].[PrcMatBillsDetail] 	@GroupGuid,
									@MatGuid,
									@StoreGuid,
									@CostGuid,
									@Class,
									@Unit,
									@BillPost,
									@CurrencyGuid,
									@CurrencyVal,
									@CkDate,
									@Date1,
									@Date2

	--Select * from MatBillsDetail
	--return
	Create Table #Mv 
	(
		[BuNumber] int,
		[BiNumber] int,
		[BuDate] Datetime,
		[Qty] Float, 
		[Price] Float,
		[TotalPrice] Float,		--[StoreGuid] uniqueidentifier,
		[BtInOut] int,		[Kind] int,		[BtBillKind] int,		btPriceEffected bit,		--[CostGuid] uniqueidentifier,
		[matGuid] uniqueidentifier,
		[BuGuid] uniqueidentifier,
		[AvgPrice] Float
	)

	insert into #Mv
	Select 
		[Bu].[BuNumber],
		[Bu].[BiNumber],
		[Bu].[BuDate],
		[Bu].[Qty],
		[Bu].[Price],
		[Bu].[TotalPrice],		--[Bu].[StoreGuid],
		[Bu].[BtInOut],		[Bu].[Kind],		[Bu].[BtBillKind],		bu.btPriceEffected,		--[Bu].[CostGuid],
		[Bu].[matGuid],
		[Bu].[BuGuid],
		Null
	From
		MatBillsDetail Bu		
		inner join [Resource] [R] on R.Guid = Bu.TypeGuid and R.Spid = @@Spid and (btInOut = isNull(R.Tag, 0) or isNull(R.Tag, 0) = 0)
	where
		Bu.btPriceEffected = 1
		
	--Select * from #Mv
	
	CREATE CLUSTERED INDEX #IXMV ON #Mv (MatGuid, [budate], [BuNumber])
	Alter Table #Mv add id int identity(1,1)

	DECLARE @P_MatGuid uniqueidentifier
	
	DECLARE @cursor_MatGuid CURSOR 
	Set @cursor_MatGuid = CURSOR FAST_FORWARD FOR 

	SELECT Distinct MatGuid From #Mv
	
	OPEN @cursor_MatGuid
	FETCH NEXT FROM @cursor_MatGuid INTO @P_MatGuid
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
				exec DropObject '#Mv_Mat'
				Create Table #Mv_Mat 
				(
					[BuNumber] int,
					[BiNumber] int,
					[BuDate] Datetime,
					[Qty] Float, 
					[Price] Float,
					[TotalPrice] Float,					[BtInOut] int,					[Kind] int,					[BtBillKind] int,					btPriceEffected bit,					[AvgPrice] Float,					[ParentId] int				)
				
				insert into #Mv_Mat
				([BuNumber],[BiNumber],[BuDate],[Qty],[Price],[TotalPrice],[BtInOut],[Kind],[BtBillKind],btPriceEffected,[AvgPrice],[ParentId])
				Select
					[BuNumber],[BiNumber],[BuDate],[Qty],[Price],[TotalPrice],[BtInOut],[Kind],[BtBillKind],btPriceEffected,Null, [Id]
				From
					#Mv
				where
					MatGuid = @P_MatGuid
					
				--if exists(Select * from tempdb.sys.objects where Name Like '#IXMATMOVE%')
				CREATE CLUSTERED INDEX #IXMATMOVE ON #Mv_Mat ([budate], [BuNumber],[BiNumber])
				Alter Table #Mv_Mat add id int identity(1,1)
				
				--Select * from #Mv_Mat order by id
				
				--ÍÓÇÈ áÓÚÑ ÇáæÓØí
					
				Declare @P_id int,  @P_Qty Float, @P_Price Float, @P_AvgPrice Float, 
						@Parent_id int,
						@BtBillKind int,
						@btinOut int,
						@BalanceQty Float,
						@btPriceEffected Bit
				Set @P_AvgPrice = 0
				Set @BalanceQty = 0
				
				DECLARE @cursor_Name CURSOR 
				Set @cursor_Name = CURSOR FAST_FORWARD FOR 
				SELECT id, Qty, Price, BtBillKind, btinOut, [btPriceEffected],[ParentId]
				FROM #Mv_Mat
				order by id
				
				OPEN @cursor_Name
				FETCH NEXT FROM @cursor_Name INTO @P_id, @P_Qty, @P_Price, @BtBillKind, @btinOut, @btPriceEffected, @Parent_id
				
				WHILE @@FETCH_STATUS = 0
				BEGIN
					if ((@BtBillKind = 0) or (@BtBillKind = 4) )  --ÔÑÇÁ Çæ ÇÏÎÇá
						and @btPriceEffected = 1
					Set @P_AvgPrice = ((@BalanceQty * @P_AvgPrice)+( @P_Qty * @P_Price)) / (@BalanceQty + @P_Qty)
						
					
					Set @BalanceQty = @BalanceQty + (@P_Qty *@btinOut)
					
					Update #Mv Set [AvgPrice] = @P_AvgPrice where [id] = @Parent_id and [MatGuid] = @P_MatGuid
						
				  FETCH NEXT FROM @cursor_Name INTO @P_id, @P_Qty, @P_Price, @BtBillKind, @btinOut, @btPriceEffected,@Parent_id
				END
				
				CLOSE @cursor_Name
				DEALLOCATE @cursor_Name
				
				
	  FETCH NEXT FROM @cursor_MatGuid INTO @P_MatGuid
	
	END
	
	CLOSE @cursor_MatGuid
	DEALLOCATE @cursor_MatGuid
	
	Select
		BuDate,
		BuNumber,
		[BiNumber],
		[matGuid],
		[BuGuid],
		[AvgPrice]
	from 
		#Mv 


GO
/****** Object:  StoredProcedure [dbo].[PrcCalcElectricity]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcCalcElectricity] (@Str Varchar(8000), @X Float)
  
as
	Set NoCount On
	Set @Str = REPLACE(UPPER(@Str), '[X]', Cast(@x as Varchar(50)))
	
	Set @Str = 'Select '+  +@Str +'  as [Value]'
	Print(@str)
	Exec(@str)


GO
/****** Object:  StoredProcedure [dbo].[PrcCalcElectricityOverdue]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcCalcElectricityOverdue]
(
	@Guid uniqueidentifier = '{1A1D6ECB-5D1B-44F5-9AAF-9A41AC704834}',
	@CustGuid uniqueidentifier = '{966B9012-AE38-4747-A505-5F0F9E5A8874}',
	@CurrencyGuid  uniqueidentifier = '{11111111-C748-4B13-8B91-1E9B299DF1C1}',
	@CurrencyVal Float = 1
)
  
as
	if @Guid is Null
	Select @Guid = Guid From ElectricityBill where Number = 1
	
	Declare @CheckValue Float,
			@CachValue Float,
			@SumElectricityValue Float
	
	Select 
		@SumElectricityValue = 
		Sum(	
		(isNull([P].Consumption,0) + isNull([P].WaterValue ,0) +isNull([P].DrainageValue ,0) +isNull([P].FineValue ,0) +isNull([P].FeeValue ,0) +
		isNull([P].Extra  ,0) - isNull([P].Discount  ,0)) * 
		Case when @CurrencyGuid = [CurrencyGUID] then 1 else [CurrencyVal] / @CurrencyVal end
		)
	From 
		[ElectricityBill] P
	where
		(Guid <> @Guid)
		and ([CustGuid] = @CustGuid)

	

	Select 
		@CheckValue = Sum([LL].[Value] * Case when @CurrencyGuid = P.[CurrencyGUID] then 1 else p.[CurrencyVal] / @CurrencyVal end)
	From
		[vwChecks] [P]
		inner join [LinkCheckContract] LL on LL.ParentGuid = P.Guid
		inner join ElectricityBill B on B.Guid = LL.ContractGuid 
 	where
 		(LL.[ContractGuid] <> @Guid)
 		and (b.CustGuid = @CustGuid )
 		
 	
	select
		@CachValue = Sum([P].[Value] * Case when @CurrencyGuid = p.[CurrencyGUID] then 1 else p.[CurrencyVal] / @CurrencyVal end)
	from
		vwElectricityCachPayment  [P]
		inner join ElectricityBill B on B.Guid = P.ContractGuid 
 	where
 		(P.[ContractGuid] <> @Guid)
 		and (b.CustGuid = @CustGuid )
 		
 	Select 
 			IsNull(@SumElectricityValue, 0) , IsNull(@CachValue,0) , IsNull(@CheckValue,0),
 			IsNull(@SumElectricityValue, 0) - (IsNull(@CachValue,0) + IsNull(@CheckValue,0)) as [Value]


GO
/****** Object:  StoredProcedure [dbo].[PrcCalcMaxAccountcode]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcCalcMaxAccountcode]
(
	@Guid uniqueidentifier = '9A88A0D4-1A00-42F6-90F5-649308B14269'
)
  as

	Declare @LenCode int
	Set @LenCode = (Select Len([Code]) From [Account] where [Guid] = @Guid)
	Declare @mxCode varchar(255)
	
	select Top 1
		@mxCode = 
		Case when ISNUMERIC( RIGHT([Code], Len([Code]) - @LenCode)) = 1
		then 
			[Code]
		end
	From 
		Account
	where 
		[ParentGuid] = @Guid	
	order by
		len(Code) desc , Code desc

	if @mxCode = ''	Set @mxCode = Null

	Declare @Ms Varchar(256)
	Set @Ms = dbo.SC('áÇ íãßä ÇáÊÑãíÒ áæÌæÏ ãÍÇÑÝ Öãä ÇáÑãÒ') --+ '  ' + @mxCode

	Declare @ChildCount int
	Select @ChildCount = COUNT(*) From Account where ParentGUID = @Guid
	
	if (ISNULL(@mxCode,'') = '') and (ISNULL(@ChildCount,0) <> 0)

	if ISNULL(@mxCode,'') = ''
	begin
		RAISERROR (@Ms, 16, 1)
		return
	end
	--return

	Declare @Code Varchar(20)
	Set @Code = (Select [Code] From [Account] where [Guid] = @Guid)
	
	Declare @LenNewCode int
	Set @LenNewCode = Len(@mxCode)  - @LenCode

	if ISNULL(@LenNewCode, 0) = 0 Set @LenNewCode = 1
		
	Select 
		@Code + 
		ISNULL(
		Cast(
				dbo.FnFormatNumber(
									Right(Cast(RIGHT(@mxCode, Len(@mxCode) - @LenCode)as int)+1 , 
									@LenNewCode), @LenNewCode) as Varchar(256
								  )
			), '001') as [Code]
			

GO
/****** Object:  StoredProcedure [dbo].[PrcCalcMaxAssetsCode]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcCalcMaxAssetsCode]
(
	@Guid uniqueidentifier = '9391B469-5E43-477E-AB04-7F7750DC8D7A'
)
  
as
	Declare @Code Varchar(20)
	Set @Code = (Select [Code] From AssetsGroup where [Guid] = @Guid)

	
	Declare @LenCode int
	Set @LenCode = (Select Len(Max([Code])) From Assets where [AssetsGroupGuid] = @Guid)

	
	Declare @LenNewCode int
	Set @LenNewCode = (
						Select 
							Len(Max([Code])) 
						From 
							[AssetsGroup] where Guid =@Guid	
					) 

	--Select @LenCode as LenCode, @LenNewCode as LenNewCode
	--return

--	Select 
--			dbo.FnFormatNumber(Right(Cast(RIGHT(Max([Code]), Len(Max([Code])) - @LenCode)as int)+1 , @LenNewCode), @LenNewCode)
--	From [AssetsGroup] where ParentGuid =@Guid	
	 
	declare @c varchar(256)
	 
	Select 
		@c = 
		Cast(
				dbo.FnFormatNumber(
										Right(
												Cast(
														RIGHT(Max([Code]), @LenCode - @LenNewCode) as int)+1 , 
														@LenNewCode
											  ), @LenCode - @LenNewCode
								  ) as Varchar(256)
			)
	From [Assets] where AssetsGroupGuid = @Guid	
	
	Select @Code + ISNULL(@C, '01') AS Code

GO
/****** Object:  StoredProcedure [dbo].[PrcCalcMaxAssetsGroupcode]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcCalcMaxAssetsGroupcode]
(
	@Guid uniqueidentifier = 'AB744D68-FFE3-4EA0-B7E5-D13668BC95D4'
)   as
	Declare @LenCode int
	Set @LenCode = (Select Len([Code]) From AssetsGroup where [Guid] = @Guid)

	Declare @Code Varchar(20)
	Set @Code = (Select [Code] From AssetsGroup where [Guid] = @Guid)

	Declare @LenNewCode int
	Set @LenNewCode = (
						Select 
							Len(Max([Code])) 
						From 
							[AssetsGroup] where ParentGuid =@Guid	
					) - @LenCode

--	Select @Code as Code, @LenCode as LenCode, @LenNewCode as LenNewCode

--	Select 
--			dbo.FnFormatNumber(Right(Cast(RIGHT(Max([Code]), Len(Max([Code])) - @LenCode)as int)+1 , @LenNewCode), @LenNewCode)
--	From [AssetsGroup] where ParentGuid =@Guid	
	 
	 declare @c varchar(256)
	 
	Select 
		@c = 
		Cast(
				dbo.FnFormatNumber(Right(Cast(RIGHT(Max([Code]), Len(Max([Code])) - @LenCode)as int)+1 , @LenNewCode), @LenNewCode) as Varchar(256)
			)
	From [AssetsGroup] where ParentGuid = @Guid	
	
	Select @Code + ISNULL(@C, '01') AS Code

GO
/****** Object:  StoredProcedure [dbo].[PrcCalcMaxCostcode]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcCalcMaxCostcode]
(
	@Guid uniqueidentifier = '9A88A0D4-1A00-42F6-90F5-649308B14269'
)
  as

	Declare @LenCode int
	Set @LenCode = (Select Len([Code]) From [Cost] where [Guid] = @Guid)
	Declare @mxCode varchar(255)
	
	select Top 1
		@mxCode = 
		Case when ISNUMERIC( RIGHT([Code], Len([Code]) - @LenCode)) = 1
		then 
			[Code]
		end
	From 
		Cost
	where 
		[ParentGuid] = @Guid	
	order by
		len(Code) desc , Code desc

	if @mxCode = ''	Set @mxCode = Null

	Declare @Ms Varchar(256)
	Set @Ms = dbo.SC('áÇ íãßä ÇáÊÑãíÒ áæÌæÏ ãÍÇÑÝ Öãä ÇáÑãÒ') --+ '  ' + @mxCode

	Declare @ChildCount int
	Select @ChildCount = COUNT(*) From Cost where ParentGUID = @Guid
	
	if (ISNULL(@mxCode,'') = '') and (ISNULL(@ChildCount,0) <> 0)

	if ISNULL(@mxCode,'') = ''
	begin
		RAISERROR (@Ms, 16, 1)
		return
	end
	--return

	Declare @Code Varchar(20)
	Set @Code = (Select [Code] From [Cost] where [Guid] = @Guid)
	
	Declare @LenNewCode int
	Set @LenNewCode = Len(@mxCode)  - @LenCode

	if ISNULL(@LenNewCode, 0) = 0 Set @LenNewCode = 1
		
	Select 
		@Code + 
		ISNULL(
		Cast(
				dbo.FnFormatNumber(
									Right(Cast(RIGHT(@mxCode, Len(@mxCode) - @LenCode)as int)+1 , 
									@LenNewCode), @LenNewCode) as Varchar(256
								  )
			), '001') as [Code]
			

GO
/****** Object:  StoredProcedure [dbo].[PrcCalcMaxGroupcode]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcCalcMaxGroupcode]
(
	@Guid uniqueidentifier = '397500C4-638D-4169-8D40-2F017AB33582'
)
  as
	Declare @LenCode int
	Set @LenCode = (Select Len([Code]) From MatGroup where [Guid] = @Guid)

	Declare @Code Varchar(20)
	Set @Code = (Select [Code] From MatGroup where [Guid] = @Guid)
	

	Declare @LenNewCode int
	Set @LenNewCode = (
						Select 
							Len(Max([Code])) 
						From 
							[Mat] where GroupGuid =@Guid	
					) - @LenCode

	--Select @Code as Code, @LenCode as LenCode, @LenNewCode as LenNewCode
	
	if ISNULL(@LenNewCode, 0) = 0 Set @LenNewCode = 1

--	Select 
--			dbo.FnFormatNumber(Right(Cast(RIGHT(Max([Code]), Len(Max([Code])) - @LenCode)as int)+1 , @LenNewCode), @LenNewCode)
--	From [MatGroup] where ParentGuid =@Guid	
	 
	Declare @mxCode varchar(255)
	Set @mxCode = '' 
	select
		@mxCode = 
		Case when ISNUMERIC( RIGHT(Max([Code]), Len(Max([Code])) - @LenCode)) = 0
		then RIGHT(Max([Code]), Len(Max([Code])) - @LenCode)
		end
	From 
		Mat
	where 
		[GroupGuid]  = @Guid	
	
	Declare @Ms Varchar(256)
	Set @Ms = dbo.SC('áÇ íãßä ÇáÊÑãíÒ áæÌæÏ ãÍÇÑÝ Öãä ÇáÑãÒ') + '  ' + @mxCode

	if ISNULL(@mxCode,'') <> ''
	begin
		RAISERROR (@Ms, 16, 1)
		return
	end
	 
	Select 
		@Code + 
		ISNULL(
		Cast(
				dbo.FnFormatNumber(
									Right(Cast(RIGHT(Max([Code]), Len(Max([Code])) - @LenCode)as int)+1 , 
									@LenNewCode), @LenNewCode) as Varchar(256
								  )
			), '01') as [Code]
	From 
		[Mat] 
	where 
		[GroupGuid] = @Guid	

GO
/****** Object:  StoredProcedure [dbo].[PrcCalcMaxIncAccountcode]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcCalcMaxIncAccountcode]
(
	@Guid uniqueidentifier = '9A88A0D4-1A00-42F6-90F5-649308B14269'
)
  as

	Declare @LenCode int
	Set @LenCode = (Select Len([Code]) From [IncAccount] where [Guid] = @Guid)
	Declare @mxCode varchar(255)
	
	select Top 1
		@mxCode = 
		Case when ISNUMERIC( RIGHT([Code], Len([Code]) - @LenCode)) = 1
		then 
			[Code]
		end
	From 
		IncAccount
	where 
		[ParentGuid] = @Guid	
	order by
		len(Code) desc , Code desc

	if @mxCode = ''	Set @mxCode = Null

	Declare @Ms Varchar(256)
	Set @Ms = dbo.SC('áÇ íãßä ÇáÊÑãíÒ áæÌæÏ ãÍÇÑÝ Öãä ÇáÑãÒ') --+ '  ' + @mxCode

	Declare @ChildCount int
	Select @ChildCount = COUNT(*) From IncAccount where ParentGUID = @Guid
	
	if (ISNULL(@mxCode,'') = '') and (ISNULL(@ChildCount,0) <> 0)

	if ISNULL(@mxCode,'') = ''
	begin
		RAISERROR (@Ms, 16, 1)
		return
	end
	--return

	Declare @Code Varchar(20)
	Set @Code = (Select [Code] From [IncAccount] where [Guid] = @Guid)
	
	Declare @LenNewCode int
	Set @LenNewCode = Len(@mxCode)  - @LenCode

	if ISNULL(@LenNewCode, 0) = 0 Set @LenNewCode = 1
		
	Select 
		@Code + 
		ISNULL(
		Cast(
				dbo.FnFormatNumber(
									Right(Cast(RIGHT(@mxCode, Len(@mxCode) - @LenCode)as int)+1 , 
									@LenNewCode), @LenNewCode) as Varchar(256
								  )
			), '001') as [Code]
			

GO
/****** Object:  StoredProcedure [dbo].[PrcCalcMaxStorecode]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcCalcMaxStorecode]
(
	@Guid uniqueidentifier = '{ADCE91EB-16AD-49DB-8F74-410DC81E3E1C}'
)
  as

	Declare @LenCode int
	Set @LenCode = (Select Len([Code]) From Store where [Guid] = @Guid)
	Declare @mxCode varchar(255)
	Set @mxCode = '' 
	select
		@mxCode = 
		Case when ISNUMERIC( RIGHT(Max([Code]), Len(Max([Code])) - @LenCode)) = 1
		then RIGHT(Max([Code]), Len(Max([Code])) - @LenCode)
		end
	From 
		Store
	where 
		[ParentGuid] = @Guid	
	
	Declare @ChildCount int
	Select @ChildCount = COUNT(*) From Store where ParentGUID = @Guid
	
	if (ISNULL(@mxCode,'') = '') and (ISNULL(@ChildCount,0) <> 0)

	Declare @Ms Varchar(256)
	Set @Ms = dbo.SC('áÇ íãßä ÇáÊÑãíÒ áæÌæÏ ãÍÇÑÝ Öãä ÇáÑãÒ') + '  ' + @mxCode

	if ISNULL(@mxCode,'') <> ''
	begin
		RAISERROR (@Ms, 16, 1)
		return
	end


	Declare @Code Varchar(20)
	Set @Code = (Select [Code] From Store where [Guid] = @Guid)
	
	Declare @MaxCode varchar(255)
	Select 
		@MaxCode = Max(Cast([Code] as numeric(20)))
	From 
		Store where ParentGuid =@Guid	
							
	
	Declare @LenNewCode int
	Set @LenNewCode = Len(@MaxCode)  - @LenCode

	if ISNULL(@LenNewCode, 0) = 0 Set @LenNewCode = 1
		
	Select 
		@Code + 
		ISNULL(
		Cast(
				dbo.FnFormatNumber(
									Right(Cast(RIGHT(@MaxCode, Len(@MaxCode) - @LenCode)as int)+1 , 
									@LenNewCode), @LenNewCode) as Varchar(256
								  )
			), '01') as [Code]
			

GO
/****** Object:  StoredProcedure [dbo].[PrcCalcPrvContractGuid]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[PrcCalcPrvContractGuid]
(
	@Kind int = 0, -- 0 all 1 flat 2 land 3 parking
	@ContractGuid uniqueidentifier = 0x0
)
  
as
	
	if (@Kind = 0 or @Kind = 1)
	begin
		ALTER TABLE [LeaseApartment] Disable TRIGGER [TRG_TraceContract_LeaseApartment]
		
		Update [LeaseApartment] 
		Set 
			[PrvContractGuid] = (Select Top 1
									Guid 
								from 
									[LeaseApartment] P 
								where 
									p.CustomerGuid = l.CustomerGuid
									and P.ApartmentGuid = l.ApartmentGuid
									and P.Guid <> l.Guid
								Order by
									FromDate desc
								)
		From
			[LeaseApartment] L
		where
			L.Guid = @ContractGuid or @ContractGuid = 0x0
			
		ALTER TABLE [LeaseApartment] ENABLE TRIGGER [TRG_TraceContract_LeaseApartment]
	end

	if (@Kind = 0 or @Kind = 2)
	begin
		ALTER TABLE [LandContract] Disable TRIGGER [TRG_Trace_LandContract]
		Update [LandContract]  
		Set 
			[PrvContractGuid] = (Select Top 1
									Guid 
								from 
									[LandContract] P 
								where 
									p.CustomerGuid = l.CustomerGuid
									and P.LandGuid = l.LandGuid
									and P.Guid <> l.Guid
								Order by
									FromDate desc
								)
		From
			[LandContract] L
		where
			L.Guid = @ContractGuid or @ContractGuid = 0x0
			
		ALTER TABLE [LandContract] Enable TRIGGER [TRG_Trace_LandContract]
	end

	if (@Kind = 0 or @Kind = 3)
	begin	
		ALTER TABLE [ParkingContract] Disable TRIGGER [TRG_Trace_ParkingContract]
		Update [ParkingContract]   
		Set 
			[PrvContractGuid] = (Select Top 1
									Guid 
								from 
									[ParkingContract]  P 
								where 
									p.CustomerGuid = l.CustomerGuid
									and P.ParkingGuid = l.ParkingGuid
									and P.Guid <> l.Guid
								Order by
									FromDate desc
								)
		From
			[ParkingContract]  L
		where
			L.Guid = @ContractGuid or @ContractGuid = 0x0
			
		ALTER TABLE [ParkingContract] Enable TRIGGER [TRG_Trace_ParkingContract]
	end
		

GO
/****** Object:  StoredProcedure [dbo].[PrcChangeAccountMovment]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcChangeAccountMovment]
(
	@AcGuid1 uniqueidentifier = 0x0,
	@AcGuid2 uniqueidentifier = 0x0,
	@Date1 DateTime = '1/1/2007',
	@Date2 DateTime = '1/1/2010'
)
  
as
	Declare @RC int

	--------
	Update [Dentry] 
	Set [AcGuid] = @AcGuid2
	From 
		[Dentry]  [D]
		inner join [HEntry] [H] On [D].[ParentGuid] = [H].[Guid]
	where
		[AcGuid] = @AcGuid1
		and ([H].[Date] Between @Date1 And @Date2)

	Select @RC = isnull(@@RowCount,0)

	Update [Dentry] 
	Set [ObverseAcGuid] = @AcGuid2
	From 
		[Dentry]  [D]
		inner join [HEntry] [H] On [D].[ParentGuid] = [H].[Guid]
	where
		[ObverseAcGuid] = @AcGuid1
		and ([H].[Date] Between @Date1 And @Date2)

	--------
	Update [Secondary_Entry] Set [AccountGuid] = @AcGuid2
	where
		[AccountGuid] = @AcGuid1
		and ([Date] Between @Date1 And @Date2)

	Select @RC = @RC + isnull(@@RowCount,0)

	--------
	Update [Secondary_EntryDetail] 
	Set [AcGuid] = @AcGuid2
	From
		[Secondary_EntryDetail] [D]
		inner join [Secondary_Entry] [H] On [D].[ParentGuid] = [H].[Guid]
	where
		[AcGuid] = @AcGuid1
		and ([H].[Date] Between @Date1 And @Date2)

	Select @RC = @RC + isnull(@@RowCount,0)

	--------
	Update [Secondary_EntryDetail] 
	Set [ObverseAcGuid] = @AcGuid2
	From
		[Secondary_EntryDetail] [D]
		inner join [Secondary_Entry] [H] On [D].[ParentGuid] = [H].[Guid]
	where
		[ObverseAcGuid] = @AcGuid1
		and ([H].[Date] Between @Date1 And @Date2)

	Select @RC = @RC + isnull(@@RowCount,0)


	Select @RC as [Count]

GO
/****** Object:  StoredProcedure [dbo].[PrcChangeCostMovment]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcChangeCostMovment]
(
	@CostGuid1 uniqueidentifier = 0x0,
	@CostGuid2 uniqueidentifier = 0x0,
	@Date1 DateTime = '1/1/2007',
	@Date2 DateTime = '1/1/2010'
)
  
as
	Declare @RC int

	--------
	Update [Dentry] 
	Set [CostGuid] = @CostGuid2
	From 
		[Dentry]  [D]
		inner join [HEntry] [H] On [D].[ParentGuid] = [H].[Guid]
	where
		[CostGuid] = @CostGuid1
		and ([H].[Date] Between @Date1 And @Date2)

	Select @RC = isnull(@@RowCount,0)

	--------
	Update [Secondary_EntryDetail] 
	Set [CostGuid] = @CostGuid2
	From
		[Secondary_EntryDetail] [D]
		inner join [Secondary_Entry] [H] On [D].[ParentGuid] = [H].[Guid]
	where
		[CostGuid] = @CostGuid1
		and ([H].[Date] Between @Date1 And @Date2)

	Select @RC = @RC + isnull(@@RowCount,0)


	Select @RC as [Count]

GO
/****** Object:  StoredProcedure [dbo].[PrcChangeFlatCost]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcChangeFlatCost]
(
	@BuildingGuid uniqueidentifier = 0x0
	,@NewUnitCost Float = 100
	,@RoundKind int  = 0
)
  
as
	update [Apartment] Set [CostPrice] = dbo.FnMyRound(([Area] * @NewUnitCost), @RoundKind)
	where 
		([BuildingGuid] = @BuildingGuid or @BuildingGuid = 0x0) 
		and [Area] <> 0

	Select @@RowCount as [RowCount]


GO
/****** Object:  StoredProcedure [dbo].[PrcChangeFlatPrice]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcChangeFlatPrice]
(
	@BuildingGuid uniqueidentifier = 0x0,
	@ApartmentType Varchar(256) = '',
	@FlatKind Varchar(256) = '',
	@Area Float = 0,
	@NewDate Datetime = '1/1/2007',
	
	@Option Int = 2,
	
	@Rent Float = 1485,
	@NewRent  Float = 20,
	
	@RoundKind int  = 0

	,@SalesKind int = 1
	,@Note Varchar(256) = ''
	,@Overlooking Varchar(256) = ''
)
  
as
	--ÊÛííÑ Çáì ÓÚÑ ÌÏíÏ
	if 	@Option  = 0
	begin
		insert into [ChangeFlatPrice]
		([Number],[ParentGuid],[Date],[Price],[CurrencyGuid], [Kind])
		Select
			isNull([M].[MaxNumber],1),
			[F].[Guid],
			@NewDate,
			dbo.FnMyRound(@Rent, @RoundKind),
			[F].[CostCurrencyGUID]
			,@SalesKind
		From
			[Apartment][F]
			left join (
							Select
								[ParentGuid],
								isnull(Max([Number]),0) + 1 as [MaxNumber]
							From
								[ChangeFlatPrice] [C]
							Group By
								[ParentGuid]
						) [M] on [M].[ParentGuid] = [F].[Guid]
		where 
			([F].[BuildingGuid] = @BuildingGuid or @BuildingGuid = 0x0) 
			and ([ApartmentType] = @ApartmentType or @ApartmentType = '')
			and ([FlatKind] = @FlatKind or @FlatKind = '')
			and ([Area] = @Area Or @Area = 0)
			and ([Note] = @Note or @Note = '')
			and ([F].[Overlooking] = @Overlooking or @Overlooking	 = '')
	
		Select @@RowCount as [RowCount]
	end


	if 	@Option  = 1
	begin
		insert into [ChangeFlatPrice]
		([Number],[ParentGuid],[Date],[Price],[CurrencyGuid], [Kind])
		Select
			isNull([M].[MaxNumber],1),
			[F].[Guid],
			@NewDate,
			dbo.FnMyRound([R].[Rent]+@Rent, @RoundKind),
			R.[RentCurrencyGuid]
			,@SalesKind
		From
			[Apartment][F]
			left join (
							Select
								[ParentGuid],
								isnull(Max([Number]),0) + 1 as [MaxNumber]
							From
								[ChangeFlatPrice] [C]
							Group By
								[ParentGuid]
						) [M] on [M].[ParentGuid] = [F].[Guid]
			left join (
							Select
								[ParentGuid],
								[Price] as [Rent],
								[CurrencyGuid] as [RentCurrencyGuid]
							From
								[ChangeFlatPrice] [C]
							where
								[Number] = (Select Max([Number]) From [ChangeFlatPrice] [C2] where [C].[ParentGuid] = [C2].[ParentGuid])									
						) [R] on [R].[ParentGuid] = [F].[Guid]
	
		where 
			([F].[BuildingGuid] = @BuildingGuid or @BuildingGuid = 0x0) 
			and ([ApartmentType] = @ApartmentType or @ApartmentType = '')
			and ([FlatKind] = @FlatKind or @FlatKind = '')
			and ([Area] = @Area Or @Area = 0)
			and ([Note] = @Note or @Note = '')
			and ([F].[Overlooking] = @Overlooking or @Overlooking	 = '')
	
		Select @@RowCount as [RowCount]
	end


	-- ÇáÖÑÈ ÈÑÞã ËÇÈÊ
	if 	@Option  = 2
	begin
		insert into [ChangeFlatPrice]
		([Number],[ParentGuid],[Date],[Price],[CurrencyGuid], [Kind])
		Select
			isNull([M].[MaxNumber],1),
			[F].[Guid],
			@NewDate,
			dbo.FnMyRound([R].[Rent]*@Rent, @RoundKind),
			R.[RentCurrencyGuid]
			,@SalesKind
		From
			[Apartment][F]
			left join (
							Select
								[ParentGuid],
								isnull(Max([Number]),0) + 1 as [MaxNumber]
							From
								[ChangeFlatPrice] [C]
							Group By
								[ParentGuid]
						) [M] on [M].[ParentGuid] = [F].[Guid]
			left join (
							Select
								[ParentGuid],
								[Price] as [Rent],
								[CurrencyGuid] as [RentCurrencyGuid]
							From
								[ChangeFlatPrice] [C]
							where
								[Number] = (Select Max([Number]) From [ChangeFlatPrice] [C2] where [C].[ParentGuid] = [C2].[ParentGuid])									
						) [R] on [R].[ParentGuid] = [F].[Guid]
	
		where 
			([F].[BuildingGuid] = @BuildingGuid or @BuildingGuid = 0x0) 
			and ([ApartmentType] = @ApartmentType or @ApartmentType = '')
			and ([FlatKind] = @FlatKind or @FlatKind = '')
			and ([Area] = @Area Or @Area = 0)
			and ([Note] = @Note or @Note = '')
			and ([F].[Overlooking] = @Overlooking or @Overlooking	 = '')
	
		Select @@RowCount as [RowCount]
	end
	

	-- ÇáÖÑÈ ÈäÓÈÉ ãÆæíÉ
	if 	@Option  = 3
	begin
		insert into [ChangeFlatPrice]
		([Number],[ParentGuid],[Date],[Price],[CurrencyGuid], [Kind])
		Select
			isNull([M].[MaxNumber],1),
			[F].[Guid],
			@NewDate,
			dbo.FnMyRound([R].[Rent]+([R].[Rent]*@Rent /100), @RoundKind),
			R.[RentCurrencyGuid]
			,@SalesKind
		From
			[Apartment][F]
			left join (
							Select
								[ParentGuid],
								isnull(Max([Number]),0) + 1 as [MaxNumber]
							From
								[ChangeFlatPrice] [C]
							Group By
								[ParentGuid]
						) [M] on [M].[ParentGuid] = [F].[Guid]
			left join (
							Select
								[ParentGuid],
								[Price] as [Rent],
								[CurrencyGuid] as [RentCurrencyGuid]
							From
								[ChangeFlatPrice] [C]
							where
								[Number] = (Select Max([Number]) From [ChangeFlatPrice] [C2] where [C].[ParentGuid] = [C2].[ParentGuid])									
						) [R] on [R].[ParentGuid] = [F].[Guid]
	
		where 
			([F].[BuildingGuid] = @BuildingGuid or @BuildingGuid = 0x0) 
			and ([ApartmentType] = @ApartmentType or @ApartmentType = '')
			and ([FlatKind] = @FlatKind or @FlatKind = '')
			and ([Note] = @Note or @Note = '')
			and ([Area] = @Area Or @Area = 0)
			and ([F].[Overlooking] = @Overlooking or @Overlooking	 = '')
	
		Select @@RowCount as [RowCount]
	end

	-- ÊÛííÑ ßá ÓÚÑ Çáì
	if 	@Option  = 4
	begin
		insert into [ChangeFlatPrice]
		([Number],[ParentGuid],[Date],[Price],[CurrencyGuid], [Kind])
		Select
			isNull([M].[MaxNumber],1),
			[F].[Guid],
			@NewDate,
			dbo.FnMyRound(@NewRent, @RoundKind),
			R.[RentCurrencyGuid]
			,@SalesKind
		From
			[Apartment][F]
			left join (
							Select
								[ParentGuid],
								isnull(Max([Number]),0) + 1 as [MaxNumber]
							From
								[ChangeFlatPrice] [C]
							Group By
								[ParentGuid]
						) [M] on [M].[ParentGuid] = [F].[Guid]
			left join (
							Select
								[ParentGuid],
								[Price] as [Rent],
								[CurrencyGuid] as [RentCurrencyGuid]
							From
								[ChangeFlatPrice] [C]
							where
								[Number] = (Select Max([Number]) From [ChangeFlatPrice] [C2] where [C].[ParentGuid] = [C2].[ParentGuid])									
						) [R] on [R].[ParentGuid] = [F].[Guid]
	
		where 
			([F].[BuildingGuid] = @BuildingGuid or @BuildingGuid = 0x0) 
			and ([ApartmentType] = @ApartmentType or @ApartmentType = '')
			and ([Area] = @Area Or @Area = 0)
			and ([FlatKind] = @FlatKind or @FlatKind = '')
			and [R].[Rent] = @Rent
			and ([Note] = @Note or @Note = '')
			and ([F].[Overlooking] = @Overlooking or @Overlooking	 = '')
	
		Select @@RowCount as [RowCount]
	end

	

GO
/****** Object:  StoredProcedure [dbo].[PrcChangeFlatRent]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcChangeFlatRent]
(
	@BuildingGuid uniqueidentifier = 0x0,
	@FlatGuid uniqueidentifier = 0x0,
	@RentState int = 2,
	@ApartmentType Varchar(256) = '',
	@FlatKind Varchar(256) = '',
	@Area Float = 0,
	@NewDate Datetime = '1/1/2007',
	
	@Option Int = 2,
	
	@Rent Float = 1485,
	@NewRent  Float = 20,
	
	@RoundKind int  = 0
	,@Note Varchar(256) = ''
	,@Overlooking Varchar(256) = ''
)
  
as
	--ÊÛííÑ Çáì ÓÚÑ ÌÏíÏ
	if 	@Option  = 0
	begin
		insert into [ChangeFlatRent]
		([Number],[ParentGuid],[Date],[Price],[CurrencyGuid])
		Select Distinct
			isNull([M].[MaxNumber],1),
			[F].[Guid],
			@NewDate,
			dbo.FnMyRound(@Rent, @RoundKind),
			[F].[CostCurrencyGUID]
		From
			[vbApartment][F]
			left join (
							Select
								[ParentGuid],
								isnull(Max([Number]),0) + 1 as [MaxNumber]
							From
								[ChangeFlatRent] [C]
							Group By
								[ParentGuid]
						) [M] on [M].[ParentGuid] = [F].[Guid]
			left join [LeaseApartment] [L] On [L].[ApartmentGuid] = [F].[Guid]
		where 
			([F].[BuildingGuid] = @BuildingGuid or @BuildingGuid = 0x0) 
			and ([F].[ApartmentType] = @ApartmentType or @ApartmentType = '')
			and ([FlatKind] = @FlatKind or @FlatKind = '')
			and ([Area] = @Area Or @Area = 0)
			and (Case when [L].[Guid] is Not null then 0 
					  when [L].[Guid] is null then 1 end = @RentState or @RentState = 2
				)
			and ([F].[Note] = @Note or @Note = '')
			and ([F].[Overlooking] = @Overlooking or @Overlooking	 = '')
			and (F.Guid = @FlatGuid or @FlatGuid = 0x0)

		Select @@RowCount as [RowCount]
	end


	if 	@Option  = 1
	begin
		insert into [ChangeFlatRent]
		([Number],[ParentGuid],[Date],[Price],[CurrencyGuid])
		Select Distinct
			isNull([M].[MaxNumber],1),
			[F].[Guid],
			@NewDate,
			dbo.FnMyRound([R].[Rent]+@Rent, @RoundKind),
			R.[RentCurrencyGuid]
		From
			[Apartment][F]
			left join (
							Select
								[ParentGuid],
								isnull(Max([Number]),0) + 1 as [MaxNumber]
							From
								[ChangeFlatRent] [C]
							Group By
								[ParentGuid]
						) [M] on [M].[ParentGuid] = [F].[Guid]
			left join (
							Select
								[ParentGuid],
								[Price] as [Rent],
								[CurrencyGuid] as [RentCurrencyGuid]
							From
								[ChangeFlatRent] [C]
							where
								[Number] = (Select Max([Number]) From [ChangeFlatRent] [C2] where [C].[ParentGuid] = [C2].[ParentGuid])									
						) [R] on [R].[ParentGuid] = [F].[Guid]
	
			left join [LeaseApartment] [L] On [L].[ApartmentGuid] = [F].[Guid]
		where 
			([F].[BuildingGuid] = @BuildingGuid or @BuildingGuid = 0x0) 
			and ([F].[ApartmentType] = @ApartmentType or @ApartmentType = '')
			and ([FlatKind] = @FlatKind or @FlatKind = '')
			and ([Area] = @Area Or @Area = 0)
			and (Case when [L].[Guid] is Not null then 0 
					  when [L].[Guid] is null then 1 end = @RentState or @RentState = 2
				)
			and ([F].[Note] = @Note or @Note = '')
			and ([F].[Overlooking] = @Overlooking or @Overlooking	 = '')
			and (F.Guid = @FlatGuid or @FlatGuid = 0x0)
	
		Select @@RowCount as [RowCount]
	end


	-- ÇáÖÑÈ ÈÑÞã ËÇÈÊ
	if 	@Option  = 2
	begin
		insert into [ChangeFlatRent]
		([Number],[ParentGuid],[Date],[Price],[CurrencyGuid])
		Select Distinct
			isNull([M].[MaxNumber],1),
			[F].[Guid],
			@NewDate,
			dbo.FnMyRound([R].[Rent]*@Rent, @RoundKind),
			R.[RentCurrencyGuid]
		From
			[Apartment][F]
			left join (
							Select
								[ParentGuid],
								isnull(Max([Number]),0) + 1 as [MaxNumber]
							From
								[ChangeFlatRent] [C]
							Group By
								[ParentGuid]
						) [M] on [M].[ParentGuid] = [F].[Guid]
			left join (
							Select
								[ParentGuid],
								[Price] as [Rent],
								[CurrencyGuid] as [RentCurrencyGuid]
							From
								[ChangeFlatRent] [C]
							where
								[Number] = (Select Max([Number]) From [ChangeFlatRent] [C2] where [C].[ParentGuid] = [C2].[ParentGuid])									
						) [R] on [R].[ParentGuid] = [F].[Guid]
	
			left join [LeaseApartment] [L] On [L].[ApartmentGuid] = [F].[Guid]
		where 
			([F].[BuildingGuid] = @BuildingGuid or @BuildingGuid = 0x0) 
			and ([F].[ApartmentType] = @ApartmentType or @ApartmentType = '')
			and ([FlatKind] = @FlatKind or @FlatKind = '')
			and ([Area] = @Area Or @Area = 0)
			and (Case when [L].[Guid] is Not null then 0 
					  when [L].[Guid] is null then 1 end = @RentState or @RentState = 2
				)
			and ([F].[Note] = @Note or @Note = '')
			and ([F].[Overlooking] = @Overlooking or @Overlooking	 = '')
			and (F.Guid = @FlatGuid or @FlatGuid = 0x0)
	
		Select @@RowCount as [RowCount]
	end
	

	-- ÇáÖÑÈ ÈäÓÈÉ ãÆæíÉ
	if 	@Option  = 3
	begin
		insert into [ChangeFlatRent]
		([Number],[ParentGuid],[Date],[Price],[CurrencyGuid])
		Select Distinct
			isNull([M].[MaxNumber],1),
			[F].[Guid],
			@NewDate,
			dbo.FnMyRound([R].[Rent]+([R].[Rent]*@Rent /100), @RoundKind),
			R.[RentCurrencyGuid]
		From
			[Apartment][F]
			left join (
							Select
								[ParentGuid],
								isnull(Max([Number]),0) + 1 as [MaxNumber]
							From
								[ChangeFlatRent] [C]
							Group By
								[ParentGuid]
						) [M] on [M].[ParentGuid] = [F].[Guid]
			left join (
							Select
								[ParentGuid],
								[Price] as [Rent],
								[CurrencyGuid] as [RentCurrencyGuid]
							From
								[ChangeFlatRent] [C]
							where
								[Number] = (Select Max([Number]) From [ChangeFlatRent] [C2] where [C].[ParentGuid] = [C2].[ParentGuid])									
						) [R] on [R].[ParentGuid] = [F].[Guid]
	
			left join [LeaseApartment] [L] On [L].[ApartmentGuid] = [F].[Guid]
		where 
			([F].[BuildingGuid] = @BuildingGuid or @BuildingGuid = 0x0) 
			and ([F].[ApartmentType] = @ApartmentType or @ApartmentType = '')
			and ([FlatKind] = @FlatKind or @FlatKind = '')
			and ([Area] = @Area Or @Area = 0)
			and (Case when [L].[Guid] is Not null then 0 
					  when [L].[Guid] is null then 1 end = @RentState or @RentState = 2
				)
			and ([F].[Note] = @Note or @Note = '')
			and ([F].[Overlooking] = @Overlooking or @Overlooking	 = '')
			and (F.Guid = @FlatGuid or @FlatGuid = 0x0)

		Select @@RowCount as [RowCount]
	end

	-- ÊÛííÑ ßá ÓÚÑ Çáì
	if 	@Option  = 4
	begin
		insert into [ChangeFlatRent]
		([Number],[ParentGuid],[Date],[Price],[CurrencyGuid])
		Select Distinct
			isNull([M].[MaxNumber],1),
			[F].[Guid],
			@NewDate,
			dbo.FnMyRound(@NewRent, @RoundKind),
			R.[RentCurrencyGuid]
		From
			[Apartment][F]
			left join (
							Select
								[ParentGuid],
								isnull(Max([Number]),0) + 1 as [MaxNumber]
							From
								[ChangeFlatRent] [C]
							Group By
								[ParentGuid]
						) [M] on [M].[ParentGuid] = [F].[Guid]
			left join (
							Select
								[ParentGuid],
								[Price] as [Rent],
								[CurrencyGuid] as [RentCurrencyGuid]
							From
								[ChangeFlatRent] [C]
							where
								[Number] = (Select Max([Number]) From [ChangeFlatRent] [C2] where [C].[ParentGuid] = [C2].[ParentGuid])									
						) [R] on [R].[ParentGuid] = [F].[Guid]
	
			left join [LeaseApartment] [L] On [L].[ApartmentGuid] = [F].[Guid]
		where 
			([F].[BuildingGuid] = @BuildingGuid or @BuildingGuid = 0x0) 
			and ([F].[ApartmentType] = @ApartmentType or @ApartmentType = '')
			and ([FlatKind] = @FlatKind or @FlatKind = '')
			and ([Area] = @Area Or @Area = 0)
			and [R].[Rent] = @Rent
			and (Case when [L].[Guid] is Not null then 0 
					  when [L].[Guid] is null then 1 end = @RentState or @RentState = 2
				)
			and ([F].[Note] = @Note or @Note = '')
			and ([F].[Overlooking] = @Overlooking or @Overlooking	 = '')
			and (F.Guid = @FlatGuid or @FlatGuid = 0x0)
	
		Select @@RowCount as [RowCount]
	end

	exec PrcSetLastFlatRentPrice 0x0

GO
/****** Object:  StoredProcedure [dbo].[PrcCheckAccountWithOutIncAccount]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--ÝÍÕ ÇáÍÓÇÈÇÊ ÇáÊí ÈÏæä ÊÕäíÝ
CREATE Procedure [dbo].[PrcCheckAccountWithOutIncAccount]
(
	@Guid uniqueidentifier = '375AAD94-0B6B-456A-BFA1-6DAC550C96A2'
)
  
as
	Select 
		* 
	from 
		[vwMovingAccount] M
		left join IncAccountListDetail l on l.accountguid = m.guid
	

GO
/****** Object:  StoredProcedure [dbo].[PrcCheckBuildingYear]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcCheckBuildingYear]
(
	@State int = 0,
	@ContainPartialCollection bit = 1,
	@CheckDueDate Bit = 1,
	@Date1 DateTime = '1/1/2010',
	@Date2 DateTime = '1/1/2010'
)
  
as
	Select 
		Case when [C].[CheckGuid] is null then 0 else 1 end as [IsPosted],
		Case when [C1].[CheckGuid] is Not null then 1 else 0 end As [IsCollection],
		Case when [C4].[CheckGuid] is Not null then 1 else 0 end as [IsPartialCollection],
		Case when [C2].[CheckGuid] is null then 0 else 1 end as [IsEndorsement],
		Case when [C3].[CheckGuid] is null then 0 else 1 end as [IsReturned],
		[P].[Value],
		[C4].[Value] as [CollectionValue],
		[P].[Value] - [C4].[Value] as [RestValue],
		[P].[DueDate],
		[T].[BuildingName],
		[P].[Guid]
	Into #Res1
	From
		[vwChecks] [P]
		inner join (	
					Select Distinct
							[T1].[Guid],
							[T1].[BuildingName]
					From
						[vwAllContract] [T1]
						inner join [Resource] [RS2] on [RS2].[Guid] = [T1].[BuildingGuid] and [RS2].[Spid] = @@Spid and [RS2].[Kind] = 99
					)[T] on [T].[Guid] = [P].[ContractGuid]

		inner join [Resource] [RS] on [RS].[Guid] = [P].[TypeGuid] and [RS].[Spid] = @@Spid and [RS].[Kind] = 3000

		left join [vwChecksCollection] [C] on [C].[CheckGuid] = [P].[Guid] and [C].[Kind] = 0
		left join [vwChecksCollection] [C1] on [C1].[CheckGuid] = [P].[Guid] and [C1].[Kind] = 1
		left join [vwChecksCollection] [C2] on [C2].[CheckGuid] = [P].[Guid] and [C2].[Kind] = 2
		left join [vwChecksCollection] [C3] on [C3].[CheckGuid] = [P].[Guid] and [C3].[Kind] = 3
		left join (
						Select 
							[CheckGuid],
							Sum([Value]) as [Value] 
						From
							[ChecksPartialCollection] 
						Group By
							[CheckGuid]
					) [C4] on [C4].[CheckGuid] = [P].[Guid]

  	where
 		([P].[DueDate] Between @Date1 and @Date2 or @CheckDueDate = 0)


--  	Select Guid, * from #Res1 	Order By Guid
 -- 	return

	Select
		[BuildingName],
		Sum( Case when dbo.FnMonth([DueDate]) = 1 then [Value] end ) as [Month1],
		Sum( Case when dbo.FnMonth([DueDate]) = 2 then [Value] end ) as [Month2],
		Sum( Case when dbo.FnMonth([DueDate]) = 3 then [Value] end ) as [Month3],
		Sum( Case when dbo.FnMonth([DueDate]) = 4 then [Value] end ) as [Month4],
		Sum( Case when dbo.FnMonth([DueDate]) = 5 then [Value] end ) as [Month5],
		Sum( Case when dbo.FnMonth([DueDate]) = 6 then [Value] end ) as [Month6],
		Sum( Case when dbo.FnMonth([DueDate]) = 7 then [Value] end ) as [Month7],
		Sum( Case when dbo.FnMonth([DueDate]) = 8 then [Value] end ) as [Month8],
		Sum( Case when dbo.FnMonth([DueDate]) = 9 then [Value] end ) as [Month9],
		Sum( Case when dbo.FnMonth([DueDate]) = 10 then [Value] end ) as [Month10],
		Sum( Case when dbo.FnMonth([DueDate]) = 11 then [Value] end ) as [Month11],
		Sum( Case when dbo.FnMonth([DueDate]) = 12 then [Value] end ) as [Month12],
		Sum([Value]) [MonthTotal]
		,0 as [Kind]
	Into #Month
	From
		#Res1
	where
		-- ÇáãÑÊÌÚ
		(@State = 3 and [IsReturned] = 1)
		
		or 
		-- ÇáãÍÕá
		(@State = 2 and [IsCollection] = 1 and [IsReturned] = 0)

		or 
		-- ÇáãÑÍá
		(@State = 1 and [IsPosted] = 1 and [IsCollection] = 0 and [IsReturned] = 0)

		or 
		-- ÇáãÓÊÍÞ
		(@State = 0 and [IsPosted] = 0 and [IsCollection] = 0 and [IsReturned] = 0)

	Group By
		[BuildingName]
	Order By
		[BuildingName]

	if @ContainPartialCollection = 1
	insert Into #Month
	Select
		[BuildingName],
		Sum( Case when dbo.FnMonth([DueDate]) = 1 then 
															Case when @State = 2 then [CollectionValue]
																 when @State = 0 then [Value] - [CollectionValue]
															end
			 end ) as [Month1],
		Sum( Case when dbo.FnMonth([DueDate]) = 2 then
															Case when @State = 2 then [CollectionValue]
																 when @State = 0 then [Value] - [CollectionValue]
															end
			 end ) as [Month2],
		Sum( Case when dbo.FnMonth([DueDate]) = 3 then
															Case when @State = 2 then [CollectionValue]
																 when @State = 0 then [Value] - [CollectionValue]
															end
			 end ) as [Month3],
		Sum( Case when dbo.FnMonth([DueDate]) = 4 then
															Case when @State = 2 then [CollectionValue]
																 when @State = 0 then [Value] - [CollectionValue]
															end
			 end ) as [Month4],
		Sum( Case when dbo.FnMonth([DueDate]) = 5 then
															Case when @State = 2 then [CollectionValue]
																 when @State = 0 then [Value] - [CollectionValue]
															end
			 end ) as [Month5],
		Sum( Case when dbo.FnMonth([DueDate]) = 6 then
															Case when @State = 2 then [CollectionValue]
																 when @State = 0 then [Value] - [CollectionValue]
															end
			 end ) as [Month6],
		Sum( Case when dbo.FnMonth([DueDate]) = 7 then
															Case when @State = 2 then [CollectionValue]
																 when @State = 0 then [Value] - [CollectionValue]
															end
			 end ) as [Month7],
		Sum( Case when dbo.FnMonth([DueDate]) = 8 then
															Case when @State = 2 then [CollectionValue]
																 when @State = 0 then [Value] - [CollectionValue]
															end
			 end ) as [Month8],
		Sum( Case when dbo.FnMonth([DueDate]) = 9 then
															Case when @State = 2 then [CollectionValue]
																 when @State = 0 then [Value] - [CollectionValue]
															end
			 end ) as [Month9],
		Sum( Case when dbo.FnMonth([DueDate]) = 10 then
															Case when @State = 2 then [CollectionValue]
																 when @State = 0 then [Value] - [CollectionValue]
															end
			 end ) as [Month10],
		Sum( Case when dbo.FnMonth([DueDate]) = 11 then
															Case when @State = 2 then [CollectionValue]
																 when @State = 0 then [Value] - [CollectionValue]
															end
			 end ) as [Month11],
		Sum( Case when dbo.FnMonth([DueDate]) = 12 then
															Case when @State = 2 then [CollectionValue]
																 when @State = 0 then [Value] - [CollectionValue]
															end
			 end ) as [Month12],

		Sum( Case when @State = 2 then [CollectionValue]
				  when @State = 0 then [Value] - [CollectionValue]
			 end
			) as [MonthTotal]
		,0 as [Kind]
	From
		#Res1
	where
		-- ÇáãÑÊÌÚ
		(@State = 3 and [IsReturned] = 1)
		
		or 
		-- ÇáãÍÕá
		(@State = 2 and [IsCollection] = 1 and [IsReturned] = 0)

		or 
		-- ÇáãÑÍá
		(@State = 1 and [IsPosted] = 1 and [IsCollection] = 0 and [IsReturned] = 0)

		or 
		-- ÇáãÓÊÍÞ
		(@State = 0 and [IsPosted] = 0 and [IsCollection] = 0 and [IsReturned] = 0)

	Group By
		[BuildingName]
	Order By
		[BuildingName]

	-- ÇáãÌãæÚ
	insert into #Month
	Select 	
		dbo.SC('ÇáãÌãæÚ'),
		Sum([Month1]) as [Month1],
		Sum([Month2]) as [Month2],
		Sum([Month3]) as [Month3],
		Sum([Month4]) as [Month4],
		Sum([Month5]) as [Month5],
		Sum([Month6]) as [Month6],
		Sum([Month7]) as [Month7],
		Sum([Month8]) as [Month8],
		Sum([Month9]) as [Month9],
		Sum([Month10]) as [Month10],
		Sum([Month11]) as [Month11],
		Sum([Month12]) as [Month12],
		Sum([MonthTotal]) as [MonthTotal]
		,1 as [Kind]
	from 
		#Month


	Select 	
		[BuildingName],
		Sum([Month1]) as [Month1],
		Sum([Month2]) as [Month2],
		Sum([Month3]) as [Month3],
		Sum([Month4]) as [Month4],
		Sum([Month5]) as [Month5],
		Sum([Month6]) as [Month6],
		Sum([Month7]) as [Month7],
		Sum([Month8]) as [Month8],
		Sum([Month9]) as [Month9],
		Sum([Month10]) as [Month10],
		Sum([Month11]) as [Month11],
		Sum([Month12]) as [Month12],
		Sum([MonthTotal]) as [MonthTotal],
		[Kind]
	Into #End
	from 
		#Month
	Group By
		[Kind], [BuildingName]

	Select 
		* 
	from 
		#End
	Order By
		[Kind], [BuildingName]

GO
/****** Object:  StoredProcedure [dbo].[PrcCheckCollectionForComprehensiveReport]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create Procedure [dbo].[PrcCheckCollectionForComprehensiveReport]
(
	@ActiveBuildingList bit = 1,
	@ActiveContractList bit = 1,
	@Date1 DateTime = '1/1/2007',
	@Date2 DateTime = '1/1/2018'
)
as
	Create Table #ChecksCollection_ForComprehensiveReport
	(
		[CheckGuid] uniqueidentifier,
		[value] float
	)
	
	insert into #ChecksCollection_ForComprehensiveReport
	Select 
		CheckGuid,
		value
	From
		vwChecksCollection C
	where
		(C.Kind = 1)
		and (C.Date between @Date1 and @Date2)
	
	insert into #ChecksCollection_ForComprehensiveReport
	Select 
		CheckGuid,
		Sum(Value) as [Value]
	from 
		ChecksPartialCollection C
	where
		(C.Date between @Date1 and @Date2)
	Group by
		CheckGuid
		
	Select
		CheckGuid,
		Sum(Value) as [Value]
	into #ChecksCollection_ForComprehensiveReport2
	From
		#ChecksCollection_ForComprehensiveReport
	Group by
		CheckGuid
		
	--Select * from #ChecksCollection_ForComprehensiveReport2
	
	Select 
		[P].[Number],
		[P].[TypeName],

		[P].[AccountCode],
		[P].[AccountName],

		[P].[ObverseAccountCode],
		[P].[ObverseAccountName]

		,[P].[No]
		,[P].[Value]
		,C3.value as CollectValue
		,[P].[Value] - isNull(C3.value,0) as RestValue
		,[P].[Date]
		,[P].[DueDate]
		,[P].[EndDueDate]
		,[P].[BankName]
		,[P].[Note]
		,[P].[Note3]
		,p.[beneficiary]
		,[P].[Guid]
		,[P].[CurrencyGuid] as [CheckCurrencyGuid]

		,[P].[Mark]
		,[p].[Deposition]
		,CAST(0x0 as uniqueidentifier) as BuildingGuid
		,CAST('' as varchar(255)) as BuildingName
		,CAST('' as varchar(255)) as UnitNo
		,ContractGuid
		,CAST(0x0 as uniqueidentifier) as ContractTypeGuid
	into #R_CheckCollection
	From
		[vwChecks] [P]
		inner join [Resource] [RS] on [RS].[Guid] = [P].[TypeGuid] and [RS].[Spid] = @@Spid and [RS].[Kind] = 3000
		inner join #ChecksCollection_ForComprehensiveReport2 [C3] on [C3].[CheckGuid] = [P].[Guid] 

	
	--ãÚÇáÌÉ ÇáÃÈäíÉ
	if @ActiveBuildingList = 1
	begin
		Update #R_CheckCollection 
		Set 
			BuildingGuid = C.BuildingGuid,
			BuildingName = C.BuildingName,
			UnitNo = C.FlatNo
		From
			#R_CheckCollection R
			inner join [LinkCheckContract] L on L.parentGuid = R.Guid
			inner join [vwLeaseApartment] C on C.Guid = L.ContractGuid
		
		Delete #R_CheckCollection where isNull(BuildingGuid,0x0) = 0x0
			
		Delete #R_CheckCollection
		From
			#R_CheckCollection [L]
			left join [Resource] [R] on [R].[Guid] = [L].[BuildingGuid] and [R].[Kind] = 4001 and [R].[Spid] = @@Spid 
		where
			[R].[Guid] Is Null
	end

	
	--ãÚÇáÌÉ ÇáÚÞæÏ
	if @ActiveContractList = 1
	begin
		
		Delete #R_CheckCollection where isNull(ContractGuid,0x0) = 0x0
			

		Update #R_CheckCollection 
		Set 
			ContractTypeGuid = C.TypeGuid
		From
			#R_CheckCollection R
			inner join [LinkCheckContract] L on L.parentGuid = R.Guid
			inner join [vwLeaseApartment] C on C.Guid = L.ContractGuid
			
		Delete #R_CheckCollection
		From
			#R_CheckCollection [L]
			left join [Resource] [R] on [R].[Guid] = [L].ContractTypeGuid and [R].[Kind] = 4002 and [R].[Spid] = @@Spid 
		where
			[R].[Guid] Is Null
			
			
	end
	
	
	Select 
		*,
		(Select SUM(CollectValue) From #R_CheckCollection) as SumCollectValue
	From
		#R_CheckCollection
 	order By
 		[Date]
 		
 		

GO
/****** Object:  StoredProcedure [dbo].[PrcCheckConstraint]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create Procedure [dbo].[PrcCheckConstraint]
(
	@DataBase varchar(255) = 'Aqs',
	@Table varchar(255) = 'Assets',
	@Kind varchar(255) = '1' --0 Disable 1 Enable
)
as

	Declare @V varchar(max)
	
	Set @V = '
	Declare @Check Varchar(256)	
	If '+@Kind+' = 0
	Set @Check = ''NoCheck''
	else
	Set @Check = ''Check''
	
	Declare 
		@Fk_Name Varchar(256),
		@fkeyid Varchar(256),
		@rkeyid Varchar(256),
		@fkey Varchar(256),
		@rkey Varchar(256),
		@S Varchar(8000),
		@Status int
		Set @S = ''''


	DECLARE cursor_Name CURSOR FAST_FORWARD FOR 
	Select 
			[S].[Name],
			(Select [Name] From '+@DataBase+'.dbo.SysObjects [T] where [T].[id] = [K].[fkeyid] ) as fkeyid,
			(Select [Name] From '+@DataBase+'.dbo.SysObjects [T] where [T].[id] = [K].[rkeyid] ) as rkeyid,
			(Select [Name] From '+@DataBase+'.dbo.sysColumns [T] where [T].[id] = [S].[Parent_Obj] and [K].[fkey] = [T].[Colid] ) as fkey,
			(Select [Name] From '+@DataBase+'.dbo.sysColumns [T] where [T].[id] = [S].[Parent_Obj] and [K].[rkey] = [T].[Colid] ) as rkey,
			[S].[Status]
	from 
		'+@DataBase+'.dbo.SysObjects [S]
		inner join '+@DataBase+'.dbo.sysforeignkeys [K] on [S].[Id] = [K].[constid]
	where 
		[S].Type = ''F''
		and [K].[fkeyid] = (Select id From '+@DataBase+'.dbo.SysObjects [T] where T.Name =  '''+@Table+''')
			
	OPEN cursor_Name
	FETCH NEXT FROM cursor_Name INTO @Fk_Name ,	@fkeyid , @rkeyid,	@fkey,	@rkey ,@Status
		
			
	WHILE @@FETCH_STATUS = 0
	BEGIN
		Set @S = ''Alter Table '+@DataBase+'.dbo.''+@fkeyid+'' ''+@Check+'' CONSTRAINT [''+@Fk_Name+'']''
		Print @S 
		Exec(@S)
		FETCH NEXT FROM cursor_Name INTO @Fk_Name ,	@fkeyid , @rkeyid,	@fkey,	@rkey , @Status
			
	END
	CLOSE cursor_Name
	DEALLOCATE cursor_Name
	'
	
	print (@V)
	exec (@V)


GO
/****** Object:  StoredProcedure [dbo].[PrcCheckFinishedReturn]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcCheckFinishedReturn]
(
	@ForTest Bit = 1
)
  
as
	exec [PrcInsertSC] 'ÛíÑ ãÑÊÌÚ ÃÕáÇ'


	Create Table #R
	(
		[CheckNo] Varchar(256),
		[State] Varchar(256),
		[Guid] uniqueidentifier
	)


	Declare @CheckGuid uniqueidentifier,
			@No Varchar(256)
	

	DECLARE cursor_Name CURSOR FAST_FORWARD FOR 
	Select [Guid] From [Resource]
	where [Kind] = 8
--		and [Spid] = @@Spid
	
	OPEN cursor_Name
	FETCH NEXT FROM cursor_Name INTO @CheckGuid

	Declare @Returned int 

	WHILE @@FETCH_STATUS = 0
	BEGIN
		Set @Returned = 0
		-- áãÚÑÝÉ ÇáÍÇáÇÊ ÇáÓÇÈÞÉ

		Select
			@No = [C].[No],
			@Returned = IsReturned
		from
			[vwChecksCollectionState] [L]
			inner join [Checks] [C] On [C].[Guid] = [L].[CheckGuid]
		where
			[CheckGuid] = @CheckGuid


		Select @Returned 	= isnull(@Returned,0)

		--ãÑÊÌÚ ãÓÈÞÇð
		if (@Returned <= 0)
		begin
			insert into #R
			Select @No, dbo.SC('ÛíÑ ãÑÊÌÚ ÃÕáÇ') , @CheckGuid
			
			FETCH NEXT FROM cursor_Name INTO @CheckGuid
			CONTINUE 				
		end


		--ÊäÝíÐ ÇáÚãáíÉ
		if @ForTest = 0
		begin
			update [ChecksCollection] Set [Finished] = 1
			where
				[CheckGuid] = @CheckGuid
				and [Kind] = 3
		
				insert into #R
				Select @No, dbo.SC('ÊãÊ ÇáÚãáíÉ ÈäÌÇÍ') , @CheckGuid
		end
		if @ForTest = 1
			insert into #R
			Select @No, dbo.SC('ÊÊã ÇáÚãáíÉ ÈäÌÇÍ') , @CheckGuid
	
	 	FETCH NEXT FROM cursor_Name INTO @CheckGuid
	
	END
	
	CLOSE cursor_Name
	DEALLOCATE cursor_Name

	Select * from #R	
	Order By [CheckNo]
		


GO
/****** Object:  StoredProcedure [dbo].[PrcCheckFinishedReturnCancel]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcCheckFinishedReturnCancel]
(
	@ForTest Bit = 1
)
  
as
	exec [PrcInsertSC] 'ÛíÑ ãÑÊÌÚ ÃÕáÇ'


	Create Table #R
	(
		[CheckNo] Varchar(256),
		[State] Varchar(256),
		[Guid] uniqueidentifier
	)


	Declare @CheckGuid uniqueidentifier,
			@No Varchar(256)
	

	DECLARE cursor_Name CURSOR FAST_FORWARD FOR 
	Select [Guid] From [Resource]
	where [Kind] = 8
		and [Spid] = @@Spid
	
	OPEN cursor_Name
	FETCH NEXT FROM cursor_Name INTO @CheckGuid

	Declare @Returned int 

	WHILE @@FETCH_STATUS = 0
	BEGIN
		Set @Returned = 0
		-- áãÚÑÝÉ ÇáÍÇáÇÊ ÇáÓÇÈÞÉ

		Select
			@No = [C].[No],
			@Returned = Case when [L].[Kind] = 3 then 1 else 0 end 
		from
			ChecksCollection [L]
			inner join [Checks] [C] On [C].[Guid] = [L].[CheckGuid]
		where
			[CheckGuid] = @CheckGuid


		Select @Returned 	= isnull(@Returned,0)

		--ãÑÊÌÚ ãÓÈÞÇð
		if (@Returned <= 0)
		begin
			insert into #R
			Select @No, dbo.SC('ÛíÑ ãÑÊÌÚ ÃÕáÇ') , @CheckGuid
			
			FETCH NEXT FROM cursor_Name INTO @CheckGuid
			CONTINUE 				
		end


		--ÊäÝíÐ ÇáÚãáíÉ
		if @ForTest = 0
		begin
			update [ChecksCollection] Set [Finished] = 0
			where
				[CheckGuid] = @CheckGuid
				and [Kind] = 3
		
				insert into #R
				Select @No, dbo.SC('ÊãÊ ÇáÚãáíÉ ÈäÌÇÍ') , @CheckGuid
		end
		if @ForTest = 1
			insert into #R
			Select @No, dbo.SC('ÊÊã ÇáÚãáíÉ ÈäÌÇÍ') , @CheckGuid
	
	 	FETCH NEXT FROM cursor_Name INTO @CheckGuid
	
	END
	
	CLOSE cursor_Name
	DEALLOCATE cursor_Name

	Select * from #R	
	Order By [CheckNo]
		


GO
/****** Object:  StoredProcedure [dbo].[PrcCheckIndex]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create Procedure [dbo].[PrcCheckIndex]
(
	@DbName_CX Varchar(256) = '',
	@TableName_CX Varchar(256) = '',
	@State int = 0 --0 Disable 1 enable
)
as
	if isNull(@DbName_CX, '')  = ''
	Set @DbName_CX = DB_NAME() 
	
	Declare @Sql_CX varchar(800)	
	Declare @C int
	Create Table #Indx_Tbl 
	(
		[id] int identity(1,1),
		[IndexName] Varchar(256),
		[TableName] Varchar(256),
	)	
	
	Set @Sql_CX = '
	insert into #Indx_Tbl
	([IndexName], [TableName])
	SELECT I.Name, T.Name 
	from '+@DbName_CX+'.sys.indexes I
	inner join '+@DbName_CX+'.sys.tables T on I.object_id = T.object_id
	where 
		I.type_desc = ''NONCLUSTERED''
		and I.name is not null
		and T.name = '''+@TableName_CX+''''
		
	--print @Sql_CX
	exec (@Sql_CX)
	
	Set @C = @@Rowcount	
	
	while @C > 0
	begin
		begin Try
			Select @Sql_CX = 'ALTER INDEX ' + [IndexName] + ' ON ' +@DbName_CX+'..'+ [TableName] + Case when @State = 0 then ' DISABLE' else ' REBUILD' end  from #Indx_Tbl where Id = @C
			--print @Sql_CX
			exec (@Sql_CX)
			
			Select @Sql_CX = 'ALTER Table ' +@DbName_CX+'..'+ [TableName] + Case when @State = 0 then ' DISABLE ' else ' Enable ' end + ' Trigger all'  from #Indx_Tbl where Id = @C
			--print @Sql_CX
			exec (@Sql_CX)

			--print 'End Exec ------------'
		end try
		begin catch
			Print 'Error '+
			+'ERROR_NUMBER '+isNull(Cast( ERROR_NUMBER() as Varchar(255)),'')+' '+
			+'ERROR_SEVERITY '+isNull(Cast( ERROR_SEVERITY() as Varchar(255)),'')+' '+
			+'ERROR_STATE '+isNull(Cast( ERROR_STATE() as Varchar(255)),'')+' '+
			+'ERROR_PROCEDURE '+isNull(Cast( ERROR_PROCEDURE() as Varchar(255)),'')+' '+
			+'ERROR_LINE '+isNull(Cast( ERROR_LINE() as Varchar(255)),'')+' '+
			+'ERROR_MESSAGE '+isNull(Cast( ERROR_MESSAGE() as Varchar(255)),'')
		END CATCH
		
		Set @C = @C -1
	end
	


GO
/****** Object:  StoredProcedure [dbo].[PrcCheckLatePayment]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcCheckLatePayment]
(
	@AcGuid uniqueidentifier = 0x0,
	@ContractGuid uniqueidentifier = 0x0,
	@LateDay int = 10,
	@ActiveBuildingList bit = 0,
	@WithoutReturnCheck Bit = 1,
	@CheckNonDueDate Bit = 1,
	@Date1 DateTime = '5/31/2009',
	@Date2 DateTime = '5/31/2013'
)
  
as
	Set @Date1 = GetDate()
	
	Declare @DeservedDate DateTime 
	Set @DeservedDate = @Date1  -@LateDay
	
	--ÇáÏÝÚÇÊ áäÞÏíÉ
	Create Table [#CheckLatePayment_tmp_CashValue]
	(
		[Guid] uniqueidentifier,
		[ContractGuid] uniqueidentifier,
		[value] Float
	)
	
	insert into [#CheckLatePayment_tmp_CashValue]
	Select
		[Guid],
		[ContractGuid],
		[value]
	From
		[vwContractCachPayment]
	where
		ContractGuid = 	@ContractGuid
	
	
	--ÇáÏÝÚÇÊ áäÞÏíÉ áÚÞæÏ ÇáÝáá æÇáÇÑÇÖí
	insert into [#CheckLatePayment_tmp_CashValue]
	Select
		[Guid],
		[ContractGuid],
		[value]
	From
		[vwLandContractCachPayment]
	where
		ContractGuid = 	@ContractGuid


	--ÅÓÊËäÇÁ ÇáÊÍÕíá ÇáÌÒÆí
	Delete #CheckLatePayment_tmp_CashValue
	From
		#CheckLatePayment_tmp_CashValue C
		inner join HEntry H on H.Guid = C.Guid
	where
		H.ParentKind in (1600, 1660, 1661, 1662, 1663, 1664, 1670)
		
	Select
		ContractGuid,
		SUM(Value) as CashValue
	into #CheckLatePayment_CashValue
	From	
		#CheckLatePayment_tmp_CashValue
	Group By
		[ContractGuid]
		
	--Select * from #CheckLatePayment_CashValue
	
	--ãÌãæÚ ÇáÔíßÇÊ ÇáãÍÕáÉ
	Select 
		Sum([K].[Value]) as [ColleactionValue],
		[K].[ContractGuid]
	into #CheckLatePayment_ColleactionValue
	From
		[Checks] [K] 
		inner Join [ChecksCollection] [L] on [L].[CheckGuid] = [K].[Guid] and  Kind = 1
	where
		ContractGuid = 	@ContractGuid
	Group By
		[K].[ContractGuid]	

	-- ÞíãÉ ÇáÏÝÚÇÊ ÇáãÊÇÎÑÉ
	Select 
		Min(K.dueDate) as [MinDate],
		Max(K.dueDate) as [MaxDate],
		Sum([K].[Value]) as [SumBehind],
		COUNT(K.Number) as [Count],
		[K].[ContractGuid]
	into #CheckLatePayment_R1
	From 
		[Checks] [K] 
		left Join [ChecksCollection] [L] on [L].[CheckGuid] = [K].[Guid] and  Kind = 1
	where
		[K].[DueDate] <= @DeservedDate  --GetDate() -  @LateDay
		and ([L].[CheckGuid] is null)
		and ([K].[ContractGuid] = @ContractGuid or @ContractGuid = 0x0)		
	Group By
		[K].[ContractGuid]	
		

		
	Select 
		Sum([L].[Value]) as [SumCollector],
		[K].[ContractGuid]
	into #CheckLatePayment_R2
	From 
		[ChecksPartialCollection]  [L]
		inner join [Checks] [K] on [L].[CheckGuid] = [K].[Guid]
	where
		([K].[ContractGuid] = @ContractGuid or @ContractGuid = 0x0)		
	Group By
		[K].[ContractGuid]	
		
	-- ÞíãÉ ÇáÏÝÚÇÊ ÇáãÓÊÍÞÉ ÌÒÆíÇ	
	Select 
		K.Guid as [CheckGuid],
		SUM(L.Value) as [CollValue]
	into #CheckLatePayment_RCollPValue
	From 
		[ChecksPartialCollection]  [L]
		inner join [Checks] [K] on [L].[CheckGuid] = [K].[Guid]
	where
		([K].[DueDate] <= @Date1)
		and ([K].[ContractGuid] = @ContractGuid or @ContractGuid = 0x0)				
	Group By
		K.Guid
	
	Select 
		Sum([K].[Value]) - isNull(Sum([L].[CollValue]),0) as SumDeservedPartial,
		[K].[ContractGuid]
	into #CheckLatePayment_R3
	From 
		#CheckLatePayment_RCollPValue  [L]
		inner join [Checks] [K] on [L].[CheckGuid] = [K].[Guid]
	where
		([K].[DueDate] <= @Date1)
		and ([K].[ContractGuid] = @ContractGuid or @ContractGuid = 0x0)				
	Group By
		[K].[ContractGuid]	
			
	--ãÌãæÚ ÇáÏÝÚÇÊ ÇáãÓÊÍÞÉ
	Select 
		Sum([K].[Value]) as [SumDeserved],
		[K].[ContractGuid]
	into #CheckLatePayment_Deserved
	From 
		[Checks] [K] 
		left Join [ChecksCollection] [L] on [L].[CheckGuid] = [K].[Guid] and  L.Kind = 1
		left Join [ChecksCollection] [R] on [R].[CheckGuid] = [K].[Guid] and  R.Kind = 3
		left Join [ChecksPartialCollection] [PL] on [PL].[CheckGuid] = [K].[Guid] --and  Kind = 1
	where
		([K].[DueDate] <= @Date1)
		--and ([K].[DueDate] > @DeservedDate)
		and ([L].[CheckGuid] is null)
		and ([PL].[CheckGuid] is null)
		and ([K].[ContractGuid] = @ContractGuid or @ContractGuid = 0x0)	
		and ([R].[CheckGuid] is Null or @WithoutReturnCheck = 0)
		and ([K].NoneDueDate = 0 or @CheckNonDueDate = 0)
	Group By
		[K].[ContractGuid]	--,[R].[CheckGuid]
		
		
	--Select * from #CheckLatePayment_Deserved
	--where 
	--	ContractGuid = (Select Guid From LeaseApartment where Number = 543)
		
		
	--Select * from #CheckLatePayment_Deserved
					
	Create Table #Res
	(
		[ContractName] Varchar(256),
		[CustName] Varchar(256),
		[ContractNo] Varchar(256),
		[ContractGuid] uniqueidentifier,
		[Value] Float,
		[LastDate] DateTime,
		[LastValue]Float,
		[CashValue] Float,
		[SumCollector]Float,
		[SumCollectorPartial] Float,
		[SumDeservedPartial] Float,
		[SumDeserved]Float,
		[LastDeservedDate]DateTime,
		[SumBehind] Float,
		[MinDate] datetime,
		[MaxDate] datetime,
		[CountBehind] int,
		[TotalCheckCollector] Float,
		[FloorNo] Varchar(256),
		[FlatNo] Varchar(256),
		[BuildingName] Varchar(256),
		[BuildingGuid] uniqueidentifier
	)
	
	insert into #Res
	Select 
		[C].[TypeName],
		[C].[CustName],
		[C].[ContractNo],
		[C].[Guid],
		isNull([C].[Value],0),
		[L].[LastDate],
		isNull([L2].[LastValue],0),
		isNull([CashValue],0) as [CashValue],
		isNull([CashValue],0) + isNull([PL3].[SumCollector],0) as  [SumCollector],
		isNull([PL3].[SumCollector],0) as SumCollectorPartial,
		isNull([PL33].SumDeservedPartial,0) as SumDeservedPartial,
		isNull([L4].[SumDeserved],0) ,
		[L5].[LastDeservedDate],
		isNull([L6].[SumBehind],0) - isNull([PL3].[SumCollector],0),
		[l6].[MinDate],
		[l6].[MaxDate],
		[L6].[count] as [CountBehind],
		isNull([cc].[ColleactionValue],0) as [TotalCheckCollector],
		[C].[FloorNo],
		[C].[FlatNo],
		[C].[BuildingName],
		[C].[BuildingGuid] 
	From 
		[vwAllContract] [C] 
		left join #CheckLatePayment_CashValue CV on Cv.ContractGuid = C.Guid
		left join #CheckLatePayment_ColleactionValue CC on CC.ContractGuid = C.Guid
		--ÊÇÑíÎ ÂÎÑ ÏÝÚÉ
		left join (
					Select 
						Max([L].[Date]) [LastDate],
						[K].[ContractGuid]
					From 
						[ChecksCollection]  [L]
						inner join [Checks] [K] on [L].[CheckGuid] = [K].[Guid]
					where Kind = 1
					Group By
						[K].[ContractGuid]	
					) [L] On [L].[ContractGuid] = [C].[Guid]
		--ÞíãÉ ÂÎÑ ÏÝÚÉ
		left join (
					Select 
						[L].[Value] as [LastValue],
						[K].[ContractGuid]
					From 
						[ChecksCollection]  [L]
						inner join [Checks] [K] on [L].[CheckGuid] = [K].[Guid]
					where Kind = 1
					and
						[L].[Date] = (
										Select 
											Max([LL].[Date]) [LastDate]
										From 
											[ChecksCollection]  [LL]
											inner join [Checks] [KK] on [LL].[CheckGuid] = [KK].[Guid]
										where Kind = 1
										and [KK].[ContractGuid] = [K].[ContractGuid]
										)
					) [L2] On [L2].[ContractGuid] = [C].[Guid]
		
		--ÞíãÉ ÇáÏÝÚÇÊ ÇáãÍÕáÉ ÌÒÆíÇ
		left join #CheckLatePayment_R2 [PL3] On [PL3].[ContractGuid] = [C].[Guid]
		--ÞíãÉ ÇáÏÝÚÇÊ ÇáãÓÊÍÞÉ ÌÒÆíÇ
		left join #CheckLatePayment_R3 [PL33] On [PL33].[ContractGuid] = [C].[Guid]
		-- ÞíãÉ ÇáÏÝÚÇÊ ÇáãÓÊÍÞÉ
		left join #CheckLatePayment_Deserved [L4] On [L4].[ContractGuid] = [C].[Guid]
		-- ÊÇÑíÎ ÂÎÑ ÏÝÚÉ ãÓÊÍÞÉ
		left join (
					Select
						Max([K].[DueDate]) as [LastDeservedDate],
						[K].[ContractGuid]
					From 
						[Checks] [K] 
						left Join [ChecksCollection] [L] on [L].[CheckGuid] = [K].[Guid] and  Kind = 1
					where
						([K].[DueDate] < = @Date2 or @Date2 = 0 or @Date2 = 2)
						and ([L].[CheckGuid] is null)
					Group By
						[K].[ContractGuid]	
					) [L5] On [L5].[ContractGuid] = [C].[Guid]
		-- ÞíãÉ ÇáÏÝÚÇÊ ÇáãÊÇÎÑÉ
		left join #CheckLatePayment_R1 [L6] On [L6].[ContractGuid] = [C].[Guid]
		inner join [Resource] [RS] on [RS].[Guid] = [C].[TypeGuid] and [RS].[Spid] = @@Spid and [RS].[Kind] = 3001
		--inner join [Resource] [RS2] on [RS2].[Guid] = [C].[BuildingGuid] and [RS2].[Spid] = @@Spid and [RS2].[Kind] = 4001
	where
		([C].[CustAcGuid] = @AcGuid or @AcGuid = 0x0)
		and ([C].[Guid] = @ContractGuid or @ContractGuid = 0x0)
		

	Delete #Res where isNull([SumBehind] ,0) = 0
	
	--ãÚÇáÌÉ ÇáÃÈäíÉ
	if @ActiveBuildingList = 1
	begin
		Delete #Res
		From
			#Res [L]
			left join [Resource] [R] on [R].[Guid] = [L].[BuildingGuid] and [R].[Kind] = 4001 and [R].[Spid] = @@Spid 
		where
			[R].[Guid] Is Null
			and L.BuildingGuid <> 0x0
			and ([ContractGuid] is not Null )
	end
		

	Select 
		*, 
		isNull([SumDeserved],0) + isnull([SumDeservedPartial],0) as [SumDeservedPay]
	From 
		#Res
		
	Select
		Sum([Value]) as [Value],
		Sum([CashValue]) as [CashValue],
		Sum([SumCollector]) as SumCollector,
		Sum(SumDeserved) as SumDeserved,
		Sum([SumBehind]) as [SumBehind],
		Sum(isNull([SumDeserved],0) + isnull([SumDeservedPartial],0)) as [SumDeservedPay],
		SUM([TotalCheckCollector]) as [TotalCheckCollector],
		Sum(SumDeservedPartial) as SumDeservedPartial,
		Sum(SumCollectorPartial) as SumCollectorPartial
	From
		#Res

GO
/****** Object:  StoredProcedure [dbo].[PrcCheckOfContract]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcCheckOfContract]
(
	@CustGuid uniqueidentifier = '88D74D66-39A5-4D76-9917-DE9625471194'
	,@Nationality Varchar(256) = ''
	,@Purpose Varchar(256) = ''
	,@Emirate Varchar(256) = ''
	,@Suburb Varchar(256) = ''
	,@Area Varchar(256) = ''
	,@Street Varchar(256) = ''
	,@FlatKind Varchar(256) = ''
	,@ApartmentType Varchar(256) = ''
	,@ContractState int = 1
	,@Judicial int = 2
	,@PayType int = 4
	,@Datewith int = 0
	,@Date1 DateTime = '12/30/1899'
	,@Date2 DateTime = '12/30/2016'
	,@RentInfoGuid uniqueidentifier = 0x0
	,@SalesManGuid uniqueidentifier = 0x0
	,@CKDate Bit = 0
	,@EndState int = 2
	,@NewState int = 2
	,@Mark Bit = 1
	,@NotMark Bit = 1
	,@AutoRenewal int = 1
	,@LinkCheck int = 2
	,@FldCurrentContract bit = 1
	,@BanRealty int = 0
	,@whereabouts varchar(255) = ''
)
  
as
	
	Declare @Tbl Table
	(
		[ContractNo] Varchar(256)
		,[FlatNo] Varchar(256)
		,[BuildingName] Varchar(256)
		,[Value] Float
		,[ValueAfterDiscount] Float
		,[FlatKind] Varchar(256)
		,[FlatType] Varchar(256)
		,[ContractState] Varchar(256)
		,[Emirate] Varchar(256)
		,[FloorNo] Varchar(256)
		,[CustName] Varchar(256)
		,[CustPhone] Varchar(256)
		,[CustNationality] Varchar(256)
		,[ContractDateEdit] Datetime
		,[ContractDateBegin] Datetime
		,[ContractDateEnd] Datetime
		,[ContractType] Varchar(256)
		,[ContractFinish] Bit
		,[ContractGuid] uniqueidentifier
		,[NewState] int

		,[RentMan] Varchar(256)
		,[SalesMan] Varchar(256)
		,[ContractFinishDate] Datetime
		,[Note2] Varchar(1000)
		,[Purpose] Varchar(256)
		
		,[CountOldContract] int
		,[CountCurrentContract] int
		
		,[CostGuid] uniqueidentifier
		,[AccountGuid] uniqueidentifier
		,[Judicial] Bit
		,[Mark] Bit
		,[isAutoRenewal] Bit
		,[Kind] Int
		,[Sort] int
	)

	Declare  @Now_Date Datetime
	Set @Now_Date = GetDate()
	
	-- ÇáÚÞæÏ ÇáÓÇÈÞÉ
	Create Table #CurrentContract
	(
		CustomerGuid uniqueidentifier,
		ApartmentGuid uniqueidentifier,
		[ContractCount] int
	)
	
	if @FldCurrentContract = 1
	begin
		insert into #CurrentContract
		Select 
			CustomerGuid,
			ApartmentGuid,
			IsNull(COUNT(*),0) as [ContractCount]
		From 
			[LeaseApartment]
		Group By
			CustomerGuid,
			ApartmentGuid
	end
	

	--Building
	Select
		*
	Into #Building_CL
	From
		[vwBuilding] B
	where
		([B].[Emirate] = @Emirate or @Emirate = '')
		and ([B].[Suburb] = @Suburb or @Suburb = '')
		and ([B].[Area] = @Area or @Area = '')
		and ([B].[Street] = @Street or @Street = '')
		
		
    select Distinct
		ContractKind
	into #Resource_Type
	From
		ContractType T
		inner join [Resource] [R2] on [R2].[Guid] = [T].[Guid]  and [R2].[Kind] = 100 and [R2].[spid] = @@Spid 
		
	--Select * from #Resource_Type
	--return
		

	--Select * from #Building_CL
		
	--[vwLeaseApartment]
	Declare @p_RentFlat bit,
			@p_RentShop bit,
			@p_SaleFlat bit,
			@p_SaleShop bit,
			@p_RentParking bit,
			@p_SaleParking bit,
			@p_SaleLand bit,
			@p_RentLand bit,
			@p_SaleVilla bit,
			@p_RentVilla bit
			
	if exists(Select * From #Resource_Type where ContractKind = 0)
	Set @p_RentFlat = 1 else Set @p_RentFlat = 0
	
	if exists(Select * From #Resource_Type where ContractKind = 1)
	Set @p_RentShop = 1 else Set @p_RentShop = 0 

	if exists(Select * From #Resource_Type where ContractKind = 2)
	Set @p_SaleFlat = 1 else Set @p_SaleFlat = 0 

	if exists(Select * From #Resource_Type where ContractKind = 3)
	Set @p_SaleShop = 1 else Set @p_SaleShop = 0 

	if exists(Select * From #Resource_Type where ContractKind = 4)
	Set @p_RentParking = 1 else Set @p_RentParking = 0 

	if exists(Select * From #Resource_Type where ContractKind = 5)
	Set @p_SaleParking = 1 else Set @p_SaleParking = 0 

	if exists(Select * From #Resource_Type where ContractKind = 6)
	Set @p_SaleLand = 1 else Set @p_SaleLand = 0 

	if exists(Select * From #Resource_Type where ContractKind = 7)
	Set @p_RentLand = 1 else Set @p_RentLand = 0 

	if exists(Select * From #Resource_Type where ContractKind = 8)
	Set @p_SaleVilla = 1 else Set @p_SaleVilla = 0 

	if exists(Select * From #Resource_Type where ContractKind = 9)
	Set @p_RentVilla = 1 else Set @p_RentVilla = 0 
	
	Select
		L.*
		,T.Name as ContractName
		,[L].[Judicial] as [ContractJudicial]
		,S.Name as [SalesMan]
	into #LeaseApartment_CL
	From
		[LeaseApartment] L
		inner join ContractType T on T.Guid = L.TypeGuid
		inner join [Resource] [R2] on [R2].[Guid] = [L].[TypeGuid]  and [R2].[Kind] = 100 and [R2].[spid] = @@Spid 
		left join Salesman S on S.Guid = L.SalesManGuid
	where
		([L].[CustomerGuid] = @CustGuid or @CustGuid = 0x0)
		and ([L].[RentInfoGuid] = @RentInfoGuid or @RentInfoGuid = 0x0)
		and ([L].[SalesManGuid] = @SalesManGuid or @SalesManGuid = 0x0)
		and ([L].[ContractFinish] = @EndState or @EndState = 2)
		and (
				([l].[Mark] = 1 and @Mark = 1)
				or ([l].[Mark] = 0 and @NotMark = 1)
			)
		and (L.PayType = @PayType or @PayType  = 4)
		and (isNull([L].[Judicial],0) = @Judicial or @Judicial = 2)
		and (L.Purpose = @Purpose or @Purpose = '')
		
		and (@p_RentFlat = 1 or @p_RentShop = 1 or @p_SaleFlat = 1 or @p_SaleShop = 1)
		and (L.isAutoRenewal = @AutoRenewal or @AutoRenewal = 2)
		and (L.whereabouts = @whereabouts or @whereabouts = '')
		
	
	Select * into #LeaseApartment_Rent from #LeaseApartment_CL L
	where
			(
				((([L].[ToDate] <= @Now_Date) or ([L].[ContractFinish] = 1)) and @ContractState = 0)
			  	or ([L].[ToDate] > @Now_Date and @ContractState = 1)
				or @ContractState = 2
			)		
			and (
				(
					([L].[FromDate] >= @Date1 and @Datewith  = 0)
					and ([L].[FromDate] <= @Date2 and @Datewith  = 0 or @Date2 = '12/30/1899')
				)
				or
				(
					([L].[ToDate] >= @Date1 and @Datewith  = 1)
					and ([L].[ToDate] <= @Date2 and @Datewith  = 1 or @Date2 = '12/30/1899')
				)

				or
				(
					([L].[ContractFinishDate] >= @Date1 and @Datewith  = 2)
					and ([L].[ContractFinishDate] <= @Date2 and @Datewith  = 2 or @Date2 = '12/30/1899')
					and ([L].[ContractFinish] = 1)
				)

				or
				(
					([L].[EditDate] >= @Date1 and @Datewith  = 3)
					and ([L].[EditDate] <= @Date2 and @Datewith  = 3 or @Date2 = '12/30/1899')
				)
				or
				(
					([L].[AcquittancePrintdate] >= @Date1 and @Datewith  = 4)
					and ([L].[AcquittancePrintdate] <= @Date2 and @Datewith  = 4 or @Date2 = '12/30/1899')
				)

				or
				(
					([L].LeaveDate >= @Date1 and @Datewith  = 5)
					and ([L].LeaveDate <= @Date2 and @Datewith  = 5 or @Date2 = '12/30/1899')
				)

				or @CKDate = 0
			) 

	--Select * from #LeaseApartment_Rent return	
	-- ÇáãÄÌÑ	
	Select * into #RentInfo_CL from [RentInfo] where Guid = @RentInfoGuid or @RentInfoGuid = 0x0
	
	--Customer 
	Select
		*
	into #Customer
	From
		vwCustomer
	where
		([Guid] = @CustGuid or @CustGuid = 0x0)
		and ([Nationality] = @Nationality or @Nationality = '')
		
    
   --Select * from #LeaseApartment_CL where [ContractJudicial] = 1
    
	--ÇíÌÇÑ ÇáÔÞÞ	
	if @p_RentFlat = 1
	Insert into @Tbl 
	Select 
		[L].[ContractNo]
		,[A].[No] as [FlatNo]
		,[B].[Name] as [BuildingName]
		,[L].[Rent]
		,[L].[Rent] - [L].[DiscountValue]
		,[A].[FlatKind] as [FlatKind]
		,[A].[ApartmentType] as [FlatType]
		,Case when ([L].[ToDate] <= @Now_Date) or ([L].[ContractFinish] = 1) then dbo.sc('ãäÊåí ÇáãÏÉ')  
			  when [L].[ToDate] > @Now_Date then dbo.sc('ÛíÑ ãäÊåí ÇáãÏÉ') end as [ContractState]
		,[B].[Emirate] as [Emirate]
		,[A].[FloorNo]
		,[Cu].[Name] as [CustName]
		,[Cu].[Mobile] as [CustPhone]
		,[Cu].Nationality
		,[L].[EditDate] as [ContractDateEdit]
		,[L].[FromDate] as [ContractDateBegin]
		,[L].[ToDate] as [ContractDateEnd]
		,[L].[ContractName]
		,[L].[ContractFinish]
		,[L].[Guid] as [ContractGuid]
		,[L].[NewState] 

		,[I].[Name]	
		,L.[SalesMan]
		,[ContractFinishDate]
		,[Note2] 
		,L.[Purpose]
		,l.[CountOldContract]
		,(Select [ContractCount] From #CurrentContract where L.CustomerGuid = CustomerGuid and [L].ApartmentGuid = ApartmentGuid)as [CurrentContract]
		,[L].[CostGuid]
		,L.[CustAccountGuid]
		,L.[ContractJudicial]
		,[L].[Mark]
		,[L].[isAutoRenewal]

		,0 as [Kind]
		,0 as [Sort]
	from 
		#Building_CL [B]
		Inner join [vbApartment] [A] On [A].[BuildingGuid] = [B].[Guid]
		Inner join #LeaseApartment_Rent [L] On [A].[Guid] = [L].[ApartmentGuid] and [LeaseKind]  = 0
		inner join [Resource] [R] on [R].[Guid] = [B].[Guid]  and [R].[Kind] = 101 and [R].[spid] = @@Spid 
		--inner join [vwContractType] [T] on [T].[Guid] = [L].[TypeGuid]  
		--inner join [Resource] [R2] on [R2].[Guid] = [T].[Guid]  and [R2].[Kind] = 100 and [R2].[spid] = @@Spid 
		Inner join [#Customer] [Cu] on [Cu].[Guid] = [L].[CustomerGuid] 
		left join #RentInfo_CL [I] on [I].[Guid] = [L].[RentInfoGuid]
	where
		([A].[FlatKind] = @FlatKind or @FlatKind = '')
		and ([A].[ApartmentType] = @ApartmentType or @ApartmentType = '')
		and (A.Ban = @banRealty or @banRealty = 2)
		
	--ÇíÌÇÑ ãÍá	
	if @p_RentShop = 1
	Insert into @Tbl 
	Select 
		[L].[ContractNo]
		,[A].[No] as [FlatNo]
		,[B].[Name] as [BuildingName]
		,[L].[Rent]
		,[L].[Rent] - [L].[DiscountValue]
		,[ShopKind] as [FlatKind]
		,A.[Description] as [FlatType]
		,Case when ([L].[ToDate] <= GetDate()) or ([L].[ContractFinish] = 1) then dbo.sc('ãäÊåí ÇáãÏÉ')  
			  when [L].[ToDate] > GetDate() then dbo.sc('ÛíÑ ãäÊåí ÇáãÏÉ') end as [ContractState]
		,[B].[Emirate] as [Emirate]
		,'' as [FloorNo]
		,[Cu].[Name] as [CustName]
		,[Cu].[Mobile] as [CustPhone]
		,[Cu].Nationality
		,[L].[EditDate] as [ContractDateEdit]
		,[L].[FromDate] as [ContractDateBegin]
		,[L].[ToDate]as [ContractDateEnd]
		,[L].[ContractName]
		,[L].[ContractFinish]
		,[L].[Guid] as [ContractGuid]
		,[L].[NewState] 

		,[I].[Name]	
		,L.[SalesMan]
		,[ContractFinishDate]
		,Left([L].[Note2],255)
		,L.[Purpose]
		,L.[CountOldContract]
		,(Select [ContractCount] From #CurrentContract where L.CustomerGuid = CustomerGuid and [L].ApartmentGuid = ApartmentGuid)as [CurrentContract]
		,[L].[CostGuid]
		,L.[CustAccountGuid]
		,L.[ContractJudicial]
		,[L].[mark]
		,[L].[isAutoRenewal]
		,1 as [Kind]
		,0 as [Sort]
	from 
		#Building_CL [B]
		Inner join [vwShopall] [A] On [A].[BuildingGuid] = [B].[Guid]
		inner join #LeaseApartment_Rent [L] On [A].[Guid] = [L].[ApartmentGuid] and [LeaseKind]  = 1
		Inner join [Resource] [R] on [R].[Guid] = [B].[Guid]  and [R].[Kind] = 101 and [R].[spid] = @@Spid 
		--inner  join [vwContractType] [T] on [T].[Guid] = [L].[TypeGuid]  
		--Inner join [Resource] [R2] on [R2].[Guid] = [T].[Guid]  and [R2].[Kind] = 100 and [R2].[spid] = @@Spid 
		inner  join [#Customer] [Cu] on [Cu].[Guid] = [L].[CustomerGuid] 
		left  join #RentInfo_CL [I] on [I].[Guid] = [L].[RentInfoGuid]
		and (A.Ban = @banRealty or @banRealty = 2)

	--ÈíÚ ÔÞÉ
	if @p_SaleFlat = 1
	Insert into @Tbl 
	Select 
		[L].[ContractNo]
		,[A].[No] as [FlatNo]
		,[B].[Name] as [BuildingName]
		,[L].[Rent]
		,[L].[Rent] - [L].[DiscountValue]
		,[A].[FlatKind] as [FlatKind]
		,[A].[ApartmentType] as [FlatType]
		,Case when ([L].[ToDate] <= GetDate()) or ([L].[ContractFinish] = 1) then dbo.sc('ãäÊåí ÇáãÏÉ')  
			  when [L].[ToDate] > GetDate() then dbo.sc('ÛíÑ ãäÊåí ÇáãÏÉ') end as [ContractState]
		,[B].[Emirate] as [Emirate]
		,[A].[FloorNo]
		,[Cu].[Name] as [CustName]
		,[Cu].[Mobile] as [CustPhone]
		,[Cu].[Nationality]
		,[L].[EditDate] as [ContractDateEdit]
		,[L].[FromDate] as [ContractDateBegin]
		,[L].[ToDate]as [ContractDateEnd]
		,[L].[ContractName]
		,Null as [ContractFinish]
		,[L].[Guid] as [ContractGuid]
		,-1 as [NewState] 

		,[I].[Name]	
		,L.[SalesMan]
		,[ContractFinishDate]
		,[Note2] 
		,L.[Purpose]
		,L.[CountOldContract]
		,(Select [ContractCount] From #CurrentContract where L.CustomerGuid = CustomerGuid and [L].ApartmentGuid = ApartmentGuid)as [CurrentContract]
		,[L].[CostGuid]
		,L.[CustAccountGuid]
		,L.[ContractJudicial]
		,[L].[Mark]
		,[L].[isAutoRenewal]
		,2 as [Kind]
		,0 as [Sort]
	from 
		#Building_CL [B]
		Inner join [vwApartmentall] [A] On [A].[BuildingGuid] = [B].[Guid]
		Inner join #LeaseApartment_CL [L] On [A].[Guid] = [L].[ApartmentGuid] and [LeaseKind]  = 2
		Inner join [Resource] [R] on [R].[Guid] = [B].[Guid]  and [R].[Kind] = 101 and [R].[spid] = @@Spid 
		--inner join [vwContractType] [T] on [T].[Guid] = [L].[TypeGuid]  
		--Inner join [Resource] [R2] on [R2].[Guid] = [T].[Guid]  and [R2].[Kind] = 100 and [R2].[spid] = @@Spid 
		Inner join [#Customer] [Cu] on [Cu].[Guid] = [L].[CustomerGuid] 
		left join #RentInfo_CL [I] on [I].[Guid] = [L].[RentInfoGuid]
	where
		([A].[FlatKind] = @FlatKind or @FlatKind = '')
		and ([A].[ApartmentType] = @ApartmentType or @ApartmentType = '')
		and (
				(
					([L].[FromDate] >= @Date1 and @Datewith  = 0)
					and ([L].[FromDate] <= @Date2 and @Datewith  = 0 or @Date2 = '12/30/1899')
					
				)
				
				or
				(
					([L].[EditDate] >= @Date1 and @Datewith  = 3)
					and ([L].[EditDate] <= @Date2 and @Datewith  = 3 or @Date2 = '12/30/1899')
				)
				or
				(
					([L].[AcquittancePrintdate] >= @Date1 and @Datewith  = 4)
					and ([L].[AcquittancePrintdate] <= @Date2 and @Datewith  = 4 or @Date2 = '12/30/1899')
				)
				
				or
				(
					([L].LeaveDate >= @Date1 and @Datewith  = 5)
					and ([L].LeaveDate <= @Date2 and @Datewith  = 5 or @Date2 = '12/30/1899')
				)

				or @CKDate = 0
			) 
		and (@EndState = 2)
		and (A.Ban = @banRealty or @banRealty = 2)

	
	--ÈíÚ ãÍá
	if @p_SaleShop = 1
	Insert into @Tbl 
	Select 
		[L].[ContractNo]
		,[A].[No] as [FlatNo]
		,[B].[Name] as [BuildingName]
		,[L].[Rent]
		,[L].[Rent] - [L].[DiscountValue]
		,[ShopKind] as [FlatKind]
		,A.[Description] as [FlatType]
		,Case when ([L].[ToDate] <= GetDate()) or ([L].[ContractFinish] = 1) then dbo.sc('ãäÊåí ÇáãÏÉ')  
			  when [L].[ToDate] > GetDate() then dbo.sc('ÛíÑ ãäÊåí ÇáãÏÉ') end as [ContractState]
		,[B].[Emirate] as [Emirate]
		,'' as [FloorNo]
		,[Cu].[Name] as [CustName]
		,[Cu].[Mobile] as [CustPhone]
		,[Cu].[Nationality]
		,[L].[EditDate] as [ContractDateEdit]
		,[L].[FromDate] as [ContractDateBegin]
		,[L].[ToDate]as [ContractDateEnd]
		,[L].[ContractName]
		,Null as [ContractFinish]
		,[L].[Guid] as [ContractGuid]
		,-1 as [NewState] 

		,[I].[Name]	
		,L.[SalesMan]
		,[ContractFinishDate]
		,[Note2] 
		,L.[Purpose]
		,L.[CountOldContract]
		,(Select [ContractCount] From #CurrentContract where L.CustomerGuid = CustomerGuid and [L].ApartmentGuid = ApartmentGuid)as [CurrentContract]
		,[L].[CostGuid]
		,L.[CustAccountGuid]
		,L.[ContractJudicial]
		,[L].[Mark]
		,[L].[isAutoRenewal]
		,3 as [Kind]
		,0 as [Sort]
	from 
		#Building_CL [B]
		Inner join [vwShopAll] [A] On [A].[BuildingGuid] = [B].[Guid]
		Inner join #LeaseApartment_CL [L] On [A].[Guid] = [L].[ApartmentGuid] and [LeaseKind]  = 3
		Inner join [Resource] [R] on [R].[Guid] = [B].[Guid]  and [R].[Kind] = 101 and [R].[spid] = @@Spid 
		inner join [vwContractType] [T] on [T].[Guid] = [L].[TypeGuid]  
		Inner join [Resource] [R2] on [R2].[Guid] = [T].[Guid]  and [R2].[Kind] = 100 and [R2].[spid] = @@Spid 
		Inner join [#Customer] [Cu] on [Cu].[Guid] = [L].[CustomerGuid] 
		left join #RentInfo_CL [I] on [I].[Guid] = [L].[RentInfoGuid]
	where
		(
				(
					([L].[FromDate] >= @Date1 and @Datewith  = 0)
					and ([L].[FromDate] <= @Date2 and @Datewith  = 0 or @Date2 = '12/30/1899')
				)
				or
				(
					([L].[EditDate] >= @Date1 and @Datewith  = 3)
					and ([L].[EditDate] <= @Date2 and @Datewith  = 3 or @Date2 = '12/30/1899')
				)
				
				or
				(
					([L].[AcquittancePrintdate] >= @Date1 and @Datewith  = 4)
					and ([L].[AcquittancePrintdate] <= @Date2 and @Datewith  = 4 or @Date2 = '12/30/1899')
				)
				
				or
				(
					([L].LeaveDate >= @Date1 and @Datewith  = 5)
					and ([L].LeaveDate <= @Date2 and @Datewith  = 5 or @Date2 = '12/30/1899')
				)

				or @CKDate = 0
			) 

		and (@EndState = 2)
		and (A.Ban = @banRealty or @banRealty = 2)


	--ãæÞÝ
	if (@Purpose = '') and (@p_RentParking = 1)
	Insert into @Tbl 
	Select 
		[L].[ContractNo]
		,[A].[No] as [FlatNo]
		,[B].[Name] as [BuildingName]
		,[L].[Rent]
		,[L].[Rent] - 0
		,[ParkingKind] as [FlatKind]
		,A.[Description] as [FlatType]
		,Case when ([L].[ToDate] <= GetDate()) or ([L].[ContractFinish] = 1) then dbo.sc('ãäÊåí ÇáãÏÉ')  
			  when [L].[ToDate] > GetDate() then dbo.sc('ÛíÑ ãäÊåí ÇáãÏÉ') end as [ContractState]
		,[B].[Emirate] as [Emirate]
		,[A].[FloorNo]
		,[Cu].[Name] as [CustName]
		,[Cu].[Mobile] as [CustPhone]
		,[Cu].[Nationality]
		,[L].[EditDate] as [ContractDateEdit]
		,[L].[FromDate] as [ContractDateBegin]
		,[L].[ToDate]as [ContractDateEnd]
		,[T].[Name]
		,[L].[ContractFinish]
		,[L].[Guid] as [ContractGuid]
		,[L].[NewState] 

		,[I].[Name]	
		,S.Name as [SalesMan]	
		,[ContractFinishDate]
		,[Note2] 
		,''
		,0 as [CountOldContract]
		,0
		,[L].[CostGuid]
		,L.[CustAccountGuid]
		,L.[Judicial]
		,[L].[Mark]
		,[L].[isAutoRenewal]

		,[R2].[spid]
		,0 as [Sort]
	from 
		#Building_CL [B]
		Inner join [vwParkingAll] [A] On [A].[BuildingGuid] = [B].[Guid]
		Inner join [vwParkingContract] [L] On [A].[Guid] = [L].[ParkingGuid]
		Inner join [Resource] [R] on [R].[Guid] = [B].[Guid]  and [R].[Kind] = 101 and [R].[spid] = @@Spid 
		inner join [vwContractType] [T] on [T].[Guid] = [L].[TypeGuid]  
		Inner join [Resource] [R2] on [R2].[Guid] = [T].[Guid]  and [R2].[Kind] = 100 and [R2].[spid] = @@Spid 
		Inner join [#Customer] [Cu] on [Cu].[Guid] = [L].[CustomerGuid] 
		left join #RentInfo_CL [I] on [I].[Guid] = [L].[RentInfoGuid]
		left join Salesman S on S.Guid = L.SalesManGuid
	where
		([L].[CustomerGuid] = @CustGuid or @CustGuid = 0x0)
		and 
			(
				((([L].[ToDate] <= GetDate()) or ([L].[ContractFinish] = 1)) and @ContractState = 0)
			  	or ([L].[ToDate] > GetDate() and @ContractState = 1)
				or @ContractState = 2
			)

		and (
				(
					([L].[FromDate] >= @Date1 and @Datewith  = 0)
					and ([L].[FromDate] <= @Date2 and @Datewith  = 0 or @Date2 = '12/30/1899')
				)
				or
				(
					([L].[ToDate] >= @Date1 and @Datewith  = 1)
					and ([L].[ToDate] <= @Date2 and @Datewith  = 1 or @Date2 = '12/30/1899')
				)

				or
				(
					([L].[ContractFinishDate] >= @Date1 and @Datewith  = 2)
					and ([L].[ContractFinishDate] <= @Date2 and @Datewith  = 2 or @Date2 = '12/30/1899')
					and ([L].[ContractFinish] = 1)
				)

				or
				(
					([L].[EditDate] >= @Date1 and @Datewith  = 3)
					and ([L].[EditDate] <= @Date2 and @Datewith  = 3 or @Date2 = '12/30/1899')
				)
				and @Datewith  <> 4 and @Datewith  <> 5

				or @CKDate = 0
			)

		and ([L].[RentInfoGuid] = @RentInfoGuid or @RentInfoGuid = 0x0)
		and ([L].[SalesManGuid] = @SalesManGuid or @SalesManGuid = 0x0)

		and ([L].[ContractFinish] = @EndState or @EndState = 2)
		and (
				([l].[Mark] = 1 and @Mark = 1)
				or ([l].[Mark] = 0 and @NotMark = 1)
			)
		and (L.PayType = @PayType or @PayType  = 4)
		and ([L].[Judicial] = @Judicial or @Judicial = 2)
		and (L.isAutoRenewal = @AutoRenewal or @AutoRenewal = 2)
		and (A.Ban = @banRealty or @banRealty = 2)

	--ÇáÃÑÖ
	if (@p_RentLand = 1 or @p_SaleLand = 1)
	Insert into @Tbl 
	Select 
		[L].[ContractNo]
		,[A].[Name] as [FlatNo]
		,'' as [BuildingName]
		,[L].[Rent]
		,[L].[Rent] - [L].[DiscountValue]
		,'' as [FlatKind]
		,'' as [FlatType]
		,Case when ([L].[ToDate] <= GetDate()) or ([L].[ContractFinish] = 1) then dbo.sc('ãäÊåí ÇáãÏÉ')  
			  when [L].[ToDate] > GetDate() then dbo.sc('ÛíÑ ãäÊåí ÇáãÏÉ') end as [ContractState]
		,'' as [Emirate]
		,'' as [FloorNo]
		,[Cu].[Name] as [CustName]
		,[Cu].[Mobile] as [CustPhone]
		,[Cu].[Nationality] 
		,[L].[EditDate] as [ContractDateEdit]
		,[L].[FromDate] as [ContractDateBegin]
		,[L].[ToDate] as [ContractDateEnd]
		,[T].[Name]
		,[ContractFinish]
		,[L].[Guid] as [ContractGuid]
		,[L].[NewState]
		,[I].[Name]
		,S.Name as [SalesMan]
		,[ContractFinishDate]
		,[Note2] 
		,L.[Purpose]
		,0 as [CountOldContract]
		,0
		,[L].[CostGuid]
		,L.[CustAccountGuid]
		,L.[Judicial]
		,[L].[Mark]
		,[L].[isAutoRenewal]
		,[R2].[spid]
		,0 as [Sort]
	from 
		[vwEarthAll] [A] 
		Inner join [vwLandContract] [L] On [A].[Guid] = [L].[LandGuid]
		inner join [vwContractType] [T] on [T].[Guid] = [L].[TypeGuid]  
		Inner join [Resource] [R2] on [R2].[Guid] = [T].[Guid]  and [R2].[Kind] = 100 and [R2].[spid] = @@Spid 
		Inner join [#Customer] [Cu] on [Cu].[Guid] = [L].[CustomerGuid] 
		left join #RentInfo_CL [I] on [I].[Guid] = [L].[RentInfoGuid]
		left join Salesman S on S.Guid = L.SalesManGuid
	where
		([L].[CustomerGuid] = @CustGuid or @CustGuid = 0x0)
		and	([L].[SalesManGuid] = @SalesManGuid or @SalesManGuid = 0x0)
		and 
			(
				((([L].[ToDate] <= GetDate()) or ([L].[ContractFinish] = 1)) and @ContractState = 0)
			  	or ([L].[ToDate] > GetDate() and @ContractState = 1)
				or @ContractState = 2
			)
		and (
				(
					([L].[FromDate] >= @Date1 and @Datewith  = 0)
					and ([L].[FromDate] <= @Date2 and @Datewith  = 0 or @Date2 = '12/30/1899')
				)
				or
				(
					([L].[ToDate] >= @Date1 and @Datewith  = 1)
					and ([L].[ToDate] <= @Date2 and @Datewith  = 1 or @Date2 = '12/30/1899')
				)

				or
				(
					([L].[ContractFinishDate] >= @Date1 and @Datewith  = 2)
					and ([L].[ContractFinishDate] <= @Date2 and @Datewith  = 2 or @Date2 = '12/30/1899')
					and ([L].[ContractFinish] = 1)
				)

				or
				(
					([L].[EditDate] >= @Date1 and @Datewith  = 3)
					and ([L].[EditDate] <= @Date2 and @Datewith  = 3 or @Date2 = '12/30/1899')
				)
				or
				(
					([L].[AcquittancePrintdate] >= @Date1 and @Datewith  = 4)
					and ([L].[AcquittancePrintdate] <= @Date2 and @Datewith  = 4 or @Date2 = '12/30/1899')
				)

				or
				(
					([L].LeaveDate >= @Date1 and @Datewith  = 5)
					and ([L].LeaveDate <= @Date2 and @Datewith  = 5 or @Date2 = '12/30/1899')
				)
				

				or @CKDate = 0
			) 

		and ([L].[ContractFinish] = @EndState or @EndState = 2)
		and (
				([l].[Mark] = 1 and @Mark = 1)
				or ([l].[Mark] = 0 and @NotMark = 1)
			)
		and (L.PayType = @PayType or @PayType  = 4)
		and ([L].[Judicial] = @Judicial or @Judicial = 2)
		and (L.Purpose = @Purpose or @Purpose = '') 
		and (l.isAutoRenewal = @AutoRenewal or @AutoRenewal = 2)
		and (A.Ban = @banRealty or @banRealty = 2)
		
	--ÝíáÇ
	if (@p_RentVilla = 1 or @p_SaleVilla = 1)
	Insert into @Tbl 
	Select 
		[L].[ContractNo]
		,[A].[Name] as [FlatNo]
		,'' as [BuildingName]
		,[L].[Rent]
		,[L].[Rent] - [L].[DiscountValue]
		,'' as [FlatKind]
		,'' as [FlatType]
		,Case when ([L].[ToDate] <= GetDate()) or ([L].[ContractFinish] = 1) then dbo.sc('ãäÊåí ÇáãÏÉ')  
			  when [L].[ToDate] > GetDate() then dbo.sc('ÛíÑ ãäÊåí ÇáãÏÉ') end as [ContractState]
		,'' as [Emirate]
		,'' as [FloorNo]
		,[Cu].[Name] as [CustName]
		,[Cu].[Mobile] as [CustPhone]
		,[Cu].[Nationality]
		,[L].[EditDate] as [ContractDateEdit]
		,[L].[FromDate] as [ContractDateBegin]
		,[L].[ToDate] as [ContractDateEnd]
		,[T].[Name]
		,[ContractFinish]
		,[L].[Guid] as [ContractGuid]
		,[L].[NewState]  

		,[I].[Name]
		,S.name  as [SalesMan]
		,[ContractFinishDate]
		,[Note2] 
		,L.[Purpose]
		,0 as [CountOldContract]
		,0
		,[L].[CostGuid]
		,L.[CustAccountGuid]
		,L.[Judicial]
		,[L].[Mark]
		,[L].[isAutoRenewal]
		,[R2].[spid]
		,0 as [Sort]
	from 
		[vwVillaAll] [A] 
		Inner join [vwLandContract] [L] On [A].[Guid] = [L].[LandGuid]
		inner join [vwContractType] [T] on [T].[Guid] = [L].[TypeGuid]  
		Inner join [Resource] [R2] on [R2].[Guid] = [T].[Guid]  and [R2].[Kind] = 100 and [R2].[spid] = @@Spid 
		Inner join [#Customer] [Cu] on [Cu].[Guid] = [L].[CustomerGuid] 
		left join #RentInfo_CL [I] on [I].[Guid] = [L].[RentInfoGuid]
		left join Salesman S on S.Guid = L.SalesManGuid
	where
		([L].[CustomerGuid] = @CustGuid or @CustGuid = 0x0)
		and	([L].[SalesManGuid] = @SalesManGuid or @SalesManGuid = 0x0)
		and 
			(
				((([L].[ToDate] <= GetDate()) or ([L].[ContractFinish] = 1)) and @ContractState = 0)
			  	or ([L].[ToDate] > GetDate() and @ContractState = 1)
				or @ContractState = 2
			)
		and (
				(
					([L].[FromDate] >= @Date1 and @Datewith  = 0)
					and ([L].[FromDate] <= @Date2 and @Datewith  = 0 or @Date2 = '12/30/1899')
				)
				or
				(
					([L].[ToDate] >= @Date1 and @Datewith  = 1)
					and ([L].[ToDate] <= @Date2 and @Datewith  = 1 or @Date2 = '12/30/1899')
				)

				or
				(
					([L].[ContractFinishDate] >= @Date1 and @Datewith  = 2)
					and ([L].[ContractFinishDate] <= @Date2 and @Datewith  = 2 or @Date2 = '12/30/1899')
					and ([L].[ContractFinish] = 1)
				)

				or
				(
					([L].[EditDate] >= @Date1 and @Datewith  = 3)
					and ([L].[EditDate] <= @Date2 and @Datewith  = 3 or @Date2 = '12/30/1899')
				)
				or
				(
					([L].[AcquittancePrintdate] >= @Date1 and @Datewith  = 4)
					and ([L].[AcquittancePrintdate] <= @Date2 and @Datewith  = 4 or @Date2 = '12/30/1899')
				)
				or
				(
					([L].LeaveDate >= @Date1 and @Datewith  = 5)
					and ([L].LeaveDate <= @Date2 and @Datewith  = 5 or @Date2 = '12/30/1899')
				)

				or @CKDate = 0
			) 

		and ([L].[ContractFinish] = @EndState or @EndState = 2)
		and (
				([l].[Mark] = 1 and @Mark = 1)
				or ([l].[Mark] = 0 and @NotMark = 1)
			)
		and (L.PayType = @PayType or @PayType  = 4)
		and ([L].[Judicial] = @Judicial or @Judicial = 2)
		and (L.Purpose = @Purpose or @Purpose = '') 
		and (l.isAutoRenewal = @AutoRenewal or @AutoRenewal = 2)
		and (A.Ban = @banRealty or @banRealty = 2)

	
	if @LinkCheck = 0 -- ÈÏæä ÇÞÓÇØ
	Delete @Tbl
	From
		@Tbl T
		inner join [Checks] C on C.ContractGuid = T.ContractGuid
	
	if @LinkCheck = 1 -- áåÇ ÇÞÓÇØ
	Delete @Tbl
	From
		@Tbl T
		left join [Checks] C on C.ContractGuid = T.ContractGuid
	where
		C.Guid is Null

	-- ÇáÊÞÏí
	Select
		[P].[ContractGuid],
		Sum(IsNull([P].[Value] * [P].[CurrencyVal],0)) as [Cash]
	Into #Cash
	From
		[vwContractCachPayment] [P]
		inner join @Tbl [t] on [t].[ContractGuid] = [P].[ContractGuid] and P.AcGuid = t.AccountGuid
	Group By
		[P].[ContractGuid]	


	Select 
		MAX(p.Date) as [LastPartialCollectionDate],
		CheckGuid
	into #LastPartialCollectionDate
	from
		ChecksPartialCollection P
		inner join Checks C on C.Guid = P.CheckGuid
		inner join @Tbl [t] on [t].[ContractGuid] = [C].[ContractGuid]
	Group by
		CheckGuid
	
	-- ÇáÔíßÇÊ
	Select
		P.date as EditDate,
		P.DueDate,
		Case when CS.IsPosted = 1 then (Select Date from vwChecksCollection where Kind = 0 and [CheckGuid] = P.Guid) end as [PostDate],
		Case when CS.IsCollection = 1 then (Select Date from vwChecksCollection where Kind = 1 and [CheckGuid] = P.Guid) end as [CollectionDate],
		Case when CS.IsEndorsement = 1 then (Select Date from vwChecksCollection where Kind = 2 and [CheckGuid] = P.Guid) end as [EndorsementDate],
		Case when CS.IsReturned = 1 then (Select Date from vwChecksCollection where Kind = 3 and [CheckGuid] = P.Guid) end as [ReturnedDate],
		(Select [LastPartialCollectionDate] from #LastPartialCollectionDate where CheckGuid = p.Guid) as [LastPartialCollectionDate],
		[P].[ContractGuid],
		P.TypeName,
		p.NO,
		P.Number as CheckNumber,
		IsNull([P].[Value] * [P].[CurrencyVal],0) as [CheckValue],
		IsNull([C1].[Value] * [C1].[CurrencyVal],0) + IsNull(C4.Value,0) as [Collection],
		Case 
			when Cs.IsReturned = 1 then dbo.sc('ãÑÊÌÚ')
			when Cs.IsEndorsement = 1 then dbo.sc('ãÙåÑ') 
			when Cs.IsCollection = 1 then dbo.sc('ãÍÕá')
			when Cs.IsPartialCollection = 1 then dbo.sc('ãÍÕá ÌÒÆíÇ')
			when Cs.IsPosted = 1 then dbo.sc('ãÑÍá')
		end as [CheckState]
	Into #Collection_CL
	From
		[vwChecks] [P]
		inner join vwChecksCollectionState cs on cs.CheckGuid = p.Guid
		left join [vwChecksCollection] [C1] on [C1].[CheckGuid] = [P].[Guid] and [C1].[Kind] = 1
		left join (
						Select 
							[CheckGuid],
							Sum([Value] * CurrencyVal) as [Value] 
						From
							[ChecksPartialCollection] 
						Group By
							[CheckGuid]
					) [C4] on [C4].[CheckGuid] = [P].[Guid]
		inner join @Tbl [t] on [t].[ContractGuid] = [P].[ContractGuid]

	Select
		En.AcGuid,
		SUM(En.debit - en.Credit) as [Balance]
	into #CustBalance
	From
		(Select distinct AccountGuid from @Tbl ) T
		inner join DEntry En on En.AcGuid = T.AccountGuid
	Group By
		En.AcGuid


	Declare @CheckOfContract_4 Table
	(
		[ContractNo] Varchar(256)
		,[FlatNo] Varchar(256)
		,[BuildingName] Varchar(256)
		,[Value] Float
		,[ValueAfterDiscount] Float
		,[FlatKind] Varchar(256)
		,[FlatType] Varchar(256)
		,[ContractState] Varchar(256)
		,[Emirate] Varchar(256)
		,[FloorNo] Varchar(256)
		,[CustName] Varchar(256)
		,[CustPhone] Varchar(256)
		,[CustNationality] Varchar(256)
		,[ContractDateEdit] Datetime
		,[ContractDateBegin] Datetime
		,[ContractDateEnd] Datetime
		,[ContractType] Varchar(256)
		,[ContractFinish] Bit
		,[ContractGuid] uniqueidentifier
		,[NewState] int

		,[RentMan] Varchar(256)
		,[SalesMan] Varchar(256)
		,[ContractFinishDate] Datetime
		,[Note2] Varchar(1000)
		,[Purpose] Varchar(256)
		
		,[CountOldContract] int
		,[CountCurrentContract] int
		
		,[CostGuid] uniqueidentifier
		,[AccountGuid] uniqueidentifier
		,[Judicial] Bit
		,[Mark] Bit
		,[isAutoRenewal] Bit
		,[Kind] Int
		,[Sort] int
		,[ContractFinishStr] varchar(255)
		,[NewStateStr] varchar(255)
		,[Cash] float
		,[CheckType] varchar(255)
		,[CheckNo] varchar(255)
		,[CheckNumber] int
		,[CheckValue] Float
		,[Collection] float
		,[CheckNotCollection] Float
		,[CheckState] varchar(255)
		
		,[Editdate] datetime
		,[DueDate] datetime
		,[PostDate] datetime
		,[CollectionDate] datetime
		,[EndorsementDate] datetime
		,[ReturnedDate] datetime
		,[LastPartialCollectionDate] datetime
		
		,[CustBalance] Float
	)

	insert into @CheckOfContract_4
	([ContractNo],
		[FlatNo],
		[BuildingName],
		[Value],
		[ValueAfterDiscount],
		[FlatKind],
		[FlatType],
		[ContractState],
		[Emirate],
		[FloorNo],
		[CustName],
		[CustPhone],
		[CustNationality],
		[ContractDateEdit],
		[ContractDateBegin],
		[ContractDateEnd],
		[ContractType],
		[ContractFinish],
		[ContractGuid],
		[NewState],
		[RentMan],
		[SalesMan],
		[ContractFinishDate],
		[Note2],
		[Purpose],
		[CountOldContract],
		[CountCurrentContract],
		[CostGuid],
		[AccountGuid],
		[Judicial],
		[Mark],
		[isAutoRenewal],
		[Kind],
		[Sort],
		[ContractFinishStr],
		[NewStateStr],
		[Cash],
		[CheckType],
		[CheckNo],
		[CheckNumber],
		[CheckValue],
		[Collection],
		[CheckNotCollection],
		[CheckState],

		[Editdate],
		[DueDate],
		[PostDate],
		[CollectionDate],
		[EndorsementDate],
		[ReturnedDate],
		[LastPartialCollectionDate],

		[CustBalance]
	)
	Select 
		[E].[ContractNo],
		[E].[FlatNo],
		[E].[BuildingName],
		[E].[Value],
		[E].[ValueAfterDiscount],
		[E].[FlatKind],
		[E].[FlatType],
		[E].[ContractState],
		[E].[Emirate],
		[E].[FloorNo],
		[E].[CustName],
		[E].[CustPhone],
		[E].[CustNationality],
		[E].[ContractDateEdit],
		[E].[ContractDateBegin],
		[E].[ContractDateEnd],
		[E].[ContractType],
		[E].[ContractFinish],
		[E].[ContractGuid],
		[E].[NewState],
		[E].[RentMan],
		[E].[SalesMan],
		[E].[ContractFinishDate],
		[E].[Note2],
		[E].[Purpose],
		[E].[CountOldContract],
		[E].[CountCurrentContract],
		[E].[CostGuid],
		[E].[AccountGuid],
		[E].[Judicial],
		[E].[Mark],
		[E].[isAutoRenewal],
		[E].[Kind],
		[E].[Sort],
		Case when isnUll([ContractFinish],0) = 0 then dbo.sc('áÇ') else dbo.sc('äÚã') end As [ContractFinishStr],
		
		Case when isnUll([NewState],0) = 0 then dbo.sc('ÌÏíÏ') 
			 when isnUll([NewState],0) = 1 then dbo.sc('ÊÌÏíÏ') 
		else 
			''
		end As [NewStateStr],
		
		isNull([h].[Cash],0) as [Cash],
		C.TypeName as CheckType,
		C.NO as [CheckNo],
		C.CheckNumber,
		C.CheckValue,
		isNull([C].[Collection],0) as [Collection],
		isNull([C].[CheckValue],0) - isNull([C].[Collection],0)   as [CheckNotCollection],
		c. [CheckState],

		C.[Editdate],
		C.[DueDate],
		C.[PostDate],
		C.[CollectionDate],
		C.[EndorsementDate],
		C.[ReturnedDate],
		C.[LastPartialCollectionDate],

		CAST(0 as Float) as [CustBalance]
				
	From
		@Tbl [E]
		left join #Collection_CL [C] on [E].[ContractGuid] = [C].[ContractGuid]
		left join #Cash [h] on [E].[ContractGuid] = [h].[ContractGuid]
	where
		(Isnull([E].[NewState],0) = @NewState or @NewState = 2)

	--ÇáãÌãæÚ		
	insert into @CheckOfContract_4
	([BuildingName],[ContractDateBegin],[ContractNo],
		[CustName],
		[Sort],
		[CheckType],
		[CheckValue],
		[Collection],
		[CheckNotCollection],
		[Value],
		[ValueAfterDiscount],
		[cash]
	)
	Select 
		[BuildingName],	
		[ContractDateBegin],
		[ContractNo],
		dbo.sc('ÇáãÌãæÚ') +' '+ [CustName],
		1 as [Sort],
		dbo.sc('ÇáãÌãæÚ') as [CheckType],
		Sum([CheckValue]),
		Sum([Collection]),
		Sum([CheckNotCollection]),
		[Value],
		[ValueAfterDiscount],
		[cash]
	From
		@CheckOfContract_4
	Group by
		[BuildingName],[ContractDateBegin],[ContractNo],[CustName],
		[Value],
		[ValueAfterDiscount],
		[cash]
	
	update	
		@CheckOfContract_4
	set
		custBalance = C.Balance
	From
		@CheckOfContract_4 E
		inner join #CustBalance C on C.AcGuid = E.AccountGuid 
	
	
	Select
		*
	from
		@CheckOfContract_4
	Order By 
		
		[BuildingName],[ContractDateBegin],[ContractNo],[Sort],
		[FlatNo],
		CheckNumber
		
	
		

GO
/****** Object:  StoredProcedure [dbo].[PrcCheckReNote]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcCheckReNote]
(
	@ReNoteAll Bit = 0
)
  
as

	Declare @Guid uniqueidentifier,
			@NoteForm1 Varchar(256),
			@NoteForm2 Varchar(256),
			@AccountName Varchar(256),
			@ObverseAccountName Varchar(256),
			@Value Float,
			@CurrencyName Varchar(256),
			@No Varchar(256),
			@BankName Varchar(256),
			@DueDate datetime,
			@Note1 Varchar(256),
			@Note2 Varchar(256)

	DECLARE cursor_Name CURSOR FAST_FORWARD FOR 
	Select 
		[S].[Guid],
		[S].[Note],
		[S].[Note2]
	From
		[Checks] [S]
		inner join [Resource] [C] on [C].[Guid] = [S].[Guid] and [C].[Kind] = 8 --and [spid] = @@Spid
	
	OPEN cursor_Name
	FETCH NEXT FROM cursor_Name INTO @Guid, @Note1, @Note2
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
		Select 
			@NoteForm1 = [T].[NoteForm1],
			@NoteForm2 = [T].[NoteForm2],
			@AccountName = [C].[AccountName],
			@ObverseAccountName = [C].[ObverseAccountName],
			@Value = [C].[Value],
			@CurrencyName = [C].[CurrencyName],
			@No = [C].[No],
			@BankName = [C].[BankName],
			@DueDate = [C].[DueDate],
			@Note1 = [C].[Note],
			@Note2 = [C].[Note2]
		From		
			[CheckType] [T]
			inner join [vwChecks] [C] on [C].[TypeGuid] = [T].[Guid]
		where
			[C].[Guid] = @Guid

				
        Set @NoteForm1 = replace(@NoteForm1, '[A]', @AccountName)
        Set @NoteForm1 = replace(@NoteForm1, '[B]', @ObverseAccountName)
        Set @NoteForm1 = replace(@NoteForm1, '[C]', Cast(@Value as varchar(256)) + ' '+@CurrencyName)
        Set @NoteForm1 = replace(@NoteForm1, '[D]', @BankName)
        Set @NoteForm1 = replace(@NoteForm1, '[E]', @No)
        Set @NoteForm1 = replace(@NoteForm1, '[F]', Cast(DatePart(Day, @DueDate) as varchar(256))  +'-'+
													Cast(DatePart(Month, @DueDate) as varchar(256))  +'-'+
													Cast(DatePart(Year, @DueDate) as varchar(256)) )

		update [Checks]
		Set
			[Note] = @NoteForm1
		where
			[Guid] = @Guid
			and ([Note] = '' or @ReNoteAll = 1)

        Set @NoteForm2 = replace(@NoteForm2, '[A]', @AccountName)
        Set @NoteForm2 = replace(@NoteForm2, '[B]', @ObverseAccountName)
        Set @NoteForm2 = replace(@NoteForm2, '[C]', Cast(@Value as varchar(256)) + ' '+@CurrencyName)
        Set @NoteForm2 = replace(@NoteForm2, '[D]', @BankName)
        Set @NoteForm2 = replace(@NoteForm2, '[E]', @No)
        Set @NoteForm2 = replace(@NoteForm2, '[F]', Cast(DatePart(Day, @DueDate) as varchar(256))  +'-'+
													Cast(DatePart(Month, @DueDate) as varchar(256))  +'-'+
													Cast(DatePart(Year, @DueDate) as varchar(256)) )

		update [Checks]
		Set
			[Note2] = @NoteForm2
		where
			[Guid] = @Guid
			and ([Note2] = '' or @ReNoteAll = 1)

--		Select @NoteForm1, @NoteForm2

		FETCH NEXT FROM cursor_Name INTO @Guid, @Note1, @Note2
	END
	
	CLOSE cursor_Name
	DEALLOCATE cursor_Name

GO
/****** Object:  StoredProcedure [dbo].[PrcCheckReturn]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcCheckReturn]
(
	@Fixreturn int = 2,
	@Account UniqueIdentifier = 0x0,
	@obverseAccount UniqueIdentifier = 0x0,
	@AccountWith int = 0,
	@BankName Varchar(256) = '',
	@beneficiary Varchar(256) = '',
	@ReturnCause Varchar(256) = '',
	@ExceptReturnCause Varchar(256) = '',
	@DayCount int = 0,
	@ActiveFixReturnNote bit = 0,
	@OperationFixReturnNote int = 1,
	@FixReturnNote varchar(255) = '',
	@ActiveBuildingList Bit = 1,
	@ReturnFinish int = 2,
	@CkDate Bit = 0,
	@Datewith int = 0,
	@Date1 Datetime = '2008-1-1',
	@Date2 Datetime = '2019-12-31'
)
  
as
	--ãÚÇáÌÉ ÈíÇä ÇáÚãáíÇÊ
	if @OperationFixReturnNote = 0 --íÍæí
	Set @FixReturnNote = '%'+@FixReturnNote+'%'

	Select 
		[P].[Number],
		[P].[TypeName],

		[P].[AccountCode],
		[P].[AccountName],

		[P].[ObverseAccountCode],
		[P].[ObverseAccountName]

		,[P].[No]
		,[P].[Value]
		,Cast(0 as Float) as CollectValue
		,Cast(0 as Float) as RestValue
		,[P].[Date]
		,[P].[DueDate]
		,[P].[EndDueDate]
		,[P].[BankName]
		,[P].[Note]
		,[P].[Note3]
		,p.[beneficiary]
		,[P].[Guid]
		,[P].[CurrencyGuid] as [CheckCurrencyGuid]

		,[P].[Mark]
		,[p].[Deposition]
		,[C3].[Date] as [ReturnedDate]
		,DATEDIFF(DAY, [C3].[Date] , GETDATE()) as DayCount
		,[C3].ReturnCause
		,[C3].[FinishDate] as [ReturnedFinishDate]
		,[C3].[Finished] as [ReturnedFinished]
		,[C3].fixReturn
		,[C3].fixReturnNote
		,CAST(0x0 as uniqueidentifier) as BuildingGuid
		,CAST('' as varchar(255)) as BuildingName
		,CAST('' as varchar(255)) as UnitNo
--		,BuildingName,
	into #R_CheckReturn
	From
		[vwChecks] [P]
		inner join [Resource] [RS] on [RS].[Guid] = [P].[TypeGuid] and [RS].[Spid] = @@Spid and [RS].[Kind] = 3000
		inner join [vwChecksCollection] [C3] on [C3].[CheckGuid] = [P].[Guid] and [C3].[Kind] = 3
  	where
		(
			--([P].[Account] = @Account  and @AccountWith = 0) or
			([C3].[DebitAccountGuid] = @Account  and @AccountWith = 1) --ÇÑÌÇÚ
			Or @Account = 0x0
			or @AccountWith = 0
		)
		and
		(
			--([P].[obverseAccount] = @obverseAccount  and @AccountWith = 0) or
			([C3].[creditAccountGuid] = @obverseAccount  and @AccountWith = 1)
			Or @obverseAccount = 0x0
			or @AccountWith = 0
		)

 		and ([P].[beneficiary] = @beneficiary or @beneficiary = '')
  		and ([P].[BankName] = @BankName or @BankName = '')
 		and (
 				([P].[Date] Between @Date1 And @Date2 and @Datewith = 0)
 				or ([P].[DueDate] Between @Date1 And @Date2 and @Datewith = 1)
 				or ([C3].Date Between @Date1 And @Date2 and @Datewith = 2)
 				
 				or @CkDate = 0)
 		and (DATEDIFF(DAY, [C3].[Date] , GETDATE()) >= @DayCount or @DayCount = 0)
 		and (C3.fixReturn = @Fixreturn or @Fixreturn = 2)
 		and (IsNull([C3].ReturnCause,'') = @ReturnCause or @ReturnCause = '')
 		and (IsNull([C3].ReturnCause,'') <> @ExceptReturnCause or @ExceptReturnCause = '')
 		and	(   [C3].[Note] Like @FixReturnNote
 				or @ActiveFixReturnNote= 0
 			)
 		and (isNull(C3.Finished,0) = @ReturnFinish or @ReturnFinish = 2)


	Update #R_CheckReturn Set AccountName = dbo.SC('ÍÓÇÈÇÊ ãÊÚÏÏÉ'), 
				  AccountCode = dbo.SC('ÍÓÇÈÇÊ ãÊÚÏÏÉ')
	From
		#R_CheckReturn R
		inner join ChecksAccountDetail D on D.[ParentGuid] = R.Guid and Kind = 1


	Update #R_CheckReturn Set ObverseAccountName = dbo.SC('ÍÓÇÈÇÊ ãÊÚÏÏÉ'),
				  ObverseAccountCode = dbo.SC('ÍÓÇÈÇÊ ãÊÚÏÏÉ')
	From
		#R_CheckReturn R
		inner join ChecksAccountDetail D on D.[ParentGuid] = R.Guid and Kind = 2

	 if (@Account <> 0x0) and (@AccountWith = 0)
	 begin
		
		Select 
			Distinct [ParentGuid]
		into #ChecksAccountDetail1
		from 
			ChecksAccountDetail D
			inner join #R_CheckReturn R on D.[ParentGuid] = R.Guid and Kind = 1 and D.[AccountGuid] = @Account

		Delete #R_CheckReturn
		From
			#R_CheckReturn R
			left join #ChecksAccountDetail1 D on D.[ParentGuid] = R.Guid 
		where
			D.[ParentGuid] is Null
			and (R.AccountGuid <> @Account)
	 end

	 if (@obverseAccount <> 0x0) and (@AccountWith = 0)
	 begin
		Select 
			Distinct [ParentGuid]
		into #ChecksAccountDetail2
		from 
			ChecksAccountDetail D
			inner join #R_CheckReturn R on D.[ParentGuid] = R.Guid and Kind = 2 and D.[AccountGuid] = @obverseAccount

		Delete #R_CheckReturn
		From
			#R_CheckReturn R
			left join #ChecksAccountDetail2 D on D.[ParentGuid] = R.Guid 
		where
			D.[ParentGuid] is Null
			and (R.obverseAccountGuid <> @obverseAccount)
			
	 end

	Select 
		CheckGuid,
		Sum(Value) as [Value]
	into #ChecksPartialCollection_S
	from 
		ChecksPartialCollection
	Group by
		CheckGuid

	update #R_CheckReturn
	Set
		CollectValue = S.value
	From
		#R_CheckReturn C
		inner join #ChecksPartialCollection_S S on S.CheckGuid = C.Guid
		
	update #R_CheckReturn Set RestValue = value - isNull(CollectValue,0)		


	--ãÚÇáÌÉ ÇáÃÈäíÉ
	if @ActiveBuildingList = 1
	begin
		Update #R_CheckReturn 
		Set 
			BuildingGuid = C.BuildingGuid,
			BuildingName = C.BuildingName,
			UnitNo = C.FlatNo
		From
			#R_CheckReturn R
			inner join [LinkCheckContract] L on L.parentGuid = R.Guid
			inner join [vwLeaseApartment] C on C.Guid = L.ContractGuid
		
		--Select BuildingGuid, * from #R_CheckReturn
		
		Delete #R_CheckReturn where isNull(BuildingGuid,0x0) = 0x0
			
		Delete #R_CheckReturn
		From
			#R_CheckReturn [L]
			left join [Resource] [R] on [R].[Guid] = [L].[BuildingGuid] and [R].[Kind] = 99 and [R].[Spid] = @@Spid 
		where
			[R].[Guid] Is Null
			--and isNull(L.BuildingGuid,0x0) <> 0x0
	end

	Select 
		*,
		0 as Operation
	From
		#R_CheckReturn
 	order By
 		[ReturnedDate] ,[Date]
 		
 		

GO
/****** Object:  StoredProcedure [dbo].[PrcCheckSMS]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcCheckSMS]
(
	@SMSText varchar(256) = '[A]'
)
  
as
	Set NoCount on

	Select 
		T.[CustName],
		T.[CustMobile],
		[T].[CustArName],
		[T].[CustLtnName],
		[T].[BuildingArName],
		[T].[BuildingltnName],
		[T].[FlatNo],
		[C].[NO],
		[C].[Value],
		t.ContractNo,
		C.DueDate,
		C.date,
		C.endDueDate,
		C.BankName,
		L.Date as CollDate,
		RT.Date as ReturnDate,
		C.Guid,
		@SMSText as [SMSText]
	into #CheckSMS
	From
		[vwChecks] [C]
		inner join vwAllContract T on T.Guid = C.ContractGuid
		left join [ChecksCollection] L on L.CheckGuid = C.Guid and L.Kind = 1
		left join [ChecksCollection] Rt on RT.CheckGuid = C.Guid and Rt.Kind = 3
		inner join [Resource] R on R.Guid = C.Guid and R.kind = 3700 and R.Spid = @@Spid
	
	update #CheckSMS Set [SMSText] = REPLACE([SMSText], '[A]', IsNull([CustArName],''))
	update #CheckSMS Set [SMSText] = REPLACE([SMSText], '[B]', IsNull([CustLtnName],''))
	update #CheckSMS Set [SMSText] = REPLACE([SMSText], '[T]', IsNull([BuildingArName],''))
	update #CheckSMS Set [SMSText] = REPLACE([SMSText], '[R]', IsNull([BuildingltnName],''))
	update #CheckSMS Set [SMSText] = REPLACE([SMSText], '[C]', IsNull([FlatNo],''))
	update #CheckSMS Set [SMSText] = REPLACE([SMSText], '[D]', IsNull([NO],''))
	update #CheckSMS Set [SMSText] = REPLACE([SMSText], '[E]',IsNull( ContractNo,''))
	update #CheckSMS Set [SMSText] = REPLACE([SMSText], '[F]',IsNull( dbo.fndate(DueDate),''))
	update #CheckSMS Set [SMSText] = REPLACE([SMSText], '[G]',IsNull( dbo.fndate(Date),''))
	update #CheckSMS Set [SMSText] = REPLACE([SMSText], '[H]',IsNull( dbo.fndate(endDueDate),''))
	update #CheckSMS Set [SMSText] = REPLACE([SMSText], '[J]',IsNull( BankName,''))
	update #CheckSMS Set [SMSText] = REPLACE([SMSText], '[K]',IsNull( dbo.fndate(CollDate),''))
	update #CheckSMS Set [SMSText] = REPLACE([SMSText], '[L]',IsNull( dbo.fndate(ReturnDate),''))
	update #CheckSMS Set [SMSText] = REPLACE([SMSText], '[V]',IsNull( Cast ([Value] as varchar(20)),''))
	
	Select * from #CheckSMS
	order By
		duedate
	


GO
/****** Object:  StoredProcedure [dbo].[PrcComplaint]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcComplaint]
(
	@No Varchar(256) = '',
	@CustomerGuid uniqueidentifier = 0x0,
	@FlatGuid uniqueidentifier = 0x0,
	@ComplaintState int = 2,
	@Datewith int = 0,
	@ActiveDate Bit = 0,
	@Date1 DateTime = '1/1/2007',
	@Date2 DateTime = '1/1/2012',
	@OpNote int = 0,
	@ActiveNote bit = 1,
	@Note Varchar(256) = '',
	@ActiveBuildingList Bit = 1,
	@RealtyKind int = 6
)
  
as
	--ãÚÇáÌÉ ÈíÇä 
	if @OpNote = 0 or @OpNote = 1--íÍæí
	Set @Note = '%'+@Note+'%'

	Select 
		C.*
	From 
		[vwComplaint] C
		left join vwBuilding B on C.BuildingGuid = B.Guid
		left join [Resource] [R] on [R].[Guid] = C.BuildingGuid and [R].[Kind] = 94 and [R].[Spid] = @@Spid 
	where
		(C.No = @No or @No = '')

		and (C.CustGuid = @CustomerGuid or @CustomerGuid = 0x0)
		and (C.RealtyGuid = @FlatGuid or @FlatGuid = 0x0)
		and (C.RealtyKind = @RealtyKind or @RealtyKind = 6)
		and (C.ComplaintState = @ComplaintState or @ComplaintState = 2)
		and (C.Date between @Date1 and @Date2 or @Datewith = 1 or @ActiveDate = 0)
		and (C.CloseDate between @Date1 and @Date2 or @Datewith = 0 or @ActiveDate = 0)
		and (C.Note Like @Note or @OpNote = 1 or @ActiveNote = 0)
		and (C.Note not Like @Note or @OpNote = 0 or @OpNote = 2 or @ActiveNote = 0)
		and ([R].[Guid] Is Not Null or @ActiveBuildingList = 0 or @RealtyKind > 2)
	Order By
		C.Date, C.Number
		

GO
/****** Object:  StoredProcedure [dbo].[PrcContractCheckPayment]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcContractCheckPayment]
(
	@CustGuid uniqueidentifier = 0x0
	,@Nationality Varchar(256) = ''
	,@Purpose Varchar(256) = ''
	,@Emirate Varchar(256) = ''
	,@Suburb Varchar(256) = ''
	,@Area Varchar(256) = ''
	,@Street Varchar(256) = ''
	,@FlatKind Varchar(256) = ''
	,@ApartmentType Varchar(256) = ''
	,@ContractState int = 1
	,@Judicial int = 2
	,@PayType int = 4
	,@Datewith int = 0
	,@Date1 DateTime = '12/30/1899'
	,@Date2 DateTime = '12/30/2016'
	,@RentInfoGuid uniqueidentifier = 0x0
	,@SalesManGuid uniqueidentifier = 0x0
	,@ShowIsCheck Bit = 1
	,@ShowIsNotCheck Bit = 1
	,@CKDate Bit = 0
	,@EndState int = 2
	,@NewState int = 2
	,@Mark Bit = 1
	,@NotMark Bit = 1
	,@AutoRenewal int = 2
	,@AcquittancePrinted int = 2
	,@AcquittancePrintedByUserGuid uniqueidentifier = 0x0
	,@LinkCheck int = 2
	,@FldCurrentContract bit = 1
	,@BanRealty int = 0
	,@whereabouts varchar(255) = ''
	,@Trademark varchar(255) = ''
	,@FinishDate int = 3
)
  
as
	Set noCount on
	Declare @Tbl Table
	(
		[ContractNo] Varchar(256)
		,[FlatNo] Varchar(256)
		,[BuildingName] Varchar(256)
		,[Value] Float
		,[Discount] Float
		,[ValueAfterDiscount] Float
		,[FlatKind] Varchar(256)
		,[FlatType] Varchar(256)
		,[FlatArea] Varchar(256)
		,[ContractState] Varchar(256)
		,[Emirate] Varchar(256)
		,[Suburb] Varchar(256)
		,[Area] Varchar(256)
		,[Street] Varchar(256)
		,[FloorNo] Varchar(256)
		,[CustName] Varchar(256)
		,[CustPhone] Varchar(256)
		,[CustNationality] Varchar(256)
		,[CustEMail] Varchar(256)
		,[ContractDateEdit] Datetime
		,[ContractDeliverDate] Datetime
		,[ContractDateBegin] Datetime
		,[ContractDateEnd] Datetime
		,[ContractType] Varchar(256)
		,[ContractFinish] Bit
		,[ContractGuid] uniqueidentifier
		,[NewState] int

		,[RentMan] Varchar(256)
		,[SalesMan] Varchar(256)
		,[ContractFinishDate] Datetime
		,[ResultingAmount] Float
		,[ResultingAmount2] Float
		,[Fine] Float
		,[TotalIncom] Float
		,[TotalInsuranse] Float
		,[RentCleanValue] Float
		,[Note2] Varchar(1000)
		,[Purpose] Varchar(256)
		,Trademark Varchar(256)
		
		,[CountOldContract] int
		,[CountCurrentContract] int
		
		,[AcquittancePrinted] Bit
		,[AcquittancePrintdate] Datetime
		,[AcquittancePrintedBy] Varchar(256)
		,[CostGuid] uniqueidentifier
		,[AccountGuid] uniqueidentifier
		,[Judicial] Bit
		,[Mark] Bit
		,[isAutoRenewal] Bit
		,[PrvContractFinishDate] Datetime
		,[PrvContractEndDate] Datetime
		,[Kind] Int
		,[Sort] int
	)

	Declare  @Now_Date Datetime
	Set @Now_Date = GetDate()
	
	-- ÇáÚÞæÏ ÇáÓÇÈÞÉ
	Create Table #CurrentContract
	(
		CustomerGuid uniqueidentifier,
		ApartmentGuid uniqueidentifier,
		[ContractCount] int
	)
	
	if @FldCurrentContract = 1
	begin
		insert into #CurrentContract
		Select 
			CustomerGuid,
			ApartmentGuid,
			IsNull(COUNT(*),0) as [ContractCount]
		From 
			[LeaseApartment]
		Group By
			CustomerGuid,
			ApartmentGuid
	end
	
	--Building
	Select
		*
	Into #Building_CL
	From
		[vwBuilding] B
	where
		([B].[Emirate] = @Emirate or @Emirate = '')
		and ([B].[Suburb] = @Suburb or @Suburb = '')
		and ([B].[Area] = @Area or @Area = '')
		and ([B].[Street] = @Street or @Street = '')
		
	
	
    select Distinct
		ContractKind
	into #Resource_Type
	From
		ContractType T
		inner join [Resource] [R2] on [R2].[Guid] = [T].[Guid]  and [R2].[Kind] = 100 and [R2].[spid] = @@Spid 
		
	
	--return
		

	--Select * from #Building_CL
		
	--[vwLeaseApartment]
	Declare @p_RentFlat bit,
			@p_RentShop bit,
			@p_SaleFlat bit,
			@p_SaleShop bit,
			@p_RentParking bit,
			@p_SaleParking bit,
			@p_SaleLand bit,
			@p_RentLand bit,
			@p_SaleVilla bit,
			@p_RentVilla bit
			
	if exists(Select * From #Resource_Type where ContractKind = 0)
	Set @p_RentFlat = 1 else Set @p_RentFlat = 0
	
	if exists(Select * From #Resource_Type where ContractKind = 1)
	Set @p_RentShop = 1 else Set @p_RentShop = 0 

	if exists(Select * From #Resource_Type where ContractKind = 2)
	Set @p_SaleFlat = 1 else Set @p_SaleFlat = 0 

	if exists(Select * From #Resource_Type where ContractKind = 3)
	Set @p_SaleShop = 1 else Set @p_SaleShop = 0 

	if exists(Select * From #Resource_Type where ContractKind = 4)
	Set @p_RentParking = 1 else Set @p_RentParking = 0 

	if exists(Select * From #Resource_Type where ContractKind = 5)
	Set @p_SaleParking = 1 else Set @p_SaleParking = 0 

	if exists(Select * From #Resource_Type where ContractKind = 6)
	Set @p_SaleLand = 1 else Set @p_SaleLand = 0 

	if exists(Select * From #Resource_Type where ContractKind = 7)
	Set @p_RentLand = 1 else Set @p_RentLand = 0 

	if exists(Select * From #Resource_Type where ContractKind = 8)
	Set @p_SaleVilla = 1 else Set @p_SaleVilla = 0 

	if exists(Select * From #Resource_Type where ContractKind = 9)
	Set @p_RentVilla = 1 else Set @p_RentVilla = 0 
	
	Select
		L.*
		,T.Name as ContractName
		,[L].[Judicial] as [ContractJudicial]
		,(Select [ContractFinishDate] from [LeaseApartment] where Guid = L.[PrvContractGuid]) as [PrvContractFinishDate]
		,(Select [ToDate] from [LeaseApartment] where Guid = L.[PrvContractGuid]) as [PrvContractEndDate]
		,U.LoginName as [AcquittancePrintedBy]
		,S.Name as [SalesMan]
	into #LeaseApartment_CL
	From
		[LeaseApartment] L
		inner join ContractType T on T.Guid = L.TypeGuid
		inner join [Resource] [R2] on [R2].[Guid] = [L].[TypeGuid]  and [R2].[Kind] = 100 and [R2].[spid] = @@Spid 
		left join [Realty_Users] U on U.[Guid] = L.AcquittancePrintedByGuid
		left join Salesman S on S.Guid = L.SalesManGuid
	where
		([L].[CustomerGuid] = @CustGuid or @CustGuid = 0x0)
		and ([L].[RentInfoGuid] = @RentInfoGuid or @RentInfoGuid = 0x0)
		and ([L].[SalesManGuid] = @SalesManGuid or @SalesManGuid = 0x0)
		and ([L].[ContractFinish] = @EndState or @EndState = 2)
		and (
				([l].[Mark] = 1 and @Mark = 1)
				or ([l].[Mark] = 0 and @NotMark = 1)
			)
		and (L.PayType = @PayType or @PayType  = 4)
		and (isNull([L].[Judicial],0) = @Judicial or @Judicial = 2)
		and (L.Purpose = @Purpose or @Purpose = '')
		and (L.Trademark = @Trademark or @Trademark = '')
		and (L.AcquittancePrintedByGuid = @AcquittancePrintedByUserGuid or @AcquittancePrintedByUserGuid = 0x0)
		
		and (@p_RentFlat = 1 or @p_RentShop = 1 or @p_SaleFlat = 1 or @p_SaleShop = 1)
		and (isNull(L.isAutoRenewal,0) = @AutoRenewal or @AutoRenewal = 2)
		and (L.whereabouts = @whereabouts or @whereabouts = '')
		and (
				(
					(
					([ContractFinishDate] < [ToDate] and @FinishDate = 0) or
					([ContractFinishDate] > [ToDate] and @FinishDate = 1) or
					([ContractFinishDate] = [ToDate] and @FinishDate = 2) 
					)
				and [ContractFinish] = 1
				)
				or @FinishDate = 3
			)
	
	--Select * from #LeaseApartment_CL
	
	Select * into #LeaseApartment_Rent from #LeaseApartment_CL L
	where
			(
				((([L].[ToDate] <= @Now_Date) or ([L].[ContractFinish] = 1)) and @ContractState = 0)
			  	or ([L].[ToDate] > @Now_Date and @ContractState = 1)
				or @ContractState = 2
			)		
			and (
				(
					([L].[FromDate] >= @Date1 and @Datewith  = 0)
					and ([L].[FromDate] <= @Date2 and @Datewith  = 0 or @Date2 = '12/30/1899')
				)
				or
				(
					([L].[ToDate] >= @Date1 and @Datewith  = 1)
					and ([L].[ToDate] <= @Date2 and @Datewith  = 1 or @Date2 = '12/30/1899')
				)

				or
				(
					([L].[ContractFinishDate] >= @Date1 and @Datewith  = 2)
					and ([L].[ContractFinishDate] <= @Date2 and @Datewith  = 2 or @Date2 = '12/30/1899')
					and ([L].[ContractFinish] = 1)
				)

				or
				(
					([L].[EditDate] >= @Date1 and @Datewith  = 3)
					and ([L].[EditDate] <= @Date2 and @Datewith  = 3 or @Date2 = '12/30/1899')
				)
				or
				(
					([L].[AcquittancePrintdate] >= @Date1 and @Datewith  = 4)
					and ([L].[AcquittancePrintdate] <= @Date2 and @Datewith  = 4 or @Date2 = '12/30/1899')
				)

				or
				(
					([L].LeaveDate >= @Date1 and @Datewith  = 5)
					and ([L].LeaveDate <= @Date2 and @Datewith  = 5 or @Date2 = '12/30/1899')
				)

				or
				(
					([L].DeliverDate >= @Date1 and @Datewith  = 6)
					and ([L].DeliverDate <= @Date2 and @Datewith  = 6 or @Date2 = '12/30/1899')
				)

				or @CKDate = 0
			) 
		and (L.AcquittancePrinted = @AcquittancePrinted or @AcquittancePrinted = 2)			

	--Select * from #LeaseApartment_Rent return	
	-- ÇáãÄÌÑ	
	Select * into #RentInfo_CL from [RentInfo] where Guid = @RentInfoGuid or @RentInfoGuid = 0x0
	
	--Customer 
	Select
		*
	into #Customer
	From
		vwCustomer
	where
		([Guid] = @CustGuid or @CustGuid = 0x0)
		and ([Nationality] = @Nationality or @Nationality = '')
		
    
   --Select * from #LeaseApartment_CL where [ContractJudicial] = 1
    
	--ÇíÌÇÑ ÇáÔÞÞ	
	if @p_RentFlat = 1
	Insert into @Tbl 
	Select 
		[L].[ContractNo]
		,[A].[No] as [FlatNo]
		,[B].[Name] as [BuildingName]
		,[L].[Rent]
		,[L].[DiscountValue]
		,[L].[Rent] - [L].[DiscountValue]
		,[A].[FlatKind] as [FlatKind]
		,[A].[ApartmentType] as [FlatType]
		,[A].[Area] as [FlatArea]
		,Case when ([L].[ToDate] <= @Now_Date) or ([L].[ContractFinish] = 1) then dbo.sc('ãäÊåí ÇáãÏÉ')  
			  when [L].[ToDate] > @Now_Date then dbo.sc('ÛíÑ ãäÊåí ÇáãÏÉ') end as [ContractState]
		,[B].[Emirate] as [Emirate]
		,[B].[Suburb] as [Suburb]
		,[B].[Area] as [Area]
		,[B].[Street] as [Street]
		,[A].[FloorNo]
		,[Cu].[Name] as [CustName]
		,[Cu].[Mobile] as [CustPhone]
		,[Cu].Nationality
		,Cu.EMail as CustEMail
		,[L].[EditDate] as [ContractDateEdit]
		,[L].[DeliverDate] as [ContractDeliverDate]
		,[L].[FromDate] as [ContractDateBegin]
		,[L].[ToDate] as [ContractDateEnd]
		,[L].[ContractName]
		,[L].[ContractFinish]
		,[L].[Guid] as [ContractGuid]
		,[L].[NewState] 

		,[I].[Name]	
		,L.[SalesMan]
		,[ContractFinishDate]
		,[ResultingAmount]
		,[ResultingAmount2]
		,[Fine]
		,[ResultingAmount2] + [Fine] + [OtherFee]
		,[InsuranceValueOld] + [InsuranceValue]
		,[ResultingAmount] + [InsuranceValueOld] + [InsuranceValue] - [Fine] as [RentCleanValue]
		,[Note2] 
		,L.[Purpose]
		,L.Trademark
		,l.[CountOldContract]
		,(Select [ContractCount] From #CurrentContract where L.CustomerGuid = CustomerGuid and [L].ApartmentGuid = ApartmentGuid)as [CurrentContract]
		,l.AcquittancePrinted
		,L.AcquittancePrintDate
		,L.[AcquittancePrintedBy]
		,[L].[CostGuid]
		,L.[CustAccountGuid]
		,L.[ContractJudicial]
		,[L].[Mark]
		,[L].[isAutoRenewal]
		,L.[PrvContractFinishDate]
		,L.[PrvContractEndDate]

		,0 as [Kind]
		,0 as [Sort]
	from 
		#Building_CL [B]
		Inner join [vbApartment] [A] On [A].[BuildingGuid] = [B].[Guid]
		Inner join #LeaseApartment_Rent [L] On [A].[Guid] = [L].[ApartmentGuid] and [LeaseKind]  = 0
		inner join [Resource] [R] on [R].[Guid] = [B].[Guid]  and [R].[Kind] = 101 and [R].[spid] = @@Spid 
		--inner join [vwContractType] [T] on [T].[Guid] = [L].[TypeGuid]  
		--inner join [Resource] [R2] on [R2].[Guid] = [T].[Guid]  and [R2].[Kind] = 100 and [R2].[spid] = @@Spid 
		Inner join [#Customer] [Cu] on [Cu].[Guid] = [L].[CustomerGuid] 
		left join #RentInfo_CL [I] on [I].[Guid] = [L].[RentInfoGuid]
	where
		([A].[FlatKind] = @FlatKind or @FlatKind = '')
		and ([A].[ApartmentType] = @ApartmentType or @ApartmentType = '')
		and (A.Ban = @banRealty or @banRealty = 2)
		
	--ÇíÌÇÑ ãÍá	
	if @p_RentShop = 1
	Insert into @Tbl 
	Select 
		[L].[ContractNo]
		,[A].[No] as [FlatNo]
		,[B].[Name] as [BuildingName]
		,[L].[Rent]
		,[L].[DiscountValue]
		,[L].[Rent] - [L].[DiscountValue]
		,[ShopKind] as [FlatKind]
		,A.[Description] as [FlatType]
		,[A].[Area] as [FlatArea]
		,Case when ([L].[ToDate] <= GetDate()) or ([L].[ContractFinish] = 1) then dbo.sc('ãäÊåí ÇáãÏÉ')  
			  when [L].[ToDate] > GetDate() then dbo.sc('ÛíÑ ãäÊåí ÇáãÏÉ') end as [ContractState]
		,[B].[Emirate] as [Emirate]
		,[B].[Suburb] as [Suburb]
		,[B].[Area] as [Area]
		,[B].[Street] as [Street]
		,'' as [FloorNo]
		,[Cu].[Name] as [CustName]
		,[Cu].[Mobile] as [CustPhone]
		,[Cu].Nationality
		,Cu.EMail as CustEMail
		,[L].[EditDate] as [ContractDateEdit]
		,[L].[DeliverDate] as [ContractDeliverDate]
		,[L].[FromDate] as [ContractDateBegin]
		,[L].[ToDate]as [ContractDateEnd]
		,[L].[ContractName]
		,[L].[ContractFinish]
		,[L].[Guid] as [ContractGuid]
		,[L].[NewState] 

		,[I].[Name]	
		,L.[SalesMan]
		,[ContractFinishDate]
		,[ResultingAmount]
		,[ResultingAmount2]
		,[Fine]
		,[ResultingAmount2] + [Fine] + [OtherFee]
		,[InsuranceValueOld] + [InsuranceValue]
		,[ResultingAmount] + [InsuranceValueOld] + [InsuranceValue] - [Fine]
		,Left([L].[Note2],255)
		,L.[Purpose]
		,L.Trademark
		,L.[CountOldContract]
		,(Select [ContractCount] From #CurrentContract where L.CustomerGuid = CustomerGuid and [L].ApartmentGuid = ApartmentGuid)as [CurrentContract]
		,l.[AcquittancePrinted]
		,L.AcquittancePrintDate
		,L.[AcquittancePrintedBy]
		,[L].[CostGuid]
		,L.[CustAccountGuid]
		,L.[ContractJudicial]
		,[L].[mark]
		,[L].[isAutoRenewal]
		,L.[PrvContractFinishDate]
		,l.[PrvContractEndDate]
		,1 as [Kind]
		,0 as [Sort]
	from 
		#Building_CL [B]
		Inner join [vwShopall] [A] On [A].[BuildingGuid] = [B].[Guid]
		inner join #LeaseApartment_Rent [L] On [A].[Guid] = [L].[ApartmentGuid] and [LeaseKind]  = 1
		Inner join [Resource] [R] on [R].[Guid] = [B].[Guid]  and [R].[Kind] = 101 and [R].[spid] = @@Spid 
		--inner  join [vwContractType] [T] on [T].[Guid] = [L].[TypeGuid]  
		--Inner join [Resource] [R2] on [R2].[Guid] = [T].[Guid]  and [R2].[Kind] = 100 and [R2].[spid] = @@Spid 
		inner  join [#Customer] [Cu] on [Cu].[Guid] = [L].[CustomerGuid] 
		left  join #RentInfo_CL [I] on [I].[Guid] = [L].[RentInfoGuid]
		and (A.Ban = @banRealty or @banRealty = 2)

	--ÈíÚ ÔÞÉ
	if @p_SaleFlat = 1
	Insert into @Tbl 
	Select 
		[L].[ContractNo]
		,[A].[No] as [FlatNo]
		,[B].[Name] as [BuildingName]
		,[L].[Rent]
		,[L].[DiscountValue]
		,[L].[Rent] - [L].[DiscountValue]
		,[A].[FlatKind] as [FlatKind]
		,[A].[ApartmentType] as [FlatType]
		,[A].[Area] as [FlatArea]
		,Case when ([L].[ToDate] <= GetDate()) or ([L].[ContractFinish] = 1) then dbo.sc('ãäÊåí ÇáãÏÉ')  
			  when [L].[ToDate] > GetDate() then dbo.sc('ÛíÑ ãäÊåí ÇáãÏÉ') end as [ContractState]
		,[B].[Emirate] as [Emirate]
		,[B].[Suburb] as [Suburb]
		,[B].[Area] as [Area]
		,[B].[Street] as [Street]
		,[A].[FloorNo]
		,[Cu].[Name] as [CustName]
		,[Cu].[Mobile] as [CustPhone]
		,[Cu].[Nationality]
		,Cu.EMail as CustEMail
		,[L].[EditDate] as [ContractDateEdit]
		,[L].[DeliverDate] as [ContractDeliverDate]
		,[L].[FromDate] as [ContractDateBegin]
		,[L].[ToDate]as [ContractDateEnd]
		,[L].[ContractName]
		,Null as [ContractFinish]
		,[L].[Guid] as [ContractGuid]
		,-1 as [NewState] 

		,[I].[Name]	
		,L.[SalesMan]
		,[ContractFinishDate]
		,[ResultingAmount]
		,[ResultingAmount2]
		,[Fine]
		,[ResultingAmount2] + [Fine] + [OtherFee]
		,[InsuranceValueOld] + [InsuranceValue]
		,[ResultingAmount] + [InsuranceValueOld] + [InsuranceValue] - [Fine]
		,[Note2] 
		,L.[Purpose]
		,L.Trademark
		,L.[CountOldContract]
		,(Select [ContractCount] From #CurrentContract where L.CustomerGuid = CustomerGuid and [L].ApartmentGuid = ApartmentGuid)as [CurrentContract]
		,l.[AcquittancePrinted]
		,L.AcquittancePrintDate
		,L.[AcquittancePrintedBy]
		,[L].[CostGuid]
		,L.[CustAccountGuid]
		,L.[ContractJudicial]
		,[L].[Mark]
		,[L].[isAutoRenewal]
		,L.[PrvContractFinishDate]
		,L.[PrvContractEndDate]
		,2 as [Kind]
		,0 as [Sort]
	from 
		#Building_CL [B]
		Inner join [vwApartmentall] [A] On [A].[BuildingGuid] = [B].[Guid]
		Inner join #LeaseApartment_CL [L] On [A].[Guid] = [L].[ApartmentGuid] and [LeaseKind]  = 2
		Inner join [Resource] [R] on [R].[Guid] = [B].[Guid]  and [R].[Kind] = 101 and [R].[spid] = @@Spid 
		--inner join [vwContractType] [T] on [T].[Guid] = [L].[TypeGuid]  
		--Inner join [Resource] [R2] on [R2].[Guid] = [T].[Guid]  and [R2].[Kind] = 100 and [R2].[spid] = @@Spid 
		Inner join [#Customer] [Cu] on [Cu].[Guid] = [L].[CustomerGuid] 
		left join #RentInfo_CL [I] on [I].[Guid] = [L].[RentInfoGuid]
	where
		([A].[FlatKind] = @FlatKind or @FlatKind = '')
		and ([A].[ApartmentType] = @ApartmentType or @ApartmentType = '')
		and (
				(
					([L].[FromDate] >= @Date1 and @Datewith  = 0)
					and ([L].[FromDate] <= @Date2 and @Datewith  = 0 or @Date2 = '12/30/1899')
					
				)
				
				or
				(
					([L].[EditDate] >= @Date1 and @Datewith  = 3)
					and ([L].[EditDate] <= @Date2 and @Datewith  = 3 or @Date2 = '12/30/1899')
				)
				or
				(
					([L].[AcquittancePrintdate] >= @Date1 and @Datewith  = 4)
					and ([L].[AcquittancePrintdate] <= @Date2 and @Datewith  = 4 or @Date2 = '12/30/1899')
				)
				
				or
				(
					([L].LeaveDate >= @Date1 and @Datewith  = 5)
					and ([L].LeaveDate <= @Date2 and @Datewith  = 5 or @Date2 = '12/30/1899')
				)

				or
				(
					([L].DeliverDate >= @Date1 and @Datewith  = 6)
					and ([L].DeliverDate <= @Date2 and @Datewith  = 6 or @Date2 = '12/30/1899')
				)

				or @CKDate = 0
			) 
		and (@EndState = 2)
		and (L.AcquittancePrinted = @AcquittancePrinted or @AcquittancePrinted = 2)
		and (A.Ban = @banRealty or @banRealty = 2)

	
	--ÈíÚ ãÍá
	if @p_SaleShop = 1
	Insert into @Tbl 
	Select 
		[L].[ContractNo]
		,[A].[No] as [FlatNo]
		,[B].[Name] as [BuildingName]
		,[L].[Rent]
		,[L].[DiscountValue]
		,[L].[Rent] - [L].[DiscountValue]
		,[ShopKind] as [FlatKind]
		,A.[Description] as [FlatType]
		,[A].[Area] as [FlatArea]
		,Case when ([L].[ToDate] <= GetDate()) or ([L].[ContractFinish] = 1) then dbo.sc('ãäÊåí ÇáãÏÉ')  
			  when [L].[ToDate] > GetDate() then dbo.sc('ÛíÑ ãäÊåí ÇáãÏÉ') end as [ContractState]
		,[B].[Emirate] as [Emirate]
		,[B].[Suburb] as [Suburb]
		,[B].[Area] as [Area]
		,[B].[Street] as [Street]
		,'' as [FloorNo]
		,[Cu].[Name] as [CustName]
		,[Cu].[Mobile] as [CustPhone]
		,[Cu].[Nationality]
		,Cu.EMail as CustEMail
		,[L].[EditDate] as [ContractDateEdit]
		,[L].[DeliverDate] as [ContractDeliverDate]
		,[L].[FromDate] as [ContractDateBegin]
		,[L].[ToDate]as [ContractDateEnd]
		,[L].[ContractName]
		,Null as [ContractFinish]
		,[L].[Guid] as [ContractGuid]
		,-1 as [NewState] 

		,[I].[Name]	
		,L.[SalesMan]
		,[ContractFinishDate]
		,[ResultingAmount]
		,[ResultingAmount2]
		,[Fine]
		,[ResultingAmount2] + [Fine] + [OtherFee]
		,[InsuranceValueOld] + [InsuranceValue]
		,[ResultingAmount] + [InsuranceValueOld] + [InsuranceValue] - [Fine]
		,[Note2] 
		,L.[Purpose]
		,L.Trademark
		,L.[CountOldContract]
		,(Select [ContractCount] From #CurrentContract where L.CustomerGuid = CustomerGuid and [L].ApartmentGuid = ApartmentGuid)as [CurrentContract]
		,l.[AcquittancePrinted]
		,L.AcquittancePrintDate
		,l.[AcquittancePrintedBy]
		,[L].[CostGuid]
		,L.[CustAccountGuid]
		,L.[ContractJudicial]
		,[L].[Mark]
		,[L].[isAutoRenewal]
		,L.[PrvContractFinishDate]
		,L.[PrvContractEndDate]
		,3 as [Kind]
		,0 as [Sort]
	from 
		#Building_CL [B]
		Inner join [vwShopAll] [A] On [A].[BuildingGuid] = [B].[Guid]
		Inner join #LeaseApartment_CL [L] On [A].[Guid] = [L].[ApartmentGuid] and [LeaseKind]  = 3
		Inner join [Resource] [R] on [R].[Guid] = [B].[Guid]  and [R].[Kind] = 101 and [R].[spid] = @@Spid 
		--inner join [vwContractType] [T] on [T].[Guid] = [L].[TypeGuid]  
		--Inner join [Resource] [R2] on [R2].[Guid] = [T].[Guid]  and [R2].[Kind] = 100 and [R2].[spid] = @@Spid 
		Inner join [#Customer] [Cu] on [Cu].[Guid] = [L].[CustomerGuid] 
		left join #RentInfo_CL [I] on [I].[Guid] = [L].[RentInfoGuid]
	where
		(
				(
					([L].[FromDate] >= @Date1 and @Datewith  = 0)
					and ([L].[FromDate] <= @Date2 and @Datewith  = 0 or @Date2 = '12/30/1899')
				)
				or
				(
					([L].[EditDate] >= @Date1 and @Datewith  = 3)
					and ([L].[EditDate] <= @Date2 and @Datewith  = 3 or @Date2 = '12/30/1899')
				)
				
				or
				(
					([L].[AcquittancePrintdate] >= @Date1 and @Datewith  = 4)
					and ([L].[AcquittancePrintdate] <= @Date2 and @Datewith  = 4 or @Date2 = '12/30/1899')
				)
				
				or
				(
					([L].LeaveDate >= @Date1 and @Datewith  = 5)
					and ([L].LeaveDate <= @Date2 and @Datewith  = 5 or @Date2 = '12/30/1899')
				)

				or
				(
					([L].DeliverDate >= @Date1 and @Datewith  = 6)
					and ([L].DeliverDate <= @Date2 and @Datewith  = 6 or @Date2 = '12/30/1899')
				)
				or @CKDate = 0
			) 

		and (@EndState = 2)
		and (L.AcquittancePrinted = @AcquittancePrinted or @AcquittancePrinted = 2)
		and (A.Ban = @banRealty or @banRealty = 2)


	--ãæÞÝ
	if (@AcquittancePrinted = 2) and (@Purpose = '') and (@p_RentParking = 1) and ( @Trademark = '')
	Insert into @Tbl 
	Select 
		[L].[ContractNo]
		,[A].[No] as [FlatNo]
		,[B].[Name] as [BuildingName]
		,[L].[Rent]
		,0 as [DiscountValue]
		,[L].[Rent] - 0
		,[ParkingKind] as [FlatKind]
		,A.[Description] as [FlatType]
		,[A].[Area] as [FlatArea]
		,Case when ([L].[ToDate] <= GetDate()) or ([L].[ContractFinish] = 1) then dbo.sc('ãäÊåí ÇáãÏÉ')  
			  when [L].[ToDate] > GetDate() then dbo.sc('ÛíÑ ãäÊåí ÇáãÏÉ') end as [ContractState]
		,[B].[Emirate] as [Emirate]
		,[B].[Suburb] as [Suburb]
		,[B].[Area] as [Area]
		,[B].[Street] as [Street]
		,[A].[FloorNo]
		,[Cu].[Name] as [CustName]
		,[Cu].[Mobile] as [CustPhone]
		,[Cu].[Nationality]
		,Cu.EMail as CustEMail
		,[L].[EditDate] as [ContractDateEdit]
		,[L].[DeliverDate] as [ContractDeliverDate]
		,[L].[FromDate] as [ContractDateBegin]
		,[L].[ToDate]as [ContractDateEnd]
		,[T].[Name]
		,[L].[ContractFinish]
		,[L].[Guid] as [ContractGuid]
		,[L].[NewState] 

		,[I].[Name]	
		,S.Name as [SalesMan]	
		,[ContractFinishDate]
		,[ResultingAmount]
		,0 as [ResultingAmount2]
		,[Fine]
		,[Fine]
		,[InsuranceValueOld] + [InsuranceValue]
		,[ResultingAmount] + [InsuranceValueOld] + [InsuranceValue] - [Fine]
		,[Note2] 
		,''
		,''
		,0 as [CountOldContract]
		,0
		,0 as [AcquittancePrinted]
		,Null as AcquittancePrintDate
		,Null as [AcquittancePrintedBy]
		,[L].[CostGuid]
		,L.[CustAccountGuid]
		,L.[Judicial]
		,[L].[Mark]
		,[L].[isAutoRenewal]
		,(Select [ContractFinishDate] from ParkingContract where Guid = L.[PrvContractGuid]) as [PrvContractFinishDate]
		,(Select [ToDate] from ParkingContract where Guid = L.[PrvContractGuid]) as [PrvContractEndDate]

		,[R2].[spid]
		,0 as [Sort]
	from 
		#Building_CL [B]
		Inner join [vwParkingAll] [A] On [A].[BuildingGuid] = [B].[Guid]
		Inner join [vwParkingContract] [L] On [A].[Guid] = [L].[ParkingGuid]
		Inner join [Resource] [R] on [R].[Guid] = [B].[Guid]  and [R].[Kind] = 101 and [R].[spid] = @@Spid 
		inner join [vwContractType] [T] on [T].[Guid] = [L].[TypeGuid]  
		Inner join [Resource] [R2] on [R2].[Guid] = [T].[Guid]  and [R2].[Kind] = 100 and [R2].[spid] = @@Spid 
		Inner join [#Customer] [Cu] on [Cu].[Guid] = [L].[CustomerGuid] 
		left join #RentInfo_CL [I] on [I].[Guid] = [L].[RentInfoGuid]
		left join Salesman S on S.Guid = L.SalesManGuid
	where
		([L].[CustomerGuid] = @CustGuid or @CustGuid = 0x0)
		and 
			(
				((([L].[ToDate] <= GetDate()) or ([L].[ContractFinish] = 1)) and @ContractState = 0)
			  	or ([L].[ToDate] > GetDate() and @ContractState = 1)
				or @ContractState = 2
			)

		and (
				(
					([L].[FromDate] >= @Date1 and @Datewith  = 0)
					and ([L].[FromDate] <= @Date2 and @Datewith  = 0 or @Date2 = '12/30/1899')
				)
				or
				(
					([L].[ToDate] >= @Date1 and @Datewith  = 1)
					and ([L].[ToDate] <= @Date2 and @Datewith  = 1 or @Date2 = '12/30/1899')
				)

				or
				(
					([L].[ContractFinishDate] >= @Date1 and @Datewith  = 2)
					and ([L].[ContractFinishDate] <= @Date2 and @Datewith  = 2 or @Date2 = '12/30/1899')
					and ([L].[ContractFinish] = 1)
				)

				or
				(
					([L].[EditDate] >= @Date1 and @Datewith  = 3)
					and ([L].[EditDate] <= @Date2 and @Datewith  = 3 or @Date2 = '12/30/1899')
				)
				and @Datewith  <> 4 and @Datewith  <> 5

				or
				(
					([L].DeliverDate >= @Date1 and @Datewith  = 6)
					and ([L].DeliverDate <= @Date2 and @Datewith  = 6 or @Date2 = '12/30/1899')
				)

				or @CKDate = 0
			)

		and ([L].[RentInfoGuid] = @RentInfoGuid or @RentInfoGuid = 0x0)
		and ([L].[SalesManGuid] = @SalesManGuid or @SalesManGuid = 0x0)

		and ([L].[ContractFinish] = @EndState or @EndState = 2)
		and (
				([l].[Mark] = 1 and @Mark = 1)
				or ([l].[Mark] = 0 and @NotMark = 1)
			)
		and (L.PayType = @PayType or @PayType  = 4)
		and ([L].[Judicial] = @Judicial or @Judicial = 2)
		and (L.isAutoRenewal = @AutoRenewal or @AutoRenewal = 2)
		and (A.Ban = @banRealty or @banRealty = 2)
		and (
				(
					(
					([ContractFinishDate] < [ToDate] and @FinishDate = 0) or
					([ContractFinishDate] > [ToDate] and @FinishDate = 1) or
					([ContractFinishDate] = [ToDate] and @FinishDate = 2) 
					)
				and [ContractFinish] = 1
				)
				or @FinishDate = 3
			)

	--ÇáÃÑÖ
	if (@p_RentLand = 1 or @p_SaleLand = 1)
	Insert into @Tbl 
	Select 
		[L].[ContractNo]
		,[A].[Name] as [FlatNo]
		,'' as [BuildingName]
		,[L].[Rent]
		,[L].[DiscountValue]
		,[L].[Rent] - [L].[DiscountValue]
		,'' as [FlatKind]
		,'' as [FlatType]
		,[A].[Area] as [FlatArea]
		,Case when ([L].[ToDate] <= GetDate()) or ([L].[ContractFinish] = 1) then dbo.sc('ãäÊåí ÇáãÏÉ')  
			  when [L].[ToDate] > GetDate() then dbo.sc('ÛíÑ ãäÊåí ÇáãÏÉ') end as [ContractState]
		,'' as [Emirate]
		,'' as [Suburb]
		,'' as [Area]
		,'' as [Street]
		,'' as [FloorNo]
		,[Cu].[Name] as [CustName]
		,[Cu].[Mobile] as [CustPhone]
		,[Cu].[Nationality] 
		,Cu.EMail as CustEMail
		,[L].[EditDate] as [ContractDateEdit]
		,[L].[DeliverDate] as [ContractDeliverDate]
		,[L].[FromDate] as [ContractDateBegin]
		,[L].[ToDate] as [ContractDateEnd]
		,[T].[Name]
		,[ContractFinish]
		,[L].[Guid] as [ContractGuid]
		,[L].[NewState]
		,[I].[Name]
		,S.Name as [SalesMan]
		,[ContractFinishDate]
		,[ResultingAmount]
		,[ResultingAmount2]
		,[Fine]
		,[ResultingAmount2] + [Fine] + [OtherFee]
		,[InsuranceValueOld] + [InsuranceValue]
		,[ResultingAmount] + [InsuranceValueOld] + [InsuranceValue] - [Fine]
		,[Note2] 
		,L.[Purpose]
		,'' as Trademark 
		,0 as [CountOldContract]
		,0
		,l.[AcquittancePrinted]
		,L.AcquittancePrintDate
		,u.LoginName as [AcquittancePrintedBy]
		,[L].[CostGuid]
		,L.[CustAccountGuid]
		,L.[Judicial]
		,[L].[Mark]
		,[L].[isAutoRenewal]
		,(Select [ContractFinishDate] from [LandContract] where Guid = L.[PrvContractGuid]) as [PrvContractFinishDate]
		,(Select [ToDate] from [LandContract] where Guid = L.[PrvContractGuid]) as [PrvContractEndDate]
		,[R2].[spid]
		,0 as [Sort]
	from 
		[vwEarthAll] [A] 
		Inner join [vwLandContract] [L] On [A].[Guid] = [L].[LandGuid]
		inner join [vwContractType] [T] on [T].[Guid] = [L].[TypeGuid]  
		Inner join [Resource] [R2] on [R2].[Guid] = [T].[Guid]  and [R2].[Kind] = 100 and [R2].[spid] = @@Spid 
		Inner join [#Customer] [Cu] on [Cu].[Guid] = [L].[CustomerGuid] 
		left join #RentInfo_CL [I] on [I].[Guid] = [L].[RentInfoGuid]
		left join [Realty_Users] U on U.[Guid] = L.AcquittancePrintedByGuid
		left join Salesman S on S.Guid = L.SalesManGuid
	where
		([L].[CustomerGuid] = @CustGuid or @CustGuid = 0x0)
		and	([L].[SalesManGuid] = @SalesManGuid or @SalesManGuid = 0x0)
		and 
			(
				((([L].[ToDate] <= GetDate()) or ([L].[ContractFinish] = 1)) and @ContractState = 0)
			  	or ([L].[ToDate] > GetDate() and @ContractState = 1)
				or @ContractState = 2
			)
		and (
				(
					([L].[FromDate] >= @Date1 and @Datewith  = 0)
					and ([L].[FromDate] <= @Date2 and @Datewith  = 0 or @Date2 = '12/30/1899')
				)
				or
				(
					([L].[ToDate] >= @Date1 and @Datewith  = 1)
					and ([L].[ToDate] <= @Date2 and @Datewith  = 1 or @Date2 = '12/30/1899')
				)

				or
				(
					([L].[ContractFinishDate] >= @Date1 and @Datewith  = 2)
					and ([L].[ContractFinishDate] <= @Date2 and @Datewith  = 2 or @Date2 = '12/30/1899')
					and ([L].[ContractFinish] = 1)
				)

				or
				(
					([L].[EditDate] >= @Date1 and @Datewith  = 3)
					and ([L].[EditDate] <= @Date2 and @Datewith  = 3 or @Date2 = '12/30/1899')
				)
				or
				(
					([L].[AcquittancePrintdate] >= @Date1 and @Datewith  = 4)
					and ([L].[AcquittancePrintdate] <= @Date2 and @Datewith  = 4 or @Date2 = '12/30/1899')
				)

				or
				(
					([L].LeaveDate >= @Date1 and @Datewith  = 5)
					and ([L].LeaveDate <= @Date2 and @Datewith  = 5 or @Date2 = '12/30/1899')
				)
				
				or
				(
					([L].DeliverDate >= @Date1 and @Datewith  = 6)
					and ([L].DeliverDate <= @Date2 and @Datewith  = 6 or @Date2 = '12/30/1899')
				)

				or @CKDate = 0
			) 

		and ([L].[ContractFinish] = @EndState or @EndState = 2)
		and (
				([l].[Mark] = 1 and @Mark = 1)
				or ([l].[Mark] = 0 and @NotMark = 1)
			)
		and (L.PayType = @PayType or @PayType  = 4)
		and (L.AcquittancePrinted = @AcquittancePrinted or @AcquittancePrinted = 2)
		and ([L].[Judicial] = @Judicial or @Judicial = 2)
		and (L.Purpose = @Purpose or @Purpose = '') 
		and (L.Trademark = @Trademark or @Trademark = '')
		and (L.AcquittancePrintedByGuid = @AcquittancePrintedByUserGuid or @AcquittancePrintedByUserGuid = 0x0)
		and (l.isAutoRenewal = @AutoRenewal or @AutoRenewal = 2)
		and (A.Ban = @banRealty or @banRealty = 2)
		and (
				(
					(
					([ContractFinishDate] < [ToDate] and @FinishDate = 0) or
					([ContractFinishDate] > [ToDate] and @FinishDate = 1) or
					([ContractFinishDate] = [ToDate] and @FinishDate = 2) 
					)
				and [ContractFinish] = 1
				)
				or @FinishDate = 3
			)
		
	--ÝíáÇ
	if (@p_RentVilla = 1 or @p_SaleVilla = 1)
	Insert into @Tbl 
	Select 
		[L].[ContractNo]
		,[A].[Name] as [FlatNo]
		,'' as [BuildingName]
		,[L].[Rent]
		,[L].[DiscountValue]
		,[L].[Rent] - [L].[DiscountValue]
		,'' as [FlatKind]
		,'' as [FlatType]
		,[A].LandArea as [FlatArea]
		,Case when ([L].[ToDate] <= GetDate()) or ([L].[ContractFinish] = 1) then dbo.sc('ãäÊåí ÇáãÏÉ')  
			  when [L].[ToDate] > GetDate() then dbo.sc('ÛíÑ ãäÊåí ÇáãÏÉ') end as [ContractState]
		,'' as [Emirate]
		,'' as [Suburb]
		,'' as [Area]
		,'' as [Street]
		,'' as [FloorNo]
		,[Cu].[Name] as [CustName]
		,[Cu].[Mobile] as [CustPhone]
		,[Cu].[Nationality]
		,Cu.EMail as CustEMail
		,[L].[EditDate] as [ContractDateEdit]
		,[L].[DeliverDate] as [ContractDeliverDate]
		,[L].[FromDate] as [ContractDateBegin]
		,[L].[ToDate] as [ContractDateEnd]
		,[T].[Name]
		,[ContractFinish]
		,[L].[Guid] as [ContractGuid]
		,[L].[NewState]  

		,[I].[Name]
		,S.name 
		,[ContractFinishDate]
		,[ResultingAmount]
		,[ResultingAmount2]
		,[Fine]
		,[ResultingAmount2] + [Fine] + [OtherFee]
		,[InsuranceValueOld] + [InsuranceValue]
		,[ResultingAmount] + [InsuranceValueOld] + [InsuranceValue] - [Fine]
		,[Note2] 
		,L.[Purpose]
		,L.Trademark
		,0 as [CountOldContract]
		,0
		,l.[AcquittancePrinted]
		,L.AcquittancePrintDate
		,u.LoginName as [AcquittancePrintedBy]
		,[L].[CostGuid]
		,L.[CustAccountGuid]
		,L.[Judicial]
		,[L].[Mark]
		,[L].[isAutoRenewal]
		,(Select [ContractFinishDate] from [LandContract] where Guid = L.[PrvContractGuid]) as [PrvContractFinishDate]
		,(Select [ToDate] from [LandContract] where Guid = L.[PrvContractGuid]) as [PrvContractEndDate]
		,[R2].[spid]
		,0 as [Sort]
	from 
		[vwVillaAll] [A] 
		Inner join [vwLandContract] [L] On [A].[Guid] = [L].[LandGuid]
		inner join [vwContractType] [T] on [T].[Guid] = [L].[TypeGuid]  
		Inner join [Resource] [R2] on [R2].[Guid] = [T].[Guid]  and [R2].[Kind] = 100 and [R2].[spid] = @@Spid 
		Inner join [#Customer] [Cu] on [Cu].[Guid] = [L].[CustomerGuid] 
		left join #RentInfo_CL [I] on [I].[Guid] = [L].[RentInfoGuid]
		left join [Realty_Users] U on U.[Guid] = L.AcquittancePrintedByGuid
		left join Salesman S on S.Guid = L.SalesManGuid
	where
		([L].[CustomerGuid] = @CustGuid or @CustGuid = 0x0)
		and	([L].[SalesManGuid] = @SalesManGuid or @SalesManGuid = 0x0)
		and 
			(
				((([L].[ToDate] <= GetDate()) or ([L].[ContractFinish] = 1)) and @ContractState = 0)
			  	or ([L].[ToDate] > GetDate() and @ContractState = 1)
				or @ContractState = 2
			)
		and (
				(
					([L].[FromDate] >= @Date1 and @Datewith  = 0)
					and ([L].[FromDate] <= @Date2 and @Datewith  = 0 or @Date2 = '12/30/1899')
				)
				or
				(
					([L].[ToDate] >= @Date1 and @Datewith  = 1)
					and ([L].[ToDate] <= @Date2 and @Datewith  = 1 or @Date2 = '12/30/1899')
				)

				or
				(
					([L].[ContractFinishDate] >= @Date1 and @Datewith  = 2)
					and ([L].[ContractFinishDate] <= @Date2 and @Datewith  = 2 or @Date2 = '12/30/1899')
					and ([L].[ContractFinish] = 1)
				)

				or
				(
					([L].[EditDate] >= @Date1 and @Datewith  = 3)
					and ([L].[EditDate] <= @Date2 and @Datewith  = 3 or @Date2 = '12/30/1899')
				)
				or
				(
					([L].[AcquittancePrintdate] >= @Date1 and @Datewith  = 4)
					and ([L].[AcquittancePrintdate] <= @Date2 and @Datewith  = 4 or @Date2 = '12/30/1899')
				)
				or
				(
					([L].LeaveDate >= @Date1 and @Datewith  = 5)
					and ([L].LeaveDate <= @Date2 and @Datewith  = 5 or @Date2 = '12/30/1899')
				)

				or
				(
					([L].DeliverDate >= @Date1 and @Datewith  = 6)
					and ([L].DeliverDate <= @Date2 and @Datewith  = 6 or @Date2 = '12/30/1899')
				)

				or @CKDate = 0
			) 

		and ([L].[ContractFinish] = @EndState or @EndState = 2)
		and (
				([l].[Mark] = 1 and @Mark = 1)
				or ([l].[Mark] = 0 and @NotMark = 1)
			)
		and (L.PayType = @PayType or @PayType  = 4)
		and (L.AcquittancePrinted = @AcquittancePrinted or @AcquittancePrinted = 2)
		and ([L].[Judicial] = @Judicial or @Judicial = 2)
		and (L.Purpose = @Purpose or @Purpose = '') 
		and (L.Trademark = @Trademark or @Trademark = '')
		and (L.AcquittancePrintedByGuid = @AcquittancePrintedByUserGuid or @AcquittancePrintedByUserGuid = 0x0)
		and (l.isAutoRenewal = @AutoRenewal or @AutoRenewal = 2)
		and (A.Ban = @banRealty or @banRealty = 2)
		and (
				(
					(
					([ContractFinishDate] < [ToDate] and @FinishDate = 0) or
					([ContractFinishDate] > [ToDate] and @FinishDate = 1) or
					([ContractFinishDate] = [ToDate] and @FinishDate = 2) 
					)
				and [ContractFinish] = 1
				)
				or @FinishDate = 3
			)

	Declare @PCheck Bit 
	Set @PCheck = 1	
	Declare @PNotCheck Bit 
	Set @PNotCheck = 0

	if @LinkCheck = 0 -- ÈÏæä ÇÞÓÇØ
	Delete @Tbl
	From
		@Tbl T
		inner join [Checks] C on C.ContractGuid = T.ContractGuid
	
	if @LinkCheck = 1 -- áåÇ ÇÞÓÇØ
	Delete @Tbl
	From
		@Tbl T
		left join [Checks] C on C.ContractGuid = T.ContractGuid
	where
		C.Guid is Null
		

	--End 
	
	-- ÇáÔíßÇÊ
	Select
		[P].[ContractGuid],
		Sum(IsNull([P].[Value] * [P].[CurrencyVal],0)) as [Total],
		Sum(IsNull([C1].[Value] * [C1].[CurrencyVal],0)) as [Collection]
	Into #Collection_CL
	From
		[vwChecks] [P]
		left join [vwChecksCollection] [C1] on [C1].[CheckGuid] = [P].[Guid] and [C1].[Kind] = 1
		inner join @Tbl [t] on [t].[ContractGuid] = [P].[ContractGuid]
	Group By
		[P].[ContractGuid]

	-- ÇáÊÞÏí
	Select
		[P].[ContractGuid],
		Sum(IsNull([P].[Value] * [P].[CurrencyVal],0)) as [Cash]
	Into #Cash
	From
		[vwContractCachPayment] [P]
		inner join @Tbl [t] on [t].[ContractGuid] = [P].[ContractGuid] and P.AcGuid = t.AccountGuid
	Group By
		[P].[ContractGuid]	


	Select
		En.AcGuid,
		SUM(En.debit - en.Credit) as [Balance]
	into #CustBalance
	From
		(Select distinct AccountGuid from @Tbl ) T
		inner join DEntry En on En.AcGuid = T.AccountGuid
	Group By
		En.AcGuid

	
	Select 
		[E].*,
		
		Case when isnUll([ContractFinish],0) = 0 then dbo.sc('áÇ') else dbo.sc('äÚã') end As [ContractFinishStr],
		Case when isnUll([NewState],0) = 0 then dbo.sc('ÌÏíÏ') 
			 when isnUll([NewState],0) = 1 then dbo.sc('ÊÌÏíÏ') 
		else 
			''
		end As [NewStateStr],
		
		isNull([C].[Collection],0) as [Collection],
		isNull([C].[Total],0) - isNull([C].[Collection],0) as [CheckNotCollection],
		isNull([h].[Cash],0) as [Cash],
		IsNull([C].[Collection],0) + IsNull([h].[Cash],0) as [TotalPays],
		isNull(E.ValueAfterDiscount ,0) - IsNull([C].[Collection],0) - IsNull([h].[Cash],0) as [ContractRest],
		--isNull(E.[RentCleanValue],0)  as [ContractRest],
		CAST(0 as Float) as [CustBalance],
				
		Case when [R].[ObjGuid] is null then @PNotCheck
			 when [R].[ObjGuid] is not null  then @PCheck end as [Check],
		1 as [DoOperation]
	into #ContractList_4
	From
		@Tbl [E]
		left join #Collection_CL [C] on [E].[ContractGuid] = [C].[ContractGuid]
		left join #Cash [h] on [E].[ContractGuid] = [h].[ContractGuid]
		left join [RepCheck] [R] on [R].[ObjGuid] = [E].[ContractGuid] and [R].[IdReport] = 2000
	where
		(
			([R].[ObjGuid] is not null and @ShowIsCheck = 1)
			or
			([R].[ObjGuid] is null and @ShowIsNotCheck = 1)
		)
		and (Isnull([E].[NewState],0) = @NewState or @NewState = 2)
		
	
	update	
		#ContractList_4
	Set
		custBalance = C.Balance
	From
		#ContractList_4 E
		inner join #CustBalance C on C.AcGuid = E.AccountGuid 
	
	--ÇáÔíßÇÊ
	Delete [Resource] where [SPID] = @@SPID and Kind = 50
	
	insert into [Resource]
	([Guid], [Kind])
	Select Distinct
		ContractGuid,
		50
	From
		#ContractList_4
		
	exec [PrcCrossTrailContractMonthCheck]
	
	Select
		C.*,
		p.*
	from
		#ContractList_4 C
		left join ##TblAssem_Check_Contract P on p.contractGuid = C.contractGuid
	Order By 
		[Sort],
		[BuildingName],
		[FlatNo]
		
		
	Select
		SUM(Value) as [Value],
		SUM(ValueAfterDiscount) as ValueAfterDiscount,
		SUM(ResultingAmount) as ResultingAmount,
		SUM(Fine) as Fine,
		SUM(TotalIncom) as TotalIncom,
		SUM(TotalInsuranse) as TotalInsuranse,
		SUM(RentCleanValue) as RentCleanValue
	From
		#ContractList_4
	where
		[Sort] = 0

		

GO
/****** Object:  StoredProcedure [dbo].[PrcContractInsurance]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[PrcContractInsurance]
(
	@CustGuid uniqueidentifier = 0x0,
	@BuildingGuid uniqueidentifier = 0x0,
	@FlatGuid uniqueidentifier = 0x0,
	@ShopGuid uniqueidentifier = 0x0,
	@ParkingGuid  uniqueidentifier = 0x0,
	@ContractState int = 2,
	@Datewith int = 0,
	@Date1 DateTime = '1/1/2007',
	@Date2 DateTime = '1/1/2011',
	@ShowIsCheck bit = 1,
	@ShowIsNotCheck Bit = 1,
	@CkShowNonInsourance Bit = 0,
	@ReturnInsurance int = 2
)
  
as
	Set NoCount On
	Declare @Tbl Table
	(
		[Customer] Varchar(256),
		[BuildingName] Varchar(256),
		[Flat] Varchar(256),
		[FloorNo] Varchar(256),
		[ContractNo] Varchar(256),
		[ContractState]  Varchar(256),
		[Insurance] Float,
		[InsuranceOld] Float,
		IsReturnInsurance bit,
		ReturnInsuranceDate Datetime,
		[ContractGuid] uniqueidentifier
	)

	--ÇíÌÇÑ ÇáÔÞÞ	
	if (@ParkingGuid = 0x0) and (@ShopGuid = 0x0)
	Insert into @Tbl 
	Select
		[Cu].[name] 
		,[B].[Name] as [BuildingName]
		,dbo.SC('ÔÞÉ')+' '+[A].[No] as [FlatNo]
		,[A].[FloorNo]
		,[L].[ContractNo]
		,Case when ([L].[ToDate] <= GetDate()) or ([L].[ContractFinish] = 1) then dbo.sc('ãäÊåí ÇáãÏÉ')  
			  when [L].[ToDate] > GetDate() then dbo.sc('ÛíÑ ãäÊåí ÇáãÏÉ') end as [ContractState]
		,[L].[InsuranceValue]
		,[L].[InsuranceValueOld]
		,L.IsReturnInsurance
		,L.ReturnInsuranceDate
		,[L].[Guid]
	from 
		[vwBuilding] [B]
		Inner join [vwApartment] [A] On [A].[BuildingGuid] = [B].[Guid]
		Inner join [LeaseApartment] [L] On [A].[Guid] = [L].[ApartmentGuid] --and [LeaseKind]  = 0
		inner join [vwContractType] [T] on [T].[Guid] = [L].[TypeGuid]  
		Inner join [Resource] [R2] on [R2].[Guid] = [T].[Guid]  and [R2].[Kind] = 102 and [R2].[spid] = @@Spid 
		Inner join [vwCustomer] [Cu] on [Cu].[Guid] = [L].[CustomerGuid] 
	where
		([B].[Guid] = @BuildingGuid or @BuildingGuid = 0x0)
		and ([Cu].[Guid] = @CustGuid or @CustGuid = 0x0)
 		and (([L].[ApartmentGuid] = @FlatGuid or @FlatGuid = 0x0))
		and 
			(
				((([L].[ToDate] <= GetDate()) or ([L].[ContractFinish] = 1)) and @ContractState = 0)
			  	or ([L].[ToDate] > GetDate() and @ContractState = 1)
				or @ContractState = 2
			)

		and (
				(
					([L].[FromDate] >= @Date1 and @Datewith  = 0)
					and ([L].[FromDate] <= @Date2 and @Datewith  = 0 or @Date2 = '12/30/1899')
				)
				or
				(
					([L].[ToDate] >= @Date1 and @Datewith  = 1)
					and ([L].[ToDate] <= @Date2 and @Datewith  = 1 or @Date2 = '12/30/1899')
				)
			) 
		and(
			[L].[InsuranceValue] <> 0 or @CkShowNonInsourance = 1
			)
		and (L.isReturnInsurance = @ReturnInsurance or @ReturnInsurance = 2)


	--ÇíÌÇÑ ãÍá	
	if (@ParkingGuid = 0x0) and (@FlatGuid = 0x0)
	Insert into @Tbl 
	Select
		[Cu].[name] 
		,[B].[Name] as [BuildingName]
		,dbo.SC('ãÍá')+' '+[A].[No] as [FlatNo]
		,'' as [FloorNo]
		,[L].[ContractNo]
		,Case when ([L].[ToDate] <= GetDate()) or ([L].[ContractFinish] = 1) then dbo.sc('ãäÊåí ÇáãÏÉ')  
			  when [L].[ToDate] > GetDate() then dbo.sc('ÛíÑ ãäÊåí ÇáãÏÉ') end as [ContractState]
		,[L].[InsuranceValue]
		,[L].[InsuranceValueOld]
		,L.IsReturnInsurance
		,L.ReturnInsuranceDate
		,[L].[Guid]
	from 
		[vwBuilding] [B]
		Inner join [vwShop] [A] On [A].[BuildingGuid] = [B].[Guid]
		Inner join [LeaseApartment] [L] On [A].[Guid] = [L].[ApartmentGuid] --and [LeaseKind]  = 0
		inner join [vwContractType] [T] on [T].[Guid] = [L].[TypeGuid]  
		Inner join [Resource] [R2] on [R2].[Guid] = [T].[Guid]  and [R2].[Kind] = 102 and [R2].[spid] = @@Spid 
		Inner join [vwCustomer] [Cu] on [Cu].[Guid] = [L].[CustomerGuid] 
	where
		([B].[Guid] = @BuildingGuid or @BuildingGuid = 0x0)
		and ([Cu].[Guid] = @CustGuid or @CustGuid = 0x0)
 		and (([L].[ApartmentGuid] = @ShopGuid or @ShopGuid = 0x0))
		and 
			(
				((([L].[ToDate] <= GetDate()) or ([L].[ContractFinish] = 1)) and @ContractState = 0)
			  	or ([L].[ToDate] > GetDate() and @ContractState = 1)
				or @ContractState = 2
			)

		and (
				(
					([L].[FromDate] >= @Date1 and @Datewith  = 0)
					and ([L].[FromDate] <= @Date2 and @Datewith  = 0 or @Date2 = '12/30/1899')
				)
				or
				(
					([L].[ToDate] >= @Date1 and @Datewith  = 1)
					and ([L].[ToDate] <= @Date2 and @Datewith  = 1 or @Date2 = '12/30/1899')
				)
			) 
		and(
			[L].[InsuranceValue] <> 0 or @CkShowNonInsourance = 1
			)
		and (L.isReturnInsurance = @ReturnInsurance or @ReturnInsurance = 2)

	--ãæÞÝ
	if (@FlatGuid = 0x0) and (@FlatGuid = 0x0)
	Insert into @Tbl 
	Select
		[Cu].[name] 
		,[B].[Name] as [BuildingName]
		,dbo.SC('ãæÞÝ')+' '+[A].[No] as [FlatNo]
		,[A].[FloorNo]
		,[L].[ContractNo]
		,Case when ([L].[ToDate] <= GetDate()) or ([L].[ContractFinish] = 1) then dbo.sc('ãäÊåí ÇáãÏÉ')  
			  when [L].[ToDate] > GetDate() then dbo.sc('ÛíÑ ãäÊåí ÇáãÏÉ') end as [ContractState]
		,[L].[InsuranceValue]
		,[L].[InsuranceValueOld]
		,L.IsReturnInsurance
		,L.ReturnInsuranceDate
		,[L].[Guid]
	from 
		[vwBuilding] [B]
		Inner join [vwParking] [A] On [A].[BuildingGuid] = [B].[Guid]
		Inner join [ParkingContract] [L] On [A].[Guid] = [L].[ParkingGuid] --and [LeaseKind]  = 0
		inner join [vwContractType] [T] on [T].[Guid] = [L].[TypeGuid]  
		Inner join [Resource] [R2] on [R2].[Guid] = [T].[Guid]  and [R2].[Kind] = 102 and [R2].[spid] = @@Spid 
		Inner join [vwCustomer] [Cu] on [Cu].[Guid] = [L].[CustomerGuid] 
	where
		([B].[Guid] = @BuildingGuid or @BuildingGuid = 0x0)
		and ([Cu].[Guid] = @CustGuid or @CustGuid = 0x0)
 		and (([L].[ParkingGuid] = @ParkingGuid or @ParkingGuid = 0x0))
		and 
			(
				((([L].[ToDate] <= GetDate()) or ([L].[ContractFinish] = 1)) and @ContractState = 0)
			  	or ([L].[ToDate] > GetDate() and @ContractState = 1)
				or @ContractState = 2
			)

		and (
				(
					([L].[FromDate] >= @Date1 and @Datewith  = 0)
					and ([L].[FromDate] <= @Date2 and @Datewith  = 0 or @Date2 = '12/30/1899')
				)
				or
				(
					([L].[ToDate] >= @Date1 and @Datewith  = 1)
					and ([L].[ToDate] <= @Date2 and @Datewith  = 1 or @Date2 = '12/30/1899')
				)
			) 
		and(
			[L].[InsuranceValue] <> 0 or @CkShowNonInsourance = 1
			)
		and (L.isReturnInsurance = @ReturnInsurance or @ReturnInsurance = 2)


	Declare @PCheck Bit 
	Set @PCheck = 1	
	Declare @PNotCheck Bit 
	Set @PNotCheck = 0

	Select 
		[E].*,
		isnull([Insurance],0) + isNull([InsuranceOld],0) as [SumInsurance],
		Case when [R].[ObjGuid] is null then @PNotCheck
			 when [R].[ObjGuid] is not null  then @PCheck end as [Check]
	From
		@Tbl [E]
		left join [RepCheck] [R] on [R].[ObjGuid] = [E].[ContractGuid] and [R].[IdReport] = 8000
	where
		([R].[ObjGuid] is not null and @ShowIsCheck = 1)
		or
		([R].[ObjGuid] is null and @ShowIsNotCheck = 1)
	Order By 
		[BuildingName],
		[Flat]

	Select 
		Sum(isnull([Insurance],0) + isNull([InsuranceOld],0)) as [SumInsurance],
		Sum(isnull([Insurance],0)) as [Insurance],
		Sum(isNull([InsuranceOld],0)) as [InsuranceOld]
	From
		@Tbl [E]
		left join [RepCheck] [R] on [R].[ObjGuid] = [E].[ContractGuid] and [R].[IdReport] = 8000
	where
		([R].[ObjGuid] is not null and @ShowIsCheck = 1)
		or
		([R].[ObjGuid] is null and @ShowIsNotCheck = 1)

GO
/****** Object:  StoredProcedure [dbo].[PrcContractList]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcContractList]
(
	@CustGuid uniqueidentifier = 0x0
	,@Nationality Varchar(256) = ''
	,@Purpose Varchar(256) = ''
	,@Emirate Varchar(256) = ''
	,@Suburb Varchar(256) = ''
	,@Area Varchar(256) = ''
	,@Street Varchar(256) = ''
	,@FlatKind Varchar(256) = ''
	,@ApartmentType Varchar(256) = ''
	,@ContractState int = 1
	,@Judicial int = 2
	,@LawsuitState int = 2
	,@PayType int = 4
	,@Datewith int = 0
	,@Date1 DateTime = '12/30/1899'
	,@Date2 DateTime = '12/30/2016'
	,@IncomeActiveDate bit = 0
	,@IncomeDate1 datetime = '1/1/2016'
	,@IncomeDate2 datetime = '1/1/2017'
	,@RentInfoGuid uniqueidentifier = 0x0
	,@SalesManGuid uniqueidentifier = 0x0
	,@ShowIsCheck Bit = 1
	,@ShowIsNotCheck Bit = 1
	,@CKDate Bit = 0
	,@EndState int = 2
	,@NewState int = 2
	,@Mark Bit = 1
	,@NotMark Bit = 1
	,@AutoRenewal int = 1
	,@AcquittancePrinted int = 2
	,@AcquittancePrintedByUserGuid uniqueidentifier = 0x0
	,@LinkCheck int = 2
	,@FldCurrentContract bit = 1
	,@BanRealty int = 0
	,@whereabouts varchar(255) = ''
	,@Trademark varchar(255) = ''
	,@FinishDate int = 3
	,@ContractValue int = 2
)
  
as
	Set noCount on

	Declare @Msg varchar(255),
			@MsgConst varchar(255)
	Set @MsgConst = dbo.SC('ßÔÝ ÇáÚÞæÏ')
			
	Set @Msg = @MsgConst
	exec PrcSetProgrss @Msg, 100, 0

	Declare @Tbl Table
	(
		[ContractNo] Varchar(256)
		,[FlatNo] Varchar(256)
		,[BuildingName] Varchar(256)
		,[Value] Float
		,[Discount] Float
		,[ValueAfterDiscount] Float
		,[FlatKind] Varchar(256)
		,[FlatType] Varchar(256)
		,[FlatArea] Varchar(256)
		,[ContractState] Varchar(256)
		,[Emirate] Varchar(256)
		,[Suburb] Varchar(256)
		,[Area] Varchar(256)
		,[Street] Varchar(256)
		,[FloorNo] Varchar(256)
		,[CustName] Varchar(256)
		,[CustPhone] Varchar(256)
		,[CustNationality] Varchar(256)
		,[CustEMail] Varchar(256)
		,[ContractDateEdit] Datetime
		,[ContractDeliverDate] Datetime
		,[ContractDateBegin] Datetime
		,[ContractDateEnd] Datetime
		,[ContractType] Varchar(256)
		,[ContractFinish] Bit
		,[ContractGuid] uniqueidentifier
		,[NewState] int

		,[RentMan] Varchar(256)
		,[SalesMan] Varchar(256)
		,[ContractFinishDate] Datetime
		,[ResultingAmount] Float
		,[ResultingAmount2] Float
		,[Fine] Float
		,[TotalIncom] Float
		,[InsuranceValueOld] Float
		,[InsuranceValue] Float
		,[TotalInsuranse] Float
		,[RentCleanValue] Float
		,[Note2] Varchar(1000)
		,[Purpose] Varchar(256)
		,Trademark Varchar(256)
		
		,[CountOldContract] int
		,[CountCurrentContract] int
		
		,[AcquittancePrinted] Bit
		,[AcquittancePrintdate] Datetime
		,[AcquittancePrintedBy] Varchar(256)
		,[CostGuid] uniqueidentifier
		,[AccountGuid] uniqueidentifier
		,[Judicial] Bit
		,[Mark] Bit
		,[isAutoRenewal] Bit
		,[PrvContractFinishDate] Datetime
		,[PrvContractEndDate] Datetime
		,[Kind] Int
		,[Sort] int
	)

	Declare  @Now_Date Datetime
	Set @Now_Date = GetDate()
	
	-- ÇáÚÞæÏ ÇáÓÇÈÞÉ
	Create Table #CurrentContract
	(
		CustomerGuid uniqueidentifier,
		ApartmentGuid uniqueidentifier,
		[ContractCount] int
	)
	
	if @FldCurrentContract = 1
	begin
		insert into #CurrentContract
		Select 
			CustomerGuid,
			ApartmentGuid,
			IsNull(COUNT(*),0) as [ContractCount]
		From 
			[LeaseApartment]
		Group By
			CustomerGuid,
			ApartmentGuid
	end

	Set @Msg = @MsgConst
	exec PrcSetProgrss @Msg, 100, 5
	
	--Building
	Select
		*
	Into #Building_CL
	From
		[vwBuilding] B
	where
		([B].[Emirate] = @Emirate or @Emirate = '')
		and ([B].[Suburb] = @Suburb or @Suburb = '')
		and ([B].[Area] = @Area or @Area = '')
		and ([B].[Street] = @Street or @Street = '')
		
	Set @Msg = @MsgConst
	exec PrcSetProgrss @Msg, 100, 7
		
    select Distinct
		ContractKind
	into #Resource_Type
	From
		ContractType T
		inner join [Resource] [R2] on [R2].[Guid] = [T].[Guid]  and [R2].[Kind] = 100 and [R2].[spid] = @@Spid 
		
	--Select * from #Building_CL
	--return
		

	--Select * from #Building_CL
		
	--[vwLeaseApartment]
	Declare @p_RentFlat bit,
			@p_RentShop bit,
			@p_SaleFlat bit,
			@p_SaleShop bit,
			@p_RentParking bit,
			@p_SaleParking bit,
			@p_SaleLand bit,
			@p_RentLand bit,
			@p_SaleVilla bit,
			@p_RentVilla bit
			
	if exists(Select * From #Resource_Type where ContractKind = 0)
	Set @p_RentFlat = 1 else Set @p_RentFlat = 0
	
	if exists(Select * From #Resource_Type where ContractKind = 1)
	Set @p_RentShop = 1 else Set @p_RentShop = 0 

	if exists(Select * From #Resource_Type where ContractKind = 2)
	Set @p_SaleFlat = 1 else Set @p_SaleFlat = 0 

	if exists(Select * From #Resource_Type where ContractKind = 3)
	Set @p_SaleShop = 1 else Set @p_SaleShop = 0 

	if exists(Select * From #Resource_Type where ContractKind = 4)
	Set @p_RentParking = 1 else Set @p_RentParking = 0 

	if exists(Select * From #Resource_Type where ContractKind = 5)
	Set @p_SaleParking = 1 else Set @p_SaleParking = 0 

	if exists(Select * From #Resource_Type where ContractKind = 6)
	Set @p_SaleLand = 1 else Set @p_SaleLand = 0 

	if exists(Select * From #Resource_Type where ContractKind = 7)
	Set @p_RentLand = 1 else Set @p_RentLand = 0 

	if exists(Select * From #Resource_Type where ContractKind = 8)
	Set @p_SaleVilla = 1 else Set @p_SaleVilla = 0 

	if exists(Select * From #Resource_Type where ContractKind = 9)
	Set @p_RentVilla = 1 else Set @p_RentVilla = 0 
	
	Select
		L.*
		,T.Name as ContractName
		,[L].[Judicial] as [ContractJudicial]
		,(Select [ContractFinishDate] from [LeaseApartment] where Guid = L.[PrvContractGuid]) as [PrvContractFinishDate]
		,(Select [ToDate] from [LeaseApartment] where Guid = L.[PrvContractGuid]) as [PrvContractEndDate]
		,U.LoginName as [AcquittancePrintedBy]
		,S.Name as [SalesMan]
	into #LeaseApartment_CL
	From
		[LeaseApartment] L
		inner join ContractType T on T.Guid = L.TypeGuid
		inner join [Resource] [R2] on [R2].[Guid] = [L].[TypeGuid]  and [R2].[Kind] = 100 and [R2].[spid] = @@Spid 
		left join [Realty_Users] U on U.[Guid] = L.AcquittancePrintedByGuid
		left join Salesman S on S.Guid = L.SalesManGuid
		left join [Lawsuit] W on W.ContractGuid = L.Guid
	where
		([L].[CustomerGuid] = @CustGuid or @CustGuid = 0x0)
		and ([L].[RentInfoGuid] = @RentInfoGuid or @RentInfoGuid = 0x0)
		and ([L].[SalesManGuid] = @SalesManGuid or @SalesManGuid = 0x0)
		and ([L].[ContractFinish] = @EndState or @EndState = 2)
		and (
				([l].[Mark] = 1 and @Mark = 1)
				or ([l].[Mark] = 0 and @NotMark = 1)
			)
		and (L.PayType = @PayType or @PayType  = 4)
		
		and (
				(
					Case when ( isNull([L].[Judicial],0) = 1) or (W.Guid is Not Null ) then 1 else 0 end					
					= @Judicial					
				)
				and (
						(W.IsEnded = 1 and @LawsuitState = 0)
						or (W.IsEnded = 0 and @LawsuitState = 1)
						or @LawsuitState = 2
					)
			or @Judicial = 2)

		
		and (L.Purpose = @Purpose or @Purpose = '')
		and (L.Trademark = @Trademark or @Trademark = '')
		and (L.AcquittancePrintedByGuid = @AcquittancePrintedByUserGuid or @AcquittancePrintedByUserGuid = 0x0)
		
		and (@p_RentFlat = 1 or @p_RentShop = 1 or @p_SaleFlat = 1 or @p_SaleShop = 1)
		and (L.isAutoRenewal = @AutoRenewal or @AutoRenewal = 2)
		and (L.whereabouts = @whereabouts or @whereabouts = '')
		and (
				(
					(
					([ContractFinishDate] < [ToDate] and @FinishDate = 0) or
					([ContractFinishDate] > [ToDate] and @FinishDate = 1) or
					([ContractFinishDate] = [ToDate] and @FinishDate = 2) 
					)
				and [ContractFinish] = 1
				)
				or @FinishDate = 3
			)
		and (
				(([L].Rent - [L].DiscountValue) <> 0 and @ContractValue = 0) or
				(([L].Rent - [L].DiscountValue) = 0 and @ContractValue = 1) or
				@ContractValue = 2
			)
	
	Set @Msg = @MsgConst
	exec PrcSetProgrss @Msg, 100, 10

	Select * into #LeaseApartment_Rent from #LeaseApartment_CL L
	where
			(
				((([L].[ToDate] <= @Now_Date) or ([L].[ContractFinish] = 1)) and @ContractState = 0)
			  	or ([L].[ToDate] > @Now_Date and @ContractState = 1)
				or @ContractState = 2
			)		
			and (
				(
					([L].[FromDate] >= @Date1 and @Datewith  = 0)
					and ([L].[FromDate] <= @Date2 and @Datewith  = 0 or @Date2 = '12/30/1899')
				)
				or
				(
					([L].[ToDate] >= @Date1 and @Datewith  = 1)
					and ([L].[ToDate] <= @Date2 and @Datewith  = 1 or @Date2 = '12/30/1899')
				)

				or
				(
					([L].[ContractFinishDate] >= @Date1 and @Datewith  = 2)
					and ([L].[ContractFinishDate] <= @Date2 and @Datewith  = 2 or @Date2 = '12/30/1899')
					and ([L].[ContractFinish] = 1)
				)

				or
				(
					([L].[EditDate] >= @Date1 and @Datewith  = 3)
					and ([L].[EditDate] <= @Date2 and @Datewith  = 3 or @Date2 = '12/30/1899')
				)
				or
				(
					([L].[AcquittancePrintdate] >= @Date1 and @Datewith  = 4)
					and ([L].[AcquittancePrintdate] <= @Date2 and @Datewith  = 4 or @Date2 = '12/30/1899')
				)

				or
				(
					([L].LeaveDate >= @Date1 and @Datewith  = 5)
					and ([L].LeaveDate <= @Date2 and @Datewith  = 5 or @Date2 = '12/30/1899')
				)
				or
				(
					([L].DeliverDate >= @Date1 and @Datewith  = 6)
					and ([L].DeliverDate <= @Date2 and @Datewith  = 6 or @Date2 = '12/30/1899')
				)
				or @CKDate = 0
			) 
		and (L.AcquittancePrinted = @AcquittancePrinted or @AcquittancePrinted = 2)			

	Set @Msg = @MsgConst
	exec PrcSetProgrss @Msg, 100, 12

	--Select * from #LeaseApartment_CL
	-- ÇáãÄÌÑ	
	Select * into #RentInfo_CL from [RentInfo] where Guid = @RentInfoGuid or @RentInfoGuid = 0x0
	
	Set @Msg = @MsgConst
	exec PrcSetProgrss @Msg, 100, 15

	--Customer 
	Select
		*
	into #Customer
	From
		vwCustomer
	where
		([Guid] = @CustGuid or @CustGuid = 0x0)
		and ([Nationality] = @Nationality or @Nationality = '')
		
	Set @Msg = @MsgConst +' '+ dbo.SC('ÚÞæÏ ÇáÔÞÞ')
	exec PrcSetProgrss @Msg, 100, 35
    
   --Select * from #LeaseApartment_CL where [ContractJudicial] = 1
    
	--ÇíÌÇÑ ÇáÔÞÞ	
	if @p_RentFlat = 1
	Insert into @Tbl 
	Select 
		[L].[ContractNo]
		,[A].[No] as [FlatNo]
		,[B].[Name] as [BuildingName]
		,[L].[Rent]
		,[L].[DiscountValue]
		,[L].[Rent] - [L].[DiscountValue]
		,[A].[FlatKind] as [FlatKind]
		,[A].[ApartmentType] as [FlatType]
		,[A].[Area] as [FlatArea]
		,Case when ([L].[ToDate] <= @Now_Date) or ([L].[ContractFinish] = 1) then dbo.sc('ãäÊåí ÇáãÏÉ')  
			  when [L].[ToDate] > @Now_Date then dbo.sc('ÛíÑ ãäÊåí ÇáãÏÉ') end as [ContractState]
		,[B].[Emirate] as [Emirate]
		,[B].[Suburb] as [Suburb]
		,[B].[Area] as [Area]
		,[B].[Street] as [Street]
		,[A].[FloorNo]
		,[Cu].[Name] as [CustName]
		,[Cu].[Mobile] as [CustPhone]
		,[Cu].Nationality
		,Cu.EMail as CustEMail
		,[L].[EditDate] as [ContractDateEdit]
		,[L].[DeliverDate] as [ContractDeliverDate]
		,[L].[FromDate] as [ContractDateBegin]
		,[L].[ToDate] as [ContractDateEnd]
		,[L].[ContractName]
		,[L].[ContractFinish]
		,[L].[Guid] as [ContractGuid]
		,[L].[NewState] 

		,[I].[Name]	
		,L.[SalesMan]
		,[ContractFinishDate]
		,[ResultingAmount]
		,[ResultingAmount2]
		,[Fine]
		,[ResultingAmount2] + [Fine] + [OtherFee]
		,[InsuranceValueOld]
		,[InsuranceValue]
		,[InsuranceValueOld] + [InsuranceValue]
		,[ResultingAmount] + [InsuranceValueOld] + [InsuranceValue] - [Fine] as [RentCleanValue]
		,[Note2] 
		,L.[Purpose]
		,L.Trademark
		,l.[CountOldContract]
		,(Select [ContractCount] From #CurrentContract where L.CustomerGuid = CustomerGuid and [L].ApartmentGuid = ApartmentGuid)as [CurrentContract]
		,l.AcquittancePrinted
		,L.AcquittancePrintDate
		,L.[AcquittancePrintedBy]
		,[L].[CostGuid]
		,L.[CustAccountGuid]
		,L.[ContractJudicial]
		,[L].[Mark]
		,[L].[isAutoRenewal]
		,L.[PrvContractFinishDate]
		,L.[PrvContractEndDate]

		,0 as [Kind]
		,0 as [Sort]
	from 
		#Building_CL [B]
		Inner join [vbApartment] [A] On [A].[BuildingGuid] = [B].[Guid]
		Inner join #LeaseApartment_Rent [L] On [A].[Guid] = [L].[ApartmentGuid] and [LeaseKind]  = 0
		inner join [Resource] [R] on [R].[Guid] = [B].[Guid]  and [R].[Kind] = 101 and [R].[spid] = @@Spid 
		--inner join [vwContractType] [T] on [T].[Guid] = [L].[TypeGuid]  
		--inner join [Resource] [R2] on [R2].[Guid] = [T].[Guid]  and [R2].[Kind] = 100 and [R2].[spid] = @@Spid 
		Inner join [#Customer] [Cu] on [Cu].[Guid] = [L].[CustomerGuid] 
		left join #RentInfo_CL [I] on [I].[Guid] = [L].[RentInfoGuid]
	where
		([A].[FlatKind] = @FlatKind or @FlatKind = '')
		and ([A].[ApartmentType] = @ApartmentType or @ApartmentType = '')
		and (A.Ban = @banRealty or @banRealty = 2)
		
	Set @Msg = @MsgConst +' '+ dbo.SC('ÚÞæÏ ÇáãÍáÇÊ')
	exec PrcSetProgrss @Msg, 100, 40

	--ÇíÌÇÑ ãÍá	
	if @p_RentShop = 1
	Insert into @Tbl 
	Select 
		[L].[ContractNo]
		,[A].[No] as [FlatNo]
		,[B].[Name] as [BuildingName]
		,[L].[Rent]
		,[L].[DiscountValue]
		,[L].[Rent] - [L].[DiscountValue]
		,[ShopKind] as [FlatKind]
		,A.[Description] as [FlatType]
		,[A].[Area] as [FlatArea]
		,Case when ([L].[ToDate] <= GetDate()) or ([L].[ContractFinish] = 1) then dbo.sc('ãäÊåí ÇáãÏÉ')  
			  when [L].[ToDate] > GetDate() then dbo.sc('ÛíÑ ãäÊåí ÇáãÏÉ') end as [ContractState]
		,[B].[Emirate] as [Emirate]
		,[B].[Suburb] as [Suburb]
		,[B].[Area] as [Area]
		,[B].[Street] as [Street]
		,'' as [FloorNo]
		,[Cu].[Name] as [CustName]
		,[Cu].[Mobile] as [CustPhone]
		,[Cu].Nationality
		,Cu.EMail as CustEMail
		,[L].[EditDate] as [ContractDateEdit]
		,[L].[DeliverDate] as [ContractDeliverDate]
		,[L].[FromDate] as [ContractDateBegin]
		,[L].[ToDate]as [ContractDateEnd]
		,[L].[ContractName]
		,[L].[ContractFinish]
		,[L].[Guid] as [ContractGuid]
		,[L].[NewState] 

		,[I].[Name]	
		,L.[SalesMan]
		,[ContractFinishDate]
		,[ResultingAmount]
		,[ResultingAmount2]
		,[Fine]
		,[ResultingAmount2] + [Fine] + [OtherFee]
		,[InsuranceValueOld]
		,[InsuranceValue]
		,[InsuranceValueOld] + [InsuranceValue]
		,[ResultingAmount] + [InsuranceValueOld] + [InsuranceValue] - [Fine]
		,Left([L].[Note2],255)
		,L.[Purpose]
		,L.Trademark
		,L.[CountOldContract]
		,(Select [ContractCount] From #CurrentContract where L.CustomerGuid = CustomerGuid and [L].ApartmentGuid = ApartmentGuid)as [CurrentContract]
		,l.[AcquittancePrinted]
		,L.AcquittancePrintDate
		,L.[AcquittancePrintedBy]
		,[L].[CostGuid]
		,L.[CustAccountGuid]
		,L.[ContractJudicial]
		,[L].[mark]
		,[L].[isAutoRenewal]
		,L.[PrvContractFinishDate]
		,l.[PrvContractEndDate]
		,1 as [Kind]
		,0 as [Sort]
	from 
		#Building_CL [B]
		Inner join [vwShopall] [A] On [A].[BuildingGuid] = [B].[Guid]
		inner join #LeaseApartment_Rent [L] On [A].[Guid] = [L].[ApartmentGuid] and [LeaseKind]  = 1
		Inner join [Resource] [R] on [R].[Guid] = [B].[Guid]  and [R].[Kind] = 101 and [R].[spid] = @@Spid 
		--inner  join [vwContractType] [T] on [T].[Guid] = [L].[TypeGuid]  
		--Inner join [Resource] [R2] on [R2].[Guid] = [T].[Guid]  and [R2].[Kind] = 100 and [R2].[spid] = @@Spid 
		inner  join [#Customer] [Cu] on [Cu].[Guid] = [L].[CustomerGuid] 
		left  join #RentInfo_CL [I] on [I].[Guid] = [L].[RentInfoGuid]
		and (A.Ban = @banRealty or @banRealty = 2)

	Set @Msg = @MsgConst +' '+ dbo.SC('ÚÞæÏ ÇáÔÞÞ')
	exec PrcSetProgrss @Msg, 100, 40

	--ÈíÚ ÔÞÉ
	if @p_SaleFlat = 1
	Insert into @Tbl 
	Select 
		[L].[ContractNo]
		,[A].[No] as [FlatNo]
		,[B].[Name] as [BuildingName]
		,[L].[Rent]
		,[L].[DiscountValue]
		,[L].[Rent] - [L].[DiscountValue]
		,[A].[FlatKind] as [FlatKind]
		,[A].[ApartmentType] as [FlatType]
		,[A].[Area] as [FlatArea]
		,Case when ([L].[ToDate] <= GetDate()) or ([L].[ContractFinish] = 1) then dbo.sc('ãäÊåí ÇáãÏÉ')  
			  when [L].[ToDate] > GetDate() then dbo.sc('ÛíÑ ãäÊåí ÇáãÏÉ') end as [ContractState]
		,[B].[Emirate] as [Emirate]
		,[B].[Suburb] as [Suburb]
		,[B].[Area] as [Area]
		,[B].[Street] as [Street]
		,[A].[FloorNo]
		,[Cu].[Name] as [CustName]
		,[Cu].[Mobile] as [CustPhone]
		,[Cu].[Nationality]
		,Cu.EMail as CustEMail
		,[L].[EditDate] as [ContractDateEdit]
		,[L].[DeliverDate] as [ContractDeliverDate]
		,[L].[FromDate] as [ContractDateBegin]
		,[L].[ToDate]as [ContractDateEnd]
		,[L].[ContractName]
		,Null as [ContractFinish]
		,[L].[Guid] as [ContractGuid]
		,-1 as [NewState] 

		,[I].[Name]	
		,L.[SalesMan]
		,[ContractFinishDate]
		,[ResultingAmount]
		,[ResultingAmount2]
		,[Fine]
		,[ResultingAmount2] + [Fine] + [OtherFee]
		,[InsuranceValueOld]
		,[InsuranceValue]
		,[InsuranceValueOld] + [InsuranceValue]
		,[ResultingAmount] + [InsuranceValueOld] + [InsuranceValue] - [Fine]
		,[Note2] 
		,L.[Purpose]
		,L.Trademark
		,L.[CountOldContract]
		,(Select [ContractCount] From #CurrentContract where L.CustomerGuid = CustomerGuid and [L].ApartmentGuid = ApartmentGuid)as [CurrentContract]
		,l.[AcquittancePrinted]
		,L.AcquittancePrintDate
		,L.[AcquittancePrintedBy]
		,[L].[CostGuid]
		,L.[CustAccountGuid]
		,L.[ContractJudicial]
		,[L].[Mark]
		,[L].[isAutoRenewal]
		,L.[PrvContractFinishDate]
		,L.[PrvContractEndDate]
		,2 as [Kind]
		,0 as [Sort]
	from 
		#Building_CL [B]
		Inner join [vwApartmentall] [A] On [A].[BuildingGuid] = [B].[Guid]
		Inner join #LeaseApartment_CL [L] On [A].[Guid] = [L].[ApartmentGuid] and [LeaseKind]  = 2
		Inner join [Resource] [R] on [R].[Guid] = [B].[Guid]  and [R].[Kind] = 101 and [R].[spid] = @@Spid 
		--inner join [vwContractType] [T] on [T].[Guid] = [L].[TypeGuid]  
		--Inner join [Resource] [R2] on [R2].[Guid] = [T].[Guid]  and [R2].[Kind] = 100 and [R2].[spid] = @@Spid 
		Inner join [#Customer] [Cu] on [Cu].[Guid] = [L].[CustomerGuid] 
		left join #RentInfo_CL [I] on [I].[Guid] = [L].[RentInfoGuid]
	where
		([A].[FlatKind] = @FlatKind or @FlatKind = '')
		and ([A].[ApartmentType] = @ApartmentType or @ApartmentType = '')
		and (
				(
					([L].[FromDate] >= @Date1 and @Datewith  = 0)
					and ([L].[FromDate] <= @Date2 and @Datewith  = 0 or @Date2 = '12/30/1899')
					
				)
				
				or
				(
					([L].[EditDate] >= @Date1 and @Datewith  = 3)
					and ([L].[EditDate] <= @Date2 and @Datewith  = 3 or @Date2 = '12/30/1899')
				)
				or
				(
					([L].[AcquittancePrintdate] >= @Date1 and @Datewith  = 4)
					and ([L].[AcquittancePrintdate] <= @Date2 and @Datewith  = 4 or @Date2 = '12/30/1899')
				)
				
				or
				(
					([L].LeaveDate >= @Date1 and @Datewith  = 5)
					and ([L].LeaveDate <= @Date2 and @Datewith  = 5 or @Date2 = '12/30/1899')
				)

				or
				(
					([L].DeliverDate >= @Date1 and @Datewith  = 6)
					and ([L].DeliverDate <= @Date2 and @Datewith  = 6 or @Date2 = '12/30/1899')
				)

				or @CKDate = 0
			) 
		and (@EndState = 2)
		and (L.AcquittancePrinted = @AcquittancePrinted or @AcquittancePrinted = 2)
		and (A.Ban = @banRealty or @banRealty = 2)

	Set @Msg = @MsgConst +' '+ dbo.SC('ÚÞæÏ ÇáãÍáÇÊ')
	exec PrcSetProgrss @Msg, 100, 45
	
	--ÈíÚ ãÍá
	if @p_SaleShop = 1
	Insert into @Tbl 
	Select 
		[L].[ContractNo]
		,[A].[No] as [FlatNo]
		,[B].[Name] as [BuildingName]
		,[L].[Rent]
		,[L].[DiscountValue]
		,[L].[Rent] - [L].[DiscountValue]
		,[ShopKind] as [FlatKind]
		,A.[Description] as [FlatType]
		,[A].[Area] as [FlatArea]
		,Case when ([L].[ToDate] <= GetDate()) or ([L].[ContractFinish] = 1) then dbo.sc('ãäÊåí ÇáãÏÉ')  
			  when [L].[ToDate] > GetDate() then dbo.sc('ÛíÑ ãäÊåí ÇáãÏÉ') end as [ContractState]
		,[B].[Emirate] as [Emirate]
		,[B].[Suburb] as [Suburb]
		,[B].[Area] as [Area]
		,[B].[Street] as [Street]
		,'' as [FloorNo]
		,[Cu].[Name] as [CustName]
		,[Cu].[Mobile] as [CustPhone]
		,[Cu].[Nationality]
		,Cu.EMail as CustEMail
		,[L].[EditDate] as [ContractDateEdit]
		,[L].[DeliverDate] as [ContractDeliverDate]
		,[L].[FromDate] as [ContractDateBegin]
		,[L].[ToDate]as [ContractDateEnd]
		,[L].[ContractName]
		,Null as [ContractFinish]
		,[L].[Guid] as [ContractGuid]
		,-1 as [NewState] 

		,[I].[Name]	
		,L.[SalesMan]
		,[ContractFinishDate]
		,[ResultingAmount]
		,[ResultingAmount2]
		,[Fine]
		,[ResultingAmount2] + [Fine] + [OtherFee]
		,[InsuranceValueOld]
		,[InsuranceValue]
		,[InsuranceValueOld] + [InsuranceValue]
		,[ResultingAmount] + [InsuranceValueOld] + [InsuranceValue] - [Fine]
		,[Note2] 
		,L.[Purpose]
		,L.Trademark
		,L.[CountOldContract]
		,(Select [ContractCount] From #CurrentContract where L.CustomerGuid = CustomerGuid and [L].ApartmentGuid = ApartmentGuid)as [CurrentContract]
		,l.[AcquittancePrinted]
		,L.AcquittancePrintDate
		,l.[AcquittancePrintedBy]
		,[L].[CostGuid]
		,L.[CustAccountGuid]
		,L.[ContractJudicial]
		,[L].[Mark]
		,[L].[isAutoRenewal]
		,L.[PrvContractFinishDate]
		,L.[PrvContractEndDate]
		,3 as [Kind]
		,0 as [Sort]
	from 
		#Building_CL [B]
		Inner join [vwShopAll] [A] On [A].[BuildingGuid] = [B].[Guid]
		Inner join #LeaseApartment_CL [L] On [A].[Guid] = [L].[ApartmentGuid] and [LeaseKind]  = 3
		Inner join [Resource] [R] on [R].[Guid] = [B].[Guid]  and [R].[Kind] = 101 and [R].[spid] = @@Spid 
		--inner join [vwContractType] [T] on [T].[Guid] = [L].[TypeGuid]  
		--Inner join [Resource] [R2] on [R2].[Guid] = [T].[Guid]  and [R2].[Kind] = 100 and [R2].[spid] = @@Spid 
		Inner join [#Customer] [Cu] on [Cu].[Guid] = [L].[CustomerGuid] 
		left join #RentInfo_CL [I] on [I].[Guid] = [L].[RentInfoGuid]
	where
		(
				(
					([L].[FromDate] >= @Date1 and @Datewith  = 0)
					and ([L].[FromDate] <= @Date2 and @Datewith  = 0 or @Date2 = '12/30/1899')
				)
				or
				(
					([L].[EditDate] >= @Date1 and @Datewith  = 3)
					and ([L].[EditDate] <= @Date2 and @Datewith  = 3 or @Date2 = '12/30/1899')
				)
				
				or
				(
					([L].[AcquittancePrintdate] >= @Date1 and @Datewith  = 4)
					and ([L].[AcquittancePrintdate] <= @Date2 and @Datewith  = 4 or @Date2 = '12/30/1899')
				)
				
				or
				(
					([L].LeaveDate >= @Date1 and @Datewith  = 5)
					and ([L].LeaveDate <= @Date2 and @Datewith  = 5 or @Date2 = '12/30/1899')
				)

				or
				(
					([L].DeliverDate >= @Date1 and @Datewith  = 6)
					and ([L].DeliverDate <= @Date2 and @Datewith  = 6 or @Date2 = '12/30/1899')
				)
				or @CKDate = 0
			) 

		and (@EndState = 2)
		and (L.AcquittancePrinted = @AcquittancePrinted or @AcquittancePrinted = 2)
		and (A.Ban = @banRealty or @banRealty = 2)

	Set @Msg = @MsgConst +' '+ dbo.SC('ÚÞæÏ ÇáãæÇÞÝ')
	exec PrcSetProgrss @Msg, 100, 45

	--ãæÞÝ
	if (@AcquittancePrinted = 2) and (@Purpose = '') and (@p_RentParking = 1) and ( @Trademark = '')
	Insert into @Tbl 
	Select 
		[L].[ContractNo]
		,[A].[No] as [FlatNo]
		,[B].[Name] as [BuildingName]
		,[L].[Rent]
		,0 as [DiscountValue]
		,[L].[Rent] - 0
		,[ParkingKind] as [FlatKind]
		,A.[Description] as [FlatType]
		,[A].[Area] as [FlatArea]
		,Case when ([L].[ToDate] <= GetDate()) or ([L].[ContractFinish] = 1) then dbo.sc('ãäÊåí ÇáãÏÉ')  
			  when [L].[ToDate] > GetDate() then dbo.sc('ÛíÑ ãäÊåí ÇáãÏÉ') end as [ContractState]
		,[B].[Emirate] as [Emirate]
		,[B].[Suburb] as [Suburb]
		,[B].[Area] as [Area]
		,[B].[Street] as [Street]
		,[A].[FloorNo]
		,[Cu].[Name] as [CustName]
		,[Cu].[Mobile] as [CustPhone]
		,[Cu].[Nationality]
		,Cu.EMail as CustEMail
		,[L].[EditDate] as [ContractDateEdit]
		,[L].[DeliverDate] as [ContractDeliverDate]
		,[L].[FromDate] as [ContractDateBegin]
		,[L].[ToDate]as [ContractDateEnd]
		,[T].[Name]
		,[L].[ContractFinish]
		,[L].[Guid] as [ContractGuid]
		,[L].[NewState] 

		,[I].[Name]	
		,S.Name as [SalesMan]	
		,[ContractFinishDate]
		,[ResultingAmount]
		,0 as [ResultingAmount2]
		,[Fine]
		,[Fine]
		,[InsuranceValueOld]
		,[InsuranceValue]
		,[InsuranceValueOld] + [InsuranceValue]
		,[ResultingAmount] + [InsuranceValueOld] + [InsuranceValue] - [Fine]
		,[Note2] 
		,''
		,''
		,0 as [CountOldContract]
		,0
		,0 as [AcquittancePrinted]
		,Null as AcquittancePrintDate
		,Null as [AcquittancePrintedBy]
		,[L].[CostGuid]
		,L.[CustAccountGuid]
		,L.[Judicial]
		,[L].[Mark]
		,[L].[isAutoRenewal]
		,(Select [ContractFinishDate] from ParkingContract where Guid = L.[PrvContractGuid]) as [PrvContractFinishDate]
		,(Select [ToDate] from ParkingContract where Guid = L.[PrvContractGuid]) as [PrvContractEndDate]

		,[R2].[spid]
		,0 as [Sort]
	from 
		#Building_CL [B]
		Inner join [vwParkingAll] [A] On [A].[BuildingGuid] = [B].[Guid]
		Inner join [vwParkingContract] [L] On [A].[Guid] = [L].[ParkingGuid]
		Inner join [Resource] [R] on [R].[Guid] = [B].[Guid]  and [R].[Kind] = 101 and [R].[spid] = @@Spid 
		inner join [vwContractType] [T] on [T].[Guid] = [L].[TypeGuid]  
		Inner join [Resource] [R2] on [R2].[Guid] = [T].[Guid]  and [R2].[Kind] = 100 and [R2].[spid] = @@Spid 
		Inner join [#Customer] [Cu] on [Cu].[Guid] = [L].[CustomerGuid] 
		left join #RentInfo_CL [I] on [I].[Guid] = [L].[RentInfoGuid]
		left join Salesman S on S.Guid = L.SalesManGuid
		left join [Lawsuit] W on W.ContractGuid = L.Guid
	where
		([L].[CustomerGuid] = @CustGuid or @CustGuid = 0x0)
		and 
			(
				((([L].[ToDate] <= GetDate()) or ([L].[ContractFinish] = 1)) and @ContractState = 0)
			  	or ([L].[ToDate] > GetDate() and @ContractState = 1)
				or @ContractState = 2
			)

		and (
				(
					([L].[FromDate] >= @Date1 and @Datewith  = 0)
					and ([L].[FromDate] <= @Date2 and @Datewith  = 0 or @Date2 = '12/30/1899')
				)
				or
				(
					([L].[ToDate] >= @Date1 and @Datewith  = 1)
					and ([L].[ToDate] <= @Date2 and @Datewith  = 1 or @Date2 = '12/30/1899')
				)

				or
				(
					([L].[ContractFinishDate] >= @Date1 and @Datewith  = 2)
					and ([L].[ContractFinishDate] <= @Date2 and @Datewith  = 2 or @Date2 = '12/30/1899')
					and ([L].[ContractFinish] = 1)
				)

				or
				(
					([L].[EditDate] >= @Date1 and @Datewith  = 3)
					and ([L].[EditDate] <= @Date2 and @Datewith  = 3 or @Date2 = '12/30/1899')
				)
				and @Datewith  <> 4 and @Datewith  <> 5

				or
				(
					([L].DeliverDate >= @Date1 and @Datewith  = 6)
					and ([L].DeliverDate <= @Date2 and @Datewith  = 6 or @Date2 = '12/30/1899')
				)

				or @CKDate = 0
			)

		and ([L].[RentInfoGuid] = @RentInfoGuid or @RentInfoGuid = 0x0)
		and ([L].[SalesManGuid] = @SalesManGuid or @SalesManGuid = 0x0)

		and ([L].[ContractFinish] = @EndState or @EndState = 2)
		and (
				([l].[Mark] = 1 and @Mark = 1)
				or ([l].[Mark] = 0 and @NotMark = 1)
			)
		and (L.PayType = @PayType or @PayType  = 4)

		and (
				(
					Case when ( isNull([L].[Judicial],0) = 1) or (W.Guid is Not Null ) then 1 else 0 end					
					= @Judicial					
				)
				and (
						(W.IsEnded = 1 and @LawsuitState = 0)
						or (W.IsEnded = 0 and @LawsuitState = 1)
						or @LawsuitState = 2
					)
			or @Judicial = 2)

		and (L.isAutoRenewal = @AutoRenewal or @AutoRenewal = 2)
		and (A.Ban = @banRealty or @banRealty = 2)
		and (
				(
					(
					([ContractFinishDate] < [ToDate] and @FinishDate = 0) or
					([ContractFinishDate] > [ToDate] and @FinishDate = 1) or
					([ContractFinishDate] = [ToDate] and @FinishDate = 2) 
					)
				and [ContractFinish] = 1
				)
				or @FinishDate = 3
			)
		and (
				(([L].Rent - [L].DiscountValue) <> 0 and @ContractValue = 0) or
				(([L].Rent - [L].DiscountValue) = 0 and @ContractValue = 1) or
				@ContractValue = 2
			)

	Set @Msg = @MsgConst +' '+ dbo.SC('ÚÞæÏ ÇáÃÑÇÖí')
	exec PrcSetProgrss @Msg, 100, 50

	--ÇáÃÑÖ
	if (@p_RentLand = 1 or @p_SaleLand = 1)
	Insert into @Tbl 
	Select 
		[L].[ContractNo]
		,[A].[Name] as [FlatNo]
		,'' as [BuildingName]
		,[L].[Rent]
		,[L].[DiscountValue]
		,[L].[Rent] - [L].[DiscountValue]
		,'' as [FlatKind]
		,'' as [FlatType]
		,[A].[Area] as [FlatArea]
		,Case when ([L].[ToDate] <= GetDate()) or ([L].[ContractFinish] = 1) then dbo.sc('ãäÊåí ÇáãÏÉ')  
			  when [L].[ToDate] > GetDate() then dbo.sc('ÛíÑ ãäÊåí ÇáãÏÉ') end as [ContractState]
		,'' as [Emirate]
		,'' as [Suburb]
		,'' as [Area]
		,'' as [Street]
		,'' as [FloorNo]
		,[Cu].[Name] as [CustName]
		,[Cu].[Mobile] as [CustPhone]
		,[Cu].[Nationality] 
		,Cu.EMail as CustEMail
		,[L].[EditDate] as [ContractDateEdit]
		,[L].[DeliverDate] as [ContractDeliverDate]
		,[L].[FromDate] as [ContractDateBegin]
		,[L].[ToDate] as [ContractDateEnd]
		,[T].[Name]
		,[ContractFinish]
		,[L].[Guid] as [ContractGuid]
		,[L].[NewState]
		,[I].[Name]
		,S.Name as [SalesMan]
		,[ContractFinishDate]
		,[ResultingAmount]
		,[ResultingAmount2]
		,[Fine]
		,[ResultingAmount2] + [Fine] + [OtherFee]
		,[InsuranceValueOld]
		,[InsuranceValue]
		,[InsuranceValueOld] + [InsuranceValue]
		,[ResultingAmount] + [InsuranceValueOld] + [InsuranceValue] - [Fine]
		,[Note2] 
		,L.[Purpose]
		,'' as Trademark 
		,0 as [CountOldContract]
		,0
		,l.[AcquittancePrinted]
		,L.AcquittancePrintDate
		,u.LoginName as [AcquittancePrintedBy]
		,[L].[CostGuid]
		,L.[CustAccountGuid]
		,L.[Judicial]
		,[L].[Mark]
		,[L].[isAutoRenewal]
		,(Select [ContractFinishDate] from [LandContract] where Guid = L.[PrvContractGuid]) as [PrvContractFinishDate]
		,(Select [ToDate] from [LandContract] where Guid = L.[PrvContractGuid]) as [PrvContractEndDate]
		,[R2].[spid]
		,0 as [Sort]
	from 
		[vwEarthAll] [A] 
		Inner join [vwLandContract] [L] On [A].[Guid] = [L].[LandGuid]
		inner join [vwContractType] [T] on [T].[Guid] = [L].[TypeGuid]  
		Inner join [Resource] [R2] on [R2].[Guid] = [T].[Guid]  and [R2].[Kind] = 100 and [R2].[spid] = @@Spid 
		Inner join [#Customer] [Cu] on [Cu].[Guid] = [L].[CustomerGuid] 
		left join #RentInfo_CL [I] on [I].[Guid] = [L].[RentInfoGuid]
		left join [Realty_Users] U on U.[Guid] = L.AcquittancePrintedByGuid
		left join Salesman S on S.Guid = L.SalesManGuid
		left join [Lawsuit] W on W.ContractGuid = L.Guid
	where
		([L].[CustomerGuid] = @CustGuid or @CustGuid = 0x0)
		and	([L].[SalesManGuid] = @SalesManGuid or @SalesManGuid = 0x0)
		and 
			(
				((([L].[ToDate] <= GetDate()) or ([L].[ContractFinish] = 1)) and @ContractState = 0)
			  	or ([L].[ToDate] > GetDate() and @ContractState = 1)
				or @ContractState = 2
			)
		and (
				(
					([L].[FromDate] >= @Date1 and @Datewith  = 0)
					and ([L].[FromDate] <= @Date2 and @Datewith  = 0 or @Date2 = '12/30/1899')
				)
				or
				(
					([L].[ToDate] >= @Date1 and @Datewith  = 1)
					and ([L].[ToDate] <= @Date2 and @Datewith  = 1 or @Date2 = '12/30/1899')
				)

				or
				(
					([L].[ContractFinishDate] >= @Date1 and @Datewith  = 2)
					and ([L].[ContractFinishDate] <= @Date2 and @Datewith  = 2 or @Date2 = '12/30/1899')
					and ([L].[ContractFinish] = 1)
				)

				or
				(
					([L].[EditDate] >= @Date1 and @Datewith  = 3)
					and ([L].[EditDate] <= @Date2 and @Datewith  = 3 or @Date2 = '12/30/1899')
				)
				or
				(
					([L].[AcquittancePrintdate] >= @Date1 and @Datewith  = 4)
					and ([L].[AcquittancePrintdate] <= @Date2 and @Datewith  = 4 or @Date2 = '12/30/1899')
				)

				or
				(
					([L].LeaveDate >= @Date1 and @Datewith  = 5)
					and ([L].LeaveDate <= @Date2 and @Datewith  = 5 or @Date2 = '12/30/1899')
				)
				
				or
				(
					([L].DeliverDate >= @Date1 and @Datewith  = 6)
					and ([L].DeliverDate <= @Date2 and @Datewith  = 6 or @Date2 = '12/30/1899')
				)

				or @CKDate = 0
			) 

		and ([L].[ContractFinish] = @EndState or @EndState = 2)
		and (
				([l].[Mark] = 1 and @Mark = 1)
				or ([l].[Mark] = 0 and @NotMark = 1)
			)
		and (L.PayType = @PayType or @PayType  = 4)
		and (L.AcquittancePrinted = @AcquittancePrinted or @AcquittancePrinted = 2)

		and (
				(
					Case when ( isNull([L].[Judicial],0) = 1) or (W.Guid is Not Null ) then 1 else 0 end					
					= @Judicial					
				)
				and (
						(W.IsEnded = 1 and @LawsuitState = 0)
						or (W.IsEnded = 0 and @LawsuitState = 1)
						or @LawsuitState = 2
					)
			or @Judicial = 2)

		and (L.Purpose = @Purpose or @Purpose = '') 
		and (L.Trademark = @Trademark or @Trademark = '')
		and (L.AcquittancePrintedByGuid = @AcquittancePrintedByUserGuid or @AcquittancePrintedByUserGuid = 0x0)
		and (l.isAutoRenewal = @AutoRenewal or @AutoRenewal = 2)
		and (A.Ban = @banRealty or @banRealty = 2)
		and (
				(
					(
					([ContractFinishDate] < [ToDate] and @FinishDate = 0) or
					([ContractFinishDate] > [ToDate] and @FinishDate = 1) or
					([ContractFinishDate] = [ToDate] and @FinishDate = 2) 
					)
				and [ContractFinish] = 1
				)
				or @FinishDate = 3
			)
		and (
				(([L].Rent - [L].DiscountValue) <> 0 and @ContractValue = 0) or
				(([L].Rent - [L].DiscountValue) = 0 and @ContractValue = 1) or
				@ContractValue = 2
			)
		
	Set @Msg = @MsgConst +' '+ dbo.SC('ÚÞæÏ ÇáÝáá')
	exec PrcSetProgrss @Msg, 100, 55

	--ÝíáÇ
	if (@p_RentVilla = 1 or @p_SaleVilla = 1)
	Insert into @Tbl 
	Select 
		[L].[ContractNo]
		,[A].[Name] as [FlatNo]
		,'' as [BuildingName]
		,[L].[Rent]
		,[L].[DiscountValue]
		,[L].[Rent] - [L].[DiscountValue]
		,'' as [FlatKind]
		,'' as [FlatType]
		,[A].LandArea as [FlatArea]
		,Case when ([L].[ToDate] <= GetDate()) or ([L].[ContractFinish] = 1) then dbo.sc('ãäÊåí ÇáãÏÉ')  
			  when [L].[ToDate] > GetDate() then dbo.sc('ÛíÑ ãäÊåí ÇáãÏÉ') end as [ContractState]
		,'' as [Emirate]
		,'' as [Suburb]
		,'' as [Area]
		,'' as [Street]
		,'' as [FloorNo]
		,[Cu].[Name] as [CustName]
		,[Cu].[Mobile] as [CustPhone]
		,[Cu].[Nationality]
		,Cu.EMail as CustEMail
		,[L].[EditDate] as [ContractDateEdit]
		,[L].[DeliverDate] as [ContractDeliverDate]
		,[L].[FromDate] as [ContractDateBegin]
		,[L].[ToDate] as [ContractDateEnd]
		,[T].[Name]
		,[ContractFinish]
		,[L].[Guid] as [ContractGuid]
		,[L].[NewState]  

		,[I].[Name]
		,S.name 
		,[ContractFinishDate]
		,[ResultingAmount]
		,[ResultingAmount2]
		,[Fine]
		,[ResultingAmount2] + [Fine] + [OtherFee]
		,[InsuranceValueOld]
		,[InsuranceValue]
		,[InsuranceValueOld] + [InsuranceValue]
		,[ResultingAmount] + [InsuranceValueOld] + [InsuranceValue] - [Fine]
		,[Note2] 
		,L.[Purpose]
		,L.Trademark
		,0 as [CountOldContract]
		,0
		,l.[AcquittancePrinted]
		,L.AcquittancePrintDate
		,u.LoginName as [AcquittancePrintedBy]
		,[L].[CostGuid]
		,L.[CustAccountGuid]
		,L.[Judicial]
		,[L].[Mark]
		,[L].[isAutoRenewal]
		,(Select [ContractFinishDate] from [LandContract] where Guid = L.[PrvContractGuid]) as [PrvContractFinishDate]
		,(Select [ToDate] from [LandContract] where Guid = L.[PrvContractGuid]) as [PrvContractEndDate]
		,[R2].[spid]
		,0 as [Sort]
	from 
		[vwVillaAll] [A] 
		Inner join [vwLandContract] [L] On [A].[Guid] = [L].[LandGuid]
		inner join [vwContractType] [T] on [T].[Guid] = [L].[TypeGuid]  
		Inner join [Resource] [R2] on [R2].[Guid] = [T].[Guid]  and [R2].[Kind] = 100 and [R2].[spid] = @@Spid 
		Inner join [#Customer] [Cu] on [Cu].[Guid] = [L].[CustomerGuid] 
		left join #RentInfo_CL [I] on [I].[Guid] = [L].[RentInfoGuid]
		left join [Realty_Users] U on U.[Guid] = L.AcquittancePrintedByGuid
		left join Salesman S on S.Guid = L.SalesManGuid
		left join [Lawsuit] W on W.ContractGuid = L.Guid
	where
		([L].[CustomerGuid] = @CustGuid or @CustGuid = 0x0)
		and	([L].[SalesManGuid] = @SalesManGuid or @SalesManGuid = 0x0)
		and 
			(
				((([L].[ToDate] <= GetDate()) or ([L].[ContractFinish] = 1)) and @ContractState = 0)
			  	or ([L].[ToDate] > GetDate() and @ContractState = 1)
				or @ContractState = 2
			)
		and (
				(
					([L].[FromDate] >= @Date1 and @Datewith  = 0)
					and ([L].[FromDate] <= @Date2 and @Datewith  = 0 or @Date2 = '12/30/1899')
				)
				or
				(
					([L].[ToDate] >= @Date1 and @Datewith  = 1)
					and ([L].[ToDate] <= @Date2 and @Datewith  = 1 or @Date2 = '12/30/1899')
				)

				or
				(
					([L].[ContractFinishDate] >= @Date1 and @Datewith  = 2)
					and ([L].[ContractFinishDate] <= @Date2 and @Datewith  = 2 or @Date2 = '12/30/1899')
					and ([L].[ContractFinish] = 1)
				)

				or
				(
					([L].[EditDate] >= @Date1 and @Datewith  = 3)
					and ([L].[EditDate] <= @Date2 and @Datewith  = 3 or @Date2 = '12/30/1899')
				)
				or
				(
					([L].[AcquittancePrintdate] >= @Date1 and @Datewith  = 4)
					and ([L].[AcquittancePrintdate] <= @Date2 and @Datewith  = 4 or @Date2 = '12/30/1899')
				)
				or
				(
					([L].LeaveDate >= @Date1 and @Datewith  = 5)
					and ([L].LeaveDate <= @Date2 and @Datewith  = 5 or @Date2 = '12/30/1899')
				)

				or
				(
					([L].DeliverDate >= @Date1 and @Datewith  = 6)
					and ([L].DeliverDate <= @Date2 and @Datewith  = 6 or @Date2 = '12/30/1899')
				)

				or @CKDate = 0
			) 

		and ([L].[ContractFinish] = @EndState or @EndState = 2)
		and (
				([l].[Mark] = 1 and @Mark = 1)
				or ([l].[Mark] = 0 and @NotMark = 1)
			)
		and (L.PayType = @PayType or @PayType  = 4)
		and (L.AcquittancePrinted = @AcquittancePrinted or @AcquittancePrinted = 2)

		and (
				(
					Case when ( isNull([L].[Judicial],0) = 1) or (W.Guid is Not Null ) then 1 else 0 end					
					= @Judicial					
				)
				and (
						(W.IsEnded = 1 and @LawsuitState = 0)
						or (W.IsEnded = 0 and @LawsuitState = 1)
						or @LawsuitState = 2
					)
			or @Judicial = 2)

		and (L.Purpose = @Purpose or @Purpose = '') 
		and (L.Trademark = @Trademark or @Trademark = '')
		and (L.AcquittancePrintedByGuid = @AcquittancePrintedByUserGuid or @AcquittancePrintedByUserGuid = 0x0)
		and (l.isAutoRenewal = @AutoRenewal or @AutoRenewal = 2)
		and (A.Ban = @banRealty or @banRealty = 2)
		and (
				(
					(
					([ContractFinishDate] < [ToDate] and @FinishDate = 0) or
					([ContractFinishDate] > [ToDate] and @FinishDate = 1) or
					([ContractFinishDate] = [ToDate] and @FinishDate = 2) 
					)
				and [ContractFinish] = 1
				)
				or @FinishDate = 3
			)
		and (
				(([L].Rent - [L].DiscountValue) <> 0 and @ContractValue = 0) or
				(([L].Rent - [L].DiscountValue) = 0 and @ContractValue = 1) or
				@ContractValue = 2
			)


	Set @Msg = @MsgConst +' '+ dbo.SC('ÇáÃÞÓÇØ')
	exec PrcSetProgrss @Msg, 100, 60

	Declare @PCheck Bit 
	Set @PCheck = 1	
	Declare @PNotCheck Bit 
	Set @PNotCheck = 0

	if @LinkCheck = 0 -- ÈÏæä ÇÞÓÇØ
	Delete @Tbl
	From
		@Tbl T
		inner join [Checks] C on C.ContractGuid = T.ContractGuid
	
	if @LinkCheck = 1 -- áåÇ ÇÞÓÇØ
	Delete @Tbl
	From
		@Tbl T
		left join [Checks] C on C.ContractGuid = T.ContractGuid
	where
		C.Guid is Null
		
	Set @Msg = @MsgConst +' '+ dbo.SC('ÇáÃæÑÇÞ ÇáãÇáíÉ')
	exec PrcSetProgrss @Msg, 100, 70

	-- ÇáÔíßÇÊ
	Create Table #Collection_CL
	(
		[ContractGuid] uniqueidentifier,
		[Total] Float,
		[PrvCollection] Float,
		[Collection] Float
	)
	
	Select
		p.Guid as [CheckGuid],
		[P].[ContractGuid],
		IsNull([P].[Value] * [P].[CurrencyVal],0) as [checkValue]
	into #Collection_Contract_Checks
	From
		[vbChecks] [P]
		inner join @Tbl [t] on [t].[ContractGuid] = [P].[ContractGuid]

	Select
		[CC].[ContractGuid],
		Sum(IsNull([C1].[Value] * [C1].[CurrencyVal],0)) as [Collection]
	Into #Collection_Sum_CL
	From
		#Collection_Contract_Checks CC
		inner join [ChecksCollection] [C1] on ([C1].[CheckGuid] = [CC].[CheckGuid] and [C1].[Kind] = 1)
		and (	(C1.date between @IncomeDate1 and @IncomeDate2) 
				or isNull(@IncomeActiveDate,0) = 0
			)
	Group By
		[CC].[ContractGuid]
		
	Select
		[CC].[ContractGuid],
		Sum(IsNull([C1].[Value] * [C1].[CurrencyVal],0)) as [Collection]
	Into #Collection_OldSum_CL
	From
		#Collection_Contract_Checks CC
		inner join [ChecksCollection] [C1] on ([C1].[CheckGuid] = [CC].[CheckGuid] and [C1].[Kind] = 1)
		and (C1.date < @IncomeDate1 )
	Group By
		[CC].[ContractGuid]

	insert into #Collection_CL
	([ContractGuid] ,[Total],[Collection])
	Select
		[ContractGuid],
		Sum(IsNull([CC].[checkValue],0)) as [Total],
		0
	From
		#Collection_Contract_Checks CC
	Group by
		[ContractGuid]
		
	update #Collection_CL Set [PrvCollection] = S.[Collection]
	From
		#Collection_CL C
		inner join #Collection_OldSum_CL S on C.ContractGuid = S.ContractGuid

	--update #Collection_CL Set [Collection] = IsNull([PrvCollection],0)

	update #Collection_CL Set [Collection] = S.[Collection] --+ IsNull(C.[PrvCollection],0)
	From
		#Collection_CL C
		inner join #Collection_Sum_CL S on C.ContractGuid = S.ContractGuid


	--update #Collection_CL Set [PrvCollection] = 22


	Set @Msg = @MsgConst +' '+ dbo.SC('ÇáÏÝÚÇÊ ÇáäÞÏíÉ')
	exec PrcSetProgrss @Msg, 100, 75

	-- ÇáÊÞÏí
	Select
		[P].[ContractGuid],
		Sum(IsNull([P].[Value] * [P].[CurrencyVal],0)) as [Cash]
	Into #Cash
	From
		[vwContractCachPayment] [P]
		inner join @Tbl [t] on [t].[ContractGuid] = [P].[ContractGuid] and P.AcGuid = t.AccountGuid
	where
		( ([P].date between @IncomeDate1 and @IncomeDate2) or IsNull(@IncomeActiveDate,0) = 0)
	Group By
		[P].[ContractGuid]	


	-- ÇáÊÞÏí
	Select
		[P].[ContractGuid],
		Sum(IsNull([P].[Value] * [P].[CurrencyVal],0)) as [Cash]
	Into #PrvCash
	From
		[vwContractCachPayment] [P]
		inner join @Tbl [t] on [t].[ContractGuid] = [P].[ContractGuid] and P.AcGuid = t.AccountGuid
	where
		( [P].date < @IncomeDate1)
	Group By
		[P].[ContractGuid]	

	Set @Msg = @MsgConst +' '+ dbo.SC('ÃÑÕÏÉ ÇáÒÈÇÆä')
	exec PrcSetProgrss @Msg, 100, 80

	Select
		En.AcGuid,
		SUM(En.debit - en.Credit) as [Balance]
	into #CustBalance
	From
		(Select distinct AccountGuid from @Tbl ) T
		inner join DEntry En on En.AcGuid = T.AccountGuid
	Group By
		En.AcGuid

	Set @Msg = @MsgConst +' '+ dbo.SC('ÇáãæÇÞÝ ÇáãÑÊÈØÉ')
	exec PrcSetProgrss @Msg, 100, 85


	--ÇáãæÇÞÝ ÇáãÑÊÈØÉ 
	Select
		parentGuid,
		S.No as ParkingNo
	into #LinkParkingContract
	from
		LinkParkingContract L
		inner join ParkingContract p on p.Guid = L.ParkingContractGuid
		inner join [Parking] [S] on [S].[Guid] = [P].[ParkingGuid]
		inner join @Tbl T on t.ContractGuid = L.ParentGuid
		
	Declare @LinkParkingContract Table 
	(
		ParentGuid uniqueidentifier,
		ParkingNo Varchar(8000)
	)
	
	Create Table #LinkParkingContract_1
	(
		ParkingNo Varchar(8000)
	)
	
	
	Declare @P_ContractGuid uniqueidentifier
	DECLARE @cursor_Name CURSOR 
	Set @cursor_Name = CURSOR FAST_FORWARD FOR 

	SELECT Distinct parentGuid
	FROM #LinkParkingContract
	
	OPEN @cursor_Name
	FETCH NEXT FROM @cursor_Name INTO @P_ContractGuid
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
	  
	  Delete #LinkParkingContract_1
	  
	  insert into #LinkParkingContract_1
	  Select ParkingNo from #LinkParkingContract where ParentGuid = @P_ContractGuid
	  
	  insert into @LinkParkingContract
	  exec [PrcTabletoString] @P_ContractGuid, '#LinkParkingContract_1', 'ParkingNo'
		
	  FETCH NEXT FROM @cursor_Name INTO @P_ContractGuid
	
	END
	
	CLOSE @cursor_Name
	DEALLOCATE @cursor_Name
	-----------------
	
	Set @Msg = ''
	exec PrcSetProgrss @Msg, 100, 90

	Select 
		[E].*,
		
		Case when isnUll([ContractFinish],0) = 0 then dbo.sc('áÇ') else dbo.sc('äÚã') end As [ContractFinishStr],
		Case when isnUll([NewState],0) = 0 then dbo.sc('ÌÏíÏ') 
			 when isnUll([NewState],0) = 1 then dbo.sc('ÊÌÏíÏ') 
		else 
			''
		end As [NewStateStr],
		
		LC.ParkingNo as LinkParkingNO,
		
		isNull([C].[PrvCollection],0) + isNull(ph.[Cash],0) as [PrvCollection],
		isNull([C].[Collection],0) as [Collection],
		isNull([C].[Total],0) - isNull([C].[Collection],0) - IsNull([PrvCollection],0) as [CheckNotCollection],
		isNull([h].[Cash],0) as [Cash],
		IsNull([C].[Collection],0) + IsNull([h].[Cash],0) + IsNull([ph].[Cash],0) + IsNull([PrvCollection],0) as [TotalPays],
		isNull(E.ValueAfterDiscount ,0) - IsNull([C].[Collection],0) - IsNull([PrvCollection],0) - IsNull([h].[Cash],0) - isNull(ph.[Cash],0) as [ContractRest],
		--isNull(E.[RentCleanValue],0)  as [ContractRest],
		CAST(0 as Float) as [CustBalance],
				
		Case when [R].[ObjGuid] is null then @PNotCheck
			 when [R].[ObjGuid] is not null  then @PCheck end as [Check],
		1 as [DoOperation]
	into #ContractList_4
	From
		@Tbl [E]
		left join #Collection_CL [C] on [E].[ContractGuid] = [C].[ContractGuid]
		left join #Cash [h] on [E].[ContractGuid] = [h].[ContractGuid]
		left join #PrvCash [Ph] on [E].[ContractGuid] = [Ph].[ContractGuid]
		left join [RepCheck] [R] on [R].[ObjGuid] = [E].[ContractGuid] and [R].[IdReport] = 2000
		left join @LinkParkingContract LC on LC.ParentGuid = E.ContractGuid
	where
		(
			([R].[ObjGuid] is not null and @ShowIsCheck = 1)
			or
			([R].[ObjGuid] is null and @ShowIsNotCheck = 1)
		)
		and (Isnull([E].[NewState],0) = @NewState or @NewState = 2)
		
	Set @Msg = ''
	exec PrcSetProgrss @Msg, 100, 95
	
	update	
		#ContractList_4
	set
		custBalance = C.Balance
	From
		#ContractList_4 E
		inner join #CustBalance C on C.AcGuid = E.AccountGuid 
	
	Set @Msg = ''
	exec PrcSetProgrss @Msg, 0, 0
	
	Select
		Collection,*
	from
		#ContractList_4
	Order By 
		[Sort],
		[BuildingName],
		[FlatNo]
		
	
	Select
		SUM(Value) as [Value],
		SUM(ValueAfterDiscount) as ValueAfterDiscount,
		SUM(ResultingAmount) as ResultingAmount,
		SUM(Fine) as Fine,
		SUM(TotalIncom) as TotalIncom,
		SUM(TotalInsuranse) as TotalInsuranse,
		SUM(RentCleanValue) as RentCleanValue
	From
		#ContractList_4
	where
		[Sort] = 0
		

GO
/****** Object:  StoredProcedure [dbo].[PrcContractWorkFlow]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcContractWorkFlow]
(
	@RealtyNo varchar(255) = '',

	@Printed int = 0,
	@Certification int = 0,
	
	@CustStep1 int = 0,
	@CustStep2 int = 0,
	
	@CompStep1 int = 0,
	@CompStep2 int = 0,
	@CompStep3 int = 0,
	@CompStep4 int = 0,
	
	@CompStep5 int = 0,
	@CompStep6 int = 0,
	@CompStep7 int = 0,

	@ActiveBuildingList Bit = 0,
	
	@ShowIsCheck Bit = 1,
	@ShowIsNotCheck Bit = 1,
	@ContractState int = 0
)
  
as
	Select
		[C].[BuildingName], 
		[C].[FlatNo],
		[C].[FloorNo],
		[C].[ContractNo],
		[C].[CustName], 

		Case 
			when [Printed] = 1 then dbo.sc('Êã ØÈÇÚÉ ÇáÚÞÏ')  
			when [Printed] = 2 then dbo.sc('Êã ØÈÇÚÉ æ ÑÞÉ ÊãÏíÏ')  
			when [Printed] = 3 then dbo.sc('ÛíÑ ãÍÏÏ')  
			when isNull([Printed],-1) = -1 then dbo.sc('ÛíÑ ãÍÏÏ')  
		end 
		as [Printed],
		Case when [F].[Certification] = 1 then dbo.SC('ÒÈæä') when [F].[Certification] = 1 then dbo.SC('ÔÑßÉ') end as [Certification],

		Case when [F].[CustStep1] = 1 then dbo.SC('äÚã') else dbo.SC('áÇ') end [CustStep1],
		CustStepDate1,
		Case when [F].[CustStep2] = 1 then dbo.SC('äÚã') else dbo.SC('áÇ') end [CustStep2],
		CustStepDate2,

		Case when [F].[CompStep1] = 1 then dbo.SC('äÚã') else dbo.SC('áÇ') end [CompStep1],
		CompStepDate1,
		Case when [F].[CompStep2] = 1 then dbo.SC('äÚã') else dbo.SC('áÇ') end [CompStep2],
		CompStepDate2,
		Case when [F].[CompStep3] = 1 then dbo.SC('äÚã') else dbo.SC('áÇ') end [CompStep3],
		CompStepDate3,
		Case when [F].[CompStep4] = 1 then dbo.SC('äÚã') else dbo.SC('áÇ') end [CompStep4],
		CompStepDate4,

		Case when [F].[CompStep5] = 1 then dbo.SC('äÚã') else dbo.SC('áÇ') end [CompStep5],
		CompStepDate5,
		Case when [F].[CompStep6] = 1 then dbo.SC('äÚã') else dbo.SC('áÇ') end [CompStep6],
		CompStepDate6,
		Case when [F].[CompStep7] = 1 then dbo.SC('äÚã') else dbo.SC('áÇ') end [CompStep7],
		CompStepDate7,

		[C].[Guid] as [ContractGuid],
		
		Case when [R].[ObjGuid] is null then 0 
			 when [R].[ObjGuid] is not null  then 1 end as [Check],
		C.BuildingGuid,
		F.Guid 
	into #R_ContractWorkFlow
	from
		[ContractWorkFlow] F
		inner join vwAllContract C on C.Guid = f.ContractGuid
		inner join [Resource] [RS] on [RS].[Guid] = [C].[TypeGuid] and [RS].[Spid] = @@Spid and [RS].[Kind] = 100
		--left join [Resource] [Rb] on [Rb].[Guid] = [C].[BuildingGuid] and [RS].[Spid] = @@Spid and [RS].[Kind] = 101
		left join [RepCheck] [R] on [R].[ObjGuid] = [C].[Guid] and [R].[IdReport] = 4000
	where
		(C.FlatNo = @RealtyNo or @RealtyNo = '')
		and (F.Printed = @Printed +1 or @Printed = 3)
		and (F.Certification = @Certification+1 or @Certification = 2)
		and (F.CustStep1 = @CustStep1 or @CustStep1 = 2)
		and (F.CustStep2 = @CustStep2 or @CustStep2 = 2)
	
		and (F.CompStep1 = @CompStep1 or @CompStep1 = 2)
		and (F.CompStep2 = @CompStep2 or @CompStep2 = 2)
		and (F.CompStep3 = @CompStep3 or @CompStep3 = 2)
		and (F.CompStep4 = @CompStep4 or @CompStep4 = 2)
		
		and (F.CompStep5 = @CompStep5 or @CompStep5 = 2)
		and (F.CompStep6 = @CompStep6 or @CompStep6 = 2)
		and (F.CompStep7 = @CompStep7 or @CompStep7 = 2)

		and (
			([R].[ObjGuid] is not null and @ShowIsCheck = 1)
			or
			([R].[ObjGuid] is null and @ShowIsNotCheck = 1)
			)
		and (
				([C].[ContractFinish] = 0 and @ContractState = 2)
				or 
				([C].[ContractFinish] = 1 and @ContractState = 1)
				or 
				@ContractState = 0
			)
		
	--ãÚÇáÌÉ ÇáÃÈäíÉ
	if @ActiveBuildingList = 1
	begin
		Delete #R_ContractWorkFlow
		From
			#R_ContractWorkFlow [L]
			left join [Resource] [R] on [R].[Guid] = [L].[BuildingGuid] and [R].[Kind] = 101 and [R].[Spid] = @@Spid 
		where
			[R].[Guid] Is Null
			and L.BuildingGuid <> 0x0
	end

	Select * from #R_ContractWorkFlow

GO
/****** Object:  StoredProcedure [dbo].[PrcCreateAssetsDepreciationEntry]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcCreateAssetsDepreciationEntry]
(
	@Guid uniqueidentifier = 'E032C97D-7824-4087-8698-D0E2748F555C'
)
  
as
	Declare @CeNumber Int
	Select
		@CeNumber = Number
	From
		HEntry
	where
		Guid = @Guid
		
	if isNull(@CeNumber,0) = 0
	Set @CeNumber = (Select isNull(MAX(Number),0) + 1 From HEntry)
	

	Delete
		HEntry
	where
		Guid = @Guid
		
	if Not exists(Select Top 1 Guid from [AssetsDepreciation] where Guid = @Guid and CreateEntry = 1 and IsRounded = 0) return
	
	Insert Into [HEntry]
	([Guid],[SecLvl],[Number],[Date], [CurrencyGuid], [CurrencyVal], [Note], [ParentKind], [BranchGuid], [IsPosted])
	Select
		@Guid,
		[SecLvl],
		@CeNumber,
		[Date],
		[CurrencyGuid],
		[CurrencyVal],
		[Note],
		158, 
		Null,
		1
	From
		[AssetsDepreciation]
	where
		Guid = @Guid
			

	Declare @DetailNum Int
	Set @DetailNum = 0

	Insert into [DEntry]
 	([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
	Select
		@Guid,
		D.Number,
		S.DepreciationAccountGuid,
		D.DepreciationValue,
		0,
		A.CurrencyGUID,
		A.CurrencyVal,
		A.DebitCostGUID,
		S.DepreciationTotalAccountGuid,
		A.[Note]
	From
		[Assets] S
		inner join [AssetsDepreciationDetail] D on D.AssetsGuid = S.Guid
		inner join [AssetsDepreciation] A on A.Guid = D.ParentGuid
	where
		D.[ParentGuid] = @Guid
				
	Insert into [DEntry]
 	([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
	Select
		@Guid,
		D.Number + 1,
		S.DepreciationTotalAccountGuid,
		0,
		D.DepreciationValue,
		A.CurrencyGUID,
		A.CurrencyVal,
		A.CreditCostGUID,
		S.DepreciationAccountGuid,
		A.[Note]
	From
		[Assets] S
		inner join [AssetsDepreciationDetail] D on D.AssetsGuid = S.Guid
		inner join [AssetsDepreciation] A on A.Guid = D.ParentGuid
	where
		D.[ParentGuid] = @Guid
		
	Select * from [HEntry] where Guid = @Guid
	Select * from [DEntry] where parentGuid = @Guid
			

GO
/****** Object:  StoredProcedure [dbo].[PrcCreateAssetsEntry]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcCreateAssetsEntry]
(
	@Guid uniqueidentifier = 'C5D0C5DC-964A-4596-AE42-761427E00350'
)
  
as
	Declare @CeNumber Int
	Select
		@CeNumber = Number
	From
		HEntry
	where
		Guid = @Guid
		
	if isNull(@CeNumber,0) = 0
	Set @CeNumber = (Select isNull(MAX(Number),0) + 1 From HEntry)

	Delete
		HEntry
	where
		Guid = @Guid
		
	if Not exists(Select Top 1 Guid from Assets where Guid = @Guid and CreateEntry = 1) return
	
	Declare @AccountGuid uniqueidentifier, 
			@ObverseAcGuid uniqueidentifier
			
	Select
		@AccountGuid = A.AsstesAccountGuid,
		@ObverseAcGuid = A.EnterAccountGuid
	From
		Assets A
	where
		A.[Guid] = @Guid
				

	Insert Into [HEntry]
	([Guid],[SecLvl],[Number],[Date], [CurrencyGuid], [CurrencyVal], [Note], [ParentKind], [BranchGuid], [IsPosted])
	Select
		@Guid,
		[SecLvl],
		@CeNumber,
		[EnterDate],
		[CurrencyGuid],
		[CurrencyVal],
		[EnterNote],
		150, 
		Null,
		1
	From
		[Assets]
	where
		Guid = @Guid

	Declare @DetailNum Int
	Set @DetailNum = 0

	Insert into [DEntry]
 	([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
	Select
		@Guid,
		@DetailNum,
		@AccountGuid,
		A.[EnterValue],
		0,
		A.CurrencyGUID,
		A.CurrencyVal,
		[EnterCostGuid],
		@ObverseAcGuid,
		A.[EnterNote]
	From
		[Assets] A
	where
		A.[Guid] = @Guid
				
	Set @DetailNum = @DetailNum + 1
	
	Insert into [DEntry]
 	([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
	Select
		@Guid,
		@DetailNum,
		@ObverseAcGuid,
		0,
		A.[EnterValue],
		A.CurrencyGUID,
		A.CurrencyVal,
		A.[EnterCreditCostGuid],
		@AccountGuid,
		A.[EnterNote]
	From
		[Assets] A
	where
		A.[Guid] = @Guid

	Select * from [HEntry] where Guid = @Guid
	Select * from [DEntry] where parentGuid = @Guid
			

GO
/****** Object:  StoredProcedure [dbo].[PrcCreateAssetsOperationEntry]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcCreateAssetsOperationEntry]
(
	@Guid uniqueidentifier = 'C5D0C5DC-964A-4596-AE42-761427E00350'
)
  
as
	Declare @CeNumber Int
	Select
		@CeNumber = Number
	From
		HEntry
	where
		Guid = @Guid
		
	if isNull(@CeNumber,0) = 0
	Set @CeNumber = (Select isNull(MAX(Number),0) + 1 From HEntry)
	

	Delete
		HEntry
	where
		Guid = @Guid
		
	Declare @AccountGuid uniqueidentifier, 
			@ObverseAcGuid uniqueidentifier
			
	
	if exists(Select Top 1 IsRounded From [AssetsOperation] where  [Guid] = @Guid and isNull(IsRounded,0) = 1)
	begin
		Select * from [HEntry] where Guid = @Guid
		return
	end
			
	Declare @Flag int
	Select @Flag = [Flag] from [AssetsOperation] where Guid = @Guid
	
	if @Flag = 1
	Select
		@AccountGuid = S.AsstesAccountGuid,
		@ObverseAcGuid = A.AccountGuid
	From
		[AssetsOperation] A
		inner join Assets S on S.Guid = A.AssetsGuid
	where
		A.[Guid] = @Guid
				
	if @Flag = 2
	Select
		@AccountGuid = A.AccountGuid,
		@ObverseAcGuid = S.AsstesAccountGuid
	From
		[AssetsOperation] A
		inner join Assets S on S.Guid = A.AssetsGuid
	where
		A.[Guid] = @Guid

	if @Flag = 3
	Select
		@AccountGuid = S.ExpenseAccountGuid,
		@ObverseAcGuid = A.AccountGuid
	From
		[AssetsOperation] A
		inner join Assets S on S.Guid = A.AssetsGuid
	where
		A.[Guid] = @Guid

	Insert Into [HEntry]
	([Guid],[SecLvl],[Number],[Date], [CurrencyGuid], [CurrencyVal], [Note], [ParentKind], [BranchGuid], [IsPosted])
	Select
		@Guid,
		[SecLvl],
		@CeNumber,
		[Date],
		[CurrencyGuid],
		[CurrencyVal],
		[Note],
		150+Flag, --150, 151, 152
		Null,
		1
	From
		[AssetsOperation]
	where
		Guid = @Guid
			

	Declare @DetailNum Int
	Set @DetailNum = 0

	Insert into [DEntry]
 	([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
	Select
		@Guid,
		@DetailNum,
		@AccountGuid,
		A.[Value],
		0,
		A.CurrencyGUID,
		A.CurrencyVal,
		DebitCostGuid,
		@ObverseAcGuid,
		A.[Note]
	From
		[AssetsOperation] A
	where
		A.[Guid] = @Guid
				
	Set @DetailNum = @DetailNum + 1
	
	Insert into [DEntry]
 	([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
	Select
		@Guid,
		@DetailNum,
		@ObverseAcGuid,
		0,
		A.[Value],
		A.CurrencyGUID,
		A.CurrencyVal,
		CreditCostGuid,
		@AccountGuid,
		A.[Note]
	From
		[AssetsOperation] A
	where
		A.[Guid] = @Guid

	Select * from [HEntry] where Guid = @Guid
	Select * from [DEntry] where parentGuid = @Guid
			

GO
/****** Object:  StoredProcedure [dbo].[PrcCreateBeginEntry]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcCreateBeginEntry]
(
	@ToDataBase Varchar(256) = 'A222',
	@CostDeailt Bit = 0,
	@AcCloseFinal uniqueIdentifier = '8B3414C8-D3ED-4A1B-B3EA-42BB5D9CE5DF',
	@Date Datetime = '1/1/2017',
	@UntilDate  Datetime = '12/31/2016'
)
  
as

	Set Nocount on 
	
	exec ('exec '+@ToDataBase+'..[PrcAddUser]')

	Declare @Msg varchar(255)
	Set @Msg = dbo.SC('ÇáÞíÏ ÇáÅÝÊÊÇÍí') + ' '+ dbo.SC('ÇáÚãáÇÊ')
	exec PrcSetProgrss @Msg, 100, 0

	--ÌáÈ ÇáÚãáÇÊ ãÚ ÂÎÑ ÓÚÑ
	Create Table #Currency
	(
		[CurrencyGuid] uniqueidentifier,
		[CurrencyVal] Float
	)

	Declare @Guid uniqueidentifier
	DECLARE cursor_Name CURSOR FAST_FORWARD FOR 
	SELECT [Guid]
	FROM [Currency]
	
	OPEN cursor_Name
	FETCH NEXT FROM cursor_Name INTO @Guid
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
	  insert into #Currency
		Select 
			@Guid as [CurrencyGuid],
			(Select Top 1 [Rate] From [ChangeCurrencyRate] where [CurrencyGuid] =  @Guid Order By [Date] Desc, [Number] Desc)
	  		  
	  FETCH NEXT FROM cursor_Name INTO @Guid
	END
	
	CLOSE cursor_Name
	DEALLOCATE cursor_Name

	update #Currency
	Set [CurrencyVal] = [C].[CurrencyVal]
	From
		#Currency [C1]
		inner join [Currency] [C] on [C].[Guid] = [C1].[CurrencyGuid]
	where
		[C1].[CurrencyVal] is Null

	update #Currency Set [CurrencyVal] = 1
	where
		[CurrencyVal]  = 0

	Set @Msg = dbo.SC('ÇáÞíÏ ÇáÅÝÊÊÇÍí') + ' '+ dbo.SC('ÇáÍÓÇÈÇÊ')
	exec PrcSetProgrss @Msg, 100, 10

	-- ßÇãá ÇáÍÓÇÈÇÊ
	Select 
		[Ac].*
	into #Ac
	From
		[vwMovingAccount] [Ac]	
		inner join [Resource] [R] on [R].[Guid] = [Ac].[FinalGuid] and [spid] = @@Spid
	where
		[Type] = 0


	Set @Msg = dbo.SC('ÇáÞíÏ ÇáÅÝÊÊÇÍí') + ' '+ dbo.SC('ÞÑÇÁÉ ÇáÞíæÏ')
	exec PrcSetProgrss @Msg, 100, 30
	-- ÍÑßÇÊ ÇáÞíæÏ

	Select 
		@Date as [Date]
		,[En].[AcGuid]
		,[Ac2].[Code]
		,[M].[BranchGuid]
		,Case when @CostDeailt = 1 then [En].[CostGuid] end as [CostGuid]
		,IsNull(Sum([En].[Debit]*
			Case when [En].[CurrencyGuid] = [Ac2].[CurrencyGuid] then 1 
			else [En].[CurrencyVal] / [C].[CurrencyVal] end
			),0) as [Debit]
		,IsNull(Sum([En].[Credit]*
			Case when [En].[CurrencyGuid] = [Ac2].[CurrencyGuid] then 1 
			else [En].[CurrencyVal] / [C].[CurrencyVal] end
			),0) as [Credit]
		,[Ac2].[CurrencyGuid]
		,[C].[CurrencyVal]
	into #Ent
	from 
		[DEntry] [En]
		inner Join [vwEntry] [M] on [M].[Guid] = [En].[ParentGuid]
		inner join #Ac [Ac2] on [Ac2].[Guid] = [En].[AcGuid]
		inner join #Currency [C] on [C].[CurrencyGuid] = [Ac2].[CurrencyGuid]
	where 
		([En].[IsVisible] = 1 or [En].[CurrencyGuid] = [Ac2].[CurrencyGuid])
		and ([Type] = 0)
		and (M.[Date] <= @UntilDate)
	Group By
		[En].[AcGuid]
		,[M].[BranchGuid]
		,Case when @CostDeailt = 1 then [En].[CostGuid] end
		,[Ac2].[CurrencyGuid]
		,[C].[CurrencyVal]
		,[Ac2].[Code]

	--Select * from #Ent where Code = '114'

	Create Table #Entry
	(
		[Id] int Identity(1,1)
		,[Date] DateTime
		,[AcGuid] uniqueidentifier
		,[BranchGuid]  uniqueidentifier
		,[CostGuid]  uniqueidentifier
		,[Debit] Float
		,[Credit] Float
		,[CurrencyGuid]  uniqueidentifier
		,[CurrencyVal] Float
	)

	insert into #Entry
	([Date], [AcGuid], [BranchGuid], [CostGuid], [Debit], [Credit], [CurrencyGuid], [CurrencyVal])
	Select 
		[Date], [AcGuid], [BranchGuid], [CostGuid], 
		Case when Sum([Debit]) > Sum([Credit]) then  Sum([Debit] - [Credit]) else 0 end as [Debit],
		Case when Sum([Credit]) > Sum([Debit]) then  Sum([Credit] - [Debit]) else 0 end as [Credit],
		[CurrencyGuid], [CurrencyVal]
	from 
		#Ent
	Group By		
		[Credit],[Date],[Code], [AcGuid], [BranchGuid], [CostGuid], [CurrencyGuid], [CurrencyVal]
	Having 
		Sum([Debit] - [Credit]) <> 0
	Order By
		[Credit], [Code]
		

	Declare @EntryGuid Varchar(256)
	Set @EntryGuid = '111C583B-8377-1118-111C-111AAE645086'

	Declare @Sql Varchar(5000)
	Set @Sql = '
	delete '+@ToDataBase+'..[Hentry]
	where [Guid] ='''+@EntryGuid+''''
	
	Print @Sql
	Exec(@Sql)
	
	Set @Msg = dbo.SC('ÇáÞíÏ ÇáÅÝÊÊÇÍí') + ' '+ dbo.SC('ÅäÔÇÁ ÇáÞíÏ')
	exec PrcSetProgrss @Msg, 100, 60

	Set @Sql = '
	insert into '+@ToDataBase+'..[Hentry]
		([Guid], [Number], [SecLvl], [Date], [CurrencyGuid], [CurrencyVal], [Note], [ParentKind], [UserGuid], [BranchGuid], [IsPosted])
	Select
		'''+@EntryGuid+''', 
		1 as [Number], 
		0 as [SecLvl], 
		(Select Top 1 [date] From #Entry) as [date], 
		(Select Top 1 [CurrencyGuid] From #Entry Order By [Debit]) As [CurrencyGuid], 
		(Select Top 1 [CurrencyVal] From #Entry Order By [Debit]) as [CurrencyVal], 
		''ÇáÞíÏ ÇáÅÝÊÊÇÍí'' as [Note], 
		0 as [ParentKind], 
		Null as [UserGuid], 
		Null as [BranchGuid],
		1'
	
	Print @Sql
	Exec(@Sql)

	Set @Msg = dbo.SC('ÇáÞíÏ ÇáÅÝÊÊÇÍí') + ' '+ dbo.SC('ÅäÔÇÁ ÇáÞíÏ')
	exec PrcSetProgrss @Msg, 100, 70

	Set @Sql = '
	insert into '+@ToDataBase+'..DEntry
	([Number], [Guid], [ParentGuid], [AcGuid], [Debit], [Credit], [CurrencyGuid], [CurrencyVal], [ObverseAcGuid], [CostGuid], [Note], [IsVisible])
	Select
		E.[Id], 
		Newid() as [Guid], 
		'''+@EntryGuid+''' as [ParentGuid], 
		E.[AcGuid], 
		E.[Debit], 
		E.[Credit], 
		E.[CurrencyGuid], 
		E.[CurrencyVal], 
		Null as [ObverseAcGuid], 
		E.[CostGuid], 
		''ÇáÞíÏ ÇáÅÝÊÊÇÍí'' as [Note], 
		1 as [IsVisible]
	From
		#Entry E
		inner join '+@ToDataBase+'..[Account] Ac on Ac.Guid = E.[AcGuid]
	Order By [id]
	'

--	Print @Sql
	Exec(@Sql)
	
	Set @Msg = dbo.SC('ÇáÞíÏ ÇáÅÝÊÊÇÍí') + ' '+ dbo.SC('ÅÛáÇÞ ÇáÞíÏ')
	exec PrcSetProgrss @Msg, 100, 90

	--ÅÛáÇÞ ÇáÞíÏ 
	Declare @Cur Uniqueidentifier
			,@CurVal Float
	Set @Cur = (Select [CurrencyGuid] From [Account] where [Guid] = @AcCloseFinal)
	Set @CurVal =  (Select [CurrencyVal] From #Currency where [CurrencyGuid] = @Cur)

	
	Set @Sql = '
	insert into '+@ToDataBase+'..DEntry
	([Number], [Guid], [ParentGuid], [AcGuid], [Debit], [Credit], [CurrencyGuid], [CurrencyVal], [ObverseAcGuid], [CostGuid], [Note], [IsVisible])
	Select
		(Select Max([Id]) + 1 From #Entry), 
		Newid() as [Guid], 
		'''+@EntryGuid+''' as [ParentGuid], 
		'''+Cast(@AcCloseFinal as Varchar(256))+''', 
		(Select Case when Sum([Debit]*[CurrencyVal]/'+Cast(@CurVal as Varchar(256))+') < Sum([Credit]*[CurrencyVal]/'+Cast(@CurVal as Varchar(256))+') then Sum([Credit]*[CurrencyVal]/'+Cast(@CurVal as Varchar(256))+') - Sum([Debit]*[CurrencyVal]/'+Cast(@CurVal as Varchar(256))+') else 0 end From #Entry) as [Debit], 
		(Select Case when Sum([Debit]*[CurrencyVal]/'+Cast(@CurVal as Varchar(256))+') > Sum([Credit]*[CurrencyVal]/'+Cast(@CurVal as Varchar(256))+') then Sum([Debit]*[CurrencyVal]/'+Cast(@CurVal as Varchar(256))+') - Sum([Credit]*[CurrencyVal]/'+Cast(@CurVal as Varchar(256))+') else 0 end From #Entry) as [Credit],
		'''+Cast(@Cur as Varchar(256))+''' as [CurrencyGuid], 
		'+Cast(@CurVal as Varchar(256))+' as [CurrencyVal], 
		Null as [ObverseAcGuid], 
		Null as [CostGuid], 
		''ÇáÞíÏ ÇáÅÝÊÊÇÍí'' as [Note], 
		1 as [IsVisible]
	'
	
	Print @Sql
	Exec(@Sql)
	
	Set @Msg = dbo.SC('ÇáÞíÏ ÇáÅÝÊÊÇÍí') + ' '+ dbo.SC('ÅäÊåì')
	exec PrcSetProgrss @Msg, 0, 0

	Select 1 as [end]
	
	--Select * from A116..DEntry where ParentGuid = @EntryGuid


GO
/****** Object:  StoredProcedure [dbo].[PrcCreateBeginMat]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcCreateBeginMat]
(
	@ToDataBase Varchar(256) = 'StriktDb20143',
	@BillType uniqueidentifier = '1F0A773B-A080-474A-B76B-31C4F04947C8',

	@PriceMode int = 3,
	@SpecificPrice int = 0,
		
	@Date Datetime = '1/1/2014'
)
  
as
	Set Nocount on 
	
	declare @DefCurrency Varchar(256)
	Select @DefCurrency = Value from dmd_const where vName = 'DefCurrency'
	
	if dbo.fnobjectExists('##BillStore') = 1
	Drop Table ##BillStore
	
	if dbo.fnobjectExists('##MatPrice') = 1
	Drop Table ##MatPrice
	
	Create Table ##BillStore
	(
		id int identity(1,1),
		[BillGuid] uniqueidentifier default newid(),
		[StoreGuid] uniqueidentifier
	)

	insert into ##BillStore ([StoreGuid])
	Select Distinct [StoreGuid] from [MatBalance]

	Declare @Sql Varchar(5000)
	
--	Print @Sql
	Exec(@Sql)
	
	
	--ÇáÊÓÚíÑ
	Select	Distinct
		ParentGuid as MatGuid,
		mt.[DefUnity]
	into #MatDis
	From	
		[MatBalance] v
		inner join Mat mt on v.ParentGuid = mt.Guid
		
	Create Table ##MatPrice
	(
		[MatGuid] uniqueidentifier,
		[Price] Float
	)
	
	insert into ##MatPrice
	Select F.[MatGuid], Price 
	from 
		dbo.[FnMatPrice] (0x0, 1, 0,@PriceMode, @SpecificPrice) F
		inner join #MatDis Mt on Mt.MatGuid = F.MatGuid
	
	
	Set @Sql = '
	insert into '+@ToDataBase+'..[Bill]
	([Number], [Guid], [SecLvl], [TypeGuid], [Date], [CustGuid], [CurrencyGuid], [CurrencyVal], [PayType], [StoreGuid], [CustAccGuid], [CostGuid], [BranchGuid], [Class], [Note], [EntryGuid], [EntryNumber], [CheckCreateEntry], [ItemsTotal], [ItemsDiscount], [ItemsExtra], [BuExtra], [BuDiscount], [BuOnly], [IsPosted])
	Select
		id as [Number], 
		[BillGuid] as [Guid], 
		1 as [SecLvl], 
		'''+Cast(@BillType as Varchar(255))+''' as [TypeGuid], 
		'''+CAST(@Date as Varchar(255))+''' as [Date], 
		Null as [CustGuid], 
		'''+@DefCurrency+''' as [CurrencyGuid], 
		1 as [CurrencyVal], 
		0 as [PayType], 
		[StoreGuid] as [StoreGuid], 
		null as [CustAccGuid], 
		null as [CostGuid], 
		null as [BranchGuid], 
		'''' as [Class], 
		dbo.sc(''ÈÖÇÚÉ Ãæá ÇáãÏÉ'') as [Note], 
		Null as [EntryGuid], 
		0 as [EntryNumber], 
		0 as [CheckCreateEntry], 
		0 as [ItemsTotal], 
		0 as [ItemsDiscount], 
		0 as [ItemsExtra], 
		0 as [BuExtra], 
		0 as [BuDiscount], 
		'''' as [BuOnly], 
		1 as [IsPosted]
	from
		##BillStore'

--	Print @Sql
	Exec(@Sql)

	Declare @StoreGuid uniqueidentifier,
			@BillGuid uniqueidentifier
	
	DECLARE @cursor_Name CURSOR 
	Set @cursor_Name = CURSOR FAST_FORWARD FOR 

	SELECT [BillGuid] ,[StoreGuid] FROM ##BillStore

	OPEN @cursor_Name
	FETCH NEXT FROM @cursor_Name INTO @BillGuid, @StoreGuid
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
			Set @Sql = '
			insert into '+@ToDataBase+'..[BillDetail]
			([Number], [ParentGuid], [MatGuid], [Qty], [Qty2], [Qty3], [Price], [TotalPrice], [Bonus], [StoreGuid], [DiscountPercent], [Discount], [ExtraPercent], [Extra], [Note], [ProductDate], [ExpireDate], [CostGuid], [Class], [Length], [width], [height], [Count], [ItemUnit])
			Select
				1 as [Number], 
				S.BillGuid as [ParentGuid], 
				b.[ParentGuid] as [MatGuid], 
				b.[Qty], 
				b.[Qty2], 
				b.[Qty3], 
				P.Price as [Price], 
				P.Price * b.Qty as [TotalPrice], 
				0 as [Bonus], 
				b.[StoreGuid], 
				0 as [DiscountPercent], 
				0 as [Discount], 
				0 as [ExtraPercent], 
				0 as [Extra], 
				dbo.sc(''ÈÖÇÚÉ Ãæá ÇáãÏÉ'') as [Note], 
				Null as [ProductDate], Null as [ExpireDate], 
				Null as [CostGuid], 
				'''' as [Class], 
				0 as [Length], 
				0 as [width], 
				0 as [height], 
				0 as [Count], 
				1 as [ItemUnit]
			From
				[MatBalance] B
				inner join ##BillStore S on S.StoreGuid = b.StoreGuid and S.BillGuid = '+''''+Cast(@BillGuid as varchar(255))+'''
				inner join ##MatPrice P on P.MatGuid = b.[ParentGuid]
			where
				(Qty > 0)

			'
		
			--Print @Sql
			Exec(@Sql)
		
			Set @Sql = 
			'exec '+@ToDataBase+'.dbo.PrcBill_BillPost '+''''+Cast(@BillGuid as varchar(255))+''''
		
		--	Print @Sql
			Exec(@Sql)

	  FETCH NEXT FROM @cursor_Name INTO @BillGuid, @StoreGuid
	
	END
	
	CLOSE @cursor_Name
	DEALLOCATE @cursor_Name

	Drop Table ##BillStore
	Drop Table ##MatPrice

GO
/****** Object:  StoredProcedure [dbo].[PrcCreateBillEntry]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcCreateBillEntry]
(
	@BillGuid uniqueidentifier = '5848B689-85F9-4104-B9FE-D1209086D636'
)
  
AS
	Set NoCount on 
	Declare 
			@EnNum int,
			@EnGuid [uniqueidentifier]

	-- ÇáÞíÏ ÇáÓÇÈÞ

	Select 
		@EnNum = isnull([EntryNumber],0)
		,@EnGuid = isnull([EntryGuid],0x0)
	From
		[Bill]
	where
		[Guid] = @BillGuid

	
	if isnull(@EnNum,0) = 0
	begin	
		Select @EnNum = IsNull(Max([Number]),0) + 1 from [HEntry]
	END
	
	if isnull(@EnGuid,0x0) = 0x0
	Set @EnGuid = Newid()


	-- ÍÐÝ ÇáÞíæÏ ÇáÞÏíãÉ
	Update Bill Set EntryGuid = Null
	where
		[Guid] = @BillGuid	
	
	Delete
		[HEntry]
	where
		[Guid] = @EnGuid

	if Exists(Select Number From HEntry where Number = @EnNum )
	Select @EnNum = IsNull(Max([Number]),0) + 1 from [HEntry]
		
	--return
	DECLARE 
		@Kind int,
		@CreateEntry BIT,
		@AutoPostedEntry Bit,
		@CheckCreateEntry Bit,
		@DefMatAccountGuid uniqueidentifier,
		@CustAccountGuid uniqueidentifier,
		@DetailEntryByMat bit
		
	SELECT	TOP 1
		@CreateEntry = t.[EntryCreated],
		@AutoPostedEntry = t.[EntryCreatedAuto],
		@CheckCreateEntry = b.[CheckCreateEntry],
		@AutoPostedEntry = T.[AutoPostedEntry],
		@DefMatAccountGuid = T.DefMatAccountGuid,
		@CustAccountGuid = b.CustAccGuid,
		@Kind = Case when T.[BillKind] = 0 or T.[BillKind] = 3 or T.[BillKind] = 4 then 0 else 1 end,
		@DetailEntryByMat = T.DetailEntryByMat
	FROM
		[BillType] T
		inner join Bill B on B.TypeGuid = t.Guid
	WHERE
		b.Guid = @BillGuid
	
	if (@CreateEntry = 1) and (@CheckCreateEntry = 1)
	begin
			
			Declare @Bi_Tbl Table 
			(
				[CustAccGuid] uniqueidentifier,
				[Value] Float,
				[CurrencyGuid] uniqueidentifier,
				[CurrencyVal] Float,
				[CostGuid] uniqueidentifier,
				[Note] varchar(255)
			)
			
			insert into @Bi_Tbl
			Select
				[B].CustAccGuid,
				SUM(D.[TotalPrice] - D.Discount + D.Extra),
				[B].[CurrencyGuid],
				[B].[CurrencyVal],
				Case when D.[CostGuid] is Null then [B].[CostGuid] else D.[CostGuid] end,
				[B].[Note]
			From
				[Bill] B
				inner join BillDetail D on D.ParentGuid = B.Guid
			where
				B.[Guid] = @BillGuid
			Group By
				B.[CurrencyGuid],
				B.[CurrencyVal],
				Case when D.[CostGuid] is Null then [B].[CostGuid] else D.[CostGuid] end,
				B.CustAccGuid,
				[B].[Note],
				Case when @DetailEntryByMat = 1 then MatGuid else 0x0 end

			--Select * from @Bi_Tbl
			
			Declare @Di_Tbl Table 
			(
				[AccountGuid] uniqueidentifier,
				[Discount] Float,
				[extra] Float,
				[CurrencyGuid] uniqueidentifier,
				[CurrencyVal] Float,
				obverseAccountGuid uniqueidentifier,
				[CostGuid] uniqueidentifier,
				[Note] varchar(255)
			)
			
			insert into @Di_Tbl
			Select
				[D].AccountGuid,
				IsNull(D.Discount,0) as Discount,
				isNull(Extra,0) as Extra,
				[D].[CurrencyGuid],
				[D].[CurrencyVal],
				D.[obverseAccountGuid],
				[D].[CostGuid],
				[D].[Note]
			From
				BillDiscount D 
			where
				D.[ParentGuid] = @BillGuid
				and IsNull(D.Discount,0) + isNull(Extra,0) > 0
				
			Declare @SumDiscountExtra Float
			Select
				@SumDiscountExtra = IsNull(Sum(discount - extra),0)
			from
				@Di_Tbl
			
			Insert Into [HEntry]
			([Guid],[SecLvl],[Number],[Date], [CurrencyGuid], [CurrencyVal], [Note], [ParentKind], [BranchGuid], [IsPosted])
			Select
				@EnGuid,
				[SecLvl],
				@EnNum,
				[Date],
				[CurrencyGuid], 
				[CurrencyVal], 
				[Note],
				22 as [ParentKind], 
				[BranchGuid], 
				@AutoPostedEntry as [IsPosted]
			From	
				Bill
			where
				[Guid] = @BillGuid
				
			Declare @DetailNum Int
			Set @DetailNum = 0
		
			--Select @Kind, * from @Bi_Tbl
			Create Table #DEntry
			(
				[Number] int,
				[ParentGuid]  [uniqueidentifier] ,
				[AcGuid] [uniqueidentifier] ,
				[Debit] [Float],
				[Credit] [Float],
				[CurrencyGuid] [uniqueidentifier]  ,
				[CurrencyVal] Float,
				[ObverseAcGuid]  [uniqueidentifier] ,
				[CostGuid] [uniqueidentifier] ,
				[Note] Varchar(256)
			)
			
			Insert into #DEntry
		 	([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
			Select
				@EnGuid,
				@DetailNum,
				Case when @Kind = 0 then @DefMatAccountGuid
					 when @Kind = 1 then B.CustAccGuid end,
				B.Value,
				0,
				B.[CurrencyGuid],
				B.[CurrencyVal],
				B.[CostGuid],
				Case when @Kind = 1 then @DefMatAccountGuid
					 when @Kind = 0 then B.CustAccGuid end,
				[B].[Note]
			From
				@Bi_Tbl B
				
			
				
			Set @DetailNum = @DetailNum + 1
			
			Insert into #DEntry
		 	([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
			Select
				@EnGuid,
				@DetailNum,
				Case when @Kind = 0 then B.CustAccGuid
					 when @Kind = 1 then @DefMatAccountGuid end,
				0,
				B.Value,
				B.[CurrencyGuid],
				B.[CurrencyVal],
				B.[CostGuid],
				Case when @Kind = 1 then B.CustAccGuid
					 when @Kind = 0 then @DefMatAccountGuid end,
				[B].[Note]
			From
				@Bi_Tbl B
				
			
			
			--Set @DetailNum = @DetailNum + (Select COUNT(*) From BillDetail where ParentGuid = @BillGuid)
			-- ÇáÍÓãíÇÊ æ ÇáÇÖÇÝÇÊ
			Set @DetailNum = @DetailNum + 1
			Insert into #DEntry
		 	([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
			Select
				@EnGuid,
				@DetailNum,
				B.AccountGuid,
					 
				Case when @Kind = 0 then Extra
					 when @Kind = 1 then Discount end,
					 
				Case when @Kind = 1 then Extra
					 when @Kind = 0 then Discount end,
					 
				B.[CurrencyGuid],
				B.[CurrencyVal],
				B.[CostGuid],
				case when b.obverseAccountGuid IS Null then @CustAccountGuid else b.obverseAccountGuid  end,
				[B].[Note]
			From
				@Di_Tbl B
			
			Set @DetailNum = @DetailNum + 1
			Insert into #DEntry
		 	([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
			Select
				@EnGuid,
				@DetailNum,
				case when b.obverseAccountGuid IS Null then @CustAccountGuid else b.obverseAccountGuid  end,
					 
				Case when @Kind = 1 then Extra
					 when @Kind = 0 then Discount end,
					 
				Case when @Kind = 0 then Extra
					 when @Kind = 1 then Discount end,

				B.[CurrencyGuid],
				B.[CurrencyVal],
				B.[CostGuid],
				case when b.obverseAccountGuid IS Null then @DefMatAccountGuid else b.AccountGuid  end,
				
				[B].[Note]
			From
				@Di_Tbl B
			
			
			Update Bill Set EntryGuid = @EnGuid, EntryNumber = @EnNum
			where
				[Guid] = @BillGuid
		end

		insert into DEntry
		([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
		Select 
			@EnGuid,
			min([Number]),
			d.AcGuid , 
			Case when Sum(Debit-Credit) > 0 then Sum(Debit-Credit) else 0 end as Debit,
			Case when Sum(Debit-Credit) < 0 then -Sum(Debit-Credit) else 0 end as Credit,
			[CurrencyGuid],
			[CurrencyVal],
			[CostGuid],
			[ObverseAcGuid],
			[Note]
		from 
			#DEntry D 
		Group by
			d.AcGuid,
			[CurrencyGuid],
			[CurrencyVal],
			[CostGuid],
			[ObverseAcGuid],
			[Note],
			Case when @DetailEntryByMat = 1 then (Debit-Credit) else 0 end

		Select 
			[AcGuid],
			ac.Name , 
			Case when Sum(Debit-Credit) > 0 then Sum(Debit-Credit) else 0 end as Debit,
			Case when Sum(Debit-Credit) < 0 then -Sum(Debit-Credit) else 0 end as Credit,
			[ObverseAcGuid]
		from 
			#DEntry D 
			inner join Account ac on ac.Guid = d.AcGuid
		Group by
			[AcGuid],ac.Name, [ObverseAcGuid],
			Case when @DetailEntryByMat = 1 then (Debit-Credit) else 0 end


GO
/****** Object:  StoredProcedure [dbo].[PrcCreateChecksEntry]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcCreateChecksEntry]
(
	@CheckGuid uniqueidentifier = '{B20CA0BC-65D0-48B7-B43A-7B94678DB245}'
)
  
AS
	--return
	Set NoCount on 
	Declare 
			@EnNum int,
			@EnGuid [uniqueidentifier]

	-- ÇáÞíÏ ÇáÓÇÈÞ
	Select 
		@EnNum = isnull(H.Number ,0)
		,@EnGuid = isnull([EntryGuid],0x0)
	From
		[LinkEntry_Checks] L
		inner join HEntry H on H.Guid = L.EntryGuid
	where
		[CheckGuid] = @CheckGuid
		and [Kind] = 1600		
	
	if isnull(@EnNum,0) = 0
	begin	
		Select @EnNum = IsNull(Max([Number]),0) + 1 from [HEntry]
		Set @EnGuid = Newid()
	END

	--return
	-- ÍÐÝ ÇáÞíæÏ ÇáÞÏíãÉ
	Delete 
		HEntry 
	From
		HEntry E 
		inner join [LinkEntry_Checks] L on L.EntryGuid = E.Guid
	where
		[kind] = 1600
		and L.[CheckGuid] = @CheckGuid

	Delete
		[LinkEntry_Checks]
	where
		[CheckGuid] = @CheckGuid
		AND [kind] = 1600

		
	DECLARE 
		@CreateEntry BIT,
		@AutoPostedEntry Bit,
		@Kind int

	SELECT	TOP 1
		@CreateEntry = [CreatedEntry],
		@AutoPostedEntry = [AutoPostedEntry],
		@Kind = [CheckKind]
	FROM
		[CheckType]
	WHERE
		Guid = (		
				Select 
					[TypeGuid] 
				From 
					[Checks]
				WHERE
					[Guid] =@CheckGuid
				)


	DECLARE
		@SecLvl Int,
		@mark Bit,
		@TypeGuid [uniqueidentifier],
		@NO Varchar(256),
		@InternalNO Varchar(256),
		@Value Float,
		@CurrencyGUID [uniqueidentifier],
		@CurrencyVal [float],
		@Date DateTime,
		@DueDate DateTime,
		@NoneDueDate bit,
		@BankName Varchar(256),
		@Account [uniqueidentifier],
		@CostGuid [uniqueidentifier],
		@ObverseAccount [uniqueidentifier],
		@CostObverseGuid [uniqueidentifier],
		@Beneficiary Varchar(256),
		@Note Varchar(256),
		@Note2 Varchar(256),
		@ContractGuid [uniqueidentifier],
		@UserGuid [uniqueidentifier],
		@BranchGuid [uniqueidentifier],
		@CheckCreateEntry bit

	SELECT 
		@SecLvl = [SecLvl],
		@Mark = [Mark],
		@TypeGuid = [TypeGuid],
		@NO = [NO],
		@InternalNO = [InternalNO],
		@Value = [Value],
		@CurrencyGUID = [CurrencyGUID],
		@CurrencyVal = [CurrencyVal],
		@Date = [Date],
		@DueDate = [DueDate],
		@BankName = [BankName],
		@Account = [Account],
		@CostGuid = [CostGuid],
		@ObverseAccount = [ObverseAccount],
		@CostObverseGuid = [CostObverseGuid],
		@Beneficiary = [Beneficiary],
		@Note = [Note],
		@Note2 = [Note2],
		@ContractGuid  = [ContractGuid],
		@UserGuid = [UserGuid],
		@BranchGuid = [BranchGuid],
		@CheckCreateEntry = [CheckCreateEntry]
	FROM 
		[Checks]
	WHERE
		[Guid] = @CheckGuid
		

	if Not ((@CreateEntry = 1) and (@CheckCreateEntry = 1) )
	return
	

	Insert Into [HEntry]
	([Guid],[SecLvl],[Mark],[Number],[Date], [CurrencyGuid], [CurrencyVal], [Note], [ParentKind], [BranchGuid], [IsPosted])
	Select
		@EnGuid,
		@SecLvl,
		@Mark,
		@EnNum,
		@Date,
		@CurrencyGuid,
		@CurrencyVal,
		'',
		1600,
		@BranchGuid,
		@AutoPostedEntry
				
	Declare @DetailNum Int
	Set @DetailNum = 0
			
	Create Table [#ChecksAccountDetail]
	(
		[Number] int,
		[Kind] int,
		[AccountGuid] [uniqueidentifier] ,
		[ObverseAccountGuid] [uniqueidentifier] ,
		[CostGuid] [uniqueidentifier] ,
		[Value] float,
		[Note] varchar(255)
	)

	insert into #ChecksAccountDetail
	([Number] ,[Kind] ,[AccountGuid] ,[CostGuid] ,[Value] ,[Note])
	Select
		[Number] ,[Kind] ,[AccountGuid] ,[CostGuid] ,[Value] ,[Note]
	From
		ChecksAccountDetail
	where
		ParentGuid = @CheckGuid
		and Kind = 1
		
	if Not exists(Select Top 1 * from #ChecksAccountDetail where Kind = 1)
	insert into #ChecksAccountDetail
	([Number] ,[Kind] ,[AccountGuid] ,[CostGuid] ,[Value] ,[Note])
	Select
		[Number] ,1 ,@Account ,[CostGuid] ,[Value]  ,@Note
	From
		ChecksCostDetail
	where
		ParentGuid = @CheckGuid
		and Kind = 1

	--Select * from #ChecksAccountDetail

	if Not exists(Select Top 1 * from #ChecksAccountDetail where Kind = 1)
	insert into #ChecksAccountDetail
	([Number] ,[Kind] ,[AccountGuid] ,[CostGuid] ,[Value] ,[Note])
	Select
		1 ,1 ,@Account ,@CostGuid ,@Value  ,@Note


	--Kind 2
	insert into #ChecksAccountDetail
	([Number] ,[Kind] ,[AccountGuid] ,[CostGuid] ,[Value] ,[Note])
	Select
		[Number] ,[Kind] ,[AccountGuid] ,[CostGuid] ,[Value] ,[Note]
	From
		ChecksAccountDetail
	where
		ParentGuid = @CheckGuid
		and Kind = 2
		
	if Not exists(Select Top 1 * from #ChecksAccountDetail where Kind = 2)
	insert into #ChecksAccountDetail
	([Number] ,[Kind] ,[AccountGuid] ,[CostGuid] ,[Value] ,[Note])
	Select
		[Number] ,2 ,@ObverseAccount ,[CostGuid] ,[Value]  ,@Note
	From
		ChecksCostDetail
	where
		ParentGuid = @CheckGuid
		and Kind = 2

	if Not exists(Select Top 1 * from #ChecksAccountDetail where Kind = 2)
	insert into #ChecksAccountDetail
	([Number] ,[Kind] ,[AccountGuid] ,[CostGuid] ,[Value] ,[Note])
	Select
		1 ,2 ,@ObverseAccount ,@CostObverseGuid ,@Value  ,@Note2
	---------------			
		
	Declare @RC int
	
	--ÇáÍÓÇÈ ÇáãÞÇÈá
	Select Distinct AccountGuid into #RK2 From #ChecksAccountDetail where Kind = 2
	Select @RC = Count(*) From #RK2
	
	Set @ObverseAccount = Null
	if @RC = 1
	Set @ObverseAccount = (Select Top 1 AccountGuid From #ChecksAccountDetail where Kind = 2)
	
	Update #ChecksAccountDetail Set ObverseAccountGuid = @ObverseAccount where Kind = 1
	-----------------
	

	--ÇáÍÓÇÈ ÇáãÞÇÈá
	Select Distinct AccountGuid into #RK1 From #ChecksAccountDetail where Kind = 1
	Select @RC = Count(*) From #RK1
	
	Set @ObverseAccount = Null
	if @RC = 1
	Set @ObverseAccount = (Select Top 1 AccountGuid From #ChecksAccountDetail where Kind = 1)
	
	Update #ChecksAccountDetail Set ObverseAccountGuid = @ObverseAccount where Kind = 2
	-----------------

	--Select * from #ChecksAccountDetail
		
	-- ÇáãÏíä
	Insert into [DEntry]
	([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
	Select
		@EnGuid,
		[Number],
		[AccountGuid],
		[Value],
		0,
		@CurrencyGuid,
		@CurrencyVal,
		[CostGuid],
		[ObverseAccountGuid],
		[Note]
	From
		#ChecksAccountDetail
	where
		Case when @Kind = 0 then 2 else 1 end = Kind
		
	-- ÏÇÆä
	Insert into [DEntry]
	([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
	Select
		@EnGuid,
		99+[Number],
		[AccountGuid],
		0,
		[Value],
		@CurrencyGuid,
		@CurrencyVal,
		[CostGuid],
		[ObverseAccountGuid],
		[Note]
	From
		#ChecksAccountDetail
	where
		Case when @Kind = 0 then 1 else 2 end = Kind
		
		
	INSERT INTO [LinkEntry_Checks]
	(
		[CheckGuid],
		[EntryGuid],
		[EntryNum],
		[Kind]
	)
	SELECT	
		@CheckGuid,
		@EnGuid,
		@EnNum,
		1600

	


GO
/****** Object:  StoredProcedure [dbo].[PrcCreateContractFlatShopEntry]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcCreateContractFlatShopEntry]
(	
	@ContractGuid uniqueidentifier = '9D865944-064A-4D89-8C95-5927CCB15E56',
	@MaxDate Datetime = 43098
)
  
AS
	Set NoCount on 
	
	Declare 
			@EnNum int,
			@EnGuid [uniqueidentifier]

	-- ÇáÞíÏ ÇáÓÇÈÞ
	Select 
		@EnNum = isnull([Number],0)
		,@EnGuid = isnull([Guid],0x0)
	From
		[HEntry]
	where
		[Guid] = @ContractGuid

	if isnull(@EnNum,0) = 0
	begin	
		Select @EnNum = IsNull(Max([Number]),0) + 1 from [HEntry]
	END
	
	if isnull(@EnGuid,0x0) = 0x0
	Set @EnGuid = @ContractGuid

	if Exists(Select Number From HEntry where Number = @EnNum and [Guid] <> @EnGuid)
	Select @EnNum = IsNull(Max([Number]),0) + 1 from [HEntry]

	-- ÍÐÝ ÇáÞíæÏ ÇáÞÏíãÉ
	Delete
		[DEntry]
	where
		[ParentGuid] = @EnGuid

	Delete
		[HEntry]
	where
		[Guid] = @EnGuid

		
	--return
	DECLARE 
		@FlatNo Varchar(256),
		@FlatOwner int,
		@EntryDate Datetime,
		@CreateEntry bit,
		@MoveCost bit,
		@MoveCostCredit bit,
		@MoveCostWithIncom bit,
		@MoveCostWithInconEndContract bit,
		@MoveCostWithFineEndContract bit,
		@MoveCostWithInsurance bit,
		@MoveCostWithContractPrice bit,
		@MoveCostWithCertificat bit,
		@MoveCostWithFee bit,
		@MoveCostWithclientComm bit,
		@MoveCostWithOwnerComm bit,
		@MoveCostWithDiscount bit,
		@MoveCostWithDiscountCredit bit,
		@MoveCostWithIncomCredit bit,
		@MoveCostWithInconEndContractCredit bit,
		@MoveCostWithFineEndContractCredit bit,
		@MoveCostWithInsuranceCredit bit,
		@MoveCostWithContractPriceCredit bit,
		@MoveCostWithCertificatCredit bit,
		@MoveCostWithFeeCredit bit,
		@MoveCostWithclientCommCredit bit,
		@MoveCostWithOwnerCommCredit bit,
		@SecLvl int,
		@CurrencyGuid uniqueidentifier,
		@CurrencyVal Float,
		@TypeName varchar(256),
		@ContractNumber int,
		@Note2 varchar(256),
		@LeaseKind int,
		@AutoPostedEntry bit,
		@Mark bit,
		@RealtyGuid uniqueidentifier,
		@BuildingGuid uniqueidentifier,
		@EntryNote Varchar(255),
		@DetailNum Int,
		@Rent Float,
		@CostGuid  uniqueidentifier,
		@CustGuid uniqueidentifier,
		@CustAccountGuid uniqueidentifier,
		@RevenueAccountGuid uniqueidentifier,
		@CommissionFromCustValue Float,
		@AcCommissionFromCustGuid uniqueidentifier,
		@AcCommissionFromCustNote varchar(256),
		@AcCustOwnerGuid uniqueidentifier,
		@CommissionFromOwnerValue Float,
		@AcCommissionFromOwnerGuid uniqueidentifier,
		@AcCommissionFromOwnerNote varchar(256),
		@UnearnedrRevenue bit,
		@Fromdate datetime,
		@Todate datetime,
		@AcIncomNextYearGuid uniqueidentifier,
		@InsuranceValue Float,
		@InsuranceAccountGuid uniqueidentifier,
		@CertificatValue Float,
		@AccountCertificatValueGuid uniqueidentifier,
		@OtherFeeAccountGuid uniqueidentifier,
		@OtherFee Float,
		@ContractPrice Float,
		@AccountContractPriceGuid uniqueidentifier,
		@DiscountValue fLoat,
		@DiscountAccountGuid uniqueidentifier,
		@BranchGuid uniqueidentifier,
		
		@CommissionFromSalesManrPercent fLoat,
		@CommissionFromSalesManValue fLoat,
		@AcSalesManCommissionGuid uniqueidentifier,
		@AcCommissionExpenseGuid uniqueidentifier,
		@SalesManCommNote varchar(255)
		
	
	SELECT	TOP 1
		@FlatNo = C.FlatNo,
		@FlatOwner = isNull(C.FlatOwner, -1),
		@EntryDate = Case when T.EntryDate = 0 then C.FromDate else C.EditDate end,
		@AutoPostedEntry = T.AutoPostedEntry,
		@CreateEntry = T.CreateEntry,
		@MoveCost = T.MoveCost,
		@MoveCostCredit = T.MoveCostCredit,

		@MoveCostWithIncom = T.MoveCostWithIncom,
		@MoveCostWithInconEndContract = T.MoveCostWithInconEndContract,
		@MoveCostWithFineEndContract = T.MoveCostWithFineEndContract,
		@MoveCostWithInsurance = T.MoveCostWithInsurance,
		@MoveCostWithContractPrice = T.MoveCostWithContractPrice,
		@MoveCostWithCertificat = T.MoveCostWithCertificat,
		@MoveCostWithFee = T.MoveCostWithFee,
		@MoveCostWithclientComm = T.MoveCostWithclientComm,
		@MoveCostWithOwnerComm = T.MoveCostWithOwnerComm,

		@MoveCostWithDiscount = T.MoveCostWithDiscount,
		@MoveCostWithDiscountCredit = T.MoveCostWithDiscountCredit,

		@MoveCostWithIncomCredit = T.MoveCostWithIncomCredit,
		@MoveCostWithInconEndContractCredit = T.MoveCostWithInconEndContractCredit,
		@MoveCostWithFineEndContractCredit = T.MoveCostWithFineEndContractCredit,
		@MoveCostWithInsuranceCredit = T.MoveCostWithInsuranceCredit,
		@MoveCostWithContractPriceCredit = T.MoveCostWithContractPriceCredit,
		@MoveCostWithCertificatCredit = T.MoveCostWithCertificatCredit,
		@MoveCostWithFeeCredit = T.MoveCostWithFeeCredit,
		@MoveCostWithclientCommCredit = T.MoveCostWithclientCommCredit,
		@MoveCostWithOwnerCommCredit = T.MoveCostWithOwnerCommCredit,
		@SecLvl = C.SecLvl,
		@CurrencyGuid = C.CurrencyGuid,
		@CurrencyVal = C.CurrencyVal,
		@TypeName = T.Name,
		@ContractNumber = C.Number ,
		@Note2 = C.Note2,
		@LeaseKind = C.Leasekind,
		@AutoPostedEntry = T.AutoPostedEntry,
		@Mark = C.Mark,
		@RealtyGuid =C.ApartmentGuid,
		@BuildingGuid = C.BuildingGuid,
		@Rent = C.Rent,
		@CostGuid = C.CostGuid,
		@CustGuid = C.CustomerGuid,
		@CustAccountGuid = C.CustAccountGuid,
		@RevenueAccountGuid = C.RevenueAccountGuid,
		@CommissionFromCustValue = C.CommissionFromCustValue,
		@AcCommissionFromCustGuid = C.AcCommissionFromCustGuid,
		@AcCommissionFromCustNote = C.AcCommissionFromCustNote,
		@CommissionFromOwnerValue = C.CommissionFromOwnerValue,
		@AcCommissionFromOwnerGuid = C.AcCommissionFromOwnerGuid ,
		@AcCommissionFromOwnerNote = C.AcCommissionFromOwnerNote,
		@UnearnedrRevenue = Case when (T.UnearnedrRevenue = 1) and (C.Todate > @MaxDate) then 1 else 0 end,
		@Fromdate = C.FromDate,
		@Todate = C.ToDate,
		@AcIncomNextYearGuid = C.AcIncomNextYearGuid,
		@InsuranceValue = C.InsuranceValue,
		@InsuranceAccountGuid = C.InsuranceAccountGuid,
		@CertificatValue = C.CertificatValue,
		@AccountCertificatValueGuid = C.AccountCertificatValue,
		@OtherFee = C.OtherFee,
		@OtherFeeAccountGuid = C.OtherFeeAccountGUID,

		@ContractPrice = C.ContractPrice,
		@AccountContractPriceGuid = C.AccountContractPrice,
		@DiscountValue = C.DiscountValue,
		@DiscountAccountGuid = C.DiscountAccountGuid,
		@BranchGuid = C.BranchGuid,
		@EntryNote = [T].[ContractNote],

		@CommissionFromSalesManrPercent = C.[CommissionFromSalesManrPercent],
		@CommissionFromSalesManValue = C.CommissionFromSalesManValue,
		@AcSalesManCommissionGuid = C.AcSalesManCommissionGuid,
		@AcCommissionExpenseGuid = C.AcCommissionExpenseGuid,
		@SalesManCommNote = C.SalesManCommNote

	FROM
		[vwLeaseApartment]  C
		inner join [vwContractType] T on T.Guid = C.TypeGuid
	WHERE
		C.Guid = @ContractGuid

	
	Select 
		@EntryNote  =				REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
									REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
									@EntryNote, '[N]', TypeNameAr),
									'[M]', TypeNameLtn),
									'[A]', CustArName),
									'[B]', CustltnName),
									'[C]', FlatNo),
									'[D]', BuildingArName),
									'[E]', BuildingLtnName),
									'[F]', dbo.fndate(EditDate)),
									'[G]', dbo.fndate(Fromdate)),
									'[H]', dbo.fndate(Todate)),
									'[K]', ContractNo),
									'[L]', Cast(Value as varchar(50)))
									
	from 
		[vwAllContract]
	where
		Guid = @ContractGuid
	
		
	--Set @EntryNote = @TypeName +' '+dbo.sc('ÑÞã ÇáÚÞÏ')+' '+CAST( @ContractNumber as varchar(255)) +' '+dbo.sc('ÑÞã ÇáÚÞÇÑ')+' '+@FlatNo +' '+@Note2
	--ãáß
	
	if (@LeaseKind = 0) or (@LeaseKind = 2)
	begin
		Select
			@AcCustOwnerGuid = [Cu].[AcGuid]
		from
			Apartment P
			inner join [Customer] [Cu] on [P].[CustOwnerGuid] = [Cu].[Guid]
		where
			[P].[Guid] = @RealtyGuid 

		if ISNULL(@AcCustOwnerGuid,0x0) = 0x0
		Select
			@AcCustOwnerGuid = [Cu].[AcGuid]
		from
			vwApartment P
			inner join [Customer] [Cu] on [P].[BuildingOwnerName] = [Cu].[Guid]
		where
			[P].[Guid] = @RealtyGuid 
	end
		
	if (@LeaseKind = 1) or (@LeaseKind = 3)
	begin

		Select
			@AcCustOwnerGuid = [Cu].[AcGuid]
		from
			Shop P
			inner join [Customer] [Cu] on [P].CustGuid = [Cu].[Guid]
		where
			[P].[Guid] = @RealtyGuid 

		if ISNULL(@AcCustOwnerGuid,0x0) = 0x0
		select
			@AcCustOwnerGuid = [Cu].[AcGuid]
		from
			vwShop P
			inner join [Customer] [Cu] on [P].[BuildingOwnerName] = [Cu].[Guid]
		where
			[P].[Guid] = @RealtyGuid 
	end

	if (@FlatOwner = 0 or @FlatOwner = -1)
	begin
		
		if (@LeaseKind = 2 or @LeaseKind = 3) --Ýí ÍÇá ÇáÚÞÏ ÈíÚ
		begin
				Insert Into [HEntry]
				([Guid],[SecLvl],[Number],[Date], [CurrencyGuid], [CurrencyVal], [Note], [ParentKind], [BranchGuid], [IsPosted], Mark)
				Select
					@EnGuid,
					@SecLvl,
					@EnNum,
					@EntryDate,
					@CurrencyGuid,
					@CurrencyVal,
					@EntryNote as [Note],
					1000+@LeaseKind as [ParentKind], 
					@BranchGuid as [BranchGuid], 
					@AutoPostedEntry as [IsPosted],
					@Mark
					
				Set @DetailNum = 0
				
				if Not Exists(Select Top 1 * from [ContractAccountDetail] where ParentGuid = @ContractGuid)
				begin
					Insert into [DEntry]
		 			([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
					Select
						@EnGuid,
						@DetailNum,
						@CustAccountGuid,
						@Rent as Debit,
						0 as Credit,
						@CurrencyGuid,
						@CurrencyVal,
						Case when @MoveCost = 1 then @CostGuid end,
						Null as [ObverseAcGuid],
						@EntryNote
				end
				else
				begin
					Select @CustAccountGuid = AcGuid From Customer Cu where Cu.Guid = @CustGuid
					
					Insert into [DEntry]
		 			([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
					Select
						@EnGuid,
						@DetailNum,
						D.AccountGuid,
						D.value as Debit,
						0 as Credit,
						@CurrencyGuid,
						@CurrencyVal,
						Case when @MoveCost = 1 then @CostGuid end,
						Null as [ObverseAcGuid],
						@EntryNote
					from
						[ContractAccountDetail] D
					where 
						ParentGuid = @ContractGuid
				end

				--ÓÚÑ ÇáßáÝÉ
				Declare @CostPrice Float
				
				if @LeaseKind = 0 or @LeaseKind = 2
				Select	@CostPrice = CostPrice	From Apartment where Guid = @RealtyGuid
				if @LeaseKind = 1 or @LeaseKind = 3
				Select	@CostPrice = CostPrice	From Shop where Guid = @RealtyGuid
				
				if @CostPrice > 0
				begin
					Declare @BuildingAcGuid uniqueidentifier
					Select @BuildingAcGuid = BuildingAccountGuid From Building where Guid = @BuildingGuid
					
					if IsNull(@BuildingAcGuid,0x0) <> 0x0
					begin
						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
		 				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@BuildingAcGuid,
							0 as Debit,
							@CostPrice as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCost = 1 then @CostGuid end,
							Null as [ObverseAcGuid],
							@EntryNote
					end
				end
				
				if @CostPrice <= @Rent
				begin
						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
		 				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@RevenueAccountGuid,
							0 as Debit,
							@Rent - @CostPrice as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCostWithIncomCredit = 1 then @CostGuid end,
							@CustAccountGuid as [ObverseAcGuid],
							@EntryNote
				end

				if @CostPrice > @Rent
				begin
						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
		 				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@RevenueAccountGuid,
							@CostPrice - @Rent as Debit,
							0 as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCostWithIncom = 1 then @CostGuid end,
							@CustAccountGuid as [ObverseAcGuid],
							@EntryNote
				end
				
				if @CommissionFromCustValue > 0
				begin
						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
		 				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@CustAccountGuid,
							@CommissionFromCustValue as Debit,
							0 as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCost = 1 then @CostGuid end,
							@AcCommissionFromCustGuid as [ObverseAcGuid],
							Case when @AcCommissionFromCustNote <> '' then @AcCommissionFromCustNote else @EntryNote end

						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
		 				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@AcCommissionFromCustGuid,
							0 as Debit,
							@CommissionFromCustValue as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCostWithclientCommCredit = 1 then @CostGuid end,
							@CustAccountGuid as [ObverseAcGuid],
							Case when @AcCommissionFromCustNote <> '' then @AcCommissionFromCustNote else @EntryNote end
				end
				
				if @CommissionFromOwnerValue > 0
				begin

						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
		 				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@AcCustOwnerGuid,
							@CommissionFromOwnerValue as Debit,
							0 as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCostWithOwnerComm = 1 then @CostGuid end,
							@AcCommissionFromOwnerGuid as [ObverseAcGuid],
							@EntryNote

						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
		 				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@AcCommissionFromOwnerGuid,
							0 as Debit,
							@CommissionFromOwnerValue as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCostWithclientCommCredit = 1 then @CostGuid end,
							@AcCustOwnerGuid as [ObverseAcGuid],
							Case when @AcCommissionFromOwnerNote <> '' then @AcCommissionFromOwnerNote else @EntryNote end
							
				end
				
				if @CommissionFromSalesManValue > 0
				begin
						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
		 				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@AcCommissionExpenseGuid,
							@CommissionFromSalesManValue as Debit,
							0 as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCost = 1 then @CostGuid end,
							@AcSalesManCommissionGuid as [ObverseAcGuid],
							Case when @SalesManCommNote <> '' then @SalesManCommNote else @EntryNote end

						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
		 				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@AcSalesManCommissionGuid,
							0 as Debit,
							@CommissionFromSalesManValue as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCostWithclientCommCredit = 1 then @CostGuid end,
							@AcCommissionExpenseGuid as [ObverseAcGuid],
							Case when @SalesManCommNote <> '' then @SalesManCommNote else @EntryNote end
				end
				
		end			
		
		if (@LeaseKind = 0) or (@LeaseKind = 1)
		begin			
				
				Insert Into [HEntry]
				([Guid],[SecLvl],[Number],[Date], [CurrencyGuid], [CurrencyVal], [Note], [ParentKind], [BranchGuid], [IsPosted], Mark)
				Select
					@EnGuid,
					@SecLvl,
					@EnNum,
					@EntryDate,
					@CurrencyGuid,
					@CurrencyVal,
					@EntryNote as [Note],
					1000+@LeaseKind as [ParentKind], 
					@BranchGuid as [BranchGuid], 
					@AutoPostedEntry as [IsPosted],
					@Mark
			
				Set @DetailNum = 0
				
				if @Rent <> 0
				begin
						if Not Exists(Select Top 1 * from [ContractAccountDetail] where ParentGuid = @ContractGuid)
						begin
							Insert into [DEntry]
		 					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
							Select
								@EnGuid,
								@DetailNum,
								@CustAccountGuid as [AccountGuid],
								Case when @UnearnedrRevenue = 0 then @Rent else (@Rent - @DiscountValue) end as Debit,
								0 as Credit,
								@CurrencyGuid,
								@CurrencyVal,
								Case when @MoveCost = 1 then @CostGuid end,
								@RevenueAccountGuid as [ObverseAcGuid],
								@EntryNote as [Note]
								
								--Select * from [DEntry] where ParentGuid = @EnGuid
						end
						else
						begin
							Select @CustAccountGuid = AcGuid From Customer Cu where Cu.Guid = @CustGuid
							
							Insert into [DEntry]
		 					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
							Select
								@EnGuid,
								@DetailNum,
								D.AccountGuid as [AccountGuid],
								D.value as Debit,
								0 as Credit,
								@CurrencyGuid,
								@CurrencyVal,
								Case when @MoveCost = 1 then @CostGuid end,
								@RevenueAccountGuid as [ObverseAcGuid],
								@EntryNote as [Note]
							from
								[ContractAccountDetail] D
							where 
								ParentGuid = @ContractGuid
						end
						
				end
					
				if @UnearnedrRevenue = 0
				begin
						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
	 					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@RevenueAccountGuid as [AccountGuid],
							0 as Debit,
							@Rent as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCostWithIncomCredit = 1 then @CostGuid end,
							@CustAccountGuid as [ObverseAcGuid],
							@EntryNote as [Note]
				end
				else
				begin
					if @DiscountValue <> 0
					Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
	 					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@DiscountAccountGuid as [AccountGuid],
							@DiscountValue as Debit,
							0 as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCostWithIncomCredit = 1 then @CostGuid end,
							@CustAccountGuid as [ObverseAcGuid],
							@EntryNote as [Note]

					Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
	 					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@RevenueAccountGuid as [AccountGuid],
							0 as Debit,
							dbo.FnMyRound(
											((
												(@Rent - @discountValue) /
												dbo.fnDaysBetween(@fromdate, @ToDate)
											)
											* 
											dbo.fnDaysBetween(@fromdate, @MaxDate)
											)
											+ @discountValue										
										,1),
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCostWithIncomCredit = 1 then @CostGuid end,
							@CustAccountGuid as [ObverseAcGuid],
							--'From : '+Cast(@fromdate as Varchar(255))+' Max : '+ Cast(@MaxDate as Varchar(255))+' '+CAST(dbo.fnDaysBetween(@fromdate, @MaxDate) as Varchar(255))--
							@EntryNote as [Note]

						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
						([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@AcIncomNextYearGuid as [AccountGuid],
							0 as Debit,
							dbo.FnMyRound(
											(
											(@Rent - @DiscountValue) -
											(
												(
													(@Rent - @DiscountValue) /
													dbo.fnDaysBetween(@fromdate, @ToDate)
												)
												* 
												dbo.fnDaysBetween(@fromdate, @MaxDate)
											)
											)
																					
										,1) ,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCostWithIncomCredit = 1 then @CostGuid end,
							@CustAccountGuid as [ObverseAcGuid],
							@EntryNote as [Note]
				end
				
				if @InsuranceValue <> 0
				begin
						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
	 					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@CustAccountGuid,
							@InsuranceValue,
							0,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCost = 1 then @CostGuid end,
							@InsuranceAccountGuid,
							@EntryNote

						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
	 					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@InsuranceAccountGuid,
							0,
							@InsuranceValue,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCostWithInsuranceCredit = 1 then @CostGuid end,
							@CustAccountGuid,
							@EntryNote
				end

				if @CommissionFromCustValue > 0
				begin
						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
	 					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@CustAccountGuid,
							@CommissionFromCustValue as Debit,
							0 as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCost = 1 then @CostGuid end,
							@AcCommissionFromCustGuid as [ObverseAcGuid],
							Case when @AcCommissionFromCustNote <> '' then @AcCommissionFromCustNote else @EntryNote end

						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
	 					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@AcCommissionFromCustGuid,
							0 as Debit,
							@CommissionFromCustValue as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCostWithclientCommCredit = 1 then @CostGuid end,
							@CustAccountGuid as [ObverseAcGuid],
							Case when @AcCommissionFromCustNote <> '' then @AcCommissionFromCustNote else @EntryNote end
				end	

				if @CommissionFromOwnerValue > 0
				begin
						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
	 					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@AcCustOwnerGuid,
							@CommissionFromOwnerValue as Debit,
							0 as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCostWithOwnerComm = 1 then @CostGuid end,
							@AcCommissionFromOwnerGuid as [ObverseAcGuid],
							@EntryNote

						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
	 					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@AcCommissionFromOwnerGuid,
							0 as Debit,
							@CommissionFromOwnerValue as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCostWithOwnerCommCredit = 1 then @CostGuid end,
							@AcCustOwnerGuid as [ObverseAcGuid],
							Case when @AcCommissionFromOwnerNote <> '' then @AcCommissionFromOwnerNote else @EntryNote end
				end

				if @CommissionFromSalesManValue > 0
				begin
						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
		 				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@AcCommissionExpenseGuid,
							@CommissionFromSalesManValue as Debit,
							0 as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCost = 1 then @CostGuid end,
							@AcSalesManCommissionGuid as [ObverseAcGuid],
							Case when @SalesManCommNote <> '' then @SalesManCommNote else @EntryNote end

						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
		 				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@AcSalesManCommissionGuid,
							0 as Debit,
							@CommissionFromSalesManValue as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCostWithclientCommCredit = 1 then @CostGuid end,
							@AcCommissionExpenseGuid as [ObverseAcGuid],
							Case when @SalesManCommNote <> '' then @SalesManCommNote else @EntryNote end
				end

				if @CertificatValue > 0
				begin
						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
	 					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@CustAccountGuid,
							@CertificatValue as Debit,
							0 as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCost = 1 then @CostGuid end,
							@AccountCertificatValueGuid as [ObverseAcGuid],
							@EntryNote

						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
	 					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@AccountCertificatValueGuid,
							0 as Debit,
							@CertificatValue as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCostWithCertificatCredit = 1 then @CostGuid end,
							@CustAccountGuid as [ObverseAcGuid],
							@EntryNote
				end	
				
				if @OtherFee > 0
				begin
						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
	 					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@CustAccountGuid,
							@OtherFee as Debit,
							0 as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCost = 1 then @CostGuid end,
							@OtherFeeAccountGuid as [ObverseAcGuid],
							@EntryNote

						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
	 					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@OtherFeeAccountGuid,
							0 as Debit,
							@OtherFee as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCostWithFeeCredit = 1 then @CostGuid end,
							@CustAccountGuid as [ObverseAcGuid],
							@EntryNote
				end	
				
				if @ContractPrice > 0
				begin
						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
	 					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@CustAccountGuid,
							@ContractPrice as Debit,
							0 as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCost = 1 then @CostGuid end,
							@AccountContractPriceGuid as [ObverseAcGuid],
							@EntryNote

						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
	 					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@AccountContractPriceGuid,
							0 as Debit,
							@ContractPrice as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCostWithFeeCredit = 1 then @CostGuid end,
							@CustAccountGuid as [ObverseAcGuid],
							@EntryNote
				end	
				
				if (@DiscountValue > 0) and (@UnearnedrRevenue = 0)
				begin
					Set @DetailNum = @DetailNum + 1
					Insert into [DEntry]
					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
					Select
							@EnGuid,
							@DetailNum,
							@DiscountAccountGuid,
							@DiscountValue as Debit,
							0 as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCostWithDiscount = 1 then @CostGuid end,
							@custAccountGuid,
							dbo.SC('ÍÓã Úáì ') + @EntryNote

					Set @DetailNum = @DetailNum + 1
					Insert into [DEntry]
					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
					Select
						@EnGuid,
						@DetailNum,
						@custAccountGuid,
						0,
						@DiscountValue,
						@CurrencyGuid,
						@CurrencyVal,
						Case when @MoveCostWithDiscountCredit = 1 then @CostGuid end,
						@DiscountAccountGuid as [ObverseAcGuid],
						dbo.SC('ÍÓã Úáì ') + @EntryNote
			end	
			
				--Select * from [DEntry] where ParentGuid = @EnGuid
				--Select @ContractGuid
				exec [PrcCreateEntryFromFlatContractFee] @ContractGuid
				
		end 
	end--end FlatOwner
	
		--Select @FlatOwner

	if (@FlatOwner <> 0) and (@FlatOwner <> -1)
	begin
			Insert Into [HEntry]
			([Guid],[SecLvl],[Number],[Date], [CurrencyGuid], [CurrencyVal], [Note], [ParentKind], [BranchGuid], [IsPosted], Mark)
			Select
				@EnGuid,
				@SecLvl,
				@EnNum,
				@EntryDate,
				@CurrencyGuid,
				@CurrencyVal,
				@EntryNote as [Note],
				1000+@LeaseKind as [ParentKind], 
				@BranchGuid  as [BranchGuid], 
				@AutoPostedEntry as [IsPosted],
				@Mark
				
			Set @DetailNum = 0
			
			if @Rent <> 0
			begin
					if Not Exists(Select Top 1 * from [ContractAccountDetail] where ParentGuid = @ContractGuid)
					begin
						Insert into [DEntry]
	 					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@CustAccountGuid as [AccountGuid],
							Case when @UnearnedrRevenue = 0 then @Rent else (@Rent - @DiscountValue) end as Debit,
							0 as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCost = 1 then @CostGuid end,
							@RevenueAccountGuid as [ObverseAcGuid],
							@EntryNote as [Note]
					end
					else
					begin
						Select @CustAccountGuid = AcGuid From Customer Cu where Cu.Guid = @CustGuid
						
						Insert into [DEntry]
	 					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							D.AccountGuid as [AccountGuid],
							D.value as Debit,
							0 as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCost = 1 then @CostGuid end,
							@RevenueAccountGuid as [ObverseAcGuid],
							@EntryNote as [Note]
						from
							[ContractAccountDetail] D
						where 
							ParentGuid = @ContractGuid
					end
						
				if @UnearnedrRevenue = 0
				begin
						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
	 					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@RevenueAccountGuid as [AccountGuid],
							0 as Debit,
							@Rent as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCostWithIncomCredit = 1 then @CostGuid end,
							@CustAccountGuid as [ObverseAcGuid],
							@EntryNote as [Note]
				end
				else
				begin
					if @DiscountValue <> 0
					Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
	 					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@DiscountAccountGuid as [AccountGuid],
							@DiscountValue as Debit,
							0 as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCostWithIncomCredit = 1 then @CostGuid end,
							@CustAccountGuid as [ObverseAcGuid],
							@EntryNote as [Note]

					Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
	 					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@RevenueAccountGuid as [AccountGuid],
							0 as Debit,
							dbo.FnMyRound(
											((
												(@Rent - @discountValue) /
												dbo.fnDaysBetween(@fromdate, @ToDate)
											)
											* 
											dbo.fnDaysBetween(@fromdate, @MaxDate)
											)
											+ @discountValue										
										,1),
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCostWithIncomCredit = 1 then @CostGuid end,
							@CustAccountGuid as [ObverseAcGuid],
							--'From : '+Cast(@fromdate as Varchar(255))+' Max : '+ Cast(@MaxDate as Varchar(255))+' '+CAST(dbo.fnDaysBetween(@fromdate, @MaxDate) as Varchar(255))--
							@EntryNote as [Note]

						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
						([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@AcIncomNextYearGuid as [AccountGuid],
							0 as Debit,
							dbo.FnMyRound(
											(
											(@Rent - @DiscountValue) -
											(
												(
													(@Rent - @DiscountValue) /
													dbo.fnDaysBetween(@fromdate, @ToDate)
												)
												* 
												dbo.fnDaysBetween(@fromdate, @MaxDate)
											)
											)
																					
										,1) ,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCostWithIncomCredit = 1 then @CostGuid end,
							@CustAccountGuid as [ObverseAcGuid],
							@EntryNote as [Note]
				end
			end
						
			if @InsuranceValue <> 0
			begin
				Set @DetailNum = @DetailNum + 1
				Insert into [DEntry]
				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
				Select
					@EnGuid,
					@DetailNum,
					@CustAccountGuid,
					@InsuranceValue,
					0,
					@CurrencyGuid,
					@CurrencyVal,
					Case when @MoveCost = 1 then @CostGuid end,
					@InsuranceAccountGuid,
					@EntryNote
					
				Set @DetailNum = @DetailNum + 1
				Insert into [DEntry]
				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
				Select
					@EnGuid,
					@DetailNum,
					@InsuranceAccountGuid,
					0,
					@InsuranceValue,
					@CurrencyGuid,
					@CurrencyVal,
					Case when @MoveCostWithInsuranceCredit = 1 then @CostGuid end,
					@CustAccountGuid,
					@EntryNote
			end

			if @CommissionFromCustValue > 0
			begin
					Set @DetailNum = @DetailNum + 1
					Insert into [DEntry]
					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
					Select
						@EnGuid,
						@DetailNum,
						@CustAccountGuid,
						@CommissionFromCustValue as Debit,
						0 as Credit,
						@CurrencyGuid,
						@CurrencyVal,
						Case when @MoveCost = 1 then @CostGuid end,
						@AcCommissionFromCustGuid as [ObverseAcGuid],
						Case when @AcCommissionFromCustNote <> '' then @AcCommissionFromCustNote else @EntryNote end

					Set @DetailNum = @DetailNum + 1
					Insert into [DEntry]
					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
					Select
						@EnGuid,
						@DetailNum,
						@AcCommissionFromCustGuid,
						0 as Debit,
						@CommissionFromCustValue as Credit,
						@CurrencyGuid,
						@CurrencyVal,
						Case when @MoveCostWithclientCommCredit = 1 then @CostGuid end,
						@CustAccountGuid as [ObverseAcGuid],
						Case when @AcCommissionFromCustNote <> '' then @AcCommissionFromCustNote else @EntryNote end
			end

			if @CommissionFromOwnerValue > 0
			begin
					Set @DetailNum = @DetailNum + 1
					Insert into [DEntry]
					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
					Select
						@EnGuid,
						@DetailNum,
						@AcCustOwnerGuid,
						@CommissionFromOwnerValue as Debit,
						0 as Credit,
						@CurrencyGuid,
						@CurrencyVal,
						Case when @MoveCostWithOwnerComm = 1 then @CostGuid end,
						@AcCommissionFromOwnerGuid as [ObverseAcGuid],
						@EntryNote

					Set @DetailNum = @DetailNum + 1
					Insert into [DEntry]
					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
					Select
						@EnGuid,
						@DetailNum,
						@AcCommissionFromOwnerGuid,
						0 as Debit,
						@CommissionFromOwnerValue as Credit,
						@CurrencyGuid,
						@CurrencyVal,
						Case when @MoveCostWithclientCommCredit = 1 then @CostGuid end,
						@AcCustOwnerGuid as [ObverseAcGuid],
						Case when @AcCommissionFromOwnerNote <> '' then @AcCommissionFromOwnerNote else @EntryNote end
			end

				if @CommissionFromSalesManValue > 0
				begin
						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
		 				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@AcCommissionExpenseGuid,
							@CommissionFromSalesManValue as Debit,
							0 as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCost = 1 then @CostGuid end,
							@AcSalesManCommissionGuid as [ObverseAcGuid],
							Case when @SalesManCommNote <> '' then @SalesManCommNote else @EntryNote end

						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
		 				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@AcSalesManCommissionGuid,
							0 as Debit,
							@CommissionFromSalesManValue as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCostWithclientCommCredit = 1 then @CostGuid end,
							@AcCommissionExpenseGuid as [ObverseAcGuid],
							Case when @SalesManCommNote <> '' then @SalesManCommNote else @EntryNote end
				end

			if @CertificatValue > 0
			begin
					Set @DetailNum = @DetailNum + 1
					Insert into [DEntry]
					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
					Select
						@EnGuid,
						@DetailNum,
						@CustAccountGuid,
						@CertificatValue,
						0,
						@CurrencyGuid,
						@CurrencyVal,
						Case when @MoveCost = 1 then @CostGuid end,
						@AccountCertificatValueGuid,
						@EntryNote

					Set @DetailNum = @DetailNum + 1
					Insert into [DEntry]
					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
					Select
						@EnGuid,
						@DetailNum,
						@AccountCertificatValueGuid,
						0 as Debit,
						@CertificatValue as Credit,
						@CurrencyGuid,
						@CurrencyVal,
						Case when @MoveCostWithCertificatCredit = 1 then @CostGuid end,
						@CustAccountGuid as [ObverseAcGuid],
						@EntryNote
			end	

			if @OtherFee > 0
			begin
					Set @DetailNum = @DetailNum + 1
					Insert into [DEntry]
					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
					Select
						@EnGuid,
						@DetailNum,
						@CustAccountGuid,
						@OtherFee as Debit,
						0 as Credit,
						@CurrencyGuid,
						@CurrencyVal,
						Case when @MoveCost = 1 then @CostGuid end,
						@OtherFeeAccountGuid as [ObverseAcGuid],
						@EntryNote

					Set @DetailNum = @DetailNum + 1
					Insert into [DEntry]
					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
					Select
						@EnGuid,
						@DetailNum,
						@OtherFeeAccountGuid,
						0 as Debit,
						@OtherFee as Credit,
						@CurrencyGuid,
						@CurrencyVal,
						Case when @MoveCostWithFeeCredit = 1 then @CostGuid end,
						@CustAccountGuid as [ObverseAcGuid],
						@EntryNote
			end	
				
			if @ContractPrice > 0
			begin
					Set @DetailNum = @DetailNum + 1
					Insert into [DEntry]
					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
					Select
						@EnGuid,
						@DetailNum,
						@CustAccountGuid,
						@ContractPrice as Debit,
						0 as Credit,
						@CurrencyGuid,
						@CurrencyVal,
						Case when @MoveCost = 1 then @CostGuid end,
						@AccountContractPriceGuid as [ObverseAcGuid],
						@EntryNote

					Set @DetailNum = @DetailNum + 1
					Insert into [DEntry]
					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
					Select
						@EnGuid,
						@DetailNum,
						@AccountContractPriceGuid,
						0 as Debit,
						@ContractPrice as Credit,
						@CurrencyGuid,
						@CurrencyVal,
						Case when @MoveCostWithFeeCredit = 1 then @CostGuid end,
						@CustAccountGuid as [ObverseAcGuid],
						@EntryNote
			end	

			if (@DiscountValue > 0) and (@UnearnedrRevenue = 0)
			begin
				Set @DetailNum = @DetailNum + 1
					Insert into [DEntry]
					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
					Select
						@EnGuid,
						@DetailNum,
						@DiscountAccountGuid,
						@DiscountValue as Debit,
						0 as Credit,
						@CurrencyGuid,
						@CurrencyVal,
						Case when @MoveCostWithDiscount = 1 then @CostGuid end,
						@custAccountGuid,
						dbo.SC('ÍÓã Úáì ') + @EntryNote

				Set @DetailNum = @DetailNum + 1
				Insert into [DEntry]
				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
				Select
					@EnGuid,
					@DetailNum,
					@custAccountGuid,
					0,
					@DiscountValue,
					@CurrencyGuid,
					@CurrencyVal,
					Case when @MoveCostWithDiscountCredit = 1 then @CostGuid end,
					@DiscountAccountGuid as [ObverseAcGuid],
					dbo.SC('ÍÓã Úáì ') + @EntryNote
		end	

			exec [PrcCreateEntryFromFlatContractFee] @ContractGuid
	end				

	exec PrcDoDistributiveEntry @EnGuid
	
	if @AutoPostedEntry = 1
	Update [Hentry] Set IsPosted = 1 where Guid = @EnGuid
	
	--Select * from [Hentry] where Guid = @EnGuid 
	--Select * from [Dentry] where parentGuid = @EnGuid order by number
		

GO
/****** Object:  StoredProcedure [dbo].[PrcCreateContractLandVillEntry]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcCreateContractLandVillEntry]
(
	@ContractGuid uniqueidentifier = 'CC0F55C4-1A38-4604-870D-F84B4B7F036A',
	@MaxDate int = 42644
)
  
AS
	Set NoCount on 
	Declare 
			@EnNum int,
			@EnGuid [uniqueidentifier]

	-- ÇáÞíÏ ÇáÓÇÈÞ
	Select 
		@EnNum = isnull([Number],0)
		,@EnGuid = isnull([Guid],0x0)
	From
		[Hentry]
	where
		[Guid] = @ContractGuid

	if isnull(@EnNum,0) = 0
	begin	
		Select @EnNum = IsNull(Max([Number]),0) + 1 from [HEntry]
	END
	
	if isnull(@EnGuid,0x0) = 0x0
	Set @EnGuid = @ContractGuid

	if Exists(Select Number From HEntry where Number = @EnNum and [Guid] <> @EnGuid)
	Select @EnNum = IsNull(Max([Number]),0) + 1 from [HEntry]

	-- ÍÐÝ ÇáÞíæÏ ÇáÞÏíãÉ
	Delete
		[HEntry]
	where
		[Guid] = @EnGuid

		
	--return
	DECLARE 
		@FlatNo Varchar(256),
		@FlatOwner int,
		@EntryDate Datetime,
		@AutoCreateEntry bit,
		@CreateEntry bit,
		@MoveCost bit,
		@MoveCostCredit bit,
		@MoveCostWithIncom bit,
		@MoveCostWithInconEndContract bit,
		@MoveCostWithFineEndContract bit,
		@MoveCostWithInsurance bit,
		@MoveCostWithContractPrice bit,
		@MoveCostWithCertificat bit,
		@MoveCostWithFee bit,
		@MoveCostWithclientComm bit,
		@MoveCostWithOwnerComm bit,
		@MoveCostWithDiscount bit,
		@MoveCostWithDiscountCredit bit,
		@MoveCostWithIncomCredit bit,
		@MoveCostWithInconEndContractCredit bit,
		@MoveCostWithFineEndContractCredit bit,
		@MoveCostWithInsuranceCredit bit,
		@MoveCostWithContractPriceCredit bit,
		@MoveCostWithCertificatCredit bit,
		@MoveCostWithFeeCredit bit,
		@MoveCostWithclientCommCredit bit,
		@MoveCostWithOwnerCommCredit bit,
		@SecLvl int,
		@CurrencyGuid uniqueidentifier,
		@CurrencyVal Float,
		@TypeName varchar(256),
		@ContractNumber int,
		@Note2 varchar(256),
		@ContractKind int,
		@AutoPostedEntry bit,
		@Mark bit,
		@RealtyGuid uniqueidentifier,
		@BuildingGuid uniqueidentifier,
		@EntryNote Varchar(255),
		@DetailNum Int,
		@Rent Float,
		@CostGuid  uniqueidentifier,
		@CustAccountGuid uniqueidentifier,
		@RevenueAccountGuid uniqueidentifier,
		@CommissionFromCustValue Float,
		@AcCommissionFromCustGuid uniqueidentifier,
		@AcCommissionFromCustNote varchar(256),
		@AcCustOwnerGuid uniqueidentifier,
		@CommissionFromOwnerValue Float,
		@AcCommissionFromOwnerGuid uniqueidentifier,
		@AcCommissionFromOwnerNote varchar(256),
		@UnearnedrRevenue bit,
		@Fromdate datetime,
		@Todate datetime,
		@AcIncomNextYearGuid uniqueidentifier,
		@InsuranceValue Float,
		@InsuranceAccountGuid uniqueidentifier,
		@CertificatValue Float,
		@AccountCertificatValueGuid uniqueidentifier,
		@OtherFeeAccountGuid uniqueidentifier,
		@OtherFee Float,

		@ContractPrice Float,
		@AccountContractPriceGuid uniqueidentifier,
		@DiscountValue fLoat,
		@DiscountAccountGuid uniqueidentifier,
		@BranchGuid uniqueidentifier,
		
		@CommissionFromSalesManrPercent fLoat,
		@CommissionFromSalesManValue fLoat,
		@AcSalesManCommissionGuid uniqueidentifier,
		@AcCommissionExpenseGuid uniqueidentifier,
		@SalesManCommNote varchar(255),

		@p_LandSale int = 6,
		@p_LandRent int = 7,
		@p_VillaSale int = 8,
		@p_VillaRent int = 9
	
	SELECT	TOP 1
		@FlatNo = C.Name,
		@FlatOwner = C.LandOwner,
		@EntryDate = Case when T.EntryDate = 0 then C.FromDate else C.EditDate end,
		@AutoCreateEntry = T.AutoCreateEntry,
		@AutoPostedEntry = T.AutoPostedEntry,
		@CreateEntry = T.CreateEntry,
		@MoveCost = T.MoveCost,
		@MoveCostCredit = T.MoveCostCredit,

		@MoveCostWithIncom = T.MoveCostWithIncom,
		@MoveCostWithInconEndContract = T.MoveCostWithInconEndContract,
		@MoveCostWithFineEndContract = T.MoveCostWithFineEndContract,
		@MoveCostWithInsurance = T.MoveCostWithInsurance,
		@MoveCostWithContractPrice = T.MoveCostWithContractPrice,
		@MoveCostWithCertificat = T.MoveCostWithCertificat,
		@MoveCostWithFee = T.MoveCostWithFee,
		@MoveCostWithclientComm = T.MoveCostWithclientComm,
		@MoveCostWithOwnerComm = T.MoveCostWithOwnerComm,

		@MoveCostWithDiscount = T.MoveCostWithDiscount,
		@MoveCostWithDiscountCredit = T.MoveCostWithDiscountCredit,

		@MoveCostWithIncomCredit = T.MoveCostWithIncomCredit,
		@MoveCostWithInconEndContractCredit = T.MoveCostWithInconEndContractCredit,
		@MoveCostWithFineEndContractCredit = T.MoveCostWithFineEndContractCredit,
		@MoveCostWithInsuranceCredit = T.MoveCostWithInsuranceCredit,
		@MoveCostWithContractPriceCredit = T.MoveCostWithContractPriceCredit,
		@MoveCostWithCertificatCredit = T.MoveCostWithCertificatCredit,
		@MoveCostWithFeeCredit = T.MoveCostWithFeeCredit,
		@MoveCostWithclientCommCredit = T.MoveCostWithclientCommCredit,
		@MoveCostWithOwnerCommCredit = T.MoveCostWithOwnerCommCredit,
		@SecLvl = C.SecLvl,
		@CurrencyGuid = C.CurrencyGuid,
		@CurrencyVal = C.CurrencyVal,
		@TypeName = T.Name,
		@ContractNumber = C.Number ,
		@Note2 = C.Note2,
		@ContractKind = C.ContractKind,
		@AutoPostedEntry = T.AutoPostedEntry,
		@Mark = C.Mark,
		@RealtyGuid = C.LandGuid,
		--@BuildingGuid = C.BuildingGuid,
		@Rent = C.Rent,
		@CostGuid = C.CostGuid,
		@CustAccountGuid = C.CustAccountGuid,
		@RevenueAccountGuid = C.RevenueAccountGuid,
		@CommissionFromCustValue = C.CommissionFromCustValue,
		@AcCommissionFromCustGuid = C.AcCommissionFromCustGuid,
		@AcCommissionFromCustNote = '', --C.AcCommissionFromCustNote,
		@CommissionFromOwnerValue = C.CommissionFromOwnerValue,
		@AcCommissionFromOwnerGuid = C.AcCommissionFromOwnerGuid ,
		@AcCommissionFromOwnerNote = '', --C.AcCommissionFromOwnerNote,
		@UnearnedrRevenue = Case when (T.UnearnedrRevenue = 0) or (C.Todate <= @MaxDate) then 0 else 1 end,
		@Fromdate = C.FromDate,
		@Todate = C.ToDate,
		@AcIncomNextYearGuid = C.AcIncomNextYearGuid,
		@InsuranceValue = C.InsuranceValue,
		@InsuranceAccountGuid = C.InsuranceAccountGuid,
		@CertificatValue = C.CertificatValue,
		@AccountCertificatValueGuid = C.AccountCertificatValue,
		@OtherFee = C.OtherFee,
		@OtherFeeAccountGuid = C.OtherFeeAccountGUID,

		@ContractPrice = C.ContractPrice,
		@AccountContractPriceGuid = C.AccountContractPrice,
		@DiscountValue = C.DiscountValue,
		@DiscountAccountGuid = C.DiscountAccountGuid,
		@BranchGuid = C.BranchGuid,
		@EntryNote = [T].[ContractNote],

		@CommissionFromSalesManrPercent = C.[CommissionFromSalesManrPercent],
		@CommissionFromSalesManValue = C.CommissionFromSalesManValue,
		@AcSalesManCommissionGuid = C.AcSalesManCommissionGuid,
		@AcCommissionExpenseGuid = C.AcCommissionExpenseGuid,
		@SalesManCommNote = C.SalesManCommNote

	FROM
		[vwLandContract]  C
		inner join [vwContractType] T on T.Guid = C.TypeGuid
	WHERE
		C.Guid = @ContractGuid
	
	--Set @EntryNote = @TypeName +' '+dbo.sc('ÑÞã ÇáÚÞÏ')+' '+CAST( @ContractNumber as varchar(255)) +' '+dbo.sc('ÑÞã ÇáÚÞÇÑ')+' '+@FlatNo +' '+@Note2
	Select 
		@EntryNote  =				REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
									REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
									@EntryNote, '[N]', TypeNameAr),
									'[M]', TypeNameLtn),
									'[A]', CustArName),
									'[B]', CustltnName),
									'[C]', FlatNo),
									'[D]', BuildingArName),
									'[E]', BuildingLtnName),
									'[F]', dbo.fndate(EditDate)),
									'[G]', dbo.fndate(Fromdate)),
									'[H]', dbo.fndate(Todate)),
									'[K]', ContractNo),
									'[L]', Cast(Value as varchar(50)))
									
	from 
		[vwAllContract]
	where
		Guid = @ContractGuid
		
	--Select @FlatOwner Return
	if (@ContractKind = @p_LandRent) or (@ContractKind = @p_LandSale)
	begin
		select
			@AcCustOwnerGuid = [Cu].[AcGuid]
		from
			vwEarth P
			inner join [Customer] [Cu] on [P].[CuOwnerGuid] = [Cu].[Guid]
		where
			[P].[Guid] = @RealtyGuid 
	end
		
	if (@ContractKind = @p_VillaSale) or (@ContractKind = @p_VillaRent)
	begin
		select
			@AcCustOwnerGuid = [Cu].[AcGuid]
		from
			vwVilla P
			inner join [Customer] [Cu] on [P].CuOwnerGuid = [Cu].[Guid]
		where
			[P].[Guid] = @RealtyGuid 
	end
	
	if (@FlatOwner = 0 or @FlatOwner = -1)
	begin
		if (@ContractKind = @p_LandSale or @ContractKind = @p_VillaSale ) --Ýí ÍÇá ÇáÚÞÏ ÈíÚ
		begin
				Insert Into [HEntry]
				([Guid],[SecLvl],[Number],[Date], [CurrencyGuid], [CurrencyVal], [Note], [ParentKind], [BranchGuid], [IsPosted], Mark)
				Select
					@EnGuid,
					@SecLvl,
					@EnNum,
					@EntryDate,
					@CurrencyGuid,
					@CurrencyVal,
					@EntryNote as [Note],
					1000+@ContractKind as [ParentKind], 
					@BranchGuid as [BranchGuid], 
					@AutoPostedEntry as [IsPosted],
					@Mark
					
				Set @DetailNum = 0
				
				Insert into [DEntry]
		 		([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
				Select
					@EnGuid,
					@DetailNum,
					@CustAccountGuid,
					@Rent as Debit,
					0 as Credit,
					@CurrencyGuid,
					@CurrencyVal,
					Case when @MoveCost = 1 then @CostGuid end,
					Null as [ObverseAcGuid],
					@EntryNote

				--ÓÚÑ ÇáßáÝÉ
				Declare @CostPrice Float
				Set @CostPrice = 0
				
				/*
				if @ContractKind = @p_LandSale or @ContractKind = @p_LandRent
				Select	@CostPrice = CostPrice	From Earth where Guid = @RealtyGuid
				
				if @ContractKind = @p_VillaSale or @ContractKind = @p_VillaRent
				Select	@CostPrice = CostPrice	From Villa where Guid = @RealtyGuid
				*/
				if @CostPrice > 0
				begin
					Declare @BuildingAcGuid uniqueidentifier
					Select @BuildingAcGuid = BuildingAccountGuid From Building where Guid = @BuildingGuid
					
					if IsNull(@BuildingAcGuid,0x0) <> 0x0
					begin
						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
		 				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@BuildingAcGuid,
							0 as Debit,
							@CostPrice as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCost = 1 then @CostGuid end,
							Null as [ObverseAcGuid],
							@EntryNote
					end
				end
				
				if @CostPrice <= @Rent
				begin
						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
		 				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@RevenueAccountGuid,
							0 as Debit,
							@Rent - @CostPrice as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCostWithIncomCredit = 1 then @CostGuid end,
							@CustAccountGuid as [ObverseAcGuid],
							@EntryNote
				end
				if @CostPrice > @Rent
				begin
						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
		 				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@RevenueAccountGuid,
							@CostPrice - @Rent as Debit,
							0 as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCostWithIncom = 1 then @CostGuid end,
							@CustAccountGuid as [ObverseAcGuid],
							@EntryNote
				end
				
				if @CommissionFromCustValue > 0
				begin
						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
		 				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@CustAccountGuid,
							@CommissionFromCustValue as Debit,
							0 as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCost = 1 then @CostGuid end,
							@AcCommissionFromCustGuid as [ObverseAcGuid],
							@AcCommissionFromCustNote

						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
		 				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@AcCommissionFromCustGuid,
							0 as Debit,
							@CommissionFromCustValue as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCostWithclientCommCredit = 1 then @CostGuid end,
							@CustAccountGuid as [ObverseAcGuid],
							@AcCommissionFromCustNote
				end
				
				if @CommissionFromOwnerValue > 0
				begin
						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
		 				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@AcCustOwnerGuid,
							@CommissionFromOwnerValue as Debit,
							0 as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCostWithOwnerComm = 1 then @CostGuid end,
							@AcCommissionFromOwnerGuid as [ObverseAcGuid],
							@EntryNote

						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
		 				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@AcCommissionFromOwnerGuid,
							0 as Debit,
							@CommissionFromOwnerValue as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCostWithclientCommCredit = 1 then @CostGuid end,
							@AcCustOwnerGuid as [ObverseAcGuid],
							@AcCommissionFromOwnerNote
				end
				
				if @CommissionFromSalesManValue > 0
				begin
						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
		 				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@AcCommissionExpenseGuid,
							@CommissionFromSalesManValue as Debit,
							0 as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCost = 1 then @CostGuid end,
							@AcSalesManCommissionGuid as [ObverseAcGuid],
							Case when @SalesManCommNote <> '' then @SalesManCommNote else @EntryNote end

						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
		 				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@AcSalesManCommissionGuid,
							0 as Debit,
							@CommissionFromSalesManValue as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCostWithclientCommCredit = 1 then @CostGuid end,
							@AcCommissionExpenseGuid as [ObverseAcGuid],
							Case when @SalesManCommNote <> '' then @SalesManCommNote else @EntryNote end
				end
		end	--Ýí ÍÇá ÇáÚÞÏ ÈíÚ
	
		if (@ContractKind = @p_LandRent) or (@ContractKind = @p_VillaRent)
		begin
				Insert Into [HEntry]
				([Guid],[SecLvl],[Number],[Date], [CurrencyGuid], [CurrencyVal], [Note], [ParentKind], [BranchGuid], [IsPosted], Mark)
				Select
					@EnGuid,
					@SecLvl,
					@EnNum,
					@EntryDate,
					@CurrencyGuid,
					@CurrencyVal,
					@EntryNote as [Note],
					1000+@ContractKind as [ParentKind], 
					@BranchGuid as [BranchGuid], 
					@AutoPostedEntry as [IsPosted],
					@Mark
					
				Set @DetailNum = 0
				
				if @Rent <> 0
				begin
						Insert into [DEntry]
		 				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@CustAccountGuid as [AccountGuid],
							Case when @UnearnedrRevenue = 0 then @Rent else (@Rent - @DiscountValue) end as Debit,
							0 as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCost = 1 then @CostGuid end,
							@RevenueAccountGuid as [ObverseAcGuid],
							@EntryNote as [Note]
							
						if @UnearnedrRevenue = 0 
						begin
							Set @DetailNum = @DetailNum + 1
							Insert into [DEntry]
		 					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
							Select
								@EnGuid,
								@DetailNum,
								@RevenueAccountGuid as [AccountGuid],
								0 as Debit,
								@Rent as Credit,
								@CurrencyGuid,
								@CurrencyVal,
								Case when @MoveCostWithIncomCredit = 1 then @CostGuid end,
								@CustAccountGuid as [ObverseAcGuid],
								@EntryNote as [Note]
						end
						else
						begin
							Set @DetailNum = @DetailNum + 1
							Insert into [DEntry]
		 					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
							Select
								@EnGuid,
								@DetailNum,
								@RevenueAccountGuid as [AccountGuid],
								0 as Debit,
								(((@Rent - @DiscountValue) / dbo.fnGetCountDayofYear()) * (dbo.fnDaysBetween(@fromdate, @MaxDate))) as Credit,
								@CurrencyGuid,
								@CurrencyVal,
								Case when @MoveCostWithIncomCredit = 1 then @CostGuid end,
								@CustAccountGuid as [ObverseAcGuid],
								@EntryNote as [Note]
		
							Set @DetailNum = @DetailNum + 1
							Insert into [DEntry]
		 					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
							Select
								@EnGuid,
								@DetailNum,
								@AcIncomNextYearGuid as [AccountGuid],
								0 as Debit,
								(@Rent - @DiscountValue) - (((@Rent - @DiscountValue) / dbo.fnGetCountDayofYear()) * (dbo.fnDaysBetween(@fromdate, @MaxDate))) as Credit,
								@CurrencyGuid,
								@CurrencyVal,
								Case when @MoveCostWithIncomCredit = 1 then @CostGuid end,
								@CustAccountGuid as [ObverseAcGuid],
								@EntryNote as [Note]
						end
				end
				
				if @InsuranceValue <> 0
				begin
						--Select @InsuranceValue ,@CustAccountGuid, @InsuranceAccountGuid

						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
	 					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@CustAccountGuid,
							@InsuranceValue,
							0,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCost = 1 then @CostGuid end,
							@InsuranceAccountGuid,
							@EntryNote

						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
	 					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@InsuranceAccountGuid,
							0,
							@InsuranceValue,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCostWithInsuranceCredit = 1 then @CostGuid end,
							@CustAccountGuid,
							@EntryNote
				end
				
				if @CommissionFromCustValue > 0
				begin
						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
	 					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@CustAccountGuid,
							@CommissionFromCustValue as Debit,
							0 as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCost = 1 then @CostGuid end,
							@AcCommissionFromCustGuid as [ObverseAcGuid],
							@AcCommissionFromCustNote

						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
	 					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@AcCommissionFromCustGuid,
							0 as Debit,
							@CommissionFromCustValue as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCostWithclientCommCredit = 1 then @CostGuid end,
							@CustAccountGuid as [ObverseAcGuid],
							@AcCommissionFromCustNote
				end	
				if @CommissionFromOwnerValue > 0
				begin

						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
	 					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@AcCustOwnerGuid,
							@CommissionFromOwnerValue as Debit,
							0 as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCostWithOwnerComm = 1 then @CostGuid end,
							@AcCommissionFromOwnerGuid as [ObverseAcGuid],
							@EntryNote

						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
	 					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@AcCommissionFromOwnerGuid,
							0 as Debit,
							@CommissionFromOwnerValue as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCostWithOwnerCommCredit = 1 then @CostGuid end,
							@AcCustOwnerGuid as [ObverseAcGuid],
							@AcCommissionFromOwnerNote
				end
				
				if @CommissionFromSalesManValue > 0
				begin
						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
		 				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@AcCommissionExpenseGuid,
							@CommissionFromSalesManValue as Debit,
							0 as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCost = 1 then @CostGuid end,
							@AcSalesManCommissionGuid as [ObverseAcGuid],
							Case when @SalesManCommNote <> '' then @SalesManCommNote else @EntryNote end

						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
		 				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@AcSalesManCommissionGuid,
							0 as Debit,
							@CommissionFromSalesManValue as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCostWithclientCommCredit = 1 then @CostGuid end,
							@AcCommissionExpenseGuid as [ObverseAcGuid],
							Case when @SalesManCommNote <> '' then @SalesManCommNote else @EntryNote end
				end

				if @CertificatValue > 0
				begin
						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
	 					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@CustAccountGuid,
							@CertificatValue as Debit,
							0 as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCost = 1 then @CostGuid end,
							@AccountCertificatValueGuid as [ObverseAcGuid],
							@EntryNote

						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
	 					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@AccountCertificatValueGuid,
							0 as Debit,
							@CertificatValue as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCostWithCertificatCredit = 1 then @CostGuid end,
							@CustAccountGuid as [ObverseAcGuid],
							@EntryNote
				end	
				
				if @OtherFee > 0
				begin
						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
	 					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@CustAccountGuid,
							@OtherFee as Debit,
							0 as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCost = 1 then @CostGuid end,
							@OtherFeeAccountGuid as [ObverseAcGuid],
							@EntryNote

						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
	 					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@OtherFeeAccountGuid,
							0 as Debit,
							@OtherFee as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCostWithFeeCredit = 1 then @CostGuid end,
							@CustAccountGuid as [ObverseAcGuid],
							@EntryNote
				end	
				
				exec [dbo].[PrcCreateEntryFromLandContractFee] @ContractGuid

				if @ContractPrice > 0
				begin
						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
	 					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@CustAccountGuid,
							@ContractPrice as Debit,
							0 as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCost = 1 then @CostGuid end,
							@AccountContractPriceGuid as [ObverseAcGuid],
							@EntryNote

						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
	 					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@AccountContractPriceGuid,
							0 as Debit,
							@ContractPrice as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCostWithFeeCredit = 1 then @CostGuid end,
							@CustAccountGuid as [ObverseAcGuid],
							@EntryNote
				end	
			end
		end
		
		if (@FlatOwner <> 0) and (@FlatOwner <> -1)
		begin
			Insert Into [HEntry]
			([Guid],[SecLvl],[Number],[Date], [CurrencyGuid], [CurrencyVal], [Note], [ParentKind], [BranchGuid], [IsPosted], Mark)
			Select
				@EnGuid,
				@SecLvl,
				@EnNum,
				@EntryDate,
				@CurrencyGuid,
				@CurrencyVal,
				@EntryNote as [Note],
				1000+@ContractKind as [ParentKind], 
				@BranchGuid  as [BranchGuid], 
				@AutoPostedEntry as [IsPosted],
				@Mark
				
			Set @DetailNum = 0
			
			--rent
			Set @DetailNum = @DetailNum + 1
			Insert into [DEntry]
			([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
			Select
				@EnGuid,
				@DetailNum,
				@CustAccountGuid,
				@rent,
				0,
				@CurrencyGuid,
				@CurrencyVal,
				Case when @MoveCost = 1 then @CostGuid end,
				@RevenueAccountGuid,
				@EntryNote
				
			Set @DetailNum = @DetailNum + 1
			Insert into [DEntry]
			([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
			Select
				@EnGuid,
				@DetailNum,
				@RevenueAccountGuid,
				0,
				@rent,
				@CurrencyGuid,
				@CurrencyVal,
				Case when @MoveCostWithIncomCredit = 1 then @CostGuid end,
				@CustAccountGuid,
				@EntryNote

			--Insurance
			if @InsuranceValue <> 0
			begin
				Select @InsuranceValue ,@CustAccountGuid, @InsuranceAccountGuid

				Set @DetailNum = @DetailNum + 1
				Insert into [DEntry]
				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
				Select
					@EnGuid,
					@DetailNum,
					@CustAccountGuid,
					@InsuranceValue,
					0,
					@CurrencyGuid,
					@CurrencyVal,
					Case when @MoveCost = 1 then @CostGuid end,
					@InsuranceAccountGuid,
					@EntryNote
					
				Set @DetailNum = @DetailNum + 1
				Insert into [DEntry]
				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
				Select
					@EnGuid,
					@DetailNum,
					@InsuranceAccountGuid,
					0,
					@InsuranceValue,
					@CurrencyGuid,
					@CurrencyVal,
					Case when @MoveCostWithInsuranceCredit = 1 then @CostGuid end,
					@CustAccountGuid,
					@EntryNote
			end

			if @CommissionFromCustValue > 0
			begin
					Set @DetailNum = @DetailNum + 1
					Insert into [DEntry]
		 			([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
					Select
						@EnGuid,
						@DetailNum,
						@CustAccountGuid,
						@CommissionFromCustValue as Debit,
						0 as Credit,
						@CurrencyGuid,
						@CurrencyVal,
						Case when @MoveCost = 1 then @CostGuid end,
						@AcCommissionFromCustGuid as [ObverseAcGuid],
						@AcCommissionFromCustNote

					Set @DetailNum = @DetailNum + 1
					Insert into [DEntry]
		 			([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
					Select
						@EnGuid,
						@DetailNum,
						@AcCommissionFromCustGuid,
						0 as Debit,
						@CommissionFromCustValue as Credit,
						@CurrencyGuid,
						@CurrencyVal,
						Case when @MoveCostWithclientCommCredit = 1 then @CostGuid end,
						@CustAccountGuid as [ObverseAcGuid],
						@AcCommissionFromCustNote
			end

			if @CommissionFromOwnerValue > 0
			begin

					Set @DetailNum = @DetailNum + 1
					Insert into [DEntry]
		 			([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
					Select
						@EnGuid,
						@DetailNum,
						@AcCustOwnerGuid,
						@CommissionFromOwnerValue as Debit,
						0 as Credit,
						@CurrencyGuid,
						@CurrencyVal,
						Case when @MoveCostWithOwnerComm = 1 then @CostGuid end,
						@AcCommissionFromOwnerGuid as [ObverseAcGuid],
						@EntryNote

					Set @DetailNum = @DetailNum + 1
					Insert into [DEntry]
		 			([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
					Select
						@EnGuid,
						@DetailNum,
						@AcCommissionFromOwnerGuid,
						0 as Debit,
						@CommissionFromOwnerValue as Credit,
						@CurrencyGuid,
						@CurrencyVal,
						Case when @MoveCostWithclientCommCredit = 1 then @CostGuid end,
						@AcCustOwnerGuid as [ObverseAcGuid],
						@AcCommissionFromOwnerNote
			end

				if @CommissionFromSalesManValue > 0
				begin
						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
		 				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@AcCommissionExpenseGuid,
							@CommissionFromSalesManValue as Debit,
							0 as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCost = 1 then @CostGuid end,
							@AcSalesManCommissionGuid as [ObverseAcGuid],
							Case when @SalesManCommNote <> '' then @SalesManCommNote else @EntryNote end

						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
		 				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@AcSalesManCommissionGuid,
							0 as Debit,
							@CommissionFromSalesManValue as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCostWithclientCommCredit = 1 then @CostGuid end,
							@AcCommissionExpenseGuid as [ObverseAcGuid],
							Case when @SalesManCommNote <> '' then @SalesManCommNote else @EntryNote end
				end

			if @CertificatValue > 0
			begin
					Set @DetailNum = @DetailNum + 1
					Insert into [DEntry]
					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
					Select
						@EnGuid,
						@DetailNum,
						@CustAccountGuid,
						@CertificatValue,
						0,
						@CurrencyGuid,
						@CurrencyVal,
						Case when @MoveCost = 1 then @CostGuid end,
						@AccountCertificatValueGuid,
						@EntryNote

					Set @DetailNum = @DetailNum + 1
					Insert into [DEntry]
					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
					Select
						@EnGuid,
						@DetailNum,
						@AccountCertificatValueGuid,
						0 as Debit,
						@CertificatValue as Credit,
						@CurrencyGuid,
						@CurrencyVal,
						Case when @MoveCostWithCertificatCredit = 1 then @CostGuid end,
						@CustAccountGuid as [ObverseAcGuid],
						@EntryNote
			end	
			if @OtherFee > 0
			begin
					Set @DetailNum = @DetailNum + 1
					Insert into [DEntry]
					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
					Select
						@EnGuid,
						@DetailNum,
						@CustAccountGuid,
						@OtherFee as Debit,
						0 as Credit,
						@CurrencyGuid,
						@CurrencyVal,
						Case when @MoveCost = 1 then @CostGuid end,
						@OtherFeeAccountGuid as [ObverseAcGuid],
						@EntryNote

					Set @DetailNum = @DetailNum + 1
					Insert into [DEntry]
					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
					Select
						@EnGuid,
						@DetailNum,
						@OtherFeeAccountGuid,
						0 as Debit,
						@OtherFee as Credit,
						@CurrencyGuid,
						@CurrencyVal,
						Case when @MoveCostWithFeeCredit = 1 then @CostGuid end,
						@CustAccountGuid as [ObverseAcGuid],
						@EntryNote
			end	
			
			exec [dbo].[PrcCreateEntryFromLandContractFee] @ContractGuid

			if @ContractPrice > 0
			begin
					Set @DetailNum = @DetailNum + 1
					Insert into [DEntry]
					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
					Select
						@EnGuid,
						@DetailNum,
						@CustAccountGuid,
						@ContractPrice as Debit,
						0 as Credit,
						@CurrencyGuid,
						@CurrencyVal,
						Case when @MoveCost = 1 then @CostGuid end,
						@AccountContractPriceGuid as [ObverseAcGuid],
						@EntryNote

					Set @DetailNum = @DetailNum + 1
					Insert into [DEntry]
					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
					Select
						@EnGuid,
						@DetailNum,
						@AccountContractPriceGuid,
						0 as Debit,
						@ContractPrice as Credit,
						@CurrencyGuid,
						@CurrencyVal,
						Case when @MoveCostWithFeeCredit = 1 then @CostGuid end,
						@CustAccountGuid as [ObverseAcGuid],
						@EntryNote
			end	
		end

		if (@DiscountValue > 0) and (@UnearnedrRevenue = 0)
		begin
				Set @DetailNum = @DetailNum + 1
					Insert into [DEntry]
					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
					Select
					@EnGuid,
					@DetailNum,
					@DiscountAccountGuid,
					@DiscountValue as Debit,
					0 as Credit,
					@CurrencyGuid,
					@CurrencyVal,
					Case when @MoveCostWithDiscount = 1 then @CostGuid end,
					@custAccountGuid,
					dbo.SC('ÍÓã Úáì ') + @EntryNote

				Set @DetailNum = @DetailNum + 1
				Insert into [DEntry]
				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
				Select
					@EnGuid,
					@DetailNum,
					@custAccountGuid,
					0,
					@DiscountValue,
					@CurrencyGuid,
					@CurrencyVal,
					Case when @MoveCostWithDiscountCredit = 1 then @CostGuid end,
					@DiscountAccountGuid as [ObverseAcGuid],
					dbo.SC('ÍÓã Úáì ') + @EntryNote
		end	

		exec PrcDoDistributiveEntry @EnGuid
		
		Update [Hentry] Set IsPosted = 1 where Guid = @EnGuid
		

GO
/****** Object:  StoredProcedure [dbo].[PrcCreateContractParkingEntry]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcCreateContractParkingEntry]
(
	@ContractGuid uniqueidentifier = '{458DE1F0-B983-4E6B-A963-8B11F66ACF8D}',
	@MaxDate int = 42644,
	@Showresult bit = 1
)
  
AS
	Set NoCount on 
	Declare 
			@EnNum int,
			@EnGuid [uniqueidentifier]

	-- ÇáÞíÏ ÇáÓÇÈÞ
	Select 
		@EnNum = isnull([Number],0)
		,@EnGuid = isnull([Guid],0x0)
	From
		[HEntry]
	where
		[Guid] = @ContractGuid

	if isnull(@EnNum,0) = 0
	begin	
		Select @EnNum = IsNull(Max([Number]),0) + 1 from [HEntry]
	END
	
	if isnull(@EnGuid,0x0) = 0x0
	Set @EnGuid = @ContractGuid

	if Exists(Select Number From HEntry where Number = @EnNum and [Guid] <> @EnGuid)
	Select @EnNum = IsNull(Max([Number]),0) + 1 from [HEntry]

	-- ÍÐÝ ÇáÞíæÏ ÇáÞÏíãÉ
	Delete
		[HEntry]
	where
		[Guid] = @EnGuid

		
	DECLARE 
		@ParkingNo Varchar(256),
		@FlatOwner int,
		@EntryDate Datetime,
		@AutoCreateEntry bit,
		@CreateEntry bit,
		@MoveCost bit,
		@MoveCostCredit bit,
		@MoveCostWithIncom bit,
		@MoveCostWithInconEndContract bit,
		@MoveCostWithFineEndContract bit,
		@MoveCostWithInsurance bit,
		@MoveCostWithContractPrice bit,
		@MoveCostWithCertificat bit,
		@MoveCostWithFee bit,
		@MoveCostWithclientComm bit,
		@MoveCostWithOwnerComm bit,
		@MoveCostWithDiscount bit,
		@MoveCostWithDiscountCredit bit,
		@MoveCostWithIncomCredit bit,
		@MoveCostWithInconEndContractCredit bit,
		@MoveCostWithFineEndContractCredit bit,
		@MoveCostWithInsuranceCredit bit,
		@MoveCostWithContractPriceCredit bit,
		@MoveCostWithCertificatCredit bit,
		@MoveCostWithFeeCredit bit,
		@MoveCostWithclientCommCredit bit,
		@MoveCostWithOwnerCommCredit bit,
		@SecLvl int,
		@CurrencyGuid uniqueidentifier,
		@CurrencyVal Float,
		@TypeName varchar(256),
		@ContractNumber int,
		@Note2 varchar(256),
		@ContractKind int,
		@AutoPostedEntry bit,
		@Mark bit,
		@RealtyGuid uniqueidentifier,
		@BuildingGuid uniqueidentifier,
		@EntryNote Varchar(255),
		@DetailNum Int,
		@Rent Float,
		@CostGuid  uniqueidentifier,
		@CustAccountGuid uniqueidentifier,
		@RevenueAccountGuid uniqueidentifier,
		@CommissionFromCustValue Float,
		@AcCommissionFromCustGuid uniqueidentifier,
		@AcCommissionFromCustNote varchar(256),
		@AcCustOwnerGuid uniqueidentifier,
		@CommissionFromOwnerValue Float,
		@AcCommissionFromOwnerGuid uniqueidentifier,
		@AcCommissionFromOwnerNote varchar(256),
		@UnearnedrRevenue bit,
		@Fromdate datetime,
		@Todate datetime,
		@AcIncomNextYearGuid uniqueidentifier,
		@InsuranceValue Float,
		@InsuranceAccountGuid uniqueidentifier,
		@CertificatValue Float,
		@AccountCertificatValueGuid uniqueidentifier,
		@OtherFeeAccountGuid uniqueidentifier,
		@OtherFee Float,

		@ContractPrice Float,
		@AccountContractPriceGuid uniqueidentifier,
		@DiscountValue fLoat,
		@DiscountAccountGuid uniqueidentifier,
		@BranchGuid uniqueidentifier,
		
		@CommissionFromSalesManrPercent fLoat,
		@CommissionFromSalesManValue fLoat,
		@AcSalesManCommissionGuid uniqueidentifier,
		@AcCommissionExpenseGuid uniqueidentifier,
		@SalesManCommNote varchar(255)
	
	SELECT	TOP 1
		@ParkingNo = Case when [t].[ContractKind] = 4 then 'ÇíÌÇÑ ãæÞÝ'
			 when [t].[ContractKind] = 5 then 'ÇíÌÇÑ ãæÞÝ'
		end
		+' /'+ [S].[No] +'/' 
		+' '+[B].[Name],
		
		@FlatOwner = S.FlatOwner,
		@EntryDate = Case when T.EntryDate = 0 then C.FromDate else C.EditDate end,
		@AutoCreateEntry = T.AutoCreateEntry,
		@AutoPostedEntry = T.AutoPostedEntry,
		@CreateEntry = T.CreateEntry,
		@MoveCost = T.MoveCost,
		@MoveCostCredit = T.MoveCostCredit,

		@MoveCostWithIncom = T.MoveCostWithIncom,
		@MoveCostWithInconEndContract = T.MoveCostWithInconEndContract,
		@MoveCostWithFineEndContract = T.MoveCostWithFineEndContract,
		@MoveCostWithInsurance = T.MoveCostWithInsurance,
		@MoveCostWithContractPrice = T.MoveCostWithContractPrice,
		@MoveCostWithCertificat = T.MoveCostWithCertificat,
		@MoveCostWithFee = T.MoveCostWithFee,
		@MoveCostWithclientComm = T.MoveCostWithclientComm,
		@MoveCostWithOwnerComm = T.MoveCostWithOwnerComm,

		@MoveCostWithDiscount = T.MoveCostWithDiscount,
		@MoveCostWithDiscountCredit = T.MoveCostWithDiscountCredit,

		@MoveCostWithIncomCredit = T.MoveCostWithIncomCredit,
		@MoveCostWithInconEndContractCredit = T.MoveCostWithInconEndContractCredit,
		@MoveCostWithFineEndContractCredit = T.MoveCostWithFineEndContractCredit,
		@MoveCostWithInsuranceCredit = T.MoveCostWithInsuranceCredit,
		@MoveCostWithContractPriceCredit = T.MoveCostWithContractPriceCredit,
		@MoveCostWithCertificatCredit = T.MoveCostWithCertificatCredit,
		@MoveCostWithFeeCredit = T.MoveCostWithFeeCredit,
		@MoveCostWithclientCommCredit = T.MoveCostWithclientCommCredit,
		@MoveCostWithOwnerCommCredit = T.MoveCostWithOwnerCommCredit,
		@SecLvl = C.SecLvl,
		@CurrencyGuid = C.CurrencyGuid,
		@CurrencyVal = C.CurrencyVal,
		@TypeName = T.Name,
		@ContractNumber = C.Number ,
		@Note2 = C.Note2,
		@ContractKind = C.ContractKind,
		@AutoPostedEntry = T.AutoPostedEntry,
		@Mark = C.Mark,
		@RealtyGuid = C.ParkingGuid,
		@BuildingGuid = C.BuildingGuid,
		@Rent = C.Rent,
		@CostGuid = C.CostGuid,
		@CustAccountGuid = C.CustAccountGuid,
		@RevenueAccountGuid = C.RevenueAccountGuid,
		@CommissionFromCustValue = C.CommissionFromCustValue,
		@AcCommissionFromCustGuid = C.AcCommissionFromCustGuid,
		@AcCommissionFromCustNote = C.AcCommissionFromCustNote,
		@CommissionFromOwnerValue = C.CommissionFromOwnerValue,
		@AcCommissionFromOwnerGuid = C.AcCommissionFromOwnerGuid ,
		@AcCommissionFromOwnerNote = C.AcCommissionFromOwnerNote,
		@UnearnedrRevenue = Case when (T.UnearnedrRevenue = 1) and (C.Todate > @MaxDate) then 1 else 0 end,
		@Fromdate = C.FromDate,
		@Todate = C.ToDate,
		@AcIncomNextYearGuid = C.AcIncomNextYearGuid,
		@InsuranceValue = C.InsuranceValue,
		@InsuranceAccountGuid = Cu.InsuranceAccountGuid,
		@CertificatValue = C.CertificatValue,
		@AccountCertificatValueGuid = C.AccountCertificatValue,
		@OtherFee = 0, --C.OtherFee,
		@OtherFeeAccountGuid = 0x0, --C.OtherFeeAccountGUID,

		@ContractPrice = C.ContractPrice,
		@AccountContractPriceGuid = C.AccountContractPrice,
		@DiscountValue = C.DiscountValue,
		@DiscountAccountGuid = C.DiscountAccountGuid,
		@BranchGuid = C.BranchGuid,
		@EntryNote = [T].[ContractNote],

		@CommissionFromSalesManrPercent = C.[CommissionFromSalesManrPercent],
		@CommissionFromSalesManValue = C.CommissionFromSalesManValue,
		@AcSalesManCommissionGuid = C.AcSalesManCommissionGuid,
		@AcCommissionExpenseGuid = C.AcCommissionExpenseGuid,
		@SalesManCommNote = C.SalesManCommNote

	FROM
		[ParkingContract]  C
		inner join [vwContractType] T on T.Guid = C.TypeGuid
		inner join [Parking] [S] on [S].[Guid] = [C].[ParkingGuid]
		inner join [vwBuilding] [B] On [S].[BuildingGuid] = [B].[Guid]
		inner join [vwcustomer] [Cu] On [Cu].[Guid] = [C].[CustomerGuid]
	WHERE
		C.Guid = @ContractGuid
	--Set @EntryNote = @TypeName +' '+dbo.sc('ÑÞã ÇáÚÞÏ')+' '+CAST( @ContractNumber as varchar(255)) +' '+dbo.sc('ÑÞã ÇáÚÞÇÑ')+' '+@ParkingNo +' '+@Note2
	
	Select 
		@EntryNote  =				REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
									REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
									@EntryNote, '[N]', TypeNameAr),
									'[M]', TypeNameLtn),
									'[A]', CustArName),
									'[B]', CustltnName),
									'[C]', FlatNo),
									'[D]', BuildingArName),
									'[E]', BuildingLtnName),
									'[F]', dbo.fndate(EditDate)),
									'[G]', dbo.fndate(Fromdate)),
									'[H]', dbo.fndate(Todate)),
									'[K]', ContractNo),
									'[L]', Cast(Value as varchar(50)))
									
	from 
		[vwAllContract]
	where
		Guid = @ContractGuid
		

	Select
		@AcCustOwnerGuid = [Cu].[AcGuid]
	from
		Parking P
		inner join [Customer] [Cu] on [P].CustGuid = [Cu].[Guid]
	where
		[P].[Guid] = @RealtyGuid 

	if ISNULL(@AcCustOwnerGuid,0x0) = 0x0
	select
		@AcCustOwnerGuid = [Cu].[AcGuid]
	from
		vwParking P
		inner join [Customer] [Cu] on [P].[BuildingOwnerName] = [Cu].[Guid]
	where
		[P].[Guid] = @RealtyGuid 

	if (@FlatOwner = 0 or @FlatOwner = -1)
	begin
	if (@ContractKind = 5) --Ýí ÍÇá ÇáÚÞÏ ÈíÚ
	begin
			Insert Into [HEntry]
			([Guid],[SecLvl],[Number],[Date], [CurrencyGuid], [CurrencyVal], [Note], [ParentKind], [BranchGuid], [IsPosted], Mark)
			Select
				@EnGuid,
				@SecLvl,
				@EnNum,
				@EntryDate,
				@CurrencyGuid,
				@CurrencyVal,
				@EntryNote as [Note],
				1000+@ContractKind as [ParentKind], 
				@BranchGuid as [BranchGuid], 
				@AutoPostedEntry as [IsPosted],
				@Mark
				
			Set @DetailNum = 0
			
			Insert into [DEntry]
		 	([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
			Select
				@EnGuid,
				@DetailNum,
				@CustAccountGuid,
				@Rent as Debit,
				0 as Credit,
				@CurrencyGuid,
				@CurrencyVal,
				Case when @MoveCost = 1 then @CostGuid end,
				Null as [ObverseAcGuid],
				@EntryNote

			--ÓÚÑ ÇáßáÝÉ
			Declare @CostPrice Float
			
			Select	@CostPrice = CostPrice	From Parking where Guid = @RealtyGuid
			
			if @CostPrice > 0
			begin
				Declare @BuildingAcGuid uniqueidentifier
				Select @BuildingAcGuid = BuildingAccountGuid From Building where Guid = @BuildingGuid
				
				if IsNull(@BuildingAcGuid,0x0) <> 0x0
				begin
					Set @DetailNum = @DetailNum + 1
					Insert into [DEntry]
		 			([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
					Select
						@EnGuid,
						@DetailNum,
						@BuildingAcGuid,
						0 as Debit,
						@CostPrice as Credit,
						@CurrencyGuid,
						@CurrencyVal,
						Case when @MoveCost = 1 then @CostGuid end,
						Null as [ObverseAcGuid],
						@EntryNote
				end
			end
			
			if @CostPrice <= @Rent
			begin
					Set @DetailNum = @DetailNum + 1
					Insert into [DEntry]
		 			([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
					Select
						@EnGuid,
						@DetailNum,
						@RevenueAccountGuid,
						0 as Debit,
						@Rent - @CostPrice as Credit,
						@CurrencyGuid,
						@CurrencyVal,
						Case when @MoveCostWithIncomCredit = 1 then @CostGuid end,
						@CustAccountGuid as [ObverseAcGuid],
						@EntryNote
			end
			if @CostPrice > @Rent
			begin
					Set @DetailNum = @DetailNum + 1
					Insert into [DEntry]
		 			([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
					Select
						@EnGuid,
						@DetailNum,
						@RevenueAccountGuid,
						@CostPrice - @Rent as Debit,
						0 as Credit,
						@CurrencyGuid,
						@CurrencyVal,
						Case when @MoveCostWithIncom = 1 then @CostGuid end,
						@CustAccountGuid as [ObverseAcGuid],
						@EntryNote
			end
			
			if @CommissionFromCustValue > 0
			begin
					Set @DetailNum = @DetailNum + 1
					Insert into [DEntry]
		 			([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
					Select
						@EnGuid,
						@DetailNum,
						@CustAccountGuid,
						@CommissionFromCustValue as Debit,
						0 as Credit,
						@CurrencyGuid,
						@CurrencyVal,
						Case when @MoveCost = 1 then @CostGuid end,
						@AcCommissionFromCustGuid as [ObverseAcGuid],
						@AcCommissionFromCustNote

					Set @DetailNum = @DetailNum + 1
					Insert into [DEntry]
		 			([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
					Select
						@EnGuid,
						@DetailNum,
						@AcCommissionFromCustGuid,
						0 as Debit,
						@CommissionFromCustValue as Credit,
						@CurrencyGuid,
						@CurrencyVal,
						Case when @MoveCostWithclientCommCredit = 1 then @CostGuid end,
						@CustAccountGuid as [ObverseAcGuid],
						@AcCommissionFromCustNote
			end

			if @CommissionFromOwnerValue > 0
			begin

					Set @DetailNum = @DetailNum + 1
					Insert into [DEntry]
		 			([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
					Select
						@EnGuid,
						@DetailNum,
						@AcCustOwnerGuid,
						@CommissionFromOwnerValue as Debit,
						0 as Credit,
						@CurrencyGuid,
						@CurrencyVal,
						Case when @MoveCostWithOwnerComm = 1 then @CostGuid end,
						@AcCommissionFromOwnerGuid as [ObverseAcGuid],
						@EntryNote

					Set @DetailNum = @DetailNum + 1
					Insert into [DEntry]
		 			([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
					Select
						@EnGuid,
						@DetailNum,
						@AcCommissionFromOwnerGuid,
						0 as Debit,
						@CommissionFromOwnerValue as Credit,
						@CurrencyGuid,
						@CurrencyVal,
						Case when @MoveCostWithclientCommCredit = 1 then @CostGuid end,
						@AcCustOwnerGuid as [ObverseAcGuid],
						@AcCommissionFromOwnerNote
						
			end
			
				if @CommissionFromSalesManValue > 0
				begin
						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
		 				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@AcCommissionExpenseGuid,
							@CommissionFromSalesManValue as Debit,
							0 as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCost = 1 then @CostGuid end,
							@AcSalesManCommissionGuid as [ObverseAcGuid],
							Case when @SalesManCommNote <> '' then @SalesManCommNote else @EntryNote end

						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
		 				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@AcSalesManCommissionGuid,
							0 as Debit,
							@CommissionFromSalesManValue as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCostWithclientCommCredit = 1 then @CostGuid end,
							@AcCommissionExpenseGuid as [ObverseAcGuid],
							Case when @SalesManCommNote <> '' then @SalesManCommNote else @EntryNote end
				end
	end			
	
	
	if (@ContractKind = 4)
	begin
			Insert Into [HEntry]
			([Guid],[SecLvl],[Number],[Date], [CurrencyGuid], [CurrencyVal], [Note], [ParentKind], [BranchGuid], [IsPosted], Mark)
			Select
				@EnGuid,
				@SecLvl,
				@EnNum,
				@EntryDate,
				@CurrencyGuid,
				@CurrencyVal,
				@EntryNote as [Note],
				1000+@ContractKind as [ParentKind], 
				@BranchGuid as [BranchGuid], 
				@AutoPostedEntry as [IsPosted],
				@Mark
				
			Set @DetailNum = 0
			
			if @Rent <> 0
			begin
					Insert into [DEntry]
		 			([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
					Select
						@EnGuid,
						@DetailNum,
						@CustAccountGuid as [AccountGuid],
						Case when @UnearnedrRevenue = 0 then @Rent else (@Rent - @DiscountValue) end as Debit,
						0 as Credit,
						@CurrencyGuid,
						@CurrencyVal,
						Case when @MoveCost = 1 then @CostGuid end,
						@RevenueAccountGuid as [ObverseAcGuid],
						@EntryNote as [Note]
						
					if @UnearnedrRevenue = 0 
					begin
						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
		 				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@RevenueAccountGuid as [AccountGuid],
							0 as Debit,
							@Rent as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCostWithIncomCredit = 1 then @CostGuid end,
							@CustAccountGuid as [ObverseAcGuid],
							@EntryNote as [Note]
					end
					else
					begin
						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
		 				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@RevenueAccountGuid as [AccountGuid],
							0 as Debit,
							(((@Rent - @DiscountValue) / dbo.fnGetCountDayofYear()) * (dbo.fnDaysBetween(@fromdate, @MaxDate))) as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCostWithIncomCredit = 1 then @CostGuid end,
							@CustAccountGuid as [ObverseAcGuid],
							@EntryNote as [Note]
	
						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
		 				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@AcIncomNextYearGuid as [AccountGuid],
							0 as Debit,
							(@Rent - @DiscountValue) - (((@Rent - @DiscountValue) / dbo.fnGetCountDayofYear()) * (dbo.fnDaysBetween(@fromdate, @MaxDate))) as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCostWithIncomCredit = 1 then @CostGuid end,
							@CustAccountGuid as [ObverseAcGuid],
							@EntryNote as [Note]
					end
			end
			
			if @InsuranceValue <> 0
			begin
					Set @DetailNum = @DetailNum + 1
					Insert into [DEntry]
	 				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
					Select
						@EnGuid,
						@DetailNum,
						@CustAccountGuid,
						@InsuranceValue,
						0,
						@CurrencyGuid,
						@CurrencyVal,
						Case when @MoveCost = 1 then @CostGuid end,
						@InsuranceAccountGuid,
						@EntryNote

					Set @DetailNum = @DetailNum + 1
					Insert into [DEntry]
	 				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
					Select
						@EnGuid,
						@DetailNum,
						@InsuranceAccountGuid,
						0,
						@InsuranceValue,
						@CurrencyGuid,
						@CurrencyVal,
						Case when @MoveCostWithInsuranceCredit = 1 then @CostGuid end,
						@CustAccountGuid,
						@EntryNote
			end
			
			if @CommissionFromCustValue > 0
			begin
					Set @DetailNum = @DetailNum + 1
					Insert into [DEntry]
	 				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
					Select
						@EnGuid,
						@DetailNum,
						@CustAccountGuid,
						@CommissionFromCustValue as Debit,
						0 as Credit,
						@CurrencyGuid,
						@CurrencyVal,
						Case when @MoveCost = 1 then @CostGuid end,
						@AcCommissionFromCustGuid as [ObverseAcGuid],
						@AcCommissionFromCustNote

					Set @DetailNum = @DetailNum + 1
					Insert into [DEntry]
	 				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
					Select
						@EnGuid,
						@DetailNum,
						@AcCommissionFromCustGuid,
						0 as Debit,
						@CommissionFromCustValue as Credit,
						@CurrencyGuid,
						@CurrencyVal,
						Case when @MoveCostWithclientCommCredit = 1 then @CostGuid end,
						@CustAccountGuid as [ObverseAcGuid],
						@AcCommissionFromCustNote
			end	
			if @CommissionFromOwnerValue > 0
			begin
					Set @DetailNum = @DetailNum + 1
					Insert into [DEntry]
	 				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
					Select
						@EnGuid,
						@DetailNum,
						@AcCustOwnerGuid,
						@CommissionFromOwnerValue as Debit,
						0 as Credit,
						@CurrencyGuid,
						@CurrencyVal,
						Case when @MoveCostWithOwnerComm = 1 then @CostGuid end,
						@AcCommissionFromOwnerGuid as [ObverseAcGuid],
						@EntryNote

					Set @DetailNum = @DetailNum + 1
					Insert into [DEntry]
	 				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
					Select
						@EnGuid,
						@DetailNum,
						@AcCommissionFromOwnerGuid,
						0 as Debit,
						@CommissionFromOwnerValue as Credit,
						@CurrencyGuid,
						@CurrencyVal,
						Case when @MoveCostWithOwnerCommCredit = 1 then @CostGuid end,
						@AcCustOwnerGuid as [ObverseAcGuid],
						@AcCommissionFromOwnerNote
			end
			
				if @CommissionFromSalesManValue > 0
				begin
						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
		 				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@AcCommissionExpenseGuid,
							@CommissionFromSalesManValue as Debit,
							0 as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCost = 1 then @CostGuid end,
							@AcSalesManCommissionGuid as [ObverseAcGuid],
							Case when @SalesManCommNote <> '' then @SalesManCommNote else @EntryNote end

						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
		 				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@AcSalesManCommissionGuid,
							0 as Debit,
							@CommissionFromSalesManValue as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCostWithclientCommCredit = 1 then @CostGuid end,
							@AcCommissionExpenseGuid as [ObverseAcGuid],
							Case when @SalesManCommNote <> '' then @SalesManCommNote else @EntryNote end
				end

			if @CertificatValue > 0
			begin
					Set @DetailNum = @DetailNum + 1
					Insert into [DEntry]
	 				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
					Select
						@EnGuid,
						@DetailNum,
						@CustAccountGuid,
						@CertificatValue as Debit,
						0 as Credit,
						@CurrencyGuid,
						@CurrencyVal,
						Case when @MoveCost = 1 then @CostGuid end,
						@AccountCertificatValueGuid as [ObverseAcGuid],
						@EntryNote

					Set @DetailNum = @DetailNum + 1
					Insert into [DEntry]
	 				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
					Select
						@EnGuid,
						@DetailNum,
						@AccountCertificatValueGuid,
						0 as Debit,
						@CertificatValue as Credit,
						@CurrencyGuid,
						@CurrencyVal,
						Case when @MoveCostWithCertificatCredit = 1 then @CostGuid end,
						@CustAccountGuid as [ObverseAcGuid],
						@EntryNote
			end	
			
			if @OtherFee > 0
			begin
					Set @DetailNum = @DetailNum + 1
					Insert into [DEntry]
	 				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
					Select
						@EnGuid,
						@DetailNum,
						@CustAccountGuid,
						@OtherFee as Debit,
						0 as Credit,
						@CurrencyGuid,
						@CurrencyVal,
						Case when @MoveCost = 1 then @CostGuid end,
						@OtherFeeAccountGuid as [ObverseAcGuid],
						@EntryNote

					Set @DetailNum = @DetailNum + 1
					Insert into [DEntry]
	 				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
					Select
						@EnGuid,
						@DetailNum,
						@OtherFeeAccountGuid,
						0 as Debit,
						@OtherFee as Credit,
						@CurrencyGuid,
						@CurrencyVal,
						Case when @MoveCostWithFeeCredit = 1 then @CostGuid end,
						@CustAccountGuid as [ObverseAcGuid],
						@EntryNote
			end	
			
			exec PrcCreateEntryFromParkingContractFee @ContractGuid, @Showresult

			if @ContractPrice > 0
			begin
					Set @DetailNum = @DetailNum + 1
					Insert into [DEntry]
	 				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
					Select
						@EnGuid,
						@DetailNum,
						@CustAccountGuid,
						@ContractPrice as Debit,
						0 as Credit,
						@CurrencyGuid,
						@CurrencyVal,
						Case when @MoveCost = 1 then @CostGuid end,
						@AccountContractPriceGuid as [ObverseAcGuid],
						@EntryNote

					Set @DetailNum = @DetailNum + 1
					Insert into [DEntry]
	 				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
					Select
						@EnGuid,
						@DetailNum,
						@AccountContractPriceGuid,
						0 as Debit,
						@ContractPrice as Credit,
						@CurrencyGuid,
						@CurrencyVal,
						Case when @MoveCostWithFeeCredit = 1 then @CostGuid end,
						@CustAccountGuid as [ObverseAcGuid],
						@EntryNote
			end	
		end
		end
		
		if (@FlatOwner <> 0) and (@FlatOwner <> -1)
		begin
			Insert Into [HEntry]
			([Guid],[SecLvl],[Number],[Date], [CurrencyGuid], [CurrencyVal], [Note], [ParentKind], [BranchGuid], [IsPosted], Mark)
			Select
				@EnGuid,
				@SecLvl,
				@EnNum,
				@EntryDate,
				@CurrencyGuid,
				@CurrencyVal,
				@EntryNote as [Note],
				1000+@ContractKind as [ParentKind], 
				@BranchGuid  as [BranchGuid], 
				@AutoPostedEntry as [IsPosted],
				@Mark
				
			Set @DetailNum = 0
			
			--rent
			Set @DetailNum = @DetailNum + 1
			Insert into [DEntry]
			([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
			Select
				@EnGuid,
				@DetailNum,
				@CustAccountGuid,
				@rent,
				0,
				@CurrencyGuid,
				@CurrencyVal,
				Case when @MoveCost = 1 then @CostGuid end,
				@RevenueAccountGuid,
				@EntryNote
				
			Set @DetailNum = @DetailNum + 1
			Insert into [DEntry]
			([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
			Select
				@EnGuid,
				@DetailNum,
				@RevenueAccountGuid,
				0,
				@rent,
				@CurrencyGuid,
				@CurrencyVal,
				Case when @MoveCostWithIncomCredit = 1 then @CostGuid end,
				@CustAccountGuid,
				@EntryNote

			--Insurance
			if @InsuranceValue <> 0
			begin
				Set @DetailNum = @DetailNum + 1
				Insert into [DEntry]
				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
				Select
					@EnGuid,
					@DetailNum,
					@CustAccountGuid,
					@InsuranceValue,
					0,
					@CurrencyGuid,
					@CurrencyVal,
					Case when @MoveCost = 1 then @CostGuid end,
					@InsuranceAccountGuid,
					@EntryNote
					
				Set @DetailNum = @DetailNum + 1
				Insert into [DEntry]
				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
				Select
					@EnGuid,
					@DetailNum,
					@InsuranceAccountGuid,
					0,
					@InsuranceValue,
					@CurrencyGuid,
					@CurrencyVal,
					Case when @MoveCostWithInsuranceCredit = 1 then @CostGuid end,
					@CustAccountGuid,
					@EntryNote
			end

			if @CommissionFromCustValue > 0
			begin
					Set @DetailNum = @DetailNum + 1
					Insert into [DEntry]
		 			([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
					Select
						@EnGuid,
						@DetailNum,
						@CustAccountGuid,
						@CommissionFromCustValue as Debit,
						0 as Credit,
						@CurrencyGuid,
						@CurrencyVal,
						Case when @MoveCost = 1 then @CostGuid end,
						@AcCommissionFromCustGuid as [ObverseAcGuid],
						@AcCommissionFromCustNote

					Set @DetailNum = @DetailNum + 1
					Insert into [DEntry]
		 			([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
					Select
						@EnGuid,
						@DetailNum,
						@AcCommissionFromCustGuid,
						0 as Debit,
						@CommissionFromCustValue as Credit,
						@CurrencyGuid,
						@CurrencyVal,
						Case when @MoveCostWithclientCommCredit = 1 then @CostGuid end,
						@CustAccountGuid as [ObverseAcGuid],
						@AcCommissionFromCustNote
			end

			if @CommissionFromOwnerValue > 0
			begin
					Set @DetailNum = @DetailNum + 1
					Insert into [DEntry]
		 			([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
					Select
						@EnGuid,
						@DetailNum,
						@AcCustOwnerGuid,
						@CommissionFromOwnerValue as Debit,
						0 as Credit,
						@CurrencyGuid,
						@CurrencyVal,
						Case when @MoveCostWithOwnerComm = 1 then @CostGuid end,
						@AcCommissionFromOwnerGuid as [ObverseAcGuid],
						@EntryNote

					Set @DetailNum = @DetailNum + 1
					Insert into [DEntry]
		 			([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
					Select
						@EnGuid,
						@DetailNum,
						@AcCommissionFromOwnerGuid,
						0 as Debit,
						@CommissionFromOwnerValue as Credit,
						@CurrencyGuid,
						@CurrencyVal,
						Case when @MoveCostWithclientCommCredit = 1 then @CostGuid end,
						@AcCustOwnerGuid as [ObverseAcGuid],
						@AcCommissionFromOwnerNote
			end
			
				if @CommissionFromSalesManValue > 0
				begin
						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
		 				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@AcCommissionExpenseGuid,
							@CommissionFromSalesManValue as Debit,
							0 as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCost = 1 then @CostGuid end,
							@AcSalesManCommissionGuid as [ObverseAcGuid],
							Case when @SalesManCommNote <> '' then @SalesManCommNote else @EntryNote end

						Set @DetailNum = @DetailNum + 1
						Insert into [DEntry]
		 				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
						Select
							@EnGuid,
							@DetailNum,
							@AcSalesManCommissionGuid,
							0 as Debit,
							@CommissionFromSalesManValue as Credit,
							@CurrencyGuid,
							@CurrencyVal,
							Case when @MoveCostWithclientCommCredit = 1 then @CostGuid end,
							@AcCommissionExpenseGuid as [ObverseAcGuid],
							Case when @SalesManCommNote <> '' then @SalesManCommNote else @EntryNote end
				end

			if @CertificatValue > 0
			begin
					Set @DetailNum = @DetailNum + 1
					Insert into [DEntry]
					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
					Select
						@EnGuid,
						@DetailNum,
						@CustAccountGuid,
						@CertificatValue,
						0,
						@CurrencyGuid,
						@CurrencyVal,
						Case when @MoveCost = 1 then @CostGuid end,
						@AccountCertificatValueGuid,
						@EntryNote

					Set @DetailNum = @DetailNum + 1
					Insert into [DEntry]
					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
					Select
						@EnGuid,
						@DetailNum,
						@AccountCertificatValueGuid,
						0 as Debit,
						@CertificatValue as Credit,
						@CurrencyGuid,
						@CurrencyVal,
						Case when @MoveCostWithCertificatCredit = 1 then @CostGuid end,
						@CustAccountGuid as [ObverseAcGuid],
						@EntryNote
			end	
			if @OtherFee > 0
			begin
					Set @DetailNum = @DetailNum + 1
					Insert into [DEntry]
					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
					Select
						@EnGuid,
						@DetailNum,
						@CustAccountGuid,
						@OtherFee as Debit,
						0 as Credit,
						@CurrencyGuid,
						@CurrencyVal,
						Case when @MoveCost = 1 then @CostGuid end,
						@OtherFeeAccountGuid as [ObverseAcGuid],
						@EntryNote

					Set @DetailNum = @DetailNum + 1
					Insert into [DEntry]
					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
					Select
						@EnGuid,
						@DetailNum,
						@OtherFeeAccountGuid,
						0 as Debit,
						@OtherFee as Credit,
						@CurrencyGuid,
						@CurrencyVal,
						Case when @MoveCostWithFeeCredit = 1 then @CostGuid end,
						@CustAccountGuid as [ObverseAcGuid],
						@EntryNote
			end	
			
			exec PrcCreateEntryFromParkingContractFee @ContractGuid
		end	

		if (@DiscountValue > 0) and (@UnearnedrRevenue = 0)
		begin
				Set @DetailNum = @DetailNum + 1
					Insert into [DEntry]
					([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
					Select
					@EnGuid,
					@DetailNum,
					@DiscountAccountGuid,
					@DiscountValue as Debit,
					0 as Credit,
					@CurrencyGuid,
					@CurrencyVal,
					Case when @MoveCostWithDiscount = 1 then @CostGuid end,
					@custAccountGuid,
					dbo.SC('ÍÓã Úáì ') + @EntryNote

				Set @DetailNum = @DetailNum + 1
				Insert into [DEntry]
				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
				Select
					@EnGuid,
					@DetailNum,
					@custAccountGuid,
					0,
					@DiscountValue,
					@CurrencyGuid,
					@CurrencyVal,
					Case when @MoveCostWithDiscountCredit = 1 then @CostGuid end,
					@DiscountAccountGuid as [ObverseAcGuid],
					dbo.SC('ÍÓã Úáì ') + @EntryNote
		end	

		exec PrcDoDistributiveEntry @EnGuid
		
		
		Delete Dentry where ParentGuid = @EnGuid and (Debit + Credit) = 0
		
		Delete [Hentry] 
		From
			[Hentry] H
			left join DEntry D on D.ParentGuid = H.Guid
		where 
			(H.Guid = @EnGuid )
			and D.ParentGuid is Null
			
		--Update [Hentry] Set IsPosted = 1 where Guid = @EnGuid
		

GO
/****** Object:  StoredProcedure [dbo].[PrcCreateElectricityBillEntry]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcCreateElectricityBillEntry]
(
	@Guid uniqueidentifier = 'E3AA1310-B8B3-4ABB-89D5-54D95317E212'
)
  
as
	Declare 
			@EnNum int,
			@EnGuid [uniqueidentifier]

	-- ÇáÞíÏ ÇáÓÇÈÞ
	Select 
		@EnNum = isnull([Number],0)
	From
		[HEntry]
	where
		[Guid] = @Guid

	Set @EnGuid = @Guid

	if isnull(@EnNum,0) = 0
	begin	
		Select @EnNum = IsNull(Max([Number]),0) + 1 from [HEntry]
	END


	-- ÍÐÝ ÇáÞíæÏ ÇáÞÏíãÉ
	Delete
		[Hentry]
	where
		[Guid] = @Guid

	DECLARE 
		@CreateEntry BIT,
		@AutoPostedEntry Bit

	SELECT	TOP 1
		@CreateEntry = [CreatedEntry],
		@AutoPostedEntry = [AutoPostedEntry]	
	FROM
		[ElectricityType]
	WHERE
		Guid = (		
				Select 
					[TypeGuid] 
				From 
					[ElectricityBill]
				WHERE
					[Guid] =@Guid
				)

	Declare 
		@SecLvl Int,
		@mark Bit,
		@Date DateTime,
		@AcCustGuid [uniqueidentifier] ,
		@Consumption Float,
		@WaterValue Float,
		@FineValue Float,
		@FeeValue Float,
		@DrainageValue Float,
		@Discount Float,
		@Extra Float,
		@IncomeAccountGuid [uniqueidentifier],
		@WaterAccountGuid [uniqueidentifier],
		@DrainageAccountGuid [uniqueidentifier],
		@FineAccountGuid [uniqueidentifier],
		@FeeAccountGuid [uniqueidentifier],
		@ExtraAccountGuid [uniqueidentifier] ,
		@DiscountAccountGuid [uniqueidentifier] ,
		@CurrencyGuid [uniqueidentifier] ,
		@CurrencyVal Float,
		@Note Varchar(256),
		@WaterNote Varchar(256),
		@DrainageNote Varchar(256),
		@DiscountNote Varchar(256),
		@ExtraNote Varchar(256),
		@ConsumptionNote Varchar(256),
		@FineNote Varchar(256),
		@FeeNote Varchar(256),
		@CreateBilltEntry Bit


	Select 
		@SecLvl = [B].[SecLvl],
		@Mark = [B].[Mark],
		@Date = [B].[Date],
		@AcCustGuid = [Cu].[AcGuid],
		@Discount = [B].[Discount],
		@Extra = [B].[Extra],
		@Consumption = [B].[Consumption],
		@WaterValue = [WaterValue],
		@DrainageValue = [DrainageValue],
		@FineValue = [FineValue],
		@FeeValue = [FeeValue],
		@IncomeAccountGuid = [IncomeAccountGuid],
		@WaterAccountGuid = [WaterAccountGuid],
		@FineAccountGuid = [FineAccountGuid],
		@FeeAccountGuid = [FeeAccountGuid],
		@DrainageAccountGuid = [DrainageAccountGuid],
		@ExtraAccountGuid = [ExtraAccountGuid],
		@DiscountAccountGuid = [DiscountAccountGuid],
		@CurrencyGuid = [B].[CurrencyGuid],
		@CurrencyVal = [B].[CurrencyVal],
		@Note = [B].[Note],
		@CreateBilltEntry = [B].[CreateBilltEntry],
		@WaterNote = B.WaterNote,
		@DrainageNote = B.DrainageNote,
		@DiscountNote = B.DiscountNote,
		@ExtraNote = B.ExtraNote,
		@FineNote = B.FineNote,
		@FeeNote = B.FeeNote,
		@ConsumptionNote = B.ConsumptionNote
	From 
		[ElectricityBill] [B]
		inner join [Customer] [Cu] on [Cu].[Guid] = [B].[CustGuid]
	where
		[B].[Guid]=@Guid
		
	Select @FineAccountGuid
	
	if (@CreateEntry = 1) and (@CreateBilltEntry = 1)
	begin

			Insert Into [HEntry]
			([Guid],[Mark],[SecLvl],[Number],[Date], [CurrencyGuid], [CurrencyVal], [Note], [ParentKind], [BranchGuid],[IsPosted])
			Select
				@EnGuid,
				@Mark,
				@SecLvl,
				@EnNum,
				@Date,
				@CurrencyGuid,
				@CurrencyVal,
				@Note,
				180,
				Null,
				@AutoPostedEntry
				
			Declare @DetailNum Int
			Set @DetailNum = 0
			
			if @Consumption <> 0 
			begin
				Insert into [DEntry]
		 		([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
				Select
					@EnGuid,
					@DetailNum,
					@AcCustGuid,
					@Consumption,
					0,
					@CurrencyGuid,
					@CurrencyVal,
					Null as [CostGuid],
					@IncomeAccountGuid,
					@ConsumptionNote
					
				Set @DetailNum = @DetailNum + 1
				Insert into [DEntry]
		 		([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
				Select
					@EnGuid,
					@DetailNum,
					@IncomeAccountGuid,
					0,
					@Consumption,
					@CurrencyGuid,
					@CurrencyVal,
					Null as [CostGuid],
					@AcCustGuid,
					@ConsumptionNote
			end

			--ãíÇå
			if @WaterValue <> 0
			begin
				Insert into [DEntry]
		 		([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
				Select
					@EnGuid,
					@DetailNum,
					@AcCustGuid,
					@WaterValue,
					0,
					@CurrencyGuid,
					@CurrencyVal,
					Null as [CostGuid],
					@WaterAccountGuid,
					@WaterNote

				Set @DetailNum = @DetailNum + 1
				Insert into [DEntry]
		 		([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
				Select
					@EnGuid,
					@DetailNum,
					@WaterAccountGuid,
					0,
					@WaterValue,
					@CurrencyGuid,
					@CurrencyVal,
					Null as [CostGuid],
					@AcCustGuid,
					@WaterNote
			end

			--ÕÍí
			if @DrainageValue <> 0
			begin
				Insert into [DEntry]
		 		([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
				Select
					@EnGuid,
					@DetailNum,
					@AcCustGuid,
					@DrainageValue,
					0,
					@CurrencyGuid,
					@CurrencyVal,
					Null as [CostGuid],
					@DrainageAccountGuid,
					@DrainageNote

				Set @DetailNum = @DetailNum + 1
				Insert into [DEntry]
		 		([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
				Select
					@EnGuid,
					@DetailNum,
					@DrainageAccountGuid,
					0,
					@DrainageValue,
					@CurrencyGuid,
					@CurrencyVal,
					Null as [CostGuid],
					@AcCustGuid,
					@DrainageNote
			end

			--ÛÑÇãÇÊ
			if @FineValue <> 0
			begin
				Insert into [DEntry]
		 		([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
				Select
					@EnGuid,
					@DetailNum,
					@AcCustGuid,
					@FineValue,
					0,
					@CurrencyGuid,
					@CurrencyVal,
					Null as [CostGuid],
					@FineAccountGuid,
					@FineNote

				Set @DetailNum = @DetailNum + 1
				Insert into [DEntry]
		 		([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
				Select
					@EnGuid,
					@DetailNum,
					@FineAccountGuid,
					0,
					@FineValue,
					@CurrencyGuid,
					@CurrencyVal,
					Null as [CostGuid],
					@AcCustGuid,
					@FineNote
			end

			--ÇáÑÓæã
			if @FeeValue <> 0
			begin
				Insert into [DEntry]
		 		([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
				Select
					@EnGuid,
					@DetailNum,
					@AcCustGuid,
					@FeeValue,
					0,
					@CurrencyGuid,
					@CurrencyVal,
					Null as [CostGuid],
					@FeeAccountGuid,
					@FeeNote

				Set @DetailNum = @DetailNum + 1
				Insert into [DEntry]
		 		([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
				Select
					@EnGuid,
					@DetailNum,
					@FeeAccountGuid,
					0,
					@FeeValue,
					@CurrencyGuid,
					@CurrencyVal,
					Null as [CostGuid],
					@AcCustGuid,
					@FeeNote
			end

		if @Discount <> 0 
		begin
			Set @DetailNum = @DetailNum + 1
			Insert into [DEntry]
		 	([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
			Select
				@EnGuid,
				@DetailNum,
				@DiscountAccountGuid,
				@Discount,
				0,
				@CurrencyGuid,
				@CurrencyVal,
				Null as [CostGuid],
				@AcCustGuid,
				@DiscountNote
			Set @DetailNum = @DetailNum + 1
			Insert into [DEntry]
		 	([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
			Select
				@EnGuid,
				@DetailNum,
				@AcCustGuid,
				0,
				@Discount,
				@CurrencyGuid,
				@CurrencyVal,
				Null as [CostGuid],
				@DiscountAccountGuid,
				@DiscountNote
		end
		if @Extra <> 0 
		begin
			Set @DetailNum = @DetailNum + 1
			Insert into [DEntry]
		 	([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
			Select
				@EnGuid,
				@DetailNum,
				@AcCustGuid,
				@Extra,
				0,
				@CurrencyGuid,
				@CurrencyVal,
				Null as [CostGuid],
				@ExtraAccountGuid,
				@ExtraNote
			Set @DetailNum = @DetailNum + 1
			Insert into [DEntry]
		 	([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
			Select
				@EnGuid,
				@DetailNum,
				@ExtraAccountGuid,
				0,
				@Extra,
				@CurrencyGuid,
				@CurrencyVal,
				Null as [CostGuid],
				@AcCustGuid,
				@ExtraNote
		end	
	end

	Select * from HEntry where Guid = @Guid
	

GO
/****** Object:  StoredProcedure [dbo].[PrcCreateEntryChecksCollection]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcCreateEntryChecksCollection]
(
	@CheckGuid uniqueidentifier = '{4134E164-2A09-4AA7-A64E-938500EB7573}',
	@Kind INT = 1,
	@immediate bit = 0
)
  
as

	Set nocount on
	if Not exists(Select * from ChecksCollection where CheckGuid = @CheckGuid and Kind = @Kind)
	return
	
	Declare @CollectedEntryTypeGuid uniqueidentifier
	if @Kind = 1 -- ÊÍÕíá
	select
		@CollectedEntryTypeGuid = T.CollectedEntryTypeGuid
	from
		Checks C
		inner join CheckType T on T.Guid = C.TypeGuid
	where
		C.Guid = @CheckGuid
		
	-- ÊæáíÏ ÓäÏ ÞÈÖ
	if @Kind = 1 and isNull(@CollectedEntryTypeGuid, 0x0) <> 0x0
	begin
		--Print @CheckGuid
		--Print @CollectedEntryTypeGuid
		exec [PrcCreateEntryTypeChecksCollection] @CheckGuid, @CollectedEntryTypeGuid, @Kind, @immediate
		return
	end

	/*
	else
	Delete
		[LinkEntryType_Checks]
	where
		[CheckGuid] = @CheckGuid
		AND [kind] = 1660 + @Kind
	*/
	
	Declare 
			@EnNum int,
			@EnGuid [uniqueidentifier]
	
	-- ÇáÞíÏ ÇáÓÇÈÞ
	Select 
		@EnNum = isnull([EntryNum],0)
		,@EnGuid = isnull([EntryGuid],0x0)
	From
		[LinkEntry_Checks]
	where
		[CheckGuid] = @CheckGuid
		and [Kind] = 1660+@Kind		

	if isnull(@EnNum,0) = 0
	begin	
		Select @EnNum = IsNull(Max([Number]),0) + 1 from [HEntry]
		Set @EnGuid = Newid()
	END
	
--	return
	-- ÍÐÝ ÇáÞíæÏ ÇáÞÏíãÉ
	Delete
		[LinkEntry_Checks]
	where
		[CheckGuid] = @CheckGuid
		AND [kind] = 1660 + @Kind
		
	--Select * from [HEntry] where Number = @EnNum

	DECLARE 
		@CreateEntry BIT,
		@AutoPostedEntry Bit
	

	SELECT	TOP 1
		@CreateEntry = CASE WHEN @Kind = 0 THEN 
								Case when ([PosdetCreatedEntry] = 1 and ([PosdetAutoCreatedEntry] = 1 OR @immediate = 1)) 
								then 1 else 0 
								end
							WHEN @Kind = 1 THEN 
								Case when ([collectedCreatedEntry] = 1 and ([collectedAutoCreatedEntry] = 1 OR @immediate = 1)) 
								then 1 else 0 
								end
							WHEN @Kind = 2 THEN 
								Case when ([EndorsementCreatedEntry] = 1 and ([EndorsementAutoCreatedEntry] = 1 OR @immediate = 1)) 
								then 1 else 0 
								end
							WHEN @Kind = 3 THEN 
								Case when ([ReturnedCreatedEntry] = 1 and ([ReturnedAutoCreatedEntry] = 1 OR @immediate = 1)) 
								then 1 else 0 
								end
						END,
		@AutoPostedEntry = CASE WHEN @Kind = 0 THEN [PosdetAutoPostedEntry]
							WHEN @Kind = 1 THEN [collectedAutoPostedEntry]
							WHEN @Kind = 2 THEN [EndorsementAutoPostedEntry]
							WHEN @Kind = 3 THEN [ReturnedAutoPostedEntry]
						END
	FROM
		[CheckType] T
		inner join [Checks] C on C.TypeGuid = T.Guid
	WHERE
		C.[Guid] = @CheckGuid

	
	DECLARE
		@CheckKind INT,
		@SecLvl Int,
		@mark Bit,
		@Value Float,
		@CurrencyGUID [uniqueidentifier],
		@CurrencyVal [float],
		@Date DateTime,

		@DebitAccountGuid [uniqueidentifier]  ,
		@DebitCostGuid [uniqueidentifier]  ,
		@CreditAccountGuid [uniqueidentifier]  ,
		@CreditCostGuid [uniqueidentifier]  ,
		@Commission Float,
		@CommCostGuid [uniqueidentifier],
		@CommCostCreditGuid [uniqueidentifier],
		@CommNote Varchar(256),
		@LossComm Bit,
		@CommType int,
		@CommAccountGuid [uniqueidentifier],
		@CommAccountCreditGuid [uniqueidentifier],
		@Note Varchar(256),
		@Delay FLOAT,
		@DelayNote Varchar(256),
		@DelayAccountDebitGuid [uniqueidentifier]  ,
		@DelayAccountCreditGuid [uniqueidentifier] ,
		@DelayCostGuid [uniqueidentifier]  ,
		@BranchGuid [uniqueidentifier],
		
		@OperationCreateEntry bit,
		@ReturnCreateEntry bit,
		@CommCreateEntry bit,

		@IsRounded bit

	SELECT
		@CheckKind				= [T].[CheckKind],
		@SecLvl					= [L].[SecLvl],
		@Mark					= [L].[Mark],
		@Value					= [C].[Value],
		@CurrencyGUID			= [C].[CurrencyGUID],
		@CurrencyVal			= [C].[CurrencyVal],
		@Date					= [L].[Date],

		@DebitAccountGuid		= [L].[DebitAccountGuid],
		@DebitCostGuid			= [L].[DebitCostGuid],
		@CreditAccountGuid		= [L].[CreditAccountGuid],
		@CreditCostGuid			= [L].[CreditCostGuid],
		@Commission				= [L].[Commission],
		@CommCostGuid			= Case when T.CommMoveCost = 1 then L.[CommCostGuid] end,
		@CommCostCreditGuid			= Case when T.CommMoveCostCredit = 1 then L.[CommCostGuid] end,
		@CommNote 				= [L].[CommNote],
		@LossComm				= [L].[LossComm],
		@CommType				= [T].[CommType],
		@CommAccountGuid		= [L].[CommAccountGuid],
		@CommAccountCreditGuid	= [L].[CommAccountCreditGuid],
		@Note					= [L].[Note],
		@Delay					= [L].[Delay],
		@DelayNote 				= [L].[DelayNote],
		@DelayCostGuid			= [L].[DelayCostGuid],
		@DelayAccountDebitGuid	= [L].[DelayAccountDebitGuid],
		@DelayAccountCreditGuid = [L].[DelayAccountCreditGuid],
		@BranchGuid				= [C].[BranchGuid],
		@IsRounded				= IsNull(L.IsRounded,0),

		@OperationCreateEntry	= L.OperationCreateEntry,
		@ReturnCreateEntry		= L.ReturnCreateEntry,
		@CommCreateEntry		= L.CommCreateEntry

	FROM 
		[Checks] [C]
		INNER JOIN [ChecksCollection] [L] ON [L].[CheckGuid] = [C].[Guid]
		INNER JOIN [CheckType] [T] ON [T].[Guid] = [C].[TypeGuid]
	WHERE
		[C].[Guid] = @CheckGuid
		AND [L].[Kind] = @Kind

	--Select @ReturnCreateEntry
	
	if isNull(@Delay,0) = 0
	Set @ReturnCreateEntry = 0

	if isNull(@Commission,0) = 0
	Set @CommCreateEntry = 0

	--Select @CreateEntry ,  @ReturnCreateEntry , @CommCreateEntry

	if (@IsRounded = 0)
	if (@CreateEntry = 1) or ( (@ReturnCreateEntry = 1 or @CommCreateEntry = 1 ) )
	BEGIN
			--Select 'True'
			Insert Into [HEntry]
			([Guid],[SecLvl],[Number],[Mark],[Date], [CurrencyGuid], [CurrencyVal], [Note], [ParentKind], [BranchGuid], [IsPosted])
			Select
				@EnGuid,
				@SecLvl,
				@EnNum,
				@Mark,
				@Date,
				@CurrencyGuid,
				@CurrencyVal,
				'',
				1660 + @Kind,
				@BranchGuid,
				@AutoPostedEntry
				
			Declare @DetailNum Int
			Set @DetailNum = 0

			Declare @CheckValue Float,
					@CommValue Float

			Set @CheckValue = Case when @LossComm = 1 then
														Case
															when @CommType = 0 then @Value - @Commission
															else @Value
														end
									else
									@Value
							  end

			Set @CommValue = @Commission
				
			if (not (@Kind = 1 and isNull(@CollectedEntryTypeGuid, 0x0) <> 0x0)) --Ýí ÍÇá áã íÊã ÊæáíÏ ÓäÏ ÞÈÖ
				and (@OperationCreateEntry = 1) 
			begin
				Insert into [DEntry]
		 		([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[Note],[ObverseAcGuid])
				Select
					@EnGuid,
					@DetailNum,
					@DebitAccountGuid,
					@CheckValue,
					0,
					@CurrencyGuid,
					@CurrencyVal,
					@DebitCostGuid,
					@Note,
					@CreditAccountGuid
					
				
				Set @DetailNum = @DetailNum + 1
				Insert into [DEntry]
		 		([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid], [CurrencyVal],[CostGuid],[Note],[ObverseAcGuid])
				Select
					@EnGuid,
					@DetailNum,
					@CreditAccountGuid,
					0,
					@CheckValue,
					@CurrencyGuid,
					@CurrencyVal,
					@CreditCostGuid,
					@Note,
					@DebitAccountGuid
			end

			
			IF (@CommCreateEntry = 1) and (@LossComm = 1)  --íæÌÏ ÚãæáÉ ÊÍÕíá
			BEGIN
				Set @DetailNum = @DetailNum + 1
				Insert into [DEntry]
		 		([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid], [CurrencyVal],[CostGuid],[Note],[ObverseAcGuid])
				Select
					@EnGuid,
					@DetailNum,
					@CommAccountGuid,
					@CommValue,					
					0,
					@CurrencyGuid,
					@CurrencyVal,
					@CommCostGuid,
					@CommNote,
					@CommAccountCreditGuid

					Set @DetailNum = @DetailNum + 1
					Insert into [DEntry]
			 		([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid], [CurrencyVal],[CostGuid],[Note],[ObverseAcGuid])
					Select
						@EnGuid,
						@DetailNum,
						@CommAccountCreditGuid,
						0,
						@Commission,
						@CurrencyGuid,
						@CurrencyVal,
						@CommCostCreditGuid,
						@CommNote,
						@CommAccountGuid
			END

			
			--ÇáÅÑÌÇÚ
			IF (@ReturnCreateEntry = 1) and (@Delay <> 0 )
			BEGIN
				Set @DetailNum = @DetailNum + 1
				Insert into [DEntry]
		 		([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid], [CurrencyVal],[CostGuid],[Note],[ObverseAcGuid])
				Select
					@EnGuid,
					@DetailNum,
					@DelayAccountDebitGuid,
					@Delay,
					0,
					@CurrencyGuid,
					@CurrencyVal,
					@DelayCostGuid,
					@DelayNote,
					@DelayAccountCreditGuid

				Set @DetailNum = @DetailNum + 1
				Insert into [DEntry]
		 		([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid], [CurrencyVal],[CostGuid],[Note],[ObverseAcGuid])
				Select
					@EnGuid,
					@DetailNum,
					@DelayAccountCreditGuid,
					0,
					@Delay,
					@CurrencyGuid,
					@CurrencyVal,
					@DelayCostGuid,
					@DelayNote,
					@DelayAccountDebitGuid
			END
			
			if @DetailNum = 0
			Delete HEntry where Guid = @EnGuid
			else
			INSERT INTO [LinkEntry_Checks]
			(
				[CheckGuid],
				[EntryGuid],
				[EntryNum],
				[Kind]
			)
			SELECT	
				@CheckGuid,
				@EnGuid,
				@EnNum,
				1660+@Kind
	end


GO
/****** Object:  StoredProcedure [dbo].[PrcCreateEntryChecksPartialCollection]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcCreateEntryChecksPartialCollection]
(
	@CollectionGuid uniqueidentifier = '437E969C-5C8D-45C0-B946-ADFCAD2E9135',
	@CheckGuid uniqueidentifier = '437E969C-5C8D-45C0-B946-ADFCAD2E9135',
	@TypeGuid uniqueidentifier = '090E44FF-AE92-4744-8430-5CF559E58FB1',
	@Sender int = 0
)
  
as
	Declare @PartialCollectedEntryTypeGuid uniqueidentifier
	select
		@PartialCollectedEntryTypeGuid = T.PartialCollectedEntryTypeGuid
	from
		CheckType T 
	where
		T.Guid = @TypeGuid

	-- ÊæáíÏ ÓäÏ ÞÈÖ
	if isNull(@partialCollectedEntryTypeGuid, 0x0) <> 0x0
	begin
		exec [PrcCreateEntrytypeChecksPartialCollection] @CollectionGuid ,@CheckGuid ,@TypeGuid ,@Sender, @PartialCollectedEntryTypeGuid
	end
	else
	Delete
		[Secondary_Entry]
	where
		[Guid] = @CollectionGuid


	Declare 
			@EnNum int

	-- ÇáÞíÏ ÇáÓÇÈÞ
	Select 
		@EnNum = isnull([h].[Number],0)
	From
		[ChecksPartialCollection] [C]
		inner join [Hentry] [H] On [H].[Guid] = [C].[Guid]
	where
		[C].[Guid] = @CollectionGuid

	if isnull(@EnNum,0) = 0
	begin	
		Select @EnNum = IsNull(Max([Number]),0) + 1 from [HEntry]
	END

	--ÍÐÝ ÇáÑÈØ ãÚ ÇáÏÝÚÇÊ ÇáäÞÏíÉ
	Delete [ContractCachPayment] where [EntryGuid] = @CollectionGuid
	Delete [LandContractCachPayment] where [EntryGuid] = @CollectionGuid
	Delete [ContractParkingCachPayment] where [EntryGuid] = @CollectionGuid
	Delete [ElectricityCachPayment] where [EntryGuid] = @CollectionGuid
	

	-- ÍÐÝ ÇáÞíæÏ ÇáÞÏíãÉ
	Delete
		[HEntry]
	where
		[Guid] = @CollectionGuid

	DECLARE 
		@CreateEntry BIT,
		@AutoPostedEntry Bit

	
	SELECT	TOP 1
		@CreateEntry = 
		Case when [partialcollectedCreatedEntry] = 1 and (
													([partialcollectedAutoCreatedEntry] = 1) or (@Sender = 1)
												   ) then 1 else 0 end,
		@AutoPostedEntry = [partialcollectedAutoPostedEntry]
	FROM
		[CheckType]
	WHERE
		Guid = @TypeGuid

	DECLARE
		@CheckKind INT,
		@SecLvl Int,
		@Mark Bit,
		@Value Float,
		@CurrencyGUID [uniqueidentifier],
		@CurrencyVal [float],
		@Date DateTime,

		@DebitAccountGuid [uniqueidentifier]  ,
		@DebitCostGuid [uniqueidentifier]  ,
		@CreditAccountGuid [uniqueidentifier]  ,
		@CreditCostGuid [uniqueidentifier]  ,
		@Commission Float,
		@CommCostGuid [uniqueidentifier],
		@CommCostCreditGuid [uniqueidentifier],
		@CommNote varchar(256),
		@LossComm Bit,
		@CommType int,
		@CommAccountGuid [uniqueidentifier],
		@CommAccountCreditGuid [uniqueidentifier],
		@Note Varchar(256),
		@BranchGuid [uniqueidentifier],
		@IsRounded bit

	SELECT
		@CheckKind				= [T].[CheckKind],
		@SecLvl					= [C].[SecLvl],
		@Mark					= [L].[Mark],
		@Value					= [L].[Value],
		@CurrencyGUID			= [C].[CurrencyGUID],
		@CurrencyVal			= [C].[CurrencyVal],
		@Date					= [L].[Date],

		@DebitAccountGuid		= [L].[DebitAccountGuid],
		@DebitCostGuid			= [L].[DebitCostGuid],
		@CreditAccountGuid		= [L].[CreditAccountGuid],
		@CreditCostGuid			= [L].[CreditCostGuid],
		@Commission				= [L].[Commission],
		@CommCostGuid			= Case when T.CommMoveCost = 1 then L.[CommCostGuid] end,
		@CommCostCreditGuid			= Case when T.CommMoveCostCredit = 1 then L.[CommCostGuid] end,
		@CommNote 				= [L].[CommNote],
		@LossComm				= [L].[LossComm],
		@CommType				= [T].[CommType],
		@CommAccountGuid		= [L].[CommAccountGuid],
		@CommAccountCreditGuid	= [L].[CommAccountCreditGuid],
		@Note					= [L].[Note],
		@BranchGuid				= [C].[BranchGuid],
		@IsRounded				= IsNull(L.IsRounded,0)
	FROM 
		[Checks] [C]
		INNER JOIN [ChecksPartialCollection] [L] ON [L].[CheckGuid] = [C].[Guid]
		INNER JOIN [CheckType] [T] ON [T].[Guid] = [C].[TypeGuid]
	WHERE
		[L].[Guid] = @CollectionGuid 


	if (@CreateEntry = 1) and (@IsRounded = 0)
	BEGIN
			Insert Into [HEntry]
			([Guid],[SecLvl],[Number],[Mark],[Date], [CurrencyGuid], [CurrencyVal], [Note], [ParentKind], [BranchGuid],[isPosted])
			Select
				@CollectionGuid,
				@SecLvl,
				@EnNum,
				@Mark,
				@Date,
				@CurrencyGuid,
				@CurrencyVal,
				'',
				1670,
				@BranchGuid,
				@AutoPostedEntry
				
			Declare @DetailNum Int
			Set @DetailNum = 0

			Declare @CheckValue Float,
					@CommValue Float

			Set @CheckValue = Case when @LossComm = 1 then
														Case
															when @CommType = 0 then @Value - @Commission
															else @Value
														end
									else
									@Value
							  end

			Set @CommValue = @Commission
		
			if not (isNull(@partialCollectedEntryTypeGuid, 0x0) <> 0x0) --Ýí ÍÇá áã íÊã ÊæáíÏ ÓäÏ ÞÈÖ
			begin
				Insert into [DEntry]
		 		([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[Note],[ObverseAcGuid])
				Select
					@CollectionGuid,
					@DetailNum,
					@DebitAccountGuid,
					@CheckValue,
					0,
					@CurrencyGuid,
					@CurrencyVal,
					@DebitCostGuid,
					@Note,
					@CreditAccountGuid
					
				
				Set @DetailNum = @DetailNum + 1
				Insert into [DEntry]
		 		([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid], [CurrencyVal],[CostGuid],[Note],[ObverseAcGuid])
				Select
					@CollectionGuid,
					@DetailNum,
					@CreditAccountGuid,
					0,
					@CheckValue,
					@CurrencyGuid,
					@CurrencyVal,
					@CreditCostGuid,
					@Note,
					@DebitAccountGuid
			end

			IF @LossComm = 1  --íæÌÏ ÚãæáÉ ÊÍÕíá
			BEGIN
				Set @DetailNum = @DetailNum + 1
				Insert into [DEntry]
		 		([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid], [CurrencyVal],[CostGuid],[Note],[ObverseAcGuid])
				Select
					@CollectionGuid,
					@DetailNum,
					@CommAccountGuid,
					@CommValue,					
					0,
					@CurrencyGuid,
					@CurrencyVal,
					@CommCostGuid,
					@CommNote,
					@CommAccountCreditGuid

					Set @DetailNum = @DetailNum + 1
					Insert into [DEntry]
			 		([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid], [CurrencyVal],[CostGuid],[Note],[ObverseAcGuid])
					Select
						@CollectionGuid,
						@DetailNum,
						@CommAccountCreditGuid,
						0,
						@Commission,
						@CurrencyGuid,
						@CurrencyVal,
						@CommCostCreditGuid,
						@CommNote,
						@CommAccountGuid
			END
			
			if @DetailNum = 0
			Delete HEntry where Guid = @CollectionGuid

	end

	--Ýí ÍÇá Êã ÊæáíÏ ÇáÞíÏ
	--ÑÈØ ÇáÞíÏ ãÚ ÇáÏÝÚÇÊ ÇáäÞÏíÉ Ýí ÇáÚÞÏ
	if Exists(Select Top 1 * From [HEntry] where [Guid] = @CollectionGuid )
	begin
		Declare @ContractKind int
				,@ContractGuid uniqueidentifier
		Set @ContractKind = -1
		
		Select
			@ContractKind = Al.[Kind] ,
			@ContractGuid = [Al].[Guid]
		FROM 
			[Checks] [C]
			INNER JOIN [ChecksPartialCollection] [L] ON [L].[CheckGuid] = [C].[Guid]
			INNER JOIN [CheckType] [T] ON [T].[Guid] = [C].[TypeGuid]
			inner join [vwAllContract] [Al] on [Al].[Guid] = [C].[ContractGuid]
		WHERE
			[L].[Guid] = @CollectionGuid 

		-- ãÑÊÈØ ÈÚÞÏ ÔÞÉ
		if @ContractKind = 0
		begin
			
			Insert into [ContractCachPayment] 
			([ContractGuid], [EntryGuid])
			Select
				@ContractGuid,
				@CollectionGuid 
			
		end

		-- ãÑÊÈØ ÈÚÞÏ ãæÞÝ
		if @ContractKind = 1
		begin
			Insert into [ContractParkingCachPayment] 
			([ContractGuid], [EntryGuid])
			Select
				@ContractGuid,
				@CollectionGuid 
		end

		-- ãÑÊÈØ ÈÚÞÏ ÃÑÖ
		if @ContractKind = 2
		begin
			Insert into [LandContractCachPayment] 
			([ContractGuid], [EntryGuid])
			Select
				@ContractGuid,
				@CollectionGuid 
		end

		if @ContractKind is Null
		begin
			
			Select
				@ContractGuid = [Al].[Guid]
			FROM 
				[Checks] [C]
				INNER JOIN [ChecksPartialCollection] [L] ON [L].[CheckGuid] = [C].[Guid]
				INNER JOIN [CheckType] [T] ON [T].[Guid] = [C].[TypeGuid]
				inner join [vwElectricityBill] [Al] on [Al].[Guid] = [C].[ContractGuid]
			WHERE
				[L].[Guid] = @CollectionGuid 
				
			if isNull(@ContractGuid, 0x0) <> 0x0	
			Insert into [ElectricityCachPayment] 
			([ContractGuid], [EntryGuid])
			Select
				@ContractGuid,
				@CollectionGuid 
			
		end
	end


GO
/****** Object:  StoredProcedure [dbo].[PrcCreateEntryForContractFirstPay]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcCreateEntryForContractFirstPay]
(
	@EntryTypeGuid uniqueidentifier = '28291D9D-4954-42FD-BCFA-25AF9187005D',
	@EntryGuid uniqueidentifier = 'F9A849C9-926E-470A-8317-A3A7B89826E2',
	@PayDateDate DateTime = '1/23/2016',
	@AccountFirstpay uniqueidentifier = 0x0,
	@AccountGuid uniqueidentifier = '52E2F7D3-0811-4D3A-A387-91BF54EC72E1',
	@CurrencyGuid uniqueidentifier = '11111111-C748-4B13-8B91-1E9B299DF1C1',
	@CurrencyVal Float = 1,
	@Note Varchar(256) = '',
	@BranchGuid uniqueidentifier = Null,
	@BuildingGuid uniqueidentifier = 0x0,
	@ContractGuid uniqueidentifier = '1EBCE41E-B1E8-410E-974A-3298FB403DCC',
	@FirstPayAmount Float = 500,
	@CostFirstpay  uniqueidentifier = 0x0
)
  
as
	Declare @Number int
	Select @Number = ISNULL(MAX(Number), 0) + 1 From [Secondary_Entry] where TypeGuid = @EntryTypeGuid
	if IsNull(@Number, 0) = 0
	Set @Number = 1
	
	select 
		@AccountFirstpay = B.[CashAccountGuid]
	from
		Building B 
	where
		B.Guid = @BuildingGuid
		
	if IsNull(@AccountFirstpay,0x0) = 0x0
	select 
		@AccountFirstpay = B.[CashAccountGuid]
	from
		Villa B 
	where
		B.Guid = @BuildingGuid
		
	
	if IsNull(@AccountFirstpay , 0x0) = 0x0
	Select
		@AccountFirstpay = [DefAccountGuid]
	From
		[EntryType]
	where
		Guid = @EntryTypeGuid
	
	if isNull(@AccountFirstpay,0x0) = 0x0
	begin
		Declare @Msg varchar(255)
		Set @Msg = dbo.SC('ÃÏÎá ÇáÍÓÇÈ ÇáÇÝÊÑÇÖí áäãØ ÇáÓäÏ ÇáäÞÏí')
		RAISERROR (@Msg, 16, 1);
		return
	end			

	Declare @CheckCreateEntry bit
	Select 
			@CheckCreateEntry = [T].[CreateEntry]			
	From
		[EntryType] [t] 
	where
		Guid = @EntrytypeGuid
		
	insert into [Secondary_Entry]
	([Guid],[Number],[Seclvl],[Mark],[Date],[AccountGuid],[Kind],[CurrencyGuid],[CurrencyVal],[Note],[BranchGuid],[TypeGuid],[ContractGuid],[CheckCreateEntry],[SalesManGuid])
	Select
		@EntryGuid,
		@Number,
		0 as [Seclvl],
		0 as [Mark],
		@PayDateDate as [Date],
		@AccountFirstpay as [AccountGuid],
		0 as [Kind],
		@CurrencyGuid as [CurrencyGuid],
		@CurrencyVal as [CurrencyVal],
		@Note as [Note],
		@BranchGuid as [BranchGuid],
		@EntryTypeGuid as [TypeGuid],
		@ContractGuid as [ContractGuid],
		@CheckCreateEntry as [CheckCreateEntry],
		Null as [SalesManGuid]
		
	insert into [Secondary_EntryDetail]
	([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[Note],[ObverseAcGuid],[CostGuid])
	Select
		@EntryGuid,
		1 as [Number],
		@AccountGuid as [AcGuid],
		0 as [Debit],
		@FirstPayAmount as [Credit],
		@CurrencyGuid,
		@CurrencyVal,
		@Note,
		@AccountFirstpay as [ObverseAcGuid],
		Case when @CostFirstpay <> 0x0  then @CostFirstpay end [CostGuid]
		
	exec [PrcCreateEntryFromEntryType] @EntryGuid, @ContractGuid
		

GO
/****** Object:  StoredProcedure [dbo].[PrcCreateEntryFromEntryType]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcCreateEntryFromEntryType]
(
	@Guid uniqueidentifier = '2DE70F60-33F8-436A-A4CA-B8E91AFBA478',
	@ContractGuid uniqueidentifier = '339C53E9-B65E-4F11-BDAB-F67BE4EDF6E7'
)
  
as
	
	Set noCount on

	--Set @ContractGuid = (Select Guid from vwAllContractGuid where Guid = @ContractGuid)
	
	Declare @ContractKind Int
	Set @ContractKind = -1
	Select @ContractKind = [Kind] From [vwAllContractKind] where ContractGuid = @ContractGuid

	if isNull(@ContractGuid ,0x0) = 0x0
	begin
		if @ContractKind = 0
		Select @ContractGuid = [ContractGuid] from [ContractCachPayment]
		where [EntryGuid] = @Guid

		if @ContractKind = 1
		Select @ContractGuid = [ContractGuid] from [ContractParkingCachPayment]
		where [EntryGuid] = @Guid

		if @ContractKind = 2
		Select @ContractGuid = [ContractGuid] from [LandContractCachPayment]
		where [EntryGuid] = @Guid

		if @ContractKind = 3
		Select @ContractGuid = [ContractGuid] from [ElectricityCachPayment]
		where [EntryGuid] = @Guid
		
		if @ContractKind = 4
		Select @ContractGuid = [ContractGuid] from [ServicesContractCachPayment]
		where [EntryGuid] = @Guid
		
		if @ContractKind = 5
		Select @ContractGuid = [ContractGuid] from [MaintenanceContractCachPayment]
		where [EntryGuid] = @Guid
	end


	--Select @ContractKind, @ContractGuid
	--ÑÞã ÓäÏ ÇáÞíÏ
	Declare @EntryNum int
	Select @EntryNum = [Number] from [Hentry]
	where
		[Guid] = @Guid

	if IsNull(@EntryNum,0) = 0 
	Select @EntryNum = IsNull(Max([Number]),0)+1 from [Hentry]	
	
    Delete [Hentry] where [Guid] = @Guid

	Declare @CheckCreateEntry Bit,
			@AutoPostedEntry Bit

	Select 
			@CheckCreateEntry = [S].[CheckCreateEntry],
			@AutoPostedEntry = [t].[AutoPostedEntry]			
	From
		[Secondary_Entry] [S]
		inner join [EntryType] [t] on [t].[Guid] = [s].[TypeGuid]
	where
		[s].[Guid] = @Guid

	if (@CheckCreateEntry = 0)
	return

	--ÇáÊÑæíÓÉ
	Insert into [HEntry]	
	(
		[Guid],
		[Number],
		[SecLvl], 
		[Mark],
		[Date], 
		[CurrencyGuid], 
		[CurrencyVal], 
		[Note], 
		[ParentKind], 
		[UserGuid], 
		[BranchGuid], 
		[IsPosted]
	)
	Select
		[Guid],
		@EntryNum,
		[SecLvl],
		[Mark],
		[Date],
		[CurrencyGuid], 
		[CurrencyVal], 
		[Note], 
		8000 as [ParentKind], 
		[UserGuid], 
		[BranchGuid], 
		@AutoPostedEntry as [IsPosted]
	From
		[Secondary_Entry]
	where
		[Guid] = @Guid


	Declare @CurrencyVal Float,
			@CurrencyGuid uniqueidentifier,
			@Note varchar(256)
	Select 
			@CurrencyVal = [CurrencyVal],
			@CurrencyGuid = [CurrencyGuid],
			@Note = [Note]
	From 
		[Secondary_Entry]
	where 
		[Guid] = @Guid


	

	Declare
		@OpMoveCostwithDefAccount Bit,
		@OpEntryForOneItem Bit,
		@OpObverseNoteItem bit,
		@ObitemNotefromNote Bit
	
	Select
		@OpMoveCostwithDefAccount = [OpMoveCostwithDefAccount],
		@OpEntryForOneItem =  [OpEntryForOneItem],
		@OpObverseNoteItem =  [OpObverseNoteItem],
		@ObitemNotefromNote = [ObitemNotefromNote]
	From
		[EntryType] [T]
		inner join [Secondary_Entry] [S] on [T].[Guid] = [S].[TypeGuid]
	where
		[S].[Guid] = @Guid

	-- ÇÞáÇã ÇáÍÓÇÈÇÊ
	insert into [DEntry]
		([Number], [ParentGuid], [AcGuid], [Debit], [Credit], [CurrencyGuid], [CurrencyVal], [ObverseAcGuid], [CostGuid], [Note], [IsVisible])
	Select
		[Number], 
		@Guid as [ParentGuid], 
		[AcGuid], 
		[Debit], 
		[Credit], 
		[CurrencyGuid], 
		[CurrencyVal], 
		isNull((Select [AccountGuid] From [Secondary_Entry] where Guid = @Guid), [ObverseAcGuid]) as [ObverseAcGuid], 
		[CostGuid], 
		Case when @ObitemNotefromNote = 1 and [Note] = '' then @Note else [Note] end [Note], 
		--[Note],
		1 as [IsVisible]
	From
		[Secondary_EntryDetail]
	where
		[ParentGuid] = @Guid

	
	--ÃÞáÇã ÇáÍÓÇÈ ÇááÅÝÊÑÇÖí	
	--ãÏíä
	if IsNull((Select [AccountGuid] From [Secondary_Entry] where Guid = @Guid),0x0) <> 0x0
	insert into [DEntry]
		([Number], [ParentGuid], [AcGuid], [Debit], [Credit], [CurrencyGuid], [CurrencyVal], [ObverseAcGuid], [CostGuid], [Note], [IsVisible])
	Select
		Max([Number])+1, 
		@Guid as [ParentGuid], 
		(Select [AccountGuid] From [Secondary_Entry] where Guid = @Guid) as [AcGuid], 
		Case 
			 when @OpEntryForOneItem = 1 then 
			 Sum([Credit]) 
			 when @OpEntryForOneItem = 0 then 
			 Sum([Credit] * [CurrencyVal] / @CurrencyVal) 
		end as [Debit], --ãÞáæÈ
		0 as [Credit], --ãÞáæÈ
		@CurrencyGuid, 
		@CurrencyVal, 
		--Case when @OpEntryForOneItem = 1 then [AcGuid] else [ObverseAcGuid] end 
		Case when @OpEntryForOneItem = 1 then [AcGuid] end as [ObverseAcGuid], 
		Case when @OpMoveCostwithDefAccount = 1 then [CostGuid] end , 
		Case when @OpObverseNoteItem = 1 then [Note] else @Note end [Note], 
		1 as [IsVisible]
	From
		[Secondary_EntryDetail]
	where
		[ParentGuid] = @Guid
	Group By
		Case when @OpMoveCostwithDefAccount = 1 then [CostGuid] end,
		Case when @OpEntryForOneItem = 1 then [Number] else 0 end,
		Case when @OpEntryForOneItem = 1 then [AcGuid] end,
		Case when @OpEntryForOneItem = 1 then [Note] else '' end ,
		Case when @OpObverseNoteItem = 1 then [Note] else @Note end 
	
	
	--ÃÞáÇã ÇáÍÓÇÈ ÇááÅÝÊÑÇÖí	
	--ÏÇÆä
	if IsNull((Select [AccountGuid] From [Secondary_Entry] where Guid = @Guid),0x0) <> 0x0
	insert into [DEntry]
		([Number], [ParentGuid], [AcGuid], [Debit], [Credit], [CurrencyGuid], [CurrencyVal], [ObverseAcGuid], [CostGuid], [Note], [IsVisible])
	Select
		Max([Number])+1, 
		@Guid as [ParentGuid], 
		(Select [AccountGuid] From [Secondary_Entry] where Guid = @Guid) as [AcGuid], 
		0 as [Debit], --ãÞáæÈ
		Case 
			 when @OpEntryForOneItem = 1 then 
			 Sum([Debit]) 
			 when @OpEntryForOneItem = 0 then 
			 Sum([Debit] * [CurrencyVal] / @CurrencyVal) 
		end as [Credit], --ãÞáæÈ
		@CurrencyGuid, 
		@CurrencyVal, 
		--Case when @OpEntryForOneItem = 1 then [AcGuid] else [ObverseAcGuid]  end 
		Case when @OpEntryForOneItem = 1 then [AcGuid] end as [ObverseAcGuid],
		Case when @OpMoveCostwithDefAccount = 1 then [CostGuid] end , 
		Case when @OpObverseNoteItem = 1 then [Note] else @Note end [Note], 
		1 as [IsVisible]
	From
		[Secondary_EntryDetail]
	where
		[ParentGuid] = @Guid
	Group By
		Case when @OpMoveCostwithDefAccount = 1 then [CostGuid] end,
		Case when @OpEntryForOneItem = 1 then [Number] else 0 end,
		Case when @OpEntryForOneItem = 1 then [AcGuid] end,
		Case when @OpEntryForOneItem = 1 then [Note] else '' end ,
		Case when @OpObverseNoteItem = 1 then [Note] else @Note end


	Delete [DEntry] where ParentGuid = @Guid and (ISNULL(Debit, 0) + ISNULL(Credit, 0) = 0)
	Delete [DEntry] where ParentGuid = @Guid and AcGuid Is Null
	
	--ÅÚÇÏÉ ÊÑÊíÈ ÇáÓäÏ
	Create Table #TNumDEntry
	(
		[ID] int identity(1,1),
		[Guid] uniqueidentifier
	)
	
	Insert into #TNumDEntry
	([Guid])
	Select 
		[Guid]
	From
		[DEntry]
	where
		[ParentGuid] = @Guid
	Order By
		Case when [Debit] <> 0 then 0 else 1 end ,[Number]
	
	update [DEntry]
	Set Number = t.id
	From
		[DEntry] b
		inner join #TNumDEntry t on b.Guid = t.Guid
	where
		[b].[ParentGuid] = @Guid
		

		
	if @AutoPostedEntry = 1
	update HEntry set IsPosted = 1 where Guid = @Guid
	
	
	--ÅÑÌÇÚ ÇáÑÇÈØ ãÚ ÇáÚÞÏ
	if isNull(@ContractGuid ,0x0) <> 0x0
	begin
		declare @Rs bit 
		Set @Rs = 0
		
		if @ContractKind = 0
		begin
			insert into [ContractCachPayment] ([ContractGuid], [EntryGuid])
			Select @ContractGuid, @Guid
		    
		    if exists(Select * from [ContractCachPayment] where [EntryGuid] = @Guid)
		    Set @Rs = 1
		end
		if @ContractKind = 1
		begin
			insert into [ContractParkingCachPayment] ([ContractGuid], [EntryGuid])
			Select @ContractGuid, @Guid

		    if exists(Select * from [ContractParkingCachPayment] where [EntryGuid] = @Guid)
		    Set @Rs = 1
		end
		if @ContractKind = 2
		begin
			insert into [LandContractCachPayment] ([ContractGuid], [EntryGuid])
			Select @ContractGuid, @Guid

		    if exists(Select * from [LandContractCachPayment] where [EntryGuid] = @Guid)
		    Set @Rs = 1
		end
		
		if @ContractKind = 3
		begin
			Insert into [ElectricityCachPayment] ([ContractGuid], [EntryGuid])
			Select @ContractGuid, @Guid

		    if exists(Select * from [ElectricityCachPayment] where [EntryGuid] = @Guid)
		    Set @Rs = 1
		end
		
		if @ContractKind = 4
		begin
			Insert into [ServicesContractCachPayment] ([ContractGuid], [EntryGuid])
			Select @ContractGuid, @Guid

		    if exists(Select * from [ServicesContractCachPayment] where [EntryGuid] = @Guid)
		    Set @Rs = 1
		end

		if @ContractKind = 5
		begin
			Insert into [MaintenanceContractCachPayment] ([ContractGuid], [EntryGuid])
			Select @ContractGuid, @Guid

		    if exists(Select * from [MaintenanceContractCachPayment] where [EntryGuid] = @Guid)
		    Set @Rs = 1
		end

		if @Rs = 0
		begin
			Declare @ENumber int
			Select
				@ENumber = Number
			From
				[Secondary_Entry]
			where
				[Guid] = @Guid
			
			Declare @Msg varchar(255)
			Set @Msg = dbo.SC('ÍÏÊË ãÔßáÉ ÃËäÇÁ ÑÈØ ÇáÓäÏ ÈÇáÚÞÏ ÃÚÏ ÇáÚãáíÉ ãÑÉ ËÇäíÉ')+char(13)+dbo.SC('ÑÞã ÇáÓäÏ')+' : '+CAST(@ENumber AS varchar(15))
			RAISERROR (@Msg, 16, 1)
			
		end
	end
	
	--Select @AutoPostedEntry, IsPosted, * From Hentry where Guid = @Guid
	--Select * From Dentry where ParentGuid = @Guid


GO
/****** Object:  StoredProcedure [dbo].[PrcCreateEntryFromFlatContractFee]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcCreateEntryFromFlatContractFee]
(
	@Guid uniqueidentifier = 'A3D19ED0-88BB-47F6-857F-F1F30830FEAD'
)
  
as
	Set noCount on
	
	--Select * from FlatContractFee where ParentGuid = @Guid
	
	exec [PrcDeleteEntryContractFee] @Guid
	
	Declare @CreateContractEntry bit
	Select
		@CreateContractEntry = C.CreateContractEntry
	From
		LeaseApartment C 
	where
		C.Guid = @Guid
	
	if @CreateContractEntry = 0
	return

	Declare	
		@CustAccountGuid uniqueidentifier, 
		@CostGuid  uniqueidentifier,
		@SecLvl int,
		@Mark bit,
		@CurrencyGuid uniqueidentifier, 
		@CurrencyVal Float, 
		@UserGuid uniqueidentifier, 
		@BranchGuid uniqueidentifier, 
		@AutoPostedEntry bit,
		@MoveCost bit,
		@MoveCostWithFeeCredit bit,
		@FeeEntryNote varchar(255)
	
	Select
		@CustAccountGuid = CustAccountGuid,
		@SecLvl = C.SecLvl,
		@Mark = C.Mark,
		@CurrencyGuid = C.CurrencyGuid, 
		@CurrencyVal = C.CurrencyVal,
		@UserGuid = C.UserGuid,
		@BranchGuid = C.BranchGuid,
		@AutoPostedEntry = T.AutoPostedEntry,
		@MoveCost = T.MoveCost,
		@MoveCostWithFeeCredit = T.MoveCostWithFeeCredit,
		@CostGuid = C.CostGuid,
		@FeeEntryNote = T.FeeEntryNote
	From
		LeaseApartment C 
		inner join ContractType t on t.Guid = C.TypeGuid
	where
		C.Guid = @Guid
	
	
	Select 
		@FeeEntryNote  =			REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
									REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
									@FeeEntryNote, '[N]', TypeNameAr),
									'[M]', TypeNameLtn),
									'[A]', CustArName),
									'[B]', CustltnName),
									'[C]', FlatNo),
									'[D]', BuildingArName),
									'[E]', BuildingLtnName),
									'[F]', dbo.fndate(EditDate)),
									'[G]', dbo.fndate(Fromdate)),
									'[H]', dbo.fndate(Todate)),
									'[K]', ContractNo),
									'[L]', Cast(Value as varchar(50)))
									
	from 
		[vwAllContract]
	where
		Guid = @Guid
	

	Declare 
		@EntryGuid uniqueidentifier,
		@EntryDate Datetime,
		@FeeAccountGuid uniqueidentifier,
		@EntryNumber int,
		@Value float,
		@Note varchar(255)
		
	DECLARE @cursor_Name CURSOR 
	Set @cursor_Name = CURSOR FAST_FORWARD FOR 
	SELECT 
		[Guid],
		[Date],
		[AccountGuid],
		[EntryNumber],
		[Value],
		[Note]
	FROM 
		FlatContractFee
	where
		(ParentGuid = @Guid) and Value <> 0 and [CreateEntry] = 1
	order By
		Number
	
	OPEN @cursor_Name
	FETCH NEXT FROM @cursor_Name INTO @EntryGuid ,@EntryDate ,@FeeAccountGuid ,@EntryNumber ,@Value ,@Note 
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
		--Select @EntryNumber
		if exists(Select * from HEntry where Number = @EntryNumber)
		Set @EntryNumber = 0
		
		if IsNull(@EntryNumber,0) = 0 
		Select @EntryNumber = IsNull(Max([Number]),0)+1 from [Hentry]	

		update FlatContractFee set EntryNumber = @EntryNumber where Guid = @EntryGuid
		
		--ÇáÊÑæíÓÉ
		Insert into [HEntry]	
		([Guid],[Number],[SecLvl],[Mark],[Date],[CurrencyGuid],[CurrencyVal],[Note],[ParentKind],[UserGuid],[BranchGuid],[IsPosted])
		Select
			@EntryGuid,
			@EntryNumber,
			@SecLvl,
			@Mark,
			@EntryDate,
			@CurrencyGuid, 
			@CurrencyVal, 
			@Note +' '+ISNULL(@FeeEntryNote,''), 
			23 as [ParentKind], 
			@UserGuid, 
			@BranchGuid, 
			@AutoPostedEntry as [IsPosted]

		Insert into [DEntry]
		([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
		Select
			@EntryGuid,
			[Number],
			@CustAccountGuid,
			[Value] as Debit,
			0 as Credit,
			@CurrencyGuid,
			@CurrencyVal,
			Case when @MoveCost = 1 then @CostGuid end,
			[AccountGuid] as [ObverseAcGuid],
			[Note] +' '+ISNULL(@FeeEntryNote,'')
		from
			[FlatContractFee]
		where
			Guid = @EntryGuid
		
		Insert into [DEntry]
		([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
		Select
			@EntryGuid,
			[Number],
			[AccountGuid],
			0 as Debit,
			[Value] as Credit,
			@CurrencyGuid,
			@CurrencyVal,
			Case when @MoveCostWithFeeCredit = 1 then @CostGuid end,
			@CustAccountGuid as [ObverseAcGuid],
			[Note] + ' '+ISNULL(@FeeEntryNote,'')
		from
			[FlatContractFee]
		where
			Guid = @EntryGuid

		FETCH NEXT FROM @cursor_Name INTO @EntryGuid ,@EntryDate ,@FeeAccountGuid ,@EntryNumber ,@Value ,@Note 
	
	END
	
	CLOSE @cursor_Name
	DEALLOCATE @cursor_Name
	/*

	if @ReturnResult = 1
	Select
		*
	FROM 
		FlatContractFee
	where
		ParentGuid = @Guid
	order By
		Number

	Select * from HEntry
	where Guid = @EntryGuid

	Select Note, * from DEntry
	where ParentGuid = @EntryGuid
	*/
	

GO
/****** Object:  StoredProcedure [dbo].[PrcCreateEntryFromLandContractFee]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcCreateEntryFromLandContractFee]
(
	@Guid uniqueidentifier = '3ABCD433-FBC1-443A-9B16-4FEC32D137AB'
)
  
as
	--Return
	Set noCount on
	
	exec [PrcDeleteEntryContractFee] @Guid
	
	Declare @CreateContractEntry bit
	Select
		@CreateContractEntry = C.CreateContractEntry
	From
		LandContract C 
	where
		C.Guid = @Guid
		
	if @CreateContractEntry = 0
	return

	Declare	
		@CustAccountGuid uniqueidentifier, 
		@CostGuid  uniqueidentifier,
		@SecLvl int,
		@Mark bit,
		@CurrencyGuid uniqueidentifier, 
		@CurrencyVal Float, 
		@UserGuid uniqueidentifier, 
		@BranchGuid uniqueidentifier, 
		@AutoPostedEntry bit,
		@MoveCost bit,
		@MoveCostWithFeeCredit bit,
		@FeeEntryNote varchar(255)
	
	Select
		@CustAccountGuid = CustAccountGuid,
		@SecLvl = C.SecLvl,
		@Mark = C.Mark,
		@CurrencyGuid = C.CurrencyGuid, 
		@CurrencyVal = C.CurrencyVal,
		@UserGuid = C.UserGuid,
		@BranchGuid = C.BranchGuid,
		@AutoPostedEntry = T.AutoPostedEntry,
		@MoveCost = T.MoveCost,
		@MoveCostWithFeeCredit = T.MoveCostWithFeeCredit,
		@CostGuid = C.CostGuid,
		@FeeEntryNote = T.FeeEntryNote
	From
		LandContract C 
		inner join ContractType t on t.Guid = C.TypeGuid
	where
		C.Guid = @Guid

	Select 
		@FeeEntryNote  =				REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
									REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
									@FeeEntryNote, '[N]', TypeNameAr),
									'[M]', TypeNameLtn),
									'[A]', CustArName),
									'[B]', CustltnName),
									'[C]', FlatNo),
									'[D]', BuildingArName),
									'[E]', BuildingLtnName),
									'[F]', dbo.fndate(EditDate)),
									'[G]', dbo.fndate(Fromdate)),
									'[H]', dbo.fndate(Todate)),
									'[K]', ContractNo),
									'[L]', Cast(Value as varchar(50)))
									
	from 
		[vwAllContract]
	where
		Guid = @Guid

	Declare 
		@EntryGuid uniqueidentifier,
		@EntryDate Datetime,
		@FeeAccountGuid uniqueidentifier,
		@EntryNumber int,
		@Value float,
		@Note varchar(255)
		
	DECLARE @cursor_Name CURSOR 
	Set @cursor_Name = CURSOR FAST_FORWARD FOR 
	SELECT 
		[Guid],
		[Date],
		[AccountGuid],
		[EntryNumber],
		[Value],
		[Note]
	FROM 
		LandContractFee
	where
		(ParentGuid = @Guid) and Value <> 0  and [CreateEntry] = 1
	order By
		Number
	
	OPEN @cursor_Name
	FETCH NEXT FROM @cursor_Name INTO @EntryGuid ,@EntryDate ,@FeeAccountGuid ,@EntryNumber ,@Value ,@Note 
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
		--Select @EntryNumber
		if exists(Select * from HEntry where Number = @EntryNumber)
		Set @EntryNumber = 0
		
		if IsNull(@EntryNumber,0) = 0 
		Select @EntryNumber = IsNull(Max([Number]),0)+1 from [Hentry]	

		update LandContractFee set EntryNumber = @EntryNumber where Guid = @EntryGuid
		
		--ÇáÊÑæíÓÉ
		Insert into [HEntry]	
		([Guid],[Number],[SecLvl],[Mark],[Date],[CurrencyGuid],[CurrencyVal],[Note],[ParentKind],[UserGuid],[BranchGuid],[IsPosted])
		Select
			@EntryGuid,
			@EntryNumber,
			@SecLvl,
			@Mark,
			@EntryDate,
			@CurrencyGuid, 
			@CurrencyVal, 
			@Note + ISNULL(@FeeEntryNote,''), 
			25 as [ParentKind], 
			@UserGuid, 
			@BranchGuid, 
			@AutoPostedEntry as [IsPosted]

		Insert into [DEntry]
		([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
		Select
			@EntryGuid,
			[Number],
			@CustAccountGuid,
			[Value] as Debit,
			0 as Credit,
			@CurrencyGuid,
			@CurrencyVal,
			Case when @MoveCost = 1 then @CostGuid end,
			[AccountGuid] as [ObverseAcGuid],
			[Note] + ISNULL(@FeeEntryNote,'')
		from
			[LandContractFee]
		where
			Guid = @EntryGuid
		
		Insert into [DEntry]
		([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
		Select
			@EntryGuid,
			[Number],
			[AccountGuid],
			0 as Debit,
			[Value] as Credit,
			@CurrencyGuid,
			@CurrencyVal,
			Case when @MoveCostWithFeeCredit = 1 then @CostGuid end,
			@CustAccountGuid as [ObverseAcGuid],
			[Note] + ISNULL(@FeeEntryNote,'')
		from
			[LandContractFee]
		where
			Guid = @EntryGuid

		FETCH NEXT FROM @cursor_Name INTO @EntryGuid ,@EntryDate ,@FeeAccountGuid ,@EntryNumber ,@Value ,@Note 
	
	END
	
	CLOSE @cursor_Name
	DEALLOCATE @cursor_Name

	Select
		*
	FROM 
		LandContractFee
	where
		ParentGuid = @Guid
	order By
		Number


GO
/****** Object:  StoredProcedure [dbo].[PrcCreateEntryFromParkingContractFee]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcCreateEntryFromParkingContractFee]
(
	@Guid uniqueidentifier = '3ABCD433-FBC1-443A-9B16-4FEC32D137AB',
	@ShoeResult bit = 1
)
  
as
	--Return
	Set noCount on
	
	exec [PrcDeleteEntryContractFee] @Guid
	
	Declare @CreateContractEntry bit
	Select
		@CreateContractEntry = C.CreateContractEntry
	From
		ParkingContract C 
	where
		C.Guid = @Guid
		
	if @CreateContractEntry = 0
	return

	Declare	
		@CustAccountGuid uniqueidentifier, 
		@CostGuid  uniqueidentifier,
		@SecLvl int,
		@Mark bit,
		@CurrencyGuid uniqueidentifier, 
		@CurrencyVal Float, 
		@UserGuid uniqueidentifier, 
		@BranchGuid uniqueidentifier, 
		@AutoPostedEntry bit,
		@MoveCost bit,
		@MoveCostWithFeeCredit bit,
		@FeeEntryNote varchar(255)
	
	Select
		@CustAccountGuid = CustAccountGuid,
		@SecLvl = C.SecLvl,
		@Mark = C.Mark,
		@CurrencyGuid = C.CurrencyGuid, 
		@CurrencyVal = C.CurrencyVal,
		@UserGuid = Null,
		@BranchGuid = C.BranchGuid,
		@AutoPostedEntry = T.AutoPostedEntry,
		@MoveCost = T.MoveCost,
		@MoveCostWithFeeCredit = T.MoveCostWithFeeCredit,
		@CostGuid = C.CostGuid,
		@FeeEntryNote = T.FeeEntryNote
	From
		ParkingContract C 
		inner join ContractType t on t.Guid = C.TypeGuid
	where
		C.Guid = @Guid

	Select 
		@FeeEntryNote  =				REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
									REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
									@FeeEntryNote, '[N]', TypeNameAr),
									'[M]', TypeNameLtn),
									'[A]', CustArName),
									'[B]', CustltnName),
									'[C]', FlatNo),
									'[D]', BuildingArName),
									'[E]', BuildingLtnName),
									'[F]', dbo.fndate(EditDate)),
									'[G]', dbo.fndate(Fromdate)),
									'[H]', dbo.fndate(Todate)),
									'[K]', ContractNo),
									'[L]', Cast(Value as varchar(50)))
									
	from 
		[vwAllContract]
	where
		Guid = @Guid

	Declare 
		@EntryGuid uniqueidentifier,
		@EntryDate Datetime,
		@FeeAccountGuid uniqueidentifier,
		@EntryNumber int,
		@Value float,
		@Note varchar(255)
		
	DECLARE @cursor_Name CURSOR 
	Set @cursor_Name = CURSOR FAST_FORWARD FOR 
	SELECT 
		[Guid],
		[Date],
		[AccountGuid],
		[EntryNumber],
		[Value],
		[Note]
	FROM 
		ParkingContractFee
	where
		(ParentGuid = @Guid) and Value <> 0 and [CreateEntry] = 1
	order By
		Number
	
	OPEN @cursor_Name
	FETCH NEXT FROM @cursor_Name INTO @EntryGuid ,@EntryDate ,@FeeAccountGuid ,@EntryNumber ,@Value ,@Note 
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
		--Select @EntryNumber
		if exists(Select * from HEntry where Number = @EntryNumber)
		Set @EntryNumber = 0
		
		if IsNull(@EntryNumber,0) = 0 
		Select @EntryNumber = IsNull(Max([Number]),0)+1 from [Hentry]	

		update ParkingContractFee set EntryNumber = @EntryNumber where Guid = @EntryGuid
		
		--ÇáÊÑæíÓÉ
		Insert into [HEntry]	
		([Guid],[Number],[SecLvl],[Mark],[Date],[CurrencyGuid],[CurrencyVal],[Note],[ParentKind],[UserGuid],[BranchGuid],[IsPosted])
		Select
			@EntryGuid,
			@EntryNumber,
			@SecLvl,
			@Mark,
			@EntryDate,
			@CurrencyGuid, 
			@CurrencyVal, 
			@Note + ISNULL(@FeeEntryNote,''), 
			24 as [ParentKind], 
			@UserGuid, 
			@BranchGuid, 
			@AutoPostedEntry as [IsPosted]

		Insert into [DEntry]
		([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
		Select
			@EntryGuid,
			[Number],
			@CustAccountGuid,
			[Value] as Debit,
			0 as Credit,
			@CurrencyGuid,
			@CurrencyVal,
			Case when @MoveCost = 1 then @CostGuid end,
			[AccountGuid] as [ObverseAcGuid],
			[Note] + ISNULL(@FeeEntryNote,'')
		from
			[ParkingContractFee]
		where
			Guid = @EntryGuid
		
		Insert into [DEntry]
		([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
		Select
			@EntryGuid,
			[Number],
			[AccountGuid],
			0 as Debit,
			[Value] as Credit,
			@CurrencyGuid,
			@CurrencyVal,
			Case when @MoveCostWithFeeCredit = 1 then @CostGuid end,
			@CustAccountGuid as [ObverseAcGuid],
			[Note] + ISNULL(@FeeEntryNote,'')
		from
			[ParkingContractFee]
		where
			Guid = @EntryGuid

		FETCH NEXT FROM @cursor_Name INTO @EntryGuid ,@EntryDate ,@FeeAccountGuid ,@EntryNumber ,@Value ,@Note 
	
	END
	
	CLOSE @cursor_Name
	DEALLOCATE @cursor_Name

	if @ShoeResult = 1
	Select
		*
	FROM 
		ParkingContractFee
	where
		ParentGuid = @Guid
	order By
		Number


GO
/****** Object:  StoredProcedure [dbo].[PrcCreateEntryTypeChecksCollection]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcCreateEntryTypeChecksCollection]
(
	@CheckGuid uniqueidentifier = '4134E164-2A09-4AA7-A64E-938500EB7573',
	@CollectedEntryTypeGuid uniqueidentifier = '250AAEAD-FEAD-4C3E-911B-94FBEB70A6F8',
	@Kind INT = 1,
	@immediate bit = 0
)
  
as
	Set NoCount on 
	
	Declare 
			@EnNum int,
			@EnGuid [uniqueidentifier]

	-- ÇáÞíÏ ÇáÓÇÈÞ
	Select 
		@EnNum = isnull(S.[Number],0)
		,@EnGuid = isnull([EntryGuid],0x0)
	From
		[LinkEntryType_Checks] L
		left join Secondary_Entry S on S.Guid = L.EntryGuid
	where
		L.[CheckGuid] = @CheckGuid
		and L.[Kind] = 1660+@Kind		

	if isnull(@EnNum,0) = 0
	begin	
		Select @EnNum = ISNULL(MAX(Number), 0) + 1 From [Secondary_Entry] where TypeGuid = @CollectedEntryTypeGuid
		Set @EnGuid = Newid()
	END


	--Select @EnNum	return
	-- ÍÐÝ ÇáÞíæÏ ÇáÞÏíãÉ
	Delete
		[LinkEntryType_Checks]
	where
		[CheckGuid] = @CheckGuid
		AND [kind] = 1660 + @Kind

	DECLARE 
		@CreateEntry BIT,
		@AutoPostedEntry Bit,
		@checkPayKind int

	SELECT	TOP 1
		@CreateEntry = CASE WHEN @Kind = 0 THEN 
								Case when ([PosdetCreatedEntry] = 1 and ([PosdetAutoCreatedEntry] = 1 OR @immediate = 1)) 
								then 1 else 0 
								end
							WHEN @Kind = 1 THEN 
								Case when ([collectedCreatedEntry] = 1 and ([collectedAutoCreatedEntry] = 1 OR @immediate = 1)) 
								then 1 else 0 
								end
							WHEN @Kind = 2 THEN 
								Case when ([EndorsementCreatedEntry] = 1 and ([EndorsementAutoCreatedEntry] = 1 OR @immediate = 1)) 
								then 1 else 0 
								end
							WHEN @Kind = 3 THEN 
								Case when ([ReturnedCreatedEntry] = 1 and ([ReturnedAutoCreatedEntry] = 1 OR @immediate = 1)) 
								then 1 else 0 
								end
						END,
		@AutoPostedEntry = CASE WHEN @Kind = 0 THEN [PosdetAutoPostedEntry]
							WHEN @Kind = 1 THEN [collectedAutoPostedEntry]
							WHEN @Kind = 2 THEN [EndorsementAutoPostedEntry]
							WHEN @Kind = 3 THEN [ReturnedAutoPostedEntry]
						END,
		@checkPayKind = [CheckKind]
	FROM
		[CheckType]
	WHERE
		Guid = (		
				Select 
					[TypeGuid] 
				From 
					[Checks]
				WHERE
					[Guid] =@CheckGuid
				)

	DECLARE
		@CheckKind INT,
		@CheckNumber Int,
		@SecLvl Int,
		@Value Float,
		@CurrencyGUID [uniqueidentifier],
		@CurrencyVal [float],
		@Date DateTime,

		@DebitAccountGuid [uniqueidentifier]  ,
		@DebitCostGuid [uniqueidentifier]  ,
		@CreditAccountGuid [uniqueidentifier]  ,
		@CreditCostGuid [uniqueidentifier]  ,
		@Commission Float,
		@CommCostGuid [uniqueidentifier],
		@CommCostCreditGuid [uniqueidentifier],
		@CommNote Varchar(256),
		@LossComm Bit,
		@CommType int,
		@CommAccountGuid [uniqueidentifier],
		@CommAccountCreditGuid [uniqueidentifier],
		@Note Varchar(256),
		@Delay FLOAT,
		@DelayNote Varchar(256),
		@DelayAccountDebitGuid [uniqueidentifier]  ,
		@DelayAccountCreditGuid [uniqueidentifier] ,
		@BranchGuid [uniqueidentifier],
		@ContractGuid uniqueidentifier,

		@OperationCreateEntry bit,

		@IsRounded bit

	SELECT
		@CheckKind				= [T].[CheckKind],
		@SecLvl					= [L].[SecLvl],
		@CheckNumber			= [C].[number],
		@Value					= [C].[Value],
		@CurrencyGUID			= [C].[CurrencyGUID],
		@CurrencyVal			= [C].[CurrencyVal],
		@Date					= [L].[Date],

		@DebitAccountGuid		= [L].[DebitAccountGuid],
		@DebitCostGuid			= [L].[DebitCostGuid],
		@CreditAccountGuid		= [L].[CreditAccountGuid],
		@CreditCostGuid			= [L].[CreditCostGuid],
		@Commission				= [L].[Commission],
		@CommCostGuid			= Case when T.CommMoveCost = 1 then L.[CommCostGuid] end,
		@CommCostCreditGuid			= Case when T.CommMoveCostCredit = 1 then L.[CommCostGuid] end,
		@CommNote 				= [L].[CommNote],
		@LossComm				= [L].[LossComm],
		@CommType				= [T].[CommType],
		@CommAccountGuid		= [L].[CommAccountGuid],
		@CommAccountCreditGuid	= [L].[CommAccountCreditGuid],
		@Note					= [L].[Note],
		@Delay					= [L].[Delay],
		@DelayNote 				= [L].[DelayNote],
		@DelayAccountDebitGuid	= [L].[DelayAccountDebitGuid],
		@DelayAccountCreditGuid = [L].[DelayAccountCreditGuid],
		@BranchGuid				= [C].[BranchGuid],
		@ContractGuid			= [C].[ContractGuid],

		@OperationCreateEntry	= L.OperationCreateEntry,

		@IsRounded				= IsNull(l.IsRounded,0)
	FROM 
		[Checks] [C]
		INNER JOIN [ChecksCollection] [L] ON [L].[CheckGuid] = [C].[Guid]
		INNER JOIN [CheckType] [T] ON [T].[Guid] = [C].[TypeGuid]
	WHERE
		[C].[Guid] = @CheckGuid
		AND [L].[Kind] = @Kind



	if (@CreateEntry = 1) and ( @IsRounded = 0) and (@OperationCreateEntry = 1)
	BEGIN
			insert into [Secondary_Entry]
			([Guid],[Number],[Seclvl],[Mark],[Date],[ReceiptNo],[AccountGuid],[Kind],[CurrencyGuid],[CurrencyVal],[Note],[BranchGuid],[TypeGuid],[ContractGuid],[CheckCreateEntry],[SalesManGuid])
			Select
				@EnGuid,
				@EnNum,
				@SecLvl as [Seclvl],
				0 as [Mark],
				@Date as [Date],
				@CheckNumber as [ReceiptNo],
				Case when @checkPayKind = 0 then @DebitAccountGuid else @CreditAccountGuid end as [AccountGuid],
				0 as [Kind],
				@CurrencyGuid as [CurrencyGuid],
				@CurrencyVal as [CurrencyVal],
				@Note as [Note],
				@BranchGuid as [BranchGuid],
				@CollectedEntryTypeGuid as [TypeGuid],
				@ContractGuid as [ContractGuid],
				1 as [CheckCreateEntry],
				Null as [SalesManGuid]
				
			Declare @DetailNum Int
			Set @DetailNum = 0

			Declare @CheckValue Float,
					@CommValue Float

			Set @CheckValue = Case when @LossComm = 1 then
														Case
															when @CommType = 0 then @Value - @Commission
															else @Value
														end
									else
									@Value
							  end

			Set @CommValue = @Commission
				
			insert into [Secondary_EntryDetail]
			([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[Note],[ObverseAcGuid],[CostGuid])
			Select
				@EnGuid,
				@DetailNum as [Number],
				Case when @checkPayKind = 0 then @CreditAccountGuid else @DebitAccountGuid end as [AcGuid],
				Case when @checkPayKind = 0 then 0 else @CheckValue end as [Debit],
				Case when @checkPayKind = 0 then @CheckValue else 0 end as [Credit],
				@CurrencyGuid,
				@CurrencyVal,
				@Note,
				Case when @checkPayKind = 0 then @DebitAccountGuid else @CreditAccountGuid end as [ObverseAcGuid],
				@CreditCostGuid [CostGuid]


			IF @LossComm = 1  and 1 = 2 --íæÌÏ ÚãæáÉ ÊÍÕíá   Êã ÇíÞÇÝåÇ
			BEGIN
				Set @DetailNum = @DetailNum + 1

				insert into [Secondary_EntryDetail]
				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[Note],[ObverseAcGuid],[CostGuid])
				Select
					@EnGuid,
					@DetailNum as [Number],
					Case when @checkPayKind = 0 then @CommAccountCreditGuid else @DebitAccountGuid end as [AcGuid],
					Case when @checkPayKind = 0 then 0 else @CommValue end as [Debit],
					Case when @checkPayKind = 0 then @CommValue else 0 end as [Credit],
					@CurrencyGuid,
					@CurrencyVal,
					@CommNote,
					Case when @checkPayKind = 0 then @DebitAccountGuid else @CommAccountCreditGuid end as [ObverseAcGuid],
					@CreditCostGuid [CostGuid]				
			END

			INSERT INTO [LinkEntryType_Checks]
			(
				[CheckGuid],
				[EntryGuid],
				[EntryNum],
				[Kind]
			)
			SELECT	
				@CheckGuid,
				@EnGuid,
				@EnNum,
				1660+@Kind
				
			exec [PrcCreateEntryFromEntryType] @EnGuid, @ContractGuid

	end


GO
/****** Object:  StoredProcedure [dbo].[PrcCreateEntrytypeChecksPartialCollection]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcCreateEntrytypeChecksPartialCollection]
(
	@CollectionGuid uniqueidentifier = '383C4089-ADC3-470B-80C5-3042CA07F0EE',
	@CheckGuid uniqueidentifier = 'BA31BD68-DB22-42EA-BFA8-4E8EF4235659',
	@TypeGuid uniqueidentifier = '090E44FF-AE92-4744-8430-5CF559E58FB1',
	@Sender int = 0,
	@PartialCollectedEntryTypeGuid uniqueidentifier = '28291D9D-4954-42FD-BCFA-25AF9187005D'
)
  
as
	Declare @CeGuid uniqueidentifier,
			@ContractGuid uniqueidentifier
	
	Select
		@CeGuid = L.SecEntryGuid ,
		@ContractGuid = C.[ContractGuid]
	from
		[Checks] [C]
		INNER JOIN [ChecksPartialCollection] [L] ON [L].[CheckGuid] = [C].[Guid]
	where
		L.Guid = @CollectionGuid
		
	if isNull(@ceGuid, 0x0) = 0x0
	begin
		Set @ceGuid = NEWID()
		
		update
			[ChecksPartialCollection]
		set 
			SecEntryGuid = @CeGuid
		where
			Guid = @CollectionGuid
	end
	
	Declare 
			@EnNum int

	-- ÇáÞíÏ ÇáÓÇÈÞ
	Select 
		@EnNum = isnull([h].[Number],0)
	From
		[Secondary_Entry] H
	where
		[H].[Guid] = @CeGuid

	if isnull(@EnNum,0) = 0
	begin	
		Select @EnNum = IsNull(Max([Number]),0) + 1 from [Secondary_Entry]
		where
			typeGuid = @PartialCollectedEntryTypeGuid
	END

	--ÍÐÝ ÇáÑÈØ ãÚ ÇáÏÝÚÇÊ ÇáäÞÏíÉ
	Delete [ContractCachPayment] where [EntryGuid] = @CeGuid
	Delete [LandContractCachPayment] where [EntryGuid] = @CeGuid
	Delete [ContractParkingCachPayment] where [EntryGuid] = @CeGuid
	Delete [ElectricityCachPayment] where [EntryGuid] = @CeGuid
	

	--ÍÐÝ ÓäÏ ÇáÞÈÖ Çä æÌÏ
	Delete
		[Secondary_Entry]
	where
		[Guid] = @CeGuid

	DECLARE 
		@CreateEntry BIT,
		@AutoPostedEntry Bit,
		@checkPayKind int

	
	SELECT	TOP 1
		@CreateEntry = 
		Case when [partialcollectedCreatedEntry] = 1 and (
													([partialcollectedAutoCreatedEntry] = 1) or (@Sender = 1)
												   ) then 1 else 0 end,
		@AutoPostedEntry = [partialcollectedAutoPostedEntry],
		@checkPayKind = [CheckKind]
	FROM
		[CheckType]
	WHERE
		Guid = @TypeGuid

	DECLARE
		@CheckKind INT,
		@SecLvl Int,
		@CheckNumber Int,
		@Value Float,
		@CurrencyGUID [uniqueidentifier],
		@CurrencyVal [float],
		@Date DateTime,

		@DebitAccountGuid [uniqueidentifier]  ,
		@DebitCostGuid [uniqueidentifier]  ,
		@CreditAccountGuid [uniqueidentifier]  ,
		@CreditCostGuid [uniqueidentifier]  ,
		@Commission Float,
		@CommCostGuid [uniqueidentifier],
		@CommCostCreditGuid [uniqueidentifier],
		@CommNote varchar(256),
		@LossComm Bit,
		@CommType int,
		@CommAccountGuid [uniqueidentifier],
		@CommAccountCreditGuid [uniqueidentifier],
		@Note Varchar(256),
		@BranchGuid [uniqueidentifier],
		@IsRounded bit
		
	SELECT
		@CheckKind				= [T].[CheckKind],
		@SecLvl					= [C].[SecLvl],
		@CheckNumber			= [C].[number],
		@Value					= [L].[Value],
		@CurrencyGUID			= [C].[CurrencyGUID],
		@CurrencyVal			= [C].[CurrencyVal],
		@Date					= [L].[Date],

		@DebitAccountGuid		= [L].[DebitAccountGuid],
		@DebitCostGuid			= [L].[DebitCostGuid],
		@CreditAccountGuid		= [L].[CreditAccountGuid],
		@CreditCostGuid			= [L].[CreditCostGuid],
		@Commission				= [L].[Commission],
		@CommCostGuid			= Case when T.CommMoveCost = 1 then L.[CommCostGuid] end,
		@CommCostCreditGuid			= Case when T.CommMoveCostCredit = 1 then L.[CommCostGuid] end,
		@CommNote 				= [L].[CommNote],
		@LossComm				= [L].[LossComm],
		@CommType				= [T].[CommType],
		@CommAccountGuid		= [L].[CommAccountGuid],
		@CommAccountCreditGuid	= [L].[CommAccountCreditGuid],
		@Note					= [L].[Note],
		@BranchGuid				= [C].[BranchGuid],
		@IsRounded				= IsNull(l.IsRounded,0)
	FROM 
		[Checks] [C]
		INNER JOIN [ChecksPartialCollection] [L] ON [L].[CheckGuid] = [C].[Guid]
		INNER JOIN [CheckType] [T] ON [T].[Guid] = [C].[TypeGuid]
	WHERE
		[L].[Guid] = @CollectionGuid 


	if (@CreateEntry = 1) and (@IsRounded = 0)
	BEGIN
			insert into [Secondary_Entry]
			([Guid],[Number],[Seclvl],[Mark],[Date],[ReceiptNo],[AccountGuid],[Kind],[CurrencyGuid],[CurrencyVal],[Note],[BranchGuid],[TypeGuid],[ContractGuid],[CheckCreateEntry],[SalesManGuid])
			Select
				@ceGuid,
				@EnNum,
				@SecLvl as [Seclvl],
				0 as [Mark],
				@Date as [Date],
				@CheckNumber as [ReceiptNo],
				Case when @checkPayKind = 0 then @DebitAccountGuid else @CreditAccountGuid end as [AccountGuid],
				0 as [Kind],
				@CurrencyGuid as [CurrencyGuid],
				@CurrencyVal as [CurrencyVal],
				@Note as [Note],
				@BranchGuid as [BranchGuid],
				@PartialCollectedEntryTypeGuid as [TypeGuid],
				@ContractGuid as [ContractGuid],
				1 as [CheckCreateEntry],
				Null as [SalesManGuid]
				
			Declare @DetailNum Int
			Set @DetailNum = 0

			Declare @CheckValue Float,
					@CommValue Float

			Set @CheckValue = Case when @LossComm = 1 then
														Case
															when @CommType = 0 then @Value - @Commission
															else @Value
														end
									else
									@Value
							  end

			Set @CommValue = @Commission
				
			insert into [Secondary_EntryDetail]
			([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[Note],[ObverseAcGuid],[CostGuid])
			Select
				@ceGuid,
				@DetailNum as [Number],
				Case when @checkPayKind = 0 then @CreditAccountGuid else @DebitAccountGuid end as [AcGuid],
				Case when @checkPayKind = 0 then 0 else @CheckValue end as [Debit],
				Case when @checkPayKind = 0 then @CheckValue else 0 end as [Credit],
				@CurrencyGuid,
				@CurrencyVal,
				@Note,
				Case when @checkPayKind = 0 then @DebitAccountGuid else @CreditAccountGuid end as [ObverseAcGuid],
				@CreditCostGuid [CostGuid]


			IF @LossComm = 1  and 1 = 2 --ãáÛì --íæÌÏ ÚãæáÉ ÊÍÕíá
			BEGIN
				Set @DetailNum = @DetailNum + 1

				insert into [Secondary_EntryDetail]
				([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[Note],[ObverseAcGuid],[CostGuid])
				Select
					@ceGuid,
					@DetailNum as [Number],
					Case when @checkPayKind = 0 then @CommAccountCreditGuid else @DebitAccountGuid end as [AcGuid],
					Case when @checkPayKind = 0 then 0 else @CommValue end as [Debit],
					Case when @checkPayKind = 0 then @CommValue else 0 end as [Credit],
					@CurrencyGuid,
					@CurrencyVal,
					@CommNote,
					Case when @checkPayKind = 0 then @DebitAccountGuid else @CommAccountCreditGuid end as [ObverseAcGuid],
					@CreditCostGuid [CostGuid]				
			END
			
			exec [PrcCreateEntryFromEntryType] @ceGuid, @ContractGuid


	end

	--Ýí ÍÇá Êã ÊæáíÏ ÇáÞíÏ
	--ÑÈØ ÇáÞíÏ ãÚ ÇáÏÝÚÇÊ ÇáäÞÏíÉ Ýí ÇáÚÞÏ
	/*
	if Exists(Select Top 1 * From [HEntry] where [Guid] = @CollectionGuid )
	begin
		Declare @ContractKind int
				,@ContractGuid uniqueidentifier
		Set @ContractKind = -1
		
		Select
			@ContractKind = Al.[Kind] ,
			@ContractGuid = [Al].[Guid]
		FROM 
			[Checks] [C]
			INNER JOIN [ChecksPartialCollection] [L] ON [L].[CheckGuid] = [C].[Guid]
			INNER JOIN [CheckType] [T] ON [T].[Guid] = [C].[TypeGuid]
			inner join [vwAllContract] [Al] on [Al].[Guid] = [C].[ContractGuid]
		WHERE
			[L].[Guid] = @CollectionGuid 

		-- ãÑÊÈØ ÈÚÞÏ ÔÞÉ
		
		if @ContractKind = 0
		begin
			
			Insert into [ContractCachPayment] 
			([ContractGuid], [EntryGuid])
			Select
				@ContractGuid,
				@CollectionGuid 
			
		end

		-- ãÑÊÈØ ÈÚÞÏ ãæÞÝ
		if @ContractKind = 1
		begin
			Insert into [ContractParkingCachPayment] 
			([ContractGuid], [EntryGuid])
			Select
				@ContractGuid,
				@CollectionGuid 
		end

		-- ãÑÊÈØ ÈÚÞÏ ÃÑÖ
		if @ContractKind = 2
		begin
			Insert into [LandContractCachPayment] 
			([ContractGuid], [EntryGuid])
			Select
				@ContractGuid,
				@CollectionGuid 
		end

		if @ContractKind is Null
		begin
			
			Select
				@ContractGuid = [Al].[Guid]
			FROM 
				[Checks] [C]
				INNER JOIN [ChecksPartialCollection] [L] ON [L].[CheckGuid] = [C].[Guid]
				INNER JOIN [CheckType] [T] ON [T].[Guid] = [C].[TypeGuid]
				inner join [vwElectricityBill] [Al] on [Al].[Guid] = [C].[ContractGuid]
			WHERE
				[L].[Guid] = @CollectionGuid 
				
			if isNull(@ContractGuid, 0x0) <> 0x0	
			Insert into [ElectricityCachPayment] 
			([ContractGuid], [EntryGuid])
			Select
				@ContractGuid,
				@CollectionGuid 
			
		end
	end
	*/


GO
/****** Object:  StoredProcedure [dbo].[PrcCreateEntryTypeReceiptOrder]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcCreateEntryTypeReceiptOrder]
(
	@Guid uniqueidentifier = '019E0F87-6AA6-48EC-B267-703A0937E8AA'
)
  
as
	Declare @RowGuid uniqueidentifier


	Delete
		[Secondary_Entry] 
	from
		[Secondary_Entry] S
		inner join ReceiptOrderDetail D on D.Guid = S.Guid
	where
		D.[ParentGuid] = @Guid
		
	Declare @I int, @C int
	Set @I = 1
	Select @C = COUNT(*) From ReceiptOrderDetail where parentGuid = @Guid
	while @I <= @C
	begin
		Set @RowGuid = 0x0
		
		Select
			@RowGuid = D.Guid		
		From
			ReceiptOrder O
			inner join ReceiptOrderDetail D on D.parentGuid = O.Guid
		where
			O.Guid = @Guid
			and D.Number = @I
			and IsReceipt = 1
			
		--Print @RowGuid return
		if ISNULL( @RowGuid,0x0) <> 0x0 
		exec PrcCreateEntryTypeReceiptOrderRow @RowGuid
		
		Set @I = @I + 1
	end

GO
/****** Object:  StoredProcedure [dbo].[PrcCreateEntryTypeReceiptOrderRow]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcCreateEntryTypeReceiptOrderRow]
(
	@RowGuid uniqueidentifier = '29AC5624-DE50-47A1-BE1A-1B0E7E56E3DB'
)
  
as
	Declare 
			@EntryTypeGuid uniqueidentifier,
			@ContractGuid uniqueidentifier,
			@CreateEntry BIT,
			@AutoPostedEntry Bit,
			@Mark bit,
			@SecLvl Int,
			@Value Float,
			@CurrencyGUID [uniqueidentifier],
			@CurrencyVal [float],
			@Date DateTime,
			@DebitAccountGuid [uniqueidentifier]  ,
			@DebitCostGuid [uniqueidentifier]  ,
			@CreditAccountGuid [uniqueidentifier]  ,
			@CreditCostGuid [uniqueidentifier]  ,
			@Note Varchar(256),
			@DetailNote Varchar(256),
			@TypeDetailNote Varchar(256),
			@BranchGuid [uniqueidentifier],
			
			@BuildingName Varchar(256),
			@BuildingLtnName Varchar(256),
			@FlatNo Varchar(256),
			@CustName Varchar(256),
			@CustltnName Varchar(256),
			@ContractNo Varchar(256),
			@ContractNumber Varchar(256)


	Select
		@EntryTypeGuid = T.EntryTypeGuid,
		@CreateEntry = D.IsReceipt,
		@ContractGuid = O.ContractGuid,
		@SecLvl = O.SecLvl,
		@Value = D.CashValue,
		@CurrencyGUID = C.CurrencyGUID,
		@CurrencyVal = C.CurrencyVal,
		@Date = D.Date,
		@DebitAccountGuid = D.AccountGuid,
		@DebitCostGuid = Case when T.[OpMoveCostwithDefAccount] = 1 then C.[UnitCostGuid] end,
		@CreditAccountGuid = C.CustAcGuid,
		@CreditCostGuid = Case when T.[NeedCostItem] = 1 then C.[UnitCostGuid] end,
		@Note = O.Note,
		@DetailNote = D.Note,
		@TypeDetailNote = (Select Top 1 Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([dt].[enNote],'') <> '') then [dt].[enNote] else [dt].[ArNote]  end From ReceiptOrderTypeDetail dt where dt.Number = D.Number and dt.parentGuid = T.Guid),
		@Mark = O.Mark,
		@BranchGuid = Null,
		
		@BuildingName = C.BuildingarName,
		@BuildingLtnName = C.[BuildingLtnName],
		@FlatNo = C.FlatNo,
		@CustName = C.CustarName,
		@CustLtnName = C.CustltnName,
		@ContractNo = C.ContractNo,
		@ContractNumber = C.number
	From
		ReceiptOrder O
		inner join vwReceiptOrderType T on T.Guid = O.TypeGuid
		inner join ReceiptOrderDetail D on D.parentGuid = O.Guid
		inner join vwallcontract C on C.Guid = O.ContractGuid
	where
		D.Guid = @RowGuid


	if ISNULL(@DetailNote, '') = ''
	begin
		Set @TypeDetailNote = REPLACE(@TypeDetailNote, '[A]', ISNULL(@BuildingName,''))
		Set @TypeDetailNote = REPLACE(@TypeDetailNote, '[F]', ISNULL(@BuildingltnName,''))
		Set @TypeDetailNote = REPLACE(@TypeDetailNote, '[B]', ISNULL(@FlatNo,''))
		Set @TypeDetailNote = REPLACE(@TypeDetailNote, '[C]', ISNULL(@CustName,''))
		Set @TypeDetailNote = REPLACE(@TypeDetailNote, '[H]', ISNULL(@CustltnName,''))
		Set @TypeDetailNote = REPLACE(@TypeDetailNote, '[D]', ISNULL(@ContractNo,''))
		Set @TypeDetailNote = REPLACE(@TypeDetailNote, '[E]', ISNULL(@ContractNumber,''))
		
		Set @DetailNote = @TypeDetailNote
	end
	
	Set @AutoPostedEntry = 1

	Declare @EnNum int

	-- ÇáÞíÏ ÇáÓÇÈÞ
	Select 
		@EnNum = isnull([Number],0)
	From
		[Secondary_Entry]
	where
		[Guid] = @RowGuid
		and TypeGuid = @EntryTypeGuid

	if isnull(@EnNum,0) = 0
	begin	
		Select @EnNum = ISNULL(MAX(Number), 0) + 1 From [Secondary_Entry] where TypeGuid = @EntryTypeGuid
	END

	-- ÍÐÝ ÇáÞíæÏ ÇáÞÏíãÉ
	Delete
		[Secondary_Entry]
	where
		[Guid] = @RowGuid



	if (@CreateEntry = 1) and (IsNull(@Value,0) <> 0)
	BEGIN
			insert into [Secondary_Entry]
			([Guid],[Number],[Seclvl],[Mark],[Date],[AccountGuid],[Kind],[CurrencyGuid],[CurrencyVal],[Note],[BranchGuid],[TypeGuid],[ContractGuid],[CheckCreateEntry],[SalesManGuid])
			Select
				@RowGuid,
				@EnNum,
				@SecLvl as [Seclvl],
				@Mark as [Mark],
				@Date as [Date],
				@DebitAccountGuid ,
				0 as [Kind],
				@CurrencyGuid as [CurrencyGuid],
				@CurrencyVal as [CurrencyVal],
				@DetailNote as [Note],
				@BranchGuid as [BranchGuid],
				@EntryTypeGuid as [TypeGuid],
				@ContractGuid,
				1 as [CheckCreateEntry],
				Null as [SalesManGuid]
				

			insert into [Secondary_EntryDetail]
			([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[Note],[ObverseAcGuid],[CostGuid])
			Select
				@RowGuid,
				1 as [Number],
				@CreditAccountGuid as [AcGuid],
				0 as [Debit],
				@Value as [Credit],
				@CurrencyGuid,
				@CurrencyVal,
				@DetailNote,
				@DebitAccountGuid as [ObverseAcGuid],
				@CreditCostGuid [CostGuid]
				
			exec [PrcCreateEntryFromEntryType] @RowGuid, @ContractGuid
			
	end

	

GO
/****** Object:  StoredProcedure [dbo].[PrcCreatefnGetAccountList]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create Procedure [dbo].[PrcCreatefnGetAccountList]
as
	if dbo.fnObjectExists('##fnGetAccountList') = 0
	Select * into ##fnGetAccountList from fnGetAccountList (0x0)

GO
/****** Object:  StoredProcedure [dbo].[PrcCreateIndex]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create Procedure [dbo].[PrcCreateIndex]
(
	@TableName Varchar(255) = 'Apartment',
	@Field Varchar(255) = 'NO',
	@Uniqe bit = 1
)
as
--	return
	/*
	if dbo.fnObjectExists(@TableName+'.'+@Field ) = 0 
	begin
		Print 'Error : Object /'+@TableName+'.'+@Field +'/ Not exists'
		--return
	end
	*/
	
	Declare @IXName Varchar(255)
	Declare @Sql Varchar(500)
	
	Set @IXName = Case when @Uniqe = 0 then 'IX_' else 'UX_' end +@TableName+'_'+REPLACE(@Field, ',', '_')
	
	Set @Sql = 'IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].['+@TableName+']'') AND name = N'''+@IXName+''')
				DROP INDEX ['+@IXName+'] ON [dbo].['+@TableName+'] WITH ( ONLINE = OFF )'

	Print @Sql
	exec (@Sql)	

	begin Try
	
	if @Uniqe = 1
	Set @Sql = 'CREATE UNIQUE INDEX '+@IXName+' ON '+@TableName+' ('+@Field+')'
	else
	Set @Sql = 'CREATE INDEX '+@IXName+' ON '+@TableName+' ('+@Field+')'
	
	Print @Sql
	exec (@Sql)	
	
	end try
	begin catch
		Print 'CreateIndex_Error '+
		+'ERROR_NUMBER '+isNull(Cast( ERROR_NUMBER() as Varchar(255)),'')+' '+
		+'ERROR_SEVERITY '+isNull(Cast( ERROR_SEVERITY() as Varchar(255)),'')+' '+
		+'ERROR_STATE '+isNull(Cast( ERROR_STATE() as Varchar(255)),'')+' '+
		+'ERROR_PROCEDURE '+isNull(Cast( ERROR_PROCEDURE() as Varchar(255)),'')+' '+
		+'ERROR_LINE '+isNull(Cast( ERROR_LINE() as Varchar(255)),'')+' '+
		+'ERROR_MESSAGE '+isNull(Cast( ERROR_MESSAGE() as Varchar(255)),'')
	END CATCH
	

GO
/****** Object:  StoredProcedure [dbo].[PrcCreateLandIdentityEntry]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcCreateLandIdentityEntry]
(
	@Guid uniqueidentifier = '{6603B03F-6A3B-40C4-9309-D7C0C137741A}'
)
  
as
	Declare @IdentityEntryGuid uniqueidentifier
	Select 
		@IdentityEntryGuid = [IdentityEntryGuid] 
	From 
		[Earth]
	where
		Guid = @Guid
		
	if isNull(@IdentityEntryGuid,0x0) = 0x0
	Set @IdentityEntryGuid = NEWID()
	
	Declare @CeNumber Int
	Select
		@CeNumber = Number
	From
		HEntry
	where
		Guid = @IdentityEntryGuid
		
	if isNull(@CeNumber,0) = 0
	Set @CeNumber = (Select isNull(MAX(Number),0) + 1 From HEntry)
	
	Declare
		@CrearteEntryInvestment Bit,
		@LandOwner Int,
		@IdentityValue Float
	Select
		@CrearteEntryInvestment = [CrearteEntryInvestment],
		@LandOwner = [LandOwner],
		@IdentityValue  = [IdentityValue]
	From
		[Earth]
	where
		Guid = @Guid
	

	Delete
		HEntry
	where
		Guid = @IdentityEntryGuid
		

	if @CrearteEntryInvestment = 1 and @LandOwner = 3 and @IdentityValue <> 0
	begin
		update Earth Set [IdentityEntryGuid] = @IdentityEntryGuid
		where
			Guid = @Guid
			
		Insert Into [HEntry]
		([Guid],[SecLvl],[Number],[Date], [CurrencyGuid], [CurrencyVal], [Note], [ParentKind], [BranchGuid], [IsPosted])
		Select
			@IdentityEntryGuid,
			[SecLvl],
			@CeNumber,
			[IdentityBeginDate],
			[CurrencyIdentityGuid],
			[CurrencyValIdentity],
			[IdentityNote],
			170,
			Null,
			1
		From
			Earth
		where
			Guid = @Guid
			
			Declare @DetailNum Int
			Set @DetailNum = 0
		
			Insert into [DEntry]
		 	([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
			Select
				@IdentityEntryGuid,
				@DetailNum,
				[AccountGuid],
				[IdentityValue],
				0,
				CurrencyIdentityGUID,
				CurrencyValIdentity,
				Null,
				OwnerAccountGuid,
				[IdentityNote]
			From
				[Earth]
			where
				[Guid] = @Guid
				
			Set @DetailNum = @DetailNum + 1
			
			Insert into [DEntry]
		 	([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
			Select
				@IdentityEntryGuid,
				@DetailNum,
				OwnerAccountGuid,
				0,
				[IdentityValue],
				CurrencyIdentityGUID,
				CurrencyValIdentity,
				Null,
				[AccountGuid],
				[IdentityNote]
			From
				[Earth]
			where
				[Guid] = @Guid

			Select * from [HEntry] where Guid = @IdentityEntryGuid
			Select * from [DEntry] where parentGuid = @IdentityEntryGuid
			
	end
	
		

GO
/****** Object:  StoredProcedure [dbo].[PrcCreateLawsuitEntry]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcCreateLawsuitEntry]
(
	@Guid uniqueidentifier = '{EBDF23D5-26CF-46DB-84AD-D3589FC8CAF7}'
)
 
as
	Set Nocount on 
	Declare @EntryGuid1 uniqueidentifier
	
	Select
		@EntryGuid1 = [EntryGuid1]
	From
		[Lawsuit]
	where
		Guid = @Guid
			
	if @EntryGuid1 is Null
	begin
		Set @EntryGuid1 = NEWID()
		update [Lawsuit] Set [EntryGuid1] = @EntryGuid1 where Guid = @Guid
	end
	
	Declare @CeNumber Int
	Select
		@CeNumber = [Number]
	From
		HEntry
	where
		Guid = @EntryGuid1
		
	if isNull(@CeNumber,0) = 0
	Set @CeNumber = (Select isNull(MAX(Number),0) + 1 From HEntry)

	Delete
		HEntry
	where
		Guid = @EntryGuid1
		
	if Not exists(
		Select Top 1 Guid 
		from 
			[Lawsuit] 
		where 
			Guid = @Guid 
			and LawyerEntry = 1 
			and LawyerRent <> 0
				) 
	return				

	Declare @CostGuid uniqueidentifier
	Select
		@CostGuid = [UnitCostGuid]
	from
		[vwAllContract] C
		inner join Lawsuit L on L.ContractGuid = C.Guid
	where
		L.Guid = @Guid
		
	Insert Into [HEntry]
	([Guid],[SecLvl],[Number],[Date], [CurrencyGuid], [CurrencyVal], [Note], [ParentKind], [BranchGuid], [IsPosted])
	Select
		@EntryGuid1,
		[SecLvl],
		@CeNumber,
		[LawyerRentDate],
		[CurrencyGuid],
		[CurrencyVal],
		[Note],
		157,
		Null,
		1
	From
		[Lawsuit]
	where
		Guid = @Guid

	Declare @DetailNum Int
	Set @DetailNum = 0

	Set @DetailNum = @DetailNum + 1
	Insert into [DEntry]
 	([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
	Select
		@EntryGuid1,
		@DetailNum,
		[LawyerDebitAccountGuid],
		A.LawyerRent,
		0,
		A.CurrencyGUID,
		A.CurrencyVal,
		@CostGuid as [debitCostGuid],
		[LawyerCreditAccountGuid],
		A.LawyerNote
	From
		[Lawsuit] A
	where
		A.[Guid] = @Guid
		and LawyerEntry = 1
		and LawyerRent <> 0
		
		
	Set @DetailNum = @DetailNum + 1
	Insert into [DEntry]
 	([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
	Select
		@EntryGuid1,
		@DetailNum,
		[LawyerCreditAccountGuid],
		0,
		A.LawyerRent,
		A.CurrencyGUID,
		A.CurrencyVal,
		@CostGuid as [debitCostGuid],
		[LawyerDebitAccountGuid],
		A.LawyerNote
	From
		[Lawsuit] A
	where
		A.[Guid] = @Guid
		and LawyerEntry = 1
		and LawyerRent <> 0

	update [HEntry] Set isPosted = 1 where Guid = @Guid
	
	Select * from [HEntry] where Guid = @Guid
	Select * from [DEntry] where parentGuid = @Guid
			

GO
/****** Object:  StoredProcedure [dbo].[PrcCreateLawsuitEntry2]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcCreateLawsuitEntry2]
(
	@Guid uniqueidentifier = '3E88C993-969F-43A3-9FFA-ECA7390A6FBF'
)
  
as
	Set nocount on
	Declare @EntryGuid2 uniqueidentifier
	
	Select
		@EntryGuid2 = [EntryGuid2]
	From
		[Lawsuit]
	where
		Guid = @Guid
			
	if @EntryGuid2 is Null
	begin
		Set @EntryGuid2 = NEWID()
		update [Lawsuit] Set [EntryGuid2] = @EntryGuid2 where Guid = @Guid
	end
	
	Declare @CeNumber Int
	Select
		@CeNumber = [Number]
	From
		HEntry
	where
		Guid = @EntryGuid2
		
	if isNull(@CeNumber,0) = 0
	Set @CeNumber = (Select isNull(MAX(Number),0) + 1 From HEntry)

	Delete
		HEntry
	where
		Guid = @EntryGuid2
		
	if Not exists(
		Select Top 1 Guid 
		from 
			[Lawsuit] 
		where 
			Guid = @Guid 
			and maintenanceEntry = 1 
			and MaintenanceRent <> 0
				) 
	return				

	Declare @CostGuid uniqueidentifier
	Select
		@CostGuid = [UnitCostGuid]
	from
		[vwAllContract] C
		inner join Lawsuit L on L.ContractGuid = C.Guid
	where
		L.Guid = @Guid

	Insert Into [HEntry]
	([Guid],[SecLvl],[Number],[Date], [CurrencyGuid], [CurrencyVal], [Note], [ParentKind], [BranchGuid], [IsPosted])
	Select
		@EntryGuid2,
		[SecLvl],
		@CeNumber,
		[MaintenanceRentDate],
		[CurrencyGuid],
		[CurrencyVal],
		[Note],
		157,
		Null,
		1
	From
		[Lawsuit]
	where
		Guid = @Guid

	Declare @DetailNum Int
	Set @DetailNum = 0


	Set @DetailNum = @DetailNum + 1
	Insert into [DEntry]
 	([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
	Select
		@EntryGuid2,
		@DetailNum,
		[MaintenanceDebitAccountGuid],
		A.MaintenanceRent,
		0,
		A.CurrencyGUID,
		A.CurrencyVal,
		@CostGuid as [debitCostGuid],
		[MaintenanceCreditAccountGuid],
		A.maintenanceNote
	From
		[Lawsuit] A
	where
		A.[Guid] = @Guid
		and MaintenanceEntry = 1
		and MaintenanceRent <> 0
				
	Set @DetailNum = @DetailNum + 1
	Insert into [DEntry]
 	([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
	Select
		@EntryGuid2,
		@DetailNum,
		[MaintenanceCreditAccountGuid],
		0,
		A.MaintenanceRent,
		A.CurrencyGUID,
		A.CurrencyVal,
		@CostGuid as [debitCostGuid],
		[MaintenanceDebitAccountGuid],
		A.maintenanceNote
	From
		[Lawsuit] A
	where
		A.[Guid] = @Guid
		and MaintenanceEntry = 1
		and MaintenanceRent <> 0

	update [HEntry] Set isPosted = 1 where Guid = @Guid

	Select * from [HEntry] where Guid = @Guid
	Select * from [DEntry] where parentGuid = @Guid
			

GO
/****** Object:  StoredProcedure [dbo].[PrcCreateLawsuitEntry3]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcCreateLawsuitEntry3]
(
	@Guid uniqueidentifier = 'C5D0C5DC-964A-4596-AE42-761427E00350'
)
  
as
	Set nocount on
	Declare @EntryGuid3 uniqueidentifier
	
	Select
		@EntryGuid3 = [EntryGuid3]
	From
		[Lawsuit]
	where
		Guid = @Guid
			
	if @EntryGuid3 is Null
	begin
		Set @EntryGuid3 = NEWID()
		update [Lawsuit] Set [EntryGuid3] = @EntryGuid3 where Guid = @Guid
	end
	
	Declare @CeNumber Int
	Select
		@CeNumber = [Number]
	From
		HEntry
	where
		Guid = @EntryGuid3
		
	if isNull(@CeNumber,0) = 0
	Set @CeNumber = (Select isNull(MAX(Number),0) + 1 From HEntry)

	Delete
		HEntry
	where
		Guid = @EntryGuid3
		
	if Not exists(
		Select Top 1 Guid 
		from 
			[Lawsuit] 
		where 
			Guid = @Guid
			and FurnitureEntry = 1 
			and Furniture <> 0
			)
	return				

	Declare @CostGuid uniqueidentifier
	Select
		@CostGuid = [UnitCostGuid]
	from
		[vwAllContract] C
		inner join Lawsuit L on L.ContractGuid = C.Guid
	where
		L.Guid = @Guid
	

	Insert Into [HEntry]
	([Guid],[SecLvl],[Number],[Date], [CurrencyGuid], [CurrencyVal], [Note], [ParentKind], [BranchGuid], [IsPosted])
	Select
		@EntryGuid3,
		[SecLvl],
		@CeNumber,
		[FurnitureDate],
		[CurrencyGuid],
		[CurrencyVal],
		[Note],
		157,
		Null,
		1
	From
		[Lawsuit]
	where
		Guid = @Guid

	Declare @DetailNum Int
	Set @DetailNum = 0


	Set @DetailNum = @DetailNum + 1
	Insert into [DEntry]
 	([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
	Select
		@EntryGuid3,
		@DetailNum,
		[FurnitureDebitAccountGuid],
		A.Furniture,
		0,
		A.CurrencyGUID,
		A.CurrencyVal,
		@CostGuid as [debitCostGuid],
		[FurnitureCreditAccountGuid],
		A.FurnitureNote
	From
		[Lawsuit] A
	where
		A.[Guid] = @Guid
		and FurnitureEntry = 1
		and Furniture <> 0
				
	Set @DetailNum = @DetailNum + 1
	Insert into [DEntry]
 	([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
	Select
		@EntryGuid3,
		@DetailNum,
		[FurnitureCreditAccountGuid],
		0,
		A.Furniture,
		A.CurrencyGUID,
		A.CurrencyVal,
		@CostGuid as [debitCostGuid],
		[FurnitureDebitAccountGuid],
		A.FurnitureNote
	From
		[Lawsuit] A
	where
		A.[Guid] = @Guid
		and FurnitureEntry = 1
		and Furniture <> 0

	update [HEntry] Set isPosted = 1 where Guid = @Guid

	Select * from [HEntry] where Guid = @Guid
	Select * from [DEntry] where parentGuid = @Guid
			

GO
/****** Object:  StoredProcedure [dbo].[PrcCreateLawsuitExpenseEntry]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcCreateLawsuitExpenseEntry]
(
	@Guid uniqueidentifier = '{F3F52B9E-7312-49DB-B0F0-4EEA9EFDF8BF}',
	@MoveCostWithDebit bit = 1, 
	@MoveCostWithCredit bit = 1
)
  
as
	set nocount on
	Declare @CeNumber Int
	Select
		@CeNumber = Number
	From
		HEntry
	where
		Guid = @Guid
		
	if isNull(@CeNumber,0) = 0
	Set @CeNumber = (Select isNull(MAX(Number),0) + 1 From HEntry)

	Delete
		HEntry
	where
		Guid = @Guid
		
	if Not exists(Select Top 1 Guid from [LawsuitExpense] where Guid = @Guid and CreateEntry = 1) return				

	Insert Into [HEntry]
	([Guid],[SecLvl],[Number],[Date], [CurrencyGuid], [CurrencyVal], [Note], [ParentKind], [BranchGuid], [IsPosted])
	Select
		@Guid,
		[SecLvl],
		@CeNumber,
		[EntryDate],
		[CurrencyGuid],
		[CurrencyVal],
		[Note],
		154,
		Null,
		1
	From
		[LawsuitExpense]
	where
		Guid = @Guid

	Declare @DetailNum Int
	Set @DetailNum = 0

	Insert into [DEntry]
 	([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
	Select
		@Guid,
		@DetailNum,
		[DebitAccountGuid],
		A.[ReceiptValue],
		0,
		A.CurrencyGUID,
		A.CurrencyVal,
		Case when 	@MoveCostWithDebit = 1 then [debitCostGuid] end,
		[CreditAccountGuid],
		A.[DebitNote]
	From
		[LawsuitExpense] A
	where
		A.[Guid] = @Guid
				
	Set @DetailNum = @DetailNum + 1
	
	Insert into [DEntry]
 	([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
	Select
		@Guid,
		@DetailNum,
		[CreditAccountGuid],
		0,
		A.[ReceiptValue],
		A.CurrencyGUID,
		A.CurrencyVal,
		Case when @MoveCostWithCredit = 1 then [CreditCostGuid] end,
		[DebitAccountGuid],
		A.[CreditNote]
	From
		[LawsuitExpense] A
	where
		A.[Guid] = @Guid

--	Select * from [HEntry] where Guid = @Guid
--	Select * from [DEntry] where parentGuid = @Guid
			

GO
/****** Object:  StoredProcedure [dbo].[PrcCreateMaintenanceContractEntry]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcCreateMaintenanceContractEntry]
(
	@ContractGuid uniqueidentifier = '40CE1320-4AA3-4E22-A225-11FD91C0D15B'
)
  
AS
	Set NoCount on 
	Declare 
			@EnNum int,
			@EnGuid [uniqueidentifier]

	-- ÇáÞíÏ ÇáÓÇÈÞ
	Select 
		@EnNum = isnull([Number],0)
		,@EnGuid = isnull([Guid],0x0)
	From
		[HEntry]
	where
		[Guid] = @ContractGuid

	if isnull(@EnNum,0) = 0
	begin	
		Select @EnNum = IsNull(Max([Number]),0) + 1 from [HEntry]
	END
	
	if isnull(@EnGuid,0x0) = 0x0
	Set @EnGuid = @ContractGuid

	if Exists(Select Number From HEntry where Number = @EnNum and [Guid] <> @EnGuid)
	Select @EnNum = IsNull(Max([Number]),0) + 1 from [HEntry]

	-- ÍÐÝ ÇáÞíæÏ ÇáÞÏíãÉ
	Delete
		[HEntry]
	where
		[Guid] = @EnGuid

		
	--return
	DECLARE 
		@EntryDate Datetime,
		@CreateEntry bit,

		@MoveCostWithExpenceDebit bit,
		@MoveCostWithExpenceCredit bit,

		@MoveCostWithDiscountDebit bit,
		@MoveCostWithDiscountCredit bit,

		@SecLvl int,
		@CurrencyGuid uniqueidentifier,
		@CurrencyVal Float,
		@TypeName varchar(256),
		@ContractNumber int,
		@AutoPostedEntry bit,
		@Mark bit,
		@EntryNote Varchar(255),
		@DetailNum Int,

		@Value fLoat,

		@CostGuid uniqueidentifier,
		@CustAccountGuid uniqueidentifier,
		@IncomeAccountGuid uniqueidentifier,

		@Fromdate datetime,
		@Todate datetime,

		@OtherFeeAccountGuid uniqueidentifier,
		@OtherFee Float,

		@DiscountValue fLoat,
		@DiscountAccountGuid uniqueidentifier,
		@BranchGuid uniqueidentifier
		
	
	SELECT	TOP 1
		@EntryDate = Case when T.EntryDate = 0 then C.FromDate else C.EditDate end,
		@AutoPostedEntry = T.AutoPostedEntry,
		@CreateEntry = T.CreateEntry,
		@MoveCostWithExpenceDebit = T.MoveCostWithExpenceDebit,
		@MoveCostWithExpenceCredit = T.MoveCostWithExpenceCredit,

		@MoveCostWithDiscountDebit = T.MoveCostWithDiscountDebit,
		@MoveCostWithDiscountCredit = T.MoveCostWithDiscountCredit,
		
		@SecLvl = C.SecLvl,
		@CurrencyGuid = C.CurrencyGuid,
		@CurrencyVal = C.CurrencyVal,
		@TypeName = T.Name,
		@ContractNumber = C.Number ,

		@AutoPostedEntry = T.AutoPostedEntry,
		@Mark = C.Mark,

		@CostGuid = C.CostGuid,
		@CustAccountGuid = C.CustAccountGuid,
		@IncomeAccountGuid = C.IncomeAccountGuid,
		
		@Fromdate = C.FromDate,
		@Todate = C.ToDate,

		@OtherFee = C.OtherFee,
		@OtherFeeAccountGuid = C.OtherFeeAccountGUID,

		@Value = C.Value,
		@DiscountValue = C.DiscountValue,
		@DiscountAccountGuid = C.DiscountAccountGuid,
		@BranchGuid = C.BranchGuid,
		@EntryNote = [T].[ContractNote]
	FROM
		[vwMaintenanceContract]  C
		inner join [vwmaintenanceContractType] T on T.Guid = C.TypeGuid
	WHERE
		C.Guid = @ContractGuid

	Select 
		@EntryNote  =				REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
									REPLACE(REPLACE(REPLACE(REPLACE(--(REPLACE(--REPLACE(
									@EntryNote, '[N]', TypeNameAr),
									'[M]', TypeNameLtn),
									'[A]', CustArName),
									'[B]', CustltnName),
									--'[D]', BuildingArName),
									--'[E]', BuildingLtnName),
									'[F]', dbo.fndate(EditDate)),
									'[G]', dbo.fndate(Fromdate)),
									'[H]', dbo.fndate(Todate)),
									'[K]', ContractNo),
									'[L]', Cast(Value as varchar(50)))
									
	from 
		[vwMaintenanceContract]
	where
		Guid = @ContractGuid
	
	Insert Into [HEntry]
	([Guid],[SecLvl],[Number],[Date], [CurrencyGuid], [CurrencyVal], [Note], [ParentKind], [BranchGuid], [IsPosted], Mark)
	Select
		@EnGuid,
		@SecLvl,
		@EnNum,
		@EntryDate,
		@CurrencyGuid,
		@CurrencyVal,
		@EntryNote as [Note],
		27 as [ParentKind], 
		@BranchGuid as [BranchGuid], 
		@AutoPostedEntry as [IsPosted],
		@Mark

	--ÇáãÕÇÑíÝ				
	if isNull(@Value,0) <> 0
	begin
		Set @DetailNum = 0
		Insert into [DEntry]
 		([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
		Select
			@EnGuid,
			@DetailNum,
			@CustAccountGuid,
			@Value as Debit,
			0 as Credit,
			@CurrencyGuid,
			@CurrencyVal,
			Case when @MoveCostWithExpenceDebit = 1 then @CostGuid end,
			@IncomeAccountGuid,
			@EntryNote

		Set @DetailNum = 1
		Insert into [DEntry]
 		([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
		Select
			@EnGuid,
			@DetailNum,
			@IncomeAccountGuid,
			0 as Debit,
			@Value as Credit,
			@CurrencyGuid,
			@CurrencyVal,
			Case when @MoveCostWithExpenceCredit = 1 then @CostGuid end,
			@CustAccountGuid,
			@EntryNote
	end

	--ÇáÍÓã
	if isNull(@DiscountValue,0) <> 0
	begin
		Set @DetailNum = 3
		Insert into [DEntry]
 		([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
		Select
			@EnGuid,
			@DetailNum,
			@DiscountAccountGuid,
			@DiscountValue as Debit,
			0 as Credit,
			@CurrencyGuid,
			@CurrencyVal,
			Case when @MoveCostWithDiscountDebit = 1 then @CostGuid end,
			@CustAccountGuid,
			@EntryNote

		Set @DetailNum = 4
		Insert into [DEntry]
 		([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
		Select
			@EnGuid,
			@DetailNum,
			@CustAccountGuid,
			0 as Debit,
			@DiscountValue as Credit,
			@CurrencyGuid,
			@CurrencyVal,
			Case when @MoveCostWithDiscountCredit = 1 then @CostGuid end,
			@DiscountAccountGuid,
			@EntryNote
	end
	exec PrcDoDistributiveEntry @EnGuid
	
	if @AutoPostedEntry = 1
	Update [Hentry] Set IsPosted = 1 where Guid = @EnGuid
	
	--Select * from [Hentry] where Guid = @EnGuid 
	--Select * from [Dentry] where parentGuid = @EnGuid order by number


GO
/****** Object:  StoredProcedure [dbo].[PrcCreateMaintenanceOrderEntry]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create Procedure [dbo].[PrcCreateMaintenanceOrderEntry]
(
	@Guid uniqueidentifier = 0x0
)
as
	Declare @CeNumber Int
	Select
		@CeNumber = Number
	From
		HEntry
	where
		Guid = @Guid
		
	if isNull(@CeNumber,0) = 0
	Set @CeNumber = (Select isNull(MAX(Number),0) + 1 From HEntry)

	Delete
		HEntry
	where
		Guid = @Guid
		
	if not exists(Select Top 1 * From MaintenanceOrder where	Guid = @Guid and [CreateEntry] = 1)
	return

	Insert Into [HEntry]
	([Guid],[SecLvl],[Number],[Date], [CurrencyGuid], [CurrencyVal], [Note], [ParentKind], [BranchGuid], [IsPosted])
	Select
		@Guid,
		[SecLvl],
		@CeNumber,
		[EntryDate],
		[EntryCurrencyGuid],
		[EntryCurrencyVal],
		[EntryNote],
		156,
		Null,
		1
	From
		[MaintenanceOrder]
	where
		Guid = @Guid

	Declare @DetailNum Int
	Set @DetailNum = 0

	Set @DetailNum = @DetailNum + 1
	Insert into [DEntry]
 	([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
	Select
		@Guid,
		@DetailNum,
		[DebitAccountGuid],
		A.EntryValue,
		0,
		A.EntryCurrencyGUID,
		A.EntryCurrencyVal,
		[debitCostGuid],
		[CreditAccountGuid],
		A.[EntryNote]
	From
		[MaintenanceOrder] A
	where
		A.[Guid] = @Guid
				
	Set @DetailNum = @DetailNum + 1
	Insert into [DEntry]
 	([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
	Select
		@Guid,
		@DetailNum,
		[CreditAccountGuid],
		0,
		A.EntryValue,
		A.EntryCurrencyGUID,
		A.EntryCurrencyVal,
		[CreditCostGuid],
		[DebitAccountGuid],
		A.[EntryNote]
	From
		[MaintenanceOrder] A
	where
		A.[Guid] = @Guid

	Select * from [HEntry] where Guid = @Guid
	Select * from [DEntry] where parentGuid = @Guid

GO
/****** Object:  StoredProcedure [dbo].[PrcCreateoldYearView]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[PrcCreateoldYearView]
  
as
	Declare @SQL Varchar(8000)
	Set @Sql = '
	Create view [vwOldYearEntry]
	as
	Select
		cast( DB_NAME() as Varchar(256) ) as DBNAME,
		[H].[Guid] as [H_Guid],
		[H].[Number] as [H_Number],
		[H].[SecLvl] as [H_SecLvl],
		[H].[Date] as [H_Date]  ,
		[H].[Note] COLLATE SQL_Latin1_General_CP1_CI_AS as [H_Note],
		[H].[ParentKind] as [H_ParentKind],
		[H].[BranchGuid] as [H_BranchGuid],
		[H].[IsPosted] as [H_IsPosted],
		Case when (dbo.FnGetLangauge(@@spid) = 1) then ''Entry'' else ''ÓäÏ ÇáÞíÏ'' end as [H_Name],
		[D].[Guid]  as [D_Guid],
		[D].[ParentGuid] as [D_ParentGuid],
		[D].[AcGuid] as [D_AcGuid] ,
		[D].[Debit] as [D_Debit] ,
		[D].[Credit] as [D_Credit] ,
		[D].[CurrencyGuid] as [D_CurrencyGuid] ,
		[D].[CurrencyVal] as [D_CurrencyVal],
		[D].[ObverseAcGuid] as [D_ObverseAcGuid]  ,
		[D].[CostGuid] as [D_CostGuid] ,
		[D].[Note] COLLATE SQL_Latin1_General_CP1_CI_AS as [D_Note],
		[D].[IsVisible] as [D_IsVisible],
		H.Mark,
		0 as [IsOldEntry]
	From
		[vbHEntry] H
		inner join [DEntry] D on H.Guid = D.ParentGuid'
		
	Declare @DbName nVarchar(256) , @BeginEntryNo nVarchar(256)
	DECLARE cursor_Name CURSOR FAST_FORWARD FOR 
	SELECT 
		y.dbName, y.[BeginEntryNo]
	FROM 
		[OldYearConfig] Y
		inner join sys.databases Sd on Sd.[Name] COLLATE SQL_Latin1_General_CP1_CI_AS = Y.[dbName] COLLATE SQL_Latin1_General_CP1_CI_AS
	Order By 
		y.Number
	
	OPEN cursor_Name
	FETCH NEXT FROM cursor_Name INTO @DbName, @BeginEntryNo
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
	  
	Set @Sql = @Sql + '
	union all
	Select
		'''+@DbName+''',
		[H].[Guid] as [H_Guid],
		[H].[Number] as [H_Number],
		[H].[SecLvl] as [H_SecLvl],
		[H].[Date] as [H_Date]  ,
		[H].[Note] COLLATE SQL_Latin1_General_CP1_CI_AS as [H_Note],
		[H].[ParentKind] as [H_ParentKind],
		[H].[BranchGuid] as [H_BranchGuid],
		[H].[IsPosted] as [H_IsPosted],
		Case when (dbo.FnGetLangauge(@@spid) = 1) then ''Entry'' else ''ÓäÏ ÇáÞíÏ'' end as [H_Name],
		[D].[Guid]  as [D_Guid],
		[D].[ParentGuid] as [D_ParentGuid],
		[D].[AcGuid] as [D_AcGuid] ,
		[D].[Debit] as [D_Debit] ,
		[D].[Credit] as [D_Credit] ,
		[D].[CurrencyGuid] as [D_CurrencyGuid] ,
		[D].[CurrencyVal] as [D_CurrencyVal],
		[D].[ObverseAcGuid] as [D_ObverseAcGuid]  ,
		[D].[CostGuid] as [D_CostGuid] ,
		[D].[Note] COLLATE SQL_Latin1_General_CP1_CI_AS as [D_Note],
		[D].[IsVisible] as [D_IsVisible],
		H.Mark,
		1 as [IdOldEntry]
	From
		'+@DbName+'..[vbHEntry] H
		inner join '+@DbName+'..[DEntry] D on H.Guid = D.ParentGuid
		inner join sys.databases S on UPPER(S.Name) = UPPER('''+@DbName+''')
	where
		H.Number Not in (SELECT str from dbo.FnStrToTable ('''+@BeginEntryNo+'''))'
	

	  FETCH NEXT FROM cursor_Name INTO @DbName, @BeginEntryNo
	
	END
	
	CLOSE cursor_Name
	DEALLOCATE cursor_Name
	print @sql
	exec (@sql)

GO
/****** Object:  StoredProcedure [dbo].[PrcCreateOwnerUnionFee]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcCreateOwnerUnionFee]
(
	@Guid uniqueidentifier = '9E69DFC9-6079-4EE1-AB9E-2EC0757EB325'
)
  
AS
	Set NoCount on 
	Declare 
			@EnNum int

	-- ÇáÞíÏ ÇáÓÇÈÞ
	Select 
		@EnNum = isnull([Number],0)
	From
		[Hentry]
	where
		[Guid] = @Guid
	
	--Select @EnNum
	if isnull(@EnNum,0) = 0
	begin	
		Select @EnNum = IsNull(Max([Number]),0) + 1 from [HEntry]
	END

	--return
	-- ÍÐÝ ÇáÞíæÏ ÇáÞÏíãÉ
	Delete 
		HEntry 
	where
		[Guid] = @Guid

	Insert Into [HEntry]
	([Guid],[SecLvl],[Mark],[Number],[Date], [CurrencyGuid], [CurrencyVal], [Note], [ParentKind], [BranchGuid], [IsPosted])
	Select
		Guid,
		[SecLvl],
		0 as Mark,
		@EnNum,
		[Date],
		CurrencyGuid,
		CurrencyVal,
		Note,
		160,
		Null,
		1 as AutoPostedEntry
	from
		[OwnerUnionFee] 
	where
		Guid = @Guid
		
	Declare @DetailNum Int
	Set @DetailNum = 0

	Insert into [DEntry]
	([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
	Select
		D.[ParentGuid],
		D.[Number],
		D.[AccountGuid],
		D.[Fee],
		0 as [Credit],
		P.[CurrencyGuid],P.[CurrencyVal],
		Case when CkMoveDebitCost = 1 then D.[CostGuid] end,
		P.[AccountGuid] ,
		D.[Note]
	From
		[OwnerUnionFee] P
		inner join [OwnerUnionFeeDetail] D on D.parentGuid = p.Guid
	where
		P.Guid = @Guid
		and (D.[AccountGuid] is Not Null)
		and (D.[Fee] <> 0)

	Insert into [DEntry]
	([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
	Select
		D.[ParentGuid],
		D.[Number],
		P.[AccountGuid],
		0 as Debit,
		D.[Fee] as [Credit],
		P.[CurrencyGuid],P.[CurrencyVal],
		Case when CkMoveCreditCost = 1 then D.[CostGuid] end,
		D.[AccountGuid] ,
		D.[Note]
	From
		[OwnerUnionFee] P
		inner join [OwnerUnionFeeDetail] D on D.parentGuid = p.Guid
	where
		P.Guid = @Guid
		and (D.[AccountGuid] is Not Null)
		and (D.[Fee] <> 0)

	exec PrcDoDistributiveEntry @Guid
		
		
	--Select * from Dentry where ParentGuid = @EnGuid
	Update [Hentry] Set IsPosted = 1 where Guid = @Guid


GO
/****** Object:  StoredProcedure [dbo].[PrcCreatePricingEntry]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create Procedure [dbo].[PrcCreatePricingEntry]
(
	@Guid uniqueidentifier = 0x0
)
as
	Declare @CeNumber Int
	Select
		@CeNumber = Number
	From
		HEntry
	where
		Guid = @Guid
		
	if isNull(@CeNumber,0) = 0
	Set @CeNumber = (Select isNull(MAX(Number),0) + 1 From HEntry)

	Delete
		HEntry
	where
		Guid = @Guid
		
	if not exists(Select Top 1 * From Pricing where	Guid = @Guid and [CreateEntry] = 1)
	return

	Insert Into [HEntry]
	([Guid],[SecLvl],[Number],[Date], [CurrencyGuid], [CurrencyVal], [Note], [ParentKind], [BranchGuid], [IsPosted])
	Select
		@Guid,
		[SecLvl],
		@CeNumber,
		[EntryDate],
		[EntryCurrencyGuid],
		[EntryCurrencyVal],
		[EntryNote],
		155,
		Null,
		1
	From
		[Pricing]
	where
		Guid = @Guid

	Declare @DetailNum Int
	Set @DetailNum = 0

	Set @DetailNum = @DetailNum + 1
	Insert into [DEntry]
 	([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
	Select
		@Guid,
		@DetailNum,
		[DebitAccountGuid],
		A.EntryValue,
		0,
		A.EntryCurrencyGUID,
		A.EntryCurrencyVal,
		[debitCostGuid],
		[CreditAccountGuid],
		A.[EntryNote]
	From
		[Pricing] A
	where
		A.[Guid] = @Guid
				
	Set @DetailNum = @DetailNum + 1
	Insert into [DEntry]
 	([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
	Select
		@Guid,
		@DetailNum,
		[CreditAccountGuid],
		0,
		A.EntryValue,
		A.EntryCurrencyGUID,
		A.EntryCurrencyVal,
		[CreditCostGuid],
		[DebitAccountGuid],
		A.[EntryNote]
	From
		[Pricing] A
	where
		A.[Guid] = @Guid

	Select * from [HEntry] where Guid = @Guid
	Select * from [DEntry] where parentGuid = @Guid

GO
/****** Object:  StoredProcedure [dbo].[PrcCreateServicesContractEntry]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcCreateServicesContractEntry]
(
	@ContractGuid uniqueidentifier = '40CE1320-4AA3-4E22-A225-11FD91C0D15B'
)
  
AS
	Set NoCount on 
	Declare 
			@EnNum int,
			@EnGuid [uniqueidentifier]

	-- ÇáÞíÏ ÇáÓÇÈÞ
	Select 
		@EnNum = isnull([Number],0)
		,@EnGuid = isnull([Guid],0x0)
	From
		[HEntry]
	where
		[Guid] = @ContractGuid

	if isnull(@EnNum,0) = 0
	begin	
		Select @EnNum = IsNull(Max([Number]),0) + 1 from [HEntry]
	END
	
	if isnull(@EnGuid,0x0) = 0x0
	Set @EnGuid = @ContractGuid

	if Exists(Select Number From HEntry where Number = @EnNum and [Guid] <> @EnGuid)
	Select @EnNum = IsNull(Max([Number]),0) + 1 from [HEntry]

	-- ÍÐÝ ÇáÞíæÏ ÇáÞÏíãÉ
	Delete
		[HEntry]
	where
		[Guid] = @EnGuid

		
	--return
	DECLARE 
		@EntryDate Datetime,
		@CreateEntry bit,

		@MoveCostWithExpenceDebit bit,
		@MoveCostWithExpenceCredit bit,

		@MoveCostWithDiscountDebit bit,
		@MoveCostWithDiscountCredit bit,

		@SecLvl int,
		@CurrencyGuid uniqueidentifier,
		@CurrencyVal Float,
		@TypeName varchar(256),
		@ContractNumber int,
		@AutoPostedEntry bit,
		@Mark bit,
		@EntryNote Varchar(255),
		@DetailNum Int,

		@Value fLoat,

		@CostGuid uniqueidentifier,
		@CustAccountGuid uniqueidentifier,
		@ExpenceAccountGuid uniqueidentifier,

		@Fromdate datetime,
		@Todate datetime,

		@OtherFeeAccountGuid uniqueidentifier,
		@OtherFee Float,

		@DiscountValue fLoat,
		@DiscountAccountGuid uniqueidentifier,
		@BranchGuid uniqueidentifier
		
	
	SELECT	TOP 1
		@EntryDate = Case when T.EntryDate = 0 then C.FromDate else C.EditDate end,
		@AutoPostedEntry = T.AutoPostedEntry,
		@CreateEntry = T.CreateEntry,
		@MoveCostWithExpenceDebit = T.MoveCostWithExpenceDebit,
		@MoveCostWithExpenceCredit = T.MoveCostWithExpenceCredit,

		@MoveCostWithDiscountDebit = T.MoveCostWithDiscountDebit,
		@MoveCostWithDiscountCredit = T.MoveCostWithDiscountCredit,
		
		@SecLvl = C.SecLvl,
		@CurrencyGuid = C.CurrencyGuid,
		@CurrencyVal = C.CurrencyVal,
		@TypeName = T.Name,
		@ContractNumber = C.Number ,

		@AutoPostedEntry = T.AutoPostedEntry,
		@Mark = C.Mark,

		@CostGuid = C.CostGuid,
		@CustAccountGuid = C.CustAccountGuid,
		@ExpenceAccountGuid = C.ExpenceAccountGuid,
		
		@Fromdate = C.FromDate,
		@Todate = C.ToDate,

		@OtherFee = C.OtherFee,
		@OtherFeeAccountGuid = C.OtherFeeAccountGUID,

		@Value = C.Value,
		@DiscountValue = C.DiscountValue,
		@DiscountAccountGuid = C.DiscountAccountGuid,
		@BranchGuid = C.BranchGuid,
		@EntryNote = [T].[ContractNote]
	FROM
		[vwServicesContract]  C
		inner join [vwServicesContractType] T on T.Guid = C.TypeGuid
	WHERE
		C.Guid = @ContractGuid

	Select 
		@EntryNote  =				REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
									REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
									@EntryNote, '[N]', TypeNameAr),
									'[M]', TypeNameLtn),
									'[A]', CustArName),
									'[B]', CustltnName),
									'[D]', BuildingArName),
									'[E]', BuildingLtnName),
									'[F]', dbo.fndate(EditDate)),
									'[G]', dbo.fndate(Fromdate)),
									'[H]', dbo.fndate(Todate)),
									'[K]', ContractNo),
									'[L]', Cast(Value as varchar(50)))
									
	from 
		[vwServicesContract]
	where
		Guid = @ContractGuid
	
	Insert Into [HEntry]
	([Guid],[SecLvl],[Number],[Date], [CurrencyGuid], [CurrencyVal], [Note], [ParentKind], [BranchGuid], [IsPosted], Mark)
	Select
		@EnGuid,
		@SecLvl,
		@EnNum,
		@EntryDate,
		@CurrencyGuid,
		@CurrencyVal,
		@EntryNote as [Note],
		26 as [ParentKind], 
		@BranchGuid as [BranchGuid], 
		@AutoPostedEntry as [IsPosted],
		@Mark

	--ÇáãÕÇÑíÝ				
	if isNull(@Value,0) <> 0
	begin
		Set @DetailNum = 0
		Insert into [DEntry]
 		([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
		Select
			@EnGuid,
			@DetailNum,
			@ExpenceAccountGuid,
			@Value as Debit,
			0 as Credit,
			@CurrencyGuid,
			@CurrencyVal,
			Case when @MoveCostWithExpenceDebit = 1 then @CostGuid end,
			@CustAccountGuid,
			@EntryNote

		Set @DetailNum = 1
		Insert into [DEntry]
 		([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
		Select
			@EnGuid,
			@DetailNum,
			@CustAccountGuid,
			0 as Debit,
			@Value as Credit,
			@CurrencyGuid,
			@CurrencyVal,
			Case when @MoveCostWithExpenceCredit = 1 then @CostGuid end,
			@ExpenceAccountGuid,
			@EntryNote
	end

	--ÇáÍÓã
	if isNull(@DiscountValue,0) <> 0
	begin
		Set @DetailNum = 3
		Insert into [DEntry]
 		([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
		Select
			@EnGuid,
			@DetailNum,
			@CustAccountGuid,
			@DiscountValue as Debit,
			0 as Credit,
			@CurrencyGuid,
			@CurrencyVal,
			Case when @MoveCostWithDiscountDebit = 1 then @CostGuid end,
			@DiscountAccountGuid,
			@EntryNote

		Set @DetailNum = 4
		Insert into [DEntry]
 		([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
		Select
			@EnGuid,
			@DetailNum,
			@DiscountAccountGuid,
			0 as Debit,
			@DiscountValue as Credit,
			@CurrencyGuid,
			@CurrencyVal,
			Case when @MoveCostWithDiscountCredit = 1 then @CostGuid end,
			@CustAccountGuid,
			@EntryNote
	end
	exec PrcDoDistributiveEntry @EnGuid
	
	if @AutoPostedEntry = 1
	Update [Hentry] Set IsPosted = 1 where Guid = @EnGuid
	
	--Select * from [Hentry] where Guid = @EnGuid 
	--Select * from [Dentry] where parentGuid = @EnGuid order by number


GO
/****** Object:  StoredProcedure [dbo].[PrcCreateViewvb]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[PrcCreateViewvb]
(
	@TableName Varchar(256) = 'Realty_Users'
)
  
as
	Declare @S varchar(800)
	Set @S = 'vb'+@TableName
	exec DropObject @S

	Set @S = 'exec PrcCreateIndex '''+@TableName+''' , ''Seclvl'', 0'
	Print @S
	Exec (@S)


	Set @S = '
	Create View [vb'+@TableName+']
	WITH ENCRYPTION 
	as
		Select 
			[T].*
		From
			['+@TableName+'] [T]
			inner join [CurrentUsers] [U] on ([u].[Seclvl] >= Isnull([T].[SecLvl],0)  or [u].[Admin] = 1) and [u].[spid] = @@Spid
'
	Print @S
	
	Exec (@S)
	

GO
/****** Object:  StoredProcedure [dbo].[PrcCreatevwAllContractTmp]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create Procedure [dbo].[PrcCreatevwAllContractTmp]
as
	if dbo.fnObjectExists('##vwAllContract') = 0
	Select * into ##vwAllContract from vwAllContract

GO
/****** Object:  StoredProcedure [dbo].[PrcCrossTrailBalanceCost]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[PrcCrossTrailBalanceCost]
(
	@AccountGuid [uniqueidentifier]= 0x0
	,@BranchGuid uniqueidentifier = 0x0
	,@CostGuid [uniqueidentifier]= 0x0

	,@Level int = 0
	,@ShowEmptyCost Bit = 1

	,@CurrencyGuid [uniqueidentifier] = 0x0
	,@CurrencyVal Float = 1
	,@IsPosted Bit = 1
	,@IsNotPosted Bit = 1
	
	,@CostCode bit = 0
	,@CostName bit = 0

	,@ActiveDate bit = 0
	,@Date1 DateTime = '4/1/2008'
	,@Date2 DateTime = '12/30/2017'
)
  
as
	Set Nocount on
		
	if @CurrencyVal = 0
	Set @CurrencyVal = 1

	if (@CostCode = 0) and (@CostName = 0)
	Set @CostCode = 1

	Declare @Debit_Str varchar(255)
	Set @Debit_Str = dbo.SC('ãÏíä')

	Declare @Credit_Str varchar(255)
	Set @Credit_Str = dbo.SC('ÏÇÆä')

	Declare @Balance_Str varchar(255)
	Set @Balance_Str = dbo.SC('ÇáÑÕíÏ')

	Declare @Total_Balance_Str varchar(255)
	Set @Total_Balance_Str = dbo.SC('ÇáÑÕíÏ ÇáÅÌãÇáí')

	Select * into #fnGetAccountList from [dbo].[fnGetAccountList](@AccountGuid)
	Select * into #fnGetCostList from [dbo].[fnGetCostList](@CostGuid)
	
	--Select * from #fnGetCostList

	Declare @CodeNameState int
	if @CostCode = 1 Set @CodeNameState = 1
	if @CostName = 1 Set @CodeNameState = 2
	if @CostCode = 1 and @CostName = 1 Set @CodeNameState = 3
	-- ßÇãá ãÑÇßÒ ÇáßáÝ
	Select 
		Case
			when @CodeNameState = 1 then [Co2].[Code]
			when @CodeNameState = 2 then [Co2].[Name]
			when @CodeNameState = 3 then [Co2].[Code]+'-'+[Co2].[Name]
		end  as [CostName]
		,[Co].[Level]
		,[Co].[Path]
		,[Co2].[Guid]
		,[Co2].[ParentGuid]
		,Isnull([SCo].[CoNSons],0) as [CoNSons]
		into #Co
	From
		[dbo].[#fnGetCostList] [Co] 
		inner join [vwCost] [Co2] on [Co2].[Guid] = [Co].[Guid]
		left join (Select 
						Count(Number)as [CoNSons] 
						,[ParentGuid] 
					From 
						[Cost] [SCo] 
					Group By
						[ParentGuid]					
				)[SCo] on [SCo].[ParentGuid] = [Co2].[Guid]

	-- ßÇãá ÇáÍÓÇÈÇÊ
	
	Select 
		[Ac2].[Code] as [AccountCode]
		,[Ac2].[Name] as [AccountName]
		,[Ac].[Level]
		,[Ac].[Path]
		,[Ac2].[Guid]
		,[Ac2].[ParentGuid]
		,Isnull([SAc].[AcNSons],0) as [AcNSons]
		into #Ac
	From
		[dbo].[#fnGetAccountList] [Ac] 
		inner join [vwAccount] [Ac2] on [Ac2].[Guid] = [Ac].[Guid]
		left join (Select 
						Count(Number)as [AcNSons] 
						,[ParentGuid] 
					From 
						[Account] [SAc] 
					Group By
						[ParentGuid]					
				)[SAc] on [SAc].[ParentGuid] = [Ac2].[Guid]
	where
		[Type] = 0

--	Select * from #Ac Order by [Path]
	--
	
	Create Table ##Entry
	(
		[CostName] varchar(255)
		,[AccountCode] varchar(255)
		,[AccountName] varchar(255)
		,[Debit] Float
		,[Credit] Float
		,[CostGuid] uniqueidentifier
		,[CostParentGuid] uniqueidentifier
		,[Level] int
		,[AccountGuid] uniqueidentifier
		)

	-- ÍÑßÇÊ ÇáÞíæÏ
	insert into ##Entry
	Select --Top 50
		[Co].[CostName] as [CostName]
		,[Ac].[AccountCode]	
		,[Ac].[AccountName]	
		,Sum([En].[Debit]*
			Case when [En].[CurrencyGuid] = @CurrencyGuid then 1 
			else [En].[CurrencyVal] / @CurrencyVal end
			) as [Debit]
		,Sum([En].[Credit]*
			Case when [En].[CurrencyGuid] = @CurrencyGuid then 1 
			else [En].[CurrencyVal] / @CurrencyVal end
			) as [Credit]
		,Co.Guid as CostGuid 
		,Co.ParentGuid as CostParentGuid
		,Co.Level
		,Ac.Guid as AccountGuid 
	from 
		[DEntry] [En]
		inner Join [vwEntry] [M] on [M].[Guid] = [En].[ParentGuid]
		inner Join #Ac [Ac] on [Ac].[Guid] = [En].[AcGuid]
		inner Join #Co Co on [Co].[Guid] = [En].[CostGuid]
	where 
		([M].[Date] between @Date1 And @Date2)
		and ([M].[BranchGuid] = @BranchGuid or @BranchGuid = 0x0)
		and (
				([M].[IsPosted] = 1 and @IsPosted = 1)
				or ([M].[IsPosted] = 0  and @IsNotPosted = 1)
			)
	Group By
		[Co].[CostName],
		[Ac].[AccountCode],
		[Ac].[AccountName],
		Co.Guid,
		Co.ParentGuid,
		Co.Level,
		Ac.Guid

	
	Declare @cnt int, @Colevel int
	Set @Colevel = (Select MAX(level) From ##Entry)
	SET @cnt  =1
	WHILE @cnt > 0
	BEGIN
		

		insert into ##Entry
		([CostName] ,[AccountCode],[AccountName] ,[Debit],[Credit],[CostGuid],[CostParentGuid],[Level],[AccountGuid])
		Select
			Co.CostName [CostName] ,
			En.[AccountCode],
			En.[AccountName] ,
			Sum([Debit]),
			Sum([Credit]),
			Co.Guid [CostGuid],
			Co.ParentGUID  [CostParentGuid],
			Co.[Level],
			[AccountGuid]
		From
			#Co Co
			inner join ##Entry En on En.CostParentGuid = Co.Guid
		where
			en.Level = @Colevel
		Group By
			Co.CostName,
			En.[AccountCode],
			En.[AccountName] ,
			Co.Guid,
			Co.ParentGUID,
			Co.[Level],
			[AccountGuid]
			
			
		SET @cnt = @@ROWCOUNT
		
		SET @Colevel = @Colevel - 1
		Print @cnt
	END
	
	Delete ##Entry where Level <> @Level
	
	IF  EXISTS (SELECT * FROM tempdb.dbo.sysobjects WHERE Name = '##Pvt_Cost')
	Drop Table ##Pvt_Cost
	
	IF  EXISTS (SELECT * FROM tempdb.dbo.sysobjects WHERE Name = '##TmpSql_Account_Cost')
	Drop Table ##TmpSql_Account_Cost
	
	
	Create Table ##TmpSql_Account_Cost
	(
		[id] int identity,
		[Sqltext] varchar(8000)
	)
	
	DECLARE @sql varchar(8000)
	SET NOCOUNT ON
	SET ANSI_WARNINGS OFF
	
	Create Table ##Pvt_Cost
	(
		id int identity(1,1),
		CostName varchar(255)
	)
	
	insert into ##Pvt_Cost (CostName)
	Select DISTINCT CostName from ##Entry order By CostName
	
	-----Debit
	insert into ##TmpSql_Account_Cost (Sqltext)
	Select
	'Select
		[AccountCode],
		[AccountName],
		Cast('''+@Debit_Str+''' as varchar(50)) as [Kind],'

	Declare @Cost Varchar(255), @id int
	
	DECLARE @cursor_Debit CURSOR 
	Set @cursor_Debit = CURSOR FAST_FORWARD FOR 

	SELECT id, CostName
	FROM ##Pvt_Cost
	order By
		CostName
	
	OPEN @cursor_Debit
	FETCH NEXT FROM @cursor_Debit INTO @id, @Cost
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
	  
	insert into ##TmpSql_Account_Cost (Sqltext)
	Select
		'
		'''+@Cost+''' = Sum( CASE [CostName] WHEN '+''''+@Cost+''' THEN [Debit] END),'

	  FETCH NEXT FROM @cursor_Debit INTO @id, @Cost
	
	END
	
	CLOSE @cursor_Debit
	DEALLOCATE @cursor_Debit
	
	
	insert into ##TmpSql_Account_Cost (Sqltext)
	Select
		'
		(Select Sum([Debit]) From [##Entry] where AccountGuid = E.AccountGuid) as [Total],
		[AccountGuid],
		2 as Sort
	into ##TblAssem
	from 
		[##Entry] [E]
	Group By 
		[AccountGuid],[AccountCode], [AccountName]'


	--Credit
	insert into ##TmpSql_Account_Cost (Sqltext)
	Select
	'
	insert into ##TblAssem
	Select
		[AccountCode],
		'''',
		Cast('''+@Credit_Str+''' as varchar(50)) as [_],'

	DECLARE @cursor_Credit CURSOR 
	Set @cursor_Credit = CURSOR FAST_FORWARD FOR 

	SELECT id, CostName
	FROM ##Pvt_Cost
	order By
		CostName
	
	OPEN @cursor_Credit
	FETCH NEXT FROM @cursor_Credit INTO @id, @Cost
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
	  
	insert into ##TmpSql_Account_Cost (Sqltext)
	Select
		'
		'''+@Cost+''' = Sum( CASE [CostName] WHEN '+''''+@Cost+''' THEN [Credit] END),'

	  FETCH NEXT FROM @cursor_Credit INTO @id, @Cost
	
	END
	
	CLOSE @cursor_Credit
	DEALLOCATE @cursor_Credit
	
	
	insert into ##TmpSql_Account_Cost (Sqltext)
	Select
		'
		(Select Sum([Credit]) From [##Entry] where AccountGuid = E.AccountGuid) as [Total],
		[AccountGuid],
		3
	from 
		[##Entry] [E]
	Group By 
		[AccountGuid], [AccountCode]'
	
	---------------------------
	--Balance
	insert into ##TmpSql_Account_Cost (Sqltext)
	Select
	'
	insert into ##TblAssem
	Select
		[AccountCode],
		'''',
		Cast('''+@Balance_Str+''' as varchar(50)) as [_],'

	DECLARE @cursor_Balance CURSOR 
	Set @cursor_Balance = CURSOR FAST_FORWARD FOR 

	SELECT id, CostName
	FROM ##Pvt_Cost
	order By
		CostName
	
	OPEN @cursor_Balance
	FETCH NEXT FROM @cursor_Balance INTO @id, @Cost
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
	  
	insert into ##TmpSql_Account_Cost (Sqltext)
	Select
		'
		'''+@Cost+''' = Sum( CASE [CostName] WHEN '+''''+@Cost+''' THEN [Debit]-[Credit] END),'

	  FETCH NEXT FROM @cursor_Balance INTO @id, @Cost
	
	END
	
	CLOSE @cursor_Balance
	DEALLOCATE @cursor_Balance
	
	insert into ##TmpSql_Account_Cost (Sqltext)
	Select
		'
		(Select Sum([Debit]-[Credit]) From [##Entry] where AccountGuid = E.AccountGuid) as [Total],
		[AccountGuid],
		4
	from 
		[##Entry] [E]
	Group By 
		[AccountGuid], [AccountCode]'
	
	---------------------------
	--ãÌãæÚ ÇáÇÚãÏÉ
	insert into ##TmpSql_Account_Cost (Sqltext)
	Select
	'
	
	insert into ##TblAssem
	Select
		Cast('''+@Total_Balance_Str+''' as varchar(50)) as [AccountCode],
		'''',
		Cast('''+@Total_Balance_Str+''' as varchar(50)) as [_],'

	DECLARE @cursor_endBalance CURSOR 
	Set @cursor_endBalance = CURSOR FAST_FORWARD FOR 

	SELECT id, CostName
	FROM ##Pvt_Cost
	order By
		CostName
	
	OPEN @cursor_endBalance
	FETCH NEXT FROM @cursor_endBalance INTO @id, @Cost
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
	  
	insert into ##TmpSql_Account_Cost (Sqltext)
	Select
		'
		'''+@Cost+''' = Sum( CASE [CostName] WHEN '+''''+@Cost+''' THEN [Debit]-[Credit] END),'

	  FETCH NEXT FROM @cursor_endBalance INTO @id, @Cost
	
	END
	
	CLOSE @cursor_endBalance
	DEALLOCATE @cursor_endBalance
	-----
	
	insert into ##TmpSql_Account_Cost (Sqltext)
	Select
		'
		(Select Sum([Debit]-[Credit]) From [##Entry] ) as [Total],
		0x0 as [AccountGuid],
		5
	from 
		[##Entry] [E]'
	-----------------------------
	
	exec DropObject '##TblAssem'


	Select * from ##TmpSql_Account_Cost order By id
	return -- åÇãÉ åäÇ
	
	
	IF  EXISTS (SELECT * FROM tempdb.dbo.sysobjects WHERE Name = '##TblAssem')
	Drop Table ##TblAssem
	Declare @R int, @MaxR int
	Set @MaxR = (Select MAX(id) from ##TmpSql_Account_Cost)
	Set @sql = ''
	
	Set @R = 0
	while @R < @MaxR+1
	begin
		--Select @R
		Set @sql = @sql + IsNull((Select sqltext from ##TmpSql_Account_Cost where id = @R) ,'')
		Set @R = @R + 1
	end
	Print @sql
	exec(@sql)
	
	Select * from ##TblAssem order by AccountCode, Sort
	
	/*
	--Prc_Tar_GetBudgetCostCustDetail_2
	Select 
		B.GroupCode,
		B.GroupName,B.MatCode ,
		B.MatName ,
		B.CostQty  as [Qty],
		'' as TotalCustQty,
		'' as TotalCustPercent,
		R.*,
		B.path,
		B.Flag
	from
		##BudgetMatCustDetail_loadDetail B
		left join ##TblAssem R  on (B.MatGuid = R.matGuid) or (B.GroupGuid = R.GroupGuid and R.MatGuid is null and B.Flag = 1)
	order by
		B.path,
		B.MatCode
		
	Select DISTINCT CustName, CustGuid from ##Entry
	Order By
		CustName
	*/
	
	SET ANSI_WARNINGS ON

GO
/****** Object:  StoredProcedure [dbo].[PrcCrossTrailContractMonthCheck]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[PrcCrossTrailContractMonthCheck]
  
as
	Set Nocount on
		
	exec DropObject '##CheckMonthly'
	
	Create Table ##CheckMonthly
	(
		[Month] Varchar(255)
		,[Sort] int
		,[Value] Float
		,[ContractGuid] uniqueidentifier
		)

	-- ÍÑßÇÊ ÇáÞíæÏ
	insert into ##CheckMonthly
	Select --Top 50
		dbo.FnFloatTostr(DATEPART(Month, dueDate)) +' / '+dbo.FnFormatNumber( dbo.FnFloatTostr(DATEPART(Year, dueDate)),2),
		dbo.FnFloatTostr(DATEPART(Year, dueDate)) + dbo.FnFormatNumber( dbo.FnFloatTostr(DATEPART(Month, dueDate)),2),
		L.[Value],
		l.ContractGuid
	from 
		[checks] C
		inner join LinkCheckContract L on L.ParentGuid = C.Guid
		inner join [Resource] R on R.Guid = L.ContractGuid and R.[SPID] = @@SPID and R.Kind = 50

--	Select * from ##CheckMonthly	return
	
	IF  EXISTS (SELECT * FROM tempdb.dbo.sysobjects WHERE Name = '##Pvt_Contract')
	Drop Table ##Pvt_Contract
	
	IF  EXISTS (SELECT * FROM tempdb.dbo.sysobjects WHERE Name = '##TmpSql_Contract_check')
	Drop Table ##TmpSql_Contract_check
	
	
	Create Table ##TmpSql_Contract_check
	(
		[id] int identity,
		[Sqltext] varchar(8000)
	)
	
	DECLARE @sql varchar(8000)
	SET NOCOUNT ON
	SET ANSI_WARNINGS OFF
	
	Create Table ##Pvt_Contract
	(
		id int identity(1,1),
		[Sort] varchar(255)
	)
	
	insert into ##Pvt_Contract ([Sort])
	Select DISTINCT [Sort] from ##CheckMonthly order by [Sort]
	
	-----Debit
	insert into ##TmpSql_Contract_check (Sqltext)
	Select
	'Select
		[ContractGuid],
	'

	Declare @Month Varchar(255),@Sort Varchar(255), @id int
	
	DECLARE @cursor_Debit CURSOR 
	Set @cursor_Debit = CURSOR FAST_FORWARD FOR 

	SELECT id, [Sort]
	FROM ##Pvt_Contract
	order By
		id
	
	OPEN @cursor_Debit
	FETCH NEXT FROM @cursor_Debit INTO @id, @Sort
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
	  Select @Month = [MONTH] from ##CheckMonthly where [Sort] = @Sort

	insert into ##TmpSql_Contract_check (Sqltext)
	Select
		'
		'''+@Month+''' = Sum( CASE [Sort] WHEN '+''''+@Sort+''' THEN [Value] END),'

	  FETCH NEXT FROM @cursor_Debit INTO @id, @Sort
	
	END
	
	CLOSE @cursor_Debit
	DEALLOCATE @cursor_Debit
	
	
	
	insert into ##TmpSql_Contract_check (Sqltext)
	Select
		'
		(Select Sum([value]) From [##CheckMonthly] where ContractGuid = E.ContractGuid) as '''+dbo.SC('ÇáãÌãæÚ')+'''
	into ##TblAssem_Check_Contract
	from 
		[##CheckMonthly] [E]
	Group By 
		[ContractGuid]'



	
	exec DropObject '##TblAssem_Check_Contract'


	--Select * from ##TmpSql_Contract_check order By id
	--return -- åÇãÉ åäÇ
	
	
	IF  EXISTS (SELECT * FROM tempdb.dbo.sysobjects WHERE Name = '##TblAssem_Check_Contract')
	Drop Table ##TblAssem_Check_Contract
	Declare @R int, @MaxR int
	Set @MaxR = (Select MAX(id) from ##TmpSql_Contract_check)
	Set @sql = ''
	
	Set @R = 0
	while @R < @MaxR+1
	begin
		--Select @R
		Set @sql = @sql + IsNull((Select sqltext from ##TmpSql_Contract_check where id = @R) ,'')
		Set @R = @R + 1
	end
	--Print @sql
	exec(@sql)
	
	--Select * from ##TblAssem_Check_Contract 
	
	
	SET ANSI_WARNINGS ON

GO
/****** Object:  StoredProcedure [dbo].[PrcDailyContractDetail]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcDailyContractDetail]
(
	@CurrencyGuid uniqueidentifier = '11111111-C748-4B13-8B91-1E9B299DF1C1',
	@CurrencyVal Float = 100,
	@State int = 2,
	@Date1 DateTime = '1/1/2007',
	@Date2 DateTime = '1/1/2010'
	,@ContractActiveNote Bit = 0
	,@ContractOpNote int = 0
	,@ContractNote  Varchar(256) = '' 

)
  
as
	if isnull(@CurrencyVal, 0) = 0
	Set @CurrencyVal = 1

	--ãÚÇáÌÉ ÈíÇä ÇáÚÞÏ
	if @ContractOpNote = 0 --íÍæí
	Set @ContractNote = '%'+@ContractNote+'%'

	--ÇáÚÞæÏ
	Select 
		dbo.fnDateOnly([EditDate]) as [EditDate],
		[TypeName],
		[Number],
		[ContractNo],
		[BuildingName],
		Case when [NewState] = 0 then dbo.SC('ÌÏíÏ') 
			 when [NewState] = 1 then dbo.SC('ÊÌÏíÏ') 
		end As [State],
		[C].[NewState],
		([Value] * [CurrencyVal]) / Case when [CurrencyGuid] = @CurrencyGuid then [CurrencyVal] else @CurrencyVal end as [Value],
		[P].[CachValue],
		[K].[CheckValue],
		[C].[Note2],
		0 as [Kind],
		[C].[Guid]
	into #Res1
	From 
		[vwAllContract] [C]
		inner join [Resource] [R] on [R].[Guid] = [C].[TypeGuid] and [spid] = @@Spid
		left join (
					Select
						[Cp].[ContractGuid],
						Sum(
							([Cp].[Value] * [Cp].[CurrencyVal]) / Case when [Cp].[CurrencyGuid] = @CurrencyGuid then [Cp].[CurrencyVal] else @CurrencyVal end 
						   )
						as [CachValue]
					From
						[vwContractCachPayment] [Cp]
					Group By
						[Cp].[ContractGuid]
					) [P] on [P].[ContractGuid] = [C].[Guid]
		left join (
					Select
						[Ck].[ContractGuid],
						Sum(
							([Ck].[Value] * [Ck].[CurrencyVal]) / Case when [Ck].[CurrencyGuid] = @CurrencyGuid then [Ck].[CurrencyVal] else @CurrencyVal end 
						   )
						as [CheckValue]
					From
						[vwChecks] [Ck]
					Group By
						[Ck].[ContractGuid]
				  ) [K] on [K].[ContractGuid] = [C].[Guid]
	where
		(dbo.fnDateOnly([EditDate]) between @Date1 And @Date2)


		and 
			(
				[C].[Note2] Like @ContractNote 
				or @ContractActiveNote = 0
			)

		and ([NewState] = @State or @State = 2) 	

	Order By
		[TypeName],[EditDate], [Number]

	Select 
		*, 
		isNull([CachValue],0) + isNull([CheckValue],0) as [TotalValue] ,
		-(([Value]) - IsNull(([CachValue]),0) - IsNull(([CheckValue]),0)) as [Rest]
	from 
		#Res1

	Select 
		[State],
		Count([Number]) as [Count],	
		Sum([Value]) as [Value],
		Sum([CachValue]) as [CachValue],
		Sum([CheckValue]) as [CheckValue],
		Sum([Value]) - IsNull(Sum([CachValue]),0) - IsNull(Sum([CheckValue]),0) as [Rest]
	From
		#Res1
	Group by
		[NewState], [State]
	Order By
		[NewState]
		

GO
/****** Object:  StoredProcedure [dbo].[PrcDailyStatistic]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcDailyStatistic]
(
	@CurrencyGuid uniqueidentifier = '11111111-C748-4B13-8B91-1E9B299DF1C1',
	@CurrencyVal Float = 100,
	@ShowDetail Bit = 0,
	@Date1 DateTime = '1/1/2007',
	@Date2 DateTime = '1/1/2010'
)
  
as
	if isnull(@CurrencyVal, 0) = 0
	Set @CurrencyVal = 1

	Create Table [#R]
	(
		[TypeName] Varchar(256),
		[Number] int,
		[Date] Datetime,
		[Value] Float,
		[Kind] int,
		[SumKind] int,
		[Guid] uniqueidentifier
	)

	Insert into [#R]
	--ÇáÚÞæÏ
	Select 
		[TypeName],
		[Number],
		[EditDate],
		[Rent] * [CurrencyVal] / Case when [CurrencyGuid] = @CurrencyGuid then [CurrencyVal] else @CurrencyVal end as [Value],
		0 as [Kind],
		0 as [SumKind],
		[C].[Guid]
	From 
		[vwLeaseApartment] [C]
		inner join [Resource] [R] on [R].[Guid] = [C].[TypeGuid] and [spid] = @@Spid
	where
		[EditDate] between @Date1 And @Date2
	Order By
		[TypeName],[EditDate]

	-- ÇáÔíßÇÊ
	Insert into [#R]
	Select 
		[TypeName],
		[Number],
		[C].[Date],
		[Value] * [CurrencyVal] / Case when [CurrencyGuid] = @CurrencyGuid then [CurrencyVal] else @CurrencyVal end as [Value],
		1 as [Kind],
		0 as [SumKind],
		[C].[Guid]
	From 
		[vwChecks] [C]
		inner join [Resource] [R] on [R].[Guid] = [C].[TypeGuid] and [spid] = @@Spid
	where
		[Date] between @Date1 And @Date2
	Order By
		[TypeName],[Date]

	--ÇáÚãáíÇÊ Úáì ÇáÔíßÇÊ
	Insert into [#R]
	Select 
		[C].[TypeName] +' '+dbo.sc('Ôíß'),
		[K].[Number],
		[C].[Date],
		[C].[Value] * [C].[CurrencyVal] / Case when [C].[CurrencyGuid] = @CurrencyGuid then [C].[CurrencyVal] else @CurrencyVal end as [Value],
		2 as [Kind],
		0 as [SumKind],
		[CheckGuid] as [Guid]
	From 
		[vwChecksCollection] [C]
		inner join [vwChecks] [K] on [K].[Guid] = [C].[CheckGuid]
		inner join [Resource] [R] on [R].[Guid] = [K].[TypeGuid] and [spid] = @@Spid
	where
		[C].[Date] between @Date1 And @Date2
	Order By
		[C].[TypeName],[C].[Date]

	--ÃäãÇØ ÇáÓäÏÇÊ
	Insert into [#R]
	Select 
		[T].[Name] as [TypeName],
		[C].[Number],
		[C].[Date],
		Case 
			when isnull([D].[Debit],0) <> 0 then [D].[Debit] 
			when isnull([D].[Credit],0) <> 0 then [D].[Credit] 
		end	
		* [D].[CurrencyVal] / Case when [D].[CurrencyGuid] = @CurrencyGuid then [D].[CurrencyVal] else @CurrencyVal end as [Value],
		3 as [Kind],
		0 as [SumKind],
		[C].[Guid]
	From 
		[Secondary_Entry] [C]
		inner join [EntryType] [T] on [T].[Guid] = [C].[TypeGuid]
		inner join [Secondary_EntryDetail] [D] on [D].[ParentGuid] = [C].[Guid]
		inner join [Resource] [R] on [R].[Guid] = [C].[TypeGuid] and [spid] = @@Spid
	where
		[Date] between @Date1 And @Date2
	Order By
		[TypeName],[Date]

	insert into #R
	Select 
		--dbo.sc('ãÌãæÚ') +' '+
		[TypeName],
		Count([Number]),
		Null as [Date],
		Sum([Value]) as [Value],
		[Kind],
		1 as [SumKind],
		0x0 as [Guid]
	From
		#R	
	Group By
		[Kind],
		[TypeName]

	
	Select 
		* 
	from 
		#R
	where
		([SumKind] = 1 And @ShowDetail = 0)
		or @ShowDetail = 1
	Order By
		[Kind],[TypeName], [SumKind], [Date], Number

	

		

GO
/****** Object:  StoredProcedure [dbo].[PrcDayBook]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcDayBook]
(
	@AccountGuid uniqueidentifier = '780ED9BA-5F69-4790-9C7F-41A75690FAF5',
	@CostGuid uniqueidentifier = 0x0,
	@BranchGuid uniqueidentifier = 0x0,
	@SalesManGuid uniqueidentifier = 0x0,
	@CurrencyGuid uniqueidentifier = '11111111-C748-4B13-8B91-1E9B299DF1C1',
	@CurrencyVal Float = 1,
	@CheckField int = 0 , -- 0 Debit   1 Credit  
	@Operation int = 0 , -- 0 ÈÏæä   1 ÃÕÛÑ ãä   2 ÇßÈÑ ãä  3 íÓÇæí   4 Èíä   5 ÃÕÛÑ Çæ íÓÇæí   6 ÇßÈÑ ÇæíÓÇæí
	@CheckValue1 Float = 0,
	@CheckValue2 Float = 0,
	@LikeNote Varchar(256) = '',
	@NotLikeNote Varchar(256) = '',

	@IsPosted Bit = 1,
	@IsNotPosted Bit = 1,

	@ActiveNum Bit = 0,
	@Num1 int = 0,
	@Num2 int = 1000,

	@ActiveDate Bit = 0,
	@Date1 DateTime = '1/31/2017',
	@Date2 DateTime = '12/15/2017',

	@CheckEntry bit = 1,
	@CheckPosted bit = 1,
	@Checkcollected bit = 1,
	@CheckPartialcollected bit = 1,
	@CheckReturned bit = 1,
	@CheckEndorsement bit = 1,
	@Mark Bit = 1,
	@NotMark Bit = 1,
	@GroupingEntry Bit = 0
)
  
as
	Select * Into #fnGetAccountList From [dbo].[fnGetAccountList](@AccountGuid)

	Select
		[M].[Date]
		,[En].[AcGuid]
		,Isnull(case when [En].[Debit] <> 0 then [En].[Debit] * 
			Case when [En].[CurrencyGuid] = @CurrencyGuid then 1 
			else [En].[CurrencyVal] / @CurrencyVal end
		end,0) as [Debit]
		,Isnull(case when [En].[Credit] <> 0 then [En].[Credit] * 
			Case when [En].[CurrencyGuid] = @CurrencyGuid then 1 
			else [En].[CurrencyVal] / @CurrencyVal end
		end,0) as [Credit]
		,[En].[Note]
		,[M].[Number] as [DocNum]
		,[M].[Number]
		,[En].[CostGuid]
		,[En].[ObverseAcGuid]
		,[M].[Guid]
		,[M].[ParentKind]
	into #Entry
	from
		[DEntry] [En]
		inner Join [vwEntry] [M] on [M].[Guid] = [En].[ParentGuid]
		inner join [dbo].#fnGetAccountList [FC] on [FC].[Guid] = [En].[AcGuid]
	where 
		([M].[BranchGuid] = @BranchGuid or @BranchGuid = 0x0)
		and ([En].[Note] Not Like '%'+@NotLikeNote+'%' or @NotLikeNote = '')
		and ([En].[Note] Like '%'+@LikeNote+'%' )
		and ([M].[Date] Between @Date1 And @Date2 or @ActiveDate = 0)
		and ([M].[Number] Between @Num1 And @Num2 or @ActiveNum = 0)
		and (
				(IsNull([M].[IsPosted],0) = 1 and @IsPosted = 1)
				or (IsNull([M].[IsPosted],0) = 0  and @IsNotPosted = 1)
			)
			
	--Select * from #Entry

	--ãÑßÒ ÇáßáÝÉ
	if @CostGuid <> 0x0
	begin
		Select * into #fnGetCostList from [dbo].[fnGetCostList](@CostGuid)
		delete #Entry 
		from	
			#Entry En
			left Join [dbo].#fnGetCostList [Co] on [Co].[Guid] = [En].[CostGuid]
		where
			Co.Guid is Null
	end

	--Select * from #Entry
	
	Declare @Tbl Table
	(
		[Date] Datetime,
		[AccountGuid] uniqueidentifier,
		[debit] Float,
		[Credit] Float,
		[Note] varchar(256),
		[ReceiptNo] varchar(256),
		[Doc] varchar(256),
		[DocName] varchar(256),
		[DocNum] int,
		[Num] int,
		[CostGuid]  uniqueidentifier,
		[ObverseAcGuid]  uniqueidentifier,
		[Kind] int,
		[Guid] uniqueidentifier,
		[TypeGuid] uniqueidentifier,
		[Mark] Bit,
		[OrderDate] Datetime
	)

	--ÓäÏ ÇáÞíÏ ÇáÚÇÏí
	if Exists(
				Select Top 1 Guid From [Resource] where [Guid] = 0x0 and [Spid] = @@Spid
			)
	Insert into @Tbl
	Select 
		[En].[Date]
		,[En].[AcGuid]
		,[En].[Debit]
		,[En].[Credit]
		,[En].[Note]
		,'' as [ReceiptNo]
		,'' [Doc]
		,'' [DocName]
		,[En].[Number] as [DocNum]
		,[En].[Number]
		,[En].[CostGuid]
		,[En].[ObverseAcGuid]
		,2 as [Kind]
		,[En].[Guid]
		,0x0
		,Null [Mark]
		,[En].[Date]
	from 
		#Entry En
	where 
		(
			([en].[ParentKind] = 0) -- ÇáÞíÏ ÇáÚÇÏí
			or ([en].[ParentKind] = 158) -- ÞíÏ ÇáÇåÊáÇß
			or ([en].[ParentKind] = 150) -- ÞíÏ ÇáÇåÊáÇß
			or ([en].[ParentKind] = 151) -- ÞíÏ ÇáÇåÊáÇß
			or ([en].[ParentKind] = 152) -- ÞíÏ ÇáÇåÊáÇß
			or ([en].[ParentKind] = 153) -- ÞíÏ ÇáÇåÊáÇß
		)
		and (@SalesManGuid = 0x0)
	Order By 
		[En].[Date]


	--ÓäÏ ÇáÞíÏ ÇáÍÓÇÈí
	if Exists(
				Select Top 1 Guid From [Resource] where [Guid] = '{11111111-0000-0000-0000-000000000000}' and [Spid] = @@Spid
			)
	Insert into @Tbl
	Select 
		[En].[Date]
		,[En].[AcGuid]
		,[en].[Debit]
		,[en].[Credit]
		,[En].[Note]
		,'' as [ReceiptNo]
		,'' [Doc]
		,dbo.Sc('ÇáÞíÏ ÇáÍÓÇÈí') [DocName]
		,[En].[Number] as [DocNum]
		,[En].[Number]
		,[En].[CostGuid]
		,[En].[ObverseAcGuid]
		,2 as [Kind]
		,[En].[Guid]
		,0x0
		,Null [Mark]
		,[En].[Date]
	from 
		#entry en
	where 
		[ParentKind] = 1 -- ÇáÞíÏ ÇáÍÓÇÈí
		and (@SalesManGuid = 0x0)
	Order By 
		[En].[Date]


	--ÃäãÇØ ÇáÓäÏÇÊ
	Insert into @Tbl
	Select 
		[En].[Date]
		,[En].[AcGuid]
		,[en].[Debit]
		,[en].[Credit]
		,[En].[Note]
		,[S].[ReceiptNo]
		,[T].[Code] +'/'+ Cast(S.Number as Varchar(256))[Doc]
		,[T].Name as [DocName]
		,[S].[Number] as [DocNum]
		,[En].[Number]
		,[En].[CostGuid]
		,[En].[ObverseAcGuid]
		,2 as [Kind]
		,[En].[Guid]
		,S.TypeGuid
		,[s].[Mark]
		,[En].[Date]
	from 
		#entry En
		inner join [Secondary_Entry] [S] on [S].[Guid] = [En].[Guid]
		inner join [EntryType] T on T.Guid = S.TypeGuid
		inner join [Resource] [R] on [R].[Guid] = [S].[TypeGuid] and [Spid] = @@Spid
	where 
		(
				([S].[Mark] = 1 and @Mark = 1)
				or ([S].[Mark] = 0 and @NotMark = 1)
			)
		and ([S].[SalesManGuid] = @SalesManGuid or @SalesManGuid = 0x0)

	--___________________________________

	--ÃäãÇØ ÇáÝæÇÊíÑ
	Insert into @Tbl
	Select 
		[En].[Date]
		,[En].[AcGuid]
		,[en].[Debit]
		,[en].[Credit]
		,[En].[Note]
		,'' as [ReceiptNo]
		,T.Code +'/'+ Cast(S.Number as Varchar(256))[Doc]
		,T.Name as [DocName]
		,[S].[Number] as [DocNum]
		,[En].[Number]
		,[En].[CostGuid]
		,[En].[ObverseAcGuid]
		,2 as [Kind]
		,[En].[Guid]
		,S.TypeGuid
		,0 as [Mark]
		,[En].[Date]
	from 
		#entry En
		inner join [Bill] [S] on [S].EntryGuid = [En].[Guid]
		inner join [BillType] T on T.Guid = S.TypeGuid
		inner join [Resource] [R] on [R].[Guid] = [S].[TypeGuid] and [Spid] = @@Spid

	--___________________________________


	--ÇáÚÞæÏ
	Insert into @Tbl
	Select 
		[En].[Date]
		,[En].[AcGuid]
		,[en].[Debit]
		,[en].[Credit]
		,[En].[Note]
		,'' as [ReceiptNo]
		,S.TypeCode +'/'+ Cast(S.Number as Varchar(256))[Doc]
		,S.TypeName as [DocName]
		,[S].[Number] as [DocNum]
		,[En].[Number]
		,[En].[CostGuid]
		,[En].[ObverseAcGuid]
		,2 as [Kind]
		,[En].[Guid]
		,[S].[TypeGuid]
		,Null as Mark
		,[En].[Date]
	from 
		#entry En
		inner join [vwAllContract] [S] on [S].[Guid] = [En].[Guid]
		inner join [Resource] [R] on [R].[Guid] = [S].[TypeGuid] and [Spid] = @@Spid
	where 
		([S].[SalesManGuid] = @SalesManGuid or @SalesManGuid = 0x0)


	--ÃäãÇØ ÇáÝæÇÊíÑ
	Insert into @Tbl
	Select 
		[En].[Date]
		,[En].[AcGuid]
		,[en].[Debit]
		,[en].[Credit]
		,[En].[Note]
		,'' as [ReceiptNo]
		,T.Code +'/'+ Cast(S.Number as Varchar(256))[Doc]
		,T.Name [DocName]
		,[S].[Number] as [DocNum]
		,[En].[Number]
		,[En].[CostGuid]
		,[En].[ObverseAcGuid]
		,2 as [Kind]
		,[En].[Guid]
		,S.TypeGuid
		,0 as [Mark]
		,[En].[Date]
	from 
		#entry En
		inner join [Bill] [S] on [S].EntryGuid = [En].[Guid]
		inner join [BillType] T on T.Guid = S.TypeGuid
		inner join [Resource] [R] on [R].[Guid] = [S].[TypeGuid] and [Spid] = @@Spid

	--ÇáÔíßÇÊ
		-- ÞíÏ ÇáæÑÞÉ
	if @CheckEntry = 1
	Insert into @Tbl
	Select 
		[En].[Date]
		,[En].[AcGuid]
		,[en].[Debit]
		,[en].[Credit]
		,[En].[Note]
		,'' as [ReceiptNo]
		,T.Code +'/'+ Cast(C.Number as Varchar(256))[Doc]
		,T.Name as [DocName]
		,[C].[Number] as [DocNum]
		,[En].[Number]
		,[En].[CostGuid]
		,[En].[ObverseAcGuid]
		,2 as [Kind]
		,[En].[Guid]
		,[C].[TypeGuid]
		,Null as Mark
		,[En].[Date]
	from 
		#Entry En
		inner join [LinkEntry_Checks] [L] on [L].[EntryGuid] = [En].[Guid]
		inner join [Checks] [C] on [C].[Guid] = [L].[CheckGuid] and [L].[Kind] = 1600
		inner join [CheckType] T on t.Guid = C.TypeGuid
		inner join [Resource] [R] on ([R].[Guid] = [C].[TypeGuid] and [R].[Spid] = @@Spid)
	where 
		([C].[SalesManGuid] = @SalesManGuid or @SalesManGuid = 0x0)


	--ÇáÔíßÇÊ
		-- ÞíæÏ ÇáÚãáíÇÊ
	Insert into @Tbl
	Select 
		[En].[Date]
		,[En].[AcGuid]
		,[en].[Debit]
		,[en].[Credit]
		,[En].[Note]
		,'' as [ReceiptNo]
		,T.Code +'/'+ Cast(C.Number as Varchar(256))[Doc]
		,T.Name as [DocName]
		,[C].[Number] as [DocNum]
		,[En].[Number]
		,[En].[CostGuid]
		,[En].[ObverseAcGuid]
		,2 as [Kind]
		,[En].[Guid]
		,[C].[TypeGuid]
		,Null as Mark
		,[En].[Date]
	from 
		#Entry En
		inner join [LinkEntry_Checks] [L] on [L].[EntryGuid] = [En].[Guid]
		inner join [Checks] [C] on [C].[Guid] = [L].[CheckGuid] and (
																		([L].[Kind] = 1660 + Case when @CheckPosted = 1 then 0 end)
																	or	([L].[Kind] = 1660 + Case when @Checkcollected = 1 then 1 end)
																	or	([L].[Kind] = 1660 + Case when @CheckEndorsement = 1 then 2 end)
																	or	([L].[Kind] = 1660 + Case when @CheckReturned = 1 then 3 end)
																	)
		inner join [CheckType] T on t.Guid = C.TypeGuid
		inner join [Resource] [R] on ([R].[Guid] = [C].[TypeGuid] and [R].[Spid] = @@Spid)
	where 
		([C].[SalesManGuid] = @SalesManGuid or @SalesManGuid = 0x0)

	
	--ÇáÔíßÇÊ
		-- ÇáÊÍÕíá ÇáÌÒÆí
	if @CheckPartialcollected = 1
	Insert into @Tbl
	Select 
		[En].[Date]
		,[En].[AcGuid]
		,[en].[Debit]
		,[en].[Credit]
		,[En].[Note]
		,'' as [ReceiptNo]
		,T.Code +'/'+ Cast(C.Number as Varchar(256))[Doc]
		,T.Name as [DocName]
		,[C].[Number] as [DocNum]
		,[En].[Number]
		,[En].[CostGuid]
		,[En].[ObverseAcGuid]
		,2 as [Kind]
		,[En].[Guid]
		,[C].[TypeGuid]
		,Null as Mark
		,[En].[Date]
	from 
		#Entry En
		INNER JOIN [ChecksPartialCollection] [L] ON [L].[Guid] = [En].[Guid]
		inner join [Checks] [C] on [C].[Guid] = [L].[CheckGuid] 
		inner join [CheckType] T on t.Guid = C.TypeGuid
		inner join [Resource] [R] on ([R].[Guid] = [C].[TypeGuid] and [R].[Spid] = @@Spid)
	where 
		([C].[SalesManGuid] = @SalesManGuid or @SalesManGuid = 0x0)


	Delete @Tbl
	where
		(
			Case
				-- Non
				when @Operation = 0 then 1 
				-- <
				when @Operation = 1 then Case when 
													(
														Case 
																when @CheckField = 0 then [Debit]
																when @CheckField = 1 then [Credit] 
														 end
													 ) < @CheckValue1 then 1 else 0  
										 end
			
				-- >
				when @Operation = 2 then Case when 
													(
														Case 
																when @CheckField = 0 then [Debit]
																when @CheckField = 1 then [Credit] 
														 end
													 ) > @CheckValue1 then 1 else 0  
										 end
				-- =
				when @Operation = 3 then Case when 
													(
														Case 
																when @CheckField = 0 then [Debit]
																when @CheckField = 1 then [Credit] 
														 end
													 ) = @CheckValue1 then 1 else 0  
										 end
				-- Èíä
				when @Operation = 4 then Case when 
													(
														Case 
																when @CheckField = 0 then [Debit]
																when @CheckField = 1 then [Credit] 
														 end
													 ) between @CheckValue1 and @CheckValue2 then 1 else 0  
										 end
				-- <=
				when @Operation = 5 then Case when 
													(
														Case 
																when @CheckField = 0 then [Debit]
																when @CheckField = 1 then [Credit] 
														 end
													 ) <= @CheckValue1 then 1 else 0  
										 end
				-- >=
				when @Operation = 6 then Case when 
													(
														Case 
																when @CheckField = 0 then [Debit]
																when @CheckField = 1 then [Credit] 
														 end
													 ) >= @CheckValue1 then 1 else 0  
										 end
			end
			= 0	
			)



	Select 
		[Date],
		[Ac].[Code]+'-'+[Ac].[Name] as [Account],
		[T].[debit],
		[T].[Credit],
		[T].[Note],
		[T].[ReceiptNo],
		[T].[Doc],
		[T].[DocNum],
		T.[DocName],
		[T].[Num],
		CAST('' as Varchar(256)) as [Cost],
		CAST('' as Varchar(256)) as [ObverseAc],
		[T].[Kind],
		[T].[Guid],
		[T].[CostGuid],
		[T].ObverseAcGuid,
		[T].[Orderdate]
	Into #EndRes
	from 
		@Tbl [T]
		inner join [vwAccount] [Ac] on [Ac].[Guid] = [T].[AccountGuid]
		
	
	update #EndRes Set [Cost] = [Co2].[Code]+'-'+[Co2].[Name]
	From
		#EndRes T
		--inner Join [dbo].[fnGetCostList](@CostGuid) [Co] on [Co].[Guid] = [T].[CostGuid]
		inner join [vwCost] [Co2] on [Co2].[Guid] = [T].[CostGuid]	
		
	update #EndRes Set [ObverseAc] = [Ac3].[Code]+'-'+[Ac3].[Name]
	From
		#EndRes T
		inner Join [vwAccount] [Ac3] on [Ac3].[Guid] = [T].[ObverseAcGuid]
		

	Insert into #EndRes
	(
		[Date],
		[Account],
		[debit],
		[Credit],
		[Note],
		[Doc],
		[Num],
		[Cost],
		[ObverseAc],
		[Kind],
		[Guid],
		[OrderDate]
	)
	Select 
		[Date],
		'' as [Account],
		Sum([debit]),
		Sum([Credit]),
		'' as [Note],
		[Doc],
		[Num],
		'' as [Cost],
		'' as [ObverseAc],
		1 as [Kind],
		[Guid],
		[OrderDate]
	from 
		#EndRes
	Group By
		[Date],
		[Doc],
		[Num],
		[Guid],
		[OrderDate]
	

	Select 
		Sum([debit]) as [debit],
		Sum([Credit]) as [Credit]
	from 
		#EndRes [T]
	where 
		Kind = 1
		
	Select 
		Case when Kind = 1 or @GroupingEntry = 0 then [Date] end as [Date],
		[Account],
		[T].[debit],
		[T].[Credit],
		[T].[Note],
		[T].[ReceiptNo],
		[T].[Doc],
		[T].[DocName],
		[T].[DocNum],
		[T].[Num],
		[Cost],
		[ObverseAc],
		[T].[Kind],
		[T].[Guid],
		[OrderDate],
		0 as [Operation]
	from 
		#EndRes [T]
	where
		Kind = 2 or @GroupingEntry = 1
	Order by 
		[OrderDate] ,[Num], [Kind]

GO
/****** Object:  StoredProcedure [dbo].[PrcDebitCreditMonthly_Years]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcDebitCreditMonthly_Years]
(
	@AccountGuid uniqueidentifier = 0x0,
	@BranchGuid uniqueidentifier = 0x0,
	@CurrencyGuid uniqueidentifier = 0x0,
	@CurrencyVal Float = 1,
	@IsPosted Bit = 1,
	@IsNotPosted Bit = 1,
	@Date1 DateTime = '5/1/2008',
	@Date2 DateTime = '7/1/2012'
)
  
as
	Create Table #Tbl
	(
		[Account] Varchar(256),
		[Month] Varchar(256),
		[Debit] Float,
		[Credit] Float,
		[Balance] Float,
		[AcGuid] uniqueidentifier,
		[Sort] int
	)
	Select * Into #fnGetAccountList From [dbo].[fnGetAccountList](@AccountGuid)
	
	Insert Into #TBL
	Select 
		[Ac].[Code]+'-'+[Ac].[Name],
		dbo.SC('ÞÈá ÔåÑ : ')+dbo.fnmonthName([M].[Date]) as [month],
		Sum([En].[Debit]) as [Debit],
		Sum([En].[Credit]) as [Credit],
		Sum([En].[Debit]) - Sum([En].[Credit]) as [Balance],
		[Ac].[Guid],
		dbo.FnMonth([M].[Date]) - 1
	From 
		dbo.[FnDEntry](@CurrencyGuid, @CurrencyVal) [En]
		inner Join [vwEntry] [m] on [M].[Guid] = [En].[ParentGuid]
		inner Join #fnGetAccountList [Ac] on [Ac].[Guid] = [En].[AcGuid]
		inner join [Account] [Ac2] on [Ac2].[Guid] = [En].[AcGuid]
	where
		[M].[Date] < @Date1
		and ([M].[BranchGuid] = @BranchGuid or @BranchGuid = 0x0)
		and ([En].[IsVisible] = 1 or [En].[CurrencyGuid] = @CurrencyGuid)
		and (
				([M].[IsPosted] = 1 and @IsPosted = 1)
				or ([M].[IsPosted] = 0  and @IsNotPosted = 1)
			)
	Group By
		[Ac].[Code]+'-'+[Ac].[Name]
		,[Ac].[Guid]
		,dbo.SC('ÞÈá ÔåÑ : ')+dbo.fnmonthName([M].[Date])
		,dbo.FnMonth([M].[Date])-1

	Insert Into #TBL
	Select 
		[Ac].[Code]+'-'+[Ac].[Name],
		dbo.fnmonthName([M].[Date]) as [month],
		Sum([En].[Debit]) as [Debit],
		Sum([En].[Credit]) as [Credit],
		Sum([En].[Debit]) - Sum([En].[Credit]) as [Balance],
		[Ac].[Guid],
		dbo.FnMonth([M].[Date])
	From 
		dbo.[FnDEntry](@CurrencyGuid, @CurrencyVal) [En]
		inner Join [vwEntry] [m] on [M].[Guid] = [En].[ParentGuid]
		inner Join [dbo].[#fnGetAccountList]  [Ac] on [Ac].[Guid] = [En].[AcGuid]
		inner join [Account] [Ac2] on [Ac2].[Guid] = [En].[AcGuid]
	where
		([M].[Date] Between @Date1 And @Date2)
		and ([M].[BranchGuid] = @BranchGuid or @BranchGuid = 0x0)
		and ([En].[IsVisible] = 1 or [En].[CurrencyGuid] = @CurrencyGuid)
		and (
				([M].[IsPosted] = 1 and @IsPosted = 1)
				or ([M].[IsPosted] = 0  and @IsNotPosted = 1)
			)
	Group By
		[Ac].[Code]+'-'+[Ac].[Name]
		,[Ac].[Guid]
		,dbo.fnmonthName([M].[Date])
		,dbo.FnMonth([M].[Date])


	Select 
		*
		,(SELECT SUM(Debit - Credit) FROM #TBL [t2] WHERE [t2].[Sort] <= [t1].[Sort] and [t1].[AcGuid] = [t2].[AcGuid]) AS [RunTotal]
	from 
		#TBL [t1]
	Order By
		[Account], [Sort]

GO
/****** Object:  StoredProcedure [dbo].[PrcDecodeHijriDatetoGergDate]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[PrcDecodeHijriDatetoGergDate] 
(
	@Year int, @Month int, @Day int
)
  
as
	Declare @R Datetime

			--,@Y Varchar(256)
			--,@m Varchar(256)
			--,@d Varchar(256)

	Select Top 1 
		@R = Date + @Day -1
	from 
		[HjrConfig] H
	where
		hjrMonth = @Month
		and hjrYear = @year
	Order By
		[hjrMonth]

	--Set @d = Replace(@d,' ','0')
	
	if @R is Null
	begin
			
		Declare @DayCount int, @S Varchar(256)
		Declare @Gdate Datetime Set @Gdate = dbo.fnDateonly(GETDATE())
		Declare @Hy int
		Declare @Hm int
		Declare @Hd int

		Declare @y int 
		Declare @m int 
		Declare @d int 
		
		Set @y = DatePart(Year, @Gdate)
		Set @m = DatePart(Month, @Gdate)
		Set @d = DatePart(Day, @Gdate)
		
		Set @S = Convert(Varchar(256), @Gdate , 131)
	
		Set @Hy = SUBSTRING (@S, 7, 4)
		Set @Hm = SUBSTRING (@S, 4, 2)
		Set @Hd = SUBSTRING (@S, 1, 2)

		Set @hd = Replace(@hd,' ','0')
		Set @hm = dbo.FnFormatNumber(@hm, 2)
		Set @hd = dbo.FnFormatNumber(@hd, 2)
			 
		Declare @IntGDate int, @intHdate int
		Set @intHdate = Cast(dbo.FnFormatNumber(@hy, 4)+dbo.FnFormatNumber(@hm, 2)+dbo.FnFormatNumber(@hd, 2) as int)
		Set @IntGDate = Cast(dbo.FnFormatNumber(@Year, 4)+dbo.FnFormatNumber(@Month, 2)+dbo.FnFormatNumber(@Day, 2) as int)	

		Declare @I int
		Set @I = 0
		while (@intHdate <> @IntGDate) and (@i < 365)
		begin
			Set @i = @I + 1
			--Select @IntGDate, @intHdate, @Gdate
			
			if @IntGDate > @intHdate
			begin
				Set @Gdate = @Gdate + 1
			end
			else
			begin
				Set @Gdate = @Gdate - 1
			end

			Set @y = DatePart(Year, @Gdate)
			Set @m = DatePart(Month, @Gdate)
			Set @d = DatePart(Day, @Gdate)
			
			Set @S = Convert(Varchar(256), @Gdate , 131)
			--Select @S S, @Gdate Date
		
			Set @Hy = SUBSTRING (@S, 7, 4)
			Set @Hm = SUBSTRING (@S, 4, 2)
			Set @Hd = SUBSTRING (@S, 1, 2)

			Set @hd = Replace(@hd,' ','0')
			Set @hm = dbo.FnFormatNumber(@hm, 2)
			Set @hd = dbo.FnFormatNumber(@hd, 2)

			Set @intHdate = Cast(dbo.FnFormatNumber(@hy, 4)+dbo.FnFormatNumber(@hm, 2)+dbo.FnFormatNumber(@hd, 2) as int)
			Set @IntGDate = Cast(dbo.FnFormatNumber(@Year, 4)+dbo.FnFormatNumber(@Month, 2)+dbo.FnFormatNumber(@Day, 2) as int)	
		end
		
		Set @R = @Gdate
	end
	
	if @i >= 365
	Set @R = 0

	Select dbo.fnDateonly(@R)


GO
/****** Object:  StoredProcedure [dbo].[PrcDeleteBackupFilesOver]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[PrcDeleteBackupFilesOver]
(
	@DbName varchar(128) = 'AQ',
	@Path varchar(4000) = 'E:\BK'
)
  
as
	Create Table #DT
	(
		Id Int identity(1,1),
		[date] Datetime,
		[name] Varchar(256)
		
	)
	
	insert into #DT
	([date], [name])
	Select distinct
		[Backupset].[backup_finish_date],
		[backupmediafamily].[physical_device_name]
	from
		msdb..Backupset as Backupset
		inner join
		msdb..backupmediafamily as backupmediafamily on backupmediafamily.media_set_id=Backupset.media_set_id
	where 
		DataBase_Name = @DbName
		and [backupmediafamily].[physical_device_name] Like @Path+'%'
	order by 
		backup_finish_date DESC
		
	Declare @BackupCount int
	Set @BackupCount = (Select value from DMD_const where VName = 'BkNum')
		
	
	DECLARE @cursor_Name CURSOR 
	Set @cursor_Name = CURSOR FAST_FORWARD FOR 
	Select 'Del '+Name from #DT where id > @BackupCount Order By Id
	
	Declare @FileName Varchar(256)
	Declare @DF  Varchar(256)
	OPEN @cursor_Name
	FETCH NEXT FROM @cursor_Name INTO @FileName

--	RECONFIGURE WITH OVERRIDE

--	EXEC sp_configure 'show advanced options', 1
--	EXEC sp_configure 'xp_cmdshell', 1
	

	WHILE @@FETCH_STATUS = 0
	BEGIN

		Set @DF = 'Del '+@FileName
		print @FileName
	  exec xp_cmdshell @DF
	  
	delete
		msdb..Backupset
	from
		msdb..Backupset as Backupset 
		inner join
		msdb..backupmediafamily as backupmediafamily on backupmediafamily.media_set_id=Backupset.media_set_id
	where 
		DataBase_Name = @DbName
		and [backupmediafamily].[physical_device_name] = @FileName
	  
	  FETCH NEXT FROM @cursor_Name INTO @FileName
	
	END
	
	CLOSE @cursor_Name
	DEALLOCATE @cursor_Name
	

GO
/****** Object:  StoredProcedure [dbo].[PrcDeleteEntryContractFee]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[PrcDeleteEntryContractFee]
(
	@Guid uniqueidentifier = 'A3D19ED0-88BB-47F6-857F-F1F30830FEAD'
)
  
as
	Delete Hentry
	From
		Hentry [H]
		inner join FlatContractFee [D] on [D].[Guid] = [H].[Guid]
	where 
		[D].[ParentGuid] = @Guid

	Delete Hentry
	From
		Hentry [H]
		inner join ParkingContractFee [D] on [D].[Guid] = [H].[Guid]
	where 
		[D].[ParentGuid] = @Guid

	Delete Hentry
	From
		Hentry [H]
		inner join LandContractFee [D] on [D].[Guid] = [H].[Guid]
	where 
		[D].[ParentGuid] = @Guid


GO
/****** Object:  StoredProcedure [dbo].[PrcDeleteEntryDateHEntry]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[PrcDeleteEntryDateHEntry]
(
	@Guid uniqueidentifier = 0x0
)
  
as
	Delete Hentry
	From
		Hentry [H]
		inner join [EntryDateDetail] [D] on [D].[Guid] = [H].[Guid]
	where 
		[D].[ParentGuid] = @Guid


GO
/****** Object:  StoredProcedure [dbo].[PrcDeleteFlatBuilding]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[PrcDeleteFlatBuilding]
(
	@BuildingGuid uniqueidentifier = 'B30C0236-34E9-4292-914F-E6C7B19CD6B9',
	@CardKind int = -1
)
  
as
	Set NoCount On
	Create Table #R
	([CostGuid] uniqueidentifier)
	--ÓäÏ ÇáÞíÏ
	if @CardKind = -1
	Delete 
		[LinkCe]
	where 
		[Guid]= @BuildingGuid and [Kind] = 200

	-- Flat
	if (@CardKind = 0) or (@CardKind = 1) or (@CardKind = 2) or (@CardKind = 3) or (@CardKind = 7) or (@CardKind = 8) or (@CardKind = -1) 
	insert into #R
	Select 
		[A].[CostGuid]
	From 
		[Apartment] [A]
	    inner Join [Building] [B] on [B].[Guid] = [A].[BuildingGuid]
    where 
		[B].[Guid] = @BuildingGuid
		and ([A].[CardKind] = @CardKind or @CardKind = -1)

	if (@CardKind = 0) or (@CardKind = 1) or (@CardKind = 2) or (@CardKind = 3) or (@CardKind = 7) or (@CardKind = 8) or (@CardKind = -1) 
	Delete 
		[Apartment]
	From 
		[Apartment] [A]
	    inner Join [Building] [B] on [B].[Guid] = [A].[BuildingGuid]
    where 
		[B].[Guid] = @BuildingGuid
		and ([A].[CardKind] = @CardKind or @CardKind = -1)


	if (@CardKind = 0) or (@CardKind = 1) or (@CardKind = 2) or (@CardKind = 3) or (@CardKind = 7) or (@CardKind = 8) or (@CardKind = -1) 
	Delete 
		[Cost]
	From 
		[Cost] [C]
		inner join [#R] [A] on [A].[CostGuid] = [C].[Guid]


	--Shop
	if (@CardKind = 4 or @CardKind = 6 or @CardKind = -1)
 	insert Into #R
 	Select 
		[A].[CostGuid]
 	From 
 		[Shop] [A]
 	    inner Join [Building] [B] on [B].[Guid] = [A].[BuildingGuid]
     where 
 		[B].[Guid] = @BuildingGuid
 
	if (@CardKind = 4 or @CardKind = 6 or @CardKind = -1)
	Delete 
 		[Shop]
	From 
 		[Shop] [A]
 	    inner Join [Building] [B] on [B].[Guid] = [A].[BuildingGuid]
    where 
 		[B].[Guid] = @BuildingGuid

	if (@CardKind = 4 or @CardKind = 6 or @CardKind = -1)
	Delete 
		[Cost]
	From 
		[Cost] [C]
		inner join [#R] [A] on [A].[CostGuid] = [C].[Guid]



	--Parking
	if (@CardKind = 5 or @CardKind = -1)
 	insert Into #R
 	Select 
		[A].[CostGuid]
 	From 
 		[Parking] [A]
 	    inner Join [Building] [B] on [B].[Guid] = [A].[BuildingGuid]
     where 
 		[B].[Guid] = @BuildingGuid
 
	if (@CardKind = 5 or @CardKind = -1)
 	Delete 
 		[Parking]
	From 
 		[Parking] [A]
 	    inner Join [Building] [B] on [B].[Guid] = [A].[BuildingGuid]
    where 
 		[B].[Guid] = @BuildingGuid

	if (@CardKind = 5 or @CardKind = -1)
	Delete 
		[Cost]
	From 
		[Cost] [C]
		inner join [#R] [A] on [A].[CostGuid] = [C].[Guid]



GO
/****** Object:  StoredProcedure [dbo].[PrcDeleteOfficeBuilding]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[PrcDeleteOfficeBuilding]
(
	@BuildingGuid uniqueidentifier = 'B6B748F3-3B52-4A89-882D-17278C210E4C',
	@Class Varchar(256) = ''
)
  
as
	Set NoCount On
	-- Flat
	Select 
		[A].[CostGuid]
		Into #R
	From 
		[Apartment] [A]
	    inner Join [Building] [B] on [B].[Guid] = [A].[BuildingGuid]
    where 
		[B].[Guid] = @BuildingGuid
	and ([A].[Class] = @Class)

	Delete 
		[Apartment]
	From 
		[Apartment] [A]
	    inner Join [Building] [B] on [B].[Guid] = [A].[BuildingGuid]
    where 
		[B].[Guid] = @BuildingGuid
	and ([A].[Class] = @Class)

	Delete 
		[Cost]
	From 
		[Cost] [C]
		inner join [#R] [A] on [A].[CostGuid] = [C].[Guid]


GO
/****** Object:  StoredProcedure [dbo].[PrcDeleteTable]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[PrcDeleteTable]
(
	@TblName Varchar(256) = '',
	@ToDataBaseName Varchar(256) = ''
)
  
as
	if @TblName = '' Return 

	Declare @Sql Varchar(5000)

	Set @sql = ' 
	Delete '+@ToDataBaseName+'..['+@TblName+']'
	--Print @sql
	
	exec(@sql)


GO
/****** Object:  StoredProcedure [dbo].[PrcDifferenceCurrencyRate]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcDifferenceCurrencyRate]
(
	@AccountGuid uniqueidentifier = 'F84CEF6C-2C08-4F8C-8209-978F2FE032DB',
	@Date1 DateTime = '1/1/2008',
	@Date2 DateTime = '12/30/2008'
)
  
as
	Select * Into #fnGetAccountList From [dbo].[fnGetAccountList](@AccountGuid)
	
	Select
		[Ac].[Code]+'-'+[Ac].[Name] as [Account],
		[Ac].[Guid] as [AccountGuid],
		[Ac2].[CurrencyGuid] as [AccountCurrencyGuid],
		Sum([En].[Debit]*[En].[CurrencyVal]) as [Debit],
		Sum([En].[Credit]*[En].[CurrencyVal]) as [Credit],

		Sum(Isnull([En].[Debit]*[En].[CurrencyVal],0)) - Sum(Isnull([En].[Credit]*[En].[CurrencyVal],0)) as [Balance],

		-- ãä ÃÌá ÞíÏ ÝÑæÞÇÊ ÇáÞØÚ
		Sum(case when ([En].[CurrencyGuid] = [Ac2].[CurrencyGuid] or isvisible = 1) then Isnull([En].[Debit],0) end)
--														/ (case when dbo.[FnGetCurrencyVal] ([ac2].[CurrencyGuid], [M].[Date]) = 1 then Null
--															  else dbo.[FnGetCurrencyVal] ([ac2].[CurrencyGuid], [M].[Date]) end 
--														)
			
		as [LDebit]
		,
		 Sum(case when ([En].[CurrencyGuid] = [Ac2].[CurrencyGuid] or isvisible = 1) then Isnull([En].[Credit],0) end)
--													/ (case when dbo.[FnGetCurrencyVal] ([ac2].[CurrencyGuid], [M].[Date]) = 1 then Null
--															  else dbo.[FnGetCurrencyVal] ([ac2].[CurrencyGuid], [M].[Date]) end 
--														)
		as [LCredit]
		
		,dbo.[FnGetCurrencyVal] ([My].[Guid], @Date2) as [CloseRate]
		into #Res
	From 
		[DEntry] [En]
		inner Join [vwEntry] [m] on [M].[Guid] = [En].[ParentGuid]
		inner Join [dbo].[#fnGetAccountList] [Ac] on [Ac].[Guid] = [En].[AcGuid]
		inner join [account] [ac2] on [ac2].[guid] = [ac].[Guid]
		inner join [vwCurrency] [my] on [My].[Guid] = [Ac2].[CurrencyGuid]
	where 
		([M].[Date] Between @Date1 and @Date2)
		
	Group By
		[Ac].[Code]+'-'+[Ac].[Name],
		[Ac].[Guid],
		[Ac2].[CurrencyGuid],
		dbo.[FnGetCurrencyVal] ([My].[Guid], @Date2)

	Select 
		*,
		([LDebit] - [LCredit]) as [LBalance],
		([LDebit] - [LCredit]) * [CloseRate] as [CloseBalance],
		[Balance] - (([LDebit] - [LCredit]) * [CloseRate]) as [DiffCurrency]
	from 
		#res

GO
/****** Object:  StoredProcedure [dbo].[PrcDoBackupJob]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[PrcDoBackupJob] 
	@JobType [int] = 4, 
	@DBName [varchar](256) = 'mydata', 
	@DirName [varchar](1000) = 'D:\AQBackup', 
	@BkNum [INT] = 2
  
As 
	SET NOCOUNT ON 
	
	DECLARE @DateStr [varchar](20) 
	DECLARE @DayStr [varchar](8) 
	DECLARE @MonthStr [varchar](8) 
	DECLARE @FileName [varchar](1000) 
	if(Month( GetDate()) > 9) 
		SELECT @MonthStr = CAST( Month( GetDate()) AS [VARCHAR](5))  
	ELSE 
		SELECT @MonthStr = '0' + CAST( Month( GetDate()) AS [VARCHAR](5))  
	if(DAY( GetDate()) > 9) 
		SELECT @DayStr = CAST( DAY( GetDate()) AS [VARCHAR](5))  
	ELSE 
		SELECT @DayStr = '0' + CAST( DAY( GetDate()) AS [VARCHAR](5))  
	SELECT @DateStr =  CAST( YEAR( GetDate()) AS [VARCHAR](10)) + 
						  @MonthStr + @DayStr + 
						Cast(DatePart(hh, GetDate()) AS varchar(2)) + '' +
						Cast(DatePart(mi, GetDate()) AS varchar(2)) +
						Cast(DatePart(SS, GetDate()) AS varchar(2)) +
						'.bak'						  
	SELECT @FileName = 
		case @JobType 
			when 16 then @DirName + '\AqrBk_' + @DBName + '_' +  @DateStr 
			when 8  then @DirName + '\AqrBk_' + @DBName + '_' +  @DateStr 
			when 4  then @DirName + '\AqrBk_' + @DBName + '_' +  @DateStr 
		end 
		
				
	--if( EXISTS( SELECT * FROM 
	--	[msdb].[dbo].[BackupMediaFamily] as [bmf] 
	--	INNER JOIN 
	--	[msdb].[dbo].[BackupSet] as [bs] 
	--	on 
	--	[bs].[Media_Set_id] = [bmf].[Media_Set_id] 
	--	WHERE [bs].[database_name] = @DbName 
	--	AND [bmf].[physical_Device_name] = @FileName)) 
	--		RETURN 0 
	--		--Backup DataBase @DBName To Disk = @FileName 
	--			--with DIFFERENTIAL 
	--else 
		Backup DataBase @DBName To Disk = @FileName  WITH DESCRIPTION = '' ,COMPRESSION,init
		
		
	--EXEC [repDeleteExtraJobBackup] @JobType, @BkNum, @DBName 
	exec [PrcDeleteBackupFilesOver] @DbName , @DirName

GO
/****** Object:  StoredProcedure [dbo].[PrcDoDistributiveEntry]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcDoDistributiveEntry]
(
	@Guid uniqueidentifier = '118F99D6-7A6A-4961-BEBE-43FA8632898F'
)
  
as
	Select
		D.AcGuid as Guid
	into #DisAccount
	From 
		DEntry D
		inner join Account Ac on Ac.Guid = D.AcGuid and Ac.Type = 3
	where
		D.ParentGuid = @Guid
		
	--return

	insert into DEntry
	([Number],[Guid],[ParentGuid],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[ObverseAcGuid],[CostGuid],[Note],[IsVisible])
	Select
		D.Number,
		NEWID(),
		D.ParentGuid,
		S.AccountGuid,
		d.Debit * s.[Percent] / 100,
		d.Credit * s.[Percent] / 100,
		D.CurrencyGuid,
		D.CurrencyVal,
		D.ObverseAcGuid,
		D.CostGuid,
		D.Note,
		D.IsVisible
	From 
		DEntry D
		inner join Account Ac on Ac.Guid = D.AcGuid and Ac.Type = 3
		inner join [AccountDistributive] S on S.ParentGuid = Ac.Guid
	where
		D.ParentGuid = @Guid
		
	Delete DEntry
	From 
		DEntry D
		inner join #DisAccount Ac on Ac.Guid = D.AcGuid 
	where
		D.ParentGuid = @Guid	
		
	if exists(Select 
					Top 1 * 
			  From 
					DEntry D
					inner join Account Ac on Ac.Guid = D.AcGuid 
			  where
				D.ParentGuid = @Guid
				and Ac.Type = 3)
				
	exec [PrcDoDistributiveEntry] @Guid
	
	

GO
/****** Object:  StoredProcedure [dbo].[PrcDropColumn]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[PrcDropColumn]
(
	@TableName  Varchar(256) = 'LeaseApartment', 
	@ColumnName Varchar(256) = 'OtherFeeAccount1GUID'
)
  
as
	SET @TableName = REPLACE(REPLACE(@TableName, ']', ''), '[', '') 
	SET @ColumnName = REPLACE(REPLACE(@ColumnName, ']', ''), '[', '') 

	Declare @TblId Int,
			@DF_Id Int,
			@DFName Varchar(256)			

	Select @TblId = [id] from Sysobjects
	where Name = @TableName

	
	--Print @TblId

	Select @DF_Id = [Cdefault] from SysColumns
	where 
		[Name] = @ColumnName 
		and ([id]=@TblId)

	
	--Print @DF_Id

	Select @DFName = [Name] from Sysobjects
	where 
		([id]= @DF_Id)

	Declare @Sql Varchar(800)

	if @DF_Id <> 0
	begin	
		Set @Sql = 'alter Table '+@TableName+' Drop '+@DFName
		
		Print @Sql
		Exec (@SQl)
		Print 'successfully'
	end

	Select
		@DFName = F.Name
	from 
		SysObjects F
		inner join SysObjects T on T.id = F.Parent_Obj
		inner join syscolumns clmns ON clmns.id = T.id
		inner join dbo.sysforeignkeys AS colfk 	on colfk.fkey = clmns.colid and colfk.fkeyid = clmns.id
		inner join dbo.sysobjects Ftbl On Ftbl.id = colfk.rkeyid and F.Name = 'FK_'+T.name+'_'+clmns.[Name]
		inner join dbo.syscolumns AS Fclmns ON Fclmns.id = colfk.rkeyid and Fclmns.ColId = colfk.rkey
	where 
		F.XType = 'F'
		and T.name = @TableName 
		and clmns.[Name] = @ColumnName
	
	if isNull(@DFName,'') <> ''
	begin	
		Set @Sql = '	
		alter Table '+@TableName+' Drop '+@DFName
		
		Print @Sql
		Exec (@SQl)
		Print 'successfully'
	end

	if Exists(	Select * from SysColumns where Name = @ColumnName
	and Id = @TblId)
	begin

		Set @Sql = 'alter Table '+@TableName+' Drop Column '+@ColumnName
		Print @Sql
		Exec (@SQl)
		Print 'successfully'
	end
	else
	Print 'Field '+@ColumnName+' Not exists'


GO
/****** Object:  StoredProcedure [dbo].[PrcElectricityBill]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcElectricityBill]
(
	@CustGuid uniqueidentifier = 0x0,
	@FlatGuid uniqueidentifier = 0x0,
	@ShopGuid uniqueidentifier = 0x0,
	@Value1 Float = 0,
	@Value2 Float = 0,
	@Mark Bit = 1,
	@NotMark Bit = 1,
	@ShowBalancedBill bit = 1,
	@Collect int = 2,
	@LastOnly bit = 1,
	@activeDate bit = 0,
	@Date1 DateTime = '1/1/2007',
	@Date2 DateTime = '1/1/2008'
)
 
as

	Select 
		T.Name as [TypeName],
		B.Name as [BuildingName],
		Cu.Name as CustName,
		E.[ElecCounterNo],
		A.FlatNo,
		E.Date,
		E.[OldCounter],
		E.[Counter],
		E.[Counter] - E.[OldCounter] as [Qty],
		E.[Consumption],		

		E.[WOldCounter],
		E.[WCounter],
		E.[WCounter] - E.[WOldCounter] as [WQty],
		E.[WaterValue],
		
		E.[DrainageValue],
		E.[FineValue],
		E.[FeeValue],
		E.[Discount],
		E.[Extra],
		E.[Overdue],
		E.[TotalValue],
		
		CAST(0 as Float) AS CheckValue,
		CAST(0 as Float) AS CachValue,
		CAST(0 as Float) AS CollectValue,
		CAST(0 as Float) AS RestValue,
		
		E.isCollect,
		
		E.[Guid],
		E.[ContractGuid],

		[cu].[Barcode] as [Cust_Barcode], 		[cu].[LtnName] as [Cust_LtnName], 		[cu].[CardKind] as [Cust_CardKind], 		[cu].[CardKind2] as [Cust_CardKind2], 		[cu].[Nationality] as [Cust_Nationality], 		[cu].[LtnNationality] as [Cust_LtnNationality], 		[cu].[Profession] as [Cust_Profession], 		[cu].[LtnProfession] as [Cust_LtnProfession], 		[cu].[PassportNO] as [Cust_PassportNO], 		[cu].[PassportExpireDate] as [Cust_PassportExpireDate], 		[cu].[Domicile] as [Cust_Domicile], 		[cu].[Security] as [Cust_Security], 		[cu].[LtnSecurity] as [Cust_LtnSecurity], 		[cu].[PhoneJob] as [Cust_PhoneJob], 		[cu].[Mobile] as [Cust_Mobile], 		[cu].[Note] as [Cust_Note], 		[cu].[Trademark] as [Cust_Trademark], 		[cu].[LtnTrademark] as [Cust_LtnTrademark], 		[cu].[MemoSecurity] as [Cust_MemoSecurity], 		[cu].[LtnMemoSecurity] as [Cust_LtnMemoSecurity], 		[cu].[Address] as [Cust_Address], 		[cu].[LtnAddress] as [Cust_LtnAddress], 		[cu].[BoxNo] as [Cust_BoxNo], 		[cu].[PersonalityNo1] as [Cust_PersonalityNo1], 		[cu].[PersonalityNo2] as [Cust_PersonalityNo2], 		[cu].[Fax] as [Cust_Fax], 		[cu].[EMail] as [Cust_EMail], 		[cu].[Adjective] as [Cust_Adjective], 		[cu].[LtnAdjective] as [Cust_LtnAdjective], 		[cu].[CkHideInSearch] as [Cust_CkHideInSearch], 		[cu].[ban] as [Cust_ban], 		[cu].[BankName] as [Cust_BankName], 		[cu].[BankAccCode] as [Cust_BankAccCode], 		[cu].[Birthday] as [Cust_Birthday], 		[cu].[DomicileEndDate] as [Cust_DomicileEndDate], 		[cu].[PersonalityEndDate] as [Cust_PersonalityEndDate], 		[cu].[CustNote1] as [Cust_CustNote1], 		[cu].[CustNote2] as [Cust_CustNote2], 		[cu].[CustNote3] as [Cust_CustNote3], 		[cu].[CustNote4] as [Cust_CustNote4], 		[cu].[CustNote5] as [Cust_CustNote5], 		[cu].[CustNote6] as [Cust_CustNote6], 		[cu].[CustNote7] as [Cust_CustNote7], 		[cu].[banContract] as [Cust_banContract], 
		[Cu].[AccountBalance] as [Cust_AccountBalance],

		[A].[Number] as [Contract_Number],
		[A].[ContractNo]  as [Contract_ContractNo],
		[A].[EditDate]  as [Contract_EditDate],
		[A].[FromDate]  as [Contract_FromDate],
		[A].[ToDate]  as [Contract_ToDate],
		[A].[ContractDays]  as [Contract_ContractDays],
		[A].[ContractDaysDifference]  as [Contract_ContractDaysDifference],
		[A].[BuildingArName]  as [Contract_BuildingArName],
		[A].[BuildingLtnName]  as [Contract_BuildingLtnName],
		[A].[FlatNo]  as [Contract_FlatNo],
		[A].[Note2]  as [Contract_Note2],
		[A].[Rent] as [ContractValue],
		[A].[DiscountPercent] As [Contract_DiscountPercent],
		[A].[DiscountValue] As [Contract_DiscountValue],
		[A].[Rent] - [A].[DiscountValue] as [RentAfterDiscount],
		[A].[MonthlyValue]   as [Contract_MonthlyValue],
		[A].[MonthlyValue] * 12.00 as [Contract_YearValue],
		[A].[CurrencyName]  as [Contract_CurrencyName],
		[A].[InsuranceValueOld]  as [Contract_InsuranceValueOld],
		[A].[InsuranceValue]  as [Contract_InsuranceValue],
		[A].[InsuranceValuePercent]  as [Contract_InsuranceValuePercent],
		[A].[CommissionFromCustValue]  as [Contract_CommissionFromCustValue],
		[A].[CommissionFromOwnerValue]  as [Contract_CommissionFromOwnerValue],
		[A].[ElectricityInsurance]  as [Contract_ElectricityInsurance],
		[A].[ElectricityCounter]  as [Contract_ElectricityCounter],
		[A].[ContractPrice]  as [Contract_ContractPrice],
		[A].[CertificatValue]  as [Contract_CertificatValue],
		[A].[OtherFee]  as [Contract_OtherFee],
		[A].[FlatKind] as [Contract_FlatKin],
		[A].[ApartmentType]  as [Contract_ApartmentType],
		[A].[NewStateStr]  as [Contract_NewStateStr],
		Case when isnull([A].FlatOwner,0) = 0 then dbo.sc('ãáß') else dbo.sc('ÅÏÇÑÉ ÚÞÇÑÇÊ') end  as [Contract_FlatOwnerStr],
		[A].[Purpose]  as [Contract_Purpose],
		[A].[ResidentCount]  as [Contract_ResidentCount],
		[A].[Trademark]  as [Contract_Trademark],
		[A].[whereabouts]  as [Contract_whereabouts],
		[A].[RentDuration]  as [Contract_RentDuration],
		[A].[LtnRentDuration]  as [Contract_LtnRentDuration],
		[A].[Rentype]  as [Contract_Rentype],
		[A].[LtnRentype]  as [Contract_LtnRentype],
		[A].[TermsOfPayment]  as [Contract_TermsOfPayment],
		[A].[LtnTermsOfPayment]  as [Contract_LtnTermsOfPayment],

		0 as [Sort]
	into #Elc
	From 
		[ElectricityBill] E
		inner join [ElectricityType] T on T.Guid = E.TypeGuid
		inner join vwBuilding B on B.Guid = E.BuildingGuid
		inner join vwCustomer Cu on Cu.Guid = E.CustGuid
		inner join [vwLeaseApartment] A on A.Guid = E.contractGuid
		inner join [Resource] R on R.Guid = B.Guid and R.kind = 1 and Spid = @@spid
	where
		(E.CustGuid = @CustGuid or @CustGuid = 0x0)
		and (E.FlatGuid = @FlatGuid or @FlatGuid = 0x0)
		and (E.ShopGuid = @ShopGuid or @ShopGuid = 0x0)
		and (E.TotalValue between @Value1 and @Value2 or @Value2 = 0) 
		and (E.TotalValue = @Value1 or @Value2 <> 0 or @Value1 = 0) 
		and (
				([E].[Mark] = 1 and @Mark = 1)
				or ([E].[Mark] = 0 and @NotMark = 1)
			)
		and (E.date Between @Date1 and 	@Date2 or @activeDate = 0)
		and (
				isNull(E.isCollect,0) = @Collect or @Collect = 2
			)
		
	-- ÇáÔíßÇÊ-----------------

	Select 
		LL.ContractGuid,
		SUM(LL.Value) as Value 
	into #Elc_Check
	from 
		Checks S
		inner join [LinkCheckContract] LL on LL.ParentGuid = S.Guid
		inner join #elc E on LL.ContractGuid = E.Guid
	Group by 
		LL.ContractGuid
			
	update 
		#elc
	Set 
		Checkvalue = C.Value
	From
		#elc E
		inner join #Elc_Check C on C.ContractGuid = E.Guid
		
	------------------------------------------ ÇáÔíßÇÊ
	Select 
		C.ContractGuid, 
		SUM(C.Value) as Value 
	into #Elc_Cach
	from 
		#elc E
		inner join vwElectricityCachPayment C on C.ContractGuid = E.Guid
	Group by 
		C.ContractGuid
		
	update 
		#elc
	Set 
		Cachvalue = C.Value
	From
		#elc E
		inner join #Elc_Cach C on C.ContractGuid = E.Guid

	-----ßÇÔ ----------------------------------
	----------ÇáãÈáÛ ÇáãÞÈæÖ
	update 
		#elc
	Set 
		CollectValue = Cachvalue + CheckValue,
		RestValue = Totalvalue - (Cachvalue + CheckValue) 
	-------------------------------------ßÇÔ	

	--if @ShowBalancedBill = 0
	--Delete #Elc where RestValue = 0
	
	CREATE INDEX IX_ElcRep_Sort ON #Elc (TypeName, buildingName, CustName, FlatNo,Date)
	
	Alter Table #Elc add id int identity(1,1)
	
	Select 
		Max(id) as id
	into #LastID
	From
		#Elc
	Group By
		ContractGuid
	Order By
		id
		
	
	insert into #Elc
	([TypeName],[Qty],[Consumption],[WaterValue],[DrainageValue],[FineValue],[FeeValue],[Discount],[Extra],[Overdue],[TotalValue],
		CheckValue,CachValue,CollectValue,RestValue,[Sort],[Guid],[ContractGuid])
	Select 
		dbo.SC('ÇáãÌãæÚ') as [TypeName],
		Sum([Qty]),
		Sum([Consumption]),
		Sum([WaterValue]),
		Sum([DrainageValue]),
		Sum([FineValue]),
		Sum([FeeValue]),
		Sum([Discount]),
		Sum([Extra]),
		Sum([Overdue]),
		Sum([TotalValue]),

		Sum(CheckValue),
		Sum(CachValue),
		Sum(CollectValue),
		Sum(RestValue),

		1 as [Sort],
		0x0,
		0x0
	From 
		#Elc E
		inner join #LastID L on L.id = E.id
		
	Select 
		E.*,
		Case when L.id is Not Null then 1 else 0 end as [IsLast]
	from 
		#Elc E
		left join #LastID L on L.id = E.id
	where
		(L.id is Not Null or @LastOnly = 0 or Sort = 1)
	Order By
		Sort, id
		
	

GO
/****** Object:  StoredProcedure [dbo].[PrcEndFlatContract]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcEndFlatContract]
(
	@MaxDate int = 42644
)
  
as
	
	Declare @RC int

	----Diable Index
	exec PrcCheckIndex '', 'LeaseApartment', 0

	--ÇáÈÇÆÚ
	Declare @SalesMan uniqueidentifier	
	Select @SalesMan = [Str] from [Realty_Detail_users]
    where [ParentGuid]=(Select Top 1 userGuid from CurrentUsers where Spid = @@spid)
    and [IdCard]= 34
    
    if @SalesMan = 0x0
    Set @SalesMan = Null
    
	
	--ÌáÈ ÂÎÑ ÚÞÏ ááÔÞÉ ÇáãÍÏÏÉ
	Select
		ApartmentGuid,
		MAX(FromDate) as FromDate
	into #LastContract
    From 	
		LeaseApartment [Tb]
		inner join Resource R on R.Guid = tb.Guid and Spid = @@Spid
	where
		[Tb].[IsAutoRenewal] = 1
	Group by
		ApartmentGuid
	
	--ÝÍÕ ÇáÊÇÑíÎ
	Declare @p_FromDate Datetime,
			@p_ToDate Datetime,
			@P_RealtyGuid uniqueidentifier
			
	Create Table #T_RNConmp_contra
	(Number int, Guid uniqueidentifier)
	DECLARE @cursor_Name CURSOR 
	Set @cursor_Name = CURSOR FAST_FORWARD FOR 

	Select
		[Tb].[ApartmentGuid], 
		Case 
			when [ContractFinish] = 0 then Dateadd(Day,1,[ToDate]) 
			when [ContractFinish] = 1 then Dateadd(Day,1,[ContractFinishDate]) 
		end as [FromDate],
		
		Case when Period <> 12 then dbo.FnAddDate('m',Period+1,
											Case 
												when [ContractFinish] = 0 then [ToDate]
												when [ContractFinish] = 1 then [ContractFinishDate]
											end)
			 when Period = 12 then Dateadd(Day,DATEDIFF(Day, [Tb].Fromdate, [Tb].Todate),
											Case 
												when [ContractFinish] = 0 then [ToDate]
												when [ContractFinish] = 1 then [ContractFinishDate]
											end)
		end as [ToDate]
	From 	
		LeaseApartment [Tb]
		inner join [vwContractType] [T] on [T].[Guid] = [tb].[TypeGuid]
		inner join Resource R on R.Guid = tb.Guid and Spid = @@Spid
		
		inner join #LastContract L on L.ApartmentGuid = tb.ApartmentGuid and L.FromDate = tb.FromDate
	
	OPEN @cursor_Name
	FETCH NEXT FROM @cursor_Name INTO @P_RealtyGuid, @p_FromDate, @p_ToDate
			
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
		insert into #T_RNConmp_contra
		exec PrcTestRentedFlat 0x0, @P_RealtyGuid, @p_FromDate, @p_ToDate
	  FETCH NEXT FROM @cursor_Name INTO @P_RealtyGuid, @p_FromDate, @p_ToDate
	
	END
	
	CLOSE @cursor_Name
	DEALLOCATE @cursor_Name
	-------------
	
	--ÅäåÇÁ ÇáÚÞæÏ
	Update
		LeaseApartment
	set
		ContractFinish = 1,
		ContractFinishDate = tb.ToDate
    From 	
		LeaseApartment [Tb]
		inner join [vwContractType] [T] on [T].[Guid] = [tb].[TypeGuid]
		inner join Resource R on R.Guid = tb.Guid and Spid = @@Spid
		
		inner join #LastContract L on L.ApartmentGuid = tb.ApartmentGuid and L.FromDate = tb.FromDate
	where
		Tb.Guid Not in (Select Guid from #T_RNConmp_contra)
	
	insert into dbo.[LeaseApartment] 
	([Number], [Guid], [SecLvl], [EditDate], [Mark], [TypeGuid], [ContractNo], [CustomerGuid], [RentInfoGuid], [SalesManGuid], [BuildingGuid], [ApartmentGuid], [ApartmentType], [CostGuid], [FromDate], [ToDate], [Period], [RentContractType], [Rent], [MonthlyValue], [CurrencyGuid], [CurrencyVal], [PayType], [Note], [Note2], [Trademark], [Purpose], [Whereabouts], [LeaseKind], [RevenueAccountGuid], [CustAccountGuid], [CommissionFromCustPercent], [CommissionFromCustValue], [AcCommissionFromCustGuid], [AcCommissionFromCustNote], [CommissionFromOwnerPercent], [CommissionFromOwnerValue], [AcCommissionFromOwnerGuid], [AcCommissionFromOwnerNote], [CreateContractEntry], [ContractFinish], [ContractFinishDate], [ResultingAmount], [ResultingAmount2], [RoundKind], [ResultingNote], [Fine], [FineAccount], [CreateResultingEntry], [FineNote], [InsuranceValuePercent], [InsuranceValue], [InsuranceAccountGuid], [InsuranceValueOld], [ContractPrice], [AccountContractPrice], [CertificatValue], [AccountCertificatValue], [RentDuration], [Rentype], [TermsOfPayment], [ResidentCount], [ElectricityInsurance], [Step1Complete], [Step2Complete], [Step3Complete], [Step4Complete], [Step5Complete], [Certification], [DiscountPercent], [DiscountValue], [DiscountAccountGuid], [UserGuid], [BranchGuid], [ElectricityCounter], [FineRevenueAccountGUID], [NewState], [OtherFee], [OtherFeeAccountGUID], [License1No], [License2No], [License3No], [License1Date1], [License2Date1], [License3Date1], [License1Date2], [License2Date2], [License3Date2], [Ltnwhereabouts], [LtnPurpose], [LtnRentDuration], [LtnRentype], [LtnTermsOfPayment], [IsRounded], [Leave], [LeaveDate], [CountOldContract], [AcquittancePrinted], [AcquittancePrintDate], [AcquittancePrintedByGuid], [Judicial], [PrvContractGuid],  [IsAutoRenewal])
	Select	
		Null as [Number], 
		Newid() as [Guid], 
		[Tb].[SecLvl], 
		dbo.fndateonly(GETDATE()) as [EditDate], 
		[Tb].[Mark], 
		[Tb].[TypeGuid], 
		[Tb].[ContractNo]+'/2' as [ContractNo], 
		[Tb].[CustomerGuid], 
		[Tb].[RentInfoGuid], 
		@SalesMan as [SalesManGuid], 
		[Tb].[BuildingGuid], 
		[Tb].[ApartmentGuid], 
		[Tb].[ApartmentType], 
		[Tb].[CostGuid], 
		Case 
			when [ContractFinish] = 0 then Dateadd(Day,1,[ToDate]) 
			when [ContractFinish] = 1 then Dateadd(Day,1,[ContractFinishDate]) 
		end as [FromDate],
		
		Case when Period <> 12 then dbo.FnAddDate('m',Period+1,
											Case 
												when [ContractFinish] = 0 then [ToDate]
												when [ContractFinish] = 1 then [ContractFinishDate]
											end)
			 when Period = 12 then Dateadd(Day,DATEDIFF(Day, [Tb].Fromdate, [Tb].Todate),
											Case 
												when [ContractFinish] = 0 then [ToDate]
												when [ContractFinish] = 1 then [ContractFinishDate]
											end)
		end as [ToDate],
		[Tb].[Period], 
		[Tb].[RentContractType], 
		[Tb].[Rent], 
		[Tb].[MonthlyValue], 
		[Tb].[CurrencyGuid], 
		[Tb].[CurrencyVal], 
		[Tb].[PayType], 
		[Tb].[Note], 
		[Tb].[Note2], 
		[Tb].[Trademark], 
		[Tb].[Purpose], 
		[Tb].[Whereabouts], 
		[Tb].[LeaseKind], 
		[Tb].[RevenueAccountGuid], 
		[Tb].[CustAccountGuid], 
		case when SUBSTRING([OpNewContract], 4, 1) = '1' then [CommissionFromCustPercent] else 0 end [CommissionFromCustPercent], 
		case when SUBSTRING([OpNewContract], 4, 1) = '1' then [CommissionFromCustValue] else 0 end as [CommissionFromCustValue],
		[Tb].[AcCommissionFromCustGuid], 
		[Tb].[AcCommissionFromCustNote], 
		case when SUBSTRING([OpNewContract], 5, 1) = '1' then [CommissionFromOwnerPercent] else 0 end [CommissionFromOwnerPercent], 
		case when SUBSTRING([OpNewContract], 5, 1) = '1' then [CommissionFromOwnerValue] else 0 end [CommissionFromOwnerValue],
		[Tb].[AcCommissionFromOwnerGuid], 
		[Tb].[AcCommissionFromOwnerNote], 
		[Tb].[CreateContractEntry], 
		Cast( 0 as bit) as [ContractFinish], 
		Cast( Null as DateTime)  as [ContractFinishDate],
		0 as [ResultingAmount],
		0 as [ResultingAmount2],
		[Tb].[RoundKind], 
		[Tb].[ResultingNote], 
		0 as [Fine],
		[Tb].[FineAccount], 
		Cast( 0 as bit) as [CreateResultingEntry],
		[Tb].[FineNote], 
		[Tb].[InsuranceValuePercent], 
		0 as [InsuranceValue],
		[Tb].[InsuranceAccountGuid], 
		[InsuranceValue] + Isnull([InsuranceValueOld],0) as [InsuranceValueOld],
		case when SUBSTRING([OpNewContract], 1, 1) = '1' then [ContractPrice] else 0 end as [ContractPrice], 
		[Tb].[AccountContractPrice], 
		case when SUBSTRING([OpNewContract], 2, 1) = '1' then [CertificatValue] else 0 end [CertificatValue],
		[Tb].[AccountCertificatValue], 
		[Tb].[RentDuration], 
		[Tb].[Rentype], 
		[Tb].[TermsOfPayment], 
		[Tb].[ResidentCount], 
		[Tb].[ElectricityInsurance], 
		[Tb].[Step1Complete], 
		[Tb].[Step2Complete], 
		[Tb].[Step3Complete], 
		[Tb].[Step4Complete], 
		[Tb].[Step5Complete], 
		[Tb].[Certification], 
		[Tb].[DiscountPercent], 
		[Tb].[DiscountValue], 
		[Tb].[DiscountAccountGuid], 
		[Tb].[UserGuid], 
		[Tb].[BranchGuid], 
		[Tb].[ElectricityCounter], 
		[Tb].[FineRevenueAccountGUID], 
		[Tb].[NewState], 
		case when SUBSTRING([OpNewContract], 3, 1) = '1' then [OtherFee] else 0 end OtherFee,		
		
		[Tb].[OtherFeeAccountGUID], 
		[Tb].[License1No], 
		[Tb].[License2No], 
		[Tb].[License3No], 
		[Tb].[License1Date1], 
		[Tb].[License2Date1], 
		[Tb].[License3Date1], 
		[Tb].[License1Date2], 
		[Tb].[License2Date2], 
		[Tb].[License3Date2], 
		[Tb].[Ltnwhereabouts], 
		[Tb].[LtnPurpose],
        [Tb].[LtnRentDuration],
        [Tb].[LtnRentype],
        [Tb].[LtnTermsOfPayment],
        [Tb].[IsRounded],
        [Tb].[Leave],
        [Tb].[LeaveDate],
        [Tb].[CountOldContract],
        [Tb].[AcquittancePrinted],
        [Tb].[AcquittancePrintDate],
        [Tb].[AcquittancePrintedByGuid],
        [Tb].[Judicial],
        [Tb].[PrvContractGuid],
        [Tb].[IsAutoRenewal]
    From 	
		LeaseApartment [Tb]
		inner join [vwContractType] [T] on [T].[Guid] = [tb].[TypeGuid]
		inner join Resource R on R.Guid = tb.Guid and Spid = @@Spid
		
		inner join #LastContract L on L.ApartmentGuid = tb.ApartmentGuid and L.FromDate = tb.FromDate
	where
		[Tb].[IsAutoRenewal] = 1
		and Tb.ApartmentGuid Not in (Select Guid from #T_RNConmp_contra)
	
	Set @RC = @@ROWCOUNT

	Declare @CreateEntry bit, 
			@Guid uniqueidentifier,
			@TypeGuid uniqueidentifier
			
	-- ÃäãÇØ ÇáÚÞæÏ
		Create Table #T_RNCon
		(
			[Id] int Identity(1,1),
			[Guid] Uniqueidentifier,
			[TypeGuid] Uniqueidentifier,
			CreateEntry bit
		)
		insert into #T_RNCon
		([Guid], [TypeGuid],CreateEntry)	
		Select 
			[Guid],
			[TypeGuid],
			CreateContractEntry
		From
			[LeaseApartment]
		where 
			[Number] is Null
		Order By
			[FromDate]

		Alter Table [LeaseApartment] Disable Trigger All
		
		--	ÇÚÇÏÉ ÊæáíÏ ÇáÞíæÏ
		DECLARE cursor_Name CURSOR FAST_FORWARD FOR 
		Select Guid, [TypeGuid],CreateEntry from #T_RNCon
		
		OPEN cursor_Name
		FETCH NEXT FROM cursor_Name INTO @Guid, @TypeGuid,@CreateEntry
		
		WHILE @@FETCH_STATUS = 0
		BEGIN
			Update [LeaseApartment] Set Number = (Select Max(Number) + 1 From [LeaseApartment] where TypeGuid = @TypeGuid)
			where 
				(Guid = @Guid )
				
			if @CreateEntry = 1
			begin
				exec [PrcCreateContractFlatShopEntry] @Guid, @MaxDate
			end
			else
			begin
				Delete HEntry where Guid = @Guid 
			end
			
		  FETCH NEXT FROM cursor_Name INTO @Guid, @TypeGuid,@CreateEntry
		
		END
		
		CLOSE cursor_Name
		DEALLOCATE cursor_Name
		
		
		Alter Table [LeaseApartment] Enable Trigger All

	
	exec PrcCheckIndex '', 'LeaseApartment', 1
	
	Select 
		@RC as [RowCount],
		(Select Count(*) from #T_RNConmp_contra) as FailCount


GO
/****** Object:  StoredProcedure [dbo].[PrcExceptionCard]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcExceptionCard]
(
	@EmptyAcc Bit = 1,
	@BalanceAcc Bit = 1,
	@BalanceCust Bit = 1,
	@ToDataBaseName Varchar(256) = 'MatiEstate'

	
)
  
as
	Declare @S varchar(8000)

	Declare @CustGuid uniqueidentifier

	--ÇáÒÈÇÆä ÇáãÑÕÏÉ
	if @BalanceCust = 1
	begin
		DECLARE cursor_Name CURSOR FAST_FORWARD FOR 
		SELECT [Guid]
		FROM [Customer]
		
		OPEN cursor_Name
		FETCH NEXT FROM cursor_Name INTO @CustGuid
		
		WHILE @@FETCH_STATUS = 0
		BEGIN
			
			Set @S = '	
			Delete '+@ToDataBaseName+'..[Customer]
			From
				'+@ToDataBaseName+'..[Customer] [C]
				inner join [Account] [A] on [A].[Guid] = [C].[AcGuid]
				left join (
							Select 
								[AcGuid],
								Sum([Debit]) as [Debit],
								Sum([Credit]) as [Credit]
							From
								[DEntry] 
							Group By
								[AcGuid]
							) [D] on [D].[AcGuid] = [A].[Guid]
			where
				[Debit] = [Credit]
				and [C].[Guid] = '''+Cast(@CustGuid as Varchar(256))+''''

		  Print @S
		  Exec(@S)		

		  FETCH NEXT FROM cursor_Name INTO @CustGuid
		
		END
		
		CLOSE cursor_Name
		DEALLOCATE cursor_Name
	end
	
	--ÇáÍÓÇÈÇÊ ÇáÝÇÑÛÉ
	Declare @AcGuid Uniqueidentifier
	if @EmptyAcc = 1
	begin
		DECLARE cursor_Name CURSOR FAST_FORWARD FOR 
		SELECT [Guid]
		FROM [vwAccount] 
		where
			[Nsons] = 0
		
		OPEN cursor_Name
		FETCH NEXT FROM cursor_Name INTO @AcGuid
		
		WHILE @@FETCH_STATUS = 0
		BEGIN
		
		Set @S = '			
		Delete '+@ToDataBaseName+'..[Account]
		From
			'+@ToDataBaseName+'..[Account] [A]
			left join [DEntry] [D] on [A].[Guid] = [D].[AcGuid]
			left join [vwAccount] [A2] on [A2].[Guid] = [A].[Guid]
		where
			([D].[Guid] is Null)
			and ([A2].[NSons] = 0)
				and [A].[Guid] = '''+Cast(@AcGuid as Varchar(256))+''''

		  Print @S
		  Exec(@S)		

		  FETCH NEXT FROM cursor_Name INTO @AcGuid
		
		END
		
		CLOSE cursor_Name
		DEALLOCATE cursor_Name

	end


	--ÇáÍÓÇÈÇÊ ÇáãÑÕÏÉ
	if @BalanceAcc = 1
	begin
		DECLARE cursor_Name CURSOR FAST_FORWARD FOR 
		Select [Guid]
		FROM [vwAccount] 
		where
			[Nsons] = 0
		
		OPEN cursor_Name
		FETCH NEXT FROM cursor_Name INTO @AcGuid
		
		WHILE @@FETCH_STATUS = 0
		BEGIN
		
		Set @S = '			
		Delete '+@ToDataBaseName+'..[Account]
		From
			'+@ToDataBaseName+'..[Account] [A]
			inner join (
						Select 
							[AcGuid],
							Sum([Debit]) as [Debit],
							Sum([Credit]) as [Credit]
						From
							[DEntry] 
						Group By
							[AcGuid]
						) [D] on [D].[AcGuid] = [A].[Guid]
			left join [vwAccount] [A2] on [A2].[Guid] = [A].[Guid]
		where
			([D].[Debit] = [D].[Credit])
			and ([A2].[NSons] = 0)
				and [A].[Guid] = '''+Cast(@AcGuid as Varchar(256))+''''

		  Print @S
		  Exec(@S)		

		  FETCH NEXT FROM cursor_Name INTO @AcGuid
		
		END
		
		CLOSE cursor_Name
		DEALLOCATE cursor_Name

	end


GO
/****** Object:  StoredProcedure [dbo].[PrcExecUpdateFlatSpecifications]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create Procedure [dbo].[PrcExecUpdateFlatSpecifications]
(
	@BuildingGuid uniqueidentifier = '335569E6-DAF5-4E4F-89B6-12C6CD275019'
)
as
	IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Apartment]') AND name = N'UX_Apartment_BuildingGuid_No')
	DROP INDEX [UX_Apartment_BuildingGuid_No] ON [dbo].[Apartment] WITH ( ONLINE = OFF )
	CREATE UNIQUE INDEX UX_Apartment_BuildingGuid_No ON Apartment (BuildingGuid,No)

	Alter Table [Apartment] Disable TRIGGER [TRG_Trace_Apartment]
	
	begin Try
	

	
	update Apartment 
	Set
		[NO] = REPLACE(REPLACE(T.newNo, ']', ''), '[', ''),
        [FloorNo] = T.[FloorNo],
		[FlatKind] = T.[FlatKind],
		[ApartmentType] = T.[ApartmentType],
		[Overlooking] = T.[Overlooking],
		[ltnFlatKind] = T.[ltnFlatKind],
		[ltnApartmentType] = T.[ltnApartmentType],
		[ltnOverlooking] = T.[ltnOverlooking],
		[Class] = T.[Class],
		[Area] = T.[Area],
		[unity] = T.[unity],
		[Note] = T.[Note],
		[UnifiedNum] = T.[UnifiedNum],
		[ManservantRoom] = T.[ManservantRoom],
		[DriverRoom] = T.[DriverRoom],
		[CustOwnerGuid] = T.CustOwnerGuid
	from
		[Apartment] F
		inner join [TblUpdateFlatSpecifications] T on F.BuildingGuid = @BuildingGuid and REPLACE(REPLACE(T.No, ']', ''), '[', '') = F.NO
	where
		T.[newNo] <> ''
		and (T.FlatKind <> '')
		and (
				F.[NO] <> REPLACE(REPLACE(T.newNo, ']', ''), '[', '') or 
				F.[FlatKind] <> T.[FlatKind] or 
				F.[ApartmentType] <> T.[ApartmentType] or 
				F.[Overlooking] <> T.[Overlooking] or 
				F.[ltnFlatKind] <> T.[ltnFlatKind] or 
				F.[ltnApartmentType] <> T.[ltnApartmentType] or 
				F.[ltnOverlooking] <> T.[ltnOverlooking] or 
				F.[Class] <> T.[Class] or 
				F.[Area] <> T.[Area] or 
				F.[unity] <> T.[unity] or 
				F.[Note] <> T.[Note] or
				
				F.[UnifiedNum] <> T.[UnifiedNum] or
				F.[ManservantRoom] <> T.[ManservantRoom] or
				F.[DriverRoom] <> T.[DriverRoom] or 

				isNull(F.[CustOwnerGuid],0x0) <> isNull(T.CustOwnerGuid,0x0)
		)

	Select @@ROWCOUNT as RC		

	Alter Table [Apartment] Enable TRIGGER [TRG_Trace_Apartment]

	end Try
	
	begin catch
				Alter Table [Apartment] Enable TRIGGER [TRG_Trace_Apartment]
				
				Declare @Msg varchar(255)
				Set @Msg = dbo.SC('áã íÊã ÇáÊÚÏíá, ÊÃßÏ ãä ÚÏã ÊßÑÇÑ ÃÑÞÇã ÇáÔÞÞ') +char(13)+char(13)+ ERROR_MESSAGE() 
				RAISERROR (@Msg, 16, 1)  
				IF (@@TRANCOUNT > 0) 
					ROLLBACK TRANSACTION 
				return		
	end catch
	

GO
/****** Object:  StoredProcedure [dbo].[PrcExecUpdateParkingSpecifications]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create Procedure [dbo].[PrcExecUpdateParkingSpecifications]
(
	@BuildingGuid uniqueidentifier = '78B080C7-969B-4299-BFDD-0C5EE606B1E8'
)
as
	IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Parking]') AND name = N'UX_Parking_BuildingGuid_No')
	DROP INDEX [UX_Parking_BuildingGuid_No] ON [dbo].[Parking] WITH ( ONLINE = OFF )
	CREATE UNIQUE INDEX UX_Parking_BuildingGuid_No ON Parking (BuildingGuid,No)

	Alter Table [Parking] Disable TRIGGER [TRG_Trace_Parking]
	
	begin Try
	
	update Parking 
	Set
		[NO] = REPLACE(REPLACE(T.newNo, ']', ''), '[', ''),
		[ParkingKind] = T.[ParkingKind],
		[Description] = T.[Description],
		[Overlooking] = T.[Overlooking],
		[FloorNo] = T.[FloorNo],
		[Area] = T.[Area],
		[unity] = T.[unity],
		[Note] = T.[Note],
		[CustGuid] = T.CustGuid
	from
		Parking F
		inner join [TblUpdateParkingSpecifications] T on F.BuildingGuid = @BuildingGuid and REPLACE(REPLACE(T.No, ']', ''), '[', '') = F.NO
	where
		T.NewNo <> ''
		and (T.ParkingKind <> '')
		and (
				F.[NO] <> REPLACE(REPLACE(T.newNo, ']', ''), '[', '') or 
				F.[ParkingKind] <> T.[ParkingKind] or 
				F.[Description] <> T.[Description] or 
				F.[Overlooking] <> T.[Overlooking] or 
				F.[FloorNo] <> T.[FloorNo] or 
				F.[Area] <> T.[Area] or 
				F.[unity] <> T.[unity] or 
				F.[Note] <> T.[Note]or
				isNull(F.[CustGuid],0x0) <> isNull(T.CustGuid,0x0)								
		)

	Select @@ROWCOUNT as RC		

	Alter Table [Parking] Enable TRIGGER [TRG_Trace_Parking]

	end Try
	
	begin catch
				Alter Table [Parking] Enable TRIGGER [TRG_Trace_Parking]
				
				Declare @Msg varchar(255)
				Set @Msg = dbo.SC('áã íÊã ÇáÊÚÏíá, ÊÃßÏ ãä ÚÏã ÊßÑÇÑ ÃÑÞÇã ÇáãæÇÞÝ') +char(13)+char(13)+ ERROR_MESSAGE() 
				RAISERROR (@Msg, 16, 1)  
				IF (@@TRANCOUNT > 0) 
					ROLLBACK TRANSACTION 
				return		
	end catch
	

GO
/****** Object:  StoredProcedure [dbo].[PrcExecUpdateShopSpecifications]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create Procedure [dbo].[PrcExecUpdateShopSpecifications]
(
	@BuildingGuid uniqueidentifier = '78B080C7-969B-4299-BFDD-0C5EE606B1E8'
)
as
	IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Shop]') AND name = N'UX_Shop_BuildingGuid_No')
	DROP INDEX [UX_Shop_BuildingGuid_No] ON [dbo].[Shop] WITH ( ONLINE = OFF )
	CREATE UNIQUE INDEX UX_Shop_BuildingGuid_No ON Shop (BuildingGuid,No)

	Alter Table [Shop] Disable TRIGGER [TRG_Trace_Shop]
	
	begin Try
	
	update Shop 
	Set
		[NO] = REPLACE(REPLACE(T.newNo, ']', ''), '[', ''),
		[ShopKind] = T.[ShopKind],
		[Description] = T.[Description],
		[Overlooking] = T.[Overlooking],
		[ltnShopKind] = T.[ltnShopKind],
		[ltnDescription] = T.[ltnDescription],
		[ltnOverlooking] = T.[ltnOverlooking],
		[Class] = T.[Class],
		[Area] = T.[Area],
		[unity] = T.[unity],
		[Note] = T.[Note],
		[UnifiedNum] = T.[UnifiedNum],
		[ManservantRoom] = T.[ManservantRoom],
		[DriverRoom] = T.[DriverRoom],
		[CustGuid] = T.CustGuid
	from
		Shop F
		inner join [TblUpdateShopSpecifications] T on F.BuildingGuid = @BuildingGuid and REPLACE(REPLACE(T.No, ']', ''), '[', '') = F.NO
	where
		T.newNo <> ''
		and (T.ShopKind <> '')
		and (
				F.[NO] <> REPLACE(REPLACE(T.newNo, ']', ''), '[', '') or 
				F.[ShopKind] <> T.[ShopKind] or 
				F.[Description] <> T.[Description] or 
				F.[Overlooking] <> T.[Overlooking] or 
				F.[ltnShopKind] <> T.[ltnShopKind] or 
				F.[ltnDescription] <> T.[ltnDescription] or 
				F.[ltnOverlooking] <> T.[ltnOverlooking] or 
				F.[Class] <> T.[Class] or 
				F.[Area] <> T.[Area] or 
				F.[unity] <> T.[unity] or 
				F.[Note] <> T.[Note] or
				F.[UnifiedNum] <> T.[UnifiedNum] or
				F.[ManservantRoom] <> T.[ManservantRoom] or
				F.[DriverRoom] <> T.[DriverRoom] or 
				isNull(F.[CustGuid],0x0) <> isNull(T.CustGuid,0x0)				
		)

	Select @@ROWCOUNT as RC		

	Alter Table [Shop] Enable TRIGGER [TRG_Trace_Shop]

	end Try
	
	begin catch
				Alter Table [Shop] Enable TRIGGER [TRG_Trace_Shop]
				
				Declare @Msg varchar(255)
				Set @Msg = dbo.SC('áã íÊã ÇáÊÚÏíá, ÊÃßÏ ãä ÚÏã ÊßÑÇÑ ÃÑÞÇã ÇáãÍáÇÊ') +char(13)+char(13)+ ERROR_MESSAGE() 
				RAISERROR (@Msg, 16, 1)  
				IF (@@TRANCOUNT > 0) 
					ROLLBACK TRANSACTION 
				return		
	end catch
	

GO
/****** Object:  StoredProcedure [dbo].[prcExecuteSQL]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create  proc [dbo].[prcExecuteSQL]
	@sql varchar(8000),  
	@param0 varchar(2000) = null,  
	@param1 varchar(2000) = null,  
	@param2 varchar(2000) = null,  
	@param3 varchar(2000) = null,  
	@param4 varchar(2000) = null,  
	@param5 varchar(2000) = null,  
	@param6 varchar(2000) = null, 
	@param7 varchar(2000) = null, 
	@param8 varchar(2000) = null, 
	@param9 varchar(2000) = null 
as  
	set @sql = dbo.fnFormatString (@sql, @param0, @param1, @param2, @param3, @param4, @param5, @param6, @param7, @param8, @param9) 
	exec prcLog @sql 
	exec (@sql)  


GO
/****** Object:  StoredProcedure [dbo].[PrcExportAccountTree]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create Procedure [dbo].[PrcExportAccountTree]
(
	@level int = 1
)
as
	Select 
		Ac.Code,
		Ac.Name,
		F.Name as FinalAccount,
		ac.[NSons] ,
		L.[level]
	From 
		[vwAccount] ac 
		inner join [vwAccount] F on F.Guid = Ac.finalGuid
		inner join dbo.fnGetAccountList(0x0) L on L.Guid = Ac.Guid
	where
		(L.level <= @level) or @level = -1
	order by
		L.Path

GO
/****** Object:  StoredProcedure [dbo].[PrcExportcsvTable]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create Procedure [dbo].[PrcExportcsvTable]
(
	@FileName varchar(255) = 'D:\File.txt'
)
as
	Declare @t varchar(8000)
			,@dbname varchar(255)

	Select @dbname = DB_NAME()

	Set @t = 'bcp "SELECT [txt] FROM '+@dbname+'..[TmpCSV] order by id" queryout '+@FileName+' -w -T'
		
	print @t
	exec master..xp_cmdshell @t

GO
/****** Object:  StoredProcedure [dbo].[PrcExportRepFlatRentcsv]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcExportRepFlatRentcsv]
  
as
	Delete [Resource] where [Spid]=@@spid
	
	Insert Into [Resource]
	([Guid])
	Select 
		Guid 
	from 
		Building
	where
		Number in (1, 2)
	
	Exec [RepFlatRent]
	@CustGuid  = 0x0
	,@Nationality  = ''
	,@FlatNo  = ''
	,@Emirate  = ''
	,@Suburb  = ''
	,@Area  = ''
	,@Street = ''
	,@FlatKind  = ''
	,@Class  = ''
	,@ApartmentType  = ''
	,@FlatArea1  = 0
	,@FlatArea2 = 0
	,@Unity  = ''
	,@RentState = 2
	,@ContractState = 2
	,@Datewith = 0
	,@Date1 = '2009-7-1'
	,@Date2 = '2022-1-2'
	,@RentInfoGuid = 0x0
	,@SalesManGuid = 0x0
	,@ShowFlat  = 1
	,@ShowShop = 1
	,@ShowIsCheck = 1
	,@ShowIsNotCheck = 1
	,@ShowAccumulate = 1
	,@ShowAccumulateEndContract = 1
	,@Rent1  = 0
	,@Rent2 = 0
	,@CheckDate = 0

	,@ActiveNote  = 0
	,@OperationNote = 0
	,@RealtyNote   = '' 
	,@ContractActiveNote = 0
	,@ContractOpNote = 0
	,@ContractNote  = '' 
	,@Judicial = 2
	,@ExportCSV = 1	
	,@BanRealty = 2

	exec [PrcExportTableCSV] 'RepFlatRentcsv', 'D:\RepFlatRentcsv.csv'	

GO
/****** Object:  StoredProcedure [dbo].[PrcExportTableCSV]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create Procedure [dbo].[PrcExportTableCSV]
(
	@TableName Varchar(255) = 'RepFlatRentcsv',
	@FileName Varchar(255) = 'D:\File.txt'
)
as
	
	Truncate Table [TmpCSV]
		
	Set nocount on
	Declare @Sql varchar(8000)
		
	Declare @Cols varchar(8000)
	Declare @Col varchar(255)
	Declare @SelectCols varchar(8000),
			@ColType int
	
	Set @Cols = ''
	Set @SelectCols = ''
	
	DECLARE cursor_Name CURSOR FAST_FORWARD FOR 
	Select 
		C.Name,
		C.xtype
	from 
		sysobjects T 
		inner join sysColumns C on T.id = C.id
	where 
		T.name = @TableName and T.XTYPE = 'U'
	order By
		Colid
	
	OPEN cursor_Name
	FETCH NEXT FROM cursor_Name INTO @Col, @ColType
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
	  Set @Cols = @Cols + '"'+@Col + '";'
	  
	  if @ColType = 167
	  Set @SelectCols = @SelectCols +'''"''+'+ 'REPLACE(IsNull(['+@Col+'],''''),
														char(13)+char(10),
														char(32)
														)
												' + '+''";''+'
	 else 
	  Set @SelectCols = @SelectCols +'''"''+'+ 'IsNull(Cast( ['+@Col+'] as varchar(255)),'''')' + '+''";''+'
	  FETCH NEXT FROM cursor_Name INTO @Col, @ColType
	
	END
	
	CLOSE cursor_Name
	DEALLOCATE cursor_Name

	Set @Cols = LEFT(@Cols, len(@Cols)-1)
	
	insert into [TmpCSV](txt) 
	Select @Cols
	
	Set @SelectCols = LEFT(@SelectCols, len(@SelectCols)-5) + '''"'''

	Print 'Select ' +@SelectCols + ' as txt From '+@TableName
	
	Set @Sql = 'insert into [TmpCSV](txt)  Select ' +@SelectCols + ' as txt From '+@TableName
	exec(@Sql)

	--Select * from [TmpCSV] order by id
				
	exec [PrcExportcsvTable] @FileName

GO
/****** Object:  StoredProcedure [dbo].[PrcFillListOrderTypeGroups]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create Procedure [dbo].[PrcFillListOrderTypeGroups]
(
	@OrderTypeGuid uniqueidentifier = '674BE9CC-5594-4ADC-8D0E-6E5A1E2DD5C3'
)
as

	Delete ListOrderTypeGroups where [Spid] = @@Spid
	Declare @GroupGuid uniqueidentifier
	DECLARE cursor_Name CURSOR FAST_FORWARD FOR 
	Select [GroupGuid] From [OrderTypeGroup]
	where
		[ParentGuid] = @OrderTypeGuid 
	
	OPEN cursor_Name
	FETCH NEXT FROM cursor_Name INTO @GroupGuid
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
	  
		insert into [ListOrderTypeGroups]
		([GROUPGUID], [ORDERTYPEGUID])
		Select 
			[G].[Guid],
			@OrderTypeGuid
		From
			fnGetGroupList(@GroupGuid) [G]
			left join [ListOrderTypeGroups] [L] on [L].[GroupGuid] = [G].[Guid] and [L].[Spid] = @@Spid
		where
			[L].[GroupGuid] is Null

	  FETCH NEXT FROM cursor_Name INTO @GroupGuid
	
	END
	
	CLOSE cursor_Name
	DEALLOCATE cursor_Name

	if Not exists(Select Top 1 * from [ListOrderTypeGroups] where Spid = @@Spid)
	insert into [ListOrderTypeGroups]
	([GROUPGUID], [ORDERTYPEGUID])
	Select 
		[G].[Guid],
		@OrderTypeGuid
	From
		fnGetGroupList(0x0) [G]
	
	

GO
/****** Object:  StoredProcedure [dbo].[PrcFlatContractSMS]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcFlatContractSMS]
(
	@SMSText varchar(256) = '[A]'
)
  
as
	Set NoCount on

	Select 
		T.FromDate,
		T.ToDate,
		T.[CustName],
		T.[CustomerMobile] as [CustMobile],
		[T].[CustArName],
		[T].[CustLtnName],
		[T].[BuildingArName],
		[T].[BuildingltnName],
		[T].[FlatNo],
		t.ContractNo,
		t.RentAfterDiscount as [Value],
		@SMSText as [SMSText]
	into #CheckSMS
	From
		vwLeaseApartment T 
		inner join [Resource] R on R.Guid = T.Guid and R.kind = 3700 and R.Spid = @@Spid
	
	update #CheckSMS Set [SMSText] = REPLACE([SMSText], '[A]', IsNull([CustArName],''))
	update #CheckSMS Set [SMSText] = REPLACE([SMSText], '[B]', IsNull([CustLtnName],''))
	update #CheckSMS Set [SMSText] = REPLACE([SMSText], '[T]', IsNull([BuildingArName],''))
	update #CheckSMS Set [SMSText] = REPLACE([SMSText], '[R]', IsNull([BuildingltnName],''))
	update #CheckSMS Set [SMSText] = REPLACE([SMSText], '[C]', IsNull([FlatNo],''))
	update #CheckSMS Set [SMSText] = REPLACE([SMSText], '[E]',IsNull( ContractNo,''))
	update #CheckSMS Set [SMSText] = REPLACE([SMSText], '[D]',IsNull( dbo.fndate(FromDate),''))
	update #CheckSMS Set [SMSText] = REPLACE([SMSText], '[F]',IsNull( dbo.fndate(ToDate),''))
	update #CheckSMS Set [SMSText] = REPLACE([SMSText], '[V]',IsNull( Cast ([Value] as varchar(20)),''))
	
	Select * from #CheckSMS
	order By
		Fromdate
	


GO
/****** Object:  StoredProcedure [dbo].[PrcGC]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcGC]
(
	@TableName Varchar(256) = 'BuildingOffer'
)
  
as
	Declare @S varchar(8000), @ColType int
	Declare @ColName Varchar(30)
			,@Columns Varchar(8000)

	set @Columns = ''

	DECLARE cursor_Name CURSOR FOR 
	SELECT 
		[c].[Name]
	FROM 
		SysColumns [C]
		inner join [sysobjects] [O] on [O].[id] = [C].[ID]
	where
		[O].[Name] = @TableName
	Order By [C].ColId
	
	Print '    Columns = <
'
	OPEN cursor_Name
	FETCH NEXT FROM cursor_Name INTO @ColName
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
		Print '      item
        Alignment = taLeftJustify
        Color = clBlack
        FieldName = '''+@ColName+'''
        Caption = '''+@ColName+'''
        EnCaption = '''+@ColName+'''
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -11
        Font.Name = ''Tahoma''
        Font.Style = []
        HeaderFont.Charset = DEFAULT_CHARSET
        HeaderFont.Color = clBlack
        HeaderFont.Height = -11
        HeaderFont.Name = ''Tahoma''
        HeaderFont.Style = []
        ReadOnly = False
        Width = 0
        Visible = True
        DataType = dtString
      end
'
		
	  FETCH NEXT FROM cursor_Name INTO @ColName
	
	END
	
	CLOSE cursor_Name
	DEALLOCATE cursor_Name


GO
/****** Object:  StoredProcedure [dbo].[PrcGetAccountBalaceConformity]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create Procedure [dbo].[PrcGetAccountBalaceConformity]
(
	@Date DateTime = '5/15/2014',
	@AccountGuid uniqueidentifier = 'E17FAA9B-8692-476F-B84D-ED18AA030650',
	@CostGuid uniqueidentifier = 0x0
)
as
	Select * into #Account from dbo.fnGetAccountList(@AccountGuid)
	Select * into #Cost from dbo.fnGetCostList(@AccountGuid)
			
	Select 
		SUM(D.Debit) as Debit,
		SUM(D.Credit) as Credit
	From 
		[DEntry] D 
		inner join [HEntry] H on H.Guid = D.ParentGuid
		inner join #Account Ac on Ac.Guid = D.AcGuid
		left join #Cost Co on Co.Guid = D.CostGuid
	where
		(Co.GUID is Not Null  or @CostGuid = 0x0)
		and (H.Date <= @Date)

GO
/****** Object:  StoredProcedure [dbo].[PrcGetAccountConformity]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create Procedure [dbo].[PrcGetAccountConformity]
(
	@AccountGuid uniqueidentifier = 0x0,
	@CostGuid uniqueidentifier = 0x0,
	@ShowRealBalance Bit = 0
)
as
	Select * into #Account from dbo.fnGetAccountList(@AccountGuid)
	Select * into #Cost from dbo.fnGetCostList(@AccountGuid)

	Select 
		* ,
		Case when @ShowRealBalance = 1 then	
			(
	
				Select 
					SUM(D.Debit - D.Credit)
				From 
					[DEntry] D 
					inner join [HEntry] H on H.Guid = D.ParentGuid
					inner join #Account Ac on Ac.Guid = D.AcGuid
					left join #Cost Co on Co.Guid = D.CostGuid
				where
					(Co.GUID is Not Null  or @CostGuid = 0x0)
					and (H.Date <= A.Date)
			)
		end as [RealBalance]
	From 
		[vwAccountConformity] A
	where
		(AccountGuid = @AccountGuid)
		and (CostGuid = @CostGuid or @CostGuid = 0x0)
	order by
		Date

GO
/****** Object:  StoredProcedure [dbo].[prcgetAccountIncinfo]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[prcgetAccountIncinfo]
(
	@Guid uniqueidentifier = 'A8F6012A-9082-4E93-93AD-E760AA08C08D'
)
  
as
	Select Guid into #fnGetAccountParents from fnGetAccountParents(@Guid) A
	
	exec [PrcCreatefnGetAccountList]
	--Select * into #fnGetAccountList from fnGetAccountList (0x0) --where 1 = 2
	
	insert into #fnGetAccountParents
	Select @Guid
	
	Select Top 1
			ac.Guid,
			ac.Code,
			ac.Name,
			L.*
	From
		#fnGetAccountParents A
		inner join [IncAccountDetailAc] dc on dc.[AccountGuid] = a.Guid
		inner join incAccount ac on ac.Guid = dc.ParentGuid
		left join ##fnGetAccountList l on l.Guid = dc.AccountGuid
	where
		dc.Number is Not Null
	order by
		L.[level] desc
	
	

GO
/****** Object:  StoredProcedure [dbo].[PrcGetAssetsScrapValue]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcGetAssetsScrapValue]
(
	@AssetsGuid uniqueidentifier = 0x0
)
  
as
	Declare @ScrapValue Float
	
	Select Top 1
		@ScrapValue = [ScrapValue]
	From 
		[AssetsOperation]  
	where
		AssetsGuid = @AssetsGuid
	Order By
		Date Desc, Number Desc
		
	if ISNULL(@ScrapValue, 0) = 0
	Select 
		@ScrapValue = [ScrapValue]
	From 
		[Assets]
	where
		Guid = @AssetsGuid

	Select @ScrapValue As [ScrapValue]	

GO
/****** Object:  StoredProcedure [dbo].[PrcGetAssetsSummeryOperation]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcGetAssetsSummeryOperation]
(
	@AssetsGuid uniqueidentifier = 'F8453488-FA93-4D8A-A581-5A63BB953A08'
)
  
as
	Select 
		S.Guid,
		SUM(
			Case when A.Flag = 1 then 
				A.Value *
				Case when [A].[CurrencyGuid] = S.CurrencyGuid then 1 
				else [A].[CurrencyVal] / S.CurrencyVal end
			end
			) As Addition,
		SUM(
			Case when A.Flag = 2 then 
				A.Value *
				Case when [A].[CurrencyGuid] = S.CurrencyGuid then 1 
				else [A].[CurrencyVal] / S.CurrencyVal end
			end
			) as Decrease,
		SUM(
			Case when A.Flag = 3 then 
				A.Value *
				Case when [A].[CurrencyGuid] = S.CurrencyGuid then 1 
				else [A].[CurrencyVal] / S.CurrencyVal end
			end
			) as [Maintenance]
	From 
		[AssetsOperation] A
		inner join [vwAssets] S on S.Guid = A.AssetsGuid
	where
		(S.Guid = @AssetsGuid or @AssetsGuid = 0x0)
	Group By
		S.Guid
	

GO
/****** Object:  StoredProcedure [dbo].[PrcGetBillMatPrice]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcGetBillMatPrice]
(
	@BillTypeGuid uniqueidentifier = 'F6843C35-B425-4664-B2E6-677C9B205D4D',
	@MatGuid uniqueidentifier = '8208DC5F-D46A-4935-A4F3-C771225D12E7',
	@Unity int = 1,
	@CustGuid uniqueidentifier = 0x0,
	@CurrencyGuid  uniqueidentifier = '11111111-C748-4B13-8B91-1E9B299DF1C1',
	@CurrencyVal Float = 1,
	@forceLastCustPrice bit = 0
)
  
as
	Declare @OpPrice int,
			@SpecificPrice int
	Select
		@OpPrice = [OpPrice],
		@SpecificPrice = [SpecificPrice]
	From 
		[BillType] 
	where
		[Guid] = @BillTypeGuid
	
	if @forceLastCustPrice = 1 
	begin
		Set @OpPrice = 1
		Set @SpecificPrice = 0
	end
	
	Declare @Price Float
	
	if @OpPrice = 1
	begin
		Select Top 1
			@Price = Case 
						when @Unity = 1 then [Price]
						when @Unity = 2 then [Price] / Case when [Qty2] <> 0 then [Qty2] end * [Qty]
						when @Unity = 3 then [Price] / Case when [Qty3] <> 0 then [Qty3] end * [Qty]
					 End * 
					 Case when (b.CurrencyGuid = @CurrencyGuid) or (@CurrencyVal = 0) then 1
						   else CurrencyVal / @CurrencyVal end
		From
			Bill B
			inner join BillDetail D on d.ParentGuid = b.Guid 
		where
			(b.TypeGuid = @BillTypeGuid)
			and	(b.CustGuid = @CustGuid)
			and (d.MatGuid = @MatGuid)
		Order By
			Date desc, b.Number desc
	end
	
	if @OpPrice between 2 and 7
	begin
		Select Top 1
			@Price = 
					Case 
						when @OpPrice = 2 then AvgPrice 
						when @OpPrice = 3 then MaxPrice 
						when @OpPrice = 4 then LastPrice 
						when @OpPrice = 5 then SaleAvgPrice 
						when @OpPrice = 6 then SaleMaxPrice 
						when @OpPrice = 7 then SaleLastPrice 
					end / 
					Case 
						when @Unity = 1 then 1
						when @Unity = 2 then Case when IsNull(UnityFact2,0) <> 0 then UnityFact2 end
						when @Unity = 3 then Case when IsNull(UnityFact3,0) <> 0 then UnityFact3 end
					 End * 
					 Case when (mt.CurrencyGuid = @CurrencyGuid) or (@CurrencyVal = 0) then 1
						   else CurrencyVal / @CurrencyVal end
		From
			Mat mt
		where
			Guid = @MatGuid
	end

	if @OpPrice = 8 
	begin
		Select
			@Price =
			Case 
				when @Unity = 1 then Price1
				when @Unity = 2 then Price2
				when @Unity = 3 then Price3
			end
		From
			MatUnitsPrice 	
		where
			MatGuid = @MatGuid
			AND Number = @SpecificPrice +1
	end
		
	Select @Price as [Price]
	

GO
/****** Object:  StoredProcedure [dbo].[PrcGetBillOrderDetail]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create Procedure [dbo].[PrcGetBillOrderDetail]
(
	@OrderGuid uniqueidentifier = 0x0
)
as
	Create Table #Tbl
	(
		[Mat] Varchar(256),
		[Qty] Float,
		[unitName] Varchar(256),
		[Price] Float,
		[QtyRecipient] Float,
		[Note] Varchar(256),
		[Store] Varchar(256),
		[unit] int,
		[MatGuid] uniqueidentifier,
		[OrderGuid] uniqueidentifier,
		[StoreGuid] uniqueidentifier,
		[Unit2FactFlag] Bit,
		[Number] int,
		[Guid] uniqueidentifier
	)
		
	insert into #Tbl
	Select 
		[mt].[code]+'-'+[mt].[name] as [Mat],
		[D].[Qty],
		[mt].[unitName],
		[D].[Price],
		0,
		[D].[Note],
		[St].[Code]+'-'+[St].[Name] as [Store],
		[D].[unit],
		[mt].[Guid],
		[D].[ParentGuid],
		[St].[Guid],
		[Mt].[unityFix],
		[D].[Number],
		[D].[Guid]
	From
		[BillOrderDetail] [D]
		inner join [vwMatUnit] [mt] on [mt].[Guid] = [D].[matGuid] and [D].[unit] = [mt].[unit]
		inner join [Store] [St] on [St].[Guid] = [D].[StoreGuid]
	where
		[D].[ParentGuid] = @OrderGuid 

	
	--áãÚÑÝÉ ÇáßãíÇÊ ÇáãÓáãÉ
	Select 
		[O].[ParentGuid] as [OrderGuid],
		[D].[MatGuid],
		Sum([Qty]) as [Qty1],
		Sum([Qty2]) as [Qty2]
	into #R
	From 
		[BillOrderRecipient] [O]
		inner join [BillOrderRecipientDetail] [D] On [D].[ParentGuid] = [O].[Guid]
	where
		([O].[ParentGuid] = @OrderGuid)
	Group By
		[O].[ParentGuid],
		[D].[MatGuid]

--	Select * from #r


	update #Tbl
	Set [QtyRecipient] = Case when [T].[unit] = 1 then [R].[Qty1]
							  when [T].[unit] = 2 then [R].[Qty2]
						end
	From
		#Tbl [T]
		inner join #R [R] on [R].[OrderGuid] = [T].[OrderGuid] and [R].[MatGuid] = [T].[MatGuid]
	
	Select 
		*,
		[Qty] as [RQty],
		[Price] as [RPrice],
		[Qty] - isnull([QtyRecipient], 0) as [RestQty]
	from #Tbl
	Order By
		[Number]
		

GO
/****** Object:  StoredProcedure [dbo].[PrcGetBuildingIdentityDetail]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcGetBuildingIdentityDetail]
(
	@BuildingGuid uniqueidentifier = '696C763B-9272-49AB-BB72-41BB43E1B063'
)
  
as
	Select 
		[F].[No] as [FlatNo]
	    ,[RentName]
		,[D].[Mobile]
		,[ContractNo]
	    ,[BeginContractDate]
	    ,[EndContractDate]
	    ,[ContractPeriod]
	    ,[ContractValue]
	    ,[BeginInvestmentDate]
	    ,[DeservedDay]
	    ,[DeservedValue]
	    ,[checkValue]
	    ,[DeservedCashValue]
	    ,[InsuranceValue]
	    ,[F].[Guid] as [FlatGuid]
		,[C].[AcGuid] as [CustomerRentAccountGuid]
		,[C].[InsuranceAccountGuid] as [CustomerInsuranceAccountGuid]
	From 
		[Building] [B]
		inner join [Apartment] [F] on [B].[Guid] = [F].[BuildingGuid]
		left join [BuildingIdentityDetail] [D] On [D].[FlatGuid] = [F].[Guid]
		left join [vwCustomer] [C] on [C].[Name] = [D].[RentName]
	where
		[B].[Guid] = @BuildingGuid
	Order By
		[F].[NO]

GO
/****** Object:  StoredProcedure [dbo].[PrcGetChatUsers]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Proc [dbo].[PrcGetChatUsers]
  
as
	Create Table #Tbl
	(
		Spid int,
		ecid int,
		Status Nvarchar(30),
		loginname  Nvarchar(30),
		hostName  Nvarchar(30),
		blk int,
		dbname  Nvarchar(30),
		cmd  Nvarchar(30),
		Request_id int
	)

	Insert into #Tbl
	exec sp_who

	Select 
		R.loginname,
		R.Guid,
		Case when U.userGuid is Null then 0 else 1 end as [On]
	from 
		[Realty_Users] R
		left join (
					Select
						T.Spid,
						U.UserGuid
					From
						#Tbl T 
						inner join [CurrentUsers] U on U.Spid = T.Spid
					where
						[dbname] = Db_Name()
					) U on U.userGuid = R.Guid
	where
		(Case when U.Spid = @@SPID then 1 else 0 end = 0 )
	order By
		Case when U.userGuid is Null then 1 else 0 end, 
		R.loginname

GO
/****** Object:  StoredProcedure [dbo].[PrcGetColumns]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[PrcGetColumns]
(
	@TableName Varchar(256) = 'LeaseApartment'
)
  
as
/*
	Select 
		[C].* 
	from 
		SysObjects [S]
		inner join sysColumns [C] on [C].[Id] = [S].[Id] 
	where
		[S].[Name] = @TableName
	Order By
		[C].[Name]
*/



	Declare @S varchar(8000), @ColType int
	Declare @ColName Varchar(30)
			,@Columns Varchar(8000)

	set @Columns = ''

	DECLARE cursor_Name CURSOR FOR 
	SELECT 
		[c].[Name]
	FROM 
		SysColumns [C]
		inner join [sysobjects] [O] on [O].[id] = [C].[ID]
	where
		[O].[Name] = @TableName
	Order By [C].ColId
	
	OPEN cursor_Name
	FETCH NEXT FROM cursor_Name INTO @ColName
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
	  
		Set @Columns = @Columns + '[L].['+@ColName+'], '+CHAR(13)
	  FETCH NEXT FROM cursor_Name INTO @ColName
	
	END
	
	CLOSE cursor_Name
	DEALLOCATE cursor_Name

	
	Set @Columns = SUBSTRING(@Columns,1, len(@Columns)-1)
	Print @Columns

		

GO
/****** Object:  StoredProcedure [dbo].[PrcGetCurrencyVal]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcGetCurrencyVal]
(
	@Guid uniqueidentifier = '0ACC7FE7-CA3C-475A-9F4D-DA2F6ECB16E9',
	@Date DateTime = '7/28/2008'
)
  
as
	declare @Rate Float
	Set @Rate = 0

	Select  Top 1
		@Rate = [Rate] 
	From 
		[ChangeCurrencyRate]
	where
		([CurrencyGuid] = @Guid)
		and ([Date] <= @Date)
	Order By
		[Date] desc, [Number] desc 


	if @Rate = 0 
	Select  Top 1
		@Rate = [Rate] 
	From 
		[ChangeCurrencyRate]
	where
		([CurrencyGuid] = @Guid)
	Order By
		[Date] desc, [Number] desc 
	
	if @Rate = 0 
	Select
		@Rate = [CurrencyVal] 
	From 
		[Currency]
	where
		([Guid] = @Guid)

	Select 
		*,
		@Rate as [RealRate]
	From
		[vwCurrency]
	where 
		[Guid] = @Guid


GO
/****** Object:  StoredProcedure [dbo].[PrcGetCustWithOutAccount]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create Procedure [dbo].[PrcGetCustWithOutAccount]
as
	Select 
		Name as CustName,
		Case when AcGuid is Null then 1 else 0 end as Account,
		Case when InsuranceAccountGuid is Null then 1 else 0 end as Insurance,
		Guid
	From 
		[vwcustomer]
	where
		AcGuid is Null 
		or InsuranceAccountGuid is Null 

GO
/****** Object:  StoredProcedure [dbo].[PrcGetFlatSpecifications]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create Procedure [dbo].[PrcGetFlatSpecifications]
(
	@BuildingGuid uniqueidentifier = '78B080C7-969B-4299-BFDD-0C5EE606B1E8',
	@FloorNo varchar(50) = '',
	@FlatKind  varchar(50) = '',
	@FlatOwner int = 2,
	@ApartmentType varchar(255) = '',
	@Class VARCHAR(256) = '',
	@Area1 Float = 0,
	@Area2 Float = 0,
	@unity varchar(255) = '',
	@Overlooking varchar(255) = ''
)
as
	Select 
		'['+[FlatNO]+']' as [NO],
		'['+[FlatNO]+']' as [NewNo],
		F.[FloorNo],
		F.[FlatKind],
		F.[ApartmentType],
		F.[Overlooking],
		F.[ltnFlatKind],
		F.[ltnApartmentType],
		F.[ltnOverlooking],
		F.[Class],
		F.[Area],
		F.[unity],
		Cu.Name as [CustOwner],
		F.CustOwnerGuid,
		F.[Note],
		F.[Guid] as FlatGuid
	From 
		[vwApartment] F
		left join customer Cu on Cu.Guid = F.CustOwnerGuid
	where
		(BuildingGuid = @BuildingGuid)
		and (F.[FloorNo] = @FloorNo or @FloorNo = '')
		and (F.[FlatKind] = @FlatKind or @FlatKind = '')
		and (F.[FlatOwner] = @FlatOwner or @FlatOwner = 2)
		and (F.[ApartmentType] = @ApartmentType or @ApartmentType = '')
		and (F.[Class] = @Class or @Class = '')
		and ((F.Area between @Area1 and @Area2 or (@Area1 = 0 and @Area2 = 0)))
		and (F.[unity] = @unity or @unity = '')
		and (F.[Overlooking] = @Overlooking or @Overlooking = '')
	order By
		F.Number

GO
/****** Object:  StoredProcedure [dbo].[PrcGetFlatWallet]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcGetFlatWallet]
(
	@Guid uniqueidentifier = '369CF34D-31AA-4381-BBCA-78E27197A9AA'
)
  
as
	Select 
		[B].[Name] as [Building],
		[F].[No]+'-'+[ApartmentType] as [Flat],
		[W].[MainCost],
		[Expense],
		[W].[BeginDate],
		[C].[SaleDate],
		DATEDIFF(Day,[W].[BeginDate], [C].[SaleDate]) as [DayCount],
		[C].[SaleValue] * Case when [Wl].[CurrencyGuid] <> [C].[CurrencyGuid] then [C].[CurrencyVal] / [Wl].[CurrencyVal] else 1 end as [SaleValue],
		[C].[SaleValue] * Case when [Wl].[CurrencyGuid] <> [C].[CurrencyGuid] then [C].[CurrencyVal] / [Wl].[CurrencyVal] else 1 end
		-
		( isnull([w].[Expense],0) + [W].[MainCost] )
		as  [Profit],
		[W].[BuildingGuid],
		[W].[FlatGuid]
	From 
		[wallet] [Wl]
		inner join [Flatwallet] [W] on [W].[ParentGuid] = [Wl].[Guid]
		inner join [vwBuilding] [B] on [B].[Guid] = [W].[BuildingGuid]
		inner join [vwApartment] [F] on [F].[Guid] = [w].[FlatGuid]
		left join (
					Select 
						[ApartmentGuid],
						[FromDate] as [SaleDate],
						([Rent]-[Discountvalue]) as [SaleValue],
						[CurrencyGuid],
						[CurrencyVal]
					From
						[vwLeaseApartment] 
					where 
						[LeaseKind] = 2
					) [C] on [C].[ApartmentGuid] = [W].[FlatGuid]
	where
		[W].[ParentGuid] = @Guid
	Order By
		[W].[Number]

GO
/****** Object:  StoredProcedure [dbo].[PrcGetIncAccountListDetail]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create Procedure [dbo].[PrcGetIncAccountListDetail]
as
	Truncate Table IncAccountListDetail
	
	
	Declare @ParentGuid uniqueidentifier,
			@AccountGuid uniqueidentifier
			
	DECLARE cursor_Name CURSOR FAST_FORWARD FOR 
	Select ParentGuid, AccountGuid from [IncAccountDetailAc]
	
	OPEN cursor_Name
	FETCH NEXT FROM cursor_Name INTO @ParentGuid, @AccountGuid
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
		
		insert into IncAccountListDetail
		([ParentGuid],[AccountGuid])
		Select
			@ParentGuid,
			Ac.Guid
		From
			dbo.fnGetAccountList(@AccountGuid) AC
			left join IncAccountListDetail D on D.AccountGuid = Ac.Guid
		where
			D.ParentGuid is Null
	  
	  FETCH NEXT FROM cursor_Name INTO @ParentGuid, @AccountGuid
	
	END
	
	CLOSE cursor_Name
	DEALLOCATE cursor_Name
	
	--Select * from IncAccountListDetail

GO
/****** Object:  StoredProcedure [dbo].[PrcGetinfoFld]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcGetinfoFld]
(
	@Guid uniqueidentifier = 0x0,
	@CardId int = 0
)
  

as
	Select 
		C.id,
		C.fldCaption,
		V.[FldValue] 
	From 
		[InfofldCaption] C
		left join [InfofldValue] v on V.Cardid = C.Cardid and V.id = C.id and [CardGuid] = @Guid
	where
		(C.Cardid = @CardId)
	order by
		C.id

GO
/****** Object:  StoredProcedure [dbo].[PrcGetLandWallet]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcGetLandWallet]
(
	@Guid uniqueidentifier = '88337EB2-DBD4-42D1-A535-34662BFF6BE8'
)
  
as
	Select 
		'' as [Building],
		[F].[Name] as [Land],
		[W].[MainCost],
		[Expense],
		[W].[BeginDate],
		[C].[SaleDate],
		DATEDIFF(Day,[W].[BeginDate], [C].[SaleDate]) as [DayCount],
		[C].[SaleValue] * Case when [Wl].[CurrencyGuid] <> [C].[CurrencyGuid] then [C].[CurrencyVal] / [Wl].[CurrencyVal] else 1 end as [SaleValue],
		[C].[SaleValue] * Case when [Wl].[CurrencyGuid] <> [C].[CurrencyGuid] then [C].[CurrencyVal] / [Wl].[CurrencyVal] else 1 end
		-
		( isnull([w].[Expense],0) + [W].[MainCost] )
		as  [Profit],
		0x0 as [BuildingGuid],
		[W].[LandGuid]
	From 
		[wallet] [Wl]
		inner join [Landwallet] [W] on [W].[ParentGuid] = [Wl].[Guid]
		inner join [vwEarth] [F] on [F].[Guid] = [w].[LandGuid]
		left join (
					Select 
						[LandGuid],
						[FromDate] as [SaleDate],
						[Rent] as [SaleValue],
						[CurrencyGuid],
						[CurrencyVal]
					From
						[vwLandContract]
					where 
						[ContractKind] = 6
					) [C] on [C].[LandGuid] = [W].[LandGuid]
	where
		[W].[ParentGuid] = @Guid
	Order By
		[W].[Number]

GO
/****** Object:  StoredProcedure [dbo].[PrcGetLinkRefCardNo]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcGetLinkRefCardNo]
(
	@Guid uniqueidentifier = '{06B9D35A-3D01-47FD-9B65-F01737A41ACD}',
	@TblName varchar(256) = 'DEntry',
	@FieldName  varchar(256) = 'ObverseAcGuid'
)
 
as
	Declare @Sql varchar(5000)
	if UPPER(@TblName) = UPPER('DEntry')
	begin
		Set @Sql = '
		Select 
			H.Number
		From 
			[Hentry] H
			inner join [Dentry] D on D.ParentGuid = H.Guid
		where
			D.'+@FieldName+' ='+''''+ CAST(@Guid as varchar(256))+'''
		'
		
		Print @Sql
		exec (@Sql)
	end

GO
/****** Object:  StoredProcedure [dbo].[PrcGetMatDescription]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcGetMatDescription]
(
	@MatGuid uniqueidentifier = 0x0
)
  
as
	Select 
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([G].[LtnName],'') <> '') then [G].[LtnName] else [G].[Name] end as [Name],
		[m].[Value], 
		[m].[Note] 
	From 
		[MatDescriptionConfig] [g]
		left join [MatDescription] [m] on [m].[Number] = [g].[Number] and [m].[matGuid] = @MatGuid
	where
		[Kind] = 0
	Order By
		[G].[Number]
	

GO
/****** Object:  StoredProcedure [dbo].[PrcGetMatDescriptionPrice]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcGetMatDescriptionPrice]
(
	@MatGuid uniqueidentifier = 0x0,
	@CustGuid uniqueidentifier = 0x0
)
  
as
	
	
	Select 
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([G].[LtnName],'') <> '') then [G].[LtnName] else [G].[Name] end AS [PriceKind],
		[m].[price1], 
		[m].[price2], 
		[m].[price3]
	From 
		[MatDescriptionConfig] [g]
		left join [MatUnitsPrice] [m] on [m].[Number] = [g].[Number] and [m].[matGuid] = @MatGuid
	where
		[Kind] = 1
		
	union all
	Select 
		dbo.SC('æÓØí ÇáßáÝÉ') AS [PriceKind],
		avgPrice as [price1], 
		avgPrice * unityFact2 as [pric2], 
		avgPrice * unityFact3 as [price3]
	From 
		[Mat] M
	where
		[m].[Guid] = @MatGuid

	union all
	Select 
		dbo.SC('ÂÎÑ ÓÚÑ ÔÑÇÁ') AS [PriceKind],
		LastPrice as [price1], 
		LastPrice * unityFact2 as [pric2], 
		LastPrice * unityFact3 as [price3]
	From 
		[Mat] M
	where
		[m].[Guid] = @MatGuid

	union all
	Select 
		dbo.SC('ÇßÈÑ ÔÑÇÁ') AS [PriceKind],
		MaxPrice as [price1], 
		MaxPrice * unityFact2 as [pric2], 
		MaxPrice * unityFact3 as [price3]
	From 
		[Mat] M
	where
		[m].[Guid] = @MatGuid
		
	union all
	Select 
		dbo.SC('æÓØí ÇáÈíÚ') AS [PriceKind],
		SaleavgPrice as [price1], 
		SaleavgPrice * unityFact2 as [pric2], 
		SaleavgPrice * unityFact3 as [price3]
	From 
		[Mat] M
	where
		[m].[Guid] = @MatGuid

	union all
	Select 
		dbo.SC('ÂÎÑ ÓÚÑ ÈíÚ') AS [PriceKind],
		SaleLastPrice as [price1], 
		SaleLastPrice * unityFact2 as [pric2], 
		SaleLastPrice * unityFact3 as [price3]
	From 
		[Mat] M
	where
		[m].[Guid] = @MatGuid

	union all
	Select 
		dbo.SC('ÇßÈÑ ÓÚÑ ÈíÚ') AS [PriceKind],
		SaleMaxPrice as [price1], 
		SaleMaxPrice * unityFact2 as [pric2], 
		SaleMaxPrice * unityFact3 as [price3]
	From 
		[Mat] M
	where
		[m].[Guid] = @MatGuid
		
	

GO
/****** Object:  StoredProcedure [dbo].[PrcGetMatEqQty]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Proc [dbo].[PrcGetMatEqQty]
(
	@MatGuid uniqueidentifier = '313F5609-562C-4452-92FA-2FC37654BC08'
)
  
as
	Set NoCount on

	Declare @MtGroup uniqueidentifier
	Set @MtGroup = (Select GroupGuid From vwmat where [Guid]=@MatGuid)

	Declare @CalcQtyGuid uniqueidentifier
	Set @CalcQtyGuid = 0x0
	
	Select 
		@CalcQtyGuid = [A].[CalcQtyGuid] 
	from 
		[QtyGroup] [A]
		inner join (select Guid From [fnGetGroupParents] (@MtGroup) 
		union all
		Select @MtGroup
		) [G] On [A].[GroupGuid] = [G].[Guid]

	Select 
		[Guid] as [CalcQtyGuid],
		*
	From
		[CalcQty]
	where
		Guid = @CalcQtyGuid

GO
/****** Object:  StoredProcedure [dbo].[PrcGetMatMinMaxInfo]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcGetMatMinMaxInfo]
(
	@MatGuid uniqueidentifier = 0x0
)
  
as
	Select 
		S.code +'-'+ s.Name as [Store],
		m.* 
	From
		[MatMinMax] M
		inner join [Store] s on S.Guid = m.StoreGuid
	where
		M.ParentGuid = @MatGuid
	Order By
		M.Number

GO
/****** Object:  StoredProcedure [dbo].[PrcGetMatOrderForRecipient]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create Procedure [dbo].[PrcGetMatOrderForRecipient]
(
	@ParentOrderGuid uniqueidentifier = '378FA1DB-CA6C-4AF1-95BE-3569FEACE088',
	@RecOrderGuid uniqueidentifier = '{D82387DB-005A-4937-B989-266F0F6AC53D}'
)
as
	Set Nocount on
	Select 
		[O].[Guid],
		[O].[ParentGuid] as [OrderGuid],
		[D].*,
		St.Code+'-'+st.Name As [store]
	into #R
	From 
		[BillOrderRecipient] [O]
		inner join [BillOrderRecipientDetail] [D] On [D].[ParentGuid] = [O].[Guid]
		inner join Store St on St.GUID = D.storeGuid
	where
		([O].[Guid] = @RecOrderGuid or @RecOrderGuid = 0x0)

	--Select * from #R

	Select 
		[O].[ParentGuid] as [OrderGuid],
		[D].[MatGuid],
		--[D].[StoreGuid],
		Sum([Qty]) as [Qty1],
		Sum([Qty2]) as [Qty2]
	into #R2
	From 
		[BillOrderRecipient] [O]
		inner join [BillOrderRecipientDetail] [D] On [D].[ParentGuid] = [O].[Guid]
 	where
 		([O].[ParentGuid] = @ParentOrderGuid)
 		and ([O].[Guid] <> @RecOrderGuid)
	Group By
		[O].[ParentGuid],
		--[D].[StoreGuid],
		[D].[MatGuid]

--	Select * from #R2

	Select 
		[D].[Mat],
		Mt.code as MatCode,
		Mt.Name as MatName,
		(Select Name From MatGroup where Guid = mt.GroupGuid) as [MatGroup],
		(Select Code From MatGroup where Guid = mt.GroupGuid) as [MatGroupCode],
		Case when [R].[StoreGuid] is Null then [D].[Store] else [R].[Store] end as [Store],
		[D].[Qty],
		[D].[UnitName],
		Case when isnull([R].[Price],0) <> 0 then [R].[Price] else [D].[Price] end as [Price],
		[mt].[unity1] as [unit1],

-- 		Case when [Defunit] = 1 then 
 		Case when [D].[unit] = 1 then 
 									Case when isnull([R].[Qty],-1) = -1 then [D].[Qty] - isnull([R2].[Qty1],0) else [R].[Qty] end 
 			 else Case when isnull([R].[Qty],-1) <> -1 then [R].[Qty]
 				  	   else 	
 					      Case when [mt].[unityFact2] <> 0 then 
 												([D].[Qty] - isnull([R2].[Qty2],0)) * [mt].[unityFact2]
 						  end
 				  end	
 		end as [RQty1],
		

		[mt].[unity2] as [unit2],

 		Case when [D].[unit] = 2 then 
 									Case when isnull([R].[Qty2],-1) = -1 then [D].[Qty] - isnull([R2].[Qty2],0) else [R].[Qty2] end 
  			 else Case when isnull([R].[Qty2],-1) <> -1 then [R].[Qty2]
  				  	   else 	
  					      Case when [mt].[unityFact2] <> 0 then 
  												([D].[Qty] - isnull([R2].[Qty2],0)) / [mt].[unityFact2]
  						  end
  				  end	
 		end as [RQty2],

 		Case when [Defunity] = 1 then [R].[Qty]
 			 when [Defunity] = 2 then [R].[Qty2] end *
 		Case when isnull([R].[Price],0) <> 0 then [R].[Price] else [D].[Price] end
		as [TotalPrice],
		[D].[unit] as [Defunity],
		[mt].[Defunity] as [DefunitPrice],
		[mt].[unityFact2],
		[mt].[unityFix2],
		[D].[MatGuid],

		Case when [D].[unit] = 1 then [R2].[Qty1]
			 when [D].[unit] = 2 then [R2].[Qty2] 
		end [RQty],
		
		Case when [R].[StoreGuid] is Null then [D].[StoreGuid] else [R].[StoreGuid] end as [StoreGuid],
		[D].[StoreGuid] as [MainStoreGuid],
		[D].[Store] as [MainStore],
		[R].[ClassPtr],
		[D].[Number]
	into #EndR
	From
		[BillOrder] [O]
		inner join [vwBillOrderDetail] [D] On [D].[ParentGuid] = [O].[Guid]
		inner join [mat] [mt] on [D].[MatGuid] = [mt].[Guid]
		left join #R [R] On [R].[OrderGuid] = [O].[Guid] and [D].[MatGuid] = [R].[MatGuid] --and [R].[StoreGuid] = [D].[StoreGuid]
		left join #R2 [R2] On [R2].[OrderGuid] = [O].[Guid] and [D].[MatGuid] = [R2].[MatGuid]  --and [R2].[StoreGuid] = [D].[StoreGuid]
 	where
 		([O].[Guid] = @ParentOrderGuid or @ParentOrderGuid = 0x0)

	Select 
		*,
		[RQty1] as [RealQty1],
		[RQty2] as [RealQty2]
	from 
		#EndR
	Order By 
		[Number]


	Select 
		Sum(Qty) - Sum([RQty]) as [RQty]
	from 
		#EndR




GO
/****** Object:  StoredProcedure [dbo].[PrcGetMaxCountNumber]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create Procedure [dbo].[PrcGetMaxCountNumber]
(
	@TableName varchar(255) = 'Account',
	@FldTypeName varchar(255) = 'TypeGuid',
	@TypeGuid uniqueidentifier = 0x0
)
as
	Declare @LastNumber int, @RecCount int
	
	Select 
		@LastNumber = LastNumber,
		@RecCount = RecCount
	From 
		[TableNumber]
	where	
		([TableName] = @TableName)
		and (@TypeGuid = TypeGuid or @TypeGuid = 0x0)
		
	--Select @LastNumber as LastNumber
	
	if @LastNumber is Null
	begin
		Create Table [#TblNum] (LastNumber int)
		Declare @Sql varchar(500)
		
		Set @Sql = 'Select isnull(max(Number),0)+1 from '+@TableName
		+' '+ 
		Case 
			when @TypeGuid <> 0x0 then 
				'where '+@FldTypeName+' = '''+Cast(@TypeGuid as varchar(255))+''''
			else '' 
		end
		print @Sql
		
		insert into #TblNum
		Exec (@sql)
		
		Select @LastNumber = LastNumber from  #TblNum
		
		----- RecCount
		Set @Sql = 'Select Count(*) from '+@TableName
		+' '+ 
		Case 
			when @TypeGuid <> 0x0 then 
				'where '+@FldTypeName+' = '''+Cast(@TypeGuid as varchar(255))+''''
			else '' 
		end
		print @Sql
		
		insert into #TblNum
		Exec (@sql)
		
		Select @RecCount = LastNumber from  #TblNum

		----- end RecCount
		
		insert into [TableNumber] 
		Select
			@TableName,
			@TypeGuid,
			@LastNumber,
			@RecCount
		
	end
	
	Select @LastNumber as LastNumber, @RecCount as RecCount

GO
/****** Object:  StoredProcedure [dbo].[PrcGetOldAssetsArea]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcGetOldAssetsArea]
(
	@AssetsGuid uniqueidentifier = 0x0,
	@Date DateTime = '1/1/2013'
)
  
as
	Declare @CurrentArea uniqueidentifier
	Select Top 1
		@CurrentArea = [AreaGuid]
	From 
		[AssetsChangeArea]
	where
		([AssetsGuid] = @AssetsGuid)
		and DATE <= @Date
	Order By
		Date Desc, Number desc
		
	if ISNULL(@CurrentArea, 0x0) = 0x0
	Set @CurrentArea = (Select AssetsAreaGuid From Assets)
	
	Select @CurrentArea as [CurrentArea]

GO
/****** Object:  StoredProcedure [dbo].[PrcGetOldBalanceSecEntry]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[PrcGetOldBalanceSecEntry]
(
	@Date Datetime = '2012-07-09 00:00:00' ,
	@Guid uniqueidentifier = 0x0,
	@AccountGuid uniqueidentifier = 0x0
)
  
as
	--	Set @AccountGuid = (Select Guid From Account where Code  = '131001')
	Select
		Isnull(Sum([en].[Credit]*[en].[CurrencyVal]) ,0)
	   - Isnull(Sum([en].[Debit]*[en].[CurrencyVal]) ,0) as [Balance]
	from
		[DEntry] [en]
		inner Join 	[HEntry] as [M] on [M].[Guid] = [En].[ParentGuid]
	where
		[M].[Date] <=@Date
		and [M].[Guid] <>@Guid
		and [en].[AcGuid] = @AccountGuid


GO
/****** Object:  StoredProcedure [dbo].[PrcGetOwnerUnionFeeDetail]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcGetOwnerUnionFeeDetail]
(
	@BuildingGuid uniqueidentifier = 0x0,
	@CkFlat bit = 1,
	@CkShop bit = 1,
	@CkParking bit = 1,
	@Fee Float = 35,
	@RoundKind int = 0,
	@ItemNote varchar(255) = '[B]  [O] [N]'
)
  
as
	Create Table #UnionFeeDetail
	(
		[Number] int,
		[NO] varchar(255),
		[FlatKind] varchar(255),
		[ApartmentType] varchar(255),
		[Area] Float,
		[unity] varchar(255),
		[Fee] Float,
		[AccountName] varchar(255),
		[Cost] varchar(255),
		[AccountGuid] uniqueidentifier,
		[CostGuid] uniqueidentifier,
		[Note] varchar(255),
		[Kind] int,
		[FlatGuid] uniqueidentifier
	)
	
	if @CkFlat = 1
	insert into #UnionFeeDetail
	Select 
		F.Number,
		F.NO,
		F.FlatKind,
		F.[ApartmentType],
		F.[Area],
		F.[unity],
		dbo.FnMyRound(@Fee * F.[Area] ,@RoundKind) as [Fee],
		Cu.Name as [AccountName],
		Co.Name as [Cost] ,
		Cu.acGuid [AccountGuid] ,
		F.CostGuid,
		REPLACE(
			REPLACE(
					REPLACE(@ItemNote, '[B]', b.Name) 
					,'[O]', ISNULL(Cu.Name,'')
					)
				,'[N]', F.[No])
		as [Note],
		1 as [Kind],
		F.Guid as [FlatGuid]
	From 
		[Apartment] F
		inner join Building B on B.Guid = F.BuildingGuid
		left join vwCustomer Cu on Cu.Guid = F.CustOwnerGuid
		left join Cost Co on Co.Guid = F.CostGuid
	where
		F.BuildingGuid = @BuildingGuid
		

	if @CkShop = 1
	insert into #UnionFeeDetail
	Select 
		F.Number,
		F.NO,
		F.ShopKind,
		F.[Description],
		F.[Area],
		F.[unity],
		dbo.FnMyRound(@Fee * F.[Area] ,@RoundKind) as [Fee],
		Cu.Name as [AccountName],
		Co.Name as [Cost] ,
		Cu.acGuid [AccountGuid] ,
		F.CostGuid,
		REPLACE(
			REPLACE(
					REPLACE(@ItemNote, '[B]', b.Name) 
					,'[O]', ISNULL(Cu.Name,'')
					)
				,'[N]', F.[No])
		as [Note],
		2 as [Kind],
		F.Guid as [FlatGuid]
	From 
		[Shop] F
		inner join Building B on B.Guid = F.BuildingGuid
		left join vwCustomer Cu on Cu.Guid = F.CustGuid
		left join Cost Co on Co.Guid = F.CostGuid
	where
		F.BuildingGuid = @BuildingGuid

	if @CkParking = 1
	insert into #UnionFeeDetail
	Select 
		F.Number,
		F.NO,
		F.ParkingKind,
		F.[Description],
		F.[Area],
		F.[unity],
		dbo.FnMyRound(@Fee * F.[Area] ,@RoundKind) as [Fee],
		Cu.Name as [AccountName],
		Co.Name as [Cost] ,
		Cu.acGuid [AccountGuid] ,
		F.CostGuid,
		REPLACE(
			REPLACE(
					REPLACE(@ItemNote, '[B]', b.Name) 
					,'[O]', ISNULL(Cu.Name,'')
					)
				,'[N]', F.[No])
		as [Note],
		3 as [Kind],
		F.Guid as [FlatGuid]
	From 
		[Parking] F
		inner join Building B on B.Guid = F.BuildingGuid
		left join vwCustomer Cu on Cu.Guid = F.CustGuid
		left join Cost Co on Co.Guid = F.CostGuid
	where
		F.BuildingGuid = @BuildingGuid

	Select * from #UnionFeeDetail
	Order By Kind, Number

GO
/****** Object:  StoredProcedure [dbo].[PrcGetParameters]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcGetParameters]
(
	@PrcName Varchar(256) = 'PrcPrintReceipt'
)
  
as
	Declare @PrName Varchar(256)
			,@S Varchar(8000)
			,@PS Varchar(8000)

	Set @Ps = ''
	Set @S = '
	ShowWait(Rparameters, '');
    with QPublic Do
    begin
    	Close;
    	Sql.Clear;
    	Sql.Add(''Exec ['+@PrcName+']'');'
	DECLARE cursor_Name CURSOR FAST_FORWARD FOR 
	Select [Name] from SysColumns  where Id = (Select Id from SysObjects  where Name = @PrcName)
	Order By Colid
	
	OPEN cursor_Name
	FETCH NEXT FROM cursor_Name INTO @PrName
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
	  
	Set @S = @S + +'
		Sql.Add('''+@PrName+' = :'+RIGHT(@PrName, len(@PrName) -1)+','');'
	Set @Ps = @Ps + '
		Parameters.ParamByName('''+RIGHT(@PrName, len(@PrName) -1)+''').Value := '+RIGHT(@PrName, len(@PrName) -1)+';'

	  FETCH NEXT FROM cursor_Name INTO @PrName
	
	END
	
	CLOSE cursor_Name
	DEALLOCATE cursor_Name

	Set @S = Left(@S, len(@S) -4)+''');' + @Ps
	Set @S = @S + '
   		Open;
    end;
    
    if Not Assigned(FrmShow__) then
    FrmShow__ := TFrmShow__.Create(Self);

    for I := 0 to ColList.Count -1 do
    if Not ColList.Checked[i] then
    begin
        FrmShow__.MyGrid1.ColWidths[I+1] := -1;
    end;

    CloseWait;

    FrmShow__.LBDate.Caption := ''ãä ÊÇÑíÎ ''+ Date1.Text + '' æáÛÇíÉ '' + Date2.Text;

    FrmShow__.MyGrid1.DataSet := QPublic;
    FrmShow__.MyGrid1.LoadFromDataSet(True);

    FrmShow__.Show;
    '

	Print @S

	Exec @PrcName

GO
/****** Object:  StoredProcedure [dbo].[PrcGetParkingSpecifications]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create Procedure [dbo].[PrcGetParkingSpecifications]
(
	@BuildingGuid uniqueidentifier = 0x0,
	@ParkingKind  varchar(50) = '',
	@ParkingOwner int = 2,
	@Description varchar(255) = '',
	@Area1 Float = 0,
	@Area2 Float = 0,
	@unity varchar(255) = '',
	@Overlooking varchar(255) = ''
)
as
	Select 
		'['+F.[NO]+']' as [NO],
		'['+F.[NO]+']' as [NewNo],
		F.FloorNo,
		F.[ParkingKind],
		F.[Description],
		F.[Overlooking],
		F.[Area],
		F.[unity],
		Cu.Name as [Customer],
		F.CustGuid,
		F.[Note],
		F.[Guid] as ParkingGuid
	From 
		[vwParking] F
		left join customer Cu on Cu.Guid = F.CustGuid
	where
		(F.BuildingGuid = @BuildingGuid)
		and (F.[ParkingKind] = @ParkingKind or @ParkingKind = '')
		and (F.FlatOwner = @ParkingOwner or @ParkingOwner = 2)
		and (F.[Description] = @Description or @Description = '')
		and ((F.Area between @Area1 and @Area2 or (@Area1 = 0 and @Area2 = 0)))
		and (F.[unity] = @unity or @unity = '')
		and (F.[Overlooking] = @Overlooking or @Overlooking = '')
	order By
		F.Number

GO
/****** Object:  StoredProcedure [dbo].[PrcGetParkingWallet]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcGetParkingWallet]
(
	@Guid uniqueidentifier = '369CF34D-31AA-4381-BBCA-78E27197A9AA'
)
  
as
	Select 
		[B].[Name] as [Building],
		[F].[No] as [Parking],
		[W].[MainCost],
		[Expense],
		[W].[BeginDate],
		[C].[SaleDate],
		DATEDIFF(Day,[W].[BeginDate], [C].[SaleDate]) as [DayCount],
		[C].[SaleValue] * Case when [Wl].[CurrencyGuid] <> [C].[CurrencyGuid] then [C].[CurrencyVal] / [Wl].[CurrencyVal] else 1 end as [SaleValue],
		[C].[SaleValue] * Case when [Wl].[CurrencyGuid] <> [C].[CurrencyGuid] then [C].[CurrencyVal] / [Wl].[CurrencyVal] else 1 end
		-
		( isnull([w].[Expense],0) + [W].[MainCost] )
		as  [Profit],
		[W].[BuildingGuid],
		[W].[ParkingGuid]
	From 
		[wallet] [Wl]
		inner join [Parkingwallet] [W] on [W].[ParentGuid] = [Wl].[Guid]
		inner join [vwBuilding] [B] on [B].[Guid] = [W].[BuildingGuid]
		inner join [vwParking] [F] on [F].[Guid] = [w].[ParkingGuid]
		left join (
					Select 
						[ParkingGuid],
						[FromDate] as [SaleDate],
						[Rent] as [SaleValue],
						[CurrencyGuid],
						[CurrencyVal]
					From
						[vwParkingContract] 
					where 
						[ContractKind] = 5
					) [C] on [C].[ParkingGuid] = [W].[ParkingGuid]
	where
		[W].[ParentGuid] = @Guid
	Order By
		[W].[Number]

GO
/****** Object:  StoredProcedure [dbo].[PrcGetPartnerwallet]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcGetPartnerwallet]
(
	@Guid uniqueidentifier = '1C0AEB31-CBA2-4034-A35A-69D28552492D'
)
  
as
	Select 
		[C].[Name] as [Cust],
		[P].[Value],
		[P].[BeginDate],
		[P].[EndDate],
		[P].[CustGuid]
	From 
		[Partnerwallet] [P]
		inner join [vwCustomer] [C] on [C].[Guid] = [P].[CustGuid]
	where
		[P].[ParentGuid] = @Guid
	Order By
		[P].[Number]



GO
/****** Object:  StoredProcedure [dbo].[PrcGetShopSpecifications]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create Procedure [dbo].[PrcGetShopSpecifications]
(
	@BuildingGuid uniqueidentifier = '78B080C7-969B-4299-BFDD-0C5EE606B1E8',
	@ShopKind  varchar(50) = '',
	@ShopOwner int = 2,
	@Description varchar(255) = '',
	@Class VARCHAR(256) = '',
	@Area1 Float = 0,
	@Area2 Float = 0,
	@unity varchar(255) = '',
	@Overlooking varchar(255) = ''
)
as
	Select 
		'['+F.[NO]+']' as [NO],
		'['+F.[NO]+']' as [NewNo],
		F.[ShopKind],
		F.[Description],
		F.[Overlooking],
		F.[ltnShopKind],
		F.[ltnDescription],
		F.[ltnOverlooking],
		F.[Class],
		F.[Area],
		F.[unity],
		Cu.Name as [Customer],
		F.CustGuid,
		F.[Note],
		F.[Guid] as [ShopGuid]
	From 
		[vwShop] F
		left join customer Cu on Cu.Guid = F.CustGuid
	where
		(BuildingGuid = @BuildingGuid)
		and (F.[ShopKind] = @ShopKind or @ShopKind = '')
		and (F.FlatOwner = @ShopOwner or @ShopOwner = 2)
		and (F.[Description] = @Description or @Description = '')
		and (F.[Class] = @Class or @Class = '')
		and ((F.Area between @Area1 and @Area2 or (@Area1 = 0 and @Area2 = 0)))
		and (F.[unity] = @unity or @unity = '')
		and (F.[Overlooking] = @Overlooking or @Overlooking = '')
	order By
		F.Number

GO
/****** Object:  StoredProcedure [dbo].[PrcGetShopWallet]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcGetShopWallet]
(
	@Guid uniqueidentifier = '369CF34D-31AA-4381-BBCA-78E27197A9AA'
)
  
as
	Select 
		[B].[Name] as [Building],
		[F].[No] as [Shop],
		[W].[MainCost],
		[Expense],
		[W].[BeginDate],
		[C].[SaleDate],
		DATEDIFF(Day,[W].[BeginDate], [C].[SaleDate]) as [DayCount],
		[C].[SaleValue] * Case when [Wl].[CurrencyGuid] <> [C].[CurrencyGuid] then [C].[CurrencyVal] / [Wl].[CurrencyVal] else 1 end as [SaleValue],
		[C].[SaleValue] * Case when [Wl].[CurrencyGuid] <> [C].[CurrencyGuid] then [C].[CurrencyVal] / [Wl].[CurrencyVal] else 1 end
		-
		( isnull([w].[Expense],0) + [W].[MainCost] )
		as  [Profit],
		[W].[BuildingGuid],
		[W].[ShopGuid]
	From 
		[wallet] [Wl]
		inner join [Shopwallet] [W] on [W].[ParentGuid] = [Wl].[Guid]
		inner join [vwBuilding] [B] on [B].[Guid] = [W].[BuildingGuid]
		inner join [vwShop] [F] on [F].[Guid] = [w].[ShopGuid]
		left join (
					Select 
						[ShopGuid],
						[FromDate] as [SaleDate],
						([Rent]-[Discountvalue]) as [SaleValue],
						[CurrencyGuid],
						[CurrencyVal]
					From
						[vwLeaseApartment] 
					where 
						[LeaseKind] = 3
					) [C] on [C].[ShopGuid] = [W].[ShopGuid]
	where
		[W].[ParentGuid] = @Guid
	Order By
		[W].[Number]

GO
/****** Object:  StoredProcedure [dbo].[PrcGetTables]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[PrcGetTables]
(
	@TableName Varchar(256) = ''
)
  
as
	if @TableName = '' 
	Set @TableName = '%'
	Set @TableName = (Select replace(@TableName, ' ', '%') )
	Select 
		* 
	from 
		SysObjects 
	where
		[Name] Like @TableName
	Order By
		Case 
			when Xtype = 'U' then 0
		else 1
		end,
		[Name]


GO
/****** Object:  StoredProcedure [dbo].[PrcGetVillaWallet]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcGetVillaWallet]
(
	@Guid uniqueidentifier = '369CF34D-31AA-4381-BBCA-78E27197A9AA'
)
  
as
	Select 
		'' as [Building],
		[F].[VillaNo] as [Villa],
		[W].[MainCost],
		[Expense],
		[W].[BeginDate],
		[C].[SaleDate],
		DATEDIFF(Day,[W].[BeginDate], [C].[SaleDate]) as [DayCount],
		[C].[SaleValue] * Case when [Wl].[CurrencyGuid] <> [C].[CurrencyGuid] then [C].[CurrencyVal] / [Wl].[CurrencyVal] else 1 end as [SaleValue],
		[C].[SaleValue] * Case when [Wl].[CurrencyGuid] <> [C].[CurrencyGuid] then [C].[CurrencyVal] / [Wl].[CurrencyVal] else 1 end
		-
		( isnull([w].[Expense],0) + [W].[MainCost] )
		as  [Profit],
		0x0 as [BuildingGuid],
		[W].[VillaGuid]
	From 
		[wallet] [Wl]
		inner join [Villawallet] [W] on [W].[ParentGuid] = [Wl].[Guid]
		inner join [vwVilla] [F] on [F].[Guid] = [w].[VillaGuid]
		left join (
					Select 
						[VillaGuid],
						[FromDate] as [SaleDate],
						[Rent] as [SaleValue],
						[CurrencyGuid],
						[CurrencyVal]
					From
						[vwLandContract]  
					where 
						[ContractKind] = 8
					) [C] on [C].[VillaGuid] = [W].[VillaGuid]
	where
		[W].[ParentGuid] = @Guid
	Order By
		[W].[Number]

GO
/****** Object:  StoredProcedure [dbo].[prcHEntryUpdate]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[prcHEntryUpdate]
(
	@Guid uniqueidentifier = 'FC4889FE-422E-4089-8A69-7760F0FA441D'
)
  
as
	update [HEntry] Set 
		[Debit] = D.debit,
		[Credit] = d.Credit,
		[ItemCount] = D.[ItemCount]
	from
		[HEntry] H
		inner join (select
						parentguid,
						Sum(debit) as [Debit],
						Sum(d.Credit) as [Credit],
						COUNT(*) as [ItemCount]
					from
						dentry d 
					group by parentguid
					) D on d.ParentGuid = h.Guid
	where
		H.Guid = @Guid

GO
/****** Object:  StoredProcedure [dbo].[PrcHijriStrtoGergDate]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcHijriStrtoGergDate] (@hijristr Varchar(256), @Formt Varchar(256))
  
AS
	--if LEN(@hijristr) < 6
	--Set @Formt = REVERSE(@Formt)
	--Set @Formt = REVERSE(@hijristr)
	
	Declare
		@D Varchar(256),
		@M Varchar(256),
		@Y Varchar(256)
	
	Set @D = ''
	Set @M = ''
	Set @Y = ''
	
	Declare @Ix_d int, @Ix_m int, @Ix_y int
	
	Declare @SpIx int

	Select @Ix_d = CHARINDEX(UPPER('d'), UPPER(@Formt))
	--Select @Ix_d
	
	Select @Ix_m = CHARINDEX(UPPER('m'), UPPER(@Formt))
	--Select @Ix_m

	Select @Ix_y = CHARINDEX(UPPER('y'), UPPER(@Formt))
	--Select @Ix_y
	
	
	Declare @Sp Varchar(1)
	if CHARINDEX('/', @Formt) <> 0
	Set @Sp = '/'
	else
	Set @Sp = '-'
	
	Declare @V Varchar(256)
	Declare @I int
	Declare @f Bit
	Set @I = 0
	Set @hijristr = @hijristr + @Sp
	
	if LEN(@hijristr) > 7
	begin
			while LEN(@hijristr) > 0
			begin
				Set @f = 0
				Set @I = @I + 1
				
				Select @SpIx = CHARINDEX(@Sp, @hijristr)
				
				Set @V = SUBSTRING(@hijristr, 1, @SpIx-1)
				
				if (@Ix_d < @Ix_m) and (@Ix_d < @Ix_y) and @f = 0
				begin
					Set @D = @v
					Set @f = 1
					Set @Ix_d = 100
				end
				
				if (@Ix_m < @Ix_d) and (@Ix_m < @Ix_y) and @f = 0 
				begin
					Set @m = @v
					Set @f = 1
					Set @Ix_m = 100
				end

				if (@Ix_y < @Ix_d) and (@Ix_y < @Ix_d) and @f = 0
				begin
					Set @y = @v
					Set @f = 1
					Set @Ix_y = 100
				end
				--Select @D d, @M m , @Y y
				
				Set	@hijristr = SUBSTRING(@hijristr, @SpIx +1, LEN(@hijristr))
			end
	end
	else
	begin
			while LEN(@hijristr) > 0
			begin
				
				Set @f = 0
				Set @I = @I + 1
				
				Select @SpIx = CHARINDEX(@Sp, @hijristr)
				
				Set @V = SUBSTRING(@hijristr, 1, @SpIx-1)
				
				if @I = 1
				begin
					Set @D = @v
				end
				
				if @I = 2
				begin
					Set @M = @v
				end

				Set	@hijristr = SUBSTRING(@hijristr, @SpIx +1, LEN(@hijristr))
			end
	end	

	if @M > 12 
	begin
		declare @T int
		Set @T = @D
		
		Set @D = @M
		
		Set @M = @T
	end


	Set @D = REPLACE(@D, '/', '')
	Set @D = REPLACE(@D, '-', '')
	
	if @d = ''
	Set @D = dbo.FnGregToHijriDate (getDate(), 'dd') 
	
	Set @M = REPLACE(@M, '/', '')
	Set @M = REPLACE(@M, '-', '')
	
	if @M = ''
	Set @M = dbo.FnGregToHijriDate (getDate(), 'mm') 
	
	Set @Y = REPLACE(@Y, '/', '')
	Set @Y = REPLACE(@Y, '-', '')
	
	if @Y = ''
	Set @Y = dbo.FnGregToHijriDate (getDate(), 'yyyy') 
	
	
	Select @Y, @M, @d
	Select dbo.fnDecodeHijriDatetoGergDate(Cast(@y as int), Cast(@m as int), Cast(@d as int))



GO
/****** Object:  StoredProcedure [dbo].[PrcImportGroup]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create Procedure [dbo].[PrcImportGroup]
(
	@UpdateGroupName bit = 1
)
as
	Set noCount on
	
	Declare 
		@AddFalg int,
		@updateFalg int
		
	Set @AddFalg = 0
	Set @updateFalg = 0

	Select Distinct
		GroupCode COLLATE database_default as GroupCode,
		GroupName COLLATE database_default as GroupName
	into #GroupTmp
	From 
		[ImportMatTmp]
		
	Create Table #TmpCode
	(Code varchar(255) COLLATE database_default)
	
	Declare @GroupCode varchar(255),
			@GroupName varchar(255),
			@Gen@GroupCode varchar(255)
			
	DECLARE cursor_Name CURSOR FAST_FORWARD FOR 
	Select * from #GroupTmp
	
	OPEN cursor_Name
	FETCH NEXT FROM cursor_Name INTO @GroupCode ,@GroupName 
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
	  
	  if exists(Select Top 1 * from MatGroup where Code = @GroupCode)
	  begin --Ýí ÍÇá ÑãÒ ÇáãÌãæÚÉ ãæÌæÏ
		if @UpdateGroupName = 1
		begin
			update MatGroup set Name = @GroupName 
			where 
				Code = @GroupCode
				and Name <> @GroupName
			
			Set @updateFalg = @updateFalg + @@ROWCOUNT
		end
	  end
	  else
	  begin --ÑãÒ ÇáãÌãæÚÉ ÛíÑ ãæÌæÏ ÈÇÌÏæá
		if @GroupCode <> '' --íæÌÏ ÑãÒ ãÌãæÚÉ
		begin
			insert into MatGroup
			([Number],[SecLvl],[Code],[Name],[LtnName],[Note],[ParentGuid])
			Select
				isNull((Select MAX([Number]) from MatGroup),0)+1 as [Number],
				0 as [SecLvl],
				@GroupCode as [Code],
				@GroupName as [Name],
				@GroupName as [LtnName],
				'' as [Note],
				Null as [ParentGuid]
			
			Set @AddFalg = @AddFalg + 1
		end
		if @GroupCode = '' --ÑãÒ ÇáãÌãæÚÉ ÝÇÑÛ
		begin
			 if Not exists(Select Top 1 * from MatGroup where Name = @GroupName)
			 begin
				Delete #TmpCode
				insert into #TmpCode
				exec PrcCalcMaxGroupcode 0x0
				
				Set @Gen@GroupCode = (Select Top 1 Code From #TmpCode)
				insert into MatGroup
				([Number],[SecLvl],[Code],[Name],[LtnName],[Note],[ParentGuid])
				Select
					isNull((Select MAX([Number]) from MatGroup),0)+1 as [Number],
					0 as [SecLvl],
					@Gen@GroupCode as [Code],
					@GroupName as [Name],
					@GroupName as [LtnName],
					'' as [Note],
					Null as [ParentGuid]
					
				update [ImportMatTmp] Set GroupCode = @Gen@GroupCode where GroupName = @GroupName
				
				Set @AddFalg = @AddFalg + 1
			end	  
	   end
	   end
	  FETCH NEXT FROM cursor_Name INTO @GroupCode ,@GroupName 
	
	END
	
	CLOSE cursor_Name
	DEALLOCATE cursor_Name		
	
	Select @AddFalg as AddFalg, @updateFalg as updateFalg

GO
/****** Object:  StoredProcedure [dbo].[PrcImportMat]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create Procedure [dbo].[PrcImportMat]
(
	@UpdateMatinfo bit = 1
)
as
	Set noCount on

	Declare 
		@AddFalg int,
		@updateFalg int
		
	Set @AddFalg = 0
	Set @updateFalg = 0

	Select Distinct
		Code COLLATE database_default as Code ,
		Name COLLATE database_default as Name
	into #MatTmp
	From 
		[ImportMatTmp]
		
	Declare @GroupGuid uniqueidentifier,
			@TmpMatGuid uniqueidentifier
	
	declare @DefCurrency Varchar(256)
	Select @DefCurrency = Value from dmd_const where vName = 'DefCurrency'

	--Select * from #MatTmp	--return	
	
	Create Table #TmpCode
	(Code varchar(255) COLLATE database_default)
	
	Declare @MatCode varchar(255),
			@MatName varchar(255),
			@GenMatCode varchar(255)
			
	DECLARE cursor_Name CURSOR FAST_FORWARD FOR 
	Select * from #MatTmp
	
	OPEN cursor_Name
	FETCH NEXT FROM cursor_Name INTO @MatCode ,@MatName 
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
	  
	  if exists(Select Top 1 * from Mat where Code = @MatCode)
	  begin --Ýí ÍÇá ÑãÒ ÇáãÇÏÉ ãæÌæÏ
		Set @TmpMatGuid = (Select Top 1 Guid From Mat where Code = @MatCode)
		
		if (@UpdateMatinfo = 1) and (dbo.fnMatIsUse(@TmpMatGuid) = 0)
		begin
			--Select 'Update'
			update Mat set 
				Name = @MatName, 
				[LtnName] = T.[LtnName],
				[Unity1] = T.[Unity1], 
				[Unity2] = T.[Unity2], 
				[Unity3] = T.[Unity3], 
				[Barcode1] = T.[Barcode], 
				[Barcode2] = T.[Barcode2], 
				[Barcode3] = T.[Barcode3], 
				[DefUnity] = 
				Case 
					when T.[DefUnity1] = 1 then 1
					when T.[DefUnity2] = 1 then 2
					when T.[DefUnity3] = 1 then 3
				end, 
				[unityFact2] = T.[unityFact2], 
				[unityFact3] = T.[unityFact3], 
				[unityfix2] = T.[unityfix2], 
				[unityfix3] = T.[unityfix3], 
				[Note] = T.[Note], 
				[GroupGuid] = (Select Guid from MatGroup where Code = T.GroupCode), 
				[MatType] = Case when T.[MatType] = 1 then 1 else 0 end
			from
				Mat mt 
				inner join (Select Top 1 * from [ImportMatTmp] where Code = @MatCode order by ID) T on T.Code = mt.code
			
			Set @updateFalg = @updateFalg + @@ROWCOUNT

			--ÇÓÊíÑÇÏ ÇáÇÓÚÇÑ
			exec [PrcSetMatDescriptionPriceFromTmp] @MatCode
		end
	  end
	  else
	  begin --ÑãÒ ÇáãÌãæÚÉ ÛíÑ ãæÌæÏ ÈÇÌÏæá
		if @MatCode <> '' --íæÌÏ ÑãÒ ãÇÏÉ
		begin
			insert into Mat
			([Number], [SecLvl], [Code], [Name], [LtnName], [Unity1], [Unity2], [Unity3], [Barcode1], [Barcode2], [Barcode3], [DefUnity], [unityFact2], [unityFact3], [unityfix2], [unityfix3], [Note], [GroupGuid], [MatType], [CurrencyGuid], [CurrencyVal], [AvgPrice], [LastPriceDate], [LastPrice], [MaxPrice])
			Select Top 1
				isNull((Select MAX([Number]) from Mat),0)+1 as [Number],
				0 as [SecLvl],
				@MatCode as [Code],
				@MatName as [Name],
				[LtnName] as [LtnName],
				[Unity1], 
				[Unity2], 
				[Unity3], 
				[Barcode], 
				[Barcode2], 
				[Barcode3], 
				Case 
					when [DefUnity1] = 1 then 1
					when [DefUnity2] = 1 then 2
					when [DefUnity3] = 1 then 3
				end, 
				[unityFact2], 
				[unityFact3], 
				[unityfix2], 
				[unityfix3], 
				[Note], 
				(Select Guid from MatGroup where Code = T.GroupCode) as [GroupGuid], 
				Case when [MatType] = 1 then 1 else 0 end, 
				@DefCurrency as [CurrencyGuid], 
				1 as [CurrencyVal], 
				0 as [AvgPrice], 
				0 as [LastPriceDate], 
				0 as [LastPrice], 
				0 as [MaxPrice]
			from
				[ImportMatTmp] T
			where
				Code = @MatCode
			order By
				id
			
			--ÇÓÊíÑÇÏ ÇáÇÓÚÇÑ
			exec [PrcSetMatDescriptionPriceFromTmp] @MatCode
			
			Set @AddFalg = @AddFalg + 1
		end
		if @MatCode = '' --ÑãÒ ÇáãÇÏÉ ÝÇÑÛ
		begin
			 if Not exists(Select Top 1 * from Mat where Name = @MatName)
			 begin
				Set @GroupGuid = (Select Guid From MatGroup where Code = (Select GroupCode From ImportMatTmp where Name = @MatName))
				Delete #TmpCode
				insert into #TmpCode
				exec PrcCalcMaxMatCode @GroupGuid
				
				Set @GenMatCode = (Select Top 1 Code From #TmpCode)
				insert into Mat
				([Number], [SecLvl], [Code], [Name], [LtnName], [Unity1], [Unity2], [Unity3], [Barcode1], [Barcode2], [Barcode3], [DefUnity], [unityFact2], [unityFact3], [unityfix2], [unityfix3], [Note], [GroupGuid], [MatType], [CurrencyGuid], [CurrencyVal], [AvgPrice], [LastPriceDate], [LastPrice], [MaxPrice])
				Select Top 1
					isNull((Select MAX([Number]) from Mat),0)+1 as [Number],
					0 as [SecLvl],
					@GenMatCode as [Code],
					@MatName as [Name],
					[LtnName] as [LtnName],
					[Unity1], 
					[Unity2], 
					[Unity3], 
					[Barcode], 
					[Barcode2], 
					[Barcode3], 
					Case 
						when [DefUnity1] = 1 then 1
						when [DefUnity2] = 1 then 2
						when [DefUnity3] = 1 then 3
					end, 
					[unityFact2], 
					[unityFact3], 
					[unityfix2], 
					[unityfix3], 
					[Note], 
					(Select Guid from MatGroup where Code = T.GroupCode) as [GroupGuid], 
					Case when [MatType] = 1 then 1 else 0 end, 
					@DefCurrency as [CurrencyGuid], 
					1 as [CurrencyVal], 
					0 as [AvgPrice], 
					0 as [LastPriceDate], 
					0 as [LastPrice], 
					0 as [MaxPrice]
				from
					[ImportMatTmp] T
				where
					Name = @MatName
				order By
					id
				
				update [ImportMatTmp] Set Code = @GenMatCode where Name = @matName
				
				--ÇÓÊíÑÇÏ ÇáÇÓÚÇÑ
				exec [PrcSetMatDescriptionPriceFromTmp] @MatCode
				
				Set @AddFalg = @AddFalg + 1
			end	  
	   end
	   end
	  FETCH NEXT FROM cursor_Name INTO @MatCode ,@MatName 
	
	END
	
	CLOSE cursor_Name
	DEALLOCATE cursor_Name		
	
	Select @AddFalg as AddFalg, @updateFalg as updateFalg
	
	Update mat set [DefUnity] = 1 where [DefUnity] is Null

GO
/****** Object:  StoredProcedure [dbo].[PrcIncMonthHijridate]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[PrcIncMonthHijridate]
(
	@MonthCount int = 10,
	@Date Datetime = 42200
)
  
as
	Declare 
		@Y int, @M int, @D int,
		@Hdate Varchar(256),
		@Sign int

	 
	Set @Hdate = CONVERT(char(10), @Date, 131)

	Set @Y = SUBSTRING(@Hdate, 7, 4)
	Set @M = SUBSTRING(@Hdate, 4, 2)
	Set @d = SUBSTRING(@Hdate, 1, 2)

	If @MonthCount > 0
	Set @Sign = 1 else Set @Sign = -1

	Set @M = @M + @MonthCount


	while @M -1 > 11
	begin
		Set @Y = @Y + @Sign;
		Set @M = @M + ( -12 * @Sign)
	end;

	--Select @Hdate as [HD], @Y as [Year], @M as [Month], @d As [Day], @Sign
	Select dbo.fnDecodeHijriDatetoGergDate(@y, @m, @d),
		CONVERT(char(10), dbo.fnDecodeHijriDatetoGergDate(@y, @m, @d), 131)

	

GO
/****** Object:  StoredProcedure [dbo].[PrcIncomeSaved]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[PrcIncomeSaved]
(
	@Guid uniqueidentifier = 0x0
)
  
as

	Select 
		c.FlatNo as [RealtyNo],
		C.[ContractNo],
		[C].[BuildingName],
		C.FlatNo as [FlatName],
		D.*,
		0 as Kind
	into #IncomeSaved_tmp
	From 
		[vwAllContract] [C]
		inner join [IncomeSavedDetail] D on d.contractGuid = C.Guid
	where
		D.parentGuid = @Guid
-------------------------

	Insert into #IncomeSaved_tmp
	Select
		''
		,'ÇáãÌãæÚ' as [ContractNo]
		,'' as [BuildingName]
		,'' as [FlatName]
		,max(Number) as Number 

		,0x0 as [ParentGuid]
		,0x0 as [ContractGuid]
		,'' as [strKind]

		,Sum([RentPrice])
		,0 as [FromDate]
		,0 as [ToDate]
		,0 as [EndDate]
		,Sum([Days])
		,Sum([DayPrice])
		,Sum([DayPeriod])
		,Sum([Income])
		,0 as [ContractFinish]
		,Sum([Collection])
		,Sum([CheckNotCollection])
		,Sum([Cash])
		,Sum([TotalPays])
		,Sum([ContractRest])
		,Sum([CustBalance])
		,1 as Kind
	From
		#IncomeSaved_tmp
		
	Select 
		[E].*
	from 
		#IncomeSaved_tmp [E]
	order By
		Number
	
	Select
		Sum([RentPrice]) as [RentPrice]
		,Sum([Days]) as [Days]
		,Sum([DayPeriod]) as [DayPeriod]
		,Sum([Income]) as  [Income]
		,Sum([Collection]) as [Collection]
		,Sum([CheckNotCollection]) as [CheckNotCollection]
		,Sum([Cash]) as [Cash]
		,Sum([TotalPays]) as [TotalPays]
		,Sum([ContractRest]) as [ContractRest]
		,Sum([CustBalance]) as [CustBalance]
	From
		#IncomeSaved_tmp
	where
		[Kind] = 0
	

GO
/****** Object:  StoredProcedure [dbo].[PrcIncomeSure]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcIncomeSure]
(
	@CurrencyVal Float = 1
	,@Date1 DateTime = '1/1/2015'
	,@Date2 DateTime = '12/31/2016'
	,@RoundKind int  = 0
	,@ShowIsCheck Bit = 1
	,@ShowIsNotCheck Bit = 1
	,@EndState int = 2
	,@DateWith int = 0
	,@IncomDate1 DateTime = '1/1/2015'
	,@IncomDate2 DateTime = '12/31/2016'
)
  
as
	
	Declare @Tbl Table
	(
		[RealtyNo] Varchar(256)
		,[ContractNo] Varchar(256)
		,[ContractNumber] int
		,[ContractTypeName] Varchar(256)
		,[BuildingName] Varchar(256)
		,[StrKind] Varchar(256)
		,[FlatName] Varchar(256)
		,[RentPrice] Float
		,[FromDate] DateTime
		,[ToDate] DateTime
		,[EndDate] DateTime
		,[Days] Int
		,[DayPrice] Float
		,[DayPeriod] Int
		,[Income] Float
		,[Check] Bit
		,[ContractFinish] Bit
		,[ContractGuid] uniqueidentifier
		,[FlatGuid] uniqueidentifier
		,[AccountGuid] uniqueidentifier
		,[CostGuid] uniqueidentifier
		,[Kind] Int
		,[Sort] int
	)

	Declare @PCheck Bit 
	Set @PCheck = 1	
	Declare @PNotCheck Bit 
	Set @PNotCheck = 0

	Insert Into @Tbl
	Select 
		[F].[NO]
		,[ContractNo]
		,c.[Number] as [ContractNumber]
		,c.TypeName as [ContractTypeName]
		,[F].[BuildingName]
		,dbo.SC('ÔÞÉ') as [StrKind]
		,[F].[No]+' '+[F].[ApartmentType] as [FlatName]
		,[C].[RentAfterDiscount] * [C].[CurrencyVal] / @CurrencyVal as [RentPrice]
		,[FromDate]
		,[ToDate]
		,[ContractFinishDate]
		,DateDiff(Day, [FromDate], [ToDate])  +1  as [Days]
		,0 as [DayPrice]
		,dbo.FnDayDiff([FromDate], [Enddate], @IncomDate1, @IncomDate2) +1 as [DayPeriod]
		,0 as [Income]
		,Case when [Rc].[ObjGuid] is null then @PNotCheck
			 when [Rc].[ObjGuid] is not null  then @PCheck end as [Check]
		,C.[ContractFinish]
		,[C].[Guid] as [ContractGuid]
		,[F].[Guid]
		,C.[CustAccountGuid]
		,C.[CostGuid]
		,0
		,0
	From 
		[vwLeaseApartment] [C]
		inner join [vwApartment] [F] on [F].[Guid] = [C].[ApartmentGuid]
		inner join [Resource] [R] on [R].[Guid] = [C].[BuildingGuid]  and [R].[Spid] = @@Spid
		inner join [Resource] [R2] on [R2].[Guid] = [C].[TypeGuid]  and [R2].[Spid] = @@Spid
		left join [RepCheck] [Rc] on [Rc].[ObjGuid] = [C].[Guid] and [Rc].[IdReport] = 10
	where
		([LeaseKind] = 0)
		and dbo.FnDayDiff([FromDate], [EndDate], @IncomDate1, @IncomDate2) >= 0
		and
		(
			([Rc].[ObjGuid] is not null and @ShowIsCheck = 1)
			or
			([Rc].[ObjGuid] is null and @ShowIsNotCheck = 1)
		)
		and ([C].[ContractFinish] = @EndState or @EndState = 2)
		and (
				([EditDate] Between @date1 and @Date2 And @DateWith = 3) or
				([FromDate] Between @date1 and @Date2 And @DateWith = 0) or
				([ToDate] Between @date1 and @Date2 And @DateWith = 1) or
				([EndDate] Between @date1 and @Date2 And @DateWith = 2)
			)
	--Select * from @Tbl return
		
	Insert Into @Tbl
	Select 
		[F].[No]
		,[ContractNo]
		,c.[Number] as [ContractNumber]
		,c.TypeName as [ContractTypeName]
		,[F].[BuildingName]
		,dbo.SC('ãÍá')
		,[F].[No]+' ' as [FlatName]
		,[C].[RentAfterDiscount] * [C].[CurrencyVal] / @CurrencyVal as [RentPrice]
		,[FromDate]
		,[ToDate]
		,[ContractFinishDate]
		,DateDiff(Day, [FromDate], [ToDate]) +1  as [Days]
		,0 as [DayPrice]
		,dbo.FnDayDiff([FromDate], [Enddate], @IncomDate1, @IncomDate2)  +1 as [DayPeriod]
		,0 as [Income]
		,Case when [Rc].[ObjGuid] is null then @PNotCheck
			 when [Rc].[ObjGuid] is not null  then @PCheck end as [Check]
		,C.[ContractFinish]
		,[C].[Guid] as [ContractGuid]
		,[F].[Guid]
		,C.[CustAccountGuid]
		,C.[CostGuid]
		,1
		,0 
	From 
		[vwLeaseApartment] [C]
		inner join [vwShop] [F] on [F].[Guid] = [C].[ShopGuid]
		inner join [Resource] [R] on [R].[Guid] = [C].[BuildingGuid]  and [R].[Spid] = @@Spid
		inner join [Resource] [R2] on [R2].[Guid] = [C].[TypeGuid]  and [R2].[Spid] = @@Spid
		left join [RepCheck] [Rc] on [Rc].[ObjGuid] = [C].[Guid] and [Rc].[IdReport] = 10
	where
		([LeaseKind] = 1)
		and dbo.FnDayDiff([FromDate], [EndDate], @IncomDate1, @IncomDate2) >= 0
		and
		(
			([Rc].[ObjGuid] is not null and @ShowIsCheck = 1)
			or
			([Rc].[ObjGuid] is null and @ShowIsNotCheck = 1)
		)
		and ([C].[ContractFinish] = @EndState or @EndState = 2)
		and (
				([EditDate] Between @date1 and @Date2 And @DateWith = 3) or
				([FromDate] Between @date1 and @Date2 And @DateWith = 0) or
				([ToDate] Between @date1 and @Date2 And @DateWith = 1) or
				([EndDate] Between @date1 and @Date2 And @DateWith = 2)
			)


	
	Insert Into @Tbl
	Select 
		[F].[No]
		,[ContractNo]
		,c.[Number] as [ContractNumber]
		,c.TypeName as [ContractTypeName]
		,[F].[BuildingName]
		,dbo.SC('ãæÞÝ')
		,[F].[No]+' ' as [FlatName]
		,[C].[Rent] * [C].[CurrencyVal] / @CurrencyVal as [RentPrice]
		,[FromDate]
		,[ToDate]
		,[ContractFinishDate]
		,DateDiff(Day, [FromDate], [ToDate]) +1  as [Days]
		,0 as [DayPrice]
		,dbo.FnDayDiff([FromDate], [Enddate], @IncomDate1, @IncomDate2)  +1 as [DayPeriod]
		,0 as [Income]
		,Case when [Rc].[ObjGuid] is null then @PNotCheck
			 when [Rc].[ObjGuid] is not null  then @PCheck end as [Check]
		,C.[ContractFinish]
		,[C].[Guid] as [ContractGuid]
		,[F].[Guid]
		,C.[CustAccountGuid]
		,C.[CostGuid]
		,1
		,0 
	From 
		[vwParkingContract] [C]
		inner join [vwParking] [F] on [F].[Guid] = [C].[ParkingGuid]
		inner join [Resource] [R] on [R].[Guid] = [C].[BuildingGuid]  and [R].[Spid] = @@Spid
		inner join [Resource] [R2] on [R2].[Guid] = [C].[TypeGuid]  and [R2].[Spid] = @@Spid
		left join [RepCheck] [Rc] on [Rc].[ObjGuid] = [C].[Guid] and [Rc].[IdReport] = 10
	where
		([ContractKind] = 4)
		and dbo.FnDayDiff([FromDate], [EndDate], @IncomDate1, @IncomDate2) >= 0
		and
		(
			([Rc].[ObjGuid] is not null and @ShowIsCheck = 1)
			or
			([Rc].[ObjGuid] is null and @ShowIsNotCheck = 1)
		)
		and ([C].[ContractFinish] = @EndState or @EndState = 2)
		and (
				([EditDate] Between @date1 and @Date2 And @DateWith = 3) or
				([FromDate] Between @date1 and @Date2 And @DateWith = 0) or
				([ToDate] Between @date1 and @Date2 And @DateWith = 1) or
				([EndDate] Between @date1 and @Date2 And @DateWith = 2)
			)

	
	Insert Into @Tbl
	Select 
		[F].[Name]
		,[ContractNo]
		,c.[Number] as [ContractNumber]
		,c.TypeName as [ContractTypeName]
		,''
		,dbo.SC('ÃÑÖ')
		,[F].[Name]+' ' as [FlatName]
		,[C].[Rent] * [C].[CurrencyVal] / @CurrencyVal as [RentPrice]
		,[FromDate]
		,[ToDate]
		,[ContractFinishDate]
		,DateDiff(Day, [FromDate], [ToDate]) +1  as [Days]
		,0 as [DayPrice]
		,dbo.FnDayDiff([FromDate], [Enddate], @IncomDate1, @IncomDate2)  +1 as [DayPeriod]
		,0 as [Income]
		,Case when [Rc].[ObjGuid] is null then @PNotCheck
			 when [Rc].[ObjGuid] is not null  then @PCheck end as [Check]
		,C.[ContractFinish]
		,[C].[Guid] as [ContractGuid]
		,[F].[Guid]
		,C.[CustAccountGuid]
		,C.[CostGuid]
		,1
		,0 
	From 
		[vwLandContract] [C]
		inner join [vwEarth] [F] on [F].[Guid] = [C].[landGuid]
		inner join [Resource] [R2] on [R2].[Guid] = [C].[TypeGuid]  and [R2].[Spid] = @@Spid
		left join [RepCheck] [Rc] on [Rc].[ObjGuid] = [C].[Guid] and [Rc].[IdReport] = 10
	where
		([ContractKind] = 7)
		and dbo.FnDayDiff([FromDate], [EndDate], @IncomDate1, @IncomDate2) >= 0
		and
		(
			([Rc].[ObjGuid] is not null and @ShowIsCheck = 1)
			or
			([Rc].[ObjGuid] is null and @ShowIsNotCheck = 1)
		)
		and ([C].[ContractFinish] = @EndState or @EndState = 2)
		and (
				([EditDate] Between @date1 and @Date2 And @DateWith = 3) or
				([FromDate] Between @date1 and @Date2 And @DateWith = 0) or
				([ToDate] Between @date1 and @Date2 And @DateWith = 1) or
				([EndDate] Between @date1 and @Date2 And @DateWith = 2)
			)


	Insert Into @Tbl
	Select 
		[F].[Name]
		,[ContractNo]
		,c.[Number] as [ContractNumber]
		,c.TypeName as [ContractTypeName]
		,''
		,dbo.SC('ÝíáÇ')
		,[F].[Name]+' ' as [FlatName]
		,[C].[Rent] * [C].[CurrencyVal] / @CurrencyVal as [RentPrice]
		,[FromDate]
		,[ToDate]
		,[ContractFinishDate]
		,DateDiff(Day, [FromDate], [ToDate]) +1  as [Days]
		,0 as [DayPrice]
		,dbo.FnDayDiff([FromDate], [Enddate], @IncomDate1, @IncomDate2)  +1 as [DayPeriod]
		,0 as [Income]
		,Case when [Rc].[ObjGuid] is null then @PNotCheck
			 when [Rc].[ObjGuid] is not null  then @PCheck end as [Check]
		,C.[ContractFinish]
		,[C].[Guid] as [ContractGuid]
		,[F].[Guid]
		,C.[CustAccountGuid]
		,C.[CostGuid]
		,1
		,0 
	From
		[vwLandContract] [C]
		inner join [vwVilla] [F] on [F].[Guid] = [C].[VillaGuid]
		inner join [Resource] [R2] on [R2].[Guid] = [C].[TypeGuid]  and [R2].[Spid] = @@Spid
		left join [RepCheck] [Rc] on [Rc].[ObjGuid] = [C].[Guid] and [Rc].[IdReport] = 10
	where
		([ContractKind] = 9)
		and dbo.FnDayDiff([FromDate], [EndDate], @IncomDate1, @IncomDate2) >= 0
		and
		(
			([Rc].[ObjGuid] is not null and @ShowIsCheck = 1)
			or
			([Rc].[ObjGuid] is null and @ShowIsNotCheck = 1)
		)
		and ([C].[ContractFinish] = @EndState or @EndState = 2)
		and (
				([EditDate] Between @date1 and @Date2 And @DateWith = 3) or
				([FromDate] Between @date1 and @Date2 And @DateWith = 0) or
				([ToDate] Between @date1 and @Date2 And @DateWith = 1) or
				([EndDate] Between @date1 and @Date2 And @DateWith = 2)
			)

	update @Tbl Set [DayPeriod] = Case when [DayPeriod] = 1 then 0 else [DayPeriod] end
	update @Tbl Set [DayPrice] = [RentPrice] / [Days]
	update @Tbl Set [Income] = dbo.FnMyRound([DayPrice] * [DayPeriod], @RoundKind)

	-------------------------
	-- ÇáÔíßÇÊ
	Select
		C1.date,
		[P].[ContractGuid],
		Sum(IsNull([P].[Value] * [P].[CurrencyVal],0)) as [Total],
		Sum(IsNull([C1].[Value] * [C1].[CurrencyVal],0)) as [Collection]
	Into #CollectionAll
	From
		[vwChecks] [P]
		left join [vwChecksCollection] [C1] on [C1].[CheckGuid] = [P].[Guid] and [C1].[Kind] = 1
		left join [vwChecksCollection] [C3] on [C3].[CheckGuid] = [P].[Guid] and [C3].[Kind] = 3
		inner join @Tbl [t] on [t].[ContractGuid] = [P].[ContractGuid]
		inner join CheckType CT on CT.Guid = p.TypeGuid
	WHERE
		CT.CollectedEntryTypeGuid Is Null
		and [C3].checkGuid is Null
	Group By
		[C1].[date],
		[P].[ContractGuid] 
		
	-- ÇáÔíßÇÊ
	Select
		[ContractGuid],
		Sum(IsNull([Total],0)) as [Total],
		Sum(IsNull([Collection],0)) as [Collection]
	Into #Collection
	From
		#CollectionAll
	Group By
		[ContractGuid] 
		
		
	Select
		[ContractGuid],
		Sum(IsNull([Total],0)) as [Total],
		Sum(IsNull([Collection],0)) as [Collection]
	Into #CollectionIncom
	From
		#CollectionAll
	where
		Date Between @IncomDate1 and @IncomDate2
	Group By
		[ContractGuid] 

	--Select * from #Collection where ContractGuid = 'B7867C14-4D4C-4CBC-BA65-DCB22E950C29'

	-- ÇáÊÞÏí
	Create Table [#CashAll]
	(
		[Date] Datetime,
		[ContractGuid] uniqueidentifier,
		[Cash] Float
	)
	
	insert into [#CashAll]
	Select
		p.Date,
		[P].[ContractGuid],
		Sum(IsNull([P].[Value] * [P].[CurrencyVal],0)) as [Cash]
	From
		[vwContractCachPayment] [P]
		inner join @Tbl [t] on [t].[ContractGuid] = [P].[ContractGuid] and P.AcGuid = t.AccountGuid
	Group By
		p.Date,
		[P].[ContractGuid]

	insert into [#CashAll]
	Select
		p.Date,
		[P].[ContractGuid],
		Sum(IsNull([P].[Value] * [P].[CurrencyVal],0)) as [Cash]
	From
		[vwContractParkingCachPayment] [P]
		inner join @Tbl [t] on [t].[ContractGuid] = [P].[ContractGuid] and P.AcGuid = t.AccountGuid
	Group By
		p.Date,
		[P].[ContractGuid]

	insert into [#CashAll]
	Select
		p.Date,
		[P].[ContractGuid],
		Sum(IsNull([P].[Value] * [P].[CurrencyVal],0)) as [Cash]
	From
		vwLandContractCachPayment [P]
		inner join @Tbl [t] on [t].[ContractGuid] = [P].[ContractGuid] and P.AcGuid = t.AccountGuid
	Group By
		p.Date,
		[P].[ContractGuid]

	Select 
		ContractGuid,
		SUM([Cash]) as [Cash]
	into #Cash
	From
		#CashAll
	Group By
		ContractGuid
		
	Select 
		ContractGuid,
		SUM([Cash]) as [Cash]
	into #CashIncom
	From
		#CashAll
	where
		Date between @IncomDate1 and @IncomDate2
	Group By
		ContractGuid
	
	-----------------
	Create Table #EndRes
	(
		[RealtyNo] Varchar(256)
		,[ContractNo] Varchar(256)
		,[ContractNumber] int
		,[ContractTypeName] Varchar(256)
		,[BuildingName] Varchar(256)
		,[StrKind] Varchar(256)
		,[FlatName] Varchar(256)
		,[RentPrice] Float
		,[FromDate] DateTime
		,[ToDate] DateTime
		,[EndDate] DateTime
		,[Days] Int
		,[DayPrice] Float
		,[DayPeriod] Int
		,[Income] Float
		,[Check] Bit
		,[ContractFinish] Bit
		,[ContractGuid] uniqueidentifier
		,[FlatGuid] uniqueidentifier
		,[AccountGuid] uniqueidentifier
		,[CostGuid] uniqueidentifier
		,[Kind] Int
		,[Sort] int
		,[Collection] Float
		,[CollectionIncom] Float
		,[CheckNotCollection] Float
		,[Cash] Float
		,[CashIncom] Float
		,[TotalPays] Float
		,[ContractRest] Float
		,[CustBalance] Float
		,[GLCustBalance] Float
	)
		
	insert into #EndRes
	Select 
		t.*,
		isNull([C].[Collection],0) as [Collection],
		isNull([CCI].[Collection],0) as [CollectionIncom],
		isNull([C].[Total],0) - isNull([C].[Collection],0) as [CheckNotCollection],
		isNull([h].[Cash],0) as [Cash],
		isNull([CI].[Cash],0) as [CashIncom],
		IsNull([C].[Collection],0) + IsNull([h].[Cash],0) as [TotalPays],
		isNull(T.[RentPrice],0) - IsNull([C].[Collection],0) - IsNull([h].[Cash],0) as [ContractRest],
		isNull(t.[RentPrice],0) - IsNull([h].[Cash],0) - isNull([C].[Total],0) as [CustBalance],
		0
	From
		@Tbl [t] 
		left join #Collection [C] on [t].[ContractGuid] = [C].[ContractGuid]
		left join #CollectionIncom [CCI] on [t].[ContractGuid] = [CCI].[ContractGuid]
		left join #Cash [h] on [t].[ContractGuid] = [h].[ContractGuid]
		left join #CashIncom [CI] on [t].[ContractGuid] = [CI].[ContractGuid]
		left join [RepCheck] [R] on [R].[ObjGuid] = [t].[FlatGuid] and [R].[IdReport] = 5000
	
	Update #EndRes Set [GLCustBalance] = isNull(Ac.SumDebit,0) - isNull(Ac.SumCredit,0)
	From
		#EndRes E
		inner join account ac on ac.Guid = E.AccountGuid
	--Select [Total], [Collection],[CheckNotCollection], * from #EndRes where ContractGuid = 'B7867C14-4D4C-4CBC-BA65-DCB22E950C29'
-------------------------

	Insert into #EndRes
	Select
		''
		,'ÇáãÌãæÚ' as [ContractNo]
		,0
		,''
		,'' as [BuildingName]
		,'' as [StrKind]
		,'' as [FlatName]
		,dbo.FnMyRound(Sum([RentPrice]), @RoundKind)
		,0 as [FromDate]
		,0 as [ToDate]
		,0 as [EndDate]
		,Sum([Days])
		,0 as [DayPrice]
		,Sum([DayPeriod])
		,Sum([Income]) --dbo.FnMyRound(Sum([Income]), @RoundKind)
		,0 as [Check]
		,0 as [ContractFinish]
		,0x0 as [ContractGuid]
		,0x0 as [FlatGuid]
		,0x0 as [CustAccountGuid]
		,0x0 as [CostGuid]
		,-1 as [Kind]
		,1 as [Sort]
		,Sum([Collection])
		,Sum([CollectionIncom])
		,Sum([CheckNotCollection])
		,Sum([Cash])
		,Sum([Cashincom])
		,Sum([TotalPays])
		,Sum([ContractRest])
		,Sum([CustBalance])
		,Sum([GLCustBalance])
	From
		#EndRes
		
	Select 
		[E].*
	from 
		#EndRes  [E]
	Order By Sort
	
	Select
		dbo.FnMyRound(Sum([RentPrice]), @RoundKind) as [RentPrice]
		,Sum([Days]) as [Days]
		,Sum([DayPeriod]) as [DayPeriod]
		,Sum([Income]) as  [Income]
		,Sum([Collection]) as [Collection]
		,Sum([CollectionIncom]) as [CollectionIncom]
		,Sum([CheckNotCollection]) as [CheckNotCollection]
		,Sum([Cash]) as [Cash]
		,Sum([CashIncom]) as [CashIncom]
		,Sum([TotalPays]) as [TotalPays]
		,Sum([ContractRest]) as [ContractRest]
		--,Sum([CustBalance]) as [CustBalance]
	From
		#EndRes
	where
		[Sort] = 0
	

GO
/****** Object:  StoredProcedure [dbo].[PrcIncomList]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Proc [dbo].[PrcIncomList]
(
	@AccountGuid [uniqueidentifier]= 0X0
	,@BranchGuid [uniqueidentifier] = 0x0
	,@CostGuid [uniqueidentifier] = 0x0
	,@CurrencyGuid [uniqueidentifier] = '11111111-C748-4B13-8B91-1E9B299DF1C1'
	,@CurrencyVal Float = 1
	,@IsPosted Bit = 1
	,@IsNotPosted Bit = 1
	,@Date1 DateTime = '1/2/2007'
	,@Date2 DateTime = '12/30/2018'
    ,@ContainOldEntry Bit = 0
	,@PriceMode int = 1
	,@SpecificPrice int = -1
)
  
as
	set nocount on 
	
	--ÞíÏ ÈÖÇÚÉ ÂÎÑ ÇáãÏÉ
	exec [dbo].[PrcMatInventory]
		@GroupGuid = 0x0,
		@MatGuid = 0x0,
		@StoreGuid = 0x0,
		@CostGuid = @CostGuid,
		@Class  = '',
		@ClassGrouping = 0,
		@Unit = 0,
		@BillPost = 2,
		@CkDate = 0,
		@PriceMode = @PriceMode,
		@SpecificPrice = @SpecificPrice,
		@CurrencyGuid = @CurrencyGuid,
		@CurrencyVal = @CurrencyVal,
		@ShowEmpltyMat = 0,
		@ShowDetailStore = 0,
		@ShowMatTypeStore = 1,
		@ShowMatTypeService = 0,
		@Date1 = '1/1/2007',
		@Date2 = '1/1/2015',		
		@RepKind = 1 --0 Normal		1 Total

	--Select * from Dentry where ParentGuid = '{19191919-8282-7373-6464-656565656566}'
	
	
	Select * Into dbo.#fnGetAccountList_BS from [dbo].[fnGetAccountList](@AccountGuid)
	Select * Into dbo.#fnGetAccountList from [dbo].[fnGetAccountList](0x0)
	
	Select O.* Into #fnGetCostList_BS 
	from 
		[dbo].[fnGetCostList](@CostGuid) C
		inner join [Cost] O on O.Guid = C.GUID
	
	Set noCount on
	-- ßÇãá ÇáÍÓÇÈÇÊ
	Select
		[Ac2].[Code] COLLATE database_default as [Code]
		,[Ac2].[Code]+'-'+[Ac2].[Name] COLLATE database_default as [AccountName]
		,[Ac].[Level]
		,isnull([Ac].[Path],'') as [Path]
		,[Ac2].[Guid]
		,[Ac2].[ParentGuid]
		,Case when Type = 0 then [Ac2].[FinalGuid] 
			  when Type = 1 then [Ac2].[ParentGuid] 
		end as [FinalGuid]
		,[Ac2].[Type]
		,Cast('' as Varchar(256)) COLLATE database_default as [Sort]
		,Isnull([SAc].[AcNSons],0) as [AcNSons]
	into #Ac
	From
		#fnGetAccountList [Ac] 
		inner join [vwAccount] [Ac2] on [Ac2].[Guid] = [Ac].[Guid]
		left join [dbo].#fnGetAccountList_BS [AcF] on [AcF].[Guid] = [Ac2].[FinalGuid]   
		left join (Select 
						Count(Number)as [AcNSons] 
						,[ParentGuid] 
					From 
						[Account] [SAc] 
					Group By
						[ParentGuid]					
				)[SAc] on [SAc].[ParentGuid] = [Ac2].[Guid]
--	Select * from #Ac
--	return


	-- ÍÑßÇÊ ÇáÞíæÏ
	Select 
		[Ac].[Guid] as [AcGuid]
		,Sum([En].[D_Debit]*
			Case when [En].[D_CurrencyGuid] = @CurrencyGuid then 1 
			else [En].[D_CurrencyVal] / @CurrencyVal end
			) as [Debit]
		,Sum([En].[D_Credit]*
			Case when [En].[D_CurrencyGuid] = @CurrencyGuid then 1 
			else [En].[D_CurrencyVal] / @CurrencyVal end
			) as [Credit]
	into #Entry
	from 
		--[DEntry] [En]
		--inner Join [VwEntry] [M] on [M].[Guid] = [En].[ParentGuid]
		[vwOldYearEntry] En
		inner Join [dbo].#fnGetAccountList [Ac] on [Ac].[Guid] = [En].[D_AcGuid]
		left Join #fnGetCostList_BS [Co2] on [Co2].[Guid] = [En].[D_CostGuid]
	where 
		([En].[H_Date] between @Date1 And @Date2)
		and ([En].[H_BranchGuid] = @BranchGuid or @BranchGuid = 0x0)
		and ([Co2].[Guid] Is Not Null or @CostGuid = 0x0)
		and ([En].[D_IsVisible] = 1 or [En].[D_CurrencyGuid] = @CurrencyGuid)
		and (
				([En].[H_IsPosted] = 1 and @IsPosted = 1)
				or ([En].[H_IsPosted] = 0  and @IsNotPosted = 1)
			)
		and (En.isOldEntry = 0 or @ContainOldEntry = 1)
	Group By
		[Ac].[Guid]
		
	Create Table #IncList
	(
		[Name] varchar(255),
		[Balance] Float,
		[Band] float,
		[Code] varchar(255),
		[Sort] int,
		[Guid] uniqueidentifier,
		[Level] int
	)
	
	--ÇáãÈíÚÇÊ
	insert into #IncList	
	([Name],[Balance], [Band],[Code],[Sort],[Guid])
	Select 
		A.Name,
		-SUM([Debit] - [Credit]) as Balance,
		Band,
		A.[Code],
		1,
		A.[Guid]
	from
		IncAccount A
		left join IncAccountListDetail i on  A.Guid = I.ParentGuid
		left join #Entry E on I.AccountGuid = E.AcGuid
	where
		Band = 0
	Group by
		A.Name,A.Code, A.Band, A.[Guid]
		
	--ÅÌãÇáí ÇáãÈíÚÇÊ
	insert into #IncList	
	([Name],[Balance], [Band],[Code],[Sort])
	Select 
		dbo.SC('ÅÌãÇáí ÇáãÈíÚÇÊ'),
		Sum([Balance]), 
		[Band],
		'',
		2 [Sort] 
	from 
		#IncList	
	where
		Band = 0
	group by
		[Band]
	
	--ÊßáÝÉ ÇáãÈíÚÇÊ
	insert into #IncList	
	([Name],[Balance], [Band],[Code],[Sort],[Guid])
	Select 
		A.Name,
		SUM(Debit - Credit) as Balance,
		Band,
		A.[Code],
		1,
		A.[Guid]
	from 
		IncAccount A
		left join IncAccountListDetail i on  A.Guid = I.ParentGuid
		left join #Entry E on I.AccountGuid = E.AcGuid
	where
		Band = 1
	Group by
		A.Name,A.Code, A.Band,A.[Guid]
		
	--ÅÌãÇáí ÊßáÝÉ ÇáãÈíÚÇÊ
	insert into #IncList	
	([Name],[Balance], [Band],[Code],[Sort])
	Select 
		dbo.SC('ÅÌãÇáí ÊßáÝÉ ÇáãÈíÚÇÊ'),
		-Sum([Balance]), 
		[Band],
		'',
		2 [Sort] 
	from 
		#IncList	
	where
		Band = 1
	group by
		[Band]
	
	
	--ãÌãá ÇáÑÈÍ
	insert into #IncList	
	([Name],[Balance], [Band],[Code],[Sort])
	Select 
		dbo.SC('ãÌãá ÇáÑÈÍ'),
		Sum([Balance]), 
		1.1 as [Band],
		'',
		3 [Sort] 
	from 
		#IncList	
	where
		((Band = 1) or (Band = 0))
		and Sort = 2


	--ÇáãÕÇÑíÝ
	insert into #IncList	
	([Name],[Balance], [Band],[Code],[Sort],[Guid])
	Select 
		A.Name,
		SUM(Debit - Credit) as Balance,
		Band,
		A.[Code],
		1,
		A.[Guid]
	from 
		IncAccount A
		left join IncAccountListDetail i on  A.Guid = I.ParentGuid
		left join #Entry E on I.AccountGuid = E.AcGuid
	where
		Band = 2
	Group by
		A.Name,A.Code, A.Band,A.[Guid]
		
	--ÅÌãÇáí ÇáãÕÇÑíÝ
	insert into #IncList	
	([Name],[Balance], [Band],[Code],[Sort])
	Select 
		dbo.SC('ÅÌãÇáí ÇáãÕÇÑíÝ'),
		-Sum([Balance]), 
		[Band],
		'',
		2 [Sort] 
	from 
		#IncList	
	where
		Band = 2
	group by
		[Band]


	--ÇáÇíÑÇÏÇÊ 
	insert into #IncList	
	([Name],[Balance], [Band],[Code],[Sort],[Guid])
	Select 
		A.Name,
		-SUM(Debit - Credit) as Balance,
		Band,
		A.[Code],
		1,
		A.[Guid]
	from 
		IncAccount A
		left join IncAccountListDetail i on  A.Guid = I.ParentGuid
		left join #Entry E on I.AccountGuid = E.AcGuid
	where
		Band = 3
	Group by
		A.Name,A.Code, A.Band,A.[Guid]
		
	--ÅÌãÇáí ÇáÇíÑÇÏÇÊ 
	insert into #IncList	
	([Name],[Balance], [Band],[Code],[Sort])
	Select 
		dbo.SC('ÅÌãÇáí ÇáÇíÑÇÏÇÊ '),
		Sum([Balance]), 
		[Band],
		'',
		2 [Sort] 
	from 
		#IncList	
	where
		Band = 3
	group by
		[Band]


	--ãÌãá ÇáÑÈÍ
	insert into #IncList	
	([Name],[Balance], [Band],[Code],[Sort])
	Select 
		dbo.SC('ÕÇÝí ÇáÑÈÍ (ÇáÎÓÇÑÉ)'),
		Sum([Balance]), 
		3.1 as [Band],
		'',
		3 [Sort] 
	from 
		#IncList	
	where
		((Band = 0) or (Band = 1) or (Band = 2) or (Band = 3))
		and Sort = 2

	upDate #IncList	Set [Level] = G.[Level]
	From
		#IncList L
		inner join dbo.fnGetIncAccountList(0x0) G on G.GUID= L.Guid
	

	Select * from #IncList	
	order by
		Band,Sort,[Level],Code

GO
/****** Object:  StoredProcedure [dbo].[PrcIncomList2]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Proc [dbo].[PrcIncomList2]
(
	@AccountGuid [uniqueidentifier]= 0X0
	,@BranchGuid [uniqueidentifier] = 0x0
	,@CostGuid [uniqueidentifier] = 0x0
	,@CurrencyGuid [uniqueidentifier] = '11111111-C748-4B13-8B91-1E9B299DF1C1'
	,@CurrencyVal Float = 1
	,@IsPosted Bit = 1
	,@IsNotPosted Bit = 1
	,@Date1 DateTime = '1/2/2007'
	,@Date2 DateTime = '12/30/2018'
    ,@ContainOldEntry Bit = 0
	,@PriceMode int = 1
	,@SpecificPrice int = -1
)
  
as
	set nocount on 
	
	
	
	Select * Into dbo.#fnGetAccountList_BS from [dbo].[fnGetAccountList](@AccountGuid)
	Select * Into dbo.#fnGetAccountList from [dbo].[fnGetAccountList](0x0)
	
	Select O.* Into #fnGetCostList_BS 
	from 
		[dbo].[fnGetCostList](@CostGuid) C
		inner join [Cost] O on O.Guid = C.GUID
	
	Set noCount on
	-- ßÇãá ÇáÍÓÇÈÇÊ
	Select
		[Ac2].[Code] COLLATE database_default as [Code]
		,[Ac2].[Code]+'-'+[Ac2].[Name] COLLATE database_default as [AccountName]
		,[Ac].[Level]
		,isnull([Ac].[Path],'') as [Path]
		,[Ac2].[Guid]
		,[Ac2].[ParentGuid]
		,Case when Type = 0 then [Ac2].[FinalGuid] 
			  when Type = 1 then [Ac2].[ParentGuid] 
		end as [FinalGuid]
		,[Ac2].[Type]
		,Cast('' as Varchar(256)) COLLATE database_default as [Sort]
		,Isnull([SAc].[AcNSons],0) as [AcNSons]
	into #Ac
	From
		#fnGetAccountList [Ac] 
		inner join [vwAccount] [Ac2] on [Ac2].[Guid] = [Ac].[Guid]
		left join [dbo].#fnGetAccountList_BS [AcF] on [AcF].[Guid] = [Ac2].[FinalGuid]   
		left join (Select 
						Count(Number)as [AcNSons] 
						,[ParentGuid] 
					From 
						[Account] [SAc] 
					Group By
						[ParentGuid]					
				)[SAc] on [SAc].[ParentGuid] = [Ac2].[Guid]
--	Select * from #Ac
--	return


	-- ÍÑßÇÊ ÇáÞíæÏ
	Select 
		[Ac].[Guid] as [AcGuid]
		,Sum([En].[D_Debit]*
			Case when [En].[D_CurrencyGuid] = @CurrencyGuid then 1 
			else [En].[D_CurrencyVal] / @CurrencyVal end
			) as [Debit]
		,Sum([En].[D_Credit]*
			Case when [En].[D_CurrencyGuid] = @CurrencyGuid then 1 
			else [En].[D_CurrencyVal] / @CurrencyVal end
			) as [Credit]
	into #Entry
	from 
		--[DEntry] [En]
		--inner Join [VwEntry] [M] on [M].[Guid] = [En].[ParentGuid]
		[vwOldYearEntry] En
		inner Join [dbo].#fnGetAccountList [Ac] on [Ac].[Guid] = [En].[D_AcGuid]
		left Join #fnGetCostList_BS [Co2] on [Co2].[Guid] = [En].[D_CostGuid]
	where 
		([En].[H_Date] between @Date1 And @Date2)
		and ([En].[H_BranchGuid] = @BranchGuid or @BranchGuid = 0x0)
		and ([Co2].[Guid] Is Not Null or @CostGuid = 0x0)
		and ([En].[D_IsVisible] = 1 or [En].[D_CurrencyGuid] = @CurrencyGuid)
		and (
				([En].[H_IsPosted] = 1 and @IsPosted = 1)
				or ([En].[H_IsPosted] = 0  and @IsNotPosted = 1)
			)
		and (En.isOldEntry = 0 or @ContainOldEntry = 1)
	Group By
		[Ac].[Guid]
		
	Create Table #IncList
	(
		[Name] varchar(255),
		[Balance] Float,
		[Band] float,
		[Code] varchar(255),
		[Sort] int,
		[Guid] uniqueidentifier,
		[Level] int
	)
	
	--ÇáÃÕæá ÇáãÊÏÇæáÉ 
	Declare @IncAcGuid uniqueidentifier
	Set @IncAcGuid = (Select Guid From incAccount where Code = 05)
	insert into #IncList	
	([Name],[Balance], [Band],[Code],[Sort],[Guid])
	Select 
		A.Name,
		SUM([Debit] - [Credit]) as Balance,
		1 as Band,
		A.[Code],
		1,
		A.[Guid]
	from
		dbo.[fnGetIncAccountList](@IncAcGuid) A 
		inner join incAccount AI on AI.Guid = A.GUID 
		left join IncAccountListDetail i on  A.Guid = I.ParentGuid
		left join #Entry E on I.AccountGuid = E.AcGuid
	where
		(A.Band = 4)
		and (AI.ShowBalanceInListFinCenter = 0)
	Group by
		A.Name,A.Code, A.Band, A.[Guid]
		
	Select
		AI.ParentGuid ,
		SUM([Debit] - [Credit]) as Balance
	into #ShowBalanceInListFinCenter
	from
		dbo.[fnGetIncAccountList](@IncAcGuid) A 
		inner join incAccount AI on AI.Guid = A.GUID 
		left join IncAccountListDetail i on  A.Guid = I.ParentGuid
		left join #Entry E on I.AccountGuid = E.AcGuid
	where
		(A.Band = 4)
		and (AI.ShowBalanceInListFinCenter = 1)
	Group by
		AI.ParentGuid
		
	update #IncList Set Balance = B.Balance
	From
		#IncList L
		inner join #ShowBalanceInListFinCenter B on b.ParentGuid = L.Guid
	--Select * from #IncList
	
	--ÅÌãÇáí ÇáÃÕæá ÇáãÊÏÇæáÉ
	insert into #IncList	
	([Name],[Balance], [Band],[Code],[Sort])
	Select 
		dbo.SC('ÅÌãÇáí ÇáÃÕæá ÇáãÊÏÇæáÉ'),
		Sum([Balance]), 
		[Band],
		'',
		2 [Sort] 
	from 
		#IncList	
	where
		Band = 1
	group by
		[Band]
	
	
	--ÇáÇÓÊËãÇÑÇÊ
	insert into #IncList	
	([Name],[Balance], [Band],[Code],[Sort],[Guid])
	Select 
		A.Name,
		SUM(Debit - Credit) as Balance,
		2 as Band,
		A.[Code],
		1,
		A.[Guid]
	from 
		IncAccount A
		left join IncAccountListDetail i on  A.Guid = I.ParentGuid
		left join #Entry E on I.AccountGuid = E.AcGuid
	where
		Band = 9
	Group by
		A.Name,A.Code, A.Band,A.[Guid]
		
	--ÅÌãÇáí ÇáÇÓÊËãÇÑÇÊ
	insert into #IncList	
	([Name],[Balance], [Band],[Code],[Sort])
	Select 
		dbo.SC('ÅÌãÇáí ÇáÇÓÊËãÇÑÇÊ'),
		-Sum([Balance]), 
		2 as [Band],
		'',
		2 [Sort] 
	from 
		#IncList	
	where
		Band = 2
	group by
		[Band]
	having 
		Count(*) > 1
	
	
	--ÇáÃÕæá ÇáËÇÈÊÉ ÇáãáãæÓÉ 
	insert into #IncList	
	([Name],[Balance], [Band],[Code],[Sort],[Guid])
	Select 
		A.Name,
		SUM(Debit - Credit) as Balance,
		3 as Band,
		A.[Code],
		1,
		A.[Guid]
	from 
		IncAccount A
		left join IncAccountListDetail i on  A.Guid = I.ParentGuid
		left join #Entry E on I.AccountGuid = E.AcGuid
	where
		Band = 6
	Group by
		A.Name,A.Code, A.Band,A.[Guid]
		
	--ÅÌãÇáí ÇáÃÕæá ÇáËÇÈÊÉ ÇáãáãæÓÉ 
	insert into #IncList	
	([Name],[Balance], [Band],[Code],[Sort])
	Select 
		dbo.SC('ÅÌãÇáí ÇáÃÕæá ÇáËÇÈÊÉ ÇáãáãæÓÉ'),
		-Sum([Balance]), 
		3 as [Band],
		'',
		2 [Sort] 
	from 
		#IncList	
	where
		Band = 3
	group by
		[Band]
	having 
		Count(*) > 1
	
	--ÇáÃÕæá ÇáËÇÈÊÉ ÛíÑ ÇáãáãæÓÉ  
	insert into #IncList	
	([Name],[Balance], [Band],[Code],[Sort],[Guid])
	Select 
		A.Name,
		SUM(Debit - Credit) as Balance,
		4 as Band,
		A.[Code],
		1,
		A.[Guid]
	from 
		IncAccount A
		left join IncAccountListDetail i on  A.Guid = I.ParentGuid
		left join #Entry E on I.AccountGuid = E.AcGuid
	where
		Band = 7
	Group by
		A.Name,A.Code, A.Band,A.[Guid]
		
	--ÅÌãÇáí ÇáÃÕæá ÇáËÇÈÊÉ ÛíÑ ÇáãáãæÓÉ  
	insert into #IncList	
	([Name],[Balance], [Band],[Code],[Sort])
	Select 
		dbo.SC('ÅÌãÇáí ÇáÃÕæá ÇáËÇÈÊÉ ÛíÑ ÇáãáãæÓÉ'),
		Sum([Balance]), 
		4 as [Band],
		'',
		2 [Sort] 
	from 
		#IncList	
	where
		Band = 4
	group by
		[Band]
	having 
		Count(*) > 1

	--ÇáÃÕæá ÇáÃÎÑì 
	insert into #IncList	
	([Name],[Balance], [Band],[Code],[Sort],[Guid])
	Select 
		A.Name,
		SUM(Debit - Credit) as Balance,
		5 as Band,
		A.[Code],
		1,
		A.[Guid]
	from 
		IncAccount A
		left join IncAccountListDetail i on  A.Guid = I.ParentGuid
		left join #Entry E on I.AccountGuid = E.AcGuid
	where
		Band = 8
	Group by
		A.Name,A.Code, A.Band,A.[Guid]
		
	--ÇáÃÕæá ÇáÃÎÑì 
	insert into #IncList	
	([Name],[Balance], [Band],[Code],[Sort])
	Select 
		dbo.SC('ÅÌãÇáí ÇáÃÕæá ÇáÃÎÑì'),
		-Sum([Balance]), 
		5 as [Band],
		'',
		2 [Sort] 
	from 
		#IncList	
	where
		Band = 5
	group by
		[Band]
	having 
		Count(*) > 1

	--ãÌãæÚ ÇáÃÕæá
	insert into #IncList	
	([Name],[Balance], [Band],[Code],[Sort])
	Select 
		dbo.SC('ãÌãæÚ ÇáÃÕæá'),
		Sum([Balance]), 
		5.1 as [Band],
		'',
		3 [Sort] 
	from 
		#IncList	
	where
		(Band between 1 and 5)
		and Sort = 1


	--ÇáÇáÊÒÇãÇÊ ÇáãÊÏÇæáÉ
	Set @IncAcGuid = (Select Guid From incAccount where Code = '10')
	insert into #IncList	
	([Name],[Balance], [Band],[Code],[Sort],[Guid])
	Select 
		A.Name,
		-SUM(Debit - Credit) as Balance,
		6 as Band,
		A.[Code],
		1,
		A.[Guid]
	from 
		dbo.[fnGetIncAccountList](@IncAcGuid) A
		left join IncAccountListDetail i on  A.Guid = I.ParentGuid
		left join #Entry E on I.AccountGuid = E.AcGuid
	where
		Band = 5
	Group by
		A.Name,A.Code, A.Band,A.[Guid]
		
	--ÇáÇáÊÒÇãÇÊ ÇáãÊÏÇæáÉ
	insert into #IncList	
	([Name],[Balance], [Band],[Code],[Sort])
	Select 
		dbo.SC('ÅÌãÇáí ÇáÇáÊÒÇãÇÊ ÇáãÊÏÇæáÉ'),
		Sum([Balance]), 
		6 as [Band],
		'',
		2 [Sort] 
	from 
		#IncList	
	where
		Band = 6
	group by
		[Band]
	having 
		Count(*) > 1

	--ÇáÇáÊÒÇãÇÊ ØæíáÉ ÇáÃÌá
	insert into #IncList	
	([Name],[Balance], [Band],[Code],[Sort],[Guid])
	Select 
		A.Name,
		-SUM(Debit - Credit) as Balance,
		7 as Band,
		A.[Code],
		1,
		A.[Guid]
	from 
		IncAccount A
		left join IncAccountListDetail i on  A.Guid = I.ParentGuid
		left join #Entry E on I.AccountGuid = E.AcGuid
	where
		Band = 10
	Group by
		A.Name,A.Code, A.Band,A.[Guid]
		
	--ÇáÇáÊÒÇãÇÊ ØæíáÉ ÇáÃÌá
	insert into #IncList	
	([Name],[Balance], [Band],[Code],[Sort])
	Select 
		dbo.SC('ÅÌãÇáí ÇáÇáÊÒÇãÇÊ ØæíáÉ ÇáÃÌá'),
		Sum([Balance]), 
		7 as [Band],
		'',
		2 [Sort] 
	from 
		#IncList	
	where
		Band = 7
	group by
		[Band]
	having 
		Count(*) > 1


	Set @IncAcGuid = (Select Guid From incAccount where Code = 12)
	--ÍÞæÞ ÇáãáßíÉ
	insert into #IncList	
	([Name],[Balance], [Band],[Code],[Sort],[Guid])
	Select 
		A.Name,
		-SUM(Debit - Credit) as Balance,
		8 as Band,
		A.[Code],
		1,
		A.[Guid]
	from 
		dbo.[fnGetIncAccountList](@IncAcGuid) A
		left join IncAccountListDetail i on  A.Guid = I.ParentGuid
		left join #Entry E on I.AccountGuid = E.AcGuid
	where
		Band = 11
	Group by
		A.Name,A.Code, A.Band,A.[Guid]
		

	--äÊíÌÉ ÇáÚÇã
	Create Table #YearRes
	(
		Name varchar(255),
		balance float,
		Band Float,
		Code varchar(255),
		[Sort] Float,
		Guid uniqueidentifier,
		level int
	)
	
	insert into #YearRes
	exec [PrcIncomList]	@AccountGuid ,@BranchGuid ,@CostGuid ,@CurrencyGuid ,@CurrencyVal ,@IsPosted ,@IsNotPosted ,@Date1 ,@Date2 ,@ContainOldEntry ,@PriceMode ,@SpecificPrice 
	
	insert into #IncList	
	([Name],[Balance], [Band],[Code],[Sort],[level])
	Select 
		dbo.SC('äÊíÌÉ ÇáÚÇã'),
		[Balance], 
		8 as [Band],
		'1204',
		1 [Sort],
		1 
	from 
		#YearRes	
	where
		Band= 3.1

	--ÍÞæÞ ÇáãáßíÉ
	insert into #IncList	
	([Name],[Balance], [Band],[Code],[Sort])
	Select 
		dbo.SC('ÅÌãÇáí ÍÞæÞ ÇáãáßíÉ'),
		-Sum([Balance]), 
		8 as [Band],
		'',
		2 [Sort] 
	from 
		#IncList	
	where
		Band = 7
	group by
		[Band]
	having 
		Count(*) > 1


	
	
	--ÇáÇáÊÒÇãÇÊ æÍÞæÞ ÇáãáßíÉ
	insert into #IncList	
	([Name],[Balance], [Band],[Code],[Sort])
	Select 
		dbo.SC('ÇáÇáÊÒÇãÇÊ æÍÞæÞ ÇáãáßíÉ'),
		Sum([Balance]), 
		8.1 as [Band],
		'',
		3 [Sort] 
	from 
		#IncList	
	where
		(Band between 6 and 8)
		and Sort <> 2

	upDate #IncList	Set [Level] = G.[Level]
	From
		#IncList L
		inner join dbo.fnGetIncAccountList(0x0) G on G.GUID= L.Guid
	

	Select * from #IncList	
	order by
		[Band],[Sort],[Level],Code

GO
/****** Object:  StoredProcedure [dbo].[PrcIncomList3]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Proc [dbo].[PrcIncomList3]
(
	@AccountGuid [uniqueidentifier]= 0X0
	,@BranchGuid [uniqueidentifier] = 0x0
	,@CostGuid [uniqueidentifier] = 0x0
	,@CurrencyGuid [uniqueidentifier] = '11111111-C748-4B13-8B91-1E9B299DF1C1'
	,@CurrencyVal Float = 1
	,@IsPosted Bit = 1
	,@IsNotPosted Bit = 1
	,@Date1 DateTime = '1/2/2007'
	,@Date2 DateTime = '12/30/2019'
    ,@ContainOldEntry Bit = 0
	,@PriceMode int = 1
	,@SpecificPrice int = -1
)
  
as
	set nocount on 
	
	Select * Into dbo.#fnGetAccountList_BS from [dbo].[fnGetAccountList](@AccountGuid)
	Select * Into dbo.#fnGetAccountList from [dbo].[fnGetAccountList](0x0)
	
	Select 
		O.* 
	Into #fnGetCostList_BS 
	from 
		[dbo].[fnGetCostList](@CostGuid) C
		inner join [Cost] O on O.Guid = C.GUID
	
	Set noCount on
	-- ßÇãá ÇáÍÓÇÈÇÊ
	Select
		[Ac2].[Code] COLLATE database_default as [Code]
		,[Ac2].[Code]+'-'+[Ac2].[Name] COLLATE database_default as [AccountName]
		,[Ac].[Level]
		,isnull([Ac].[Path],'') as [Path]
		,[Ac2].[Guid]
		,[Ac2].[ParentGuid]
		,Case when Type = 0 then [Ac2].[FinalGuid] 
			  when Type = 1 then [Ac2].[ParentGuid] 
		end as [FinalGuid]
		,[Ac2].[Type]
		,Cast('' as Varchar(256)) COLLATE database_default as [Sort]
		,Isnull([SAc].[AcNSons],0) as [AcNSons]
	into #Ac
	From
		#fnGetAccountList [Ac] 
		inner join [vwAccount] [Ac2] on [Ac2].[Guid] = [Ac].[Guid]
		left join [dbo].#fnGetAccountList_BS [AcF] on [AcF].[Guid] = [Ac2].[FinalGuid]   
		left join (Select 
						Count(Number)as [AcNSons] 
						,[ParentGuid] 
					From 
						[Account] [SAc] 
					Group By
						[ParentGuid]					
				)[SAc] on [SAc].[ParentGuid] = [Ac2].[Guid]
--	Select * from #Ac
--	return

	-- ÑÕíÏ ÇáÓäÉ ÇáÓÇÈÞÉ
	/*
	Select 
		[Ac].[Guid] as [AcGuid]
		,Sum([En].[D_Debit]*
			Case when [En].[D_CurrencyGuid] = @CurrencyGuid then 1 
			else [En].[D_CurrencyVal] / @CurrencyVal end
			) as [Debit]
		,Sum([En].[D_Credit]*
			Case when [En].[D_CurrencyGuid] = @CurrencyGuid then 1 
			else [En].[D_CurrencyVal] / @CurrencyVal end
			) as [Credit]
	into #EntryOldYear
	from 
		[vwOldYearEntry] En
		inner Join [dbo].#fnGetAccountList [Ac] on [Ac].[Guid] = [En].[D_AcGuid]
		left Join #fnGetCostList_BS [Co2] on [Co2].[Guid] = [En].[D_CostGuid]
	where 
		([En].[H_Date] < @Date1 )
		and ([En].[H_BranchGuid] = @BranchGuid or @BranchGuid = 0x0)
		and ([Co2].[Guid] Is Not Null or @CostGuid = 0x0)
		and ([En].[D_IsVisible] = 1 or [En].[D_CurrencyGuid] = @CurrencyGuid)
		and (
				([En].[H_IsPosted] = 1 and @IsPosted = 1)
				or ([En].[H_IsPosted] = 0  and @IsNotPosted = 1)
			)
		and (En.isOldEntry = 0 or @ContainOldEntry = 1)
	Group By
		[Ac].[Guid]
	*/
	
	-- ÍÑßÇÊ ÇáÞíæÏ
	Select 
		[Ac].[Guid] as [AcGuid]
		,Sum([En].[D_Debit]*
			Case when [En].[D_CurrencyGuid] = @CurrencyGuid then 1 
			else [En].[D_CurrencyVal] / @CurrencyVal end
			) as [Debit]
		,Sum([En].[D_Credit]*
			Case when [En].[D_CurrencyGuid] = @CurrencyGuid then 1 
			else [En].[D_CurrencyVal] / @CurrencyVal end
			) as [Credit]
	into #Entry
	from 
		--[DEntry] [En]
		--inner Join [VwEntry] [M] on [M].[Guid] = [En].[ParentGuid]
		[vwOldYearEntry] En
		inner Join [dbo].#fnGetAccountList [Ac] on [Ac].[Guid] = [En].[D_AcGuid]
		left Join #fnGetCostList_BS [Co2] on [Co2].[Guid] = [En].[D_CostGuid]
	where 
		([En].[H_Date] between @Date1 And @Date2)
		and ([En].[H_BranchGuid] = @BranchGuid or @BranchGuid = 0x0)
		and ([Co2].[Guid] Is Not Null or @CostGuid = 0x0)
		and ([En].[D_IsVisible] = 1 or [En].[D_CurrencyGuid] = @CurrencyGuid)
		and (
				([En].[H_IsPosted] = 1 and @IsPosted = 1)
				or ([En].[H_IsPosted] = 0  and @IsNotPosted = 1)
			)
		and (En.isOldEntry = 0 or @ContainOldEntry = 1)
	Group By
		[Ac].[Guid]
		
	Create Table #IncList
	(
		[Name] varchar(255),
		[Balance] Float,
		[Band] float,
		[Code] varchar(255),
		[Sort] int,
		[Guid] uniqueidentifier,
		[Level] int
	)
	
	--ÇáÊÏÝÞÇÊ ÇáäÞÏíÉ ãä ÇáÚãáíÇÊ ÇáÊÔÛíáíÉ
	insert into #IncList	
	([Name],[Balance], [Band],[Code],[Sort],[level])
	Select 
		dbo.SC('ÇáÊÏÝÞÇÊ ÇáäÞÏíÉ ãä ÇáÚãáíÇÊ ÇáÊÔÛíáíÉ'),
		Null as [Balance], 
		1 as [Band],
		'1',
		1 [Sort],
		0 

	--äÊíÌÉ ÇáÚÇã
	Create Table #YearRes
	(
		Name varchar(255),
		balance float,
		Band Float,
		Code varchar(255),
		[Sort] Float,
		Guid uniqueidentifier,
		level int
	)
	
	Select
		*,
		Case when Band between 0 and 3 then 0 else 1 end as BalanceCalcoldYear
	into #incAccount
	From
		incAccount A
	
	insert into #YearRes
	exec [PrcIncomList]	@AccountGuid ,@BranchGuid ,@CostGuid ,@CurrencyGuid ,@CurrencyVal ,@IsPosted ,@IsNotPosted ,@Date1 ,@Date2 ,@ContainOldEntry ,@PriceMode ,@SpecificPrice 
	
	
	insert into #IncList	
	([Name],[Balance], [Band],[Code],[Sort],[level])
	Select 
		dbo.SC('ÕÇÝí ÇáÑÈÍ (ÇáÎÓÇÑÉ)'),
		[Balance], 
		1 as [Band],
		'0301',
		1 [Sort],
		1 
	from 
		#YearRes	
	where
		Band= 3.1

	--ÇáÊÏÝÞÇÊ ÇáäÞÏíÉ ãä ÇáÚãáíÇÊ ÇáÊÔÛíáíÉ
	insert into #IncList
	([Name],[Balance], [Band],[Code],[Sort],[Guid],[level])
	Select 
		A.Name,
		SUM([Debit] - [Credit]) as Balance,
		1 as Band,
		A.[Code],
		1,
		A.[Guid],
		1
	from
		#incAccount A 
		left join IncAccountListDetail i on  A.Guid = I.ParentGuid
		left join #Entry E on I.AccountGuid = E.AcGuid
	where
		(Band2 = 1)
		and (isNull(BalanceCalcoldYear,0) = 0)
	Group by
		A.Name,A.Code, A.Band, A.[Guid]
		
	--ÇáÊÏÝÞÇÊ ÇáäÞÏíÉ ãä ÇáÚãáíÇÊ ÇáÊÔÛíáíÉ
	--ãÚÇáÌÉ ÇáÊÕäíÝÇÊ ÇáÊí ÊÇÎÐ ÑÕíÏ ÇáÓäÉ ÇáÓÇÈÞÉ
	insert into #IncList
	([Name],[Balance], [Band],[Code],[Sort],[Guid],[level])
	Select 
		A.Name,
		-isNull(SUM(E.[Debit] - E.[Credit]),0) 
		--isNull(SUM(EO.[Debit] - EO.[Credit]),0)
		 as Balance,
		1 as Band,
		A.[Code],
		1,
		A.[Guid],
		1
	from
		#incAccount A 
		left join IncAccountListDetail i on  A.Guid = I.ParentGuid
		left join #Entry E on I.AccountGuid = E.AcGuid
		--left join #EntryOldYear EO on I.AccountGuid = EO.AcGuid
	where
		(Band2 = 1)
		and (isNull(BalanceCalcoldYear,0) = 1)
	Group by
		A.Name,A.Code, A.Band, A.[Guid]

	--ÕÇÝí ÇáÊÏÝÞÇÊ ãä ÇáÚãáíÇÊ ÇáÊÔÛíáíÉ
	insert into #IncList	
	([Name],[Balance], [Band],[Code],[Sort])
	Select 
		dbo.SC('ÕÇÝí ÇáÊÏÝÞÇÊ ãä ÇáÚãáíÇÊ ÇáÊÔÛíáíÉ'),
		Sum([Balance]), 
		[Band],
		'',
		2 [Sort] 
	from 
		#IncList	
	where
		Band = 1
	group by
		[Band]
	
	
	--ÇáÊÏÝÞÇÊ ÇáäÞÏíÉ ãä ÇáÚãáíÇÊ ÇáÅÓÊËãÇÑíÉ
	insert into #IncList
	([Name],[Balance], [Band],[Code],[Sort],[Guid])
	Select 
		A.Name,
		--isNull(SUM(EO.[Debit] - EO.[Credit]),0) - 
		-isNull(SUM(E.[Debit] - E.[Credit]),0) as Balance,
		2 as Band,
		A.[Code],
		1,
		A.[Guid]
	from
		#incAccount A 
		left join IncAccountListDetail i on  A.Guid = I.ParentGuid
		left join #Entry E on I.AccountGuid = E.AcGuid
		--left join #EntryOldYear EO on I.AccountGuid = EO.AcGuid
	where
		(Band2 = 2)
		and (isNull(BalanceCalcoldYear,0) = 0)
	Group by
		A.Name,A.Code, A.Band, A.[Guid]

	--ÕÇÝí ÇáÊÏÝÞÇÊ ãä ÇáÚãáíÇÊ ÇáÊÔÛíáíÉ
	insert into #IncList	
	([Name],[Balance], [Band],[Code],[Sort])
	Select 
		dbo.SC('ÕÇÝí ÇáÊÏÝÞÇÊ ãä ÇáÚãáíÇÊ ÇáÇÓÊËãÇÑíÉ'),
		Sum([Balance]), 
		[Band],
		'',
		2 [Sort] 
	from 
		#IncList	
	where
		Band = 2
	group by
		[Band]	


	--------------------------------------------
	--ÇáÊÏÝÞÇÊ ãä ÇáÚãáíÇÊ ÇáÇÓÊËãÇÑíÉ
	insert into #IncList	
	([Name],[Balance], [Band],[Code],[Sort],[level])
	Select 
		dbo.SC('ÇáÊÏÝÞÇÊ ãä ÇáÚãáíÇÊ ÇáÇÓÊËãÇÑíÉ'),
		Null as [Balance], 
		2 as [Band],
		'05',
		1 [Sort],
		0 
	
	--ÇáÊÏÝÞÇÊ ãä ÇáÚãáíÇÊ ÇáÇÓÊËãÇÑíÉ
	--ãÚÇáÌÉ ÇáÊÕäíÝÇÊ ÇáÊí ÊÇÎÐ ÑÕíÏ ÇáÓäÉ ÇáÓÇÈÞÉ
	insert into #IncList
	([Name],[Balance], [Band],[Code],[Sort],[Guid],[level])
	Select 
		A.Name,
		--isNull(SUM(EO.[Debit] - EO.[Credit]),0) - 
		-isNull(SUM(E.[Debit] - E.[Credit]),0) as Balance,
		2 as Band,
		A.[Code],
		1,
		A.[Guid],
		1
	from
		#incAccount A 
		left join IncAccountListDetail i on  A.Guid = I.ParentGuid
		left join #Entry E on I.AccountGuid = E.AcGuid
		--left join #EntryOldYear EO on I.AccountGuid = EO.AcGuid
	where
		(Band2 = 2)
		and (isNull(BalanceCalcoldYear,0) = 1)
	Group by
		A.Name,A.Code, A.Band, A.[Guid]
	
	--ÕÇÝí ÇáÊÏÝÞÇÊ ãä ÇáÚãáíÇÊ ÇáÇÓÊËãÇÑíÉ
	insert into #IncList	
	([Name],[Balance], [Band],[Code],[Sort])
	Select 
		dbo.SC('ÕÇÝí ÇáÊÏÝÞÇÊ ãä ÇáÚãáíÇÊ ÇáÇÓÊËãÇÑíÉ'),
		Sum([Balance]), 
		[Band],
		'',
		2 [Sort] 
	from 
		#IncList	
	where
		Band = 2
	group by
		[Band]	
	--------------------------------------------
			


	--ÇáÊÏÝÞÇÊ ãä ÇáÚãáíÇÊ ÇáÊãæíáíÉ
	insert into #IncList	
	([Name],[Balance], [Band],[Code],[Sort],[level])
	Select 
		dbo.SC('ÇáÊÏÝÞÇÊ ãä ÇáÚãáíÇÊ ÇáÊãæíáíÉ'),
		Null as [Balance], 
		3 as [Band],
		'1200',
		1 [Sort],
		0 
	
	--ÇáÊÏÝÞÇÊ ãä ÇáÚãáíÇÊ ÇáÊãæíáíÉ
	--ãÚÇáÌÉ ÇáÊÕäíÝÇÊ ÇáÊí ÊÇÎÐ ÑÕíÏ ÇáÓäÉ ÇáÓÇÈÞÉ
	insert into #IncList
	([Name],[Balance], [Band],[Code],[Sort],[Guid],[level])
	Select 
		A.Name,
		--isNull(SUM(EO.[Debit] - EO.[Credit]),0) - 
		- isNull(SUM(E.[Debit] - E.[Credit]),0) as Balance,
		3 as Band,
		A.[Code],
		1,
		A.[Guid],
		1
	from
		#incAccount A 
		left join IncAccountListDetail i on  A.Guid = I.ParentGuid
		left join #Entry E on I.AccountGuid = E.AcGuid
		--left join #EntryOldYear EO on I.AccountGuid = EO.AcGuid
	where
		(Band2 = 3)
		and (isNull(BalanceCalcoldYear,0) = 1)
	Group by
		A.Name,A.Code, A.Band, A.[Guid]
	
	--ÕÇÝí ÇáÊÏÝÞÇÊ ãä ÇáÚãáíÇÊ ÇáÊãæíáíÉ
	insert into #IncList	
	([Name],[Balance], [Band],[Code],[Sort])
	Select 
		dbo.SC('ÕÇÝí ÇáÊÏÝÞÇÊ ãä ÇáÚãáíÇÊ ÇáÊãæíáíÉ'),
		Sum([Balance]), 
		[Band],
		'',
		2 [Sort] 
	from 
		#IncList	
	where
		Band = 3
	group by
		[Band]	

	--ÕÇÝí ÇáÊÛíÑÇÊ ÇáäÞÏíÉ ÎáÇá ÇáÓäÉ 
	insert into #IncList	
	([Name],[Balance], [Band],[Code],[Sort])
	Select 
		dbo.SC('ÕÇÝí ÇáÊÛíÑÇÊ ÇáäÞÏíÉ ÎáÇá ÇáÓäÉ '),
		Sum([Balance]), 
		4 as [Band],
		'',
		2 [Sort] 
	from 
		#IncList	
	where
		sort = 1
	--------------------------------------------

	--upDate #IncList	Set [Level] = G.[Level]
	--From
	--	#IncList L
	--	inner join dbo.fnGetIncAccountList(0x0) G on G.GUID= L.Guid
	

	Select * from #IncList	
	order by
		[Band],[Sort],[Level],Code

GO
/****** Object:  StoredProcedure [dbo].[PrcInsertSC]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcInsertSC] (@ArStr Varchar(256))
  
AS
	Declare @R Varchar(256)
    Select Top 1 @R = [En] from [StrSource] where [Ar]=@ArStr
	
	if @R is null 
    insert into [StrSource]
    ([Ar],[En])
    Select @ArStr, @ArStr


GO
/****** Object:  StoredProcedure [dbo].[PrcInventoryDetailStore]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcInventoryDetailStore]
(
	@GroupGuid uniqueidentifier = 0x0,
	@MatGuid uniqueidentifier = 0x0,
	@StoreGuid uniqueidentifier = 0x0,
	@CostGuid uniqueidentifier = 0x0,
	@Class Varchar(256) = '',
	@ClassGrouping Bit = 0,
	@Unit int = 0,
	@BillPost int = 2,
	@CkDate Bit = 1,
	
	@PriceMode int = 0,
	@SpecificPrice int = 0,
	
	@ShowEmpltyMat Bit= 1,
	@ShowDetailStore Bit= 1,
	@ShowMatTypeStore Bit= 1,
	@ShowMatTypeService Bit= 1,
	
	@Date1 DateTime = '1/1/2007',
	@Date2 DateTime = '1/1/2015'
)
  
as
	Declare @DefCurrency uniqueidentifier
	Set @DefCurrency = (Select Value From DMD_Const where VName = 'DefCurrency')
	
	CREATE TABLE #MatInvDetailStore
	(
		[MatCode] [varchar](256),
		[MatName] [varchar](256),
		[MatltnName] [varchar](256),
		[GroupName] [varchar](513),
		[StCode] [varchar](256),
		[StName] [varchar](256),
		[Qty] [float],
		[Unit] [varchar](256),
		[Qty2] [float],
		[Unity2] [varchar](256),
		[Qty3] [float],
		[Unity3] [varchar](256),
		[Price] [float],
		[TotalPrice] [float],
		[Class] [varchar](256),
		[MatGuid] [uniqueidentifier],
		[StoreGuid] [uniqueidentifier],
		[Kind] int
	)

	Insert into #MatInvDetailStore
	Exec [dbo].[PrcMatInventory] 								 @GroupGuid, @MatGuid , @StoreGuid, @CostGuid, @Class, @ClassGrouping, 								 @Unit, @BillPost, @CkDate, @PriceMode, @SpecificPrice, @DefCurrency, 1,				 								 @ShowEmpltyMat, @ShowDetailStore, @ShowMatTypeStore, @ShowMatTypeService, 								 @Date1, @Date2, 3--	return	if exists(Select * from SysObjects where name = 'ResTblValue' and Xtype = 'U')
	Drop Table dbo.ResTblValue
	
	Create Table dbo.ResTblValue	(		[ÇáÓÚÑ ÇáÇÌãÇáí] varchar(256),		[ÇáãÇÏÉ] varchar(256)	)		EXECUTE CrossTabToTable 'Select [MatCode]+''-''+[MatName] as [ÇáãÇÏÉ],[unit] as [ÇáæÍÏÉ],[Price] as [ÇáÓÚÑ],Sum([TotalPrice]) as [ÇáÓÚÑ ÇáÇÌãÇáí],''{''+Cast(MatGuid as Varchar(256))+''}'' as MatGuid from #MatInvDetailStore Group By [MatCode]+''-''+[MatName] ,[unit],[Price],''{''+Cast(MatGuid as Varchar(256))+''}''', 'Sum([Qty])', '[StName]' , '[#MatInvDetailStore]', 'ãÌãæÚ ÇáßãíÇÊ','ÇáãÌãæÚ'','''','''','''',''0x0'
		Declare @T Float	Set @T = (Select Sum([ÇáÓÚÑ ÇáÇÌãÇáí]) From ResTblValue)		Update ResTblValue Set [ÇáÓÚÑ ÇáÇÌãÇáí] = @T where [ÇáãÇÏÉ] = 'ÇáãÌãæÚ'
	
	Select * from ResTblValue	

GO
/****** Object:  StoredProcedure [dbo].[PrcKillsessionUser]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcKillsessionUser]
(
	@Sp Varchar(256) = '55'
)
  
as
	Declare @S Varchar(256)
	Set @S = 'Kill '+@Sp
	exec(@S)
	
	Delete [CurrentUsers] where Spid = CAST(@Sp as int)

GO
/****** Object:  StoredProcedure [dbo].[PrcLandOffer]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcLandOffer]
(
	@LandNo Varchar(256) = '',
	@Name Varchar(256) = '',
	@ltnName Varchar(256) = '',
	@Customer Varchar(256) = '',
	@OfferKind int = 3,
	@OfferValue1 Float = 0,
	@OfferValue2 Float = 0,
	@City Varchar(256) = '',
	@Region Varchar(256) = '',
	@Space Varchar(256) = '',
	@Area1 Float = 0,
	@Area2 Float = 0,
	@license Varchar(256) = '',
	@LandType Varchar(256) = '',
	@Side Varchar(256) = '',
	@Delegated VARCHAR(256) = '',
	@CustPhone VARCHAR(256) = '',
	@CustMobile VARCHAR(256) = ''
)
  
as
	Select 
		*,
		Case when OfferKind = 0 then 'ÈíÚ'
			 when OfferKind = 1 then 'ÔÑÇÁ'
			 when OfferKind = 2 then 'ÅíÌÇÑ'
		end as OfferKindStr
	From 
		[LandOffer]
	where
		([LandNo] = @LandNo or @LandNo = '')
		and ([Name] Like '%'+@Name+'%')
		and ([ltnName] Like '%'+@ltnName+'%')
		and ([Customer] Like '%'+@Customer+'%')
		and ([OfferKind] = @OfferKind Or @OfferKind = 3)
		and ([OfferValue] between @OfferValue1 and @OfferValue2 or @OfferValue2 = 0)
		and ([City] Like '%'+@City+'%')
		and ([Region] Like '%'+@Region+'%')
		and ([Space] Like '%'+@Space+'%')
		and ([Area] between @Area1 and @Area2 or @Area2 = 0)
		and ([license] Like '%'+@license+'%')
		and ([LandType] Like '%'+@LandType+'%')
		and ([Side] Like '%'+@Side+'%')
		and ([Delegated] Like '%'+@Delegated+'%')
		and ([CustPhone] Like '%'+@CustPhone+'%')
		and ([CustMobile] Like '%'+@CustMobile+'%')
		

GO
/****** Object:  StoredProcedure [dbo].[PrcLawsuit]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcLawsuit]
(
	@LawsuitGuid uniqueidentifier = 0x0,
	@RealtyNo varchar(256) = '',
	@CustGuid uniqueidentifier = '8DCCC94B-9909-4650-9563-E6CABF1F6372',
	@LawsuitState int = 2,
	@Datewith int = 0,
	@ActiveContractList bit = 1,
	@ActiveBuildingList bit = 1,
	@ActiveDate bit = 0,
	@Date1 DateTime = '1/1/2007',
	@Date2 DateTime = '1/1/2008'
)
  
as
	Create Table #LawsuitRes1
	(
		[ContractGuid] uniqueidentifier,
		[ContractNo] varchar(256),
		[RealtyNo] varchar(256),
		BuildingName varchar(256),
		[BuildingGuid] uniqueidentifier,
		CustName varchar(256),
		FromDate Datetime,
		Todate Datetime,
		StopPayDate Datetime,
		[State] varchar(256),

		[LastState] varchar(256),
		LastStateDate Datetime,
		LastStateNote varchar(256),
		LastStateUserGuid uniqueidentifier,
		LastStateUserName varchar(256),

		No varchar(256),
		StartDate Datetime,
		QuittanceDate Datetime,
		QuittanceElectricityDate Datetime,
		EndDate Datetime,
		ExeNo varchar(256),
		Rent Float,
		[DueRent] Float,
		[Expense] Float,
		MaintenanceRent Float,
		LawyerRent Float,
		Furniture Float,
		[PayChecks] Float,
		[CachPayment] Float,
		Kind int,
		LawsuitGuid uniqueidentifier,
	)
	

	insert into #LawsuitRes1
	Select 
		C.[Guid] as [ContractGuid],
		C.[ContractNo],
		C.[FlatNo] as [RealtyNo],
		C.BuildingName,
		C.[BuildingGuid],
		C.CustName,
		C.FromDate,
		C.Todate,
		L.StopPayDate,
		Case when IsEnded = 1 then dbo.SC('ãäÊåíÉ')
		else dbo.SC('ÞÇÆãÉ')
		end as [State],
		(Select Top 1 [State] From LawsuitState where ParentGuid = L.Guid order by Date Desc, Number Desc ) as LastState,
		(Select Top 1 [Date] From LawsuitState where ParentGuid = L.Guid order by Date Desc, Number Desc ) as LastStateDate,
		(Select Top 1 [Note] From LawsuitState where ParentGuid = L.Guid order by Date Desc, Number Desc ) as LastStateNote,
		(Select Top 1 UserGuid From LawsuitState where ParentGuid = L.Guid order by Date Desc, Number Desc ) as LastStateUserGuid,
		'' as LastStateUserName,
		L.No,
		l.StartDate,
		L.QuittanceDate,
		L.QuittanceElectricityDate,
		L.EndDate,
		L.ExeNo,
		L.Rent,
		Case when dbo.fnDateIsNull(QuittanceElectricityDate) = 1 then (L.Rent / 356) * (Datediff(DAY, L.QuittanceElectricityDate , L.StopPayDate) + 1) end AS [DueRent],
		(
			Select
				SUM(ReceiptValue)
			From
				LawsuitExpense
			where
				ParentGuid = L.Guid
		) as [Expense],
		L.MaintenanceRent,
		L.LawyerRent,
		L.Furniture,
		(
			Select 
				SUM(value)
			from
				[Checks] C
			where
				ContractGuid = L.Guid
		) as [PayChecks],

		(
			Select 
				SUM(value)
			from
				[vwLawsuitCachPayment]	C
			where
				LawsuitGuid = L.Guid
		) as [CachPayment],
		0 as Kind,
		L.Guid as LawsuitGuid
	From 
		[Lawsuit] L
		inner join vwAllContract C on C.Guid = L.ContractGuid 
	where
		(L.Guid = @LawsuitGuid or @LawsuitGuid = 0x0)
		and (C.[FlatNo] = @RealtyNo or @RealtyNo = '')
		and (c.CustGuid = @CustGuid or @CustGuid = 0x0)
		and (
				(L.IsEnded = 1 and @LawsuitState = 0)
				or (L.IsEnded = 0 and @LawsuitState = 1)
				or @LawsuitState = 2
			)
		and (
				(L.StartDate between @Date1 and @Date2 and @Datewith = 0)
				or (L.StartDate between @Date1 and @Date2 and @Datewith = 1)
				or (L.EndDate between @Date1 and @Date2 and @Datewith = 2)
				or @ActiveDate = 0
			)

	Update
		#LawsuitRes1
	Set
		LastStateUserName = LogInName 
	From
		#LawsuitRes1 R
		inner join Realty_Users U on U.Guid = R.LastStateUserGuid

	--ãÚÇáÌÉ ÇäãÇØ ÇáÚÞæÏ
	if @ActiveContractList = 1
	begin
		Select 
			[R].[LawsuitGuid] 
		into #CheckContract	
		From
			#LawsuitRes1 [R]
			inner join [vwAllContract] [C] On [C].[Guid] = [R].[ContractGuid]
			inner join [Resource] [RS] on [RS].[Guid] = [C].[TypeGuid] and [RS].[Spid] = @@Spid and [RS].[Kind] = 102
	
		--Select * from #CheckContract
	
		Delete #LawsuitRes1
		From
			#LawsuitRes1 [R]
			left join #CheckContract [C] On [C].[LawsuitGuid] = [R].[LawsuitGuid]
		where
			[C].[LawsuitGuid] is Null
	end
	
	
	--ãÚÇáÌÉ ÇáÃÈäíÉ
	if @ActiveBuildingList = 1
	begin
		Delete #LawsuitRes1
		From
			#LawsuitRes1 [L]
			left join [Resource] [R] on [R].[Guid] = [L].[BuildingGuid] and [R].[Kind] = 99 and [R].[Spid] = @@Spid 
		where
			[R].[Guid] Is Null
			and L.BuildingGuid <> 0x0
	end
	
	Select
		*,
		IsNull([DueRent],0) + IsNull([Expense],0) + IsNull(MaintenanceRent,0) + IsNull(LawyerRent,0)  as [DueValue],
		IsNull([DueRent],0) + IsNull([Expense],0) + IsNull(MaintenanceRent,0) + IsNull(LawyerRent,0)
		- IsNull([PayChecks],0) - IsNull([CachPayment],0) + IsNull([Furniture],0) as [CleanDue]
	into #LawsuitRes2
	From
		#LawsuitRes1
		
	insert into #LawsuitRes2
	(	[Rent],
		[DueRent],
		[Expense],
		[MaintenanceRent],
		[LawyerRent],
		[Furniture],
		[DueValue],
		[PayChecks],
		[CachPayment],
		[CleanDue],
		LawsuitGuid,
		[Kind]
	)
	Select
		isNull(Sum([Rent]),0),
		isNull(Sum([DueRent]),0),
		isNull(Sum([Expense]),0),
		isNull(Sum([MaintenanceRent]),0),
		isNull(Sum([LawyerRent]),0),
		isNull(Sum([Furniture]),0),
		isNull(Sum([DueValue]),0),
		isNull(Sum([PayChecks]),0),
		isNull(Sum([CachPayment]),0),
		isNull(Sum([CleanDue]),0),
		0x0 as LawsuitGuid,
		1 as [Kind]
	from
		#LawsuitRes2
		
	Select 
		*
	from
		#LawsuitRes2
	Order By
		Kind, StartDate
		
	Select 
		*
	from
		#LawsuitRes2
	where
		Kind = 1
		

GO
/****** Object:  StoredProcedure [dbo].[prcLog]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE  proc [dbo].[prcLog]
	@txt varchar(8000) = '',  
	@param0 varchar(128) = null,  
	@param1 varchar(128) = null,  
	@param2 varchar(128) = null,  
	@param3 varchar(128) = null,  
	@param4 varchar(128) = null,  
	@param5 varchar(128) = null,  
	@param6 varchar(128) = null, 
	@param7 varchar(128) = null, 
	@param8 varchar(128) = null, 
	@param9 varchar(128) = null 
  
as  
	if @txt = '' 
		set @txt = '<nothing>' 
	else 
		set @txt = dbo.fnFormatString (@txt, @param0, @param1, @param2, @param3, @param4, @param5, @param6, @param7, @param8, @param9) 
	print convert (varchar(128), getdate(), 14) +' [' + db_name() + ']: ' + @txt  
	if left(@txt, 9) = 'START OF:' or left(@txt, 7) = 'END OF:'  
		print '========================================================'  




GO
/****** Object:  StoredProcedure [dbo].[PrcMaintenanceContractList]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcMaintenanceContractList]
(
	@CustGuid uniqueidentifier = 0x0
	,@Emirate Varchar(256) = ''
	,@Suburb Varchar(256) = ''
	,@Area Varchar(256) = ''
	,@Street Varchar(256) = ''
	,@ContractState int = 1
	,@PayType int = 4
	,@Datewith int = 0
	,@Date1 DateTime = '12/30/1899'
	,@Date2 DateTime = '12/30/2018'
	,@ShowIsCheck Bit = 1
	,@ShowIsNotCheck Bit = 1
	,@CKDate Bit = 0
	,@EndState int = 2
	,@NewState int = 2
	,@Mark Bit = 1
	,@NotMark Bit = 1
	,@AcquittancePrinted int = 2
	,@AcquittancePrintedByUserGuid uniqueidentifier = 0x0
	,@LinkCheck int = 2
	,@whereabouts varchar(255) = ''
	,@Trademark varchar(255) = ''
	,@FinishDate int = 3
	,@ContractValue int = 2
	,@MaintinanceItemGuid uniqueidentifier = 0x0
)
  
as
	Set noCount on

	Declare @Msg varchar(255),
			@MsgConst varchar(255)
	Set @MsgConst = dbo.SC('ßÔÝ ÚÞæÏ ÇáÕíÇäÉ')
			
	Set @Msg = @MsgConst
	exec PrcSetProgrss @Msg, 100, 0

	Declare @Tbl Table
	(
		[ContractNo] Varchar(256)
		,[BuildingName] Varchar(256)
		,[Value] Float
		,[Discount] Float
		,[ValueAfterDiscount] Float
		,[ContractState] Varchar(256)
		,[Emirate] Varchar(256)
		,[Suburb] Varchar(256)
		,[Area] Varchar(256)
		,[Street] Varchar(256)
		,[CustName] Varchar(256)
		,[CustPhone] Varchar(256)
		,[CustNationality] Varchar(256)
		,[CustEMail] Varchar(256)
		,[ContractDateEdit] Datetime
		,[ContractDateBegin] Datetime
		,[ContractDateEnd] Datetime
		,[MaintenanceContractType] Varchar(256)
		,[ContractFinish] Bit
		,[ContractGuid] uniqueidentifier
		,[NewState] int

		,[ContractFinishDate] Datetime
		,[ResultingAmount] Float
		,[ResultingAmount2] Float
		,[Note2] Varchar(1000)
		,[Purpose] Varchar(256)
		,Trademark Varchar(256)
		
		,[CountOldContract] int
		
		,[AcquittancePrinted] Bit
		,[AcquittancePrintdate] Datetime
		,[AcquittancePrintedBy] Varchar(256)
		,[CostGuid] uniqueidentifier
		,[AccountGuid] uniqueidentifier
		,[Mark] Bit

		--,[PrvContractFinishDate] Datetime
		--,[PrvContractEndDate] Datetime

		,[Kind] Int
		,[Sort] int
	)

	Declare  @Now_Date Datetime
	Set @Now_Date = GetDate()
	

	Set @Msg = @MsgConst
	exec PrcSetProgrss @Msg, 100, 5
	
	--Building
	Select
		*
	Into #Building_CL
	From
		[vwBuilding] B
	where
		([B].[Emirate] = @Emirate or @Emirate = '')
		and ([B].[Suburb] = @Suburb or @Suburb = '')
		and ([B].[Area] = @Area or @Area = '')
		and ([B].[Street] = @Street or @Street = '')
		
	Set @Msg = @MsgConst
	exec PrcSetProgrss @Msg, 100, 7
		

	--Select * from #Building_CL
		
	
	Select
		L.*
		--,(Select [ContractFinishDate] from [MaintenanceContract] where Guid = L.[PrvContractGuid]) as [PrvContractFinishDate]
		--,(Select [ToDate] from [MaintenanceContract] where Guid = L.[PrvContractGuid]) as [PrvContractEndDate]
		,T.Name as ContractName
		,U.LoginName as [AcquittancePrintedBy]
	into #MaintenanceContract_CL
	From
		[MaintenanceContract] L
		inner join MaintenanceContractType T on T.Guid = L.TypeGuid
		inner join [Resource] [R2] on [R2].[Guid] = [L].[TypeGuid]  and [R2].[Kind] = 100 and [R2].[spid] = @@Spid 
		left join [Realty_Users] U on U.[Guid] = L.AcquittancePrintedByGuid
	where
		([L].[CustomerGuid] = @CustGuid or @CustGuid = 0x0)
		and ([L].[ContractFinish] = @EndState or @EndState = 2)
		and (
				([l].[Mark] = 1 and @Mark = 1)
				or ([l].[Mark] = 0 and @NotMark = 1)
			)
		and (L.PayType = @PayType or @PayType  = 4)
		and (L.Trademark = @Trademark or @Trademark = '')
		and (L.AcquittancePrintedByGuid = @AcquittancePrintedByUserGuid or @AcquittancePrintedByUserGuid = 0x0)
		
		and (L.whereabouts = @whereabouts or @whereabouts = '')
		and (
				(
					(
					([ContractFinishDate] < [ToDate] and @FinishDate = 0) or
					([ContractFinishDate] > [ToDate] and @FinishDate = 1) or
					([ContractFinishDate] = [ToDate] and @FinishDate = 2) 
					)
				and [ContractFinish] = 1
				)
				or @FinishDate = 3
			)
		and (
				(([L].Rent - [L].DiscountValue) <> 0 and @ContractValue = 0) or
				(([L].Rent - [L].DiscountValue) = 0 and @ContractValue = 1) or
				@ContractValue = 2
			)
	
		and	(
				((([L].[ToDate] <= @Now_Date) or ([L].[ContractFinish] = 1)) and @ContractState = 0)
			  	or ([L].[ToDate] > @Now_Date and @ContractState = 1)
				or @ContractState = 2
			)		
			and (
				(
					([L].[FromDate] >= @Date1 and @Datewith  = 0)
					and ([L].[FromDate] <= @Date2 and @Datewith  = 0 or @Date2 = '12/30/1899')
				)
				or
				(
					([L].[ToDate] >= @Date1 and @Datewith  = 1)
					and ([L].[ToDate] <= @Date2 and @Datewith  = 1 or @Date2 = '12/30/1899')
				)

				or
				(
					([L].[ContractFinishDate] >= @Date1 and @Datewith  = 2)
					and ([L].[ContractFinishDate] <= @Date2 and @Datewith  = 2 or @Date2 = '12/30/1899')
					and ([L].[ContractFinish] = 1)
				)

				or
				(
					([L].[EditDate] >= @Date1 and @Datewith  = 3)
					and ([L].[EditDate] <= @Date2 and @Datewith  = 3 or @Date2 = '12/30/1899')
				)
				or
				(
					([L].[AcquittancePrintdate] >= @Date1 and @Datewith  = 4)
					and ([L].[AcquittancePrintdate] <= @Date2 and @Datewith  = 4 or @Date2 = '12/30/1899')
				)

				or @CKDate = 0
			) 
		and (L.AcquittancePrinted = @AcquittancePrinted or @AcquittancePrinted = 2)			

	Set @Msg = @MsgConst
	exec PrcSetProgrss @Msg, 100, 12

	if @MaintinanceItemGuid <> 0x0
	begin
		Delete #MaintenanceContract_CL
		From
			#MaintenanceContract_CL M
			inner join MaintenanceContractMaintenanceItem mi on mi.ContractGuid = M.Guid
		where
			mi.MaintenanceItemGuid <> @MaintinanceItemGuid
	end
	
	--Customer 
	Select
		*
	into #Customer
	From
		vwCustomer
	where
		([Guid] = @CustGuid or @CustGuid = 0x0)
		
    
	Insert into @Tbl 
	Select distinct
		[L].[ContractNo]
		,'' as [BuildingName]
		--,[B].[Name] as [BuildingName]
		,L.Rent
		,[L].[DiscountValue] 
		,L.Rent - [L].[DiscountValue] 
		,Case when ([L].[ToDate] <= @Now_Date) or ([L].[ContractFinish] = 1) then dbo.sc('ãäÊåí ÇáãÏÉ')  
			  when [L].[ToDate] > @Now_Date then dbo.sc('ÛíÑ ãäÊåí ÇáãÏÉ') end as [ContractState]
		,'' as [Emirate]
		,'' as [Suburb]
		,'' as [Area]
		,'' as [Street]
		,[Cu].[Name] as [CustName]
		,[Cu].[Mobile] as [CustPhone]
		,[Cu].Nationality
		,Cu.EMail as CustEMail
		,[L].[EditDate] as [ContractDateEdit]
		,[L].[FromDate] as [ContractDateBegin]
		,[L].[ToDate] as [ContractDateEnd]
		,[L].[ContractName]
		,[L].[ContractFinish]
		,[L].[Guid] as [ContractGuid]
		,[L].[NewState] 

		,[ContractFinishDate]
		,[ResultingAmount]
		,[ResultingAmount2]
		,[Note2] 
		,L.[Purpose]
		,L.Trademark
		,l.[CountOldContract]
		,l.AcquittancePrinted
		,L.AcquittancePrintDate
		,L.[AcquittancePrintedBy]
		,[L].[CostGuid]
		,L.[CustAccountGuid]
		,[L].[Mark]

		--,[PrvContractFinishDate]
		--,[PrvContractEndDate]

		,0 as [Kind]
		,0 as [Sort]
	from 
		#MaintenanceContract_CL [L] 
		inner join RealtyMaintenanceContract Rl on Rl.ParentGuid = L.Guid
		inner join vwAllRealty Ar on Ar.Guid = Rl.RealtyGuid
		Inner join #Building_CL [B] On [B].[Guid] = [Ar].[BuildingGuid] 
		inner join [Resource] [R] on [R].[Guid] = [B].[Guid]  and [R].[Kind] = 101 and [R].[spid] = @@Spid 
		Inner join [#Customer] [Cu] on [Cu].[Guid] = [L].[CustomerGuid] 
		
	/*
	-- ÃÑÖ
	Insert into @Tbl 
	Select 
		[L].[ContractNo]
		,[ar].[Name] as [BuildingName]
		,Rl.Value
		,[L].[DiscountValue] * (Rl.[Percent] / 100)
		,Rl.Value - ([L].[DiscountValue] * (Rl.[Percent] / 100))
		,Case when ([L].[ToDate] <= @Now_Date) or ([L].[ContractFinish] = 1) then dbo.sc('ãäÊåí ÇáãÏÉ')  
			  when [L].[ToDate] > @Now_Date then dbo.sc('ÛíÑ ãäÊåí ÇáãÏÉ') end as [ContractState]
		,[ar].[City] as [Emirate]
		,[ar].Region as [Suburb]
		,[ar].[Area] as [Area]
		,[ar].StreetName as [Street]
		,[Cu].[Name] as [CustName]
		,[Cu].[Mobile] as [CustPhone]
		,[Cu].Nationality
		,Cu.EMail as CustEMail
		,[L].[EditDate] as [ContractDateEdit]
		,[L].[FromDate] as [ContractDateBegin]
		,[L].[ToDate] as [ContractDateEnd]
		,[L].[ContractName]
		,[L].[ContractFinish]
		,[L].[Guid] as [ContractGuid]
		,[L].[NewState] 

		,[ContractFinishDate]
		,[ResultingAmount]
		,[ResultingAmount2]
		,[Note2] 
		,L.[Purpose]
		,L.Trademark
		,l.[CountOldContract]
		,l.AcquittancePrinted
		,L.AcquittancePrintDate
		,L.[AcquittancePrintedBy]
		,[L].[CostGuid]
		,L.[CustAccountGuid]
		,[L].[Mark]

		--,[PrvContractFinishDate]
		--,[PrvContractEndDate]

		,0 as [Kind]
		,0 as [Sort]
	from 
		#MaintenanceContract_CL [L] 
		inner join RealtyMaintenanceContract Rl on Rl.ParentGuid = L.Guid
		inner join vwEarth Ar on Ar.Guid = Rl.RealtyGuid
		--inner join [Resource] [R] on [R].[Guid] = [B].[Guid]  and [R].[Kind] = 101 and [R].[spid] = @@Spid 
		Inner join [#Customer] [Cu] on [Cu].[Guid] = [L].[CustomerGuid] 


	-- ÝíááÇ
	Insert into @Tbl 
	Select 
		[L].[ContractNo]
		,[ar].[Name] as [BuildingName]
		,Rl.Value
		,[L].[DiscountValue] * (Rl.[Percent] / 100)
		,Rl.Value - ([L].[DiscountValue] * (Rl.[Percent] / 100))
		,Case when ([L].[ToDate] <= @Now_Date) or ([L].[ContractFinish] = 1) then dbo.sc('ãäÊåí ÇáãÏÉ')  
			  when [L].[ToDate] > @Now_Date then dbo.sc('ÛíÑ ãäÊåí ÇáãÏÉ') end as [ContractState]
		,[ar].Emirate as [Emirate]
		,[ar].Suburb as [Suburb]
		,[ar].[Area] as [Area]
		,[ar].Street as [Street]
		,[Cu].[Name] as [CustName]
		,[Cu].[Mobile] as [CustPhone]
		,[Cu].Nationality
		,Cu.EMail as CustEMail
		,[L].[EditDate] as [ContractDateEdit]
		,[L].[FromDate] as [ContractDateBegin]
		,[L].[ToDate] as [ContractDateEnd]
		,[L].[ContractName]
		,[L].[ContractFinish]
		,[L].[Guid] as [ContractGuid]
		,[L].[NewState] 

		,[ContractFinishDate]
		,[ResultingAmount]
		,[ResultingAmount2]
		,[Note2] 
		,L.[Purpose]
		,L.Trademark
		,l.[CountOldContract]
		,l.AcquittancePrinted
		,L.AcquittancePrintDate
		,L.[AcquittancePrintedBy]
		,[L].[CostGuid]
		,L.[CustAccountGuid]
		,[L].[Mark]

		--,[PrvContractFinishDate]
		--,[PrvContractEndDate]

		,0 as [Kind]
		,0 as [Sort]
	from 
		#MaintenanceContract_CL [L] 
		inner join RealtyMaintenanceContract Rl on Rl.ParentGuid = L.Guid
		inner join vwVilla Ar on Ar.Guid = Rl.RealtyGuid
		--inner join [Resource] [R] on [R].[Guid] = [B].[Guid]  and [R].[Kind] = 101 and [R].[spid] = @@Spid 
		Inner join [#Customer] [Cu] on [Cu].[Guid] = [L].[CustomerGuid] 
		*/

	Set @Msg = @MsgConst +' '+ dbo.SC('ÇáÃÞÓÇØ')
	exec PrcSetProgrss @Msg, 100, 60

	Declare @PCheck Bit 
	Set @PCheck = 1	
	Declare @PNotCheck Bit 
	Set @PNotCheck = 0

	if @LinkCheck = 0 -- ÈÏæä ÇÞÓÇØ
	Delete @Tbl
	From
		@Tbl T
		inner join [Checks] C on C.ContractGuid = T.ContractGuid
	
	if @LinkCheck = 1 -- áåÇ ÇÞÓÇØ
	Delete @Tbl
	From
		@Tbl T
		left join [Checks] C on C.ContractGuid = T.ContractGuid
	where
		C.Guid is Null
		
	Set @Msg = @MsgConst +' '+ dbo.SC('ÇáÃæÑÇÞ ÇáãÇáíÉ')
	exec PrcSetProgrss @Msg, 100, 70

	-- ÇáÔíßÇÊ
	Create Table #Collection_CL
	(
		[ContractGuid] uniqueidentifier,
		[Total] Float,
		[Collection] Float
	)
	
	Select
		p.Guid as [CheckGuid],
		[P].[ContractGuid],
		IsNull([P].[Value] * [P].[CurrencyVal],0) as [checkValue]
	into #Collection_Contract_Checks
	From
		[vbChecks] [P]
		inner join @Tbl [t] on [t].[ContractGuid] = [P].[ContractGuid]

	Select
		[CC].[ContractGuid],
		Sum(IsNull([C1].[Value] * [C1].[CurrencyVal],0)) as [Collection]
	Into #Collection_Sum_CL
	From
		#Collection_Contract_Checks CC
		inner join [ChecksCollection] [C1] on [C1].[CheckGuid] = [CC].[CheckGuid] and [C1].[Kind] = 1
	Group By
		[CC].[ContractGuid]
		
	insert into #Collection_CL
	([ContractGuid] ,[Total],[Collection])
	Select
		[ContractGuid],
		Sum(IsNull([CC].[checkValue],0)) as [Total],
		0
	From
		#Collection_Contract_Checks CC
	Group by
		[ContractGuid]
		
	update #Collection_CL Set [Collection] = S.[Collection]
	From
		#Collection_CL C
		inner join #Collection_Sum_CL S on C.ContractGuid = S.ContractGuid

	Set @Msg = @MsgConst +' '+ dbo.SC('ÇáÏÝÚÇÊ ÇáäÞÏíÉ')
	exec PrcSetProgrss @Msg, 100, 75

	-- ÇáÊÞÏí
	Select
		[P].[ContractGuid],
		Sum(IsNull([P].[Value] * [P].[CurrencyVal],0)) as [Cash]
	Into #Cash
	From
		[vwMaintenanceContractCachPayment] [P]
		inner join @Tbl [t] on [t].[ContractGuid] = [P].[ContractGuid] and P.AcGuid = t.AccountGuid
	Group By
		[P].[ContractGuid]	

	Set @Msg = @MsgConst +' '+ dbo.SC('ÃÑÕÏÉ ÇáÒÈÇÆä')
	exec PrcSetProgrss @Msg, 100, 80

	Select
		En.AcGuid,
		SUM(En.debit - en.Credit) as [Balance]
	into #CustBalance
	From
		(Select distinct AccountGuid from @Tbl ) T
		inner join DEntry En on En.AcGuid = T.AccountGuid
	Group By
		En.AcGuid

	
	
	Set @Msg = ''
	exec PrcSetProgrss @Msg, 100, 90

	Select 
		[E].*,
		
		Case when isnUll([ContractFinish],0) = 0 then dbo.sc('áÇ') else dbo.sc('äÚã') end As [ContractFinishStr],
		Case when isnUll([NewState],0) = 0 then dbo.sc('ÌÏíÏ') 
			 when isnUll([NewState],0) = 1 then dbo.sc('ÊÌÏíÏ') 
		else 
			''
		end As [NewStateStr],
		
		
		isNull([C].[Collection],0) as [Collection],
		isNull([C].[Total],0) - isNull([C].[Collection],0) as [CheckNotCollection],
		isNull([h].[Cash],0) as [Cash],
		IsNull([C].[Collection],0) + IsNull([h].[Cash],0) as [TotalPays],
		isNull(E.ValueAfterDiscount ,0) - IsNull([C].[Collection],0) - IsNull([h].[Cash],0) as [ContractRest],
		CAST(0 as Float) as [CustBalance],
				
		Case when [R].[ObjGuid] is null then @PNotCheck
			 when [R].[ObjGuid] is not null  then @PCheck end as [Check],
		1 as [DoOperation]
	into #MaintenanceContractList_4
	From
		@Tbl [E]
		left join #Collection_CL [C] on [E].[ContractGuid] = [C].[ContractGuid]
		left join #Cash [h] on [E].[ContractGuid] = [h].[ContractGuid]
		left join [RepCheck] [R] on [R].[ObjGuid] = [E].[ContractGuid] and [R].[IdReport] = 2000
	where
		(
			([R].[ObjGuid] is not null and @ShowIsCheck = 1)
			or
			([R].[ObjGuid] is null and @ShowIsNotCheck = 1)
		)
		and (Isnull([E].[NewState],0) = @NewState or @NewState = 2)
		
	Set @Msg = ''
	exec PrcSetProgrss @Msg, 100, 95
	
	update	
		#MaintenanceContractList_4
	set
		custBalance = C.Balance
	From
		#MaintenanceContractList_4 E
		inner join #CustBalance C on C.AcGuid = E.AccountGuid 
	
	Set @Msg = ''
	exec PrcSetProgrss @Msg, 0, 0
	
	Select
		*
	from
		#MaintenanceContractList_4
	Order By 
		[Sort],
		[BuildingName]
		
	
	Select
		SUM(Value) as [Value],
		SUM(ValueAfterDiscount) as ValueAfterDiscount,
		SUM(ResultingAmount) as ResultingAmount
	From
		#MaintenanceContractList_4
	where
		[Sort] = 0
		

GO
/****** Object:  StoredProcedure [dbo].[PrcMaintenanceContractVisitAlert]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[PrcMaintenanceContractVisitAlert]
(
	@DayCount int = 10
)
  
as
	Select
		Count(*) as [Count]
		--v.Date,
		--Case 
		--	when (execState = 1) then dbo.SC('Êã ÇáÊäÝíÐ')
		--	when (DATEADD(Day, -@DayCount, Date) > GetDate()) and (execState = 2) then dbo.SC('áã íÍä æÞÊåÇ')
		--	when (DATEADD(Day, -@DayCount, Date) <= GetDate()) and (execState = 2) then dbo.SC('ÍÇä æÞÊåÇ æáã ÊäÝÐ')
		--	when (execState = 0) then dbo.SC('áã íÊã ÇáÊäÝíÐ')
		--	else dbo.SC('ÛíÑ ãÍÏÏ')
		--end
		--as [visitState],
		--Case 
		--	when (execState = 1) then 0
		--	when (DATEADD(Day, -@DayCount, Date) > GetDate()) and (execState = 2) then 1
		--	when (DATEADD(Day, -@DayCount, Date) <= GetDate()) and (execState = 2) then 2
		--	when (execState = 0) then 3
		--	else 4
		--end
		--as [visitStateId]
	From
		[vbMaintenanceContractVisit] [V]
	where
		Case 
			when (execState = 1) then 0
			when (DATEADD(Day, -@DayCount, Date) > GetDate()) and (execState = 2) then 1
			when (DATEADD(Day, -@DayCount, Date) <= GetDate()) and (execState = 2) then 2
			when (execState = 0) then 3
			else 4
		end	= 2
		

GO
/****** Object:  StoredProcedure [dbo].[PrcMaintenanceContractVisitCreateEntry]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcMaintenanceContractVisitCreateEntry]
(
	@Guid uniqueidentifier = '05F5C8A8-4349-48D6-9F91-28C397C518C9'
)
  
as
	Set nocount on 
	Declare @CeNumber Int
	Select
		@CeNumber = Number
	From
		HEntry
	where
		Guid = @Guid
		
	if isNull(@CeNumber,0) = 0
	Set @CeNumber = (Select isNull(MAX(Number),0) + 1 From HEntry)

	Delete
		HEntry
	where
		Guid = @Guid
		
	if Not exists(Select Top 1 Guid from MaintenanceContractVisit where Guid = @Guid and CreateEntry = 1) return
	
	Declare @AccountGuid uniqueidentifier, 
			@ObverseAcGuid uniqueidentifier
			
		

	Insert Into [HEntry]
	([Guid],[SecLvl],[Number],[Date], [CurrencyGuid], [CurrencyVal], [Note], [ParentKind], [BranchGuid], [IsPosted])
	Select
		@Guid,
		[SecLvl],
		@CeNumber,
		[Date],
		[CurrencyGuid],
		[CurrencyVal],
		[EntryNote],
		161, 
		Null,
		1
	From
		MaintenanceContractVisit
	where
		Guid = @Guid

	Declare @DetailNum Int
	Set @DetailNum = 0

	Insert into [DEntry]
 	([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
	Select
		@Guid,
		@DetailNum,
		FeeAccountGuid,
		(Select Sum(Fee *  HourCount) From MaintenanceContractVisitWorker where ParentGuid =@Guid),
		0,
		A.CurrencyGUID,
		A.CurrencyVal,
		EntryDebitCostGuid,
		Null,
		A.[EntryNote]
	From
		MaintenanceContractVisit A
	where
		A.[Guid] = @Guid
				
	Set @DetailNum = @DetailNum + 1
	
	Insert into [DEntry]
 	([ParentGuid],[Number],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[CostGuid],[ObverseAcGuid],[Note])
	Select
		@Guid,
		@DetailNum,
		MW.accountGuid,
		0,
		W.Fee * W.HourCount,
		A.CurrencyGUID,
		A.CurrencyVal,
		A.[EntryCreditCostGuid],
		FeeAccountGuid,
		A.[EntryNote]
	From
		MaintenanceContractVisit A
		inner join MaintenanceContractVisitWorker W on W.ParentGuid = A.Guid
		inner join MaintenanceWorker MW on MW.Guid = W.WorkerGuid
	where
		A.[Guid] = @Guid

	Delete [DEntry] where ParentGuid = @Guid and (ISNULL(Debit, 0) + ISNULL(Credit, 0) = 0)
	Delete [DEntry] where ParentGuid = @Guid and AcGuid Is Null

	update HEntry set IsPosted = 1 where Guid = @Guid
	--Select * from [MaintenanceContractVisit] where Guid = @Guid
	--Select * from [DEntry] where parentGuid = @Guid
			

GO
/****** Object:  StoredProcedure [dbo].[PrcMaintenanceContractVisitReport]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create Procedure [dbo].[PrcMaintenanceContractVisitReport]
(
	@ContractGuid uniqueidentifier = 0x0,
	@CustGuid uniqueidentifier = 0x0,
	@VisitNo varchar(255) = '',
	@VisitState int = 4,
	@ActiveDate bit = 0,
	@DateWith int = 0,
	@Date1 DateTime = '1/1/2007',
	@Date2 DateTime = '1/1/2008'
)
as
	Select 
		 [TypeName],
		 [ContractNo],
		 [CustName],
		 [VisitNo],
		 [Number],
		 [No],
		 [Date],
		 [ExecState],
		 [ExecDate],
		 [ExecNote],
		 [NotExecNote],
		 [Note],
		 [WorkNote],
		 [WithOutContract],
		 [visitState],
		 [visitStateId],
		 [execStateStr],
		 v.[Guid]
	From 
		[vwMaintenanceContractVisitfull] V
		inner join [Resource] R on R.Guid = V.TypeGuid and R.Spid = @@spid
	where
		(v.ContractGuid = @ContractGuid or @ContractGuid = 0x0)
		and (V.CustomerGuid = @CustGuid or @CustGuid = 0x0)
		and (V.No = @VisitNo or @VisitNo = '')
		and (V.VisitStateId = @VisitState or @VisitState = 4)
		and (
				(V.Date between @Date1 and @Date2 and @DateWith = 0)
				or (V.execDate between @Date1 and @Date2 and @DateWith = 1)
				or @ActiveDate = 0
			)
	Order by Date
		

GO
/****** Object:  StoredProcedure [dbo].[PrcMaintenanceOrder]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcMaintenanceOrder]
(
	@No Varchar(256) = '',
	@CustGuid uniqueidentifier = 0x0,
	@FlatGuid uniqueidentifier = 0x0,
	@OrderState int = 3,
	@MaintenanceWorkerGuid uniqueidentifier = 0x0,
	@delay1 int = 0,
	@delay2 int = 0,
	@repitition int = 2,
	@Datewith int = 2,
	@ActiveBuildingList Bit = 1,
	@ActiveDate Bit = 0,
	@Date1 DateTime = '1/1/2007',
	@Date2 DateTime = '1/1/2016',
	@RealtyKind int = 6
)
  
as
	Select 
		M.* 
	From 
		[vwMaintenanceOrder] M
		left join vwBuilding B on M.BuildingGuid = B.Guid
		left join [Resource] [R] on [R].[Guid] = M.BuildingGuid and [R].[Kind] = 94 and [R].[Spid] = @@Spid 
	where
		(M.No = @No or @No = '')
		and ([M].CustGuid = @CustGuid or @CustGuid = 0x0)
		and (M.RealtyGuid = @FlatGuid or @FlatGuid = 0x0)
		and (M.RealtyKind = @RealtyKind or @RealtyKind = 6)
		and ([M].OrderState = @OrderState or @OrderState = 3)
		and ([M].[MaintenanceWorkerGuid] = @MaintenanceWorkerGuid or @MaintenanceWorkerGuid = 0x0)
		and ([M].[Delay] between @delay1 and @delay2 or @delay2 = 0)
		and ([M].[Repitition] = @repitition or @repitition = 2)
		and (M.StartDate between @Date1 and @Date2 or @Datewith = 1  or @Datewith = 2 or @ActiveDate = 0)
		and (M.CloseDate between @Date1 and @Date2 or @Datewith = 0  or @Datewith = 2 or @ActiveDate = 0)
		and (M.EndExpectedDate between @Date1 and @Date2 or @Datewith = 0  or @Datewith = 1 or @ActiveDate = 0)
		and ([R].[Guid] Is Not Null or @ActiveBuildingList = 0 )

GO
/****** Object:  StoredProcedure [dbo].[PrcMapsObject]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcMapsObject]
(
	@MapGuid uniqueidentifier = 0x0,
	@Filter Varchar(256) = ''
)
  
as
	Select 
		[B].[Name] as [Name],
		[M].[BuildingGuid] as [ObjGuid],
		[M].[Kind],
		[M].[X],
		[M].[Y]
	Into #R
	From 
		[MapsObject] [M]
		inner join [Building] [B] on [B].[Guid] = [M].[BuildingGuid]
	where
		[M].[MapGuid] = @MapGuid

	Insert Into #R
	Select 
		[B].[Name] as [Name],
		[M].[LandGuid] as [ObjGuid],
		[M].[Kind],
		[M].[X],
		[M].[Y]
	From 
		[MapsObject] [M]
		inner join [vwearth] [B] on [B].[Guid] = [M].[LandGuid]
	where
		[M].[MapGuid] = @MapGuid

	Insert Into #R
	Select 
		[B].[Name] as [Name],
		[M].[VillaGuid] as [ObjGuid],
		[M].[Kind],
		[M].[X],
		[M].[Y]
	From 
		[MapsObject] [M]
		inner join [vwVilla] [B] on [B].[Guid] = [M].[VillaGuid]
	where
		[M].[MapGuid] = @MapGuid


	Insert Into #R
	Select 
		[M].[Note] as [Name],
		0x0 as [ObjGuid],
		[M].[Kind],
		[M].[X],
		[M].[Y]
	From 
		[MapsObject] [M]
	where
		[M].[MapGuid] = @MapGuid
		and	[Kind] = 4
		and [Note] <> '' 

	Select * from #R
	where
		[Name] Like '%'+@Filter+'%'
	Order By
		[Name]


GO
/****** Object:  StoredProcedure [dbo].[PrcMarkCashFromContract]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcMarkCashFromContract]
(
	@Guid uniqueidentifier = '89636B45-51F1-407A-B5D7-8297109745B5',
	@Mark bit = 1
)
  
as
	update
		Secondary_Entry 
	Set
		Mark = @Mark
	from
		Secondary_Entry S
		left join [ContractCachPayment] C on C.EntryGuid = S.Guid
	where
		[S].[ContractGuid] = @Guid 
		
	update
		HEntry
	Set
		Mark = @Mark
	from
		HEntry H
		inner join Secondary_Entry S on H.Guid = S.Guid
		left join [ContractCachPayment] C on C.EntryGuid = S.Guid
	where
		[S].[ContractGuid] = @Guid 
	
		

GO
/****** Object:  StoredProcedure [dbo].[PrcMarkCashFromLandContract]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcMarkCashFromLandContract]
(
	@Guid uniqueidentifier = 0x0,
	@Mark bit = 1
)
  
as
	update
		Secondary_Entry 
	Set
		Mark = @Mark
	from
		Secondary_Entry S
		left join [LandContractCachPayment] C on C.EntryGuid = S.Guid
	where
		[S].[ContractGuid] = @Guid 
		
	update
		HEntry
	Set
		Mark = @Mark
	from
		HEntry H
		inner join Secondary_Entry S on H.Guid = S.Guid
		left join [LandContractCachPayment] C on C.EntryGuid = S.Guid
	where
		[S].[ContractGuid] = @Guid 
	
		

GO
/****** Object:  StoredProcedure [dbo].[PrcMarkCashFromParkingContract]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcMarkCashFromParkingContract]
(
	@Guid uniqueidentifier = 0x0,
	@Mark bit = 1
)
  
as
	update
		Secondary_Entry 
	Set
		Mark = @Mark
	from
		Secondary_Entry S
		left join [ContractParkingCachPayment] C on C.EntryGuid = S.Guid
	where
		[S].[ContractGuid] = @Guid 
		
	update
		HEntry
	Set
		Mark = @Mark
	from
		HEntry H
		inner join Secondary_Entry S on H.Guid = S.Guid
		left join [ContractParkingCachPayment] C on C.EntryGuid = S.Guid
	where
		[S].[ContractGuid] = @Guid 
	
		

GO
/****** Object:  StoredProcedure [dbo].[PrcMarkCheckFromContract]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcMarkCheckFromContract]
(
	@Guid uniqueidentifier = '4A098C65-3D29-42E6-91AF-5BE1BC75D64C',
	@Mark bit = 1
)
  
as
	update
		[Checks] 
	Set
		Mark = @Mark
	from
		[Checks] [C]
	where
		[C].[ContractGuid] = @Guid 

GO
/****** Object:  StoredProcedure [dbo].[PrcMarkCheckFromLandContract]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcMarkCheckFromLandContract]
(
	@Guid uniqueidentifier = '4A098C65-3D29-42E6-91AF-5BE1BC75D64C',
	@Mark bit = 1
)
  
as
	update
		[Checks] 
	Set
		Mark = @Mark
	from
		[Checks] [C]
	where
		[C].[ContractGuid] = @Guid 

GO
/****** Object:  StoredProcedure [dbo].[PrcMarkCheckFromParkingContract]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcMarkCheckFromParkingContract]
(
	@Guid uniqueidentifier = '4A098C65-3D29-42E6-91AF-5BE1BC75D64C',
	@Mark bit = 1
)
  
as
	update
		[Checks] 
	Set
		Mark = @Mark
	from
		[Checks] [C]
	where
		[C].[ContractGuid] = @Guid 

GO
/****** Object:  StoredProcedure [dbo].[PrcMatBillsDetail]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcMatBillsDetail]
(
	@GroupGuid uniqueidentifier = 0x0,
	@MatGuid uniqueidentifier = 0x0,
	@StoreGuid uniqueidentifier = 0x0,
	@CostGuid uniqueidentifier = 0x0,
	@Class Varchar(256) = '',
	@Unit int = 2,
	@BillPost int = 2,

	@CurrencyGuid [uniqueidentifier] = '11111111-C748-4B13-8B91-1E9B299DF1C1',
	@CurrencyVal Float = 1,
	
	@CkDate Bit = 0,
	@Date1 DateTime = '1/1/2007',
	@Date2 DateTime = '1/1/2016'
)
  
as
	--Declare @BillChange bit
	--Select @BillChange = Value From DMD_const where VName = 'BillChange'
	--if @BillChange is Null Set @BillChange = 1
	--if @BillChange = 0 return
	--delete DMD_const where VName = 'BillChange'
	--insert into DMD_const Select 'BillChange', '0'
	
	select * into #fnGetGroupList from dbo.fnGetGroupList(@GroupGuid)
	select * into #fnGetStoreList from dbo.fnGetStoreList(@StoreGuid)
	select * into #fnGetCostList from dbo.fnGetCostList(@CostGuid)
	
	--Select * from #fnGetStoreList
	
	Create Table #MatMove
	(
		[BuNumber] int,
		[BuDate] DateTime,
		[buPayType] int,
		[BuPayTypeStr] Varchar(256) COLLATE database_default,
		[BuClass] Varchar(256) COLLATE database_default,
		[BuNote] Varchar(256) COLLATE database_default,
		[BillPost] Varchar(256) COLLATE database_default,
		[BtName] Varchar(256) COLLATE database_default,
		[CuName] Varchar(256) COLLATE database_default,
		[CuPhoneJob] Varchar(256) COLLATE database_default,
		[CuMobile] Varchar(256) COLLATE database_default,
		[CuAddress] Varchar(256) COLLATE database_default,
		[MyName] Varchar(256) COLLATE database_default,
		[BuCurrencyVal] Float,
		[AcCode] Varchar(256) COLLATE database_default,
		[AcName] Varchar(256) COLLATE database_default,
		
		[StCode] Varchar(256) COLLATE database_default,
		[StName] Varchar(256) COLLATE database_default,
		
		[CoCode] Varchar(256) COLLATE database_default,
		[CoName] Varchar(256) COLLATE database_default,

		[biNumber] int,
		[MatCode] Varchar(256) COLLATE database_default,
		[MatName] Varchar(256) COLLATE database_default,
		[MatLtnName] Varchar(256) COLLATE database_default,
		[GroupName] Varchar(256) COLLATE database_default,
		[ItemUnitStr] Varchar(256) COLLATE database_default,
		[Qty] Float,
		[Unit] Varchar(256) COLLATE database_default,

		[Qty2] Float,
		[Unity2] Varchar(256) COLLATE database_default ,

		[Qty3] Float,
		[Unity3] Varchar(256) COLLATE database_default,

		[Price] Float,
		[PurAvgPrice] Float,
		[TotalPrice] Float,
		[Bonus] Float,
		[DiscountPercent] Float,
		[Discount] Float,
		[ExtraPercent] Float,
		[Extra] Float,
		[Note] Varchar(256) COLLATE database_default,
		[ProductDate] Datetime,
		[ExpireDate] Datetime,
		[Class] Varchar(256) COLLATE database_default,
		[Length] Float,
		[width] Float,
		[height] Float,
		[Count] Float,
		[BuGuid] Uniqueidentifier,
		[MatGuid] Uniqueidentifier,
		[MatType] int,
		[StoreGuid] uniqueidentifier,
		[CostGuid] Uniqueidentifier,
		
		[CustGuid] Uniqueidentifier,
		[CustAccGuid] Uniqueidentifier,
		
		[TypeGuid] Uniqueidentifier,
		[CurrencyGuid] Uniqueidentifier,
		[CurrencyVal] Float,
		[BtInOut] int,
		[Kind] int,
		[BtBillKind] [int] NULL,
		[btPriceEffected] Bit
	)
	
	insert into #MatMove
	Select 
		[Bu].[BuNumber],
		[Bu].[BuDate],
		[Bu].[BuPayType],
		[Bu].[BuPayTypeStr],
		[Bu].[BuClass],
		[Bu].[BuNote],
		[Bu].[BillPost],
		[Bu].[BtName],
		[Bu].[CuName],
		[Bu].[CuPhoneJob],
		[Bu].[CuMobile],
		[Bu].[CuAddress],
		[Bu].[MyName],
		[Bu].[BuCurrencyVal],
		[Bu].[AcCode],
		[Bu].[AcName],
				
		'' as [StCode],
		'' as [StName],
		'' as [CoCode],
		'' as [CoName],
		d.Number,		[mt].[Code] as MatCode,		[mt].[Name] as [MatName],		[mt].[LtnName] as [MatltnName],		[mt].[GroupName],				Case when [d].[ItemUnit] = 1 then 'ÇáÃæáì'			 when [d].[ItemUnit] = 2 then 'ÇáËÇäíÉ'			 when [d].[ItemUnit] = 3 then 'ÇáËÇáËÉ'		end as [ItemUnitStr],				Case when @Unit = 1 then [d].[Qty]
			 when @Unit = 2 then [d].[Qty2]
			 when @Unit = 3 then [d].[Qty3]
			 when @Unit = 4 then 
								Case when [d].[ItemUnit] = 1 then [d].[Qty]									 when [d].[ItemUnit] = 2 then [d].[Qty2]									 when [d].[ItemUnit] = 3 then [d].[Qty3]								end
			 when @Unit = 0 then 
								Case when mt.[DefUnity] = 1 then [d].[Qty]
									 when mt.[DefUnity] = 2 then [d].[Qty2]
									 when mt.[DefUnity] = 3 then [d].[Qty3]
								end
		end as [Qty],
		Case when @Unit = 1 then mt.[Unity1]
			 when @Unit = 2 then mt.[Unity2]
			 when @Unit = 3 then mt.[Unity3]
			 when @Unit = 4 then 
								Case when [d].[ItemUnit] = 1 then mt.[Unity1]									 when [d].[ItemUnit] = 2 then mt.[Unity2]									 when [d].[ItemUnit] = 3 then mt.[Unity3]								end
			 when @Unit = 0 then 
								Case when mt.[DefUnity] = 1 then mt.[Unity1]
									 when mt.[DefUnity] = 2 then mt.[Unity2]
									 when mt.[DefUnity] = 3 then mt.[Unity3]
								end	
		end as [Unit],
		
		[d].[Qty2],
		mt.[Unity2],
		[d].[Qty3],
		mt.[Unity3],
		
		/*
		Case when @Unit = 1 then [d].[Price]
			 when @Unit = 2 then [d].[Price] * Case when mt.[UnityFact2] <> 0 then mt.[UnityFact2] end
			 when @Unit = 3 then [d].[Price] * Case when mt.[UnityFact3] <> 0 then mt.[UnityFact3] end
			 when @Unit = 4 then 
								Case when [d].[ItemUnit] = 1 then [d].[Price]
									 when [d].[ItemUnit] = 2 then [d].[Price] / Case when mt.[UnityFact2] <> 0 then mt.[UnityFact2] end
									 when [d].[ItemUnit] = 3 then [d].[Price] / Case when mt.[UnityFact3] <> 0 then mt.[UnityFact3] end
								end	
			 when @Unit = 0 then 
								Case when mt.[DefUnity] = 1 then [d].[Price]
									 when mt.[DefUnity] = 2 then [d].[Price] / Case when mt.[UnityFact2] <> 0 then mt.[UnityFact2] end
									 when mt.[DefUnity] = 3 then [d].[Price] / Case when mt.[UnityFact3] <> 0 then mt.[UnityFact3] end
								end	
		end as [Price],*/
		[Price],
		[d].[PurAvgPrice],
		[d].[TotalPrice],		[d].[Bonus],		[d].[DiscountPercent],		[d].[Discount] +						IsNull(						( 						((([d]. [TotalPrice] - [d].[Discount] + [D].[Extra] )* 100)/ 						Case when ([BuItemsTotal] - [BuitemsDiscount] + [BuitemsExtra]) <> 0 then ([BuItemsTotal] - [BuitemsDiscount] + [BuitemsExtra]) end)						* ([BuDiscount]-[BuitemsDiscount]) / 100						)						,0)						,		[d].[ExtraPercent],		[d].[Extra]						+IsNull(						( 						(([d].[TotalPrice] * 100)/ 						Case when ([BuItemsTotal] - [BuitemsDiscount] + [BuitemsExtra]) <> 0 then ([BuItemsTotal] - [BuitemsDiscount] + [BuitemsExtra]) end)						* ([BuExtra] - [BuItemsExtra]) / 100						)						,0)		,				[d].[Note],		[d].[ProductDate],		[d].[ExpireDate],		[d].[Class],		[d].[Length],		[d].[width],		[d].[height],		[d].[Count],		[BuGuid],
		[mt].[Guid] as MatGuid,
		[mt].MatType,
		D.StoreGuid,
		[bu].[buCostGuid],

		[buCustGuid],
		[BuCustAccGuid],
		
		Bu.[BuTypeGuid],
		[buCurrencyGuid],
		[buCurrencyVal],
		[BtInOut],		1,		bu.BtBillKind,		[btPriceEffected]	From 
		[vwbill] Bu
		inner join BillDetail D on d.ParentGuid = buGuid
		inner join vwMat mt on mt.Guid = d.MatGuid
		inner join dbo.#fnGetGroupList G on G.Guid = mt.GroupGuid
		inner join dbo.#fnGetStoreList Sl on Sl.Guid = D.StoreGuid
		inner join [vwStore] [St] on St.Guid = D.StoreGuid
	where
		(d.matGuid = @MatGuid or @MatGuid = 0x0)
		and (
				(d.class = @Class or @Class = '')
				or (bu.buclass = @Class or @Class = '')
			)
			
		and (
				(BuisPosted = 0 and @BillPost = 0)
				or (BuisPosted = 1 and @BillPost = 1)
				or @BillPost = 2
			)
		and ([BuDate] Between @Date1 And @Date2 or @CkDate = 0)
		
	Update #MatMove Set [DisCountPercent] = DisCount * 100 / Case when TotalPrice <> 0 then TotalPrice end
	Update #MatMove Set [ExtraPercent] = Extra * 100 / Case when TotalPrice <> 0 then TotalPrice end
	
	--ÇáãäÇÞáÇÊ
	Select 
		[b].[Number] as [BuNumber], 		[b].[Date] as [BuDate], 		[B].[PayType],		Case when [b].[PayType] = 0 then 'äÞÏÇð' 			 when [b].[PayType] = 1 then 'ÂÌá' 		end COLLATE database_default as [BuPayTypeStr],		[b].[Class] COLLATE database_default as [BuClass], 		[b].[Note] COLLATE database_default as [BuNote], 		Case when b.isPosted = 0 then dbo.SC('ÛíÑ ãÑÍáÉ')
			 when b.isPosted = 1 then dbo.SC('ãÑÍáÉ')
		end COLLATE database_default as [TransPost],
		[t].[Name] COLLATE database_default as [BtName],
		[m].[Name] COLLATE database_default as [MyName],
		[m].[CurrencyVal] as [BuCurrencyVal],

		[b].StoreInGuid,
		[b].StoreOutGuid,
		[b].[CostInGuid],
		[b].[CostoutGuid],
					
		d.Number as BiNumber,		[mt].[Code] COLLATE database_default as MatCode,		[mt].[Name] COLLATE database_default as [MatName],		[mt].[LtnName] COLLATE database_default as [MatltnName],		[mt].[GroupName] COLLATE database_default as [GroupName],		Case when [d].[ItemUnit] = 1 then 'ÇáÃæáì'			 when [d].[ItemUnit] = 2 then 'ÇáËÇäíÉ'			 when [d].[ItemUnit] = 3 then 'ÇáËÇáËÉ'		end COLLATE database_default as [ItemUnitStr],				Case when @Unit = 1 then [d].[Qty]
			 when @Unit = 2 then [d].[Qty2]
			 when @Unit = 3 then [d].[Qty3]
			 when @Unit = 0 then 
								Case when mt.[DefUnity] = 1 then [d].[Qty]
									 when mt.[DefUnity] = 2 then [d].[Qty2]
									 when mt.[DefUnity] = 3 then [d].[Qty3]
								end
		end as [Qty],
		Case when @Unit = 1 then mt.[Unity1]
			 when @Unit = 2 then mt.[Unity2]
			 when @Unit = 3 then mt.[Unity3]
			 when @Unit = 0 then 
								Case when mt.[DefUnity] = 1 then mt.[Unity1]
									 when mt.[DefUnity] = 2 then mt.[Unity2]
									 when mt.[DefUnity] = 3 then mt.[Unity3]
								end	
		end COLLATE database_default as [Unit],
		
		[d].[Qty2],
		mt.[Unity2] COLLATE database_default as [Unity2],
		[d].[Qty3],
		mt.[Unity3] COLLATE database_default as [Unity3],

		Case when @Unit = 1 then [d].[Price]
			 when @Unit = 2 then [d].[Price] / Case when mt.[UnityFact2] <> 0 then mt.[UnityFact2] end
			 when @Unit = 3 then [d].[Price] / Case when mt.[UnityFact3] <> 0 then mt.[UnityFact3] end
			 when @Unit = 0 then 
								Case when mt.[DefUnity] = 1 then [d].[Price]
									 when mt.[DefUnity] = 2 then [d].[Price] / Case when mt.[UnityFact2] <> 0 then mt.[UnityFact2] end
									 when mt.[DefUnity] = 3 then [d].[Price] / Case when mt.[UnityFact3] <> 0 then mt.[UnityFact3] end
								end	
		end as [Price],
		0 as PurAvgPrice,
		[d].[TotalPrice],		[d].[Bonus],		[d].[DiscountPercent],		[d].[Discount],		[d].[ExtraPercent],		[d].[Extra],				[d].[Note] COLLATE database_default as [Note],		[d].[ProductDate],		[d].[ExpireDate],		[d].[Class] COLLATE database_default as [Class],		[d].[Length],		[d].[width],		[d].[height],		[d].[Count],		[B].[Guid] as BuGuid,		[mt].[Guid] as MatGuid,		[mt].MatType,		[b].TypeGuid,		B.CurrencyGuid,		B.CurrencyVal	into #Trans	From 
		[vbTrans] [B]
		inner join TransType [t] on [t].Guid = [b].TypeGuid
		inner join Currency [m] on [m].Guid = [b].CurrencyGuid
		inner join TransDetail D on d.ParentGuid = b.Guid
		inner join vwMat mt on mt.Guid = d.MatGuid
		inner join dbo.#fnGetGroupList G on G.Guid = mt.GroupGuid
	where
		(d.matGuid = @MatGuid or @MatGuid = 0x0)
		and (d.class = @Class or @Class = '')
		and (
				(B.isPosted = 0 and @BillPost = 0)
				or (B.isPosted = 1 and @BillPost = 1)
				or @BillPost = 2
			)
		and ([B].[Date] Between @Date1 And @Date2 or @CkDate = 0)

	
	if @StoreGuid <> 0x0
	begin
		Delete #Trans
		From
			#Trans T
			left join #fnGetStoreList St on (st.Guid = T.[StoreinGuid] or st.Guid = T.[StoreOutGuid])
		where
			St.Guid is null
	end

	
	if @CostGuid <> 0x0
	begin
		Delete #Trans
		From
			#Trans T
			left join #fnGetCostList St on st.Guid = T.[CostinGuid] 
		where
			St.Guid is null

		Delete #Trans
		From
			#Trans T
			left join #fnGetCostList St on st.Guid = T.[CostoutGuid] 
		where
			St.Guid is null
	end

	--ãäÇÞáÉ ÅÏÎÇá
	insert into #MatMove
	Select 
		[Bu].[BuNumber],
		[Bu].[BuDate],
		[Bu].[PayType],
		[Bu].[BuPayTypeStr],
		[Bu].[BuClass],
		[Bu].[BuNote],
		[Bu].[TransPost],
		[Bu].[BtName] +' '+  dbo.SC('ÅÏÎÇá'),
		''  as [CuName],
		''  as [CuPhoneJob],
		''  as [CuMobile],
		''  as [CuAddress],
		[Bu].[MyName],
		[Bu].[BuCurrencyVal],
		''  as [AcCode],
		''  as [AcName],
				
		'' as [StCode],
		'' as [StName],
		'' as [CoCode],
		'' as [CoName],
		biNumber,		[Bu].MatCode,		[Bu].[MatName],		[Bu].[MatltnName],		[Bu].[GroupName],				[Bu].[ItemUnitStr],				[Bu].[Qty],
		[Bu].[Unit],
		
		[bu].[Qty2],
		bu.[Unity2],
		[bu].[Qty3],
		bu.[Unity3],

		[Bu].[Price],
		0 as PurAvgPrice,
		[Bu].[TotalPrice],		[Bu].[Bonus],		[Bu].[DiscountPercent],		[Bu].[Discount],		[Bu].[ExtraPercent],		[Bu].[Extra],				[Bu].[Note],		[Bu].[ProductDate],		[Bu].[ExpireDate],		[Bu].[Class],		[Bu].[Length],		[Bu].[width],		[Bu].[height],		[bu].[Count],		[Bu].[BuGuid],
		[Bu].[MatGuid],
		[bu].MatType,
		Bu.[StoreInGuid],	
		[Bu].[CostinGuid],
		
		0x0 as [BuCustGuid],
		0x0 as [BuCustAccGuid],
		
		TypeGuid,
		CurrencyGuid,		CurrencyVal,		1,		2,		1 as BtBillKind,		0 as [btPriceEffected]			From 
		#Trans Bu
		inner join #fnGetStoreList St on St.Guid = Bu.StoreinGuid

	--ãäÇÞáÉ ÅÎÑÇÌ
	insert into #MatMove
	Select 
		[Bu].[BuNumber],
		[Bu].[BuDate],
		[Bu].[PayType],
		[Bu].[BuPayTypeStr],
		[Bu].[BuClass],
		[Bu].[BuNote],
		[Bu].[TransPost],
		[Bu].[BtName] +' '+  dbo.SC('ÅÎÑÇÌ'),
		''  as [CuName],
		''  as [CuPhoneJob],
		''  as [CuMobile],
		''  as [CuAddress],
		[Bu].[MyName],
		[Bu].[BuCurrencyVal],
		''  as [AcCode],
		''  as [AcName],
				
		'' as [StCode],
		'' as [StName],
		'' as [CoCode],
		'' as [CoName],
		biNumber,		[Bu].MatCode,		[Bu].[MatName],		[Bu].[MatltnName],		[Bu].[GroupName],				[Bu].[ItemUnitStr],				[Bu].[Qty] ,
		[Bu].[Unit],
		
		[bu].[Qty2],
		bu.[Unity2],
		[bu].[Qty3],
		bu.[Unity3],

		[Bu].[Price],
		0 as PurAvgPrice,
		[Bu].[TotalPrice],		[Bu].[Bonus] * -1,		[Bu].[DiscountPercent],		[Bu].[Discount],		[Bu].[ExtraPercent],		[Bu].[Extra],				[Bu].[Note],		[Bu].[ProductDate],		[Bu].[ExpireDate],		[Bu].[Class],		[Bu].[Length],		[Bu].[width],		[Bu].[height],		[bu].[Count],		[Bu].[BuGuid],
		[Bu].[MatGuid],
		[bu].MatType,
		Bu.[StoreOutGuid],	
		[Bu].[CostOutGuid],

		0x0 as [BuCustGuid],
		0x0 as [BuCustAccGuid],
		
		TypeGuid,
		CurrencyGuid,		CurrencyVal,		-1,		2,		-1 as BtBillKind,		0 as [btPriceEffected]			From 
		#Trans Bu
		inner join #fnGetStoreList St on St.Guid = Bu.StoreOutGuid


	--Store
	Update 
		#MatMove
	Set
		StCode = St.Code,
		StName = St.Name
	From
		#MatMove M
		inner join Store St on St.Guid = M.StoreGuid

	--Cost
	Update 
		#MatMove
	Set
		CoCode = Co.Code,
		CoName = Co.Name
	From
		#MatMove M
		inner join Cost Co on Co.Guid = M.CostGuid

	--ÇÎÊáÇÝ ÇáÚãáÉ
	Update 
		#MatMove
	Set
		Price = Price * 
					Case 
						when bu.[CurrencyGuid] = @CurrencyGuid then 1
						else
						bu.buCurrencyval / Case when @Currencyval <> 0 then @Currencyval end
					end,
		TotalPrice = TotalPrice * 
					Case 
						when bu.[CurrencyGuid] = @CurrencyGuid then 1
						else
						bu.buCurrencyval / Case when @Currencyval <> 0 then @Currencyval end
					end,
		Discount = Discount * 
					Case 
						when bu.[CurrencyGuid] = @CurrencyGuid then 1
						else
						bu.buCurrencyval / Case when @Currencyval <> 0 then @Currencyval end
					end,
		Extra = Extra * 
					Case 
						when bu.[CurrencyGuid] = @CurrencyGuid then 1
						else
						bu.buCurrencyval / Case when @Currencyval <> 0 then @Currencyval end
					end,
		[CurrencyGuid] = @CurrencyGuid,
		MyName = (Select Name From vwCurrency where Guid = @CurrencyGuid),
		buCurrencyVal = @CurrencyVal,
		CurrencyVal = @CurrencyVal
	From
		#MatMove bu

	if Exists(Select Top 1 * From sysObjects where Name = 'MatBillsDetail')
	Drop Table [MatBillsDetail]
	
	Select * into MatBillsDetail from #MatMove
	
	--Select * from MatBillsDetail
	

GO
/****** Object:  StoredProcedure [dbo].[PrcMatCardBalance]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcMatCardBalance]
(
	@MatGuid uniqueidentifier = 0x0,
	@StoreGuid uniqueidentifier = 0x0
)
  
as
	--if @MatGuid = 0x0
	--Select Top 1 @MatGuid = Guid from Mat
	
	Select 		st.code +'-'+ st.Name  COLLATE database_default as [Store],		M.[Qty],		Mt.[Unity1] COLLATE database_default as [Unity1],		M.[Qty2],		Mt.[Unity2] COLLATE database_default as [Unity2],		M.[Qty3],		Mt.[Unity3] COLLATE database_default as [Unity3],		0 as Kind	into #MatCardBalance_InvDetailStore1	from 		Matbalance M		inner join Store St on M.storeGuid = St.Guid		inner join [mat] mt on mt.Guid = M.ParentGuid	where		m.ParentGuid = @MatGuid		and (M.StoreGuid  = @StoreGuid or @StoreGuid = 0x0)
	insert into #MatCardBalance_InvDetailStore1
	Select 		dbo.sc('ÇáãÌãæÚ'),		Sum([Qty]),		[Unity1],		Sum([Qty2]),		[Unity2],		Sum([Qty3]),		[Unity3],		1 as Kind	from 		#MatCardBalance_InvDetailStore1	Group By		[Unity1],		[Unity2],		[Unity3]			Select 		* 	from 		#MatCardBalance_InvDetailStore1	Order By 		Kind , Store		

GO
/****** Object:  StoredProcedure [dbo].[PrcMatInventory]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcMatInventory]
(
	@GroupGuid uniqueidentifier = 0x0,
	@MatGuid uniqueidentifier = 0x0,
	@StoreGuid uniqueidentifier = 0x0,
	@CostGuid uniqueidentifier = 0x0,
	@Class Varchar(256) = '',
	@ClassGrouping Bit = 0,
	@Unit int = 0,
	@BillPost int = 2,
	@CkDate Bit = 0,
	
	@PriceMode int = 1,
	@SpecificPrice int = 0,
	
	@CurrencyGuid [uniqueidentifier] = '11111111-C748-4B13-8B91-1E9B299DF1C1',
	@CurrencyVal Float = 1,

	@ShowEmpltyMat Bit= 0,
	@ShowDetailStore Bit= 0,
	@ShowMatTypeStore Bit= 1,
	@ShowMatTypeService Bit= 0,
	
	@Date1 DateTime = '1/1/2007',
	@Date2 DateTime = '1/1/2016',
	
	@RepKind int = 0 --0 Normal		1 Total - 3 OnTable -- 4 LastInventoryVal
)
  
as
	Set nocount on
	exec [dbo].[PrcMatBillsDetail] @GroupGuid ,@MatGuid ,@StoreGuid,@CostGuid,@Class,@Unit,@BillPost,@CurrencyGuid, @CurrencyVal,@CkDate,@Date1,@Date2
	
	Declare @InvValue Float	--Select * from MatBillsDetail

	CREATE TABLE #MatInv
	(
		[MatCode] [varchar](256),
		[MatName] [varchar](256),
		[MatltnName] [varchar](256),
		[GroupName] [varchar](513),
		[StCode] [varchar](256),
		[StName] [varchar](256),
		[Qty] [float],
		[Unit] [varchar](256),
		[Qty2] [float],
		[Unity2] [varchar](256),
		[Qty3] [float],
		[Unity3] [varchar](256),
		[Price] [float],
		[BtInOut] [int],
		[Class] [varchar](256),
		[MatGuid] [uniqueidentifier],
		[StoreGuid] [uniqueidentifier]
	)

	insert into #MatInv
	Select 
		[MatCode],		[MatName],		[MatltnName],		[GroupName],		[StCode],		[StName],		[Qty],
		[Unit],
		[Qty2],		[Unity2],		[Qty3],		[Unity3],		[Price]	*
			Case when [CurrencyGuid] = @CurrencyGuid then 1 
			else [CurrencyVal] / @CurrencyVal end
		as [Price],
		BtInOut,
		[Class],		[MatGuid],		StoreGuid	From 
		MatBillsDetail
	where
		(
				((MatType = 0 or MatType = -1) and @ShowMatTypeStore = 1)
				or (MatType = 1  and @ShowMatTypeService = 1)
		)
		
	
	
	--ÇáÊÓÚíÑ
	Select	Distinct
		v.MatGuid,
		mt.[DefUnity]
	into #MatDis
	From	
		#MatInv v
		inner join Mat mt on v.matGuid = mt.Guid
		
	Create Table #MatPrice
	(
		[MatGuid] uniqueidentifier,
		[Price] Float
	)
	
	if @PriceMode = 0 or @PriceMode = 1 or @PriceMode = 2
	begin
		Insert into #MatPrice
		Select
			D.Guid,
			Case 
				when @PriceMode = 0 then D.[MaxPrice]
				when @PriceMode = 1 then D.AvgPrice
				when @PriceMode = 2 then D.LastPrice
			end as [Price]
		From
			mat as D
			inner join #MatDis Mt on Mt.MatGuid = D.Guid
	end
	
	if @PriceMode = 3
	begin
		Insert into #MatPrice
		Select
			mt.MatGuid,
			Case 
				when @PriceMode = 3 then 
											Case when @Unit = 1 then p.Price1
												 when @Unit = 2 then p.Price2
												 when @Unit = 3 then p.Price3
												 when @Unit = 0 then 
																	Case when mt.[DefUnity] = 1 then p.Price1
																		 when mt.[DefUnity] = 2 then p.Price2
																		 when mt.[DefUnity] = 3 then p.Price3
																	end
											end
			end as [Price]
		From
			#MatDis Mt 
			left join [MatUnitsPrice] P on p.matGuid = mt.MatGuid and p.Number = @SpecificPrice + 1
	end
	
	Select 
		[MatCode],		[MatName],		[MatltnName],		[GroupName],		case when @ShowDetailStore = 0 then '' else [StCode] end as [StCode],		case when @ShowDetailStore = 0 then '' else [StName] end as [StName],		Sum([Qty] * [BtInOut]) as [Qty],
		[Unit],
		Sum([Qty2] * BtInOut) as [Qty2],		[Unity2],		Sum([Qty3] * BtInOut) as [Qty3],		[Unity3],		(Select Price From #MatPrice where MatGuid = mt.matGuid) as [Price],		Sum([Qty] * BtInOut) * (Select Top 1 Price From #MatPrice where MatGuid = mt.matGuid) as [TotalPrice],		Case when @ClassGrouping = 0 then '' else [Class] end as [Class],		[MatGuid],		case when @ShowDetailStore = 0 then 0x0 else [StoreGuid] end as [StoreGuid],		0 as Kind	into #Tmp_Inv	from 
		#MatInv Mt
	Group By
		MatCode,		[MatName],		[MatltnName],		[GroupName],		case when @ShowDetailStore = 0 then '' else [StCode] end,		case when @ShowDetailStore = 0 then '' else [StName] end,		case when @ShowDetailStore = 0 then 0x0 else [StoreGuid] end,		[Unit],
		[Unity2],		[Unity3],		Case when @ClassGrouping = 0 then '' else [Class] end,		[MatGuid]	having 
		(Sum([Qty] * BtInOut) <> 0 or @ShowEmpltyMat = 1)


	if @RepKind = 3
	begin
			Select
				*
			From
				#Tmp_Inv
			Order By
				MatCode, StCode	end

	if @RepKind = 4
	begin
		Select
			Sum(TotalPrice) as [Value]
		From
			#Tmp_Inv	end

		
	if @RepKind = 0
	begin
		
		Select 
			[MatCode],			[MatName],			[MatltnName],			[GroupName],			case when @ShowDetailStore = 0 then '' else [StCode] end as [StCode],			case when @ShowDetailStore = 0 then '' else [StName] end as [StName],			Sum([Qty] * [BtInOut]) as [Qty],
			[Unit],
			Sum([Qty2] * BtInOut) as [Qty2],			[Unity2],			Sum([Qty3] * BtInOut) as [Qty3],			[Unity3],			(Select Price From #MatPrice where MatGuid = mt.matGuid) as [Price],			0 as BtInOut,			Case when @ClassGrouping = 0 then '' else [Class] end as [Class],			[MatGuid],			case when @ShowDetailStore = 0 then 0x0 else [StoreGuid] end as [StoreGuid],			Sum([Qty] * BtInOut) * (Select Top 1 Price From #MatPrice where MatGuid = mt.matGuid) as [TotalPrice],			case when @ShowDetailStore = 0 then '' else [StCode] end as [SortCode],			0 as Kind		into #Tmp_Inv0
		from 
			#MatInv Mt
		Group By
			MatCode,			[MatName],			[MatltnName],			[GroupName],			case when @ShowDetailStore = 0 then '' else [StCode] end,			case when @ShowDetailStore = 0 then '' else [StName] end,			case when @ShowDetailStore = 0 then 0x0 else [StoreGuid] end,			[Unit],
			[Unity2],			[Unity3],			Case when @ClassGrouping = 0 then '' else [Class] end,			[MatGuid]		having 
			(Sum([Qty] * BtInOut) <> 0 or @ShowEmpltyMat = 1)
	
		insert into #Tmp_Inv0
		Select 
			dbo.SC('ÇáãÌãæÚ') as [MatCode],			dbo.SC('ÇáãÌãæÚ') as [MatName],			'' as [MatltnName],			'' as [GroupName],			case when @ShowDetailStore = 0 then '' else [StCode] end as [StCode],			case when @ShowDetailStore = 0 then '' else [StName] end as [StName],			Sum([Qty] ) as [Qty],
			'' as [Unit],
			Sum([Qty2]) as [Qty2],			'' as [Unity2],			Sum([Qty3]) as [Qty3],			'' as [Unity3],			Null as [Price],			0 as BtInOut,			'' as [Class],			0x0 [MatGuid],			case when @ShowDetailStore = 0 then 0x0 else [StoreGuid] end as [StoreGuid],			Sum([TotalPrice]) as [TotalPrice],			case when @ShowDetailStore = 0 then '' else [StCode] end as [SortCode],			1 as Kind		from 
			#Tmp_Inv0 Mt
		Group By
			case when @ShowDetailStore = 0 then '' else [StCode] end,			case when @ShowDetailStore = 0 then '' else [StName] end,			case when @ShowDetailStore = 0 then 0x0 else [StoreGuid] end		insert into #Tmp_Inv0
		Select 
			dbo.SC('ÇáãÌãæÚ Çáßáí') as [MatCode],			dbo.SC('ÇáãÌãæÚ Çáßáí') as [MatName],			'' as [MatltnName],			'' as [GroupName],			'' as [StCode],			'' as [StName],			Sum([Qty] ) as [Qty],
			'' as [Unit],
			Sum([Qty2]) as [Qty2],			'' as [Unity2],			Sum([Qty3]) as [Qty3],			'' as [Unity3],			Null as [Price],			0 as BtInOut,			'' as [Class],			0x0 [MatGuid],			0x0 as [StoreGuid],			Sum([TotalPrice]) as [TotalPrice],			'' as [SortCode],			2 as Kind		from 
			#Tmp_Inv0 Mt
		where
			Kind = 0
		Select	* From	#Tmp_Inv0 		Order By				Case when Kind = 2 then 1 else 0 end,			SortCode , Kind ,MatCode
	
	end			
	---ÅäÔÇÁ ÞíÏ ÈÖÇÚÉ ÂÎÑ ÇáãÏÉ	
	Select
		@InvValue = Sum(TotalPrice)
	From
		#Tmp_Inv	
	if @RepKind = 1 and (IsNull(@InvValue,0) <> 0)	begin		
		Delete HEntry where Guid = '{19191919-8282-7373-6464-656565656566}'		
		Declare @InvGuid uniqueidentifier		
		Set @InvGuid = '{19191919-8282-7373-6464-656565656566}'		
		Declare @AcLastInvenrotyGuid uniqueidentifier, 
				@AcLastInvenrotyGuid2 uniqueidentifier				
			Set @AcLastInvenrotyGuid = 
			(Select Top 1 Value From DMD_Const where VName = 'AcLastInvenrotyGuid')		
			Declare @Ms Varchar(255)
			Set @Ms = dbo.SC('ÃÏÎá ÍÓÇÈ ÈÖÇÚÉ ÂÎÑ ÇáãÏÉ Ýí ÇÚÏÇÏÇÊ ÇáÈÑäÇãÌ')
			if IsNull(@AcLastInvenrotyGuid,0x0) = 0x0
			begin
				RAISERROR (@Ms, 16, 1)
				return
			end
			Set @AcLastInvenrotyGuid2 = (Select Top 1 Value From DMD_Const where VName = 'AcLastInvenrotyGuid2')			Set @Ms = dbo.SC('ÃÏÎá ÍÓÇÈ ÈÖÇÚÉ ÂÎÑ ÇáãÏÉ Ýí ÇÚÏÇÏÇÊ ÇáÈÑäÇãÌ')
			if IsNull(@AcLastInvenrotyGuid2,0x0) = 0x0
			begin
				RAISERROR (@Ms, 16, 1)
				return
			end
				if (isNull(@AcLastInvenrotyGuid,0x0) <> 0x0 ) and (isNull(@InvValue,0) <> 0)		begin			Insert into HEntry			([Guid] ,[Number],[SecLvl],[Date],[CurrencyGuid],[CurrencyVal],[Note],[ParentKind],[UserGuid],[BranchGuid],[IsPosted])			Select				@InvGuid as [Guid] 				,Null				,5				,GetDate()-1 [Date]				,@CurrencyGuid as [CurrencyGuid]				,@CurrencyVal as [CurrencyVal]				,dbo.SC('ÈÖÇÚÉ ÂÎÑ ÇáãÏÉ') as [Note]				,0 as [ParentKind]				,Null as [UserGuid]				,Null as [BranchGuid]				,1 as [IsPosted]							insert into Dentry			([Number],[ParentGuid],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[ObverseAcGuid],[CostGuid],[Note],[IsVisible])
			Select
				1 as [Number],
				@InvGuid as [ParentGuid]
				,@AcLastInvenrotyGuid as [AcGuid]
				,Case when @InvValue < 0 then -@InvValue else 0 end [Debit]
				,Case when @InvValue > 0 then @InvValue else 0 end [Credit]
				,@CurrencyGuid as [CurrencyGuid]
				,@CurrencyVal as [CurrencyVal]
				,Null as [ObverseAcGuid]
				,Null as [CostGuid]
				,'' as [Note]
				,1 as [IsVisible]
				
			-- ÇáãÎÒæä
			insert into Dentry			([Number],[ParentGuid],[AcGuid],[Debit],[Credit],[CurrencyGuid],[CurrencyVal],[ObverseAcGuid],[CostGuid],[Note],[IsVisible])
			Select
				2 as [Number],
				@InvGuid as [ParentGuid]
				,@AcLastInvenrotyGuid2 as [AcGuid]
				,Case when @InvValue > 0 then @InvValue else 0 end [Debit]
				,Case when @InvValue < 0 then -@InvValue else 0 end [Credit]
				,@CurrencyGuid as [CurrencyGuid]
				,@CurrencyVal as [CurrencyVal]
				,Null as [ObverseAcGuid]
				,Null as [CostGuid]
				,'' as [Note]
				,1 as [IsVisible]
		end		--Select * from DEntry where ParentGuid = @InvGuid
	end		

GO
/****** Object:  StoredProcedure [dbo].[PrcMatMove]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcMatMove]
(
	@GroupGuid uniqueidentifier = 0x0,
	@MatGuid uniqueidentifier = 0x0,
 	@StoreGuid uniqueidentifier = 0x0,
	@CostGuid uniqueidentifier = 0x0,
	@Class Varchar(256) = '',
	@Unit int = 0,
	@BillPost int = 2,
	@ActiveNote Bit = 0,
	@OperationNote int = 0,
	@Note Varchar(256) = '',

	@CurrencyGuid uniqueidentifier = 0x0,
	@CurrencyVal Float = 1,
	@NegativeOnly bit = 0,
	@CkDate Bit = 0,
	@Date1 DateTime = '1/1/2007',
	@Date2 DateTime = '1/1/2017'
)
  
as
	if [dbo].[fnIsSQL2005]() = 0 
	begin
		Declare @Ms varchar(255)
		Set @Ms = dbo.SC('íÌÈ ÇáÚãá Úáì äÓÎÉ sql 2008 ÝãÇ ÝæÞ')
		RAISERROR (@Ms, 16, 1)
		return
	end
	
	Set nocount on
	exec [dbo].[PrcMatBillsDetail] @GroupGuid ,@MatGuid ,@StoreGuid,@CostGuid,@Class,@Unit,@BillPost,@CurrencyGuid, @Currencyval, @CkDate,@Date1,@Date2	

	--Select * from MatBillsDetail
	
	
	--ãÚÇáÌÉ ÈíÇä ÇáÔíß
	if @OperationNote = 0 --íÍæí
	Set @Note = '%'+@Note+'%'
	
	Select 
		[Bu].[BuNumber],
		[Bu].[BiNumber],
		[Bu].[BuDate],
		[Bu].MatCode,		[Bu].[MatName],		Case when BtInOut = 1 then  [Bu].[Qty] else 0 end AS QtyIn,
		Case when BtInOut = -1 then  [Bu].[Qty] else 0 end AS QtyOut,
		[Bu].[Price],
		[Bu].[TotalPrice],		[Bu].StoreGuid,
		[Bu].[BtInOut],		Bu.Kind,		bu.BtBillKind,
		[Bu].[BuPayTypeStr],
		[Bu].[BuClass],
		[Bu].[BuNote],
		[Bu].[BillPost],
		[Bu].[BtName],
		[Bu].[CuName],
		[Bu].[CuPhoneJob],
		[Bu].[CuMobile],
		[Bu].[CuAddress],
		[Bu].[MyName],
		[Bu].[BuCurrencyVal],
		[Bu].[AcCode],
		[Bu].[AcName],
				
		[Bu].[StCode],
		[Bu].[StName],
		[Bu].[CoCode],
		[Bu].[CoName],
		[Bu].[MatltnName],		[Bu].[GroupName],				[Bu].[ItemUnitStr],				[Bu].[Unit],
		[Bu].[Bonus],		[Bu].[DiscountPercent],		[Bu].[Discount],		[Bu].[ExtraPercent],		[Bu].[Extra],		[Bu].[Note],		[Bu].[ProductDate],		[Bu].[ExpireDate],		[Bu].[Class],		[Bu].[Length],		[Bu].[width],		[Bu].[height],		[Bu].[Count],		[Bu].[BuGuid],
		[Bu].[CostGuid],
		Cast(0 as Float) as AvgPrice,
		[Bu].matGuid
	into #MatMove
	From
		MatBillsDetail Bu		
		inner join vwMat mt on mt.Guid = bu.MatGuid
		inner join [Resource] [R] on R.Guid = Bu.TypeGuid and R.Spid = @@Spid and (btInOut = isNull(R.Tag, 0) or isNull(R.Tag, 0) = 0)
	where
 		(
 				([Bu].[BuNote] Like @Note)
 				or ([Bu].[Note] Like @Note)
 				or @ActiveNote = 0
 			)
	
	
	Create Table #AvgPriceTbl 
	(	
		[BuDate] Datetime,
		[BuNumber] int,
		[BiNumber] int,
		[matGuid] uniqueidentifier,
		[BuGuid] uniqueidentifier,
		[AvgPrice] Float
	)

	
	insert into #AvgPriceTbl
	exec PrcCalcAvgPrice @GroupGuid,
						 @MatGuid,
 						 @StoreGuid,
						 @CostGuid,
						 @Class,
						 @Unit,
						 @BillPost,
						 @CurrencyGuid,
						 @CurrencyVal,
						 @CkDate,
						 @Date1,
						 @Date2,
						 1 --@ShowResult 
	
	--return
	--Select * from #AvgPriceTbl return
	
	CREATE CLUSTERED INDEX #IXMATMOVE ON #MatMove([budate], [BuNumber], [MatCode])

	Alter Table #MatMove add id int identity(1,1)
	
	Update #MatMove Set AvgPrice = P.AvgPrice
	From
		#MatMove M
		inner join #AvgPriceTbl P on P.BuGuid = M.[BuGuid]
								and  P.BiNumber = M.BiNumber
								and  P.MatGuid = M.MatGuid
	

	if @NegativeOnly = 1
	begin
		Select 
			* 
			,(Select Sum(QtyIn - QtyOut) From #MatMove m2 
				where 
					m.id >= m2.id 
					and m.MatCode = m2.MatCode
					and m.StoreGuid = m2.StoreGuid
			) as [Balance]
			,Case when ([btInOut] = -1) and (Kind <> 2) then ([TotalPrice] - Discount + Extra) - (avgPrice * (QtyIn - QtyOut)) end AS Profit
		into #ResMatMove
		from 
			#MatMove m
		Order By
			[budate], Kind, [btInOut] * -1 , [BuNumber], [MatCode]
		Select		
			*
		From
			#ResMatMove
		where
			[Balance] < 0
		Order By
			[budate], Kind, [btInOut] * -1 , [BuNumber], [MatCode]	end
	else
		Select 
			* 
			,(Select Sum(QtyIn - QtyOut) From #MatMove m2 
				where 
					m.id >= m2.id 
					and m.MatCode = m2.MatCode
					and m.StoreGuid = m2.StoreGuid
			) as [Balance]
			,Case when ([btInOut] = -1) and (Kind <> 2) then ([TotalPrice] - Discount + Extra) - (avgPrice * (QtyOut - QtyIn )) end AS Profit
		from 
			#MatMove m
		Order By
			[budate], Kind, [btInOut] * -1 , [BuNumber], [MatCode]	

GO
/****** Object:  StoredProcedure [dbo].[PrcMatProfitt]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcMatProfitt]
(
	@MatGuid uniqueidentifier = 0x0,
	@GroupGuid uniqueidentifier = 0x0,
	@StoreGuid uniqueidentifier = 0x0,
	@CostGuid uniqueidentifier = 0x0,
	@Class varchar(255) = '',
	@Unit int = 2,
	@BillPost int = 2,

	@CurrencyGuid uniqueidentifier = 0x0,
	@CurrencyVal Float = 1,
	@PriceMode int = 0,
	@SpecificPrice int = 0,
	@TotalOnly bit = 0,
	@ActiveDate bit = 0,
	@Date1 DateTime = '1/1/2007',
	@Date2 DateTime = '1/1/2016'
)
  
as
	exec [dbo].[PrcMatBillsDetail] @GroupGuid ,@MatGuid ,@StoreGuid,@CostGuid,@Class,@Unit,@BillPost,@CurrencyGuid, @Currencyval, @ActiveDate,@Date1,@Date2	
	
	Create Table #MatPrice
	(
		[MatGuid] uniqueidentifier,
		[Price] Float
	)
	
	insert into #MatPrice
	Select F.[MatGuid], Price 
	from 
		dbo.[FnMatPrice] (@CurrencyGuid, @Currencyval, @unit,@PriceMode, @SpecificPrice) F

	--Select * from #MatPrice

	Select 
		BuNumber,
		Bu.BuDate,
		bu.BuPayTypeStr,
		Bu.BtName COLLATE database_default as [BtName],
		bu.GroupName COLLATE database_default as [GroupName],
		MatCode COLLATE database_default as [MatCode],
		Bu.MatName COLLATE database_default as [MatName],
		Bu.Qty * -[BtInOut] as Qty,
		bu.Unit COLLATE database_default as [Unit],
		pr.Price * -[BtInOut] as CostPrice,
		Bu.Qty * pr.Price * -[BtInOut] as TotalCostPrice,
		Bu.Price * -[BtInOut] as Price,
		Bu.Qty * Bu.Price * -[BtInOut] as TotalPrice,
		(isNull(Bu.Price,0) - isNull(pr.Price,0)) * -[BtInOut]  as [Profitt],
		(isNull(Bu.Price,0) - isNull(pr.Price,0)) * Bu.Qty * -[BtInOut] as [TotalProfitt],
		MyName COLLATE database_default as [MyName],
		BuCurrencyVal,
		bu.BuNote COLLATE database_default as [BuNote],
		bu.Note COLLATE database_default as [Note],
		bu.BillPost,
		bu.cuName COLLATE database_default as [cuName],
		StCode COLLATE database_default as [StCode],
		bu.StName COLLATE database_default as [StName],
		BuClass COLLATE database_default as [BuClass],
		AcCode COLLATE database_default as [AcCode],
		AcName COLLATE database_default as [AcName],
		CoCode COLLATE database_default as [CoCode],
		CoName COLLATE database_default as [CoName],
		Bu.Class COLLATE database_default as [Class],
		bu.MatGuid,
		Bu.BuGuid,
		Bu.Kind,
		MatCode COLLATE database_default as SortMatCode,
		[BtInOut],
		0 as [SortTag]
	into #MatProfitt
	from 
		[MatBillsDetail] bu
		inner join [Resource] [R] on R.Guid = Bu.TypeGuid and R.Spid = @@Spid 
		left join  #MatPrice pr on pr.MatGuid = bu.MatGuid
	
	insert into #MatProfitt
	([GroupName],[MatName] ,[Qty],CostPrice, TotalCostPrice,Price,[TotalPrice],[TotalProfitt], [SortTag], [Profitt],MatGuid,SortMatCode)
	Select
		dbo.sc('ÇáãÌãæÚ') as [GroupName],
		[MatName],
		SUM(Qty),
		Sum((TotalCostPrice))/ Case when SUM(Qty) <> 0 then SUM(Qty) end as CostPrice,
		Sum(TotalCostPrice ),
		Sum(TotalPrice) / Case when SUM(Qty) <> 0 then SUM(Qty) end as Price,
		Sum([TotalPrice]),
		SUM([TotalProfitt]),
		1,
		Sum([TotalProfitt]) / Case when SUM(Qty) <> 0 then SUM(Qty) end as [Profitt],
		MatGuid,
		SortMatCode
	from
		#MatProfitt
	Group By
		[MatName],MatGuid, SortMatCode
		
	
	insert into #MatProfitt
	([GroupName],[MatName] ,TotalCostPrice,[TotalPrice],[TotalProfitt], [SortTag], [Profitt])
	Select
		dbo.sc('ÇáãÌãæÚ') as [GroupName],
		'',
		Sum(TotalCostPrice) ,
		Sum([TotalPrice]),
		SUM([TotalProfitt]),
		2,
		Sum([TotalProfitt]) / Case when SUM(Qty) <> 0 then SUM(Qty) end as [Profitt]
	from
		#MatProfitt
	where
		[SortTag] = 0
		
	Select
		*
	from
		#MatProfitt
	where
		[SortTag] <> 0 and @TotalOnly = 1 or @TotalOnly = 0
	order by
		Case when SortMatCode is Null then 1 else 0 end ,SortMatCode ,[SortTag], BuDate, BuNumber 
		
		

GO
/****** Object:  StoredProcedure [dbo].[PrcMatTotalMove]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcMatTotalMove]
(
	@GroupGuid uniqueidentifier = 0x0,
	@MatGuid uniqueidentifier = 0x0,
 	@StoreGuid uniqueidentifier = 0x0,
	@CostGuid uniqueidentifier = 0x0,
	@Class Varchar(256) = '',
	@Unit int = 0,
	@BillPost int = 2,
	@ActiveNote Bit = 0,
	@OperationNote int = 0,
	@Note Varchar(256) = '',

	@CurrencyGuid uniqueidentifier = 0x0,
	@CurrencyVal Float = 1,

	@CkDate Bit = 0,
	@Date1 DateTime = '1/1/2007',
	@Date2 DateTime = '1/1/2017'
)
  
as
	if [dbo].[fnIsSQL2005]() = 0 
	begin
		Declare @Ms varchar(255)
		Set @Ms = dbo.SC('íÌÈ ÇáÚãá Úáì äÓÎÉ sql 2008 ÝãÇ ÝæÞ')
		RAISERROR (@Ms, 16, 1)
		return
	end
	
	Set nocount on

	exec PrcCalcAvgPrice @GroupGuid,
						 @MatGuid,
 						 @StoreGuid,
						 @CostGuid,
						 @Class,
						 @Unit,
						 @BillPost,
						 @CurrencyGuid,
						 @CurrencyVal,
						 @CkDate,
						 @Date1,
						 @Date2,
						 0 --@ShowResult

	exec [dbo].[PrcMatBillsDetail] @GroupGuid ,@MatGuid ,@StoreGuid,@CostGuid,@Class,@Unit,@BillPost,@CurrencyGuid, @Currencyval, @CkDate,@Date1,@Date2	

	--Select * from MatBillsDetail
	
	
	--ãÚÇáÌÉ ÈíÇä ÇáÔíß
	if @OperationNote = 0 --íÍæí
	Set @Note = '%'+@Note+'%'
	
	Select 
		[Bu].MatCode,		[Bu].[MatName],		[Bu].[MatLtnName],		[Bu].[GroupName],		[Bu].Unit,		[Bu].unity2,		[Bu].unity3,		Sum(Case when BtInOut = 1 then  [Bu].[Qty] else 0 end) AS QtyIn,
		Sum(Case when BtInOut = 1 then  [Bu].[Qty2] else 0 end) AS QtyIn2,
		Sum(Case when BtInOut = 1 then  [Bu].[Qty3] else 0 end) AS QtyIn3,
		Sum(Case when BtInOut = 1 then  [Bu].[TotalPrice] else 0 end) AS [TotalPriceIn],
		Sum(Case when BtInOut = 1 then  [Bu].[Bonus] else 0 end) AS [BonusIn],
		Sum(Case when BtInOut = 1 then  [Bu].[Discount] else 0 end) AS [DiscountIn],
		Sum(Case when BtInOut = 1 then  [Bu].[Extra] else 0 end) AS [ExtraIn],

		Sum(Case when BtInOut = -1 then  [Bu].[Qty] else 0 end) AS QtyOut,
		Sum(Case when BtInOut = -1 then  [Bu].[Qty2] else 0 end) AS QtyOut2,
		Sum(Case when BtInOut = -1 then  [Bu].[Qty3] else 0 end) AS QtyOut3,
		Sum(Case when BtInOut = -1 then  [Bu].[TotalPrice] else 0 end) AS [TotalPriceOut],
		Sum(Case when BtInOut = -1 then  [Bu].[Bonus] else 0 end) AS [BonusOut],
		Sum(Case when BtInOut = -1 then  [Bu].[Discount] else 0 end) AS [DiscountOut],
		Sum(Case when BtInOut = -1 then  [Bu].[Extra] else 0 end) AS [ExtraOut],

		[Bu].matGuid
	into #MatTotalMove
	From
		MatBillsDetail Bu		
		inner join vwMat mt on mt.Guid = bu.MatGuid
		inner join [Resource] [R] on R.Guid = Bu.TypeGuid and R.Spid = @@Spid and (btInOut = isNull(R.Tag, 0) or isNull(R.Tag, 0) = 0)
	where
 		(
 				([Bu].[BuNote] Like @Note)
 				or ([Bu].[Note] Like @Note)
 				or @ActiveNote = 0
 			)
	Group By
		[Bu].MatCode,		[Bu].[MatName],		[Bu].[MatLtnName],		[Bu].[GroupName],		[Bu].Unit,		[Bu].unity2,		[Bu].unity3,		[Bu].matGuid	
	Select 
		* 
		,
		isNull(QtyIn,0) - isNull(QtyOut,0) as QtyDiff,
		isNull(QtyIn2,0) - isNull(QtyOut2,0) as Qty2Diff,
		isNull(QtyIn3,0) - isNull(QtyOut3,0) as Qty3Diff,
		isNull([TotalPriceIn],0) - isNull([TotalPriceOut],0) as [TotalPriceDiff],
		isNull(BonusIn,0) - isNull(BonusOut,0) as [BonusDiff],
		isNull(DiscountIn,0) - isNull(DiscountOut,0) as [DiscountDiff],
		isNull(ExtraIn,0) - isNull(ExtraOut,0) as [ExtraDiff]
	
	from 
		#MatTotalMove
	order by 
		MatCode
	
	
	--Res2
	Select
		Bu.btName,
		Sum(TotalPrice) as TotalPrice,
		Sum(Case when BuPayType = 1 then TotalPrice else 0 end) as TotalPricePay1,
		Sum(Case when BuPayType = 0 then TotalPrice else 0 end) as TotalPricePay0,
		Sum(Qty) as Qty,
		Sum(Qty2) as Qty2,
		Sum(Qty3) as Qty3,
		Sum(Bonus) as Bonus,
		Sum(Discount) as Discount,
		Sum(Extra) as Extra,
		BtInOut,
		0 as Kind
		into #MatTotalMoveSum
	From
		MatBillsDetail Bu		
		inner join vwMat mt on mt.Guid = bu.MatGuid
		inner join [Resource] [R] on R.Guid = Bu.TypeGuid and R.Spid = @@Spid and (btInOut = isNull(R.Tag, 0) or isNull(R.Tag, 0) = 0)
	where
 		(
 				([Bu].[BuNote] Like @Note)
 				or ([Bu].[Note] Like @Note)
 				or @ActiveNote = 0
 			)
	Group By
		BtInOut,
		Bu.btName
		
	insert into #MatTotalMoveSum
	Select
		dbo.SC('ÇáãÌãæÚ'),
		Sum(TotalPrice * BtInOut) as TotalPrice,
		Sum(TotalPricePay1 * BtInOut),
		Sum(TotalPricePay0 * BtInOut),
		Sum(Qty * BtInOut) as Qty,
		Sum(Qty2 * BtInOut) as Qty2,
		Sum(Qty3 * BtInOut) as Qty3,
		Sum(Bonus * BtInOut) as Bonus,
		Sum(Discount) as Discount,
		Sum(Extra) as Extra,
		0 as  BtInOut,
		1 as Kind
	From
		#MatTotalMoveSum
		
	Select * from #MatTotalMoveSum
	Order by Kind
		
		

GO
/****** Object:  StoredProcedure [dbo].[PrcNewContract]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcNewContract]
(
	@Guid uniqueidentifier = 0x0
)
  
as
	Select
		(Select Isnull(Max([Number]),0) + 1 From [LeaseApartment]) as [Number],
		[Guid],
		[ContractNo],
		[CustomerGuid],
		[BuildingGuid],
		[ApartmentGuid],
		[ShopGuid],
		[ApartmentType],
		[Period],
		Case 
			when [ContractFinish] = 0 then Dateadd(Day,1,[ToDate]) 
			when [ContractFinish] = 1 then Dateadd(Day,1,[ContractFinishDate]) 
		end as [FromDate],
		Dateadd(year,1,
						Case 
							when [ContractFinish] = 0 then [ToDate]
							when [ContractFinish] = 1 then [ContractFinishDate]
						end
				) as [ToDate],
		[Rent]+ISNULL(AddValue,0) as [Rent],
		[CurrencyGuid],
		[CurrencyVal],
		[PayType],
		[Note],
		[Note2],
		[Purpose],
		[LeaseKind],
		[RevenueAccountGuid],
		[CustAccountGuid],
		case when SUBSTRING([OpNewContract], 4, 1) = '1' then [CommissionFromCustPercent] else 0 end [CommissionFromCustPercent],
		case when SUBSTRING([OpNewContract], 4, 1) = '1' then [CommissionFromCustValue] else 0 end as [CommissionFromCustValue],
		[AcCommissionFromCustGuid],
		case when SUBSTRING([OpNewContract], 5, 1) = '1' then [CommissionFromOwnerPercent] else 0 end [CommissionFromOwnerPercent],
		case when SUBSTRING([OpNewContract], 5, 1) = '1' then [CommissionFromOwnerValue] else 0 end [CommissionFromOwnerValue],
		[AcCommissionFromOwnerGuid],
		[FlatOwner],
		Cast( 0 as bit) as [ContractFinish],
		Cast( Null as DateTime)  as [ContractFinishDate],
		0 as [ResultingAmount],
		0 as [ResultingAmount2],
		[RoundKind],
		0 as [Fine],
		[FineAccount],
		Cast( 0 as bit) as [CreateResultingEntry],
	
		0 as [InsuranceValue],
		[InsuranceValue] + Isnull([InsuranceValueOld],0) as [InsuranceValueOld],
		case when SUBSTRING([OpNewContract], 1, 1) = '1' then [ContractPrice] else 0 end as [ContractPrice], 
		[AccountContractPrice],
		case when SUBSTRING([OpNewContract], 2, 1) = '1' then [CertificatValue] else 0 end [CertificatValue],
		case when SUBSTRING([OpNewContract], 3, 1) = '1' then [OtherFee] else 0 end OtherFee,
		[AccountCertificatValue],

		[RentDuration],
		[Rentype],
		[TermsOfPayment],
		[RentInfoGuid],
		[SalesManGuid],
		[ResidentCount],
		[whereabouts],
		[CountOldContract],
		[CostGuid],
		[BranchGuid],
		[FlatArea],
		[FlatAreaunity],
		IsAutoRenewal
	From
		[vwLeaseApartment]
	where
		[Guid] = @Guid Or @Guid = 0x0


GO
/****** Object:  StoredProcedure [dbo].[PrcNewContractParking]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcNewContractParking]
(
	@Guid uniqueidentifier = 0x0
)
  
as
	Select
		(Select Isnull(Max([Number]),0) + 1 From [LeaseApartment]) as [Number],
		[Guid],
		[ContractNo],
		[CustomerGuid],
		[BuildingGuid],
		[ParkingGuid],
		[Period],
		Case 
			when [ContractFinish] = 0 then Dateadd(Day,1,[ToDate]) 
			when [ContractFinish] = 1 then Dateadd(Day,1,[ContractFinishDate]) 
		end as [FromDate],
		Dateadd(year,1,
						Case 
							when [ContractFinish] = 0 then [ToDate]
							when [ContractFinish] = 1 then [ContractFinishDate]
						end
				) as [ToDate],
		[Rent]+ISNULL(AddValue,0) as [Rent],
		[CurrencyGuid],
		[CurrencyVal],
		[PayType],
		[Note],
		[Note2],
		[ContractKind],
		[RevenueAccountGuid],
		[CustAccountGuid],
		case when SUBSTRING([OpNewContract], 4, 1) = '1' then [CommissionFromCustPercent] else 0 end [CommissionFromCustPercent],
		case when SUBSTRING([OpNewContract], 4, 1) = '1' then [CommissionFromCustValue] else 0 end as [CommissionFromCustValue],
		[AcCommissionFromCustGuid],
		case when SUBSTRING([OpNewContract], 5, 1) = '1' then [CommissionFromOwnerPercent] else 0 end [CommissionFromOwnerPercent],
		case when SUBSTRING([OpNewContract], 5, 1) = '1' then [CommissionFromOwnerValue] else 0 end [CommissionFromOwnerValue],
		[AcCommissionFromOwnerGuid],
		[FlatOwner],
		Cast( 0 as bit) as [ContractFinish],
		Cast( Null as DateTime)  as [ContractFinishDate],
		0 as [ResultingAmount],
		0 as [Fine],
		[FineAccount],
		Cast( 0 as bit) as [CreateResultingEntry],
	
		0 as [InsuranceValue],
		[InsuranceValue] + Isnull([InsuranceValueOld],0) as [InsuranceValueOld],
		case when SUBSTRING([OpNewContract], 1, 1) = '1' then [ContractPrice] else 0 end as [ContractPrice], 
		[AccountContractPrice],
		case when SUBSTRING([OpNewContract], 2, 1) = '1' then [CertificatValue] else 0 end [CertificatValue],

		[AccountCertificatValue],

		[RentDuration],
		[Rentype],
		[TermsOfPayment],
		[RentInfoGuid],
		[SalesManGuid],
		[BranchGuid],
		[CardNo],
		[CarNo],
		[CarColor],
		[CarType],
		[Emirate],
		[CostGuid],
		[FlatContractGuid] ,
		IsAutoRenewal
	From
		[vwParkingContract]
	where
		[Guid] = @Guid Or @Guid = 0x0


GO
/****** Object:  StoredProcedure [dbo].[PrcNewLandContract]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcNewLandContract]
(
	@Guid uniqueidentifier = 0x0
)
  
as
	Select
		(Select Isnull(Max([Number]),0) + 1 From [LandContract]) as [Number],
		[Guid],
		[ContractNo],
		[CustomerGuid],
		[LandGuid],
		[VillaGuid],
		Case 
			when [ContractFinish] = 0 then Dateadd(Day,1,[ToDate]) 
			when [ContractFinish] = 1 then Dateadd(Day,1,[ContractFinishDate]) 
		end as [FromDate],
		Dateadd(year,1,
						Case 
							when [ContractFinish] = 0 then [ToDate]
							when [ContractFinish] = 1 then [ContractFinishDate]
						end
				) as [ToDate],
		[Rent]+ISNULL(AddValue,0) as [Rent],
		[CurrencyGuid],
		[CurrencyVal],
		[PayType],
		[Note],
		[Note2],
		[Purpose],
		[ContractKind],
		[RevenueAccountGuid],
		[CustAccountGuid],
		[CommissionFromCustPercent],
		[CommissionFromCustValue],
		[AcCommissionFromCustGuid],
		[CommissionFromOwnerPercent],
		[CommissionFromOwnerValue],
		[AcCommissionFromOwnerGuid],
		[LandOwner],
		Cast( 0 as bit) as [ContractFinish],
		Cast( Null as DateTime)  as [ContractFinishDate],
		0 as [ResultingAmount],
		0 as [ResultingAmount2],
		[RoundKind],
		0 as [Fine],
		[FineAccount],
		Cast( 0 as bit) as [CreateResultingEntry],
	
		0 as [InsuranceValue],
		[InsuranceValue] + Isnull([InsuranceValueOld],0) as [InsuranceValueOld],
		[ContractPrice],
		[AccountContractPrice],
		[CertificatValue],
		[AccountCertificatValue],

		[RentDuration],
		[Rentype],
		[TermsOfPayment],
		[RentInfoGuid],
		[SalesManGuid],
		[whereabouts],
		[BranchGuid],
		[CostGuid],
		IsAutoRenewal
	From
		[vwLandContract]
	where
		[Guid] = @Guid Or @Guid = 0x0


GO
/****** Object:  StoredProcedure [dbo].[PrcNewServicesContract]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcNewServicesContract]
(
	@Guid uniqueidentifier = 0x0
)
  
as
	Select
		(Select Isnull(Max([Number]),0) + 1 From [LeaseApartment]) as [Number],
		[Guid],
		[ContractNo],
		[CustomerGuid],
		[BuildingGuid],
		[Period],
		Case 
			when [ContractFinish] = 0 then Dateadd(Day,1,[ToDate]) 
			when [ContractFinish] = 1 then Dateadd(Day,1,[ContractFinishDate]) 
		end as [FromDate],
		Dateadd(year,1,
						Case 
							when [ContractFinish] = 0 then [ToDate]
							when [ContractFinish] = 1 then [ContractFinishDate]
						end
				) as [ToDate],
		[Rent] as [Rent],
		[CurrencyGuid],
		[CurrencyVal],
		[PayType],
		[Note],
		[Note2],
		[Purpose],
		[CustAccountGuid],
		--case when SUBSTRING([OpNewContract], 4, 1) = '1' then [CommissionFromCustPercent] else 0 end [CommissionFromCustPercent],
		--case when SUBSTRING([OpNewContract], 4, 1) = '1' then [CommissionFromCustValue] else 0 end as [CommissionFromCustValue],
		--[AcCommissionFromCustGuid],
		--case when SUBSTRING([OpNewContract], 5, 1) = '1' then [CommissionFromOwnerPercent] else 0 end [CommissionFromOwnerPercent],
		--case when SUBSTRING([OpNewContract], 5, 1) = '1' then [CommissionFromOwnerValue] else 0 end [CommissionFromOwnerValue],
		--[AcCommissionFromOwnerGuid],
		--[FlatOwner],
		Cast( 0 as bit) as [ContractFinish],
		Cast( Null as DateTime)  as [ContractFinishDate],
		0 as [ResultingAmount],
		0 as [ResultingAmount2],
		[RoundKind],
		--[FineAccount],
		Cast( 0 as bit) as [CreateResultingEntry],
	
		[RentDuration],
		[Rentype],
		[TermsOfPayment],
		[whereabouts],
		[CountOldContract],
		[CostGuid],
		ExpenceAccountGUID,
		OtherFee,
		
		[BranchGuid]
	From
		[vwServicesContract]
	where
		[Guid] = @Guid Or @Guid = 0x0


GO
/****** Object:  StoredProcedure [dbo].[PrcOfferApartment]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcOfferApartment]
(
	@CustGuid [uniqueidentifier] = 0x0,
	@CityGuid [uniqueidentifier] = 0x0,
	@RegionGuid [uniqueidentifier] = 0x0,
	@Area1 Float = 0,
	@Area2 Float = 0,
	@Price1 Float = 0,
	@Price2 Float = 0,
	@CkSale Bit = 1,
	@CkNotSale Bit = 1,
	@CkLease Bit = 1,
	@CkNotLease Bit = 1,
	@Restrained Bit = 1,
	@NotRestrained Bit = 1,
	@Date1 DateTime = '1/1/2007',
	@Date2 DateTime = '1/1/2008',
	@Lang Int = 0
)
  
as
	Select
		*,
		Case when [OfferType] = 1 then 
			case when @Lang = 0 then 'ÈíÚ'
				 when @Lang = 1 then 'Sale' end
			when [OfferType] = 0 then 
			case when @Lang = 0 then 'ÇíÌÇÑ'
				 when @Lang = 1 then 'rent' end 
		end as [StrOfferType],

		Case when [OfferType] = 1 and [OfferState] = 0 then 
			case when @Lang = 0 then 'ãÈÇÚÉ'
				 when @Lang = 1 then 'Sale' end

			 when [OfferType] = 1 and [OfferState] = 1 then 
			case when @Lang = 0 then 'ÛíÑ ãÈÇÚÉ'
				 when @Lang = 1 then 'Not Sale' end

			 when [OfferType] = 0 and [OfferState] = 0 then 
			case when @Lang = 0 then 'ãÄÌÑÉ'
				 when @Lang = 1 then 'rent' end

			 when [OfferType] = 0 and [OfferState] = 1 then 
			case when @Lang = 0 then 'ÛíÑ ãÄÌÑÉ'
				 when @Lang = 1 then 'Not rent' end
		end as [StrOfferState]

	From
		vwOfferApartment
	where
		([CityGuid] = @CityGuid or @CityGuid = 0x0)
		and ([RegionGuid] = @RegionGuid or @RegionGuid = 0x0)
		and ([CustomerGuid] = @CustGuid or @CustGuid = 0x0)
		and ([Area] between @Area1 and @Area2 or @Area2 = 0)
		and (
				([Area] = @Area1 and @Area2 = 0)
				or (@Area1 = 0)
				or (@Area1 <> 0 and @Area2 <> 0)
			)
		and ([TotalPrice] between @Price1 and @Price2 or @Price2 = 0)
		and (
				([TotalPrice] = @Price1 and @Price2 = 0)
				or (@Price1 = 0)
				or (@Price1 <> 0 and @Price2 <> 0)
			)

		and (
				([OfferType] = 1 and [OfferState] = 0 and @CkSale = 1 )
				or ([OfferType] = 0)
				Or ([OfferState] = 1)
				or (@CkSale <> 0)
			)

		and (
				([OfferType] = 1 and [OfferState] = 1 and @CkNotSale = 1 )
				or ([OfferType] = 0)
				Or ([OfferState] = 0)
				or (@CkNotSale <> 0)
			)

		-- ÇáÅíÌÇÑ
		and (
				([OfferType] = 0 and [OfferState] = 0 and @CkLease = 1 )
				or ([OfferType] = 1)
				Or ([OfferState] = 1)
				or (@CkLease <> 0)
			)

		and (
				([OfferType] = 0 and [OfferState] = 1 and @CkNotLease = 1 )
				or ([OfferType] = 1)
				Or ([OfferState] = 0)
				or (@CkNotLease <> 0)
			)
		and ([Restrained] = 1 or @NotRestrained = 1)
		and ([Restrained] = 0 or @Restrained = 1)



GO
/****** Object:  StoredProcedure [dbo].[PrcOfferBuilding]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcOfferBuilding]
(
	@CustGuid [uniqueidentifier] = 0x0,
	@CityGuid [uniqueidentifier] = 0x0,
	@RegionGuid [uniqueidentifier] = 0x0,
	@Area1 Float = 0,
	@Area2 Float = 0,
	@Price1 Float = 0,
	@Price2 Float = 0,
	@CkSale Bit = 1,
	@CkNotSale Bit = 1,
	@CkLease Bit = 1,
	@CkNotLease Bit = 1,
	@Restrained Bit = 1,
	@NotRestrained Bit = 1,
	@Date1 DateTime = '1/1/2007',
	@Date2 DateTime = '1/1/2008',
	@Lang Int = 0
)
  
as
	Select
		*,
		Case when [OfferType] = 1 then 
			case when @Lang = 0 then 'ÈíÚ'
				 when @Lang = 1 then 'Sale' end
			when [OfferType] = 0 then 
			case when @Lang = 0 then 'ÇíÌÇÑ'
				 when @Lang = 1 then 'rent' end 
		end as [StrOfferType],

		Case when [OfferType] = 1 and [OfferState] = 0 then 
			case when @Lang = 0 then 'ãÈÇÚÉ'
				 when @Lang = 1 then 'Sale' end

			 when [OfferType] = 1 and [OfferState] = 1 then 
			case when @Lang = 0 then 'ÛíÑ ãÈÇÚÉ'
				 when @Lang = 1 then 'Not Sale' end

			 when [OfferType] = 0 and [OfferState] = 0 then 
			case when @Lang = 0 then 'ãÄÌÑÉ'
				 when @Lang = 1 then 'rent' end

			 when [OfferType] = 0 and [OfferState] = 1 then 
			case when @Lang = 0 then 'ÛíÑ ãÄÌÑÉ'
				 when @Lang = 1 then 'Not rent' end
		end as [StrOfferState]

	From
		[vwOfferBuilding]
	where
		([CityGuid] = @CityGuid or @CityGuid = 0x0)
		and ([RegionGuid] = @RegionGuid or @RegionGuid = 0x0)
		and ([CustomerGuid] = @CustGuid or @CustGuid = 0x0)
		and ([Area] between @Area1 and @Area2 or @Area2 = 0)
		and (
				([Area] = @Area1 and @Area2 = 0)
				or (@Area1 = 0)
				or (@Area1 <> 0 and @Area2 <> 0)
			)
		and ([Price] between @Price1 and @Price2 or @Price2 = 0)
		and (
				([Price] = @Price1 and @Price2 = 0)
				or (@Price1 = 0)
				or (@Price1 <> 0 and @Price2 <> 0)
			)

		and (
				([OfferType] = 1 and [OfferState] = 0 and @CkSale = 1 )
				or ([OfferType] = 0)
				Or ([OfferState] = 1)
				or (@CkSale <> 0)
			)

		and (
				([OfferType] = 1 and [OfferState] = 1 and @CkNotSale = 1 )
				or ([OfferType] = 0)
				Or ([OfferState] = 0)
				or (@CkNotSale <> 0)
			)

		-- ÇáÅíÌÇÑ
		and (
				([OfferType] = 0 and [OfferState] = 0 and @CkLease = 1 )
				or ([OfferType] = 1)
				Or ([OfferState] = 1)
				or (@CkLease <> 0)
			)

		and (
				([OfferType] = 0 and [OfferState] = 1 and @CkNotLease = 1 )
				or ([OfferType] = 1)
				Or ([OfferState] = 0)
				or (@CkNotLease <> 0)
			)
		and ([Restrained] = 1 or @NotRestrained = 1)
		and ([Restrained] = 0 or @Restrained = 1)

GO
/****** Object:  StoredProcedure [dbo].[PrcOfferEarth]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcOfferEarth]
(
	@CustGuid [uniqueidentifier] = 0x0,
	@CityGuid [uniqueidentifier] = 0x0,
	@RegionGuid [uniqueidentifier] = 0x0,
	@Space Varchar(256) = '',
	@Area1 Float = 0,
	@Area2 Float = 0,
	@Price1 Float = 0,
	@Price2 Float = 0,
	@CkSale Bit = 1,
	@CkNotSale Bit = 1,
	@CkLease Bit = 1,
	@CkNotLease Bit = 1,
	@Restrained Bit = 1,
	@NotRestrained Bit = 1,
	@Date1 DateTime = '1/1/2007',
	@Date2 DateTime = '1/1/2008',
	@Lang Int = 0
)
  
as
	Select
		*
	From
		vwEarth
	where
		([CustomerGuid] = @CustGuid or @CustGuid = 0x0)
		and ([Space] = @Space or @Space = '')
		and ([Area] between @Area1 and @Area2 or @Area2 = 0)
		and (
				([Area] = @Area1 and @Area2 = 0)
				or (@Area1 = 0)
				or (@Area1 <> 0 and @Area2 <> 0)
			)
		and ([Price] between @Price1 and @Price2 or @Price2 = 0)
		and (
				([Price] = @Price1 and @Price2 = 0)
				or (@Price1 = 0)
				or (@Price1 <> 0 and @Price2 <> 0)
			)


GO
/****** Object:  StoredProcedure [dbo].[PrcOfferSundries]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcOfferSundries]
(
	@SundriesType Varchar(256) = '',
	@CustGuid [uniqueidentifier] = 0x0,
	@CityGuid [uniqueidentifier] = 0x0,
	@RegionGuid [uniqueidentifier] = 0x0,
	@Area1 Float = 0,
	@Area2 Float = 0,
	@Price1 Float = 0,
	@Price2 Float = 0,
	@CkSale Bit = 1,
	@CkNotSale Bit = 1,
	@CkLease Bit = 1,
	@CkNotLease Bit = 1,
	@Restrained Bit = 1,
	@NotRestrained Bit = 1,
	@Date1 DateTime = '1/1/2007',
	@Date2 DateTime = '1/1/2008',
	@Lang Int = 0
)
  
as
	Select
		*,
		Case when [OfferType] = 1 then 
			case when @Lang = 0 then 'ÈíÚ'
				 when @Lang = 1 then 'Sale' end
			when [OfferType] = 0 then 
			case when @Lang = 0 then 'ÇíÌÇÑ'
				 when @Lang = 1 then 'rent' end 
		end as [StrOfferType],

		Case when [OfferType] = 1 and [OfferState] = 0 then 
			case when @Lang = 0 then 'ãÈÇÚÉ'
				 when @Lang = 1 then 'Sale' end

			 when [OfferType] = 1 and [OfferState] = 1 then 
			case when @Lang = 0 then 'ÛíÑ ãÈÇÚÉ'
				 when @Lang = 1 then 'Not Sale' end

			 when [OfferType] = 0 and [OfferState] = 0 then 
			case when @Lang = 0 then 'ãÄÌÑÉ'
				 when @Lang = 1 then 'rent' end

			 when [OfferType] = 0 and [OfferState] = 1 then 
			case when @Lang = 0 then 'ÛíÑ ãÄÌÑÉ'
				 when @Lang = 1 then 'Not rent' end
		end as [StrOfferState]

	From
		vwOfferSundries
	where
		([CityGuid] = @CityGuid or @CityGuid = 0x0)
		and ([SundriesType] = @SundriesType or @SundriesType = '')
		and ([RegionGuid] = @RegionGuid or @RegionGuid = 0x0)
		and ([CustomerGuid] = @CustGuid or @CustGuid = 0x0)
		and ([Area] between @Area1 and @Area2 or @Area2 = 0)
		and (
				([Area] = @Area1 and @Area2 = 0)
				or (@Area1 = 0)
				or (@Area1 <> 0 and @Area2 <> 0)
			)
		and ([Price] between @Price1 and @Price2 or @Price2 = 0)
		and (
				([Price] = @Price1 and @Price2 = 0)
				or (@Price1 = 0)
				or (@Price1 <> 0 and @Price2 <> 0)
			)

		and (
				([OfferType] = 1 and [OfferState] = 0 and @CkSale = 1 )
				or ([OfferType] = 0)
				Or ([OfferState] = 1)
				or (@CkSale <> 0)
			)

		and (
				([OfferType] = 1 and [OfferState] = 1 and @CkNotSale = 1 )
				or ([OfferType] = 0)
				Or ([OfferState] = 0)
				or (@CkNotSale <> 0)
			)

		-- ÇáÅíÌÇÑ
		and (
				([OfferType] = 0 and [OfferState] = 0 and @CkLease = 1 )
				or ([OfferType] = 1)
				Or ([OfferState] = 1)
				or (@CkLease <> 0)
			)

		and (
				([OfferType] = 0 and [OfferState] = 1 and @CkNotLease = 1 )
				or ([OfferType] = 1)
				Or ([OfferState] = 0)
				or (@CkNotLease <> 0)
			)
		and ([Restrained] = 1 or @NotRestrained = 1)
		and ([Restrained] = 0 or @Restrained = 1)

GO
/****** Object:  StoredProcedure [dbo].[PrcOrderTestCreateCeBill]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create Procedure [dbo].[PrcOrderTestCreateCeBill]
(
	@Guid uniqueidentifier = 0x0
)
as
	Select
			* 
	From
			[BillOrderRecipient] R
			inner join [Bill] Bu on R.Guid = Bu.Guid
	where
		R.Guid = @Guid

GO
/****** Object:  StoredProcedure [dbo].[PrcPaperMonetary]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcPaperMonetary]
(
	@Account UniqueIdentifier = 0x0,
	@obverseAccount UniqueIdentifier = 0x0,--'794F7D2E-F02D-4148-8CDF-448E669A4556',
	@AccountWith int = 3,
	@BranchGuid UniqueIdentifier = 0x0,
	@ContractGuid UniqueIdentifier = 0x0,
	@SalesManGuid UniqueIdentifier = 0x0,
	@BankName Varchar(256) = '',
	@FlatGuid UniqueIdentifier = 0x0,
	@ShopGuid UniqueIdentifier = 0x0,
	@ParkingGuid UniqueIdentifier = 0x0,
	@beneficiary Varchar(256) = '',
	@NonState  Bit = 0,
	@CkEnd Bit = 1,
	@ChecksPartialCollection Bit = 1,
	@ChecksPartialCollectionOption int = 2,
	@ShowStateOnly bit = 1,
	@IsPosted Bit = 1,
	@IsEndorsement Bit = 1,
	@IsReturn Bit = 1,
	@ReturnCause Varchar(256) = '',
	@CbEndReturn int = 2
	,@ShowIsCheck Bit = 1
	,@ShowIsNotCheck Bit = 1
	,@Lawsuit int = 2
	,@Date1 Datetime = '2008-1-1'
	,@Date2 Datetime = '2017-12-31'
	,@EditDate1 Datetime = '2009-1-1'
	,@EditDate2 Datetime = '2017-12-31'
	,@CkEditDate Bit = 0
	,@CkDueDate Bit = 0

	,@ActiveOperationDate bit = 1,
    @OperationDateWith int = 2,
    @OperationDate1 Datetime = '4/8/2017',
    @OperationDate2 Datetime = '4/8/2017'

	,@ActiveChecksCollectionNote Bit = 0
	,@OperationChecksCollectionNote int = 0	
	,@ChecksCollectionNote Varchar(256) = '' 

	,@ActiveNote Bit = 0
	,@OperationNote int = 0
	,@CheckNote  Varchar(256) = ''

	,@uActiveNote Bit = 0
	,@uOperationNote int = 0
	,@uCheckNote  Varchar(256) = ''

	,@ActiveContractList Bit = 0
	,@ActiveBuildingList Bit = 0
	,@UnLinkContractOnly Bit = 0
	,@UnLinkContract Bit = 0
	,@SMS int = 2
	,@Mark Bit = 1
	,@NotMark Bit = 1
	,@Deposition int = 2
)
  
as

	Set NoCount On


	---  Parameter ----------
	Set @Account = ISNULL(@Account, 0x0)
    Set	@obverseAccount = IsNull(@obverseAccount, 0x0)
	Set @AccountWith = ISNULL(@AccountWith, 3)
    Set	@BranchGuid = IsNull(@BranchGuid, 0x0)
    Set	@ContractGuid = IsNull(@ContractGuid, 0x0)
    Set	@SalesManGuid = IsNull(@SalesManGuid, 0x0)
	Set @BankName = isNull(@BankName, '')
    Set	@FlatGuid = IsNull(@FlatGuid, 0x0)
    Set	@ShopGuid = IsNull(@ShopGuid, 0x0)
    Set	@ParkingGuid = IsNull(@ParkingGuid, 0x0)
	Set	@beneficiary = ISNULL(@beneficiary, '')
	Set @NonState  = ISNULL(@NonState, 0)
	Set @CkEnd = ISNULL(@CkEnd, 0)
	Set @ChecksPartialCollection = ISNULL(@ChecksPartialCollection, 0)
	Set @ChecksPartialCollectionOption = ISNULL(@ChecksPartialCollectionOption, 2)
	Set @ShowStateOnly = isNull(@ShowStateOnly, 1)
	Set @IsPosted = ISNULL(@IsPosted, 0)
	Set @IsEndorsement = ISNULL(@IsEndorsement, 0)
	Set @IsReturn = ISNULL(@IsReturn, 0)
	Set @ReturnCause = ISNULL(@ReturnCause, '')
	Set @CbEndReturn = ISNULL(@CbEndReturn, 2)
	Set @ShowIsCheck  = ISNULL(@ShowIsCheck, 1)
	Set @ShowIsNotCheck = ISNULL(@ShowIsNotCheck, 1)
	Set @Lawsuit = ISNULL(@Lawsuit,2)
	Set @Date1 = ISNULL(@Date1, Cast(Cast(DATEPART(YEAR, GETDATE()) as varchar(4))+ '-01-01' as Datetime))
	Set @Date2  = ISNULL(@Date2, Cast(Cast(DATEPART(YEAR, GETDATE()) as varchar(4))+ '-12-31' as Datetime))
	Set @EditDate1 = ISNULL(@EditDate1, Cast(Cast(DATEPART(YEAR, GETDATE()) as varchar(4))+ '-01-01' as Datetime))
	Set @EditDate2  = ISNULL(@EditDate2, Cast(Cast(DATEPART(YEAR, GETDATE()) as varchar(4))+ '-12-31' as Datetime))
	Set @CkEditDate  = ISNULL(@CkEditDate, 0)
	Set @CkDueDate  = ISNULL(@CkDueDate, 0)
	Set @ActiveOperationDate = ISNULL(@ActiveOperationDate, 0)
    Set @OperationDateWith  = ISNULL(@OperationDateWith, 1)
	Set @OperationDate1 = ISNULL(@OperationDate1, Cast(Cast(DATEPART(YEAR, GETDATE()) as varchar(4))+ '-01-01' as Datetime))
	Set @OperationDate2  = ISNULL(@OperationDate2, Cast(Cast(DATEPART(YEAR, GETDATE()) as varchar(4))+ '-12-31' as Datetime))
	Set @ActiveChecksCollectionNote  = ISNULL(@ActiveChecksCollectionNote, 0)
	Set @OperationChecksCollectionNote = ISNULL(@OperationChecksCollectionNote, 0)	
	Set @ChecksCollectionNote  = ISNULL(@ChecksCollectionNote, '')
	Set @ActiveNote = ISNULL(@ActiveNote, 0)
	Set @OperationNote = ISNULL(@OperationNote, 0)
	Set @CheckNote = ISNULL(@CheckNote, '')
	Set @uActiveNote  = ISNULL(@uActiveNote, 0)
	Set @uOperationNote = ISNULL(@uOperationNote, 0)
	Set @uCheckNote = ISNULL(@uCheckNote, '')
	Set @ActiveContractList = ISNULL(@ActiveContractList, 0)
	Set @ActiveBuildingList = ISNULL(@ActiveBuildingList, 0)
	Set @UnLinkContractOnly = ISNULL(@UnLinkContractOnly, 0)
	Set @UnLinkContract = ISNULL(@UnLinkContract, 0)
	Set @SMS = ISNULL(@SMS, 2)
	Set @Mark = ISNULL(@Mark, 1)
	Set @NotMark = ISNULL(@NotMark, 1)
	Set @Deposition = ISNULL(@Deposition, 2)
	----End Parameter ---------


	Declare @Msg varchar(255),
			@MsgConst varchar(255)
	Set @MsgConst = dbo.SC('ÊÞÑíÑ ÇáÃæÑÇÞ ÇáãÇáíÉ')
			
	Set @Msg = @MsgConst
	exec PrcSetProgrss @Msg, 100, 0

	--ãÚÇáÌÉ ÈíÇä ÇáÚãáíÇÊ
	if @OperationChecksCollectionNote = 0 --íÍæí
	Set @ChecksCollectionNote = '%'+@ChecksCollectionNote+'%'
	
	--ãÚÇáÌÉ ÈíÇä ÇáÔíß
	if @OperationNote = 0 --íÍæí
	Set @CheckNote = '%'+@CheckNote+'%'

	--ãÚÇáÌÉ ÈíÇä ÇáÔíß
	if @uOperationNote = 0 --íÍæí
	Set @uCheckNote = '%'+@uCheckNote+'%'

	--ãÚÇáÌÉ ÇáÊÇÑíÎ
	if @Date2 = '1899-12-30'
	Select @Date2 = Max([DueDate]) From [Checks]

	if @EditDate2 = '1899-12-30'
	Select @EditDate2 = Max([Date]) From [Checks]

	Declare @Check Bit,
			@NotCheck Bit
	Set @Check = 1
	Set @NotCheck = 0

	Create 	Table #R
	(
		[Number] int,
		[TypeName] Varchar(256),
		[IsPosted] Varchar(256),
		[IsCollection] Varchar(256),
		[IsPartialCollection] Varchar(256),
		[IsEndorsement] Varchar(256),
		[IsReturned] Varchar(256),
		[CollectionValue] Float,		
		[RestValue] Float,		

		[PostedDate] Datetime,
		[CollectionDate] Datetime,
		[EndorsementDate] Datetime,
		[ReturnedDate] Datetime,
		[ReturnFine] Float,
		
		[ReturnedFinishDate] Datetime,
		[ReturnedFinished] bit,
		

		[AccountCode]Varchar(256),
		[AccountName]Varchar(256),
		[ObverseAccountCode] Varchar(256),
		[ObverseAccountName] Varchar(256),
		[No] Varchar(256),
		[Value] Float,
		[Date] DateTime,
		[DueDate] DateTime,
		[endDueDate] DateTime,
		[BankName]Varchar(256),
		[Note] Varchar(256),
		[Note3] Varchar(4000),
		[BuildingName] Varchar(256),
		[FlatNo] Varchar(256),
		[FloorNo] Varchar(256),
		[beneficiary] Varchar(256),
		[Check] Bit,
		[Lawsuit] Bit,
		[checkkind] int,
		[Guid] UniqueIdentifier,

		[Emirate] Varchar(256),
		[BuildingArea] Varchar(256),
		[Suburb] Varchar(256),
		[Street] Varchar(256),
		[BasinNo] Varchar(256),
		[PieceNo] Varchar(256),
		[BuildingNo] Varchar(256),
		[BondType] Varchar(256),
		[BondNo] Varchar(256),
		[SalesMan] Varchar(256),
		[FlatKind] Varchar(256),
		[ApartmentType] Varchar(256),
		[Class] Varchar(256),
		[FlatArea] Varchar(256),
		[FlatAreaunity] Varchar(256),
		[CustomerPhonejob]  Varchar(256),
		[CustomerMobile] Varchar(256),
		[CustomerNationality] Varchar(256),
		[BuildingGuid] uniqueidentifier,
		[SalesManGuid] uniqueidentifier,
		[CheckCurrencyGuid] uniqueidentifier,
		[SMSSended] Bit,
		[SMSCount] int,
		[Mark] Bit,
		[Deposition] Bit,
		[ContractGuid] uniqueidentifier,
		[ContractValue] Float,
		[EntryNo] int,
		[CostGuid] uniqueidentifier,
		[CostObverseGuid] uniqueidentifier,
		AccountGuid uniqueidentifier,
		[obverseAccountGuid] uniqueidentifier,
		[CostDebit] Varchar(256),
		[CostCredit] Varchar(256)
	)
	Set @Msg = @MsgConst+' .'
	exec PrcSetProgrss @Msg, 100, 5

	Select 
		[ObjGuid],
		[IdReport],
		Count(*) as [Count]
	into #RepSMS3
	From
		[RepSMSCount] 
	where
		[IdReport] = 3003
	Group By
		[ObjGuid],
		[IdReport]

	Select 
		[CheckGuid],
		Sum([Value]) as [Value] 
	into #ChecksPartialCollection
	From
		[ChecksPartialCollection] 
	Group By
		[CheckGuid]
					
	Select	* into #vwChecksCollection0	From vwChecksCollection	where [Kind] = 0
	Select	* into #vwChecksCollection1	From vwChecksCollection	where [Kind] = 1
	Select	* into #vwChecksCollection2	From vwChecksCollection	where [Kind] = 2
	Select	* into #vwChecksCollection3	From vwChecksCollection	where [Kind] = 3
	
	CREATE CLUSTERED INDEX #IXCheckGuid0 ON #vwChecksCollection0([CheckGuid])	
	CREATE CLUSTERED INDEX #IXCheckGuid1 ON #vwChecksCollection1([CheckGuid])	
	CREATE CLUSTERED INDEX #IXCheckGuid2 ON #vwChecksCollection2([CheckGuid])	
	CREATE CLUSTERED INDEX #IXCheckGuid3 ON #vwChecksCollection3([CheckGuid])	
	
	Insert into #R
	Select 
		[P].[Number],
		[P].[TypeName],

		Case when [C].[CheckGuid] is null then '' else dbo.SC('ãÑÍá') end as [IsPosted],

		Case
			when ([C1].[CheckGuid] is Null) then '' 
			when ([C1].[CheckGuid] is Not Null) then dbo.SC('ãÍÕá') 
		end as [IsCollection],

		Case 
			when [C4].[CheckGuid] is Null then '' 
			when ([C4].[CheckGuid] is Not Null ) then dbo.SC('ãÍÕá ÌÒÆíÇ')
		end as [IsPartialCollection],

		Case when [C2].[CheckGuid] is null then '' else dbo.SC('ãÙåÑ') end as [IsEndorsement],
		Case when [C3].[CheckGuid] is null then '' else dbo.SC('ãÑÊÌÚ') end as [IsReturned],

		[C4].[Value] as [CollectionValue],
		[P].[Value] - [C4].[Value] as [RestValue],

		[C].[Date] as [PostedDate],
		[C1].[Date] as [CollectionDate],
		[C2].[Date] as [EndorsementDate],
		[C3].[Date] as [ReturnedDate],
		[C3].[Delay] as [ReturnFine],

		[C3].[FinishDate] as [ReturnedFinishDate],
		[C3].[Finished] as [ReturnedFinished],

		[P].[AccountCode],
		[P].[AccountName],

		[P].[ObverseAccountCode],
		[P].[ObverseAccountName]

		,[P].[No]
		,[P].[Value]
		,[P].[Date]
		,[P].[DueDate]
		,[P].[EndDueDate]
		,[P].[BankName]
		,[P].[Note]
		,[P].[Note3]
		,'' as [BuildingName]
		,'' as [FlatNo]
		,'' as [FloorNo]
		,p.[beneficiary]
		
		,@NotCheck as [Check]
		,[Lawsuit]	 
		,[checkkind]
		,[P].[Guid]

		,'' as [Emirate]
		,'' as [BuildingArea]
		,'' as [Suburb]
		,'' as [Street]
		,'' as [BasinNo]
		,'' as [PieceNo]
		,'' as [BuildingNo]
		,'' as [BondType]
		,'' as [BondNo]
		,'' as [SalesMan]
		,'' as [FlatKind]
		,'' as [ApartmentType]
		,'' as [Class]
		,'' as [FlatArea]
		,'' as [FlatAreaunity]
		,'' as [CustomerPhonejob]
		,'' as [CustomerMobile]
		,'' as [CustomerNationality]
		,0x0 as [BuildingGuid]
		,0x0 as [SalesManGuid]
		,[P].[CurrencyGuid] as [CheckCurrencyGuid]
			 
		,@NotCheck as [SMSSended],
			 
		Cast(0 as int) as [SMSCount],

		[P].[Mark],
		[p].[Deposition],
		[P].[ContractGuid],
		0 as [ContractValue],
		0 as [EntryNo],
		[P].[CostGuid],
		[p].[CostObverseGuid],
		[P].[Account] as AccountGuid,
		[P].[obverseAccount] as [obverseAccountGuid],
		'' as [CostDebit],
		'' as [CostCredit]
	From
		[vwChecks] [P]
		inner join [Resource] [RS] on [RS].[Guid] = [P].[TypeGuid] and [RS].[Spid] = @@Spid and [RS].[Kind] = 3000
		left join #vwChecksCollection0 [C] on [C].[CheckGuid] = [P].[Guid] 
		left join #vwChecksCollection1 [C1] on [C1].[CheckGuid] = [P].[Guid] 
		left join #vwChecksCollection2 [C2] on [C2].[CheckGuid] = [P].[Guid] 
		left join #vwChecksCollection3 [C3] on [C3].[CheckGuid] = [P].[Guid]  --ÇÑÌÇÚ
		left join #ChecksPartialCollection [C4] on [C4].[CheckGuid] = [P].[Guid]
  	where
  		(P.Lawsuit = @Lawsuit or @Lawsuit = 2)
		and (
			--([P].[Account] = @Account  and @AccountWith = 0) or
			([C].[DebitAccountGuid] = @Account  and @AccountWith = 1) or --ÊÑÍíá
			([C1].[DebitAccountGuid] = @Account  and @AccountWith = 2) or -- ÊÍÕíá
			--([C4].[DebitAccountGuid] = @Account  and @AccountWith = 3) or -- ÊÍÕíá ÌÒÆí
			([C2].[DebitAccountGuid] = @Account  and @AccountWith = 4) or -- ÊÙåíÑ
			([C3].[DebitAccountGuid] = @Account  and @AccountWith = 5) --ÇÑÌÇÚ
			Or @Account = 0x0 
			or @AccountWith = 0
			or @AccountWith = 3
		)
		and(
			(C.Date between @OperationDate1 and @OperationDate2 and @OperationDateWith = 0)
			or (C1.Date between @OperationDate1 and @OperationDate2 and @OperationDateWith = 1)
			or ( C4.CheckGuid is Not Null  and @OperationDateWith = 2)
			or (C2.Date between @OperationDate1 and @OperationDate2 and @OperationDateWith = 3)
			or (C3.Date between @OperationDate1 and @OperationDate2 and @OperationDateWith = 4)
			or (C3.FinishDate between @OperationDate1 and @OperationDate2 and @OperationDateWith = 5)
			
			or @ActiveOperationDate = 0
			--or @AccountWith = 0 -- ãáÛì
			)

		and
		(
			--([P].[obverseAccount] = @obverseAccount  and @AccountWith = 0) or
			([C].[creditAccountGuid] = @obverseAccount  and @AccountWith = 1) or
			([C1].[creditAccountGuid] = @obverseAccount  and @AccountWith = 2) or
			--([C4].[creditAccountGuid] = @obverseAccount  and @AccountWith = 3) or
			([C2].[creditAccountGuid] = @obverseAccount  and @AccountWith = 4) or
			([C3].[creditAccountGuid] = @obverseAccount  and @AccountWith = 5)
			Or @obverseAccount = 0x0
			or @AccountWith = 0
			or @AccountWith = 3
		)

 		and ([P].[BranchGuid] = @BranchGuid or @BranchGuid = 0x0)
 		and ([P].[beneficiary] = @beneficiary or @beneficiary = '')
  		and ([P].[BankName] = @BankName or @BankName = '')
  		and ([P].[ContractGuid] = @ContractGuid or @ContractGuid = 0x0)
		and ([p].[SalesManGuid] = @SalesManGuid or @SalesManGuid = 0x0)
		and (
					(
  						--ÇáãÙåÑÉ
  						(
  							(
  							(Case when [C2].[CheckGuid] is null then 0 else 1 end = 1)
							and (Case when [C].[CheckGuid] is null then 0 else 1 end = 0)
							and (Case when [C1].[CheckGuid] is null then 0 else 1 end = 0)
							and (Case when [C3].[CheckGuid] is null then 0 else 1 end = 0)
							and (Case when [C4].[CheckGuid] is null then 0 else 1 end = 0)
							)
  							and @IsEndorsement = 1
						)
					)
				or(
  						-- ÇáãÑÍáÉ ÝÞØ
  						(
  							(
  							(Case when [C].[CheckGuid] is null then 0 else 1 end = 1)
  							and (Case when [C2].[CheckGuid] is null then 0 else 1 end = 0)
							and (Case when [C1].[CheckGuid] is null then 0 else 1 end = 0)
							and (Case when [C3].[CheckGuid] is null then 0 else 1 end = 0)
							and (Case when [C4].[CheckGuid] is null then 0 else 1 end = 0)
							)
							and @IsPosted = 1
						)
						
					)
					
				or(
						-- ÇáãÍÕáÉ
						(
  							(
  							(Case when [C2].[CheckGuid] is null then 0 else 1 end = 0)
							and (Case when [C3].[CheckGuid] is null then 0 else 1 end = 0)
							)
							and (Case 
								when ([C1].[CheckGuid] is Null) then 0
								when ([C1].[CheckGuid] is Not Null) then 1
							end = 1 )
							and @CkEnd = 1
							
						)
						
					)
				or(
						-- ÇáãÑÊÌÚÉ
						(
  							(
									Case when [C3].[CheckGuid] is null then 0 else 1 end = 1 
									and ([C3].[Finished] = @CbEndReturn or @CbEndReturn = 2)
									
									-- ÚÏã ÅÙåÇÑ ÇáÔíßÇÊ ÇáãÍÕáÉ ÌÒÆíÇ
									and [C4].[CheckGuid] is Null
									
									and (IsNull([C3].ReturnCause,'') = @ReturnCause or @ReturnCause = '')
								)
								and @IsReturn = 1
						)
						
					)
  				or (
		  				
  						-- ÇáãÍÕáÉ ÌÒÆíÇ	
  						(
							(Case 
								when [C4].[CheckGuid] is Null then 0
								when ([C4].[CheckGuid] is Not Null ) then
								Case 
									when ([C4].Value < P.Value and @ChecksPartialCollectionOption = 1) or @ChecksPartialCollectionOption = 2 then 1
									when ([C4].Value >= P.Value and @ChecksPartialCollectionOption = 0) or @ChecksPartialCollectionOption = 2 then 1
								end
							end = 1 )
							and @ChecksPartialCollection = 1
						)
						
  					)
  					
 				or (
 						(
 							(Case when [C].[CheckGuid] is null then 0 else 1 end = 0)
 							and (Case when [C1].[CheckGuid] is null then 0 else 1 end = 0)
 							and (Case when [C2].[CheckGuid] is null then 0 else 1 end = 0)
 							and (Case when [C3].[CheckGuid] is null then 0 else 1 end = 0)
 							and (Case when [C4].[CheckGuid] is null then 0 else 1 end = 0)
 						)
 						and @NonState = 1
 					)
 					
  			)
	  		
 		and ([P].[DueDate] Between @Date1 And @Date2 or @CkDueDate = 0)
 		and ([P].[Date] Between @EditDate1 And @EditDate2 or @CkEditDate = 0)
 
 		and 
 			(
 				[P].[Note3] Like @CheckNote 
 				or @ActiveNote = 0
 			)
 			
 		and 
 			(
 				[P].[Note] Like @uCheckNote
				or [P].[Note2] Like @uCheckNote
 				or @uActiveNote = 0
 			)

 		and 
 			(
 				[C].[Note] Like @ChecksCollectionNote 
 				 or [C1].[Note] Like @ChecksCollectionNote
 				 or [C2].[Note] Like @ChecksCollectionNote
 				 or [C3].[Note] Like @ChecksCollectionNote
 				or @ActiveChecksCollectionNote = 0
 			)
		and (
				(isNull([P].[Mark],0)= 1 and @Mark = 1)
				or (isNull([P].[Mark],0) = 0 and @NotMark = 1)
			)
		and (
				isNull([p].[Deposition],0) = @Deposition or @Deposition = 2
			)

	--Select * from #R Return
	
	if (@ActiveOperationDate = 1) and (@OperationDateWith = 2)
	begin
		Select Distinct
			R.Guid
		into #DelOperationDate2
		from
			#R R
			inner join [ChecksPartialCollection] P on p.CheckGuid = R.Guid
		where
			Not (P.Date between @OperationDate1 and @OperationDate2) 

		--Select * from #DelOperationDate2
		
		Delete #R 
		from
			#R R
			inner join #DelOperationDate2 P on p.Guid = R.Guid
	end

	
	Update #R Set AccountName = dbo.SC('ÍÓÇÈÇÊ ãÊÚÏÏÉ'), 
				  AccountCode = dbo.SC('ÍÓÇÈÇÊ ãÊÚÏÏÉ')
	From
		#R R
		inner join ChecksAccountDetail D on D.[ParentGuid] = R.Guid and Kind = 1
		
	Update #R Set ObverseAccountName = dbo.SC('ÍÓÇÈÇÊ ãÊÚÏÏÉ'),
				  ObverseAccountCode = dbo.SC('ÍÓÇÈÇÊ ãÊÚÏÏÉ')
	From
		#R R
		inner join ChecksAccountDetail D on D.[ParentGuid] = R.Guid and Kind = 2


										   
	 if (@Account <> 0x0) and (@AccountWith = 0)
	 begin
		
		Select 
			Distinct [ParentGuid]
		into #ChecksAccountDetail1
		from 
			ChecksAccountDetail D
			inner join #R R on D.[ParentGuid] = R.Guid and Kind = 1 and D.[AccountGuid] = @Account
			
		Delete #R
		From
			#R R
			left join #ChecksAccountDetail1 D on D.[ParentGuid] = R.Guid 
		where
			(D.[ParentGuid] is Null)
			and (R.AccountGuid <> @Account)
	 end
	
	 if (@obverseAccount <> 0x0) and (@AccountWith = 0)
	 begin
		Select 
			Distinct [ParentGuid]
		into #ChecksAccountDetail2
		from 
			ChecksAccountDetail D
			inner join #R R on D.[ParentGuid] = R.Guid and Kind = 2 and D.[AccountGuid] = @obverseAccount

		Delete #R
		From
			#R R
			left join #ChecksAccountDetail2 D on D.[ParentGuid] = R.Guid 
		where
			D.[ParentGuid] is Null
			and (R.obverseAccountGuid <> @obverseAccount)
			
	 end
	 
	 

	Set @Msg = @MsgConst+' ..'
	exec PrcSetProgrss @Msg, 100, 60

	update #R Set [Check] = @Check
	From	
		#R C
		inner join RepCheck R on [R].[ObjGuid] = [C].[Guid] and [R].[IdReport] = 3000

	if @ShowIsCheck = 0
	Delete #R where [Check] = 1
	
	if @ShowIsNotCheck = 0
	Delete #R where [Check] = 0
		

	update #R Set SMSSended = @Check
	From	
		#R P
		inner join [RepSMS] [SMS2] on [SMS2].[ObjGuid] = [P].[Guid] and [SMS2].[IdReport] = 3003

	if @SMS <> 2
	Delete #R where SMSSended <> @SMS

	update #R Set SMSCount = SMS3.[COUNT]
	From
		#R p
		inner join #repSMS3 [SMS3] on [SMS3].[ObjGuid] = [P].[Guid]		

	-- Ýí ÍÇá ÊÝÚíá ÇáÍÇáÉ ÇáãÍÏÏÉ ÝÞØ
	if @ShowStateOnly = 1
	delete
		#R
	where
		([IsPosted] <> '' and ((@CkEnd = 1 and [IsCollection] <> '') or (@ChecksPartialCollection = 1 and [IsPartialCollection] <> '') or (@IsEndorsement = 1 and [IsEndorsement] <> '') or (@IsReturn = 1 and [IsReturned] <> '')))
		or ([IsCollection] <> '' and ((@IsPosted = 1 and [IsPosted] <> '') or (@ChecksPartialCollection = 1 and [IsPartialCollection] <> '') or (@IsEndorsement = 1 and [IsEndorsement] <> '') or (@IsReturn = 1 and [IsReturned] <> '')))
		or ([IsPartialCollection] <> '' and ((@CkEnd = 1 and [IsCollection] <> '') or (@IsPosted = 1 and [IsPosted] <> '') or (@IsEndorsement = 1 and [IsEndorsement] <> '') or (@IsReturn = 1 and [IsReturned] <> '')))
		or ([IsEndorsement] <> '' and ((@CkEnd = 1 and [IsCollection] <> '') or (@IsPosted = 1 and [IsPosted] <> '') or (@ChecksPartialCollection = 1 and [IsPartialCollection] <> '') or (@IsReturn = 1 and [IsReturned] <> '')))
		or ([IsReturned] <> '' and ((@CkEnd = 1 and [IsCollection] <> '') or (@IsPosted = 1 and [IsPosted] <> '') or (@ChecksPartialCollection = 1 and [IsPartialCollection] <> '') or (@IsEndorsement = 1 and [IsEndorsement] <> '')))
	------------------
	
	Set @Msg = @MsgConst+' ...'
	exec PrcSetProgrss @Msg, 100, 65

	-- ãÚÇáÌÉ ÇáÍÓÇÈ ÍÓÈ ÇáÊÍÕíá ÇáÌÒÆí
	if (@AccountWith = 3) and (@Account <> 0x0)
	delete
		[#R]
	from
		[#R] R
		inner join [ChecksPartialCollection] P on R.Guid = P.CheckGuid and P.[DebitAccountGuid] <> @Account

	--Select 	
	--	*
	--from
	--	[#R] R
	--	inner join [ChecksPartialCollection] P on R.Guid = P.CheckGuid and P.[CreditAccountGuid] = @obverseAccount

	if (@AccountWith = 3) and (@obverseAccount <> 0x0)
	delete
		[#R]
	from
		[#R] R
		inner join [ChecksPartialCollection] P on R.Guid = P.CheckGuid and P.[CreditAccountGuid] <> @obverseAccount

	--ÅÙåÇÑ ÇáÇæÑÇÞ ÇáÛíÑ ãÑÊÈØÉ ÈÚÞæÏ
	if @UnLinkContractOnly = 1
	Delete #R
	where
		ContractGuid Is not Null

	--Select * from #R return
	
	--Ýí ÍÇá ØáÈ ÔÞÉ ãÍÏÏÉ
	if @FlatGuid <> 0x0
	Delete #R
	From
		#R [P]
		left join [vwAllContract] [L] on [L].[Guid] = [P].[ContractGuid]
	where
 		([L].RealtyGuid <> @FlatGuid )

	--Ýí ÍÇá ØáÈ ãÍá ãÍÏÏÉ
	if @ShopGuid <> 0x0
	Delete #R
	From
		#R [P]
		left join [vwAllContract] [L] on [L].[Guid] = [P].[ContractGuid]
	where
 		([L].RealtyGuid <> @ShopGuid )
 				

	--Ýí ÍÇá ØáÈ ãæÞÝ ãÍÏÏÉ
	if @ParkingGuid <> 0x0
	Delete #R
	From
		#R [P]
		left join [vwAllContract] [L] on [L].[Guid] = [P].[ContractGuid]
	where
 		([L].RealtyGuid <> @ParkingGuid )

	Set @Msg = @MsgConst+' '+ '....'
	exec PrcSetProgrss @Msg, 100, 70

	if @UnLinkContractOnly = 0
	Update #R
	Set
		[BuildingName] = [L].[BuildingName]
		,[FlatNo] = [L].[FlatNo]
		,[FloorNo] = [L].[FloorNo]
		,[Emirate] = [L].[Emirate]
		,[BuildingArea] = [L].[BuildingArea]
		,[Suburb] = [L].[Suburb]
		,[Street] = [L].[Street]
		,[BasinNo] = [L].[BasinNo]
		,[PieceNo] = [L].[PieceNo]
		,[BuildingNo] = [L].[BuildingNo]
		,[BondType] = [L].[BondType]
		,[BondNo] = [L].[BondNo]
		,[FlatKind] = [L].[FlatKind]
		,[ApartmentType] = [L].[ApartmentType]
		,[Class] = [L].[Class]
		,[FlatArea] = [L].[FlatArea]
		,[FlatAreaunity] = [L].[FlatAreaunity]
		,[CustomerPhonejob] = [L].[CustomerPhonejob]
		,[CustomerMobile] = [L].[CustomerMobile]
		,[CustomerNationality] = [L].[CustomerNationality]
		,[BuildingGuid]= [L].[BuildingGuid]
		,[SalesManGuid] = [L].[SalesManGuid]
		,[ContractValue] = L.[RentAfterDiscount]
	From
		#R [P]
		inner join [vwLeaseApartment] [L] on [L].[Guid] = [P].[ContractGuid]
	where
 		(([L].[ApartmentGuid] = @FlatGuid or @FlatGuid = 0x0))
 		and (([L].[ShopGuid] = @ShopGuid or @ShopGuid = 0x0))


	Set @Msg = @MsgConst+' '+ '.....'
	exec PrcSetProgrss @Msg, 100, 75

	if @UnLinkContractOnly = 0
	Update #R
	Set
		[BuildingName] = [L].[BuildingName]
		,[FlatNo] = [L].[PNo]
		,[FloorNo] = ''
		,[Emirate] = [L].[Emirate]
		,[BuildingArea] = [L].[BuildingArea]
		,[Suburb] = [L].[Suburb]
		,[Street] = [L].[Street]
		,[BasinNo] = [L].[BasinNo]
		,[PieceNo] = [L].[PieceNo]
		,[BuildingNo] = [L].[BuildingNo]
		,[BondType] = [L].[BondType]
		,[BondNo] = [L].[BondNo]
		,[SalesMan] = ''--[L].[SalesMan]
		,[FlatKind] = ''--[L].[FlatKind]
		,[ApartmentType] = ''--[L].[ApartmentType]
		,[Class] = [L].[Class]
		,[FlatArea] = [L].[FlatArea]
		,[FlatAreaunity] = [L].[FlatAreaunity]
		,[CustomerPhonejob] = [L].[CustomerPhonejob]
		,[CustomerMobile] = [L].[CustomerMobile]
		,[CustomerNationality] = [L].[CustomerNationality]
		,[BuildingGuid]= [L].[BuildingGuid]
		,[SalesManGuid] = [L].[SalesManGuid] 
		,[ContractValue] = L.[Rent]
	From
		#R [P]
		inner join (
					Select [Ll].*, 
							--[B].[Emirate],
							[B].[Area] as [BuildingArea],
							[B].[Suburb],
							[B].[Street],
							[B].[BasinNo],
							[B].[PieceNo],
							[B].[BuildingNo],
							[B].[BondType],
							[B].[BondNo],
							'' as [Class],
							[F].[Area] as [FlatArea],
							[F].[unity] as [FlatAreaunity]
					From
						[vwParkingContract] [Ll]
						inner join [Building] [B] on [B].[Guid] = [lL].[BuildingGuid]
						inner join [Parking] [F] on [F].[Guid] = [Ll].[ParkingGuid]

			) [L] on [L].[Guid] = [P].[ContractGuid]
	where
 		(([L].[ParkingGuid] = @ParkingGuid or @ParkingGuid = 0x0))


	Set @Msg = @MsgConst+' '+ '......'
	exec PrcSetProgrss @Msg, 100, 80

	--ÞíãÉ ÇáÚÞÏ áÚÞæÏ ÇáÝáá
	Update #R
	Set
		[BuildingName] = [L].[Name]
		,[CustomerPhonejob] = [L].[CustomerPhonejob]
		,[CustomerMobile] = [L].[CustomerMobile]
		,[SalesManGuid] = [L].[SalesManGuid]
		,[ContractValue] = L.[Rent]
		,[CustomerNationality] = [L].[CustomerNationality]
	From
		#R [P]
		inner join [vwLandContract] [L] on [L].[Guid] = [P].[ContractGuid]


	UpDate #R Set [SalesMan] = [L].[Name] 
	From
		#R R
		inner join vwSalesman L on L.Guid = r.SalesManGuid

	--ÑÞã ÓäÏ ÇáÞíÏ
	UpDate #R Set EntryNo = IsNull([L].[EntryNum] ,0)
	From
		#R R
		inner join [LinkEntry_Checks] L on l.CheckGuid = R.Guid
	where
		l.Kind = 1600
		--inner join HEntry h on h.Guid = r.Guid


	--ãÚÇáÌÉ ÇäãÇØ ÇáÚÞæÏ
	if @ActiveContractList = 1
	begin

		Set @Msg = @MsgConst+' '+dbo.SC('ÇäãÇØ ÇáÚÞæÏ')+ '.......'
		exec PrcSetProgrss @Msg, 100, 90

		Select 
			[R].[Guid]
		into #CheckContract	
		From
			#R [R]
			inner join [Checks] [K] On [K].[Guid] = [R].[Guid]
			inner join [vwAllContractGuid] [C] On [C].[Guid] = [K].[ContractGuid]
			inner join [Resource] [RS] on [RS].[Guid] = [C].[TypeGuid] and [RS].[Spid] = @@Spid and [RS].[Kind] = 102

		Delete #R
		From
			#R [R]
			left join #CheckContract [C] On [C].[Guid] = [R].[Guid]
		where
			[C].[Guid] is Null
			and ([ContractGuid] is Not Null or @UnLinkContract = 0)
	end

	
	Set @Msg = @MsgConst+' '+ '........'
	exec PrcSetProgrss @Msg, 100, 92


	--ãÚÇáÌÉ ÇáÃÈäíÉ
	if @ActiveBuildingList = 1
	begin
		Update #R Set BuildingGuid = C.BuildingGuid
		From
			#R R
			inner join [LinkCheckContract] L on L.parentGuid = R.Guid
			inner join [vwLeaseApartment] C on C.Guid = L.ContractGuid

		Delete #R
		From
			#R [L]
			left join [Resource] [R] on [R].[Guid] = [L].[BuildingGuid] and [R].[Kind] = 99 and [R].[Spid] = @@Spid 
		where
			[R].[Guid] Is Null
			and L.BuildingGuid <> 0x0
			and ([ContractGuid] is not Null or @UnLinkContract = 0)
	end
	

	update #R Set CostDebit = substring(Co.code +'-'+ Co.Name, 0, 256)
	From
		#R R
		inner join Cost Co on R.CostGuid = Co.Guid

	update #R Set CostCredit = substring(Co.code +'-'+ Co.Name, 0, 256)
	From
		#R R
		inner join Cost Co on R.CostObverseGuid = Co.Guid

	Set @Msg = @MsgConst+' '+ '.........'
	exec PrcSetProgrss @Msg, 100, 95


	--Res1 
	Select Distinct *
		,0 As [OPeration] 
	Into #RR
	From 
		#R
		
	Select
		*
		--,dbo.FnStrToAscii([No]) as [Sort_No]
	From
		#RR
 	Order By
 		--dbo.FnStrToAscii([No]), 
 		[No],[dueDate]


	Update #RR
	Set 
		[IsPosted] = IsNull([IsPosted],''),
		[IsCollection] = IsNull([IsCollection],''),
		[IsPartialCollection] = IsNull([IsPartialCollection],''),
		[IsEndorsement] = IsNull([IsEndorsement],''),
		[IsReturned] = IsNull([IsReturned],'')
		
	Set @Msg = @MsgConst+' '+ '..........'
	exec PrcSetProgrss @Msg, 100, 95

	-- Res2
	Select
		[TypeName],
		--NotPosted
		Case when IsNull([IsPosted],'') = '' and (IsNull([IsCollection],'') = '' and IsNull([IsPartialCollection],'') = '')
				and (IsNull([IsEndorsement],'') = '') and IsNull([IsReturned],'') = '' 
		then Count(*) end as [IsNotPosted],
		
		Case when IsNull([IsPosted],'') = '' and (IsNull([IsCollection],'') = '' and IsNull([IsPartialCollection],'') = '')
				and (IsNull([IsEndorsement],'') = '') and IsNull([IsReturned],'') = '' 
		then Sum([Value]) end as [IsNotPostedValue],

		--Posted
		Case when 
					([IsPosted] <> '') and ([IsReturned] = '') and ([IsEndorsement] = '')
		then Count(*) end as [IsPosted],
		Case when 
					([IsPosted] <> '') and ([IsReturned] = '') and ([IsEndorsement] = '')
		then Sum([Value]) end as [IsPostedValue],

		--Collection
		Case when ([IsCollection] <> '' ) and (IsNull([IsReturned],'') = '') and(IsNull([IsEndorsement],'') = '')	
		then Count(*) end as [IsCollection],
		Case when ([IsCollection] <> '' ) and (IsNull([IsReturned],'') = '') and(IsNull([IsEndorsement],'') = '')	
		then Sum([Value]) end as [IsCollectionValue],

		--PartialCollection
		Case when 
			([IsPartialCollection] <> '' ) and ([IsCollection] = '') and ([IsEndorsement] = '')	
		then Count(*) end as [IsPartialCollection],
		Case when ([IsPartialCollection] <> '' ) and ([IsCollection] = '') and ([IsEndorsement] = '')	
		then Sum([CollectionValue]) end as [IsPartialCollectionValue],
		Case when ([IsPartialCollection] <> '' ) and ([IsCollection] = '') and ([IsEndorsement] = '')
		then Sum([restValue]) end as [RestValue],

		--Endorsement
		Case when ([IsEndorsement] <> '') and ([IsReturned] = '') 
		then Count(*) end as [IsEndorsement],
		Case when ([IsEndorsement] <> '') and ([IsReturned] = '') 
		then Sum([Value]) end as [IsEndorsementValue],

		--Returned
		Case when ([IsReturned] <> '' ) and ([IsPartialCollection] = '')
		then Count(*) end as [IsReturned],
		Case when ([IsReturned] <> '')  and ([IsPartialCollection] = '')
		then Sum([Value]) end as [IsReturnedValue],
		SUM([ReturnFine]) as [ReturnFine],

		Sum([Value]) as [Total],
		[checkkind]
	into #G
	From
		#RR
	Group By
		[TypeName],[Number],[checkkind],[IsPosted], [IsCollection],[IsPartialCollection], [IsEndorsement], [IsReturned]
	
		
	Set @Msg = @MsgConst+' '+ '...........'
	exec PrcSetProgrss @Msg, 100, 95
	
	Select
		[TypeName],
		Sum([IsNotPosted]) as [IsNotPosted],
		Sum([IsNotPostedValue]) as [IsNotPostedValue],
		Sum([IsPosted]) as [IsPosted],
		Sum([IsPostedValue]) as [IsPostedValue],
		Sum([IsCollection]) as [IsCollection],
		Sum([IsCollectionValue]) as [IsCollectionValue],
		Sum([IsPartialCollection]) as [IsPartialCollection],
		Sum([IsPartialCollectionValue]) as [IsPartialCollectionValue],
		Sum([RestValue]) as [RestValue],
		Sum([IsEndorsement]) as [IsEndorsement],
		Sum([IsEndorsementValue]) as [IsEndorsementValue],
		Sum([IsReturned]) as [IsReturned],
		Sum([IsReturnedValue]) as [IsReturnedValue],
		SUM([ReturnFine]) as [ReturnFine],
		isnull(Sum([IsNotPosted]),0)+isnull(Sum([IsPosted]),0) + isnull(Sum([IsCollection]),0) +	isnull(Sum([IsEndorsement]),0) +	isnull(Sum([IsReturned]),0) + isnull(Sum([IsPartialCollection]),0) [All],
		
		Sum([Total]) as [Total],
		Sum([Total]) * Case when [checkkind] = 0 then 1 else -1 end as [RTotal],
		0 as [Sort]
	Into #G2
	From
		#G
	Group By
		[TypeName], [checkkind]

	Insert into #G2
	Select
		dbo.SC('ÇáãÌãæÚ') as [TypeName],
		Sum([IsNotPosted]) as [IsNotPosted],
		Sum([IsNotPostedValue]) as [IsNotPostedValue],
		Sum([IsPosted]) as [IsPosted],
		Sum([IsPostedValue]) as [IsPostedValue],
		Sum([IsCollection]) as [IsCollection],
		Sum([IsCollectionValue]) as [IsCollectionValue],
		Sum([IsPartialCollection]) as [IsPartialCollection],
		Sum([IsPartialCollectionValue]) as [IsPartialCollectionValue],
		Sum([RestValue]) as [RestValue],
		Sum([IsEndorsement]) as [IsEndorsement],
		Sum([IsEndorsementValue]) as [IsEndorsementValue],
		Sum([IsReturned]) as [IsReturned],
		Sum([IsReturnedValue]) as [IsReturnedValue],
		SUM([ReturnFine]) as [ReturnFine],
		isnull(Sum([IsNotPosted]),0)+ isnull(Sum([IsPosted]),0) + isnull(Sum([IsCollection]),0) +	isnull(Sum([IsEndorsement]),0) +	isnull(Sum([IsReturned]),0) as [All],

		Sum([RTotal]) as [Total],
		Sum([RTotal]) as [RTotal],
		1 as [Sort]
	From
		#G2
	
	Set @Msg = ''
	exec PrcSetProgrss @Msg, 0, 0

	
	Select * from #G2  Order By Sort
	
	--ÇáãáÎÕ ÇáÓäæí
	Select 
		[TypeName],
		Case when dbo.FnMonth([DueDate]) = 1 then Sum([Value]) else 0 end as [Value1],
		Case when dbo.FnMonth([DueDate]) = 2 then Sum([Value]) else 0 end as [Value2],
		Case when dbo.FnMonth([DueDate]) = 3 then Sum([Value]) else 0 end as [Value3],
		Case when dbo.FnMonth([DueDate]) = 4 then Sum([Value]) else 0 end as [Value4],
		Case when dbo.FnMonth([DueDate]) = 5 then Sum([Value]) else 0 end as [Value5],
		Case when dbo.FnMonth([DueDate]) = 6 then Sum([Value]) else 0 end as [Value6],
		Case when dbo.FnMonth([DueDate]) = 7 then Sum([Value]) else 0 end as [Value7],
		Case when dbo.FnMonth([DueDate]) = 8 then Sum([Value]) else 0 end as [Value8],
		Case when dbo.FnMonth([DueDate]) = 9 then Sum([Value]) else 0 end as [Value9],
		Case when dbo.FnMonth([DueDate]) = 10 then Sum([Value]) else 0 end as [Value10],
		Case when dbo.FnMonth([DueDate]) = 11 then Sum([Value]) else 0 end as [Value11],
		Case when dbo.FnMonth([DueDate]) = 12 then Sum([Value]) else 0 end as [Value12]
	Into #Y
	from 
		#RR
	Group By
		[TypeName],
		[DueDate]


	Select
		[TypeName],
		Sum([Value1]) as [Value1],
		Sum([Value2]) as [Value2],
		Sum([Value3]) as [Value3],
		Sum([Value4]) as [Value4],
		Sum([Value5]) as [Value5],
		Sum([Value6]) as [Value6],
		Sum([Value7]) as [Value7],
		Sum([Value8]) as [Value8],
		Sum([Value9]) as [Value9],
		Sum([Value10]) as [Value10],
		Sum([Value11]) as [Value11],
		Sum([Value12]) as [Value12],
		Sum([Value1])+Sum([Value2])+Sum([Value3])+Sum([Value4])+Sum([Value5])+Sum([Value6])+Sum([Value7])+Sum([Value8])+Sum([Value9])+Sum([Value10])+Sum([Value11])+Sum([Value12]) as [All]
	from
		#Y
	Group By
		[TypeName]


	Declare @AllCount int
	Select @AllCount  = COUNT(*) from #R

	Select 
	[CustomerNationality], COUNT(*) as [Count] , 
	100.00 * COUNT(*) / @AllCount * 1.00 as [Percent] , @AllCount as AllCount from #R 
	group by
		[CustomerNationality]
	order by
		[Percent] desc
		
		

GO
/****** Object:  StoredProcedure [dbo].[PrcPaperMonetaryOfContract]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcPaperMonetaryOfContract]
(
	@ContractGuid UniqueIdentifier = 0x0
)
  
as
	Set NoCount On
	
	Select 
		dbo.SC([P].[TypeName]) as [PaperKind],
		[P].[No],
		[LL].[Value],
		[P].[BankName],
		[P].[CurrencyCode],
		[P].[DueDate],
		Case 		
			when  [C3].[CheckGuid] is not null then dbo.SC('ãÑÊÌÚ')

			when  ([C1].[CheckGuid] is not null) or 
				  ([C4].[CheckGuid] is Not Null ) and ([C4].[Value] >= [P].[Value])	 then dbo.SC('ãÍÕá') 

			when ([C4].[CheckGuid] is Not Null ) and ([C4].[Value] < [P].[Value]) then dbo.SC('ãÍÕá ÌÒÆíÇ')

			when  [C].[CheckGuid] is not null then dbo.SC('ãÑÍá') 
			when  [C2].[CheckGuid] is not null then dbo.SC('ãÙåÑ') 
		end as [State],
		[P].[Note3],
		[P].[Note],
		1 as [Print],
		[P].[Guid]
	From
		[vwChecks] [P]
		inner join [LinkCheckContract] LL on LL.ParentGuid = P.Guid
		left join [vwAllContract] [L] on [L].[Guid] = [LL].[ContractGuid]
		left join [vwChecksCollection] [C] on [C].[CheckGuid] = [P].[Guid] and [C].[Kind] = 0
		left join [vwChecksCollection] [C1] on [C1].[CheckGuid] = [P].[Guid] and [C1].[Kind] = 1
		left join [vwChecksCollection] [C2] on [C2].[CheckGuid] = [P].[Guid] and [C2].[Kind] = 2
		left join [vwChecksCollection] [C3] on [C3].[CheckGuid] = [P].[Guid] and [C3].[Kind] = 3
		left join (
						Select 
							[CheckGuid],
							Sum([Value]) as [Value] 
						From
							[ChecksPartialCollection] 
						Group By
							[CheckGuid]
					) [C4] on [C4].[CheckGuid] = [P].[Guid]
 	where
 		(LL.[ContractGuid] = @ContractGuid or @ContractGuid = 0x0)
--		and [P].[Number] = 2905
 	Order By 
 		[P].[dueDate], [P].[No]

GO
/****** Object:  StoredProcedure [dbo].[PrcPaperMonetaryOfElectricityBill]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcPaperMonetaryOfElectricityBill]
(
	@ContractGuid UniqueIdentifier = 0x0
)
  
as
	Set NoCount On
	
	Select 
		dbo.SC([P].[TypeName]) as [PaperKind],
		[P].[No],
		[LL].[Value],
		[P].[BankName],
		[P].[CurrencyCode],
		[P].[DueDate],
		Case 		
			when  [C3].[CheckGuid] is not null then dbo.SC('ãÑÊÌÚ')

			when  ([C1].[CheckGuid] is not null) or 
				  ([C4].[CheckGuid] is Not Null ) and ([C4].[Value] >= [P].[Value])	 then dbo.SC('ãÍÕá') 

			when ([C4].[CheckGuid] is Not Null ) and ([C4].[Value] < [P].[Value]) then dbo.SC('ãÍÕá ÌÒÆíÇ')

			when  [C].[CheckGuid] is not null then dbo.SC('ãÑÍá') 
			when  [C2].[CheckGuid] is not null then dbo.SC('ãÙåÑ') 
		end as [State],
		[P].[Note3],
		[P].[Note],
		1 as [Print],
		[P].[Guid]
	From
		[vwChecks] [P]
		inner join [LinkCheckContract] LL on LL.ParentGuid = P.Guid
		left join vwElectricityBill [L] on [L].[Guid] = [LL].[ContractGuid]
		left join [vwChecksCollection] [C] on [C].[CheckGuid] = [P].[Guid] and [C].[Kind] = 0
		left join [vwChecksCollection] [C1] on [C1].[CheckGuid] = [P].[Guid] and [C1].[Kind] = 1
		left join [vwChecksCollection] [C2] on [C2].[CheckGuid] = [P].[Guid] and [C2].[Kind] = 2
		left join [vwChecksCollection] [C3] on [C3].[CheckGuid] = [P].[Guid] and [C3].[Kind] = 3
		left join (
						Select 
							[CheckGuid],
							Sum([Value]) as [Value] 
						From
							[ChecksPartialCollection] 
						Group By
							[CheckGuid]
					) [C4] on [C4].[CheckGuid] = [P].[Guid]
 	where
 		(LL.[ContractGuid] = @ContractGuid or @ContractGuid = 0x0)
--		and [P].[Number] = 2905
 	Order By 
 		[P].[dueDate], [P].[No]

GO
/****** Object:  StoredProcedure [dbo].[PrcPaperMonetaryOfLawsuit]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcPaperMonetaryOfLawsuit]
(
	@LawsuitGuid UniqueIdentifier = 0x0
)
  
as
	Set NoCount On
	
	Select 
		dbo.SC([P].[TypeName]) as [PaperKind],
		[P].[No],
		[LL].[Value],
		[P].[BankName],
		[P].[CurrencyCode],
		[P].[DueDate],
		Case 		
			when  [C3].[CheckGuid] is not null then dbo.SC('ãÑÊÌÚ')

			when  ([C1].[CheckGuid] is not null) or 
				  ([C4].[CheckGuid] is Not Null ) and ([C4].[Value] >= [P].[Value])	 then dbo.SC('ãÍÕá') 

			when ([C4].[CheckGuid] is Not Null ) and ([C4].[Value] < [P].[Value]) then dbo.SC('ãÍÕá ÌÒÆíÇ')

			when  [C].[CheckGuid] is not null then dbo.SC('ãÑÍá') 
			when  [C2].[CheckGuid] is not null then dbo.SC('ãÙåÑ') 
		end as [State],
		[P].[Note3],
		1 as [Print],
		[P].[Guid]
	From
		[vwChecks] [P]
		inner join [LinkCheckContract] LL on LL.ParentGuid = P.Guid
		left join [vwAllContract] [L] on [L].[Guid] = [LL].[ContractGuid]
		left join [vwChecksCollection] [C] on [C].[CheckGuid] = [P].[Guid] and [C].[Kind] = 0
		left join [vwChecksCollection] [C1] on [C1].[CheckGuid] = [P].[Guid] and [C1].[Kind] = 1
		left join [vwChecksCollection] [C2] on [C2].[CheckGuid] = [P].[Guid] and [C2].[Kind] = 2
		left join [vwChecksCollection] [C3] on [C3].[CheckGuid] = [P].[Guid] and [C3].[Kind] = 3
		left join (
						Select 
							[CheckGuid],
							Sum([Value]) as [Value] 
						From
							[ChecksPartialCollection] 
						Group By
							[CheckGuid]
					) [C4] on [C4].[CheckGuid] = [P].[Guid]
 	where
 		(LL.[ContractGuid] = @LawsuitGuid or @LawsuitGuid = 0x0)
--		and [P].[Number] = 2905
 	Order By 
 		[P].[dueDate], [P].[No]

GO
/****** Object:  StoredProcedure [dbo].[PrcPaperMonetaryOfMaintenanceContract]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcPaperMonetaryOfMaintenanceContract]
(
	@ContractGuid UniqueIdentifier = 0x0
)
  
as
	Set NoCount On
	
	Select 
		dbo.SC([P].[TypeName]) as [PaperKind],
		[P].[No],
		[LL].[Value],
		[P].[BankName],
		[P].[CurrencyCode],
		[P].[DueDate],
		Case 		
			when  [C3].[CheckGuid] is not null then dbo.SC('ãÑÊÌÚ')

			when  ([C1].[CheckGuid] is not null) or 
				  ([C4].[CheckGuid] is Not Null ) and ([C4].[Value] >= [P].[Value])	 then dbo.SC('ãÍÕá') 

			when ([C4].[CheckGuid] is Not Null ) and ([C4].[Value] < [P].[Value]) then dbo.SC('ãÍÕá ÌÒÆíÇ')

			when  [C].[CheckGuid] is not null then dbo.SC('ãÑÍá') 
			when  [C2].[CheckGuid] is not null then dbo.SC('ãÙåÑ') 
		end as [State],
		[P].[Note3],
		[P].[Note],
		1 as [Print],
		[P].[Guid]
	From
		[vwChecks] [P]
		inner join [LinkCheckContract] LL on LL.ParentGuid = P.Guid
		left join vwMaintenanceContract [L] on [L].[Guid] = [LL].[ContractGuid]
		left join [vwChecksCollection] [C] on [C].[CheckGuid] = [P].[Guid] and [C].[Kind] = 0
		left join [vwChecksCollection] [C1] on [C1].[CheckGuid] = [P].[Guid] and [C1].[Kind] = 1
		left join [vwChecksCollection] [C2] on [C2].[CheckGuid] = [P].[Guid] and [C2].[Kind] = 2
		left join [vwChecksCollection] [C3] on [C3].[CheckGuid] = [P].[Guid] and [C3].[Kind] = 3
		left join (
						Select 
							[CheckGuid],
							Sum([Value]) as [Value] 
						From
							[ChecksPartialCollection] 
						Group By
							[CheckGuid]
					) [C4] on [C4].[CheckGuid] = [P].[Guid]
 	where
 		(LL.[ContractGuid] = @ContractGuid or @ContractGuid = 0x0)
--		and [P].[Number] = 2905
 	Order By 
 		[P].[dueDate], [P].[No]

GO
/****** Object:  StoredProcedure [dbo].[PrcPaperMonetaryOfServicesContract]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcPaperMonetaryOfServicesContract]
(
	@ContractGuid UniqueIdentifier = 0x0
)
  
as
	Set NoCount On
	
	Select 
		dbo.SC([P].[TypeName]) as [PaperKind],
		[P].[No],
		[LL].[Value],
		[P].[BankName],
		[P].[CurrencyCode],
		[P].[DueDate],
		Case 		
			when  [C3].[CheckGuid] is not null then dbo.SC('ãÑÊÌÚ')

			when  ([C1].[CheckGuid] is not null) or 
				  ([C4].[CheckGuid] is Not Null ) and ([C4].[Value] >= [P].[Value])	 then dbo.SC('ãÍÕá') 

			when ([C4].[CheckGuid] is Not Null ) and ([C4].[Value] < [P].[Value]) then dbo.SC('ãÍÕá ÌÒÆíÇ')

			when  [C].[CheckGuid] is not null then dbo.SC('ãÑÍá') 
			when  [C2].[CheckGuid] is not null then dbo.SC('ãÙåÑ') 
		end as [State],
		[P].[Note3],
		[P].[Note],
		1 as [Print],
		[P].[Guid]
	From
		[vwChecks] [P]
		inner join [LinkCheckContract] LL on LL.ParentGuid = P.Guid
		left join vwServicesContract [L] on [L].[Guid] = [LL].[ContractGuid]
		left join [vwChecksCollection] [C] on [C].[CheckGuid] = [P].[Guid] and [C].[Kind] = 0
		left join [vwChecksCollection] [C1] on [C1].[CheckGuid] = [P].[Guid] and [C1].[Kind] = 1
		left join [vwChecksCollection] [C2] on [C2].[CheckGuid] = [P].[Guid] and [C2].[Kind] = 2
		left join [vwChecksCollection] [C3] on [C3].[CheckGuid] = [P].[Guid] and [C3].[Kind] = 3
		left join (
						Select 
							[CheckGuid],
							Sum([Value]) as [Value] 
						From
							[ChecksPartialCollection] 
						Group By
							[CheckGuid]
					) [C4] on [C4].[CheckGuid] = [P].[Guid]
 	where
 		(LL.[ContractGuid] = @ContractGuid or @ContractGuid = 0x0)
--		and [P].[Number] = 2905
 	Order By 
 		[P].[dueDate], [P].[No]

GO
/****** Object:  StoredProcedure [dbo].[PrcPrintAcquittance]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcPrintAcquittance]
(
	@Guid uniqueidentifier = '262B85D7-CD9A-42A2-ADAD-CACA83A1558F'
)
  
as
	Create Table #Res
	(
		[CustomerName] Varchar(256),
		[BuildingName] Varchar(256),
		[Emirate] Varchar(256),
		[BuildingArea] Varchar(256),
		[Suburb] Varchar(256),
		[Street] Varchar(256),
		[BuildingNo] Varchar(256),
		[PieceNo] Varchar(256),
		[BasinNo] Varchar(256),
		[FlatNo] Varchar(256),
		[WaterCounter]Varchar(256),
		[ElectricityCounter] Varchar(256),
		[ContractElectricityCounter] Varchar(256),
		[ContractNo] Varchar(256),
	)


	insert into #Res
	Select 
		[Cu].[Name] as [CustomerName],
		[F].[BuildingName],
		[F].[Emirate],
		[F].[BuildingArea],
		[F].[Suburb],
		[F].[Street],
		[F].[BuildingNo],
		[F].[PieceNo],
		[F].[BasinNo],
		[F].[No] as [FlatNo],
		[F].[WaterCounter],
		[F].[ElectricityCounter],
		[C].[ElectricityCounter],
		[C].[ContractNo]
	From 
		[LeaseApartment] [C]
		inner join [vwApartment] [F] on [F].[Guid] = [C].[ApartmentGuid]
		inner join [Customer] [Cu] on [Cu].[Guid] = [C].[CustomerGuid]
	where
		[C]	.[Guid] = @Guid

	insert into #Res
	Select 
		[Cu].[Name] as [CustomerName],
		[F].[BuildingName],
		[F].[Emirate],
		[F].[BuildingArea],
		[F].[Suburb],
		[F].[Street],
		[F].[BuildingNo],
		'' as [PieceNo],
		'' as [BasinNo],
		[F].[No] as [FlatNo],
		[F].[WaterCounter],
		[F].[ElectricityCounter],
		[C].[ElectricityCounter],
		[C].[ContractNo]
	From 
		[LeaseApartment] [C]
		inner join [vwShop] [F] on [F].[Guid] = [C].[ApartmentGuid]
		inner join [Customer] [Cu] on [Cu].[Guid] = [C].[CustomerGuid]
	where
		[C]	.[Guid] = @Guid

	Select * from #Res


GO
/****** Object:  StoredProcedure [dbo].[PrcPrintApproachLeaveContract]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcPrintApproachLeaveContract]
  
as
	Declare @Check Bit,
			@NotCheck Bit
	Set @Check = 1
	Set @NotCheck = 0

	Select 
		[ContractNo],
		[B].[Name] as [BuildingName],
		[B].[ltnName] as [BuildingltnName],
		[B].[ArName] as [BuildingArName],
		Case when Isnull([A].[No], '') <> '' then [A].[No] else [S].[No] end as [No],
		Case when Isnull([A].[No], '') <> '' then dbo.SC('ÔÞÉ') else dbo.SC('ãÍá') end as [FlatKind],
		Case when Isnull([A].[No], '') <> '' then [A].[FloorNo] else Null end as [Floor],
		[cu].[Name] as [CustomerName],
		[cu].[ltnName] as [CustomerltnName],
		[cu].[arName] as [CustomerArName],
		[FromDate],
		[ToDate],
		[LeaveDate],
		DateDiff(Day, GetDate(), [LeaveDate]) as [Datediff],
		[LeaseKind],
		[L].[Note2],
		Null as [AlertPrint],
		[L].[Guid]
	From
		[vbLeaseApartment] [L]
		inner join [vwBuilding] [B] On [L].[BuildingGuid] = [B].[Guid]
		inner join [vwCustomer] [cu] on [cu].[Guid] = [L].[CustomerGuid]
		left join [vwApartment] [A] On [A].[Guid] = [L].[ApartmentGuid]
		left join [vwShop] [S] On [S].[Guid] = [L].[ApartmentGuid]
		inner join [Resource] [R] on [R].[Guid] = [L].[Guid] and [Spid] = @@Spid and [R].[Kind] = 2
	Order By 
		[B].[Name],
		DateDiff(Day, GetDate(), [LeaveDate]),
		[ContractNo],
		[Leave]

GO
/****** Object:  StoredProcedure [dbo].[PrcPrintBill]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcPrintBill]
(
	@TypeGuid uniqueidentifier = '3110620A-998A-416C-B0E4-B667418BB433',
	@CustAccountGuid uniqueidentifier = 0x0,
	@NumToNum Bit = 1,
	@Number1 int = 1,
	@Number2 int = 10,
	@Date1 Datetime = '2014-01-1',
	@Date2 Datetime = '2014-10-12'
)
  
as
	Select
		Bu.Guid
	into #BuGuid
	From
		Bill Bu	
	where
 		([Bu].[TypeGuid] = @TypeGuid or @TypeGuid = 0x0)
 		and ([Bu].[CustAccGuid] = @CustAccountGuid or @CustAccountGuid = 0x0)
 		and ([Bu].[Date] Between @Date1 And @Date2)
 		and (([Bu].[Number] Between @Number1 and @Number2) or (@NumToNum = 0))
 		and (([Bu].[Number] Not In (Select [Number] From [BillNumber] where [Kind] = 0) ) or (@NumToNum = 0))
 		and (([Bu].[Number] In (Select [Number] From [BillNumber] where [Kind] = 1)) or ( @NumToNum = 1))
 		 	
	Select
		Bu.*, 
		D.*
	From
		vwBill Bu	
		inner join [vwGetBillDetail] D on D.ParentGuid = BuGuid
		inner join #BuGuid G on G.Guid = BuGuid
	Order By
		BtName, BuNumber, d.Number

	Select
		G.Guid ,
		D.*
	From
		[vwBillDiscount] D
		inner join #BuGuid G on G.Guid = d.parentGuid
	Order By
		d.Number
 		

GO
/****** Object:  StoredProcedure [dbo].[PrcPrintCheck]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcPrintCheck]
(
	@Guid uniqueidentifier = 0x0,
	@OnlyValue Varchar(256) = '',
	@OnlyValueAr Varchar(256) = '',
	@OnlyValueEn Varchar(256) = ''
)
  
as
	Select 
		[S].[Number],
		[S].[SecLvl],
		[S].[TypeName],
		[S].[NO],
		[S].[Value],
		[my].[Code] as [Currency],
		[S].[CurrencyVal],
		[S].[Date],
		dbo.FnFormatDate([S].[Date]) as [Date_Gr],
		[S].[DueDate],
		dbo.FnFormatDate([S].[DueDate]) as [DueDate_Gr],
		[S].[EndDueDate],
		dbo.FnFormatDate([S].[EndDueDate]) as [EndDueDate_Gr],
		[S].[BankName],
		[ac].[code] as [AccountCode],
		[Ac].[Name] as [AccountName],
		[Ac].[ArName] as [AccountArName],
		[Ac].[LtnName] as [AccountLtnName],
		[ac2].[code] as [ObverseAccountCode],
		[Ac2].[Name] as [ObverseAccountName],
		[Ac2].[ArName] as [ObverseAccountArName],
		[Ac2].[LtnName] as [ObverseAccountLtnName],
		[S].[Beneficiary],
		[S].[Note],
		[S].[Note2],
		[S].[Note3],
		[S].[Note4],
		[S].[InternalNO],
		[S].[FolderDate],
		dbo.FnFormatDate([S].[FolderDate]) as [FolderDate_Gr],
		[S].[FolderInternalNo],
		[S].[FolderExternalNo],
		[S].[ReceiptNo] ,

		Cast('' as varchar(255)) as [FlatNo],
		Cast('' as varchar(255)) as [BuildingName],
		Cast('' as varchar(255)) as [BuildingArName],
		Cast('' as varchar(255)) as [BuildingLtnName],
		Cast(Null as Datetime) as [FromDate],
		Cast('' as varchar(255)) as [FromDate_Gr],
		Cast(Null as Datetime) as [ToDate],
		Cast('' as varchar(255)) as [ToDate_Gr],
		Cast('' as varchar(255)) as [ContractNo],
		@OnlyValue as [OnlyValue],
		@OnlyValueAr as [OnlyValueAr],
		@OnlyValueEn as [OnlyValueEn],

		Cast(Null as Float) as [ContractValue],
		Cast(Null as Float) as [ContractValueAfterDiscount],
		Cast('' as varchar(255)) as [Emirate],
		Cast('' as varchar(255)) as [BuildingArea],
		Cast('' as varchar(255)) as [Suburb],
		Cast('' as varchar(255)) as [Street],
		Cast('' as varchar(255)) as [BasinNo],
		Cast('' as varchar(255)) as [PieceNo],
		Cast('' as varchar(255)) as [BuildingNo],
		Cast('' as varchar(255)) as [BondType],
		Cast('' as varchar(255)) as [BondNo],
		Cast('' as varchar(255)) as [FlatKind],
		Cast('' as varchar(255)) as [ApartmentType],
		Cast('' as varchar(255)) as [Class],
		Cast('' as varchar(255)) as [FlatArea],
		Cast('' as varchar(255)) as [FlatAreaunity],

		Cast('' as varchar(255)) as [BuildingBankName],
		Cast('' as varchar(255)) as [BuildingBankAccCode],

		[Sl].[Name] as [SalesMan],
		[S].[TypeCode],
		[S].[TypeCode]+CAST(S.Number as Varchar(256)) as [TypeCode_Number],
		[Cu].[BankName] as [CustBankName],
		[Cu].[BankAccCode] as [CustBankAccCode],
		[Cu].[Mobile] as [CustMobile],
		[Cu].[PhoneJob] as [CustPhoneJob],
		[Cu].[AccountBalance] as [CustAccountBalance],
		[Cu].[Barcode] as [CustBarcode],
		[Cu].[BoxNo] as [CustBoxNo],
		[Cu].[EMail] as [CustEMail],
		Cast(0 as varchar(255)) as [ContractDiscountValue],
		Cast(0 as int) as [EntryNumber],
		[S].[Guid] as [checkGuid],
		[S].[ContractGuid]
	into #Check
	From 
		[vwChecks] [S]
		inner join [vwAccount] [Ac] on [Ac].[Guid] = [S].[Account]
		left join [vwCurrency] [My] On [My].[Guid] = [S].[CurrencyGuid]
		inner join [vwaccount] [ac2] on [ac2].[Guid] = [S].[ObverseAccount]
		--left join [vwLeaseApartment] [C] on [C].[Guid] = [S].[ContractGuid]
		left join [vwSalesMan] [Sl] on [Sl].[Guid] = [S].[SalesManGuid]
		left join [vwCustomer] Cu on Cu.AcGuid = S.Account
	where
		[S].[Guid] = @Guid or @Guid = 0x0
		
	
	update 
		#Check
	Set
		[FlatNo] = C.[FlatNo],
		[BuildingName] = C.[BuildingName],
		[BuildingArName] = C.[BuildingArName],
		[BuildingLtnName] = C.[BuildingLtnName],
		[FromDate] = C.[FromDate],
		[FromDate_Gr] = dbo.FnFormatDate([C].[FromDate]),
		[ToDate] = [C].[ToDate],
		[ToDate_Gr] = dbo.FnFormatDate([C].[ToDate]),
		[ContractNo] = C.[ContractNo],

		[ContractValue] = C.[Rent],
		[ContractValueAfterDiscount] = [C].RentAfterDiscount,
		[Emirate] = [C].[Emirate],
		[BuildingArea] = [C].[BuildingArea],
		[Suburb] = [C].[Suburb],
		[Street] = [C].[Street],
		[BasinNo] = [C].[BasinNo],
		[PieceNo] = [C].[PieceNo],
		[BuildingNo] = [C].[BuildingNo],
		[BondType] = [C].[BondType],
		[BondNo] = [C].[BondNo],
		
		[FlatKind] = [C].[FlatKind],
		[ApartmentType] = [C].[ApartmentType],
		[Class] = [C].[Class],
		[FlatArea] = [C].[FlatArea],
		[FlatAreaunity] = [C].[FlatAreaunity],

		[BuildingBankName] = [C].[BuildingBankName],
		[BuildingBankAccCode] = [C].[BuildingBankAccCode],

		[ContractDiscountValue] = C.DiscountValue 
	From
		#Check S
		inner join [vwLeaseApartment] [C] on [C].[Guid] = [S].[ContractGuid]
		
	update 
		#Check
	Set
		[FlatNo] = C.parkingNo ,
		[BuildingName] = C.[BuildingName],
		[BuildingArName] = C.[BuildingArName],
		[BuildingLtnName] = C.[BuildingLtnName],
		[FromDate] = C.[FromDate],
		[FromDate_Gr] = dbo.FnFormatDate([C].[FromDate]),
		[ToDate] = [C].[ToDate],
		[ToDate_Gr] = dbo.FnFormatDate([C].[ToDate]),
		[ContractNo] = C.[ContractNo],

		[ContractValue] = C.[Rent],
		[ContractValueAfterDiscount] = [C].RentAfterDiscount,
		[Emirate] = [C].[Emirate],
		--[BuildingArea] = [C].[BuildingArea],
		--[Suburb] = [C].[Suburb],
		--[Street] = [C].[Street],
		--[BasinNo] = [C].[BasinNo],
		--[PieceNo] = [C].[PieceNo],
		--[BuildingNo] = [C].[BuildingNo],
		--[BondType] = [C].[BondType],
		--[BondNo] = [C].[BondNo],
		--[FlatKind] = [C].[FlatKind],
		--[ApartmentType] = [C].[ApartmentType],
		--[Class] = [C].[Class],
		--[FlatArea] = [C].[FlatArea],
		--[FlatAreaunity] = [C].[FlatAreaunity],

		--[BuildingBankName] = [C].[BuildingBankName],
		--[BuildingBankAccCode] = [C].[BuildingBankAccCode],

		[ContractDiscountValue] = C.DiscountValue 
	From
		#Check S
		inner join [vwParkingContract] [C] on [C].[Guid] = [S].[ContractGuid]

	
	--ÑÞã ÇáÞíÏ
	Update #Check Set [EntryNumber] = Ce.Number
	From
		#Check C
		inner join [LinkEntry_Checks] L on L.CheckGuid = C.[checkGuid]
		inner join [HEntry] Ce on L.EntryGuid = Ce.Guid
	where
		L.Kind = 1600

	Select * from #Check

GO
/****** Object:  StoredProcedure [dbo].[PrcPrintCheckCustom]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcPrintCheckCustom]
(
	@FlatGuid UniqueIdentifier = 0x0,
	@ShopGuid UniqueIdentifier = 0x0,
	@ParkingGuid UniqueIdentifier = 0x0
)
  
as
	Set NoCount On

	Declare @Check Bit,
			@NotCheck Bit
	Set @Check = 1
	Set @NotCheck = 0


	Create 	Table #R
	(
		[Number] int,
		[ReceiptNo] Float,
		[TypeName] Varchar(256),
		[IsPosted]Varchar(256),
		[IsCollection]Varchar(256),
		[IsEndorsement]Varchar(256),
		[IsReturned]Varchar(256),

		[CollectionValue] Float,		
		[RestValue] Float,		

		[PostedDate] Datetime,
		[CollectionDate] Datetime,
		[EndorsementDate] Datetime,
		[ReturnedDate] Datetime,
		[ReturnFine] Float,

		[AccountCode]Varchar(256),
		[AccountName]Varchar(256),
		[AccountNameAr]Varchar(256),
		[AccountNameLtn]Varchar(256),
		[No] bigint,
		[Value] Float,
		[Date] DateTime,
		[DueDate] DateTime,
		[BankName]Varchar(256),
		[Note] Varchar(256),
		[Note3] Varchar(256),
		[BuildingName] Varchar(256),
		[BuildingLtnName] Varchar(256),

		[ContractNo] Varchar(256),
		[RentAfterDiscount] Float,
		[Contract_FromDate] Datetime,
		[Contract_ToDate] Datetime,

		[FlatNo] Varchar(256),
		[FloorNo] Varchar(256),
		[Check] Bit,
		[checkkind] int,
		[Guid] UniqueIdentifier,

		[Emirate] Varchar(256),
		[BuildingArea] Varchar(256),
		[Suburb] Varchar(256),
		[Street] Varchar(256),
		[BasinNo] Varchar(256),
		[PieceNo] Varchar(256),
		[BuildingNo] Varchar(256),
		[BondType] Varchar(256),
		[BondNo] Varchar(256),
		[FlatKind] Varchar(256),
		[ApartmentType] Varchar(256),
		[Class] Varchar(256),
		[FlatArea] Varchar(256),
		[FlatAreaunity] Varchar(256),
		[CustomerPhonejob]  Varchar(256),
		[CustomerMobile] Varchar(256),
		[CustomerNationality] Varchar(256),
		[EntryNo] int,
		[Tag] int
	)


	if @ParkingGuid = 0x0 and  @FlatGuid = 0x0 and @ShopGuid = 0x0
	Insert into #R
	Select 
		[P].[Number],
		[P].[ReceiptNo],
		[P].[TypeName],

		Case when [C].[CheckGuid] is null then '' else dbo.SC('ãÑÍá') end as [IsPosted],
		Case when [C1].[CheckGuid] is null then '' else dbo.SC('ãÍÕá') end as [IsCollection],
		Case when [C2].[CheckGuid] is null then '' else dbo.SC('ãÙåÑ') end as [IsEndorsement],
		Case when [C3].[CheckGuid] is null then '' else dbo.SC('ãÑÊÌÚ') end as [IsReturned],

		0 as [CollectionValue],
		0 as [RestValue],		

		[C].[Date] as [PostedDate],
		[C1].[Date] as [CollectionDate],
		[C2].[Date] as [EndorsementDate],
		[C3].[Date] as [ReturnedDate],
		[C3].[Delay] as [ReturnFine],

		[P].[AccountCode],
		[P].[AccountName],
		[P].[AccountNameAr],
		[P].[AccountNameLtn]

		,[P].[No]
		,[P].[Value]
		,[P].[Date]
		,[P].[DueDate]
		,[P].[BankName]
		,[P].[Note]
		,[P].[Note3]
		,'' as [BuildingName]
		,'' as [BuildingLtnName]
		,'' as [ContractNo]
		,0 as [RentAfterDiscount]
		,Null as [Contract_FromDate]
		,Null as [Contract_ToDate]
		,'' as [FlatNo]
		,'' as  [FloorNo]
		,Case when [R].[ObjGuid] is null then ( @NotCheck )
			 when [R].[ObjGuid] is not null  then @Check end as [Check]
		,[checkkind]
		,[P].[Guid]

		,'' as [Emirate]
		,'' as [BuildingArea]
		,'' as [Suburb]
		,'' as [Street]
		,'' as [BasinNo]
		,'' as [PieceNo]
		,'' as [BuildingNo]
		,'' as [BondType]
		,'' as [BondNo]
		,'' as [FlatKind]
		,'' as [ApartmentType]
		,'' as [Class]
		,'' as [FlatArea]
		,'' as [FlatAreaunity]
		,'' as [CustomerPhonejob]
		,'' as [CustomerMobile]
		,'' as [CustomerNationality]
		,0 as [EntryNo]
		,RS.Tag 
	From
		[vwChecks] [P]
		left join [RepCheck] [R] on [R].[ObjGuid] = [P].[Guid] and [R].[IdReport] = 3000
		inner join [Resource] [RS] on [RS].[Guid] = [P].[Guid]   and [RS].[Spid] = @@Spid and [RS].[Kind] = 3000
		left join [vwChecksCollection] [C] on [C].[CheckGuid] = [P].[Guid] and [C].[Kind] = 0
		left join [vwChecksCollection] [C1] on [C1].[CheckGuid] = [P].[Guid] and [C1].[Kind] = 1
		left join [vwChecksCollection] [C2] on [C2].[CheckGuid] = [P].[Guid] and [C2].[Kind] = 2
		left join [vwChecksCollection] [C3] on [C3].[CheckGuid] = [P].[Guid] and [C3].[Kind] = 3
	where
		([P].[ContractGuid] is null)

	if @ParkingGuid = 0x0 and  @FlatGuid = 0x0 and @ShopGuid = 0x0
	Insert into #R
	Select 
		[P].[Number],
		[P].[ReceiptNo],
		[P].[TypeName],

		Case when [C].[CheckGuid] is null then '' else dbo.SC('ãÑÍá') end as [IsPosted],
		Case when [C1].[CheckGuid] is null then '' else dbo.SC('ãÍÕá') end as [IsCollection],
		Case when [C2].[CheckGuid] is null then '' else dbo.SC('ãÙåÑ') end as [IsEndorsement],
		Case when [C3].[CheckGuid] is null then '' else dbo.SC('ãÑÊÌÚ') end as [IsReturned],

		0 as [CollectionValue],
		0 as [RestValue],		

		[C].[Date] as [PostedDate],
		[C1].[Date] as [CollectionDate],
		[C2].[Date] as [EndorsementDate],
		[C3].[Date] as [ReturnedDate],
		[C3].[Delay] as [ReturnFine],

		[P].[AccountCode],
		[P].[AccountName],
		[P].[AccountNameAr],
		[P].[AccountNameLtn]

		,[P].[No]
		,[P].[Value]
		,[P].[Date]
		,[P].[DueDate]
		,[P].[BankName]
		,[P].[Note]
		,[P].[Note3]
		,'' as [BuildingName]
		,'' as [BuildingLtnName]
		,[L].[ContractNo]
		,[L].[Rent] as [RentAfterDiscount]
		,[L].[FromDate] as [Contract_FromDate]
		,[L].[ToDate] as [Contract_ToDate]
		,[L].[Name] as [FlatNo]
		,'' as [FloorNo]
		,Case when [R].[ObjGuid] is null then ( @NotCheck )
			 when [R].[ObjGuid] is not null  then @Check end as [Check]
		,[checkkind]
		,[P].[Guid]

		,'' as [Emirate]
		,'' as [BuildingArea]
		,'' as [Suburb]
		,'' as [Street]
		,'' as [BasinNo]
		,'' as [PieceNo]
		,'' as [BuildingNo]
		,'' as [BondType]
		,'' as [BondNo]
		,Case when [ContractKind] = 6 or [ContractKind] = 7 then dbo.SC('ÃÑÖ')
		 when [ContractKind] = 8 or [ContractKind] = 9 then dbo.SC('ÝíáÇ')
		end 
		as [FlatKind]
		,'' as [ApartmentType]
		,'' as [Class]
		,'' as [FlatArea]
		,'' as [FlatAreaunity]
		,[L].[CustomerPhonejob]
		,[L].[CustomerMobile]
		,L.[CustomerNationality]
		,0 as [EntryNo]
		,RS.Tag 
	From
		[vwChecks] [P]
		inner join [vwLandContract] [L] on [L].[Guid] = [P].[ContractGuid]
		left join [RepCheck] [R] on [R].[ObjGuid] = [P].[Guid] and [R].[IdReport] = 3000
		inner join [Resource] [RS] on [RS].[Guid] = [P].[Guid]  and [RS].[Spid] = @@Spid and [RS].[Kind] = 3000
		left join [vwChecksCollection] [C] on [C].[CheckGuid] = [P].[Guid] and [C].[Kind] = 0
		left join [vwChecksCollection] [C1] on [C1].[CheckGuid] = [P].[Guid] and [C1].[Kind] = 1
		left join [vwChecksCollection] [C2] on [C2].[CheckGuid] = [P].[Guid] and [C2].[Kind] = 2
		left join [vwChecksCollection] [C3] on [C3].[CheckGuid] = [P].[Guid] and [C3].[Kind] = 3
		
	if (@ParkingGuid = 0x0) --and Not (@FlatGuid = 0x0 and @ShopGuid = 0x0)
	Insert into #R
	Select 
		[P].[Number],
		[P].[ReceiptNo],
		[P].[TypeName],

		Case when [C].[CheckGuid] is null then '' else dbo.SC('ãÑÍá') end as [IsPosted],
		Case when [C1].[CheckGuid] is null then '' else dbo.SC('ãÍÕá') end as [IsCollection],
		Case when [C2].[CheckGuid] is null then '' else dbo.SC('ãÙåÑ') end as [IsEndorsement],
		Case when [C3].[CheckGuid] is null then '' else dbo.SC('ãÑÊÌÚ') end as [IsReturned],

		0 as [CollectionValue],
		0 as [RestValue],		

		[C].[Date] as [PostedDate],
		[C1].[Date] as [CollectionDate],
		[C2].[Date] as [EndorsementDate],
		[C3].[Date] as [ReturnedDate],
		[C3].[Delay] as [ReturnFine],

		[P].[AccountCode],
		[P].[AccountName],
		[P].[AccountNameAr],
		[P].[AccountNameLtn]

		,[P].[No]
		,[P].[Value]
		,[P].[Date]
		,[P].[DueDate]
		,[P].[BankName]
		,[P].[Note]
		,[P].[Note3]
		,[L].[BuildingName]
		,[L].[BuildingLtnName]
		,[L].[ContractNo]
		,L.[RentAfterDiscount]
		,[L].[FromDate] as [Contract_FromDate]
		,[L].[ToDate] as [Contract_ToDate]
		,[L].[FlatNo]
		,[L].[FloorNo]
		,Case when [R].[ObjGuid] is null then ( @NotCheck )
			 when [R].[ObjGuid] is not null  then @Check end as [Check]
		,[checkkind]
		,[P].[Guid]

		,[L].[Emirate]
		,[L].[BuildingArea]
		,[L].[Suburb]
		,[L].[Street]
		,[L].[BasinNo]
		,[L].[PieceNo]
		,[L].[BuildingNo]
		,[L].[BondType]
		,[L].[BondNo]
		,[L].[FlatKind]
		,[L].[ApartmentType]
		,[L].[Class]
		,[L].[FlatArea]
		,[L].[FlatAreaunity]
		,[L].[CustomerPhonejob]
		,[L].[CustomerMobile]
		,L.[CustomerNationality]
		,0 as [EntryNo]
		,RS.Tag 
	From
		[vwChecks] [P]
		inner join [vwLeaseApartment] [L] on [L].[Guid] = [P].[ContractGuid]
		left join [RepCheck] [R] on [R].[ObjGuid] = [P].[Guid] and [R].[IdReport] = 3000
		inner join [Resource] [RS] on [RS].[Guid] = [P].[Guid]  and [RS].[Spid] = @@Spid and [RS].[Kind] = 3000
		left join [vwChecksCollection] [C] on [C].[CheckGuid] = [P].[Guid] and [C].[Kind] = 0
		left join [vwChecksCollection] [C1] on [C1].[CheckGuid] = [P].[Guid] and [C1].[Kind] = 1
		left join [vwChecksCollection] [C2] on [C2].[CheckGuid] = [P].[Guid] and [C2].[Kind] = 2
		left join [vwChecksCollection] [C3] on [C3].[CheckGuid] = [P].[Guid] and [C3].[Kind] = 3


	if (@FlatGuid = 0x0 and @ShopGuid = 0x0) --and @ParkingGuid <> 0x0
	Insert into #R
	Select 
		[P].[Number],
		[P].[ReceiptNo],
		[P].[TypeName],

		Case when [C].[CheckGuid] is null then '' else dbo.SC('ãÑÍá') end as [IsPosted],
		Case when [C1].[CheckGuid] is null then '' else dbo.SC('ãÍÕá') end as [IsCollection],
		Case when [C2].[CheckGuid] is null then '' else dbo.SC('ãÙåÑ') end as [IsEndorsement],
		Case when [C3].[CheckGuid] is null then '' else dbo.SC('ãÑÊÌÚ') end as [IsReturned],

		0 as [CollectionValue],
		0 as [RestValue],		

		[C].[Date] as [PostedDate],
		[C1].[Date] as [CollectionDate],
		[C2].[Date] as [EndorsementDate],
		[C3].[Date] as [ReturnedDate],
		[C3].[Delay] as [ReturnFine],

		[Ac].[Code] as [AccountCode],
		[Ac].[Name] as [AccountName],
		[Ac].[ArName] as [AccountNameAr],
		[Ac].[LtnName] as [AccountNameLtn]

		,[P].[No]
		,[P].[Value]
		,[P].[Date]
		,[P].[DueDate]
		,[P].[BankName]
		,[P].[Note]
		,[P].[Note3]
		,[L].[BuildingName]
		,[L].[BuildingLtnName]
		,[L].[ContractNo]
		,L.[Rent]
		,[L].[FromDate] as [Contract_FromDate]
		,[L].[ToDate] as [Contract_ToDate]

		,[L].[PNo]
		,'' as [FloorNo]
		,Case when [R].[ObjGuid] is null then ( @NotCheck )
			 when [R].[ObjGuid] is not null  then @Check end as [Check],
		[checkkind],	
		[P].[Guid]

		,[L].[Emirate]
		,[L].[BuildingArea]
		,[L].[Suburb]
		,[L].[Street]
		,[L].[BasinNo]
		,[L].[PieceNo]
		,[L].[BuildingNo]
		,[L].[BondType]
		,[L].[BondNo]
		,'' as [FlatKind]
		,'' as [ApartmentType]
		,[L].[Class]
		,[L].[FlatArea]
		,[L].[FlatAreaunity]
		,[L].[CustomerPhonejob]
		,[L].[CustomerMobile]
		,L.[CustomerNationality]
		,0 as [EntryNo]
		,RS.Tag 
	From
		[vwChecks] [P]
		Inner Join [vwAccount] [Ac] On [P].[Account] = [Ac].[Guid]
		inner join (
					Select [LL].*, 
							--[B].[Emirate],
							[B].[Area] as [BuildingArea],
							[B].[Suburb],
							[B].[Street],
							[B].[BasinNo],
							[B].[PieceNo],
							[B].[BuildingNo],
							[B].[BondType],
							[B].[BondNo],
							'' as [Class],
							[F].[Area] as [FlatArea],
							[F].[unity] as [FlatAreaunity]
					From
						[vwParkingContract] [LL]
						inner join [Building] [B] on [B].[Guid] = [LL].[BuildingGuid]
						inner join [Parking] [F] on [F].[Guid] = [LL].[ParkingGuid]
			)[L] on [L].[Guid] = [P].[ContractGuid]
		left join [RepCheck] [R] on [R].[ObjGuid] = [P].[Guid] and [R].[IdReport] = 3000
		inner join [Resource] [RS] on [RS].[Guid] = [P].[Guid]   and [RS].[Spid] = @@Spid and [RS].[Kind] = 3000
		left join [vwChecksCollection] [C] on [C].[CheckGuid] = [P].[Guid] and [C].[Kind] = 0
		left join [vwChecksCollection] [C1] on [C1].[CheckGuid] = [P].[Guid] and [C1].[Kind] = 1
		left join [vwChecksCollection] [C2] on [C2].[CheckGuid] = [P].[Guid] and [C2].[Kind] = 2
		left join [vwChecksCollection] [C3] on [C3].[CheckGuid] = [P].[Guid] and [C3].[Kind] = 3


	--ÑÞã ÓäÏ ÇáÞíÏ
	UpDate #R Set EntryNo = [L].[EntryNum] 
	From
		#R R
		inner join [LinkEntry_Checks] L on l.CheckGuid = R.Guid


	--ãÚÇáÌÉ ÇáÊÍÕíá ÇáÌÒÆí
	Update
		#R
	Set IsCollection = dbo.SC('ãÍÕá ÌÒÆíÇõ'),
		[CollectionValue] = [C].[Value],
		[RestValue] = [R].[Value] - [C].[Value]
	From
		#R [R]
		inner join (
						Select 
							[CheckGuid],
							Sum([Value]) as [Value] 
						From
							[ChecksPartialCollection] 
						Group By
							[CheckGuid]
					) [C] on [C].[CheckGuid] = [R].[Guid]


	Create Table [#TblId]
	(
		[Guid] Uniqueidentifier,
		[Id] int Identity(1,1)
	)
	
	Insert into #TblId
	([Guid])
	Select [Guid] From #R
	Order By [Tag],[ReceiptNo],[dueDate], [No]

	Alter Table #R Add [Id] int

	Declare @MaxReceiptNo Float
	Set @MaxReceiptNo = (Select isNull(Max([ReceiptNo]),0) From [Checks] )

	--ÊÚÏíá ÇáÃÑÞÇã Ýí ÇáÊÞÑíÑ
	UpDate #R Set [ReceiptNo] = @MaxReceiptNo + [T].[Id]
	From
		#R [R]
		inner join [#TblId] [T] on [T].[Guid] = [R].[Guid]
	where
		isnull([ReceiptNo],0) = 0

	--ÊÚÏíá ÇáÃÑÞÇã Ýí ÇáÇæÑÇÞ ÇáãÇáíÉ
	UpDate [Checks] Set [ReceiptNo] = @MaxReceiptNo + [T].[Id]
	From
		[Checks] [R]
		inner join [#TblId] [T] on [T].[Guid] = [R].[Guid]
	where
		isnull([ReceiptNo],0) = 0

	Select 
		[R].*,
		[O].[Only],
		[O].[LtnOnly],
		0 As [OPeration] 
	From 
		#R [R]
		inner join [OnlyCheck] [O] on [O].[Guid] = [R].[Guid]   and [O].[Spid] = @@Spid
 	Order By 
 		Tag, [dueDate], [No], ReceiptNo


	/*
	-- Res2
	Select
		[TypeName],
		Case when [IsPosted] = '' and [IsCollection] = ''
				and ([IsEndorsement] = '') and [IsReturned] = '' then Count(*) end as [IsNotPosted],

		Case when 
					([IsPosted] <> '') and ([IsReturned] = '') 
		then Count(*) end as [IsPosted],

		Case when ([IsCollection] <> '') and ([IsPosted] = '') and ([IsReturned] = '') 
				and([IsEndorsement] = '')	
		then Count(*) end as [IsCollection],

		Case when ([IsEndorsement] <> '') and ([IsReturned] = '') 
		then Count(*) end as [IsEndorsement],

		Case when [IsReturned] <> '' 
		then Count(*) end as [IsReturned],

		Sum([Value]) as [Total],
		[checkkind]
	into #G
	From
		#R
	Group By
		[TypeName],[Number],[checkkind],[IsPosted], [IsCollection], [IsEndorsement], [IsReturned]
		
	Select
		[TypeName],
		Sum([IsNotPosted]) as [IsNotPosted],
		Sum([IsPosted]) as [IsPosted],
		Sum([IsCollection]) as [IsCollection],
		Sum([IsEndorsement]) as [IsEndorsement],
		Sum([IsReturned]) as [IsReturned],
		isnull(Sum([IsNotPosted]),0)+isnull(Sum([IsPosted]),0) + isnull(Sum([IsCollection]),0) +	isnull(Sum([IsEndorsement]),0) +	isnull(Sum([IsReturned]),0) as [All],
		Sum([Total]) as [Total],
		Sum([Total]) * Case when [checkkind] = 0 then 1 else -1 end as [RTotal],
		0 as [Sort]
	Into #G2
	From
		#G
	Group By
		[TypeName], [checkkind]
	
	Insert into #G2
	Select
		dbo.SC('ÇáÑÕíÏ') as [TypeName],
		Sum([IsNotPosted]) as [IsNotPosted],
		Sum([IsPosted]) as [IsPosted],
		Sum([IsCollection]) as [IsCollection],
		Sum([IsEndorsement]) as [IsEndorsement],
		Sum([IsReturned]) as [IsReturned],
		isnull(Sum([IsNotPosted]),0)+ isnull(Sum([IsPosted]),0) + isnull(Sum([IsCollection]),0) +	isnull(Sum([IsEndorsement]),0) +	isnull(Sum([IsReturned]),0) as [All],
		Sum([RTotal]) as [Total],
		Sum([RTotal]) as [RTotal],
		1 as [Sort]
	From
		#G2
	
	Select * from #G2 Order By Sort
	*/
	Declare @AllCount int
	Select @AllCount  = COUNT(*) from #R


	Select 
		[CustomerNationality], 
		COUNT(*) as [Count] , 
		100.00 * COUNT(*) / @AllCount * 1.00 as [Percent] , 
		@AllCount as AllCount 
	from 
		#R 
	group by
		[CustomerNationality]
	order by
		[Percent] desc

GO
/****** Object:  StoredProcedure [dbo].[PrcPrintChecksCollection]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcPrintChecksCollection]
(
	@Guid uniqueidentifier = '{75346B1E-EB43-4E30-A7BE-7236F6EC2F5B}',
	@Kind int = 1,
	@Only Varchar(256) = '',
	@OnlyAr Varchar(256) = '',
	@OnlyEn Varchar(256) = ''
)
  
as

	Select
		L.CheckGuid,
		T.Name as [EntryTypeName],
		T.ltnName as [EntryTypeLtnName],
		S.Number as EntryNumber,
		H.Number as MainEntryNumber
	into #LinkEntryType_Checks
	From
		LinkEntryType_Checks L
		inner join Secondary_Entry S on S.Guid = L.EntryGuid
		left join HEntry H on H.Guid = S.Guid
		inner join [EntryType] T on T.Guid = S.TypeGuid
	where
		L.CheckGuid = @Guid
	
	insert into #LinkEntryType_Checks	
	Select Distinct
		L.CheckGuid,
		dbo.SC('ÓäÏ ÞíÏ'),
		dbo.SC('ÓäÏ ÞíÏ') as [EntryTypeLtnName],
		H.Number as EntryNumber,
		H.Number as MainEntryNumber	
	From
		LinkEntry_Checks L
		inner join HEntry H on H.Guid = L.EntryGuid
	where
		L.CheckGuid = @Guid
		and L.Kind = 1660+@Kind

	--Select * from #LinkEntryType_Checks
		
	Select 
			[T].[Code] as [TypeCode],
			[T].[Code] as [TypeCode_Number],
			[T].[Code]+CAST(C.Number as Varchar(256)) as [Check_TypeCode_Number],
			[C].[No] as [CheckNo],
			C.Number as [CheckNumber],
			[C].[DueDate] as [CheckDueDate],
			[BuildingName],
			[BuildingArName],
			[BuildingLtnName],
			[C1].[Code] as [DebitAccountCode],
			[C1].[ArName] as [DebitAccountArName],
			[C1].[LtnName] as [DebitAccountLtnName],
			[C2].[Code] as [CreditAccountCode],
			[C2].[ArName] as [CreditAccountArName],
			[C2].[LtnName] as [CreditAccountLtnName],

			[C11].[Code] as [Note_DebitAccountCode],
			[C11].[ArName] as [Note_DebitAccountArName],
			[C11].[LtnName] as [Note_DebitAccountLtnName],
			[C22].[Code] as [Note_CreditAccountCode],
			[C22].[ArName] as [Note_CreditAccountArName],
			[C22].[LtnName] as [Note_CreditAccountLtnName],

			[M].[Code] as [CurrencyArCode],
			[M].[LtnCode] as [CurrencyltnCode],
			[M].[ArName] as [CurrencyArName],
			[M].[LtnName] as [CurrencyltnName],
			@Only as [Only],
			@OnlyAr as [OnlyAr],
			@OnlyEn as [OnlyEn],
			[FlatNo],
			[ContractNo],
			[L].[Rent] as [ContractValue],
			[P].[Date] as [OpDate],
			[P].FinishDate as [FinishDate],
			[C].[Value] as [CheckValue],

			[P].[Finished],
			[P].[ReturnCause],
			[P].FixReturn,
			[P].FixReturnNote,

			[P].[Note] as [OpNote],
			[P].[Commission],
			Case when [p].[Value] <> 0 then ([Commission] * 100) / [p].[Value] end as [CommissionPercent],
			
			[p].[CommNote],
			[C3].[ArName] as [DebitCommissionAccountArName],
			[C3].[LtnName] as [DebitCommissionAccountLtnName],
			[C4].[ArName] as [CreditCommissionAccountArName],
			[C4].[LtnName] as [CreditCommissionAccountLtnName],
			[Emirate],
			[L].[BuildingArea],
			[Suburb],
			[Street],
			[BasinNo],
			[PieceNo],
			[BuildingNo],
			[BondType],
			[BondNo],
			[L].[FlatKind],
			[L].[ApartmentType],
			[Class],
			[FlatArea],
			[FlatAreaunity],
			[C].[beneficiary],
			[C].[BankName],
			[Co1].[Name] as [CostDebit],
			[Co2].[Name] as [CostCredit],
			
			[Delay],
			[DelayNote],
			[DC1].[Code] as [DelayAccountDebitCode],
			[DC1].[ArName] as [DelayAccountDebitArName],
			[DC1].[LtnName] as [DelayAccountDebitLtnName],
			
			[DC2].[Code] as [DelayAccountCreditCode],
			[DC2].[ArName] as [DelayAccountCreditArName],
			[DC2].[LtnName] as [DelayAccountCreditLtnName],
				
			LK.*

	From 
		[ChecksCollection] [P]
		inner join [Checks] [C] on [C].[Guid] = [P].[CheckGuid]
		inner join CheckType T on T.Guid = C.TypeGuid
		left join [vwLeaseApartment] [L] on [C].[ContractGuid] = [L].[Guid]
		inner join [vwaccount] [C1] on [C1].[Guid] = [P].[DebitAccountGuid]
		inner join [vwaccount] [C2] on [C2].[Guid] = [P].[CreditAccountGuid]
		inner join [vwCurrency] [M] on [M].[Guid] = [P].[CurrencyGuid]
		
		left join [vwaccount] [C3] on [C3].[Guid] = [P].[CommAccountGuid]
		left join [vwaccount] [C4] on [C4].[Guid] = [P].[CommAccountCreditGuid]

		left join [vwCost] [Co1] on [Co1].[Guid] = [P].[DebitCostGuid]
		left join [vwCost] [Co2] on [Co2].[Guid] = [P].[CreditCostGuid]
		
		left join [vwaccount] [DC1] on [DC1].[Guid] = [P].[DelayAccountDebitGuid]
		left join [vwaccount] [DC2] on [DC2].[Guid] = [P].[DelayAccountCreditGuid]
		
		inner join [vwaccount] [C11] on [C11].[Guid] = [C].[Account]
		inner join [vwaccount] [C22] on [C22].[Guid] = [C].[ObverseAccount]
		left join #LinkEntryType_Checks LK on Lk.CheckGuid = P.CheckGuid		
		
	where
		[P].[CheckGuid] = @Guid
		and P.Kind = @Kind

GO
/****** Object:  StoredProcedure [dbo].[PrcPrintChecksPartialCollection]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcPrintChecksPartialCollection]
(
	@Guid uniqueidentifier = 0x0,
	@Only Varchar(256) = '',
	@OnlyAr Varchar(256) = '',
	@OnlyEn Varchar(256) = ''
)
  
as

	Select Top 1 
		C.Guid as CardGuid,
		T.Name as [EntryTypeName],
		T.ltnName as [EntryTypeLtnName],
		S.Number as EntryNumber,
		H.Number as MainEntryNumber
	into #LinkEntryType_Checks
	From 
		[Secondary_Entry] S 
		left join HEntry H on H.Guid = S.Guid
		inner join ChecksPartialCollection C on C.SecEntryGuid = S.Guid
		inner join [EntryType] T on T.Guid = S.TypeGuid
	where
		C.Guid = @Guid

	insert into #LinkEntryType_Checks	
	Select Distinct
		L.CheckGuid,
		dbo.SC('ÓäÏ ÞíÏ'),
		dbo.SC('ÓäÏ ÞíÏ') as [EntryTypeLtnName],
		H.Number as EntryNumber,
		H.Number as MainEntryNumber	
	From
		ChecksPartialCollection L
		inner join HEntry H on H.Guid = L.Guid
	where
		L.CheckGuid = @Guid

	Select 
			[T].[Code] as [TypeCode],
			[T].[Code]+CAST(P.Number as Varchar(256)) as [TypeCode_Number],
			[T].[Code]+CAST(C.Number as Varchar(256)) as [Check_TypeCode_Number],
			[P].[Number],
			[C].[No] as [CheckNo],
			[C].[DueDate] as [CheckDueDate],
			[BuildingName],
			[BuildingArName],
			[BuildingLtnName],
			[C1].[Code] as [DebitAccountCode],
			[C1].[ArName] as [DebitAccountArName],
			[C1].[LtnName] as [DebitAccountLtnName],
			[C2].[Code] as [CreditAccountCode],
			[C2].[ArName] as [CreditAccountArName],
			[C2].[LtnName] as [CreditAccountLtnName],
			[C].[AccountName],
			[C].ObverseAccountName,
			[M].[Code] as [CurrencyArCode],
			[M].[LtnCode] as [CurrencyltnCode],
			[M].[ArName] as [CurrencyArName],
			[M].[LtnName] as [CurrencyltnName],
			@Only as [Only],
			@OnlyAr as [OnlyAr],
			@OnlyEn as [OnlyEn],
			[FlatNo],
			[ContractNo],
			[L].[Rent] as [ContractValue],
			[P].[Date] as [CollectionDate],
			[P].[Value] as [CollectionValue],
			[C].[Value] as [CheckValue],
			[P2].[Value] as [OldCollectionValue],
			[C].[Value] - isnull([P2].[Value],0) - [P].[Value] as [RestCollectionValue],
			[P].[Note] as [CollectionNote],
			[P].[Commission],
			Case when [p].[Value] <> 0 then ([Commission] * 100) / [p].[Value] end as [CommissionPercent],
			[C3].[ArName] as [DebitCommissionAccountArName],
			[C3].[LtnName] as [DebitCommissionAccountLtnName],
			[C4].[ArName] as [CreditCommissionAccountArName],
			[C4].[LtnName] as [CreditCommissionAccountLtnName],
			[Emirate],
			[L].[BuildingArea],
			[Suburb],
			[Street],
			[BasinNo],
			[PieceNo],
			[BuildingNo],
			[BondType],
			[BondNo],
			[L].[FlatKind],
			[L].[ApartmentType],
			[Class],
			[FlatArea],
			[FlatAreaunity],
			[C].[beneficiary],
			[C].[BankName],
			L.FromDate as [ContractFromDate],
			L.ToDate as [ContractToDate],
			L.DiscountValue as [ContractDiscountValue],
			[L].RentAfterDiscount as [ContractValueAfterDiscount],
			
			Lk.*
	From 
		[ChecksPartialCollection] [P]
		inner join [vwChecks] [C] on [C].[Guid] = [P].[CheckGuid]
		inner join CheckType T on T.Guid = C.TypeGuid
		left join [vwLeaseApartment] [L] on [C].[ContractGuid] = [L].[Guid]
		inner join [vwaccount] [C1] on [C1].[Guid] = [P].[DebitAccountGuid]
		inner join [vwaccount] [C2] on [C2].[Guid] = [P].[CreditAccountGuid]
		inner join [vwCurrency] [M] on [M].[Guid] = [P].[CurrencyGuid]
		left join (
					Select 
						[PP].[CheckGuid],
						Sum([Value]) as [Value]
					From
						[ChecksPartialCollection] [PP]
					where
						[PP].[Guid] <> @Guid
					Group By
						[PP].[CheckGuid]
					) [P2] on [P2].[CheckGuid] = [P].[CheckGuid]
		left join [vwaccount] [C3] on [C3].[Guid] = [P].[CommAccountGuid]
		left join [vwaccount] [C4] on [C4].[Guid] = [P].[CommAccountCreditGuid]
		left join #LinkEntryType_Checks LK on Lk.CardGuid = P.Guid		
	where
		[P].[Guid] = @Guid

GO
/****** Object:  StoredProcedure [dbo].[PrcPrintContract]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcPrintContract]
(
	@Guid uniqueidentifier = 'D0718394-B515-49FA-A93F-19F27E95CCF5'
	,@OnlyValue Varchar(256) = ''
	,@OnlyValueAr Varchar(256) = ''
	,@OnlyValueEn Varchar(256) = ''
	,@OnlyMonthlyValue Varchar(256) = ''
	,@OnlyArMonthlyValue Varchar(256) = ''
	,@OnlyLtnMonthlyValue Varchar(256) = ''
)
  
as
	----ãÌãæÚ ÇáÔßÇÊ ÇáãÍÕáÉ
	Declare @ChecksCollection Float
	Select 
		@ChecksCollection = Sum([P].[Value])
	From
		[vwChecks] [P]
		left join [vwChecksCollection] [C1] on [C1].[CheckGuid] = [P].[Guid] and [C1].[Kind] = 1
		left join (
						Select 
							[CheckGuid],
							Sum([Value]) as [Value] 
						From
							[ChecksPartialCollection] 
						Group By
							[CheckGuid]
					) [C4] on [C4].[CheckGuid] = [P].[Guid]
		left join [vwChecksCollection] [C3] on [C3].[CheckGuid] = [P].[Guid] and [C3].[Kind] = 3
 	where
 		(P.[ContractGuid] = @Guid)
 		and (
		Case

			when  ([C1].[CheckGuid] is not null) or 
				  ([C4].[CheckGuid] is Not Null ) and ([C4].[Value] >= [P].[Value])	 then 1
			else
				0
		end ) = 1 
		and [C3].[CheckGuid] is Null
 			

	-- ãÌãæÚ ÇáÔíßÇÊ
	Declare @SumCheck Float, @SumCach Float, @SumPay Float
	
	Select
		@SumCheck = Sum([Value] * [CurrencyVal])
	From
		[Checks] [C]
		inner join (Select Distinct Guid From [Resource] where [Spid] = @@Spid) [R] on [R].[Guid] = [C].[Guid]
	where
		[ContractGuid] = @Guid

	Select
		@SumCach = isnull(Sum([Value] * [CurrencyVal]),0)
	From
		[vwContractCachPayment] [C]
		inner join (Select Distinct Guid From [Resource] where [Spid] = @@Spid) [R] on [R].[Guid] = [C].[Guid]
	where
		[ContractGuid] = @Guid

	--Select @SumPay , @SumCheck, @SumCach

	Set @SumPay = ISNULL(@SumCheck,0) + ISNULL(@SumCach,0)

 			
	Select * into #infofldBuidling from [fnInfoFld] (0x0, 0)
	
	Declare 
			@CreateByUser varchar(255),
			@CreateDate Datetime,

			@LastUpdateByUser varchar(255),
			@LastUpdateDate Datetime
	
		
	Select 
		GetDate() as [NowDate],
		dbo.FnFormatDate(GetDate()) as [NowDate_Gr],
		[A].[Number],
		[A].[ContractNo],
		[C].[ArName] as [CustArName],
		[C].[LtnName] as [CustLtnName],
		[C].[Address] as [CustomerAddress],
		[C].[Nationality] as [CustomerNationality],
		[C].[PassportNO] as [CustomerPassportNO], 
		[C].[Profession] as [CustomerProfession],
		[C].[Domicile] as [CustomerDomicile],
		[C].[DomicileEndDate] as [CustomerDomicileEndDate],
		[C].[Security] as [CustomerSecurity],
		[C].[MemoSecurity] as [CustomerMemoSecurity],
		[C].[BoxNo] as [CustomerBoxNo],
		[C].[PersonalityNo1] as [CustomerPersonalityNo1],
		[C].[PersonalityNo2] as [CustomerPersonalityNo2],
		[C].[PersonalityEndDate] as [CustomerPersonalityEndDate],
		[C].[Adjective]as [CustomerAdjective],
		[C].[Fax]	as [CustomerFax],
		[C].[PhoneJob]	as [CustomerPhoneJob],
		[C].[Mobile]	as [CustomerMobile],
		[C].[Email]	as [CustomerEmail],

		[C].[PassportNO] as [CustomerPassportNO],
		[C].[PassportExpireDate] as [CustomerPassportExpireDate],	
		dbo.FnFormatDate([C].[PassportExpireDate]) as [CustomerPassportExpireDate_Gr],

		[B].[Name] as [BuildingName],
		[B].[ArName] as [BuildingarName],
		[B].[LtnName] as [BuildingLtnName],
		
		Case when [LeaseKind] = 0 or [LeaseKind] = 2 then [P].[No] 
			 when [LeaseKind] = 1 or [LeaseKind] = 3 then [S].[No] 
		end
		as [No],
		Case when [LeaseKind] = 0 or [LeaseKind] = 2 then [P].[Emirate] 
			 when [LeaseKind] = 1 or [LeaseKind] = 3 then [S].[Emirate] 
		end
		as [RealtyEmirate],


		Case when [LeaseKind] = 0 or [LeaseKind] = 2 then [P].[FlatBondType] 
			 when [LeaseKind] = 1 or [LeaseKind] = 3 then [S].[ShopBondType] 
		end
		as [UnitBondType],

		Case when [LeaseKind] = 0 or [LeaseKind] = 2 then [P].[FlatBondNo] 
			 when [LeaseKind] = 1 or [LeaseKind] = 3 then [S].[ShopBondNo] 
		end
		as [UnitBondNo],

		Case when [LeaseKind] = 0 or [LeaseKind] = 2 then [P].[FlatBondDate] 
			 when [LeaseKind] = 1 or [LeaseKind] = 3 then [S].[ShopBondDate] 
		end
		as [UnitBondDate],

		[B].[Emirate],
		[B].[Suburb],
		[B].[Area],
		[B].[Street],
		[B].[BuildingNo],
		[B].[BondType] as [BuildingBondType],
		[B].[BondNo] as [BuildingBondNo],
		[B].[BondDate] as [BuildingBondDate],
		dbo.FnFormatDate([B].[BondDate]) as [BuildingBondDate_Gr],

		[B].[LtnEmirate],
		[B].[LtnArea],
		[B].[LtnSuburb],
		[B].[LtnStreet],
		
		[B].[BankName] as [BuildingBankName],
		[B].[BankAccCode] as [BuildingBankAccCode],
		
		[A].[ApartmentType] as [Descreption],
		Case when [P].[Guid] is not Null then [P].[FlatKind] else [S].[ShopKind] end as [FlatType],
        [A].[RentDuration],
        [A].[Rentype],
        [A].[TermsOfPayment],

		[A].[Rent] as [Value],
		[A].[DiscountPercent],
		[A].[DiscountValue],
		[A].[Rent] - [A].[DiscountValue] as [RentAfterDiscount],	

		@OnlyValue as [OnlyValue],
		@OnlyValueAr as [OnlyValueAr],
		@OnlyValueEn as [OnlyValueEn],
		@OnlyMonthlyValue as [OnlyMonthlyValue],
		@OnlyArMonthlyValue as [OnlyArMonthlyValue],
		@OnlyLtnMonthlyValue as [OnlyLtnMonthlyValue],
		[My].[Code] as [Currency],
		[Purpose],
		
		[EditDate] as [EditDate],
		dbo.[FnGetDayName]([EditDate], 0) as [DayNameofEditDate] ,
		dbo.[FnGetDayName]([EditDate], 1) as [LtnDayNameofEditDate] ,
		dbo.FnFormatDate([EditDate]) as [EditDate_Gr],
		
		[FromDate] as [FromDate],
		dbo.FnFormatDate([FromDate]) as [FromDate_Gr],
		
		[ToDate] as [ToDate],
		dbo.FnFormatDate([ToDate]) as [ToDate_Gr],
		
		DATEDIFF(DAY, ToDate, FromDate) as ContractDays,
		Case when ContractFinish = 1 then 
		DATEDIFF(DAY, ToDate, ContractFinishDate) 
		end as ContractDaysDifference,
		
		[A].[Note],
		[A].[Note2],
		[LeaseKind],

		[A].[ResidentCount],
		[A].[ElectricityInsurance],

	    [R].[Name] as [Rent_Name],
	    [R].[LtnName] as [Rent_LtnName],
	    [R].[Adjective]  as [Rent_Adjective],
	    [R].[Nationality]  as [Rent_Nationality],
	    [R].[Work]  as [Rent_Work],
	    [R].[PersonalityNo]   as [Rent_PersonalityNo],
		[R].[WorkCardNo]   as [Rent_CardNo],
	    [R].[Address]  as [Rent_Address],
	    [R].[Phone]  as [Rent_Phone],
	    [R].[Mobile]  as [Rent_Mobile],
	    [R].[BoxNo]  as [Rent_BoxNo],
		[R].[Fax]  as [Rent_FaxNo],
	    [R].[EMail]  as [Rent_EMail],
		
		[R].[PassportNO] as [Rent_PassportNO],
		[R].[PassportExpireDate] as [Rent_PassportExpireDate],	
		dbo.FnFormatDate([R].[PassportExpireDate]) as [Rent_PassportExpireDate_Gr],

		[B].[PieceNo],
		[B].[BasinNo],	
		[P].[FloorNo],
		
		Case when [P].[Guid] is not Null then [P].[Area] else [S].[Area] end as [FlatArea],
		Case when [P].[Guid] is not Null then [P].[unity] else [S].[unity] end as [FlatAreaunity],

		Case when [P].[Guid] is not Null then [P].[LtnFlatKind] else [S].[LtnShopKind] end as [FlatLtnFlatKind],
		Case when [P].[Guid] is not Null then [P].[LtnApartmentType] else [S].[LtnDescription] end as [FlatLtnApartmentType],
		Case when [P].[Guid] is not Null then [P].[Class] else [S].[Class] end as [RealtyClass],
		Case when [P].[Guid] is not Null then [P].[LtnClass] else '' end as [FlaLtnClass],
		Case when [P].[Guid] is not Null then [P].[LtnOverlooking] else [S].[LtnOverlooking] end as [FlatLtnOverlooking],

		[A].[RentContractType],
		[A].[MonthlyValue],
		[A].[MonthlyValue] * 12.00 as [YearValue],

		Case when [LeaseKind] = 0 or [LeaseKind] = 2 then [P].[WaterCounter] 
			 when [LeaseKind] = 1 or [LeaseKind] = 3 then [S].[WaterCounter] 
		end as [WaterCounter],

		Case when [LeaseKind] = 0 or [LeaseKind] = 2 then [P].[ElectricityCounter] 
			 when [LeaseKind] = 1 or [LeaseKind] = 3 then [S].[ElectricityCounter] 
		end as [ElectricityCounter],

		[A].[ElectricityCounter] as [ContractElectricityCounter],

		[A].[License1No],
		[A].[License2No],
		[A].[License3No],
		[A].[License1Date1],
		dbo.FnFormatDate([A].[License1Date1]) as [License1Date1_Gr],
		[A].[License2Date1],
		dbo.FnFormatDate([A].[License2Date1]) as [License2Date1_Gr],
		[A].[License3Date1],
		dbo.FnFormatDate([A].[License3Date1]) as [License3Date1_Gr],
		[A].[License1Date2],
		dbo.FnFormatDate([A].[License1Date2]) as [License1Date2_Gr],
		[A].[License2Date2],
		dbo.FnFormatDate([A].[License2Date2]) as [License2Date2_Gr],
		[A].[License3Date2],
		dbo.FnFormatDate([A].[License3Date2]) as [License3Date2_Gr],

		[A].[Ltnwhereabouts],
		[A].[LtnPurpose],
		[A].[LtnRentDuration],
		[A].[LtnRentype],
		[A].[LtnTermsOfPayment],
		[A].[Trademark],
		[C].[Trademark] as [CustomerTrademark],

	    [OW].[Name] as [Owner_Name],
	    [OW].[LtnName] as [Owner_LtnName],
	    [OW].[Nationality]  as [Owner_Nationality],
	    [OW].[PersonalityNo]   as [Owner_PersonalityNo],
	    [OW].[Address]  as [Owner_Address],
	    [OW].[Phone]  as [Owner_Phone],
	    [OW].[Mobile]  as [Owner_Mobile],
	    [OW].[BoxNo]  as [Owner_BoxNo],
		[OW].[Fax]  as [Owner_FaxNo],
	    [OW].[EMail]  as [Owner_EMail],
		[Sl].[Name] as [SalesMan],
		[Sl].[ltnName] as [SalesManltnName],
		[T].[Code] as [TypeCode],
		[T].[Code]+CAST(A.Number as Varchar(256)) as [TypeCode_Number],
		[C].[BankName] as [CustBankName],
		[C].[BankAccCode] as [CustBankAccCode],
		[Ac].[code] AS [AccountCode],
		[Ac].[Balance] AS [AccountBalance],	
		
		[A].[ContractFinishDate],
		dbo.FnFormatDate([A].[ContractFinishDate]) as [ContractFinishDate_Gr],
		[A].[LeaveDate],
		dbo.FnFormatDate([A].[LeaveDate]) as [LeaveDate_Gr],
		[A].[ResultingAmount2],
		[A].[ResultingAmount],
		[A].[ResultingNote],
		[A].[Fine],
		[A].[FineNote],
		(Select Sum(value) from FlatContractFee Where ParentGuid = A.Guid) AS [SumFee],
		
		[A].[InsuranceValueOld],
		[A].[InsuranceValue],
		[A].[ContractPrice],
		[A].[CertificatValue],
		
		[A].[CommissionFromCustValue],
		[A].[CommissionFromCustPercent],

		[A].[CommissionFromOwnerValue] ,
		[A].[CommissionFromOwnerPercent],
		(Select SUM(Value) From vwContractCachPayment where ContractGuid = A.Guid) as SumCachPayment,
		@ChecksCollection as [SumChecksCollection],
				
		C.CustNote1,
		C.CustNote2,
		C.CustNote3,
		C.CustNote4,
		C.CustNote5,
		C.CustNote6,
		C.CustNote7,

		
		bf.[FldValue1] as [BuildingFldValue1],
		bf.[FldValue2] as [BuildingFldValue2],
		bf.[FldValue3] as [BuildingFldValue3],
		bf.[FldValue4] as [BuildingFldValue4],
		bf.[FldValue5] as [BuildingFldValue5],
		bf.[FldValue6] as [BuildingFldValue6],
		bf.[FldValue7] as [BuildingFldValue7],
		bf.[FldValue8] as [BuildingFldValue8],
		bf.[FldValue9] as [BuildingFldValue9],
		bf.[FldValue10] as [BuildingFldValue10],
		bf.[FldValue11] as [BuildingFldValue11],
		bf.[FldValue12] as [BuildingFldValue12],
		bf.[FldValue13] as [BuildingFldValue13],
		bf.[FldValue14] as [BuildingFldValue14],
		bf.[FldValue15] as [BuildingFldValue15],
		
		@SumCheck as [SumCheck],
		@SumCach as [SumCach],
		@SumPay as [SumPay], 

		[A].[Guid],
		
		(Select Top 1 [UserName] From vwRealty_LogCard where CardGuid = A.Guid order by Date) as [CreateByUser],
		(Select Top 1 [Date] From vwRealty_LogCard where CardGuid = A.Guid order by Date) as [CreateDate],
		(Select Top 1 [UserName] From vwRealty_LogCard where CardGuid = A.Guid order by Date desc) as [LastUpdateByUser],
		(Select Top 1 [Date] From vwRealty_LogCard where CardGuid = A.Guid order by Date desc) as [LastUpdateDate]
	from 
		[LeaseApartment] [A]
		left join [vwBuilding] [B] On [A].[BuildingGuid] = [B].[Guid]
		LEFT join #infofldBuidling bf on bf.Guid = B.Guid
		left join [vwApartment] [P] on [P].[Guid] = [A].[ApartmentGuid]
		left join [vwShop] [S] on [S].[Guid] = [A].[ApartmentGuid]
		left join [vwCustomer] [C] on [C].[Guid] = [A].[CustomerGuid]
		left join [vwAccount] [AC] on [C].[AcGuid] = [AC].[Guid]
		left join [vwCurrency] [My] on [My].[Guid] = [A].[CurrencyGuid]
		left join [RentInfo] [R] on [R].[Guid] = [A].[RentInfoGuid]
		left join [vwOwner] [OW] on [OW].[Guid] = [B].[ownerGuid]
		left join [vwSalesMan] [Sl] on [Sl].[Guid] = [A].[SalesManGuid]
		inner join [ContractType] T on T.Guid = A.TypeGuid
	where
		[A].[Guid] = @Guid or @Guid = 0x0


GO
/****** Object:  StoredProcedure [dbo].[PrcPrintElectricityBill]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcPrintElectricityBill]
(
	@Guid uniqueidentifier = 0x0
)
  
as
	if @Guid = 0x0
	Select Top 1 @Guid = Guid From ElectricityBill
	
	Select 
		* 
	From 
		[vwElectricityBill] B
	where
		B.Guid = @Guid

GO
/****** Object:  StoredProcedure [dbo].[PrcPrintEntry]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcPrintEntry]
(
	@Guid uniqueidentifier = 'C3045A11-744B-4CD1-A4E2-31AEF4D741C9',

	@TotalDebit Float = 50,
	@TotalCredit Float = 400,
	@EndDebit Float = 400,
	@EndCredit Float = 440,

	@OnlyTotalDebit Varchar(256) = '',
	@OnlyTotalDebitAr Varchar(256) = '',
	@OnlyTotalDebitLtn Varchar(256) = '',
	@OnlyTotalCredit Varchar(256) = '',
	@OnlyTotalCreditAr Varchar(256) = '',
	@OnlyTotalCreditLtn Varchar(256) = '',
	@OnlyEndDebit Varchar(256) = '',
	@OnlyEndCredit Varchar(256) = ''
)
  
as
	
	Declare @ObverseAc uniqueidentifier
	Select Top 1 
		@ObverseAc = [AcGuid]
	From
		[Secondary_EntryDetail]
	where
		[ParentGuid] = @Guid


		--ÑÞã ÇáÔÞÉ
	Declare @FlatNo Varchar(256),
			@BuildingName Varchar(256),
			@BuildingArName Varchar(256),
			@BuildingLtnName Varchar(256),
			@FromDate DateTime,
			@ToDate DateTime,
			@Emirate Varchar(256),
			@BuildingArea Varchar(256),
			@Suburb Varchar(256),
			@Street Varchar(256),
			@BasinNo Varchar(256),
			@PieceNo Varchar(256),
			@BuildingNo VARCHAR(256),
			@BondType VARCHAR(256),
			@BondNo VARCHAR(256),
			@FlatKind VARCHAR(256),
			@ApartmentType VARCHAR(256),
			@Class VARCHAR(256),
			@Area Float,
			@unity VARCHAR(256),
			--
			@ContractNo VARCHAR(256),
			@ContractValue Float,
			@ContractValueWithDiscount Float,
			@ContractDiscountValue Float
			
	Select
			@FlatNo = [FlatNo],
			@BuildingName = [BuildingName],
			@BuildingArName = [BuildingArName],
			@BuildingLtnName = [BuildingLtnName],
			@FromDate = [FromDate],
			@ToDate = [ToDate],
			@Emirate = [Emirate],
			@BuildingArea = [L].[BuildingArea],
			@Suburb = [Suburb],
			@Street = [Street],
			@BasinNo = [BasinNo],
			@PieceNo = [PieceNo],
			@BuildingNo = [BuildingNo],
			@BondType = [BondType],
			@BondNo = [BondNo],
			@FlatKind = [L].[FlatKind],
			@ApartmentType = [L].[ApartmentType],
			@Class = [Class],
			@Area = [FlatArea],
			@unity = [FlatAreaunity],
			
			@ContractNo = l.ContractNo,
			@ContractValue = L.Rent,
			@ContractValueWithDiscount = L.RentAfterDiscount,
			@ContractDiscountValue = L.DiscountValue
			
	From
		[ContractCachPayment] [C]
		inner join [vwLeaseApartment] [L] on [L].[Guid] = [C].[ContractGuid]
--		inner join [Building] [B] on [B].[Guid] = [L].[BuildingGuid]
--		inner join [Apartment] [F] on [F].[Guid] = [L].[ApartmentGuid]
	where 
		[EntryGuid] = @Guid

	
	Select 
		[S].[Number],
		[S].[SecLvl],
		[S].[Kind],
		[Ac].[Code] as [AccountCode],
		[Ac].[Name] as [Account],
		[Ac].[ArName] as [AccountArName],
		[Ac].[LtnName] as [AccountLtnName],
		Ac.Balance as AccountBalance,
		[S].[Date],
		dbo.FnFormatDate(S.Date) as [Date_Gr],
		[S].[Note],
		[my].[Code] as [Currency],
		[S].[CurrencyVal],
		[S].[ReceiptNo],

		(Select [Code] From [vwAccount] where [Guid] = @ObverseAc) as [ObverseAccountCode],
		(Select [Name] From [vwAccount] where [Guid] = @ObverseAc) as [ObverseAccountName],
		(Select [ArName] From [vwAccount] where [Guid] = @ObverseAc) as [ObverseAccountArName],
		(Select [LtnName] From [vwAccount] where [Guid] = @ObverseAc) as [ObverseAccountLtnName],

		@TotalDebit as [TotalDebit],
		@TotalCredit as [TotalCredit],
		@EndDebit as [EndDebit],
		@EndCredit as [EndCredit],

		@OnlyTotalDebit as [OnlyTotalDebit],
		@OnlyTotalDebitAr as [OnlyTotalDebitAr],
		@OnlyTotalDebitLtn as [OnlyTotalDebitLtn],
		@OnlyTotalCredit as [OnlyTotalCredit],
		@OnlyTotalCreditAr as [OnlyTotalCreditAr],
		@OnlyTotalCreditLtn as [OnlyTotalCreditLtn],
		@OnlyEndDebit as [OnlyEndDebit],
		@OnlyEndCredit as [OnlyEndCredit],
	
		@FlatNo As [FlatNo],
		@BuildingName As [BuildingName],
		@BuildingArName As [BuildingArName],
		@BuildingLtnName As [BuildingLtnName],
		@FromDate as [FromDate],
		dbo.FnFormatDate(@FromDate) as [FromDate_Gr],
		@ToDate as [ToDate],
		dbo.FnFormatDate(@ToDate) as [ToDate_Gr],
		@Emirate As [Emirate],
		@BuildingArea As [BuildingArea],
		@Suburb As [Suburb],
		@Street As [Street],
		@BasinNo As [BasinNo],
		@PieceNo As [PieceNo],
		@BuildingNo As [BuildingNo],
		@BondType As [BondType],
		@BondNo As [BondNo],
		@FlatKind As [FlatKind],
		@ApartmentType As [ApartmentType],
		@Class As [Class],
		@Area As [FlatArea],
		@unity as [FlatAreaunity],

		@ContractNo as [ContractNo],
		@ContractValue as [ContractValue],
		@ContractValueWithDiscount as [ContractValueWithDiscount],
		@ContractDiscountValue as [ContractDiscountValue],

		[Sl].[Name] as [SalesMan],
		[T].[Code] as [TypeCode],
		[T].[Name] as [TypeName],
		[T].[LtnName] as [TypeLtnName],
		[T].[Code]+CAST(S.Number as Varchar(256)) as [TypeCode_Number],

		(Select Top 1 [UserName] From vwRealty_LogCard where CardGuid = S.Guid order by Date) as [CreateByUser],
		(Select Top 1 [Date] From vwRealty_LogCard where CardGuid = S.Guid order by Date) as [CreateDate],
		(Select Top 1 [UserName] From vwRealty_LogCard where CardGuid = S.Guid order by Date desc) as [LastUpdateByUser],
		(Select Top 1 [Date] From vwRealty_LogCard where CardGuid = S.Guid order by Date desc) as [LastUpdateDate]
		
	From 
		[Secondary_Entry] [S]
		left join [vwAccount] [Ac] on [Ac].[Guid] = [S].[AccountGuid]
		left join [vwCurrency] [My] On [My].[Guid] = [S].[CurrencyGuid]
		left join [vwSalesMan] [Sl] on [Sl].[Guid] = [S].[SalesManGuid]
		inner join [EntryType] T on T.Guid = S.TypeGuid
	where
		[S].[Guid] = @Guid Or @Guid = 0x0

	Select
		[S].[Number],
		[S].[ParentGuid],

		[Ac].[Code] as [AccountCode],
		[Ac].[Name] as [Account],
		[Ac].[ArName] as [AccountArName],
		[Ac].[LtnName] as [AccountLtnName],

		Ac.Balance as AccountBalance,
		[S].[Debit],
		[S].[Credit],
		[my].[Code] as [Currency],
		[S].[CurrencyVal],
		[ac2].[code]+'-'+[Ac2].[Name] as [ObverseAccount],
		[co].[code]+'-'+[co].[Name] as [Cost],
		[S].[Note],
		[Cu].[BankName] as [CustBankName],
		[Cu].[BankAccCode] as [CustBankAccCode]
	From	
		[Secondary_EntryDetail] [S]
		left join [vwaccount] [ac] on [ac].[Guid] = [S].[AcGuid]
		left join [vwaccount] [ac2] on [ac2].[Guid] = [S].[ObverseAcGuid]
		left join [vwCurrency] [My] On [My].[Guid] = [S].[CurrencyGuid]
		left join [vwCost] [co] On [co].[Guid] = [S].[CostGuid]
		left join [vwCustomer] Cu on Cu.AcGuid = S.AcGuid
	where
		[S].[ParentGuid] = @Guid Or @Guid = 0x0
	Order By
		[S].[Number]

GO
/****** Object:  StoredProcedure [dbo].[PrcPrintEntryDate]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcPrintEntryDate]
(
	@Guid uniqueidentifier = 0x0,

	@TotalDebit Float = 50,
	@TotalCredit Float = 400,

	@OnlyTotalDebit Varchar(256) = '',
	@OnlyTotalCredit Varchar(256) = ''
)
  
as
	Select 
		[S].[Number],
		[S].[SecLvl],
		[S].[Date],
		[S].[Note],
		[my].[Code] as [Currency],
		[Ac].[Code]+'-'+[ac].[Name] as [Account],
		[S].[CurrencyVal],

		@TotalDebit as [TotalDebit],
		@TotalCredit as [TotalCredit],

		@OnlyTotalDebit as [OnlyTotalDebit],
		@OnlyTotalCredit as [OnlyTotalCredit]

	From 
		[EntryDate] [S]
		left join [vwCurrency] [My] On [My].[Guid] = [S].[CurrencyGuid]
		left join [vwaccount] [ac] on [ac].[Guid] = [S].[AccountGuid]
	where
		[S].[Guid] = @Guid Or @Guid = 0x0

	Select
		[S].[Number],
		[S].[Date],
		[S].[ParentGuid],
		[ac].[code]+'-'+[Ac].[Name] as [Account],
		[S].[Debit],
		[S].[Credit],
		[my].[Code] as [Currency],
		[S].[CurrencyVal],
		[co].[code]+'-'+[co].[Name] as [Cost],
		[S].[Note]
	From	
		[EntryDateDetail] [S]
		left join [vwaccount] [ac] on [ac].[Guid] = [S].[AcGuid]
		left join [vwCurrency] [My] On [My].[Guid] = [S].[CurrencyGuid]
		left join [vwCost] [co] On [co].[Guid] = [S].[CostGuid]
	where
		[S].[ParentGuid] = @Guid Or @Guid = 0x0
	Order By
		[S].[Number]

GO
/****** Object:  StoredProcedure [dbo].[PrcPrintFlatParkingContract]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcPrintFlatParkingContract]
(
	@FlatContractGuid uniqueidentifier = 0x0
)
  
as
	Select 
		dbo.fnDate(GetDate()) as [NowDate],
		[A].[Number],
		[A].[ContractNo],
		[C].[ArName] as [CustArName],
		[C].[LtnName] as [CustLtnName],
		[C].[Address] as [CustomerAddress],
		[C].[Nationality] as [CustomerNationality],
		[C].[PassportNO] as [CustomerPassportNO], 
		[C].[Profession] as [CustomerProfession],
		[C].[Domicile] as [CustomerDomicile],
		[C].[Security] as [CustomerSecurity],
		[C].[MemoSecurity] as [CustomerMemoSecurity],
		[C].[BoxNo] as [CustomerBoxNo],
		[C].[PersonalityNo1] as [CustomerPersonalityNo1],
		[C].[PersonalityNo2] as [CustomerPersonalityNo2],
		[C].[Adjective]as [CustomerAdjective],
		[C].[Fax]	as [CustomerFax],
		[C].[Email]	as [CustomerEmail],
		[C].[PhoneJob]	as [CustomerPhoneJob],
		[C].[Mobile]	as [CustomerMobile],

		[C].[PassportNO] as [CustomerPassportNO],
		dbo.fnDate([C].[PassportExpireDate]) as [CustomerPassportExpireDate],	

		[B].[Name] as [BuildingarName],
		[B].[LtnName] as [BuildingLtnName],
		[P].[No],
		[B].[Emirate],
		[B].[Suburb],
		[B].[Area],
		[B].[Street],
		[B].[BuildingNo],
		[B].[BondType] as [BuildingBondType],
		[B].[BondNo] as [BuildingBondNo],
		dbo.fnDate([B].[BondDate]) as [BuildingBondDate],
		
		[B].[LtnEmirate],
		[B].[LtnArea],
		[B].[LtnSuburb],
		[B].[LtnStreet],

        [A].[RentDuration],
        [A].[Rentype],
        [A].[TermsOfPayment],
		[A].[Rent] as [Value],
		[My].[Code] as [Currency],
		dbo.fnDate([FromDate]) as [FromDate],
		dbo.fnDate([ToDate]) as [ToDate],
		[A].[Note],
		[A].[Note2],
		
		[A].[CarNo],
		[A].[CarType],
		[A].[CarColor],
		[A].[Emirate],

	    [R].[Name] as [Rent_Name],
	    [R].[LtnName] as [Rent_LtnName],
	    [R].[Adjective]  as [Rent_Adjective],
	    [R].[Nationality]  as [Rent_Nationality],
	    [R].[Work]  as [Rent_Work],
	    [R].[PersonalityNo]   as [Rent_PersonalityNo],
		[R].[WorkCardNo]   as [Rent_CardNo],
	    [R].[Address]  as [Rent_Address],
	    [R].[Phone]  as [Rent_Phone],
	    [R].[Mobile]  as [Rent_Mobile],
	    [R].[BoxNo]  as [Rent_BoxNo],
		[R].[Fax]  as [Rent_FaxNo],
	    [R].[EMail]  as [Rent_EMail],
		
		[R].[PassportNO] as [Rent_PassportNO],
		dbo.fnDate([R].[PassportExpireDate]) as [Rent_PassportExpireDate],	

		[A].[License1No],
		[A].[License2No],
		[A].[License3No],
		[A].[License1Date1],
		[A].[License2Date1],
		[A].[License3Date1],
		[A].[License1Date2],
		[A].[License2Date2],
		[A].[License3Date2],

		[A].[LtnRentDuration],
		[A].[LtnRentype],
		[A].[LtnTermsOfPayment],

		[A].[Guid]
	from 
		[ParkingContract] [A]
		inner join [LinkParkingContract] L on L.ParkingContractGuid = A.Guid and L.ParentGuid = @FlatContractGuid
		left join [vwBuilding] [B] On [A].[BuildingGuid] = [B].[Guid]
		left join [vwParking] [P] on [P].[Guid] = [A].[ParkingGuid]
		left join [vwCustomer] [C] on [C].[Guid] = [A].[CustomerGuid]
		left join [vwCurrency] [My] on [My].[Guid] = [A].[CurrencyGuid]
		left join [RentInfo] [R] on [R].[Guid] = [A].[RentInfoGuid]
	Order By
		[A].EditDate, A.Number


GO
/****** Object:  StoredProcedure [dbo].[PrcPrintLandContract]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcPrintLandContract]
(
	@Guid uniqueidentifier = 0x0
	,@OnlyValue Varchar(256) = ''
)
  
as
	Select 
		GetDate() as [NowDate],
		dbo.FnFormatDate(GetDate()) as [NowDate_Gr],
		[A].[Number],
		[A].[ContractNo],
		[C].[ArName] as [CustArName],
		[C].[LtnName] as [CustLtnName],
		[C].[Address] as [CustomerAddress],
		[C].[Nationality] as [CustomerNationality],
		[C].[PassportNO] as [CustomerPassportNO], 
		[C].[Profession] as [CustomerProfession],
		[C].[Domicile] as [CustomerDomicile],
		[C].[Security] as [CustomerSecurity],
		[C].[MemoSecurity] as [CustomerMemoSecurity],
		[C].[BoxNo] as [CustomerBoxNo],
		[C].[PersonalityNo1] as [CustomerPersonalityNo1],
		[C].[PersonalityNo2] as [CustomerPersonalityNo2],
		[C].[Adjective]as [CustomerAdjective],
		[C].[Fax]	as [CustomerFax],
		[C].[PhoneJob]	as [CustomerPhoneJob],
		[C].[Mobile]	as [CustomerMobile],
		[C].[Email]	as [CustomerEmail],

		[C].[PassportNO] as [CustomerPassportNO],
		[C].[PassportExpireDate] as [CustomerPassportExpireDate],
		dbo.FnFormatDate([C].[PassportExpireDate]) as [CustomerPassportExpireDate_Gr],	
		[A].[ContractPrice],
		(Select Sum(Value) From LandContractFee where ParentGuid = A.Guid) as SumFee,

		Case when [Contractkind] = 6 then [P].[EarthNo] 
			 when [Contractkind] = 7 then [p].[EarthNo] 
			 when [Contractkind] = 8 then [S].[VillaNo] 
			 when [Contractkind] = 9 then [S].[VillaNo]  end
		as [RealtyNo],
		
		Case when [S].[Guid] is not Null then [S].[VillaNo] else [P].[No] end as [NO],
		
		Case when [Contractkind] = 6 then [P].[Name] 
			 when [Contractkind] = 7 then [p].[Name] 
			 when [Contractkind] = 8 then [S].[VillaNo] 
			 when [Contractkind] = 9 then [S].[VillaNo]  end
		as [Name],

		Case when [Contractkind] = 6 then [P].[LtnName]
			 when [Contractkind] = 7 then [p].[LtnName]
			 when [Contractkind] = 8 then [S].[VillaNo] 
			 when [Contractkind] = 9 then [S].[VillaNo]  end
		as [LtnName],

		Case when [Contractkind] = 6 then [P].[LandType]
			 when [Contractkind] = 7 then [p].[LandType]
			 when [Contractkind] = 8 then ''
			 when [Contractkind] = 9 then '' end
		as [LandType],
		
		Case when [Contractkind] = 6 then [P].[City]
			 when [Contractkind] = 7 then [p].[City]
			 when [Contractkind] = 8 then ''
			 when [Contractkind] = 9 then '' end
		as [LandCity],
		
		Case when [Contractkind] = 6 then [P].[Region]
			 when [Contractkind] = 7 then [p].[Region]
			 when [Contractkind] = 8 then s.Area
			 when [Contractkind] = 9 then s.Area end
		as [Region],

		Case when [Contractkind] = 6 then [P].[Space]
			 when [Contractkind] = 7 then [p].[Space]
			 when [Contractkind] = 8 then s.[BasinNo]
			 when [Contractkind] = 9 then s.[BasinNo] end
		as [BasinNo],
		
		Case when [Contractkind] = 6 then [P].EarthNo
			 when [Contractkind] = 7 then [p].EarthNo
			 when [Contractkind] = 8 then s.PieceNo
			 when [Contractkind] = 9 then s.PieceNo end
		as [PieceNo],
		
		Case when [Contractkind] = 6 then [P].EarthNo
			 when [Contractkind] = 7 then [p].EarthNo
			 when [Contractkind] = 8 then s.PieceNo
			 when [Contractkind] = 9 then s.PieceNo end
		as [PieceNo],

		Case when [Contractkind] = 6 then [P].license
			 when [Contractkind] = 7 then [p].license
			 when [Contractkind] = 8 then s.DocType
			 when [Contractkind] = 9 then s.DocType end
		as [DocType],
		
		Case when [Contractkind] = 6 then [P].Area
			 when [Contractkind] = 7 then [p].Area
			 when [Contractkind] = 8 then s.LandArea
			 when [Contractkind] = 9 then s.LandArea end
		as [Area],
		
		Case when [Contractkind] = 6 then [P].unity
			 when [Contractkind] = 7 then [p].unity
			 when [Contractkind] = 8 then ''
			 when [Contractkind] = 9 then '' end
		as [AreaUnity],

        [A].[RentDuration],
        [A].[Rentype],
        [A].[TermsOfPayment],
		[A].[Rent] as [Value],
		[A].[DiscountValue]	,
		@OnlyValue as [OnlyValue],
		[My].[Code] as [Currency],
		[A].[InsuranceValueOld],
		[A].[InsuranceValue],
		[A].[ElectricityInsurance],
		[A].[CertificatValue] as [AuthenticationFee],
		[A].[CertificatValue] ,
		[A].[OtherFee],	
		
		[Purpose],

		[FromDate],
		dbo.FnFormatDate([FromDate]) AS [FromDate_Gr],
		[ToDate] as [ToDate],
		dbo.FnFormatDate([ToDate]) as [ToDate_Gr],

		DATEDIFF(DAY, ToDate, FromDate) as ContractDays,
		Case when ContractFinish = 1 then 
		DATEDIFF(DAY, ToDate, ContractFinishDate) 
		end as ContractDaysDifference,

		[A].[Note],
		[A].[Note2],
		[Contractkind],

		[A].[ElectricityInsurance],

	    [R].[Name] as [Rent_Name],
	    [R].[LtnName] as [Rent_LtnName],
	    [R].[Adjective]  as [Rent_Adjective],
	    [R].[Nationality]  as [Rent_Nationality],
	    [R].[Work]  as [Rent_Work],
	    [R].[PersonalityNo]   as [Rent_PersonalityNo],
		[R].[WorkCardNo]   as [Rent_CardNo],
	    [R].[Address]  as [Rent_Address],
	    [R].[Phone]  as [Rent_Phone],
	    [R].[Mobile]  as [Rent_Mobile],
	    [R].[BoxNo]  as [Rent_BoxNo],
		[R].[Fax]  as [Rent_FaxNo],
	    [R].[EMail]  as [Rent_EMail],

		[R].[PassportNO] as [Rent_PassportNO],
		[C].[PassportExpireDate] as [CustomerPassportExpireDate],	
		dbo.FnFormatDate([C].[PassportExpireDate]) as [CustomerPassportExpireDate_Gr],
			
		Case when [P].[Guid] is not Null then [P].[Region] else [S].[Area] end as [FlatArea],

		Case when [P].[Guid] is not Null then [P].[LandType] else '' end as [LandType],
		Case when [P].[Guid] is not Null then [P].[LtnLandType] else '' end as [LtnLandType],
		Case when [P].[Guid] is not Null then [P].[LtnCity] else '' end as [LtnCity],
		Case when [P].[Guid] is not Null then [P].[LtnRegion] else [S].[LtnArea] end as [LtnRegion],
		Case when [P].[Guid] is not Null then [P].[LtnSpace] else '' end as [LtnSpace],
		Case when [P].[Guid] is not Null then [P].[Ltnlicense] else [S].[LtnDocType] end as [Ltnlicense] ,
		Case when [P].[Guid] is not Null then [P].[Ltnside] else '' end as [Ltnside],


		Case when [S].[Guid] is not Null then [S].ComplexName else '' end as ComplexName,
		Case when [S].[Guid] is not Null then [S].Emirate else '' end as Emirate,
		Case when [S].[Guid] is not Null then [S].Suburb else '' end as Suburb,
		Case when [S].[Guid] is not Null then [S].Street else [P].[StreetName] end as Street,
		Case when [S].[Guid] is not Null then [S].PieceNo else '' end as PieceNo,
		Case when [S].[Guid] is not Null then [S].BasinNo else [P].[Space] end as BasinNo,
		Case when [S].[Guid] is not Null then [S].WaterCounter else '' end as WaterCounter,
		Case when [S].[Guid] is not Null then [S].ElectricityCounter else '' end as ElectricityCounter,
		Case when [S].[Guid] is not Null then [S].DocType else [p].license end as DocType,
		Case when [S].[Guid] is not Null then [S].DocNo else [P].licenseNo end as DocNo,
		Case when [S].[Guid] is not Null then [S].DocDate else [P].licenseDate end as DocDate,
		Case when [S].[Guid] is not Null then dbo.FnFormatDate([S].DocDate) else dbo.FnFormatDate([P].licenseDate) end as DocDate_Gr,
		

		Case when [P].[Guid] is not Null then [P].[Area] else [S].[LandArea] end as [LandArea],
		[S].[LandAreaBuilding]	,

		[A].[License1No],
		[A].[License2No],
		[A].[License3No],
		[A].[License1Date1],
		dbo.FnFormatDate([A].[License1Date1]) as [License1Date1_Gr],
		[A].[License2Date1],
		dbo.FnFormatDate([A].[License2Date1]) as [License2Date1_Gr],
		[A].[License3Date1],
		dbo.FnFormatDate([A].[License3Date1]) as [License3Date1_Gr],
		[A].[License1Date2],
		dbo.FnFormatDate([A].[License1Date2]) as [License1Date2_Gr],
		[A].[License2Date2],
		dbo.FnFormatDate([A].[License2Date2]) as [License2Date2_Gr],
		[A].[License3Date2],
		dbo.FnFormatDate([A].[License3Date2]) as [License3Date2_Gr],

		[A].[Ltnwhereabouts],
		[A].[LtnPurpose],
		[A].[LtnRentDuration],
		[A].[LtnRentype],
		[A].[LtnTermsOfPayment],

		[A].[ElectricityCounter],
		[Sl].[Name] as [SalesMan],
		[T].[Code] as [TypeCode],
		[T].[Code]+CAST(A.Number as Varchar(256)) as [TypeCode_Number],
		[C].[BankName] as [CustBankName],
		[C].[BankAccCode] as [CustBankAccCode],
		[Ac].[code] AS [AccountCode],
		[Ac].[Balance] AS [AccountBalance],
		[A].[Trademark],


		[A].[CommissionFromCustValue],
		[A].[CommissionFromCustPercent],

		[A].[CommissionFromOwnerValue] ,
		[A].[CommissionFromOwnerPercent],

		[A].[Guid],

		(Select Top 1 [UserName] From vwRealty_LogCard where CardGuid = A.Guid order by Date) as [CreateByUser],
		(Select Top 1 [Date] From vwRealty_LogCard where CardGuid = A.Guid order by Date) as [CreateDate],
		(Select Top 1 [UserName] From vwRealty_LogCard where CardGuid = A.Guid order by Date desc) as [LastUpdateByUser],
		(Select Top 1 [Date] From vwRealty_LogCard where CardGuid = A.Guid order by Date desc) as [LastUpdateDate]
	from 
		[LandContract] [A]
		inner join [vwContractType] [t] on [t].[Guid] = [A].[TypeGuid]
		left join [vwEarth] [P] on [P].[Guid] = [A].[LandGuid]
		left join [vwVilla] [S] on [S].[Guid] = [A].[VillaGuid]
		left join [vwCustomer] [C] on [C].[Guid] = [A].[CustomerGuid]
		left join [vwAccount] [AC] on [C].[AcGuid] = [AC].[Guid]
		left join [vwCurrency] [My] on [My].[Guid] = [A].[CurrencyGuid]
		left join [RentInfo] [R] on [R].[Guid] = [A].[RentInfoGuid]
		left join [vwSalesMan] [Sl] on [Sl].[Guid] = [A].[SalesManGuid]
	where
		[A].[Guid] = @Guid or @Guid = 0x0


GO
/****** Object:  StoredProcedure [dbo].[PrcPrintLawsuitExpense]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcPrintLawsuitExpense]
(
	@Guid uniqueidentifier = 0x0
)
  
as
	Select 
		S.* ,
		L.[StartDate],
		L.[No],
		L.[StopPayDate],
		L.[QuittanceDate],
		L.[QuittanceElectricityDate],
		L.[Rent],
	
		L.[IsEnded],
		L.[EndDate],
		L.[ExeNo],
		C.*
	From 
		[Lawsuit] L
		inner join [vwLawsuitExpense] S on S.ParentGuid = L.Guid
		inner join vwLeaseApartment C on C.Guid = L.ContractGuid
		inner join [Resource] R on r.Guid = S.Guid and R.Spid = @@spid
	order By
		S.number

GO
/****** Object:  StoredProcedure [dbo].[PrcPrintLawsuitState]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcPrintLawsuitState]
(
	@Guid uniqueidentifier = 0x0
)
  
as
	Select 
		S.* ,
		L.[StartDate],
		L.[No],
		L.[StopPayDate],
		L.[QuittanceDate],
		L.[QuittanceElectricityDate],
		L.[Rent],
	
		L.[IsEnded],
		L.[EndDate],
		L.[ExeNo]
	From 
		[Lawsuit] L
		inner join [vwLawsuitState] S on S.ParentGuid = L.Guid
		inner join [Resource] R on r.Guid = S.Guid
	order By
		S.number

GO
/****** Object:  StoredProcedure [dbo].[PrcPrintMainEntry]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcPrintMainEntry]
(
	@Guid uniqueidentifier = 0x0,

	@TotalDebit Float = 50,
	@TotalCredit Float = 400,

	@OnlyTotalDebit Varchar(256) = '',
	@OnlyTotalCredit Varchar(256) = ''
)
  
as
	Select 
		[S].[Number],
		[S].[SecLvl],
		[S].[Date],
		CONVERT(nchar, [S].[Date], 131) as [HijriDate],
		[S].[Note],
		[my].[Code] as [Currency],
		[S].[CurrencyVal],

		@TotalDebit as [TotalDebit],
		@TotalCredit as [TotalCredit],

		@OnlyTotalDebit as [OnlyTotalDebit],
		@OnlyTotalCredit as [OnlyTotalCredit],

		(Select Top 1 [UserName] From vwRealty_LogCard where CardGuid = [S].Guid order by Date) as [CreateByUser],
		(Select Top 1 [Date] From vwRealty_LogCard where CardGuid = [S].Guid order by Date) as [CreateDate],
		(Select Top 1 [UserName] From vwRealty_LogCard where CardGuid = [S].Guid order by Date desc) as [LastUpdateByUser],
		(Select Top 1 [Date] From vwRealty_LogCard where CardGuid = [S].Guid order by Date desc) as [LastUpdateDate]

	From 
		[HEntry] [S]
		left join [vwCurrency] [My] On [My].[Guid] = [S].[CurrencyGuid]
	where
		[S].[Guid] = @Guid Or @Guid = 0x0

	Select
		[S].[Number],
		[S].[ParentGuid],
		[ac].[code]+'-'+[Ac].[Name] as [Account],
		[S].[Debit],
		[S].[Credit],
		[my].[Code] as [Currency],
		[S].[CurrencyVal],
		[ac2].[code]+'-'+[Ac2].[Name] as [ObverseAccount],
		[co].[code]+'-'+[co].[Name] as [Cost],
		[S].[Note]
	From	
		[DEntry] [S]
		left join [vwaccount] [ac] on [ac].[Guid] = [S].[AcGuid]
		left join [vwaccount] [ac2] on [ac2].[Guid] = [S].[ObverseAcGuid]
		left join [vwCurrency] [My] On [My].[Guid] = [S].[CurrencyGuid]
		left join [vwCost] [co] On [co].[Guid] = [S].[CostGuid]
	where
		[S].[ParentGuid] = @Guid Or @Guid = 0x0
	Order By
		[S].[Number]

GO
/****** Object:  StoredProcedure [dbo].[PrcPrintMaintenanceContract]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcPrintMaintenanceContract]
(
	@Guid uniqueidentifier = 'D0718394-B515-49FA-A93F-19F27E95CCF5'
	,@OnlyValue Varchar(256) = ''
	,@OnlyValueAr Varchar(256) = ''
	,@OnlyValueEn Varchar(256) = ''
	,@OnlyMonthlyValue Varchar(256) = ''
	,@OnlyArMonthlyValue Varchar(256) = ''
	,@OnlyLtnMonthlyValue Varchar(256) = ''
)
  
as
	----ãÌãæÚ ÇáÔßÇÊ ÇáãÍÕáÉ
	Declare @ChecksCollection Float
	Select 
		@ChecksCollection = Sum([P].[Value])
	From
		[vwChecks] [P]
		left join [vwChecksCollection] [C1] on [C1].[CheckGuid] = [P].[Guid] and [C1].[Kind] = 1
		left join (
						Select 
							[CheckGuid],
							Sum([Value]) as [Value] 
						From
							[ChecksPartialCollection] 
						Group By
							[CheckGuid]
					) [C4] on [C4].[CheckGuid] = [P].[Guid]
		left join [vwChecksCollection] [C3] on [C3].[CheckGuid] = [P].[Guid] and [C3].[Kind] = 3
 	where
 		(P.[ContractGuid] = @Guid)
 		and (
		Case

			when  ([C1].[CheckGuid] is not null) or 
				  ([C4].[CheckGuid] is Not Null ) and ([C4].[Value] >= [P].[Value])	 then 1
			else
				0
		end ) = 1 
		and [C3].[CheckGuid] is Null
 			

	-- ãÌãæÚ ÇáÔíßÇÊ
	Declare @SumCheck Float, @SumCach Float, @SumPay Float
	
	Select
		@SumCheck = Sum([Value] * [CurrencyVal])
	From
		[Checks] [C]
		inner join (Select Distinct Guid From [Resource] where [Spid] = @@Spid) [R] on [R].[Guid] = [C].[Guid]
	where
		[ContractGuid] = @Guid

	Select
		@SumCach = isnull(Sum([Value] * [CurrencyVal]),0)
	From
		[vwMaintenanceContractCachPayment] [C]
		inner join (Select Distinct Guid From [Resource] where [Spid] = @@Spid) [R] on [R].[Guid] = [C].[Guid]
	where
		[ContractGuid] = @Guid

	--Select @SumPay , @SumCheck, @SumCach

	Set @SumPay = ISNULL(@SumCheck,0) + ISNULL(@SumCach,0)

 			
	Select * into #infofldBuidling from [fnInfoFld] (0x0, 0)
	
	Declare 
			@CreateByUser varchar(255),
			@CreateDate Datetime,

			@LastUpdateByUser varchar(255),
			@LastUpdateDate Datetime
	
		
	Select 
		GetDate() as [NowDate],
		dbo.FnFormatDate(GetDate()) as [NowDate_Gr],

		@OnlyValue as [OnlyValue],
		@OnlyValueAr as [OnlyValueAr],
		@OnlyValueEn as [OnlyValueEn],
		@OnlyMonthlyValue as [OnlyMonthlyValue],
		@OnlyArMonthlyValue as [OnlyArMonthlyValue],
		@OnlyLtnMonthlyValue as [OnlyLtnMonthlyValue],

		dbo.[FnGetDayName]([EditDate], 0) as [DayNameofEditDate] ,
		dbo.[FnGetDayName]([EditDate], 1) as [LtnDayNameofEditDate] ,
		dbo.FnFormatDate([EditDate]) as [EditDate_Gr],
		
		dbo.FnFormatDate([FromDate]) as [FromDate_Gr],
		dbo.FnFormatDate([ToDate]) as [ToDate_Gr],
		
		DATEDIFF(DAY, ToDate, FromDate) as ContractDays,
		Case when ContractFinish = 1 then 
		DATEDIFF(DAY, ToDate, ContractFinishDate) 
		end as ContractDaysDifference,

		dbo.FnFormatDate([A].[License1Date1]) as [License1Date1_Gr],
		dbo.FnFormatDate([A].[License2Date1]) as [License2Date1_Gr],
		dbo.FnFormatDate([A].[License3Date1]) as [License3Date1_Gr],
		dbo.FnFormatDate([A].[License1Date2]) as [License1Date2_Gr],
		dbo.FnFormatDate([A].[License2Date2]) as [License2Date2_Gr],
		dbo.FnFormatDate([A].[License3Date2]) as [License3Date2_Gr],

		dbo.FnFormatDate([A].[ContractFinishDate]) as [ContractFinishDate_Gr],

		(Select SUM(Value) From [vwMaintenanceContractCachPayment] where ContractGuid = A.Guid) as SumCachPayment,
		@ChecksCollection as [SumChecksCollection],
				
		C.CustNote1,
		C.CustNote2,
		C.CustNote3,
		C.CustNote4,
		C.CustNote5,
		C.CustNote6,
		C.CustNote7,
		
		@SumCheck as [SumCheck],
		@SumCach as [SumCach],
		@SumPay as [SumPay], 

		[A].[Guid],
		
		(Select Top 1 [UserName] From vwRealty_LogCard where CardGuid = A.Guid order by Date) as [CreateByUser],
		(Select Top 1 [Date] From vwRealty_LogCard where CardGuid = A.Guid order by Date) as [CreateDate],
		(Select Top 1 [UserName] From vwRealty_LogCard where CardGuid = A.Guid order by Date desc) as [LastUpdateByUser],
		(Select Top 1 [Date] From vwRealty_LogCard where CardGuid = A.Guid order by Date desc) as [LastUpdateDate]
	from 
		[vwMaintenanceContract] [A]
		left join [vwCustomer] [C] on [C].[Guid] = [A].[CustomerGuid]
	where
		[A].[Guid] = @Guid or @Guid = 0x0


GO
/****** Object:  StoredProcedure [dbo].[PrcPrintOfferPrice]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcPrintOfferPrice]
(
	@Guid uniqueidentifier = '2BE4EC1F-DF73-4B91-A4A7-91C8C07A9B6F'
)
  
as
	Select
		*
	From
		[vwOfferPrice]
	where
		[Guid] = @Guid

	Select 
		* 
	From 
		[offerPricefee]
	where
		[ParentGuid] = @Guid

	Select 
		* 
	From 
		[offerPriceins]
	where
		[ParentGuid] = @Guid
		

GO
/****** Object:  StoredProcedure [dbo].[PrcPrintParkingContract]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcPrintParkingContract]
(
	@Guid uniqueidentifier = 0x0
	,@OnlyValue Varchar(256) = ''
)
  
as
	Select 
		GetDate() as [NowDate],
		dbo.FnFormatDate(GetDate()) as [NowDate_Gr],
		[A].[Number],
		[A].[ContractNo],
		[C].[ArName] as [CustArName],
		[C].[LtnName] as [CustLtnName],
		[C].[Address] as [CustomerAddress],
		[C].[Nationality] as [CustomerNationality],
		[C].[PassportNO] as [CustomerPassportNO], 
		[C].[Profession] as [CustomerProfession],
		[C].[Domicile] as [CustomerDomicile],
		[C].[Security] as [CustomerSecurity],
		[C].[MemoSecurity] as [CustomerMemoSecurity],
		[C].[BoxNo] as [CustomerBoxNo],
		[C].[PersonalityNo1] as [CustomerPersonalityNo1],
		[C].[PersonalityNo2] as [CustomerPersonalityNo2],
		[C].[Adjective]as [CustomerAdjective],
		[C].[Fax]	as [CustomerFax],
		[C].[Email]	as [CustomerEmail],
		[C].[PhoneJob]	as [CustomerPhoneJob],
		[C].[Mobile]	as [CustomerMobile],

		[C].[PassportNO] as [CustomerPassportNO],
		[C].[PassportExpireDate] as [CustomerPassportExpireDate],	
		dbo.FnFormatDate([C].[PassportExpireDate]) as [CustomerPassportExpireDate_Gr],

		[B].[Name] as [BuildingarName],
		[B].[LtnName] as [BuildingLtnName],
		[P].[No],
		[B].[Emirate],
		[B].[Suburb],
		[B].[Area],
		[B].[Street],
		[B].[BuildingNo],
		[B].[BondType] as [BuildingBondType],
		[B].[BondNo] as [BuildingBondNo],
		[B].[BondDate] as [BuildingBondDate],
		dbo.FnFormatDate([B].[BondDate]) as [BuildingBondDate_Gr],
		
		[B].[LtnEmirate],
		[B].[LtnArea],
		[B].[LtnSuburb],
		[B].[LtnStreet],

		[B].[BankName] as [BuildingBankName],
		[B].[BankAccCode] as [BuildingBankAccCode],

        [A].[RentDuration],
        [A].[Rentype],
        [A].[TermsOfPayment],
		[A].[Rent] as [Value],
		@OnlyValue as [OnlyValue],
		[My].[Code] as [Currency],
		[FromDate],
		dbo.FnFormatDate([FromDate]) AS [FromDate_Gr],
		[ToDate] as [ToDate],
		dbo.FnFormatDate([ToDate]) as [ToDate_Gr],

		DATEDIFF(DAY, ToDate, FromDate) as ContractDays,
		Case when ContractFinish = 1 then 
		DATEDIFF(DAY, ToDate, ContractFinishDate) 
		end as ContractDaysDifference,

		[A].[Note],
		[A].[Note2],
		
		[A].[CardNo],
		[A].[CarNo],
		[A].[CarType],
		[A].[CarColor],
		[A].[Emirate] as [ParkingEmirate],

	    [R].[Name] as [Rent_Name],
	    [R].[LtnName] as [Rent_LtnName],
	    [R].[Adjective]  as [Rent_Adjective],
	    [R].[Nationality]  as [Rent_Nationality],
	    [R].[Work]  as [Rent_Work],
	    [R].[PersonalityNo]   as [Rent_PersonalityNo],
		[R].[WorkCardNo]   as [Rent_CardNo],
	    [R].[Address]  as [Rent_Address],
	    [R].[Phone]  as [Rent_Phone],
	    [R].[Mobile]  as [Rent_Mobile],
	    [R].[BoxNo]  as [Rent_BoxNo],
		[R].[Fax]  as [Rent_FaxNo],
	    [R].[EMail]  as [Rent_EMail],
		
		[R].[PassportNO] as [Rent_PassportNO],
		[R].[PassportExpireDate] as [Rent_PassportExpireDate],	
		dbo.FnFormatDate([R].[PassportExpireDate]) as [Rent_PassportExpireDate_Gr],

		[A].[License1No],
		[A].[License2No],
		[A].[License3No],
		[A].[License1Date1],
		dbo.FnFormatDate([A].[License1Date1]) as [License1Date1_Gr],
		[A].[License2Date1],
		dbo.FnFormatDate([A].[License2Date1]) as [License2Date1_Gr],
		[A].[License3Date1],
		dbo.FnFormatDate([A].[License3Date1]) as [License3Date1_Gr],
		[A].[License1Date2],
		dbo.FnFormatDate([A].[License1Date2]) as [License1Date2_Gr],
		[A].[License2Date2],
		dbo.FnFormatDate([A].[License2Date2]) as [License2Date2_Gr],
		[A].[License3Date2],
		dbo.FnFormatDate([A].[License3Date2]) as [License3Date2_Gr],

		[A].[LtnRentDuration],
		[A].[LtnRentype],
		[A].[LtnTermsOfPayment],

	    [OW].[Name] as [Owner_Name],
	    [OW].[LtnName] as [Owner_LtnName],
	    [OW].[Nationality]  as [Owner_Nationality],
	    [OW].[PersonalityNo]   as [Owner_PersonalityNo],
	    [OW].[Address]  as [Owner_Address],
	    [OW].[Phone]  as [Owner_Phone],
	    [OW].[Mobile]  as [Owner_Mobile],
	    [OW].[BoxNo]  as [Owner_BoxNo],
		[OW].[Fax]  as [Owner_FaxNo],
	    [OW].[EMail]  as [Owner_EMail],
		[Sl].[Name] as [SalesMan],
		[T].[Code] as [TypeCode],
		[T].[Code]+CAST(A.Number as Varchar(256)) as [TypeCode_Number],
		[C].[BankName] as [CustBankName],
		[C].[BankAccCode] as [CustBankAccCode],
		[Ac].[code] AS [AccountCode],
		[Ac].[Balance] AS [AccountBalance],

		(Select Sum(value) from ParkingContractFee Where ParentGuid = A.Guid) AS [SumFee],

		[A].[InsuranceValueOld],
		[A].[InsuranceValue],
		[A].[ContractPrice],
		[A].[CertificatValue],
		
		[A].[CommissionFromCustValue],
		[A].[CommissionFromCustPercent],

		[A].[CommissionFromOwnerValue] ,
		[A].[CommissionFromOwnerPercent],
		(Select 
			pp.NO as FlatNo
		 From 
			LeaseApartment ll
			inner join [Apartment] [pp] on [pp].[Guid] = [ll].[ApartmentGuid]
		 where 
			ll.Guid = A.FlatContractGuid
			) as FlatNo,
		[A].[Guid],

		(Select Top 1 [UserName] From vwRealty_LogCard where CardGuid = A.Guid order by Date) as [CreateByUser],
		(Select Top 1 [Date] From vwRealty_LogCard where CardGuid = A.Guid order by Date) as [CreateDate],
		(Select Top 1 [UserName] From vwRealty_LogCard where CardGuid = A.Guid order by Date desc) as [LastUpdateByUser],
		(Select Top 1 [Date] From vwRealty_LogCard where CardGuid = A.Guid order by Date desc) as [LastUpdateDate]
		
	from 
		[ParkingContract] [A]
		left join [vwBuilding] [B] On [A].[BuildingGuid] = [B].[Guid]
		left join [vwParking] [P] on [P].[Guid] = [A].[ParkingGuid]
		left join [vwCustomer] [C] on [C].[Guid] = [A].[CustomerGuid]
		left join [vwAccount] [AC] on [C].[AcGuid] = [AC].[Guid]
		left join [vwCurrency] [My] on [My].[Guid] = [A].[CurrencyGuid]
		left join [RentInfo] [R] on [R].[Guid] = [A].[RentInfoGuid]
		left join [vwOwner] [OW] on [OW].[Guid] = [B].[ownerGuid]
		left join [vwSalesMan] [Sl] on [Sl].[Guid] = [A].[SalesManGuid]
		inner join [ContractType] T on T.Guid = A.TypeGuid
	where
		[A].[Guid] = @Guid or @Guid = 0x0


GO
/****** Object:  StoredProcedure [dbo].[PrcPrintReceiptContract]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcPrintReceiptContract]
(
	@Guid uniqueidentifier = '44BAA61B-A0A7-43B5-B07B-299242BD419B',
	@Only Varchar(256) = '',
	@OnlyAr Varchar(256) = '',
	@OnlyEn Varchar(256) = '',	
	@OnlySumCheckAr Varchar(256) = '',	
	@OnlySumChecken Varchar(256) = '',	
	@OnlySumCashAr Varchar(256) = '',	
    @OnlySumCashEn Varchar(256) = '',
    @PrintCheckEnryOnly bit = 0
	
)
  
as
	Set NoCount On
	
	-- ãÌãæÚ ÇáÔíßÇÊ
	Declare @SumCheck Float, @SumCach Float, @SumPay Float
	
	Select
		@SumCheck = Sum([Value])
	From
		[LinkCheckContract] [C]
		inner join (Select Distinct Guid From [Resource] where [Spid] = @@Spid) [R] on [R].[Guid] = [C].ParentGuid
	where
		[ContractGuid] = @Guid

	Select
		@SumCach = isnull(Sum([Value] * [CurrencyVal]),0)
	From
		[vwContractCachPayment] [C]
		inner join (Select Distinct Guid From [Resource] where [Spid] = @@Spid) [R] on [R].[Guid] = [C].[Guid]
	where
		[ContractGuid] = @Guid

	Set @SumPay = ISNULL(@SumCheck,0) + ISNULL(@SumCach,0)

	if @PrintCheckEnryOnly = 0
	begin
		
		/*
		Select 
			@SumPay = @SumPay + IsNull(OtherFee,0) + IsNull(InsuranceValue,0) + IsNull(CertificatValue,0)
		From
			[vwLeaseApartment]
		where 
			([Guid] = @Guid or @Guid = 0x0)		
		*/
		
		Select
			[A].[Number],
			[A].[ContractNo],
			
			[A].[CustName],
			[A].[CustArName],
			[A].[CustLtnName],
			[A].[CustomerPhonejob],
			[A].[CustomerMobile],
			[A].[CustomerNationality],
			
			[cu].[Barcode] as [Cust_Barcode], 			[cu].[Name] as [Cust_Name], 			[cu].[LtnName] as [Cust_LtnName], 			[cu].[CardKind] as [Cust_CardKind], 			[cu].[CardKind2] as [Cust_CardKind2], 			[cu].[Nationality] as [Cust_Nationality], 			[cu].[LtnNationality] as [Cust_LtnNationality], 			[cu].[Profession] as [Cust_Profession], 			[cu].[LtnProfession] as [Cust_LtnProfession], 			[cu].[PassportNO] as [Cust_PassportNO], 			[cu].[PassportExpireDate] as [Cust_PassportExpireDate], 			[cu].[Domicile] as [Cust_Domicile], 			[cu].[Security] as [Cust_Security], 			[cu].[LtnSecurity] as [Cust_LtnSecurity], 			[cu].[PhoneJob] as [Cust_PhoneJob], 			[cu].[Mobile] as [Cust_Mobile], 			[cu].[Note] as [Cust_Note], 			[cu].[Trademark] as [Cust_Trademark], 			[cu].[LtnTrademark] as [Cust_LtnTrademark], 			[cu].[MemoSecurity] as [Cust_MemoSecurity], 			[cu].[LtnMemoSecurity] as [Cust_LtnMemoSecurity], 			[cu].[Address] as [Cust_Address], 			[cu].[LtnAddress] as [Cust_LtnAddress], 			[cu].[BoxNo] as [Cust_BoxNo], 			[cu].[PersonalityNo1] as [Cust_PersonalityNo1], 			[cu].[PersonalityNo2] as [Cust_PersonalityNo2], 			[cu].[Fax] as [Cust_Fax], 			[cu].[EMail] as [Cust_EMail], 			[cu].[Adjective] as [Cust_Adjective], 			[cu].[LtnAdjective] as [Cust_LtnAdjective], 			[cu].[CkHideInSearch] as [Cust_CkHideInSearch], 			[cu].[ban] as [Cust_ban], 			[cu].[BankName] as [Cust_BankName], 			[cu].[BankAccCode] as [Cust_BankAccCode], 			[cu].[Birthday] as [Cust_Birthday], 			[cu].[DomicileEndDate] as [Cust_DomicileEndDate], 			[cu].[PersonalityEndDate] as [Cust_PersonalityEndDate], 			[cu].[CustNote1] as [Cust_CustNote1], 			[cu].[CustNote2] as [Cust_CustNote2], 			[cu].[CustNote3] as [Cust_CustNote3], 			[cu].[CustNote4] as [Cust_CustNote4], 			[cu].[CustNote5] as [Cust_CustNote5], 			[cu].[CustNote6] as [Cust_CustNote6], 			[cu].[CustNote7] as [Cust_CustNote7], 			[cu].[banContract] as [Cust_banContract], 
			A.accountbalance,
			
			@SumCheck as [SumCheck],
			@SumCach as [SumCach],
			@SumPay as [SumPay], 
			@Only as [OnlySumCheck], 
			@OnlyAr as [OnlySumCheckAr], 
			@OnlyEn as [OnlySumCheckEn], 

			@OnlySumCheckAr as OnlySumCheckAr,
			@OnlySumChecken as OnlySumChecken,
			@OnlySumCashAr as OnlySumCashAr,
			@OnlySumCashEn AS OnlySumCashEn,

			[A].[EditDate],
			[A].[FromDate],
			[A].[ToDate],
			A.ContractDays,
			A.ContractDaysDifference,
			[A].[BuildingName],
			[A].[BuildingArName],
			[A].[BuildingLtnName],
			[A].[FlatNo],
			[A].[Note2],

			[A].[Rent] as [ContractValue],

			[A].[DiscountPercent],
			[A].[DiscountValue],
			[A].[Rent] - [A].[DiscountValue] as [RentAfterDiscount],	

			[A].[MonthlyValue] ,
			[A].[MonthlyValue] * 12.00 as [YearValue],
			[A].[CurrencyName],
			[A].[DiscountPercent],
			[A].[DiscountValue],
			[A].[InsuranceValueOld],
			[A].[InsuranceValue],
			[A].[InsuranceValuePercent],
			[A].[CommissionFromCustValue],
			[A].[CommissionFromOwnerValue],
			[A].[ElectricityInsurance],
			[A].[ElectricityCounter],
			[A].[ContractPrice],
			[A].[CertificatValue],
			[A].[OtherFee],
			[A].[FlatKind],-- äæÚ ÇáÚíä
			[A].[ApartmentType], --ÇáæÕÝ
			[A].[NewStateStr], -- ÍÇáÉ ÇáÚÞÏ
			Case when isnull([A].FlatOwner,0) = 0 then dbo.sc('ãáß') else dbo.sc('ÅÏÇÑÉ ÚÞÇÑÇÊ') end as [FlatOwnerStr],
			A.Purpose,
			A.ResidentCount,
			A.Trademark,
			A.whereabouts,
			A.RentDuration,
			A.LtnRentDuration,
			A.Rentype,
			A.LtnRentype,
			A.TermsOfPayment,
			A.LtnTermsOfPayment,
			
			Case when isnull([A].NewState,0) = 0 then dbo.sc('ÌÏíÏ') else dbo.sc('ÊÌÏíÏ') end as [NewSate],
			Case when isnull([A].NewState,0) = 0 then 'ÌÏíÏ' else 'ÊÌÏíÏ' end as [ArNewSate],
			Case when isnull([A].NewState,0) = 0 then 'New' else 'Renewal' end as [LtnNewSate],
			S.Name as [SalesMan]
		From 
			[vwLeaseApartment] A
			left join Salesman S on S.Guid = [A].[SalesManGuid]
			inner join Customer Cu on Cu.Guid = A.CustomerGuid
		where 
			([A].[Guid] = @Guid or @Guid = 0x0)
	end

	Create Table [#Tbl]
	(
		[Number] int,
		[BankName] Varchar(256),
		[Value] Float,
		[Currency] Varchar(256),
		[No]  Varchar(256),
		[EditDate] DateTime,
		[DueDate] DateTime,
		[State] Varchar(256),
		[Note3] Varchar(256),
		[Note] Varchar(256)
	)

	Insert Into [#Tbl]
	Select
		P.Number,
		[BankName],
		[LL].[Value] as [Value],
		[CurrencyName]  as [Currency],
		[No],
		P.Date as [EditDate],
		[DueDate],
		Case 		
			when  [C3].[CheckGuid] is not null then dbo.SC('ãÑÊÌÚ')
			when  [C1].[CheckGuid] is not null then dbo.SC('ãÍÕá') 
			when  [C4].[CheckGuid] is not null then dbo.SC('ãÍÕá ÌÒÆíÇ') 
			when  [C].[CheckGuid] is not null then dbo.SC('ãÑÍá') 
			when  [C2].[CheckGuid] is not null then dbo.SC('ãÙåÑ') 
		end as [State],
		[P].[Note3],
		[P].[Note]
	From
		[vwChecks] [P]
		inner join [LinkCheckContract] LL on LL.ParentGuid = P.Guid
 		left join [vwChecksCollection] [C] on [C].[CheckGuid] = [P].[Guid] and [C].[Kind] = 0
 		left join [vwChecksCollection] [C1] on [C1].[CheckGuid] = [P].[Guid] and [C1].[Kind] = 1
 		left join [vwChecksCollection] [C2] on [C2].[CheckGuid] = [P].[Guid] and [C2].[Kind] = 2
 		left join [vwChecksCollection] [C3] on [C3].[CheckGuid] = [P].[Guid] and [C3].[Kind] = 3
 		left join [ChecksPartialCollection]  [C4] on [C4].[CheckGuid] = [P].[Guid] and [C3].[Kind] = 3
		inner join (Select Distinct Guid From [Resource] where [Spid] = @@Spid) [R] on [R].[Guid] = [P].[Guid]
	where
		LL.[ContractGuid] = @Guid


	Select * from [#Tbl]
	Order By
		[DueDate], [No]

	Select
		C.Number,
		C.[RecieptVoucherNumber],
		C.SNumber,
		dbo.sc('äÞÏÇð') as [BankName],
		[Value]  as [Value],
		[Currency]  as [Currency],
		'' as [No],
		[Date],
		'' as State,
		[C].[HNote],
		[C].[DNote]
	From
		[vwContractCachPayment] [C]
		inner join (Select Distinct Guid From [Resource] where [Spid] = @@Spid) [R] on [R].[Guid] = [C].[Guid] 
	where
		[ContractGuid] = @Guid
	Order By
		[Number],[DNumber]


GO
/****** Object:  StoredProcedure [dbo].[PrcPrintReceiptLandContract]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcPrintReceiptLandContract]
(
	@Guid uniqueidentifier = '3B67418A-7800-4F09-8391-21EC204D040B',
	@Only Varchar(256) = '',
	@OnlyAr Varchar(256) = '',
	@OnlyEn Varchar(256) = ''
)
  
as
	Set NoCount On
		-- ãÌãæÚ ÇáÔíßÇÊ
	Declare @SumCheck Float, @SumCach Float, @SumPay Float
	
	Select
		@SumCheck = Sum([Value])
	From
		[LinkCheckContract] [C]
		inner join (Select Distinct Guid From [Resource] where [Spid] = @@Spid) [R] on [R].[Guid] = [C].ParentGuid
	where
		[ContractGuid] = @Guid

	Select
		@SumCach = isnull(Sum([Value] * [CurrencyVal]),0)
	From
		[vwLandContractCachPayment] [C]
		inner join [Resource] [R] on [R].[Guid] = [C].[Guid] and [Spid] = @@Spid
	where
		[ContractGuid] = @Guid

	Set @SumPay = ISNULL(@SumCheck,0) + ISNULL(@SumCach,0)


	Select
		[A].[Number],
		[A].[ContractNo],
		[A].[CustName],
		[A].[CustArName],
		[A].[CustLtnName],
		[cu].[Barcode] as [Cust_Barcode], 		[cu].[Name] as [Cust_Name], 		[cu].[LtnName] as [Cust_LtnName], 		[cu].[CardKind] as [Cust_CardKind], 		[cu].[CardKind2] as [Cust_CardKind2], 		[cu].[Nationality] as [Cust_Nationality], 		[cu].[LtnNationality] as [Cust_LtnNationality], 		[cu].[Profession] as [Cust_Profession], 		[cu].[LtnProfession] as [Cust_LtnProfession], 		[cu].[PassportNO] as [Cust_PassportNO], 		[cu].[PassportExpireDate] as [Cust_PassportExpireDate], 		[cu].[Domicile] as [Cust_Domicile], 		[cu].[Security] as [Cust_Security], 		[cu].[LtnSecurity] as [Cust_LtnSecurity], 		[cu].[PhoneJob] as [Cust_PhoneJob], 		[cu].[Mobile] as [Cust_Mobile], 		[cu].[Note] as [Cust_Note], 		[cu].[Trademark] as [Cust_Trademark], 		[cu].[LtnTrademark] as [Cust_LtnTrademark], 		[cu].[MemoSecurity] as [Cust_MemoSecurity], 		[cu].[LtnMemoSecurity] as [Cust_LtnMemoSecurity], 		[cu].[Address] as [Cust_Address], 		[cu].[LtnAddress] as [Cust_LtnAddress], 		[cu].[BoxNo] as [Cust_BoxNo], 		[cu].[PersonalityNo1] as [Cust_PersonalityNo1], 		[cu].[PersonalityNo2] as [Cust_PersonalityNo2], 		[cu].[Fax] as [Cust_Fax], 		[cu].[EMail] as [Cust_EMail], 		[cu].[Adjective] as [Cust_Adjective], 		[cu].[LtnAdjective] as [Cust_LtnAdjective], 		[cu].[CkHideInSearch] as [Cust_CkHideInSearch], 		[cu].[ban] as [Cust_ban], 		[cu].[BankName] as [Cust_BankName], 		[cu].[BankAccCode] as [Cust_BankAccCode], 		[cu].[Birthday] as [Cust_Birthday], 		[cu].[DomicileEndDate] as [Cust_DomicileEndDate], 		[cu].[PersonalityEndDate] as [Cust_PersonalityEndDate], 		[cu].[CustNote1] as [Cust_CustNote1], 		[cu].[CustNote2] as [Cust_CustNote2], 		[cu].[CustNote3] as [Cust_CustNote3], 		[cu].[CustNote4] as [Cust_CustNote4], 		[cu].[CustNote5] as [Cust_CustNote5], 		[cu].[CustNote6] as [Cust_CustNote6], 		[cu].[CustNote7] as [Cust_CustNote7], 		[cu].[banContract] as [Cust_banContract], 
		A.accountBalance,
		@SumCheck as [SumCheck],
		@SumCach as [SumCach],
		@SumPay as [SumPay], 
		@Only as [OnlySumCheck], 
		@OnlyAr as [OnlySumCheckAr], 
		@OnlyEn as [OnlySumCheckEn], 
		[A].[FromDate],
		[A].[ToDate],
		
		DATEDIFF(DAY, ToDate, FromDate) as ContractDays,
		Case when ContractFinish = 1 then 
		DATEDIFF(DAY, ToDate, ContractFinishDate) 
		end as ContractDaysDifference,
		
		[A].[Name] as [LandName],
		[A].[Note2],
		[A].[Rent] as [ContractValue],
		[A].[CurrencyName],
		[A].[DiscountPercent],
		[A].[DiscountValue],
		[A].[InsuranceValueOld],
		[A].[InsuranceValue],
		[A].[InsuranceValuePercent],
		[A].[CommissionFromCustValue],
		[A].[CommissionFromOwnerValue],
		[A].[ElectricityInsurance],
		[A].[ElectricityCounter],
		[A].[ContractPrice],
		[A].[CertificatValue],
		[A].[OtherFee],
		Case when isnull(NewState,0) = 0 then dbo.sc('ÌÏíÏ') else dbo.sc('ÊÌÏíÏ') end as [NewSate],
		Case when isnull(NewState,0) = 0 then 'ÌÏíÏ' else 'ÊÌÏíÏ' end as [ArNewSate],
		Case when isnull(NewState,0) = 0 then 'New' else 'Renewal' end as [LtnNewSate],
		S.Name as [SalesMan]
	From 
		[vwLandContract] A
		left join Salesman S on S.Guid = [A].[SalesManGuid]
		inner join Customer Cu on Cu.Guid = A.CustomerGuid
	where 
		([A].[Guid] = @Guid or @Guid = 0x0)

	Create Table [#Tbl]
	(
		[BankName] Varchar(256),
		[Value] Float,
		[Currency] Varchar(256),
		[No]  Varchar(256),
		[DueDate] DateTime,
		[State] Varchar(256),
		[Note] Varchar(256)
	)

	Insert Into [#Tbl]
	Select
		[BankName],
		Cast([LL].[Value] as Varchar(20)) as [Value],
		[CurrencyName]  as [Currency],
		[No],
		[DueDate],
		Case 		
			when  [C3].[CheckGuid] is not null then dbo.SC('ãÑÊÌÚ')
			when  [C1].[CheckGuid] is not null then dbo.SC('ãÍÕá') 
			when  [C4].[CheckGuid] is not null then dbo.SC('ãÍÕá ÌÒÆíÇ') 
			when  [C].[CheckGuid] is not null then dbo.SC('ãÑÍá') 
			when  [C2].[CheckGuid] is not null then dbo.SC('ãÙåÑ') 
		end as [State],
		[P].[Note3]
	From
		[vwChecks] [P]
		inner join [LinkCheckContract] LL on LL.ParentGuid = P.Guid
 		left join [vwChecksCollection] [C] on [C].[CheckGuid] = [P].[Guid] and [C].[Kind] = 0
 		left join [vwChecksCollection] [C1] on [C1].[CheckGuid] = [P].[Guid] and [C1].[Kind] = 1
 		left join [vwChecksCollection] [C2] on [C2].[CheckGuid] = [P].[Guid] and [C2].[Kind] = 2
 		left join [vwChecksCollection] [C3] on [C3].[CheckGuid] = [P].[Guid] and [C3].[Kind] = 3
 		left join [ChecksPartialCollection]  [C4] on [C4].[CheckGuid] = [P].[Guid] and [C3].[Kind] = 3
		inner join [Resource] [R] on [R].[Guid] = [P].[Guid] and [Spid] = @@Spid
	where
		LL.[ContractGuid] = @Guid

	Select * from [#Tbl]
	Order By
		[DueDate], [No]

	Select
		dbo.sc('äÞÏÇð') as [BankName],
		Cast([Value] as Varchar(20)) as [Value],
		[Currency]  as [Currency],
		'' as [No],
		[Date],
		'' as State,
		[C].[HNote],
		[C].[DNote]
	From
		[vwLandContractCachPayment] [C]
		inner join [Resource] [R] on [R].[Guid] = [C].[Guid] and [Spid] = @@Spid
	where
		[ContractGuid] = @Guid


GO
/****** Object:  StoredProcedure [dbo].[PrcPrintReceiptLawsuit]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcPrintReceiptLawsuit]
(
	@Guid uniqueidentifier = '{FFFD76C1-BE2F-4DF9-8C55-0E0F8BB29DCB}',
	@Only Varchar(256) = '',
	@OnlyAr Varchar(256) = '',
	@OnlyEn Varchar(256) = ''
)
  
as
	Set NoCount On
	-- ãÌãæÚ ÇáÔíßÇÊ
	Declare @SumCheck Float, @SumCach Float, @SumPay Float
	
	Select
		@SumCheck = Sum([Value])
	From
		[LinkCheckContract] [C]
		inner join (Select Distinct Guid From [Resource] where [Spid] = @@Spid) [R] on [R].[Guid] = [C].ParentGuid
	where
		[ContractGuid] = @Guid

	Select
		@SumCach = isnull(Sum([Value] * [CurrencyVal]),0)
	From
		vwLawsuitCachPayment [C]
		inner join (Select Distinct Guid From [Resource] where [Spid] = @@Spid) [R] on [R].[Guid] = [C].[Guid]
	where
		[ContractGuid] = @Guid

	Set @SumPay = ISNULL(@SumCheck,0) + ISNULL(@SumCach,0)
	
	Select
		[A].[Number],
		[A].[ContractNo],
		[A].[CustName],
		[A].[CustArName],
		[A].[CustLtnName],
		
		[cu].[Barcode] as [Cust_Barcode], 		[cu].[Name] as [Cust_Name], 		[cu].[LtnName] as [Cust_LtnName], 		[cu].[CardKind] as [Cust_CardKind], 		[cu].[CardKind2] as [Cust_CardKind2], 		[cu].[Nationality] as [Cust_Nationality], 		[cu].[LtnNationality] as [Cust_LtnNationality], 		[cu].[Profession] as [Cust_Profession], 		[cu].[LtnProfession] as [Cust_LtnProfession], 		[cu].[PassportNO] as [Cust_PassportNO], 		[cu].[PassportExpireDate] as [Cust_PassportExpireDate], 		[cu].[Domicile] as [Cust_Domicile], 		[cu].[Security] as [Cust_Security], 		[cu].[LtnSecurity] as [Cust_LtnSecurity], 		[cu].[PhoneJob] as [Cust_PhoneJob], 		[cu].[Mobile] as [Cust_Mobile], 		[cu].[Note] as [Cust_Note], 		[cu].[Trademark] as [Cust_Trademark], 		[cu].[LtnTrademark] as [Cust_LtnTrademark], 		[cu].[MemoSecurity] as [Cust_MemoSecurity], 		[cu].[LtnMemoSecurity] as [Cust_LtnMemoSecurity], 		[cu].[Address] as [Cust_Address], 		[cu].[LtnAddress] as [Cust_LtnAddress], 		[cu].[BoxNo] as [Cust_BoxNo], 		[cu].[PersonalityNo1] as [Cust_PersonalityNo1], 		[cu].[PersonalityNo2] as [Cust_PersonalityNo2], 		[cu].[Fax] as [Cust_Fax], 		[cu].[EMail] as [Cust_EMail], 		[cu].[Adjective] as [Cust_Adjective], 		[cu].[LtnAdjective] as [Cust_LtnAdjective], 		[cu].[CkHideInSearch] as [Cust_CkHideInSearch], 		[cu].[ban] as [Cust_ban], 		[cu].[BankName] as [Cust_BankName], 		[cu].[BankAccCode] as [Cust_BankAccCode], 		[cu].[Birthday] as [Cust_Birthday], 		[cu].[DomicileEndDate] as [Cust_DomicileEndDate], 		[cu].[PersonalityEndDate] as [Cust_PersonalityEndDate], 		[cu].[CustNote1] as [Cust_CustNote1], 		[cu].[CustNote2] as [Cust_CustNote2], 		[cu].[CustNote3] as [Cust_CustNote3], 		[cu].[CustNote4] as [Cust_CustNote4], 		[cu].[CustNote5] as [Cust_CustNote5], 		[cu].[CustNote6] as [Cust_CustNote6], 		[cu].[CustNote7] as [Cust_CustNote7], 		[cu].[banContract] as [Cust_banContract], 
		@SumCheck as [SumCheck],
		@SumCach as [SumCach],
		@SumPay as [SumPay], 
		@Only as [OnlySumCheck], 
		@OnlyAr as [OnlySumCheckAr], 
		@OnlyEn as [OnlySumCheckEn], 
		[A].[EditDate],
		[A].[FromDate],
		[A].[ToDate],
		[A].[BuildingName],
		[A].[BuildingArName],
		[A].[BuildingLtnName],
		[A].[FlatNo],
		[A].[Note2],
		[A].[Rent] as [ContractValue],
		[A].[CurrencyName],
		[A].[DiscountPercent],
		[A].[DiscountValue],
		[A].[InsuranceValueOld],
		[A].[InsuranceValue],
		[A].[InsuranceValuePercent],
		[A].[CommissionFromCustValue],
		[A].[CommissionFromOwnerValue],
		[A].[ElectricityInsurance],
		[A].[ElectricityCounter],
		[A].[ContractPrice],
		[A].[CertificatValue],
		[A].[OtherFee],
		Case when isnull([A].NewState,0) = 0 then dbo.sc('ÌÏíÏ') else dbo.sc('ÊÌÏíÏ') end as [NewSate],
		Case when isnull([A].NewState,0) = 0 then 'ÌÏíÏ' else 'ÊÌÏíÏ' end as [ArNewSate],
		Case when isnull([A].NewState,0) = 0 then 'New' else 'Renewal' end as [LtnNewSate],
		S.Name as [SalesMan]
	From 
		[vwLeaseApartment] A
		left join Salesman S on S.Guid = [A].[SalesManGuid]
		inner join Lawsuit L on L.ContractGuid = A.Guid
		inner join Customer Cu on Cu.Guid = A.CustomerGuid
	where 
		([L].[Guid] = @Guid or @Guid = 0x0)

	Create Table [#Tbl]
	(
		[BankName] Varchar(256),
		[Value] Float,
		[Currency] Varchar(256),
		[No]  Varchar(256),
		[DueDate] DateTime,
		[State] Varchar(256),
		[Note] Varchar(256)
	)

	Insert Into [#Tbl]
	Select
		[BankName],
		Cast([LL].[Value] as Varchar(20)) as [Value],
		[CurrencyName]  as [Currency],
		[No],
		[DueDate],
		Case 		
			when  [C3].[CheckGuid] is not null then dbo.SC('ãÑÊÌÚ')
			when  [C1].[CheckGuid] is not null then dbo.SC('ãÍÕá') 
			when  [C4].[CheckGuid] is not null then dbo.SC('ãÍÕá ÌÒÆíÇ') 
			when  [C].[CheckGuid] is not null then dbo.SC('ãÑÍá') 
			when  [C2].[CheckGuid] is not null then dbo.SC('ãÙåÑ') 
		end as [State],
		[P].[Note3]
	From
		[vwChecks] [P]
		inner join [LinkCheckContract] LL on LL.ParentGuid = P.Guid
 		left join [vwChecksCollection] [C] on [C].[CheckGuid] = [P].[Guid] and [C].[Kind] = 0
 		left join [vwChecksCollection] [C1] on [C1].[CheckGuid] = [P].[Guid] and [C1].[Kind] = 1
 		left join [vwChecksCollection] [C2] on [C2].[CheckGuid] = [P].[Guid] and [C2].[Kind] = 2
 		left join [vwChecksCollection] [C3] on [C3].[CheckGuid] = [P].[Guid] and [C3].[Kind] = 3
 		left join [ChecksPartialCollection]  [C4] on [C4].[CheckGuid] = [P].[Guid] and [C3].[Kind] = 3
		inner join (Select Distinct Guid From [Resource] where [Spid] = @@Spid) [R] on [R].[Guid] = [P].[Guid]
	where
		LL.[ContractGuid] = @Guid

	Select * from [#Tbl]
	Order By
		[DueDate], [No]

	Select
		dbo.sc('äÞÏÇð') as [BankName],
		Cast([Value] as Varchar(20)) as [Value],
		[Currency]  as [Currency],
		'' as [No],
		[Date],
		'' as State,
		[C].[HNote],
		[C].[DNote]
	From
		[vwLawsuitCachPayment] [C]
		inner join (Select Distinct Guid From [Resource] where [Spid] = @@Spid) [R] on [R].[Guid] = [C].[Guid] 
	where
		[ContractGuid] = @Guid
	Order By
		[Number],[DNumber]



GO
/****** Object:  StoredProcedure [dbo].[PrcPrintReceiptMaintenanceContract]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcPrintReceiptMaintenanceContract]
(
	@Guid uniqueidentifier = '44BAA61B-A0A7-43B5-B07B-299242BD419B',
	@Only Varchar(256) = '',
	@OnlyAr Varchar(256) = '',
	@OnlyEn Varchar(256) = '',	
	@OnlySumCheckAr Varchar(256) = '',	
	@OnlySumChecken Varchar(256) = '',	
	@OnlySumCashAr Varchar(256) = '',	
    @OnlySumCashEn Varchar(256) = '',
    @PrintCheckEnryOnly bit = 0
	
)
  
as
	Set NoCount On
	
	-- ãÌãæÚ ÇáÔíßÇÊ
	Declare @SumCheck Float, @SumCach Float, @SumPay Float
	
	Select
		@SumCheck = Sum([Value])
	From
		[LinkCheckContract] [C]
		inner join (Select Distinct Guid From [Resource] where [Spid] = @@Spid) [R] on [R].[Guid] = [C].ParentGuid
	where
		[ContractGuid] = @Guid

	Select
		@SumCach = isnull(Sum([Value] * [CurrencyVal]),0)
	From
		vwMaintenanceContractCachPayment [C]
		inner join (Select Distinct Guid From [Resource] where [Spid] = @@Spid) [R] on [R].[Guid] = [C].[Guid]
	where
		[ContractGuid] = @Guid

	Set @SumPay = ISNULL(@SumCheck,0) + ISNULL(@SumCach,0)

	if @PrintCheckEnryOnly = 0
	begin
		
		/*
		Select 
			@SumPay = @SumPay + IsNull(OtherFee,0) + IsNull(InsuranceValue,0) + IsNull(CertificatValue,0)
		From
			[vwLeaseApartment]
		where 
			([Guid] = @Guid or @Guid = 0x0)		
		*/
		
		Select
			[A].[Number],
			[A].[ContractNo],
			
			[A].[CustName],
			[A].[CustArName],
			[A].[CustLtnName],
			[A].[CustomerPhonejob],
			[A].[CustomerMobile],
			[A].[CustomerNationality],
			
			[cu].[Barcode] as [Cust_Barcode], 			[cu].[Name] as [Cust_Name], 			[cu].[LtnName] as [Cust_LtnName], 			[cu].[CardKind] as [Cust_CardKind], 			[cu].[CardKind2] as [Cust_CardKind2], 			[cu].[Nationality] as [Cust_Nationality], 			[cu].[LtnNationality] as [Cust_LtnNationality], 			[cu].[Profession] as [Cust_Profession], 			[cu].[LtnProfession] as [Cust_LtnProfession], 			[cu].[PassportNO] as [Cust_PassportNO], 			[cu].[PassportExpireDate] as [Cust_PassportExpireDate], 			[cu].[Domicile] as [Cust_Domicile], 			[cu].[Security] as [Cust_Security], 			[cu].[LtnSecurity] as [Cust_LtnSecurity], 			[cu].[PhoneJob] as [Cust_PhoneJob], 			[cu].[Mobile] as [Cust_Mobile], 			[cu].[Note] as [Cust_Note], 			[cu].[Trademark] as [Cust_Trademark], 			[cu].[LtnTrademark] as [Cust_LtnTrademark], 			[cu].[MemoSecurity] as [Cust_MemoSecurity], 			[cu].[LtnMemoSecurity] as [Cust_LtnMemoSecurity], 			[cu].[Address] as [Cust_Address], 			[cu].[LtnAddress] as [Cust_LtnAddress], 			[cu].[BoxNo] as [Cust_BoxNo], 			[cu].[PersonalityNo1] as [Cust_PersonalityNo1], 			[cu].[PersonalityNo2] as [Cust_PersonalityNo2], 			[cu].[Fax] as [Cust_Fax], 			[cu].[EMail] as [Cust_EMail], 			[cu].[Adjective] as [Cust_Adjective], 			[cu].[LtnAdjective] as [Cust_LtnAdjective], 			[cu].[CkHideInSearch] as [Cust_CkHideInSearch], 			[cu].[ban] as [Cust_ban], 			[cu].[BankName] as [Cust_BankName], 			[cu].[BankAccCode] as [Cust_BankAccCode], 			[cu].[Birthday] as [Cust_Birthday], 			[cu].[DomicileEndDate] as [Cust_DomicileEndDate], 			[cu].[PersonalityEndDate] as [Cust_PersonalityEndDate], 			[cu].[CustNote1] as [Cust_CustNote1], 			[cu].[CustNote2] as [Cust_CustNote2], 			[cu].[CustNote3] as [Cust_CustNote3], 			[cu].[CustNote4] as [Cust_CustNote4], 			[cu].[CustNote5] as [Cust_CustNote5], 			[cu].[CustNote6] as [Cust_CustNote6], 			[cu].[CustNote7] as [Cust_CustNote7], 			[cu].[banContract] as [Cust_banContract], 
			
			@SumCheck as [SumCheck],
			@SumCach as [SumCach],
			@SumPay as [SumPay], 
			@Only as [OnlySumCheck], 
			@OnlyAr as [OnlySumCheckAr], 
			@OnlyEn as [OnlySumCheckEn], 

			@OnlySumCheckAr as OnlySumCheckAr,
			@OnlySumChecken as OnlySumChecken,
			@OnlySumCashAr as OnlySumCashAr,
			@OnlySumCashEn AS OnlySumCashEn,

			[A].[EditDate],
			[A].[FromDate],
			[A].[ToDate],
			--[A].[BuildingName],
			--[A].[BuildingArName],
			--[A].[BuildingLtnName],
			[A].[Note2],

			[A].[Rent] as [ContractValue],

			[A].[DiscountPercent],
			[A].[DiscountValue],
			[A].[Rent] - [A].[DiscountValue] as [RentAfterDiscount],	

			[A].[MonthlyValue] ,
			[A].[MonthlyValue] * 12.00 as [YearValue],
			[A].[CurrencyName],
			[A].[DiscountPercent],
			[A].[DiscountValue],
			[A].[OtherFee],
			[A].[NewStateStr], -- ÍÇáÉ ÇáÚÞÏ
			A.Purpose,
			A.Trademark,
			A.whereabouts,
			A.RentDuration,
			A.LtnRentDuration,
			A.Rentype,
			A.LtnRentype,
			A.TermsOfPayment,
			A.LtnTermsOfPayment,
			
			Case when isnull([A].NewState,0) = 0 then dbo.sc('ÌÏíÏ') else dbo.sc('ÊÌÏíÏ') end as [NewSate],
			Case when isnull([A].NewState,0) = 0 then 'ÌÏíÏ' else 'ÊÌÏíÏ' end as [ArNewSate],
			Case when isnull([A].NewState,0) = 0 then 'New' else 'Renewal' end as [LtnNewSate]
		From 
			vwMaintenanceContract A
			inner join Customer Cu on Cu.Guid = A.CustomerGuid
		where 
			([A].[Guid] = @Guid or @Guid = 0x0)
	end

	Create Table [#Tbl]
	(
		[Number] int,
		[BankName] Varchar(256),
		[Value] Float,
		[Currency] Varchar(256),
		[No]  Varchar(256),
		[EditDate] DateTime,
		[DueDate] DateTime,
		[State] Varchar(256),
		[Note3] Varchar(256),
		[Note] Varchar(256)
	)

	Insert Into [#Tbl]
	Select
		P.Number,
		[BankName],
		[LL].[Value] as [Value],
		[CurrencyName]  as [Currency],
		[No],
		P.Date as [EditDate],
		[DueDate],
		Case 		
			when  [C3].[CheckGuid] is not null then dbo.SC('ãÑÊÌÚ')
			when  [C1].[CheckGuid] is not null then dbo.SC('ãÍÕá') 
			when  [C4].[CheckGuid] is not null then dbo.SC('ãÍÕá ÌÒÆíÇ') 
			when  [C].[CheckGuid] is not null then dbo.SC('ãÑÍá') 
			when  [C2].[CheckGuid] is not null then dbo.SC('ãÙåÑ') 
		end as [State],
		[P].[Note3],
		[P].[Note]
	From
		[vwChecks] [P]
		inner join [LinkCheckContract] LL on LL.ParentGuid = P.Guid
 		left join [vwChecksCollection] [C] on [C].[CheckGuid] = [P].[Guid] and [C].[Kind] = 0
 		left join [vwChecksCollection] [C1] on [C1].[CheckGuid] = [P].[Guid] and [C1].[Kind] = 1
 		left join [vwChecksCollection] [C2] on [C2].[CheckGuid] = [P].[Guid] and [C2].[Kind] = 2
 		left join [vwChecksCollection] [C3] on [C3].[CheckGuid] = [P].[Guid] and [C3].[Kind] = 3
 		left join [ChecksPartialCollection]  [C4] on [C4].[CheckGuid] = [P].[Guid] and [C3].[Kind] = 3
		inner join (Select Distinct Guid From [Resource] where [Spid] = @@Spid) [R] on [R].[Guid] = [P].[Guid]
	where
		LL.[ContractGuid] = @Guid


	Select * from [#Tbl]
	Order By
		[DueDate], [No]

	Select
		C.Number,
		C.[RecieptVoucherNumber],
		C.SNumber,
		dbo.sc('äÞÏÇð') as [BankName],
		[Value]  as [Value],
		[Currency]  as [Currency],
		'' as [No],
		[Date],
		'' as State,
		[C].[HNote],
		[C].[DNote]
	From
		vwMaintenanceContractCachPayment [C]
		inner join (Select Distinct Guid From [Resource] where [Spid] = @@Spid) [R] on [R].[Guid] = [C].[Guid] 
	where
		[ContractGuid] = @Guid
	Order By
		[Number],[DNumber]


GO
/****** Object:  StoredProcedure [dbo].[PrcPrintReceiptParkingContract]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcPrintReceiptParkingContract]
(
	@Guid uniqueidentifier = 'D238C064-5D99-44C1-975F-8F2CEBE2D6B1',
	@Only Varchar(256) = '',
	@OnlyAr Varchar(256) = '',
	@OnlyEn Varchar(256) = ''
)
  
as
	Set NoCount On
		-- ãÌãæÚ ÇáÔíßÇÊ
	Declare @SumCheck Float, @SumCach Float, @SumPay Float
	
	Select
		@SumCheck = Sum([Value])
	From
		[LinkCheckContract] [C]
		inner join (Select Distinct Guid From [Resource] where [Spid] = @@Spid) [R] on [R].[Guid] = [C].ParentGuid
	where
		[ContractGuid] = @Guid

	Select
		@SumCach = isnull(Sum([Value] * [CurrencyVal]),0)
	From
		[vwContractParkingCachPayment] [C]
		inner join [Resource] [R] on [R].[Guid] = [C].[Guid] and [Spid] = @@Spid
	where
		[ContractGuid] = @Guid

	Set @SumPay = ISNULL(@SumCheck,0) + ISNULL(@SumCach,0)

	Select
		[C].[Number],
		[C].[ContractNo],
		[C].[CustName],
		[C].[CustArName],
		[C].[CustLtnName],
		
		[cu].[Barcode] as [Cust_Barcode], 		[cu].[Name] as [Cust_Name], 		[cu].[LtnName] as [Cust_LtnName], 		[cu].[CardKind] as [Cust_CardKind], 		[cu].[CardKind2] as [Cust_CardKind2], 		[cu].[Nationality] as [Cust_Nationality], 		[cu].[LtnNationality] as [Cust_LtnNationality], 		[cu].[Profession] as [Cust_Profession], 		[cu].[LtnProfession] as [Cust_LtnProfession], 		[cu].[PassportNO] as [Cust_PassportNO], 		[cu].[PassportExpireDate] as [Cust_PassportExpireDate], 		[cu].[Domicile] as [Cust_Domicile], 		[cu].[Security] as [Cust_Security], 		[cu].[LtnSecurity] as [Cust_LtnSecurity], 		[cu].[PhoneJob] as [Cust_PhoneJob], 		[cu].[Mobile] as [Cust_Mobile], 		[cu].[Note] as [Cust_Note], 		[cu].[Trademark] as [Cust_Trademark], 		[cu].[LtnTrademark] as [Cust_LtnTrademark], 		[cu].[MemoSecurity] as [Cust_MemoSecurity], 		[cu].[LtnMemoSecurity] as [Cust_LtnMemoSecurity], 		[cu].[Address] as [Cust_Address], 		[cu].[LtnAddress] as [Cust_LtnAddress], 		[cu].[BoxNo] as [Cust_BoxNo], 		[cu].[PersonalityNo1] as [Cust_PersonalityNo1], 		[cu].[PersonalityNo2] as [Cust_PersonalityNo2], 		[cu].[Fax] as [Cust_Fax], 		[cu].[EMail] as [Cust_EMail], 		[cu].[Adjective] as [Cust_Adjective], 		[cu].[LtnAdjective] as [Cust_LtnAdjective], 		[cu].[CkHideInSearch] as [Cust_CkHideInSearch], 		[cu].[ban] as [Cust_ban], 		[cu].[BankName] as [Cust_BankName], 		[cu].[BankAccCode] as [Cust_BankAccCode], 		[cu].[Birthday] as [Cust_Birthday], 		[cu].[DomicileEndDate] as [Cust_DomicileEndDate], 		[cu].[PersonalityEndDate] as [Cust_PersonalityEndDate], 		[cu].[CustNote1] as [Cust_CustNote1], 		[cu].[CustNote2] as [Cust_CustNote2], 		[cu].[CustNote3] as [Cust_CustNote3], 		[cu].[CustNote4] as [Cust_CustNote4], 		[cu].[CustNote5] as [Cust_CustNote5], 		[cu].[CustNote6] as [Cust_CustNote6], 		[cu].[CustNote7] as [Cust_CustNote7], 		[cu].[banContract] as [Cust_banContract], 
		C.AccountBalance,
		
		@SumCheck as [SumCheck],
		@SumCach as [SumCach],
		@SumPay as [SumPay], 
		@Only as [OnlySumCheck], 
		@OnlyAr as [OnlySumCheckAr], 
		@OnlyEn as [OnlySumCheckEn], 
		[C].[FromDate],
		[C].[ToDate],

		C.ContractDays,
		C.ContractDaysDifference,

		[C].[BuildingName],
		[C].[BuildingArName],
		[C].[BuildingLtnName],
		[C].[No],
		[C].[Note2],
		[C].[Rent] as [ContractValue],
		[C].[CurrencyName],
		[C].[InsuranceValueOld],
		[C].[InsuranceValue],
		[C].[CommissionFromCustValue],
		[C].[CommissionFromOwnerValue],
		[C].[ContractPrice],
		[C].[CertificatValue],
		[R].[Name] as [HirerName],
		[C].[CardNo],
		[C].[CarNo],
		[C].[CarType],
		[C].[CarColor],
		[C].[Emirate],
		[C].[parkingNo],
		[C].[No],
		Case when isnull(NewState,0) = 0 then dbo.sc('ÌÏíÏ') else dbo.sc('ÊÌÏíÏ') end as [NewSate],
		Case when isnull(NewState,0) = 0 then 'ÌÏíÏ' else 'ÊÌÏíÏ' end as [ArNewSate],
		Case when isnull(NewState,0) = 0 then 'New' else 'Renewal' end as [LtnNewSate],
		S.Name as [SalesMan]
	From 
		[vwParkingContract] [C]
		left join [RentInfo] [R] on [R].[Guid] = [C].[RentInfoGuid]
		left join Salesman S on S.Guid = [C].[SalesManGuid]
		inner join Customer Cu on Cu.Guid = C.CustomerGuid
	where 
		([C].[Guid] = @Guid or @Guid = 0x0)


	Create Table [#Tbl]
	(
		[Number] int,
		[BankName] Varchar(256),
		[Value] Float,
		[Currency] Varchar(256),
		[No]  Varchar(256),
		[EditDate] DateTime,
		[DueDate] DateTime,
		[State] Varchar(256),
		[Note] Varchar(256)
	)

	Insert Into [#Tbl]
	Select
		P.Number,
		[BankName],
		Cast([LL].[Value] as Varchar(20)) as [Value],
		[CurrencyName]  as [Currency],
		[No],
		P.Date as [EditDate],
		[DueDate],
		Case 		
			when  [C3].[CheckGuid] is not null then dbo.SC('ãÑÊÌÚ')
			when  [C1].[CheckGuid] is not null then dbo.SC('ãÍÕá') 
			when  [C4].[CheckGuid] is not null then dbo.SC('ãÍÕá ÌÒÆíÇ') 
			when  [C].[CheckGuid] is not null then dbo.SC('ãÑÍá') 
			when  [C2].[CheckGuid] is not null then dbo.SC('ãÙåÑ') 
		end as [State],
		[P].[Note3]
	From
		[vwChecks] [P]
		inner join [LinkCheckContract] LL on LL.ParentGuid = P.Guid
 		left join [vwChecksCollection] [C] on [C].[CheckGuid] = [P].[Guid] and [C].[Kind] = 0
 		left join [vwChecksCollection] [C1] on [C1].[CheckGuid] = [P].[Guid] and [C1].[Kind] = 1
 		left join [vwChecksCollection] [C2] on [C2].[CheckGuid] = [P].[Guid] and [C2].[Kind] = 2
 		left join [vwChecksCollection] [C3] on [C3].[CheckGuid] = [P].[Guid] and [C3].[Kind] = 3
 		left join [ChecksPartialCollection]  [C4] on [C4].[CheckGuid] = [P].[Guid] and [C3].[Kind] = 3
		inner join (Select Distinct Guid From [Resource] where [Spid] = @@Spid) [R] on [R].[Guid] = [P].[Guid]
	where
		LL.[ContractGuid] = @Guid

	Select * from [#Tbl]
	Order By
		[DueDate], [No]

	Select
		dbo.sc('äÞÏÇð') as [BankName],
		Cast([Value] as Varchar(20)) as [Value],
		[Currency]  as [Currency],
		'' as [No],
		[Date],
		'' as State,
		[C].[HNote],
		[C].[DNote]
	From
		[vwContractParkingCachPayment] [C]
		inner join [Resource] [R] on [R].[Guid] = [C].[Guid] and [Spid] = @@Spid
	where
		[ContractGuid] = @Guid


GO
/****** Object:  StoredProcedure [dbo].[PrcPrintReceiptServicesContract]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcPrintReceiptServicesContract]
(
	@Guid uniqueidentifier = '44BAA61B-A0A7-43B5-B07B-299242BD419B',
	@Only Varchar(256) = '',
	@OnlyAr Varchar(256) = '',
	@OnlyEn Varchar(256) = '',	
	@OnlySumCheckAr Varchar(256) = '',	
	@OnlySumChecken Varchar(256) = '',	
	@OnlySumCashAr Varchar(256) = '',	
    @OnlySumCashEn Varchar(256) = '',
    @PrintCheckEnryOnly bit = 0
	
)
  
as
	Set NoCount On
	
	-- ãÌãæÚ ÇáÔíßÇÊ
	Declare @SumCheck Float, @SumCach Float, @SumPay Float
	
	Select
		@SumCheck = Sum([Value])
	From
		[LinkCheckContract] [C]
		inner join (Select Distinct Guid From [Resource] where [Spid] = @@Spid) [R] on [R].[Guid] = [C].ParentGuid
	where
		[ContractGuid] = @Guid

	Select
		@SumCach = isnull(Sum([Value] * [CurrencyVal]),0)
	From
		vwServicesContractCachPayment [C]
		inner join (Select Distinct Guid From [Resource] where [Spid] = @@Spid) [R] on [R].[Guid] = [C].[Guid]
	where
		[ContractGuid] = @Guid

	Set @SumPay = ISNULL(@SumCheck,0) + ISNULL(@SumCach,0)

	if @PrintCheckEnryOnly = 0
	begin
		
		/*
		Select 
			@SumPay = @SumPay + IsNull(OtherFee,0) + IsNull(InsuranceValue,0) + IsNull(CertificatValue,0)
		From
			[vwLeaseApartment]
		where 
			([Guid] = @Guid or @Guid = 0x0)		
		*/
		
		Select
			[A].[Number],
			[A].[ContractNo],
			
			[A].[CustName],
			[A].[CustArName],
			[A].[CustLtnName],
			[A].[CustomerPhonejob],
			[A].[CustomerMobile],
			[A].[CustomerNationality],
			
			[cu].[Barcode] as [Cust_Barcode], 			[cu].[Name] as [Cust_Name], 			[cu].[LtnName] as [Cust_LtnName], 			[cu].[CardKind] as [Cust_CardKind], 			[cu].[CardKind2] as [Cust_CardKind2], 			[cu].[Nationality] as [Cust_Nationality], 			[cu].[LtnNationality] as [Cust_LtnNationality], 			[cu].[Profession] as [Cust_Profession], 			[cu].[LtnProfession] as [Cust_LtnProfession], 			[cu].[PassportNO] as [Cust_PassportNO], 			[cu].[PassportExpireDate] as [Cust_PassportExpireDate], 			[cu].[Domicile] as [Cust_Domicile], 			[cu].[Security] as [Cust_Security], 			[cu].[LtnSecurity] as [Cust_LtnSecurity], 			[cu].[PhoneJob] as [Cust_PhoneJob], 			[cu].[Mobile] as [Cust_Mobile], 			[cu].[Note] as [Cust_Note], 			[cu].[Trademark] as [Cust_Trademark], 			[cu].[LtnTrademark] as [Cust_LtnTrademark], 			[cu].[MemoSecurity] as [Cust_MemoSecurity], 			[cu].[LtnMemoSecurity] as [Cust_LtnMemoSecurity], 			[cu].[Address] as [Cust_Address], 			[cu].[LtnAddress] as [Cust_LtnAddress], 			[cu].[BoxNo] as [Cust_BoxNo], 			[cu].[PersonalityNo1] as [Cust_PersonalityNo1], 			[cu].[PersonalityNo2] as [Cust_PersonalityNo2], 			[cu].[Fax] as [Cust_Fax], 			[cu].[EMail] as [Cust_EMail], 			[cu].[Adjective] as [Cust_Adjective], 			[cu].[LtnAdjective] as [Cust_LtnAdjective], 			[cu].[CkHideInSearch] as [Cust_CkHideInSearch], 			[cu].[ban] as [Cust_ban], 			[cu].[BankName] as [Cust_BankName], 			[cu].[BankAccCode] as [Cust_BankAccCode], 			[cu].[Birthday] as [Cust_Birthday], 			[cu].[DomicileEndDate] as [Cust_DomicileEndDate], 			[cu].[PersonalityEndDate] as [Cust_PersonalityEndDate], 			[cu].[CustNote1] as [Cust_CustNote1], 			[cu].[CustNote2] as [Cust_CustNote2], 			[cu].[CustNote3] as [Cust_CustNote3], 			[cu].[CustNote4] as [Cust_CustNote4], 			[cu].[CustNote5] as [Cust_CustNote5], 			[cu].[CustNote6] as [Cust_CustNote6], 			[cu].[CustNote7] as [Cust_CustNote7], 			[cu].[banContract] as [Cust_banContract], 
			
			@SumCheck as [SumCheck],
			@SumCach as [SumCach],
			@SumPay as [SumPay], 
			@Only as [OnlySumCheck], 
			@OnlyAr as [OnlySumCheckAr], 
			@OnlyEn as [OnlySumCheckEn], 

			@OnlySumCheckAr as OnlySumCheckAr,
			@OnlySumChecken as OnlySumChecken,
			@OnlySumCashAr as OnlySumCashAr,
			@OnlySumCashEn AS OnlySumCashEn,

			[A].[EditDate],
			[A].[FromDate],
			[A].[ToDate],
			[A].[BuildingName],
			[A].[BuildingArName],
			[A].[BuildingLtnName],
			[A].[Note2],

			[A].[Rent] as [ContractValue],

			[A].[DiscountPercent],
			[A].[DiscountValue],
			[A].[Rent] - [A].[DiscountValue] as [RentAfterDiscount],	

			[A].[MonthlyValue] ,
			[A].[MonthlyValue] * 12.00 as [YearValue],
			[A].[CurrencyName],
			[A].[DiscountPercent],
			[A].[DiscountValue],
			[A].[OtherFee],
			[A].[NewStateStr], -- ÍÇáÉ ÇáÚÞÏ
			A.Purpose,
			A.Trademark,
			A.whereabouts,
			A.RentDuration,
			A.LtnRentDuration,
			A.Rentype,
			A.LtnRentype,
			A.TermsOfPayment,
			A.LtnTermsOfPayment,
			
			Case when isnull([A].NewState,0) = 0 then dbo.sc('ÌÏíÏ') else dbo.sc('ÊÌÏíÏ') end as [NewSate],
			Case when isnull([A].NewState,0) = 0 then 'ÌÏíÏ' else 'ÊÌÏíÏ' end as [ArNewSate],
			Case when isnull([A].NewState,0) = 0 then 'New' else 'Renewal' end as [LtnNewSate]
		From 
			vwServicesContract A
			inner join Customer Cu on Cu.Guid = A.CustomerGuid
		where 
			([A].[Guid] = @Guid or @Guid = 0x0)
	end

	Create Table [#Tbl]
	(
		[Number] int,
		[BankName] Varchar(256),
		[Value] Float,
		[Currency] Varchar(256),
		[No]  Varchar(256),
		[EditDate] DateTime,
		[DueDate] DateTime,
		[State] Varchar(256),
		[Note3] Varchar(256),
		[Note] Varchar(256)
	)

	Insert Into [#Tbl]
	Select
		P.Number,
		[BankName],
		[LL].[Value] as [Value],
		[CurrencyName]  as [Currency],
		[No],
		P.Date as [EditDate],
		[DueDate],
		Case 		
			when  [C3].[CheckGuid] is not null then dbo.SC('ãÑÊÌÚ')
			when  [C1].[CheckGuid] is not null then dbo.SC('ãÍÕá') 
			when  [C4].[CheckGuid] is not null then dbo.SC('ãÍÕá ÌÒÆíÇ') 
			when  [C].[CheckGuid] is not null then dbo.SC('ãÑÍá') 
			when  [C2].[CheckGuid] is not null then dbo.SC('ãÙåÑ') 
		end as [State],
		[P].[Note3],
		[P].[Note]
	From
		[vwChecks] [P]
		inner join [LinkCheckContract] LL on LL.ParentGuid = P.Guid
 		left join [vwChecksCollection] [C] on [C].[CheckGuid] = [P].[Guid] and [C].[Kind] = 0
 		left join [vwChecksCollection] [C1] on [C1].[CheckGuid] = [P].[Guid] and [C1].[Kind] = 1
 		left join [vwChecksCollection] [C2] on [C2].[CheckGuid] = [P].[Guid] and [C2].[Kind] = 2
 		left join [vwChecksCollection] [C3] on [C3].[CheckGuid] = [P].[Guid] and [C3].[Kind] = 3
 		left join [ChecksPartialCollection]  [C4] on [C4].[CheckGuid] = [P].[Guid] and [C3].[Kind] = 3
		inner join (Select Distinct Guid From [Resource] where [Spid] = @@Spid) [R] on [R].[Guid] = [P].[Guid]
	where
		LL.[ContractGuid] = @Guid


	Select * from [#Tbl]
	Order By
		[DueDate], [No]

	Select
		C.Number,
		C.[RecieptVoucherNumber],
		C.SNumber,
		dbo.sc('äÞÏÇð') as [BankName],
		[Value]  as [Value],
		[Currency]  as [Currency],
		'' as [No],
		[Date],
		'' as State,
		[C].[HNote],
		[C].[DNote]
	From
		vwServicesContractCachPayment [C]
		inner join (Select Distinct Guid From [Resource] where [Spid] = @@Spid) [R] on [R].[Guid] = [C].[Guid] 
	where
		[ContractGuid] = @Guid
	Order By
		[Number],[DNumber]


GO
/****** Object:  StoredProcedure [dbo].[PrcPrintRestrained_Receipt]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcPrintRestrained_Receipt]
(
	@Guid uniqueidentifier = 'F1CF2A33-E203-4368-8C79-AC72E8A90159',
	@Only Varchar(256) = '',
	@LtnOnly Varchar(256) = ''
)
  
as
	Select 
		[cu].[ArName] [CustArName],
		[cu].[LtnName] [CustLtnName],
    	Case when [RealtyType] = 0 then dbo.SC('ÔÞÉ')
    		 when [RealtyType] = 1 then dbo.SC('ãÍá')
    		 when [RealtyType] = 2 then dbo.SC('ãæÞÝ')
    		 when [RealtyType] = 3 then dbo.SC('ÝíáÇ')
    		 when [RealtyType] = 4 then dbo.SC('ÃÑÖ')
		end	[RealtyType],
		[B].[ArName] as [BuildingArName],
		[B].[LtnName] as [BuildingLtnName],
    	Case when [RealtyType] = 0 then [A].[No]
    		 when [RealtyType] = 1 then [S].[No]
    		 when [RealtyType] = 2 then [P].[No]
    		 when [RealtyType] = 3 then [V].[VillaNo]
    		 when [RealtyType] = 4 then [E].[Name]
		end	[RealtyNo],
    	Case when [RealtyType] = 0 then [A].[FloorNo]
    		 when [RealtyType] = 1 then ''
    		 when [RealtyType] = 2 then ''
    		 when [RealtyType] = 3 then ''
    		 when [RealtyType] = 4 then ''
		end	[FloorNo],
		R.Number as RestrainedCardNumber,
		[R].[EditDate] as [RestrainedEditDate],
		[R].[Date] as [RestrainedDate],
		[R].[EndDate] as [RestrainedEndDate],
		[R].[Note],
		[R].[PayValue],
		[My].[Code] as [CurrencyCode],
		[My].[Name] as [CurrencyName],
		@Only  as [Only],
		@LtnOnly as [LtnOnly]
	From 
		[RealtyRestrained] [R]
		inner join [vwCustomer] [Cu] On [Cu].[Guid] = [R].[CustomerGuid]	
		left join [vwBuilding] [B] on [B].[Guid] = [R].[BuildingGuid]
		left join [Apartment] [A] on [A].[Guid] = [R].[FlatGuid] 
		left join [Shop] [S] on [S].[Guid] = [R].[Shop]
		left join [Parking] [P] on [P].[Guid] = [R].[ParkingNo]
		left join [Villa] [V] on [V].[Guid] = [R].[VillaGuid]
		left join [vwEarth] [E] on [E].[Guid] = [R].[LandGuid]
		left join [vwCurrency] [My] on [My].[Guid] = [R].[CurrencyGuid] 
	where
		[R].[Guid] = @Guid

GO
/****** Object:  StoredProcedure [dbo].[PrcProjectCost]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[PrcProjectCost]
(
	@BuildingGuid Uniqueidentifier = '89D15C92-08F7-40F8-95E3-EBA38F4A1E7D'
)
  
as
	Declare @BuilAc Uniqueidentifier 
	Select @BuilAc = [AccountGuid] From [Building]
	where [Guid] = @BuildingGuid

	Print @BuilAc

	Declare @Tbl Table 
	(
		[AccountGuid] [Uniqueidentifier]
		,[Value] [Float]
		,[Note] [varchar] (256) COLLATE SQL_Latin1_General_CP1_CI_AS
		,[Date] DateTime
		,[Guid] [Uniqueidentifier]
		,[Account] [varchar] (256) COLLATE SQL_Latin1_General_CP1_CI_AS
		,[Kind] Int
	)

	Insert into @Tbl	
	Select 
		[P].[AccountGuid]
		,[P].[Value]
		,[P].[Note]
		,[P].[Date]
		,[P].[Guid]
		,[Ac].[Code]+'-'+[Ac].[Name] as [Account]  
		,0
	from 
		[ProjectCostDetail] [P]
		inner join [vwAccount] [ac] on [Ac].[Guid] = [AccountGuid]
	where 
		[P].[ParentGuid] = @BuildingGuid
	Order By 
		[P].[Number]

	Insert into @Tbl	
	Select 
		[D].[AcGuid]
		,Case when [D].[Debit] <> 0 then [D].[Debit] else - [D].[Credit] end
		,[D].[Note]
		,[E].[Date]
		,[E].[Guid]
		,[Ac].[Code]+'-'+[Ac].[Name] as [Account]  
		,1
	from 
		[HEntry] [E]
		inner join [DEntry] [D] On [E].[Guid] = [D].[ParentGuid]
		inner join [vwAccount] [ac] on [Ac].[Guid] = [D].[AcGuid]
		left join [ProjectCostDetail] [P] on [P].[Guid] = [E].[Guid]
	where 
		[D].[AcGuid] = @BuilAc
		and [P].[Guid] is Null

	Select * From @Tbl 
	Order By 
		[Date]


GO
/****** Object:  StoredProcedure [dbo].[PrcQOfferPrice]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcQOfferPrice]
(
	@CustomerName varchar(255) = '',
	@OfferKind int = 5,
	@BuildingGuid [uniqueidentifier] = 0x0,
	@RealtyGuid [uniqueidentifier] = 0x0,
	@Price1 Float = 0,
	@Price2 Float = 0,
	@ActiveDate Bit = 0,
	@Date1 Datetime = 0,
	@Date2 Datetime = 0
)
  
as
	Select
		*
	From
		[vwOfferPrice]
	
	where
		([CustomerName] = @CustomerName or @CustomerName = '')
		and (OfferKind = @OfferKind or @OfferKind = 5)
		and (BuildingGuid = @BuildingGuid or @BuildingGuid = 0x0)
		and ([RealtyGuid] = @RealtyGuid or @RealtyGuid = 0x0)
		and (
				([PriceAfterDiscount] between @Price1 and @Price2 and @Price2 <> 0)
			 or ([PriceAfterDiscount] = @Price1 and @Price2 = 0)
			)
		and ([Date] between @Date1 and @Date2 or @ActiveDate = 0)	
	order By
		[DATE]
		

GO
/****** Object:  StoredProcedure [dbo].[PrcReadConText]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create Procedure [dbo].[PrcReadConText]
as
	
	select 
		cast(context_info as varchar(100)) as Value
	from 
		master.dbo.sysprocesses 
	where 
		cast(context_info as varchar(100)) <> ''
		and spid = @@SPID

GO
/****** Object:  StoredProcedure [dbo].[PrcReadProgress]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create Procedure [dbo].[PrcReadProgress]
(
	@Spid int = 0
)
as
	select 
		*
	from 
		[Progress_Tbl]
	where 
		spid = @Spid
	
	/*	
	SELECT 
	r.session_id,
	r.command,
	CONVERT(NUMERIC(6,2), r.percent_complete) AS [Percent Complete],
	CONVERT(VARCHAR(20),DATEADD(ms,r.estimated_completion_time,GetDate()),20) AS [ETA Completion Time],
	CONVERT(NUMERIC(10,2),r.total_elapsed_time/1000.0/60.0) AS [Elapsed Min],
	CONVERT(NUMERIC(10,2),r.estimated_completion_time/1000.0/60.0) AS [ETA Min],
	CONVERT(NUMERIC(10,2),r.estimated_completion_time/1000.0/60.0/60.0) AS [ETA Hours],
	CONVERT(VARCHAR(1000),
	(
		SELECT SUBSTRING(text,r.statement_start_offset/2,
			CASE WHEN r.statement_end_offset = -1 THEN 1000 ELSE (r.statement_end_offset-r.statement_start_offset)/2 END)
		FROM 
			sys.dm_exec_sql_text(sql_handle))
	) as Sqltext
	FROM 
	sys.dm_exec_requests r 
	--WHERE command IN ('RESTORE DATABASE','BACKUP DATABASE')
	where
		session_id = @@spid
	order by session_id desc
	*/
	--use Aq
			

GO
/****** Object:  StoredProcedure [dbo].[PrcRealtyRestrained]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcRealtyRestrained]
(
	@RealtyKind int = 5,
	@CustomerGuid uniqueidentifier = 0x0,
	@RealtyNo Varchar(256) = '',
	@CbRestrained Int = 0,
	@CkDate Bit = 1,
	@Date1 DateTime = '1/1/2007',
	@Date2 DateTime = '1/1/2020',
	@Days int = 0
)
  
as
	Select 
		Case when [RealtyType] = 0 or [RealtyType] = 1 or [RealtyType] = 2 then [B].[Name] 
			 when [RealtyType] = 3 then dbo.SC('ÝíáÇ')
			 when [RealtyType] = 4 then dbo.SC('ÃÑÖ')
		end as [BuildingName],
		Case 
			when [RealtyType] = 0 then dbo.sc('ÔÞÉ')
			when [RealtyType] = 1 then dbo.sc('ãÍá')
			when [RealtyType] = 2 then dbo.sc('ãæÞÝ')	
			when [RealtyType] = 3 then dbo.SC('ÝíáÇ')
			when [RealtyType] = 4 then dbo.SC('ÃÑÖ')
		end as [StREaltyType],
		Case 
			when [RealtyType] = 0 then (Select [No] From [Apartment] where [Guid] = [R].[FlatGuid])
			when [RealtyType] = 1 then (Select [No] From [Shop] where [Guid] = [R].[Shop])
			when [RealtyType] = 2 then (Select [No] From [Parking] where [Guid] = [R].[ParkingNo])
			when [RealtyType] = 3 then (Select [VillaNo] From [Villa] where [Guid] = [R].[VillaGuid])
			when [RealtyType] = 4 then (Select [EarthNo] From [Earth] where [Guid] = [R].[LandGuid])
		end as [Realty],	
		[Cu].[Name] as [CustomerName], 
		[Cu].[Nationality], 
		[Cu].[PhoneJob], 
		[Cu].[Mobile], 
		[Date],
		Case when [EndDateSpecific] = 1 then [EndDate] end As [EndDate],
		[EndDateSpecific],
		[RestrainedCanceld],
		[R].[Note],
	    [R].[Pay],
    	[R].[PayValue],
	    Case 
			when [R].[PayType] = 0 then dbo.sc('äÞÏÇð')
			when [R].[PayType] = 1 then dbo.sc('Ôíß')
		end as [PayType],

		Case when [RestrainedCanceld] = 0 and [EndDateSpecific] = 1	then  DateDiff(Day, GetDate(), [EndDate]) end as [Days],
		[R].[Guid] 
	From 
		[RealtyRestrained] [R]
		left join [vwBuilding] [B] On [B].[Guid] = [R].[BuildingGuid]
		inner join [vwCustomer] [Cu] on [Cu].[Guid] = [R].[CustomerGuid]
		left join [Resource] [S] On [S].[Guid] = [B].[Guid] and [S].[spid] = @@Spid and [Kind] = 4002
  	where
  		([R].[CustomerGuid] = @CustomerGuid or @CustomerGuid = 0x0)
  		and ([R].[RealtyType] =  @RealtyKind or @RealtyKind = 5)
  		and (
  				Case 
  				when [RealtyType] = 0 then (Select [No] From [Apartment] where [Guid] = [R].[FlatGuid])
  				when [RealtyType] = 1 then (Select [No] From [Shop] where [Guid] = [R].[Shop])
  				when [RealtyType] = 2 then (Select [No] From [Parking] where [Guid] = [R].[ParkingNo])
  				when [RealtyType] = 3 then (Select [VillaNo] From [Villa] where [Guid] = [R].[VillaGuid])
  				when [RealtyType] = 4 then (Select [EarthNo] From [Earth] where [Guid] = [R].[LandGuid])
  
  				end = @RealtyNo
  				or @RealtyNo = ''
  			)
  		and ( 
  				([RestrainedCanceld] = 0 and @CbRestrained = 1)
  				or ([RestrainedCanceld] = 1 and @CbRestrained = 2)
  				or @CbRestrained = 0
  			)
 		and ([R].[Date] Between @Date1 And @Date2 or @CkDate = 0)
 		and ([S].[Guid] is Not Null or @RealtyKind = 3 or @RealtyKind = 4 or @RealtyKind = 5)	
		and (
				[RestrainedCanceld] = 0 
				and [EndDateSpecific] = 1
				and ( DateDiff(Day, GetDate(), [EndDate]) < @Days)
				or @Days = 0
			)
		

GO
/****** Object:  StoredProcedure [dbo].[PrcRecodeAccount]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcRecodeAccount]
(
	@AcGuid uniqueidentifier = 'A3C61FE5-D1D6-4B8F-A5AC-C83D9A461318'
)
  
as
	Set NoCount on
	Declare @AcCount int
	Select 
		@AcCount = Count(*)
	From 
		[Account]
	where
		[ParentGuid] = @AcGuid

	Set @AcCount = Len(Cast(@AcCount as Varchar(25)))

	Declare @Code Varchar(256)
	Select 
		@Code = Code
	From 
		[Account]
	where
		[Guid] = @AcGuid

	Create Table #R
	(
		[Id] int identity(1,1),
		[Guid] uniqueidentifier 
	)
	
	insert into #R
		([Guid])
	Select 
		[Guid]
	From
		[Account]
	where
		[ParentGuid] = @AcGuid
	Order By
		[Number]

-- 
-- 	Select 
--  		[R].*,
--  		@Code+ dbo.FnFormatNumber([id], @AcCount) as Newcode,
--  		[Ac].*
-- 	from 
-- 		[Account] [Ac] 
-- 		inner join #R R on @Code+ dbo.FnFormatNumber([R].[id], @AcCount) = [Ac].[Code] and [R].[Guid] <> [Ac].[Guid]
-- 	where
-- 		[Ac].[ParentGuid] <> @AcGuid
	
	-- ÝÍÕ ÇáÊßÑÇÑ Ýí ÇáÑãÒ
	Declare @C Int
	Select 
		@C = Count(*)
-- 		[R].*,
-- 		@Code+ dbo.FnFormatNumber([id], @AcCount) as Newcode,
-- 		[Ac].*
	from 
		[Account] [Ac] 
		inner join #R R on @Code+ dbo.FnFormatNumber([R].[id], @AcCount) = [Ac].[Code] and [R].[Guid] <> [Ac].[Guid]
	where
		[Ac].[ParentGuid] <> @AcGuid

	if isnull(@C,0) > 0
	begin
		Declare @AcR Varchar(256)
		Declare @Msgerror Varchar(256)
	
		Select Top 1 
			@AcR = [Ac].[Code]+'-'+[Ac].[Name]
		from 
			[Account] [Ac] 
			inner join #R R on @Code+ dbo.FnFormatNumber([R].[id], @AcCount) = [Ac].[Code] and [R].[Guid] <> [Ac].[Guid]
		where
			[Ac].[ParentGuid] <> @AcGuid

		Set @Msgerror = 'áÇ íãßä ÅÊãÇã ÇáÚãáíÉ áÇäåÇ ÓÊÄÏí Çáì ÊßÑÇÑ ÑãæÒ ÇáÍÓÇÈ  ' + @AcR
		RAISERROR (@Msgerror, 16, 1)
	end

	update 
		Account
	Set 
		[Code] = @Code+ dbo.FnFormatNumber([id], @AcCount)
	From
		Account [Ac]
		inner join [#R] On [#R].[Guid] = [Ac].[Guid]


	

GO
/****** Object:  StoredProcedure [dbo].[PrcReCodeBuildingCost]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcReCodeBuildingCost]
(
	@BuildingGuid uniqueidentifier = '7E3BF848-F210-4A0C-91B8-119C9C5EBB15'
)
  
as

	Declare @CoGuid uniqueidentifier 
	
	Select
		@CoGuid = CostGuid
	From 
		Building B 
	where
		b.Guid = @BuildingGuid

	if ISNULL(@CoGuid, 0x0) <> 0x0
	exec [PrcRecodeCost] @CoGuid
	


GO
/****** Object:  StoredProcedure [dbo].[PrcRecodeCost]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcRecodeCost]
(
	@CoGuid uniqueidentifier = '4125827A-BA45-49E7-81C0-EC3E342977A9'
)
  
as
	Set NoCount on
	Declare @CoCount int
	Select 
		@CoCount = Count(*)
	From 
		[Cost]
	where
		[ParentGuid] = @CoGuid

	Set @CoCount = Len(Cast(@CoCount as Varchar(25)))

	Declare @Code Varchar(256)
	Select 
		@Code = Code
	From 
		[Cost]
	where
		[Guid] = @CoGuid

	Create Table #R
	(
		[Id] int identity(1,1),
		[Guid] uniqueidentifier 
	)
	
	insert into #R
		([Guid])
	Select 
		[Guid]
	From
		[Cost]
	where
		[ParentGuid] = @CoGuid
	Order By
		[Number]
 
	-- ÝÍÕ ÇáÊßÑÇÑ Ýí ÇáÑãÒ
	Declare @C Int
	Select 
		@C = Count(*)
	from 
		[Cost] [Ac] 
		inner join #R R on @Code+ dbo.FnFormatNumber([R].[id], @CoCount) = [Ac].[Code] and [R].[Guid] <> [Ac].[Guid]
	where
		[Ac].[ParentGuid] <> @CoGuid

	if isnull(@C,0) > 0
	begin
		Declare @AcR Varchar(256)
		Declare @Msgerror Varchar(256)
	
		Select Top 1 
			@AcR = [Ac].[Code]+'-'+[Ac].[Name]
		from 
			[Cost] [Ac] 
			inner join #R R on @Code+ dbo.FnFormatNumber([R].[id], @CoCount) = [Ac].[Code] and [R].[Guid] <> [Ac].[Guid]
		where
			[Ac].[ParentGuid] <> @CoGuid

		--print @AcR
		
		Set @Msgerror = 'áÇ íãßä ÅÊãÇã ÇáÚãáíÉ áÇäåÇ ÓÊÄÏí Çáì ÊßÑÇÑ ÑãæÒ ÇáÍÓÇÈ  ' + @AcR
		RAISERROR (@Msgerror, 16, 1)
	end

	
	Alter Table [Cost] disable trigger all
	
	update 
		[Cost]
	Set 
		[Code] = @Code+ dbo.FnFormatNumber([id], @CoCount)
	From
		[Cost] [Ac]
		inner join [#R] On [#R].[Guid] = [Ac].[Guid]

	Alter Table [Cost] enable trigger all
	

GO
/****** Object:  StoredProcedure [dbo].[PrcRecodeGroups]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcRecodeGroups]
(
	@GroupGuid uniqueidentifier = 'A3C61FE5-D1D6-4B8F-A5AC-C83D9A461318'
)
  
as
	Set NoCount on
	Declare @GrCount int
	Select 
		@GrCount = Count(*)
	From 
		[MatGroup]
	where
		[ParentGuid] = @GroupGuid

	Set @GrCount = Len(Cast(@GrCount as Varchar(25)))

	Declare @Code Varchar(256)
	Select 
		@Code = Code
	From 
		[MatGroup]
	where
		[Guid] = @GroupGuid

	Create Table #R
	(
		[Id] int identity(1,1),
		[Guid] uniqueidentifier 
	)
	
	insert into #R
		([Guid])
	Select 
		[Guid]
	From
		[MatGroup]
	where
		[ParentGuid] = @GroupGuid
	Order By
		[Number]

-- 
-- 	Select 
--  		[R].*,
--  		@Code+ dbo.FnFormatNumber([id], @GrCount) as Newcode,
--  		[Ac].*
-- 	from 
-- 		[MatGroup] [Ac] 
-- 		inner join #R R on @Code+ dbo.FnFormatNumber([R].[id], @GrCount) = [Ac].[Code] and [R].[Guid] <> [Ac].[Guid]
-- 	where
-- 		[Ac].[ParentGuid] <> @GroupGuid
	
	-- ÝÍÕ ÇáÊßÑÇÑ Ýí ÇáÑãÒ
	Declare @C Int
	Select 
		@C = Count(*)
-- 		[R].*,
-- 		@Code+ dbo.FnFormatNumber([id], @GrCount) as Newcode,
-- 		[Ac].*
	from 
		[MatGroup] [Ac] 
		inner join #R R on @Code+ dbo.FnFormatNumber([R].[id], @GrCount) = [Ac].[Code] and [R].[Guid] <> [Ac].[Guid]
	where
		[Ac].[ParentGuid] <> @GroupGuid

	if isnull(@C,0) > 0
	begin
		Declare @AcR Varchar(256)
		Declare @Msgerror Varchar(256)
	
		Select Top 1 
			@AcR = [Ac].[Code]+'-'+[Ac].[Name]
		from 
			[MatGroup] [Ac] 
			inner join #R R on @Code+ dbo.FnFormatNumber([R].[id], @GrCount) = [Ac].[Code] and [R].[Guid] <> [Ac].[Guid]
		where
			[Ac].[ParentGuid] <> @GroupGuid

		Set @Msgerror = 'áÇ íãßä ÅÊãÇã ÇáÚãáíÉ áÇäåÇ ÓÊÄÏí Çáì ÊßÑÇÑ ÑãæÒ ÇáãÌãæÚÉ  ' + @AcR
		RAISERROR (@Msgerror, 16, 1)
	end

	update 
		[MatGroup]
	Set 
		[Code] = @Code+ dbo.FnFormatNumber([id], @GrCount)
	From
		[MatGroup] [Ac]
		inner join [#R] On [#R].[Guid] = [Ac].[Guid]


	exec PrcRecodeMatOfGroup @GroupGuid

GO
/****** Object:  StoredProcedure [dbo].[PrcRecodeIncAccount]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcRecodeIncAccount]
(
	@CoGuid uniqueidentifier = '4125827A-BA45-49E7-81C0-EC3E342977A9'
)
  
as
	Set NoCount on
	Declare @CoCount int
	Select 
		@CoCount = Count(*)
	From 
		[IncAccount]
	where
		[ParentGuid] = @CoGuid

	Set @CoCount = Len(Cast(@CoCount as Varchar(25)))

	Declare @Code Varchar(256)
	Select 
		@Code = Code
	From 
		[IncAccount]
	where
		[Guid] = @CoGuid

	Create Table #R
	(
		[Id] int identity(1,1),
		[Guid] uniqueidentifier 
	)
	
	insert into #R
		([Guid])
	Select 
		[Guid]
	From
		[IncAccount]
	where
		[ParentGuid] = @CoGuid
	Order By
		[Number]
 
	-- ÝÍÕ ÇáÊßÑÇÑ Ýí ÇáÑãÒ
	Declare @C Int
	Select 
		@C = Count(*)
	from 
		[IncAccount] [Ac] 
		inner join #R R on @Code+ dbo.FnFormatNumber([R].[id], @CoCount) = [Ac].[Code] and [R].[Guid] <> [Ac].[Guid]
	where
		[Ac].[ParentGuid] <> @CoGuid

	if isnull(@C,0) > 0
	begin
		Declare @AcR Varchar(256)
		Declare @Msgerror Varchar(256)
	
		Select Top 1 
			@AcR = [Ac].[Code]+'-'+[Ac].[Name]
		from 
			[IncAccount] [Ac] 
			inner join #R R on @Code+ dbo.FnFormatNumber([R].[id], @CoCount) = [Ac].[Code] and [R].[Guid] <> [Ac].[Guid]
		where
			[Ac].[ParentGuid] <> @CoGuid

		--print @AcR
		
		Set @Msgerror = 'áÇ íãßä ÅÊãÇã ÇáÚãáíÉ áÇäåÇ ÓÊÄÏí Çáì ÊßÑÇÑ ÑãæÒ ÇáÍÓÇÈ  ' + @AcR
		RAISERROR (@Msgerror, 16, 1)
	end

	
	Alter Table [IncAccount] disable trigger all
	
	update 
		[IncAccount]
	Set 
		[Code] = @Code+ dbo.FnFormatNumber([id], @CoCount)
	From
		[IncAccount] [Ac]
		inner join [#R] On [#R].[Guid] = [Ac].[Guid]

	Alter Table [IncAccount] enable trigger all
	

GO
/****** Object:  StoredProcedure [dbo].[PrcRecodeMatOfGroup]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcRecodeMatOfGroup]
(
	@GroupGuid uniqueidentifier = 'A3C61FE5-D1D6-4B8F-A5AC-C83D9A461318'
)
  
as
	Set NoCount on
	Declare @GrCount int
	Select 
		@GrCount = Count(*)
	From 
		[Mat]
	where
		[GroupGuid] = @GroupGuid

	Set @GrCount = Len(Cast(@GrCount as Varchar(25)))

	Declare @Code Varchar(256)
	Select 
		@Code = Code
	From 
		[MatGroup]
	where
		[Guid] = @GroupGuid

	Create Table #R
	(
		[Id] int identity(1,1),
		[Guid] uniqueidentifier 
	)
	
	insert into #R
		([Guid])
	Select 
		[Guid]
	From
		[Mat]
	where
		[GroupGuid] = @GroupGuid
	Order By
		[Number]

-- 
-- 	Select 
--  		[R].*,
--  		@Code+ dbo.FnFormatNumber([id], @GrCount) as Newcode,
--  		[Ac].*
-- 	from 
-- 		[MatGroup] [Ac] 
-- 		inner join #R R on @Code+ dbo.FnFormatNumber([R].[id], @GrCount) = [Ac].[Code] and [R].[Guid] <> [Ac].[Guid]
-- 	where
-- 		[Ac].[ParentGuid] <> @GroupGuid
	
	-- ÝÍÕ ÇáÊßÑÇÑ Ýí ÇáÑãÒ
	Declare @C Int
	Select 
		@C = Count(*)
-- 		[R].*,
-- 		@Code+ dbo.FnFormatNumber([id], @GrCount) as Newcode,
-- 		[Ac].*
	from 
		[Mat] [Ac] 
		inner join #R R on @Code+ dbo.FnFormatNumber([R].[id], @GrCount) = [Ac].[Code] and [R].[Guid] <> [Ac].[Guid]
	where
		[Ac].[GroupGuid] <> @GroupGuid

	if isnull(@C,0) > 0
	begin
		Declare @AcR Varchar(256)
		Declare @Msgerror Varchar(256)
	
		Select Top 1 
			@AcR = [Ac].[Code]+'-'+[Ac].[Name]
		from 
			[Mat] [Ac] 
			inner join #R R on @Code+ dbo.FnFormatNumber([R].[id], @GrCount) = [Ac].[Code] and [R].[Guid] <> [Ac].[Guid]
		where
			[Ac].[GroupGuid] <> @GroupGuid

		Set @Msgerror = 'áÇ íãßä ÅÊãÇã ÇáÚãáíÉ áÇäåÇ ÓÊÄÏí Çáì ÊßÑÇÑ ÑãæÒ ÇáãÌãæÚÉ  ' + @AcR
		RAISERROR (@Msgerror, 16, 1)
	end

	update 
		[Mat]
	Set 
		[Code] = @Code+ dbo.FnFormatNumber([id], @GrCount)
	From
		[Mat] [Ac]
		inner join [#R] On [#R].[Guid] = [Ac].[Guid]



	

GO
/****** Object:  StoredProcedure [dbo].[PrcRecordCount_Inc_Dec]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create Procedure [dbo].[PrcRecordCount_Inc_Dec]
(
	@TableName varchar(255) = 'LeaseApartment',
	@TypeGuid uniqueidentifier = 'A7AD99E8-C0B3-4FF3-91DF-2D21AE0862E4',
	@Kind int = 1
)
as
	Declare @LastNumber int, @RecCount int

	update 	
		[TableNumber]
	Set
		RecCount = RecCount + @Kind,
		LastNumber = Case when @Kind = 1 then LastNumber + @Kind else LastNumber end
	where	
		([TableName] = @TableName)
		and (@TypeGuid = TypeGuid or @TypeGuid = 0x0)
		
	Select * from [TableNumber]	
	where	
		([TableName] = @TableName)
		and (@TypeGuid = TypeGuid or @TypeGuid = 0x0)
	

GO
/****** Object:  StoredProcedure [dbo].[PrcReCreateCheckEntry]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcReCreateCheckEntry]
(
	@Date1 DateTime = 0,
	@Date2 DateTime = 0,
	@ActiveDate bit = 0,
	@Op_Check bit = 0,
    @Op_Post bit = 0,
    @Op_Collection bit = 1,
    @Op_PartCollection bit = 0,
    @Op_Endorsement bit = 0,
    @Op_Returned bit = 0,
    @UpdateCheckwithdefaultaccount bit = 0
)
  
as
	Set noCount on 
	
	Declare @Guid uniqueidentifier,
			@CreateEntry Bit,
			@isRounded Bit
	Declare @RowCount int

	--ForWaitProgress	
	exec PrcSetProgrss '', 100, 0
	Declare @AllCount int	
	Select
		@AllCount = COUNT(*)
	From 
		[Checks] S
		inner join [CheckType] T on T.Guid = S.TypeGuid
		inner join [Resource] R on R.Guid = S.TypeGuid and R.Spid = @@SPID
	where
		(S.Date between @Date1 and @Date2 or @ActiveDate = 0)
	Declare @Msg varchar(255),
			@MsgConst varchar(255)
	Set @MsgConst = dbo.SC('ÅÚÇÏÉ ÊæáíÏ ÓäÏÇÊ ÇáÞíÏ ááÃæÑÇÞ  ÇáãÇáíÉ')
			
	Set @Msg = @MsgConst +' '+'0 / '+Cast(@AllCount as Varchar(25))
	exec PrcSetProgrss @Msg, @AllCount, 0
	--ForWaitProgress	End
	


	Alter Table Checks Disable Trigger all

	DECLARE cursor_Name CURSOR FAST_FORWARD FOR 
	Select 
		S.[Guid],
		Case when T.[CreatedEntry]  = 1 and S.CheckCreateEntry = 1 then 1 else 0 end as [CreateEntry],
		isRounded
	From 
		[Checks] S
		inner join [CheckType] T on T.Guid = S.TypeGuid
		inner join [Resource] R on R.Guid = S.TypeGuid and R.Spid = @@SPID
	where
		(S.Date between @Date1 and @Date2 or @ActiveDate = 0)
		

	Set @RowCount = 0
	
	Declare @Counter int
	Set @Counter = 0
	
	OPEN cursor_Name
	FETCH NEXT FROM cursor_Name INTO @Guid, @CreateEntry, @isRounded
	
	WHILE @@FETCH_STATUS = 0
	BEGIN


		--ForWaitProgress	
		Set @Counter = @Counter + 1

		Set @Msg = @MsgConst +' '+Cast(@Counter as Varchar(25)) +' / '+Cast(@AllCount as Varchar(25))
		exec PrcSetProgrss @Msg, @AllCount, @Counter

		if @Op_Check = 1 
		if @UpdateCheckwithdefaultaccount = 1
		begin
			update Checks Set obverseAccount = T.DefAccountGuid
			From
				Checks C
				inner join checkType T on T.Guid = C.TypeGuid
			where
				C.Guid = @Guid
		end
		
		--ÊÍÑíß ãÑÇßÒ ÇáßáÝÉ ãÚ ÇáÊÍÕíá
		if @UpdateCheckwithdefaultaccount = 1 and @Op_Collection = 1 
		begin
			update ChecksCollection Set DebitCostGuid = C.CostGuid
			From
				ChecksCollection cc
				inner join Checks C on c.Guid = CC.checkGuid
				inner join checkType T on T.Guid = C.TypeGuid
			where
				C.Guid = @Guid
				and t.collectedMoveCostDebit = 1
				and cc.Kind = 1

			update ChecksCollection Set CreditCostGuid = C.CostGuid
			From
				ChecksCollection cc
				inner join Checks C on c.Guid = CC.checkGuid
				inner join checkType T on T.Guid = C.TypeGuid
			where
				C.Guid = @Guid
				and t.collectedMoveCostCredit = 1
				and cc.Kind = 1
		end

		if @Op_Check = 1 
		begin
			if @CreateEntry = 1 and @isRounded = 0
			begin
				exec [PrcCreateChecksEntry] @Guid
			end
			else
			Delete LinkEntry_Checks where CheckGuid = @Guid and [Kind] = 1600
		end
		
		if @Op_Post = 1
		begin
			/*
			--ÊÍÑíß ãÑßÒ ÇáßáÝÉ Ýí ÇáÍÓÇÈ ÇáãÏíä
			Update ChecksCollection Set DebitCostGuid = K.CostGuid
			From
				ChecksCollection C 
				inner join Checks K on K.Guid = C.CheckGuid
				inner Join CheckType T on T.Guid = K.TypeGuid
			where
				(T.PostMoveCostDebit = 1)
				and (K.Guid = @Guid)
			*/		
			exec PrcCreateEntryChecksCollection @Guid, 0
		end

		--Print @Guid
		if @Op_Collection = 1
		begin
			exec PrcCreateEntryChecksCollection @Guid, 1
		end

		if @Op_Endorsement = 1
		begin
			exec PrcCreateEntryChecksCollection @Guid, 2
		end

		if @Op_Returned = 1
		begin
			exec PrcCreateEntryChecksCollection @Guid, 3
		end

		if @Op_PartCollection = 1
		begin
			--ÊÍÑíß ãÑÇßÒ ÇáßáÝÉ ãÚ ÇáÊÍÕíá
			if @UpdateCheckwithdefaultaccount = 1 and @Op_PartCollection = 1
			begin
				update ChecksPartialCollection Set DebitCostGuid = C.CostGuid
				From
					ChecksPartialCollection cc
					inner join Checks C on c.Guid = CC.checkGuid
					inner join checkType T on T.Guid = C.TypeGuid
				where
					C.Guid = @Guid
					and t.partialMoveCostDebit = 1
					
				update ChecksPartialCollection Set CreditCostGuid = C.CostGuid
				From
					ChecksPartialCollection cc
					inner join Checks C on c.Guid = CC.checkGuid
					inner join checkType T on T.Guid = C.TypeGuid
				where
					C.Guid = @Guid
					and t.partialMoveCostCredit = 1
			end

			exec PrcReCreateEntryChecksPartialCollection @Guid
		end

	  Set @RowCount = @RowCount + 1
	  
	  --Print @RowCount
	  FETCH NEXT FROM cursor_Name INTO @Guid, @CreateEntry, @isRounded
	
	END
	
	CLOSE cursor_Name
	DEALLOCATE cursor_Name

	Alter Table Checks Enable Trigger all


	--ForWaitProgress	
	Set @Msg = dbo.SC('ÅäÊåì')
	exec PrcSetProgrss @Msg, 0, 0

	if dbo.fnInRoundProcess() = 0
	Select @RowCount as [RowCount]
		

GO
/****** Object:  StoredProcedure [dbo].[PrcReCreateContractFlatShopEntry]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcReCreateContractFlatShopEntry]
(
	@Date1 DateTime = 0,
	@Date2 DateTime = 0,
	@ActiveDate bit = 0,
	@Datewith int = 0,
	@Num1 int = 0,
	@Num2 int = 0,
	@ActiveNum bit = 0,
	@MaxDate int = 0
)
  
as
	Set noCount on

	--Update [Resource] set spid = @@spid
	 
	exec PrcSetProgrss '', 100, 0
	
	Declare @Guid uniqueidentifier,
			@CreateEntry Bit
	Declare @RowCount int

	Declare @AllCount int	
	Select 
		L.[Guid],
		Case when T.[CreateEntry]  = 1 and L.CreateContractEntry = 1 then 1 else 0 end as [CreateEntry]
		into #TmpContract
	From 
		[LeaseApartment] L
		inner join [ContractType] T on T.Guid = L.TypeGuid
		inner join [Resource] R on R.Guid = L.TypeGuid and R.Spid = @@SPID
	where
		(ISNULL(IsRounded, 0) = 0)
		and ((L.number between @num1 and @Num2) or @ActiveNum = 0)
		and (
			(
				([L].[FromDate] between @Date1 and @Date2 and @Datewith = 0)
			)
			or
			(
				([L].[ToDate] between @Date1 and @Date2 and @Datewith = 1)
			)

			or
			(
				([L].[ContractFinishDate] between @Date1 and @Date2 and @Datewith = 2)
				and ([L].[ContractFinish] = 1)
			)

			or
			(
				([L].[EditDate] between @Date1 and @Date2 and @Datewith = 3)
			)
			or
			(
				([L].[AcquittancePrintdate] between @Date1 and @Date2 and @Datewith = 4)
			)

			or
			(
				([L].LeaveDate between @Date1 and @Date2 and @Datewith = 5)
			)
			or @ActiveDate = 0
		) 
		
	Set @AllCount = @@ROWCOUNT 
	
	Declare @Msg varchar(255)
	Set @Msg = dbo.SC('ÅÚÇÏÉ ÊæáíÏ ÓäÏÇÊ ÇáÞíÏ ááÚÞæÏ') +' '+'0 / '+Cast(@AllCount as Varchar(25))
	exec PrcSetProgrss @Msg, @AllCount, 0
	--Select * from #TmpContract
	
	Declare @Counter int
	Set @Counter = 0
	DECLARE cursor_Name CURSOR FAST_FORWARD FOR 
	Select * from #TmpContract
	Set @RowCount = 0
	
	OPEN cursor_Name
	FETCH NEXT FROM cursor_Name INTO @Guid, @CreateEntry
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
		Set @Counter = @Counter + 1
		Set @Msg = dbo.SC('ÅÚÇÏÉ ÊæáíÏ ÓäÏÇÊ ÇáÞíÏ ááÚÞæÏ') +' '+Cast(@Counter as Varchar(25)) +' / '+Cast(@AllCount as Varchar(25))
		exec PrcSetProgrss @Msg, @AllCount, @Counter

		if @CreateEntry = 1
		begin
			
			exec [PrcCreateContractFlatShopEntry] @Guid, @MaxDate
			Set @RowCount = @RowCount + 1			
		end
		else
		begin
			Delete HEntry where Guid = @Guid 
			Set @RowCount = @RowCount + 1
		end
		
	  FETCH NEXT FROM cursor_Name INTO @Guid, @CreateEntry
	
	END
	
	CLOSE cursor_Name
	DEALLOCATE cursor_Name

	Set @Msg = dbo.SC('ÅäÊåì')
	exec PrcSetProgrss @Msg, 0, 0
		
	if dbo.fnInRoundProcess() = 0
	Select @RowCount as [RowCount]
		

GO
/****** Object:  StoredProcedure [dbo].[PrcReCreateContractLandVillaEntry]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcReCreateContractLandVillaEntry]
(
	@Date1 DateTime = '3/1/2011',
	@Date2 DateTime = '3/1/2012',
	@ActiveDate bit = 0,
	@Datewith int = 0,
	@Num1 int = 4600,
	@Num2 int = 4614,
	@ActiveNum bit = 1,
	@MaxDate int = 42644
)
  
as
	Set noCount on 
	Declare @Guid uniqueidentifier,
			@CreateEntry Bit
	Declare @RowCount int
	
	Select 
		L.[Guid],
		Case when T.[CreateEntry]  = 1 and L.CreateContractEntry = 1 then 1 else 0 end as [CreateEntry]
		into #TmpContract
	From 
		[LandContract] L
		inner join [ContractType] T on T.Guid = L.TypeGuid
		inner join [Resource] R on R.Guid = L.TypeGuid and R.Spid = @@SPID
	where
		(ISNull(IsRounded,0) = 0)
		and ((L.number between @num1 and @Num2) or @ActiveNum = 0)
		and (
			(
				([L].[FromDate] between @Date1 and @Date2 and @Datewith = 0)
			)
			or
			(
				([L].[ToDate] between @Date1 and @Date2 and @Datewith = 1)
			)

			or
			(
				([L].[ContractFinishDate] between @Date1 and @Date2 and @Datewith = 2)
				and ([L].[ContractFinish] = 1)
			)

			or
			(
				([L].[EditDate] between @Date1 and @Date2 and @Datewith = 3)
			)
			or
			(
				([L].[AcquittancePrintdate] between @Date1 and @Date2 and @Datewith = 4)
			)

			or
			(
				([L].LeaveDate between @Date1 and @Date2 and @Datewith = 5)
			)
			or @ActiveDate = 0
		) 
		
	--Select * from #TmpContract
	
	DECLARE cursor_Name CURSOR FAST_FORWARD FOR 
	Select * from #TmpContract
	Set @RowCount = 0
	
	OPEN cursor_Name
	FETCH NEXT FROM cursor_Name INTO @Guid, @CreateEntry
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
		if @CreateEntry = 1
		begin
			exec [PrcCreateContractLandVillEntry] @Guid, @MaxDate
			Set @RowCount = @RowCount + 1			
		end
		else
		begin
			Delete HEntry where Guid = @Guid 
			Set @RowCount = @RowCount + 1
		end
		
	  FETCH NEXT FROM cursor_Name INTO @Guid, @CreateEntry
	
	END
	
	CLOSE cursor_Name
	DEALLOCATE cursor_Name

	if dbo.fnInRoundProcess() = 0
	Select @RowCount as [RowCount]
		

GO
/****** Object:  StoredProcedure [dbo].[PrcReCreateContractParkingEntry]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcReCreateContractParkingEntry]
(
	@Date1 DateTime = '3/1/2011',
	@Date2 DateTime = '3/1/2012',
	@ActiveDate bit = 0,
	@Datewith int = 0,
	@Num1 int = 1,
	@Num2 int = 200,
	@ActiveNum bit = 1,
	@MaxDate int = 42644
)
  
as
	Set noCount on 
	
	--Update [Resource] set spid = @@spid
	
	exec PrcSetProgrss '', 100, 0

	Declare @Guid uniqueidentifier,
			@CreateEntry Bit
	Declare @RowCount int
	Declare @AllCount int	
	
	Select 
		L.[Guid],
		Case when T.[CreateEntry]  = 1 and L.CreateContractEntry = 1 then 1 else 0 end as [CreateEntry]
		into #TmpContract
	From 
		[ParkingContract] L
		inner join [ContractType] T on T.Guid = L.TypeGuid
		inner join [Resource] R on R.Guid = L.TypeGuid and R.Spid = @@SPID
	where
		(ISNULL(IsRounded, 0) = 0)
		and ((L.number between @num1 and @Num2) or @ActiveNum = 0)
		and (
			(
				([L].[FromDate] between @Date1 and @Date2 and @Datewith = 0)
			)
			or
			(
				([L].[ToDate] between @Date1 and @Date2 and @Datewith = 1)
			)

			or
			(
				([L].[ContractFinishDate] between @Date1 and @Date2 and @Datewith = 2)
				and ([L].[ContractFinish] = 1)
			)

			or
			(
				([L].[EditDate] between @Date1 and @Date2 and @Datewith = 3)
			)
			/*
			or
			(
				([L].[AcquittancePrintdate] between @Date1 and @Date2 and @Datewith = 4)
			)

			or
			(
				([L].LeaveDate between @Date1 and @Date2 and @Datewith = 5)
			)
			*/
			or @ActiveDate = 0
		) 
		
	--Select * from #TmpContract
	
	Set @AllCount = @@ROWCOUNT 
	Declare @Msg varchar(255)
	Set @Msg = dbo.SC('ÅÚÇÏÉ ÊæáíÏ ÓäÏÇÊ ÇáÞíÏ ááÚÞæÏ') +' '+'0 / '+Cast(@AllCount as Varchar(25))
	exec PrcSetProgrss @Msg, @AllCount, 0
	--Select * from #TmpContract
	
	Declare @Counter int
	Set @Counter = 0

	DECLARE cursor_Name CURSOR FAST_FORWARD FOR 
	Select * from #TmpContract
	Set @RowCount = 0
	
	OPEN cursor_Name
	FETCH NEXT FROM cursor_Name INTO @Guid, @CreateEntry
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
		Set @Counter = @Counter + 1
		Set @Msg = dbo.SC('ÅÚÇÏÉ ÊæáíÏ ÓäÏÇÊ ÇáÞíÏ ááÚÞæÏ') +' '+Cast(@Counter as Varchar(25)) +' / '+Cast(@AllCount as Varchar(25))
		exec PrcSetProgrss @Msg, @AllCount, @Counter

		if @CreateEntry = 1
		begin
			--print @Guid
			exec [PrcCreateContractParkingEntry] @Guid, @MaxDate, 0
			Set @RowCount = @RowCount + 1			
		end
		else
		begin
			Delete HEntry where Guid = @Guid 
			Set @RowCount = @RowCount + 1
		end
		
	  FETCH NEXT FROM cursor_Name INTO @Guid, @CreateEntry
	
	END
	
	CLOSE cursor_Name
	DEALLOCATE cursor_Name

	Set @Msg = dbo.SC('ÅäÊåì')
	exec PrcSetProgrss @Msg, 0, 0

	if dbo.fnInRoundProcess() = 0
	Select @RowCount as [RowCount]
		

GO
/****** Object:  StoredProcedure [dbo].[PrcReCreateEntryChecksPartialCollection]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcReCreateEntryChecksPartialCollection]
(
	@Guid uniqueidentifier = 0x0
)
  
as
	Declare @PartGuid uniqueidentifier, 
			@CheckGuid uniqueidentifier, 
			@TypeGuid uniqueidentifier

	DECLARE cursor_Name_2 CURSOR FAST_FORWARD FOR 
	Select 
			p.Guid, CheckGuid, C.TypeGuid
	From 
			ChecksPartialCollection P 
			inner join checks c on C.Guid = p.CheckGuid
	where
		p.CheckGuid = @Guid
	
	OPEN cursor_Name_2
	FETCH NEXT FROM cursor_Name_2 INTO @PartGuid, @CheckGuid, @TypeGuid
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
		exec [PrcCreateEntryChecksPartialCollection] @PartGuid, @CheckGuid, @TypeGuid, 1
		
	  FETCH NEXT FROM cursor_Name_2 INTO @PartGuid, @CheckGuid, @TypeGuid
	END
	
	CLOSE cursor_Name_2
	DEALLOCATE cursor_Name_2

GO
/****** Object:  StoredProcedure [dbo].[PrcReCreateEntryType]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcReCreateEntryType]
(
	@UpdateSEntrywithdefaultType bit = 0,
	@Date1 DateTime = '1/1/2015',
	@Date2 DateTime = '1/5/2015',
	@ActiveDate bit = 1
)
  
as
	Set noCount on 
	
	--ForWaitProgress	
	exec PrcSetProgrss '', 100, 0
	Declare @AllCount int	
	Select
		@AllCount = COUNT(*)
	From 
		[Secondary_Entry] S
		inner join [EntryType] T on T.Guid = S.TypeGuid
		inner join [Resource] R on R.Guid = S.TypeGuid and R.Spid = @@SPID
	where
		(S.Date between @Date1 and @Date2 or @ActiveDate = 0)
		and IsNull(IsRounded,0) = 0
		
	Declare @Msg varchar(255),
			@MsgConst varchar(255)
	Set @MsgConst = dbo.SC('ÅÚÇÏÉ ÊæáíÏ ÓäÏÇÊ ÇáÞíÏ áÃäãÇØ ÇáÓäÏÇÊ')
			
	Set @Msg = @MsgConst +' '+'0 / '+Cast(@AllCount as Varchar(25))
	exec PrcSetProgrss @Msg, @AllCount, 0
	Declare @Counter int
	Set @Counter = 0
	--ForWaitProgress	End

	if @UpdateSEntrywithdefaultType = 1
	update Secondary_EntryDetail Set [CostGuid] = Ctr.[UnitCostGuid]
	From 
		[Secondary_EntryDetail] D
		inner join [Secondary_Entry] S on s.Guid = D.ParentGuid
		inner join [EntryType] T on T.Guid = S.TypeGuid
		inner join [Resource] R on R.Guid = S.TypeGuid and R.Spid = @@SPID
		inner join [vwAllContract] ctr on ctr.Guid = S.ContractGuid
	where
		(S.Date between @Date1 and @Date2 or @ActiveDate = 0)
		and IsNull(IsRounded,0) = 0

	Declare @Guid uniqueidentifier,
			@ContractGuid uniqueidentifier
	Declare @RowCount int
	
	DECLARE cursor_Name CURSOR FAST_FORWARD FOR 
	Select 
		S.[Guid],
		S.ContractGuid
	From 
		[Secondary_Entry] S
		inner join [EntryType] T on T.Guid = S.TypeGuid
		inner join [Resource] R on R.Guid = S.TypeGuid and R.Spid = @@SPID
	where
		(S.Date between @Date1 and @Date2 or @ActiveDate = 0)
		and IsNull(IsRounded,0) = 0
		
	Set @RowCount = 0
	

	OPEN cursor_Name
	FETCH NEXT FROM cursor_Name INTO @Guid, @ContractGuid
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
		
		--ForWaitProgress	
		Set @Counter = @Counter + 1
		Set @Msg = @MsgConst +' '+Cast(@Counter as Varchar(25)) +' / '+Cast(@AllCount as Varchar(25))
		exec PrcSetProgrss @Msg, @AllCount, @Counter

		--Print @Guid
		--Print @ContractGuid
		
		exec [PrcCreateEntryFromEntryType] @Guid, @ContractGuid
		Set @RowCount = @RowCount + 1
		FETCH NEXT FROM cursor_Name INTO @Guid, @ContractGuid
	
	END
	
	CLOSE cursor_Name
	DEALLOCATE cursor_Name

	--ForWaitProgress	
	Set @Msg = dbo.SC('ÅäÊåì')
	exec PrcSetProgrss @Msg, 0, 0

	if dbo.fnInRoundProcess() = 0
	Select @RowCount as [RowCount]
		

GO
/****** Object:  StoredProcedure [dbo].[PrcReCreateMaintenanceContract]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcReCreateMaintenanceContract]
(
	@Date1 DateTime = 0,
	@Date2 DateTime = 0,
	@ActiveDate bit = 0,
	@Datewith int = 0,
	@Num1 int = 0,
	@Num2 int = 0,
	@ActiveNum bit = 0
)
  
as
	Set noCount on

	--Update [Resource] set spid = @@spid
	 
	exec PrcSetProgrss '', 100, 0
	
	Declare @Guid uniqueidentifier,
			@CreateEntry Bit
	Declare @RowCount int

	Declare @AllCount int	
	Select 
		L.[Guid],
		Case when T.[CreateEntry]  = 1 and L.CreateContractEntry = 1 then 1 else 0 end as [CreateEntry]
		into #TmpContract
	From 
		[MaintenanceContract] L
		inner join [MaintenanceContractType] T on T.Guid = L.TypeGuid
		inner join [Resource] R on R.Guid = L.TypeGuid and R.Spid = @@SPID
	where
		(ISNULL(IsRounded, 0) = 0)
		and ((L.number between @num1 and @Num2) or @ActiveNum = 0)
		and (
			(
				([L].[FromDate] between @Date1 and @Date2 and @Datewith = 0)
			)
			or
			(
				([L].[ToDate] between @Date1 and @Date2 and @Datewith = 1)
			)

			or
			(
				([L].[ContractFinishDate] between @Date1 and @Date2 and @Datewith = 2)
				and ([L].[ContractFinish] = 1)
			)

			or
			(
				([L].[EditDate] between @Date1 and @Date2 and @Datewith = 3)
			)
			or
			(
				([L].[AcquittancePrintdate] between @Date1 and @Date2 and @Datewith = 4)
			)

			or @ActiveDate = 0
		) 
		
	Set @AllCount = @@ROWCOUNT 
	
	Declare @Msg varchar(255)
	Set @Msg = dbo.SC('ÅÚÇÏÉ ÊæáíÏ ÓäÏÇÊ ÇáÞíÏ ááÚÞæÏ') +' '+'0 / '+Cast(@AllCount as Varchar(25))
	exec PrcSetProgrss @Msg, @AllCount, 0
	--Select * from #TmpContract
	
	Declare @Counter int
	Set @Counter = 0
	DECLARE cursor_Name CURSOR FAST_FORWARD FOR 
	Select * from #TmpContract
	Set @RowCount = 0
	
	OPEN cursor_Name
	FETCH NEXT FROM cursor_Name INTO @Guid, @CreateEntry
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
		Set @Counter = @Counter + 1
		Set @Msg = dbo.SC('ÅÚÇÏÉ ÊæáíÏ ÓäÏÇÊ ÇáÞíÏ ááÚÞæÏ') +' '+Cast(@Counter as Varchar(25)) +' / '+Cast(@AllCount as Varchar(25))
		exec PrcSetProgrss @Msg, @AllCount, @Counter

		if @CreateEntry = 1
		begin
			
			exec PrcCreateMaintenanceContractEntry @Guid
			Set @RowCount = @RowCount + 1			
		end
		else
		begin
			Delete HEntry where Guid = @Guid 
			Set @RowCount = @RowCount + 1
		end
		
	  FETCH NEXT FROM cursor_Name INTO @Guid, @CreateEntry
	
	END
	
	CLOSE cursor_Name
	DEALLOCATE cursor_Name

	Set @Msg = dbo.SC('ÅäÊåì')
	exec PrcSetProgrss @Msg, 0, 0
		
	if dbo.fnInRoundProcess() = 0		
	Select @RowCount as [RowCount]
		

GO
/****** Object:  StoredProcedure [dbo].[PrcReCreateServicesContract]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcReCreateServicesContract]
(
	@Date1 DateTime = 0,
	@Date2 DateTime = 0,
	@ActiveDate bit = 0,
	@Datewith int = 0,
	@Num1 int = 0,
	@Num2 int = 0,
	@ActiveNum bit = 0
)
  
as
	Set noCount on

	--Update [Resource] set spid = @@spid
	 
	exec PrcSetProgrss '', 100, 0
	
	Declare @Guid uniqueidentifier,
			@CreateEntry Bit
	Declare @RowCount int

	Declare @AllCount int	
	Select 
		L.[Guid],
		Case when T.[CreateEntry]  = 1 and L.CreateContractEntry = 1 then 1 else 0 end as [CreateEntry]
		into #TmpContract
	From 
		[ServicesContract] L
		inner join [ServicesContractType] T on T.Guid = L.TypeGuid
		inner join [Resource] R on R.Guid = L.TypeGuid and R.Spid = @@SPID
	where
		(ISNULL(IsRounded, 0) = 0)
		and ((L.number between @num1 and @Num2) or @ActiveNum = 0)
		and (
			(
				([L].[FromDate] between @Date1 and @Date2 and @Datewith = 0)
			)
			or
			(
				([L].[ToDate] between @Date1 and @Date2 and @Datewith = 1)
			)

			or
			(
				([L].[ContractFinishDate] between @Date1 and @Date2 and @Datewith = 2)
				and ([L].[ContractFinish] = 1)
			)

			or
			(
				([L].[EditDate] between @Date1 and @Date2 and @Datewith = 3)
			)
			or
			(
				([L].[AcquittancePrintdate] between @Date1 and @Date2 and @Datewith = 4)
			)

			or @ActiveDate = 0
		) 
		
	Set @AllCount = @@ROWCOUNT 
	
	Declare @Msg varchar(255)
	Set @Msg = dbo.SC('ÅÚÇÏÉ ÊæáíÏ ÓäÏÇÊ ÇáÞíÏ ááÚÞæÏ') +' '+'0 / '+Cast(@AllCount as Varchar(25))
	exec PrcSetProgrss @Msg, @AllCount, 0
	--Select * from #TmpContract
	
	Declare @Counter int
	Set @Counter = 0
	DECLARE cursor_Name CURSOR FAST_FORWARD FOR 
	Select * from #TmpContract
	Set @RowCount = 0
	
	OPEN cursor_Name
	FETCH NEXT FROM cursor_Name INTO @Guid, @CreateEntry
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
		Set @Counter = @Counter + 1
		Set @Msg = dbo.SC('ÅÚÇÏÉ ÊæáíÏ ÓäÏÇÊ ÇáÞíÏ ááÚÞæÏ') +' '+Cast(@Counter as Varchar(25)) +' / '+Cast(@AllCount as Varchar(25))
		exec PrcSetProgrss @Msg, @AllCount, @Counter

		if @CreateEntry = 1
		begin
			
			exec PrcCreateServicesContractEntry @Guid
			Set @RowCount = @RowCount + 1			
		end
		else
		begin
			Delete HEntry where Guid = @Guid 
			Set @RowCount = @RowCount + 1
		end
		
	  FETCH NEXT FROM cursor_Name INTO @Guid, @CreateEntry
	
	END
	
	CLOSE cursor_Name
	DEALLOCATE cursor_Name

	Set @Msg = dbo.SC('ÅäÊåì')
	exec PrcSetProgrss @Msg, 0, 0
		
	if dbo.fnInRoundProcess() = 0
	Select @RowCount as [RowCount]
		

GO
/****** Object:  StoredProcedure [dbo].[PrcRemindBackupDay]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcRemindBackupDay]
  
as
	Declare @RemindBackupDay int
	
	Select
		@RemindBackupDay = Value
	From
		DMD_const
	where
		VName = 'RemindBackupDay'
	
	Declare @BackpupDate Datetime
	Select Top 1
		@BackpupDate = Backupset.bACKUP_fINISH_dATE
	from
		msdb..Backupset as Backupset
	where
		DataBase_Name = dB_nAME()
	order by
		backup_finish_date DESC
		
	Select 
		@BackpupDate as [BackpupDate],
		IsNull(Datediff(Day, @BackpupDate, GETDATE()),-1) as DayCount,
		Case when Datediff(Day, @BackpupDate, GETDATE()) >= IsNull(@RemindBackupDay,0) 
				  or @BackpupDate IS Null
		then 1 end as Show

GO
/****** Object:  StoredProcedure [dbo].[PrcReminderForming]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcReminderForming]
  
as
	Set noCount on
	Declare 
			@Subject Varchar(256),
			@Date Datetime,
			@Note Varchar(256),
			@UserName Varchar(256),
			@I int,

			@StrReminder Varchar(2000)
	Set @StrReminder =''
	Set @I = 0

	DECLARE cursor_Name CURSOR FAST_FORWARD FOR 
	Select 
		[Subject],
		[Date],
		[Note],
		Case when ForAllUser = 1 and isnull([U].[UserName],'') <> '' then '/'+isnull([U].[UserName],'')+'/' else '' end as [UserName]
	From 
		[Reminder] [R]
		left join (
					Select
						[C].[UserGuid],
						[R].[LoginName] as [UserName]
					From
						[CurrentUsers] [C]
						inner join [Realty_Users] [R] on [R].[Guid] = [C].[UserGuid] And [C].[Spid] = @@Spid
					)[U] On [U].[UserGuid] = [R].[UserGuid] 
	where
		([RemindDate] < GetDate())
		and ([Finished] = 0)
		and ([U].[userGuid] is Not Null Or ForAllUser = 1)
	Order By
		[Date], [Number]
		
		
	
	OPEN cursor_Name
	FETCH NEXT FROM cursor_Name INTO @Subject, @Date, @Note, @UserName
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
		Set @I = @I + 1
		Set @StrReminder = @StrReminder + '             :::'+Cast(@I as Varchar(4))+':::     ' + @Subject
		Set @StrReminder = @StrReminder + ' '+ Dbo.SC('ÊÇÑíÎ ')
 		Set @StrReminder = @StrReminder + ' '+  
 												Cast(Day(@Date) as Varchar(5)) +'-'+
 												Cast(Month(@Date) as Varchar(5)) +'-'+
												Cast(Year(@Date) as Varchar(5)) +' '+
												+ Dbo.SC('ÇáÓÇÚÉ') + ' '+
 												Cast(DatePart(hh, @Date) as Varchar(5)) +':'+
 												dbo.FnFormatNumber(DatePart(Minute, @Date) ,2)

 		Set @StrReminder = @StrReminder + Case when @Note <> '' then ' '+  @Note+' ' else '' end
 		Set @StrReminder = @StrReminder + ' '+  @UserName
		  
	FETCH NEXT FROM cursor_Name INTO @Subject, @Date, @Note, @UserName
	END
	
	CLOSE cursor_Name
	DEALLOCATE cursor_Name

	Select  @StrReminder  as  [StrReminder]
-- 	where
-- 		([Subject] Like '%'+@Subject+'%')
-- 		and ([Note] Like '%'+@Note+'%')
-- 		and (dbo.fndateonly([RemindDate]) between @Date1 and @Date2)

GO
/****** Object:  StoredProcedure [dbo].[PrcReminderReport]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcReminderReport]
(
	@UserGuid uniqueidentifier = 0x0,
	@Subject Varchar(256) = '',
	@Note Varchar(256) = '',
	@Finished int = 2,
	@Date1 DateTime = '1/1/2007',
	@Date2 DateTime = '1/1/2012'
)
  
as
	Select 
		[R].*
		,[U].[LoginName] as [UserName]
	From 
		[Reminder] [R]
		inner join [Realty_Users] [U] on [U].[Guid] = [R].[UserGuid]
	where
		([Subject] Like '%'+@Subject+'%')
		and ([Note] Like '%'+@Note+'%')
		and (dbo.fndateonly([RemindDate]) between @Date1 and @Date2)
		and ([U].[Guid] = @UserGuid or @UserGuid = 0x0)
		and (R.[Finished] = @Finished or @Finished = 2)

GO
/****** Object:  StoredProcedure [dbo].[PrcReNameBuildingCost]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcReNameBuildingCost]
(
	@BuildingGuid uniqueidentifier = '42EEACF8-FE89-4F14-AFB5-3EF324139A61',
	@Flat bit = 0,
	@Shop bit = 0,
	@Parking bit = 1
)
  
as

	if @Flat = 1
	begin
		alter Table [Cost] disable trigger all
		
		update [Cost] set 
			Name = 'ÔÞÉ' +' '+f.NO+' ' +b.Name,
			ltnName = 'Flat' +' '+f.NO+' ' +b.ltnName
		From 
			[Cost] co
			inner join Apartment F on f.CostGuid = co.Guid
			inner join Building B on f.BuildingGuid = b.Guid
		where
			b.Guid = @BuildingGuid
			
		alter Table [Cost] enable trigger all
	end

	if @Shop = 1
	begin
		alter Table [Cost] disable trigger all
		
		update [Cost] set 
			Name = 'ãÍá' +' '+f.NO+' ' +b.Name,
			ltnName = 'Shop' +' '+f.NO+' ' +b.ltnName
		From 
			[Cost] co
			inner join Shop F on f.CostGuid = co.Guid
			inner join Building B on f.BuildingGuid = b.Guid
		where
			b.Guid = @BuildingGuid
			
		alter Table [Cost] enable trigger all
	end

	if @Parking = 1
	begin
		alter Table [Cost] disable trigger all
		
		update [Cost] set 
			Name = 'ãæÞÝ' +' '+f.NO+' ' +b.Name,
			ltnName = 'Parking' +' '+f.NO+' ' +b.ltnName
		From 
			[Cost] co
			inner join Parking F on f.CostGuid = co.Guid
			inner join Building B on f.BuildingGuid = b.Guid
		where
			b.Guid = @BuildingGuid
			
		alter Table [Cost] enable trigger all
	end
		

GO
/****** Object:  StoredProcedure [dbo].[PrcRenewalCount]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcRenewalCount]
(
	@CustGuid uniqueidentifier = 0x0,
	@FlatGuid uniqueidentifier = 0x0
)
  
as
	Declare @ContractCount int
	Select 
		@ContractCount = IsNull(COUNT(*),0) + 1 
	From 
		[LeaseApartment]
	where
		CustomerGuid = @CustGuid
		and ApartmentGuid = @FlatGuid
		
	Declare @CountOldContract int
	Select 
		@CountOldContract = Max([CountOldContract])
	From 
		[LeaseApartment]
	where
		CustomerGuid = @CustGuid
		and ApartmentGuid = @FlatGuid	
		
	Select @CountOldContract as CountOldContract, @ContractCount as ContractCount

GO
/****** Object:  StoredProcedure [dbo].[PrcRenewalMaintenanceContractCount]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcRenewalMaintenanceContractCount]
(
	@CustGuid uniqueidentifier = 0x0
)
  
as
	Declare @ContractCount int
	Select 
		@ContractCount = IsNull(COUNT(*),0) + 1 
	From 
		[MaintenanceContract]
	where
		CustomerGuid = @CustGuid
		
	Declare @CountOldContract int
	Select 
		@CountOldContract = Max([CountOldContract])
	From 
		[MaintenanceContract]
	where
		CustomerGuid = @CustGuid
		
	Select @CountOldContract as CountOldContract, @ContractCount as ContractCount

GO
/****** Object:  StoredProcedure [dbo].[PrcRenewalServicesContractCount]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcRenewalServicesContractCount]
(
	@CustGuid uniqueidentifier = 0x0,
	@BuildingGuid uniqueidentifier = 0x0
)
  
as
	Declare @ContractCount int
	Select 
		@ContractCount = IsNull(COUNT(*),0) + 1 
	From 
		[ServicesContract]
	where
		CustomerGuid = @CustGuid
		and BuildingGuid = @BuildingGuid
		
	Declare @CountOldContract int
	Select 
		@CountOldContract = Max([CountOldContract])
	From 
		[ServicesContract]
	where
		CustomerGuid = @CustGuid
		and BuildingGuid = @BuildingGuid	
		
	Select @CountOldContract as CountOldContract, @ContractCount as ContractCount

GO
/****** Object:  StoredProcedure [dbo].[PrcReNumberCard]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcReNumberCard]
(
	@Entry Bit = 0,
	@FirstEntryNum int = 0,
	@EntryType Bit = 0,
	@EntryTypeGuid uniqueidentifier = 0x0,
	@FirstEntryTypeNum int = 0,

	@ContractType Bit = 0,
	@ContractTypeGuid uniqueidentifier = 0x0,
	@FirstContractTypeNum int = 0,

	@CheckType Bit = 0,
	@CheckTypeGuid uniqueidentifier = 0x0,
	@FirstCheckTypeNum int = 0,

	@Flat Bit = 0,
	@Shop Bit = 0,
	@Parking Bit = 0,
	@Land Bit = 0,
	@Villa Bit = 0,
	@Account Bit = 1,
	
	@ElectricityBillType Bit = 1,
    @ElectricityBillTypeGuid uniqueidentifier = 0x0,
    @FirstElectricityBillTypeNum int = 0,
    
    @Cust Bit = 1
)
  
as
	Create Table #T
	(
		[Id] int Identity(1,1),
		[Guid] Uniqueidentifier
	)
	Declare @TypeGuid Uniqueidentifier



	--ÓäÏÇÊ ÇáÞíÏ
	if @Entry = 1
	exec PrcReNumberHEntry @FirstEntryNum

	-- ÃäãÇØ ÇáÓäÏÇÊ
	if @EntryType = 1
	begin
			if IsNull(@FirstEntryTypeNum,0) <= 0
			Set @FirstEntryTypeNum = 1
			
			DECLARE cursor_Name CURSOR FAST_FORWARD FOR 
			SELECT [Guid] 
			FROM [EntryType]
			where
				[Guid] = @EntryTypeGuid or @EntryTypeGuid = 0x0
			
			OPEN cursor_Name
			FETCH NEXT FROM cursor_Name INTO @TypeGuid
			
			WHILE @@FETCH_STATUS = 0
			BEGIN
				Truncate Table #T
		
				insert into #T
				([Guid])	
				Select 
					[Guid]
				From
					[Secondary_Entry]
				where 
					[TypeGuid] = @TypeGuid
				Order By
					[Date],[Number]
		
				begin Tran Tr1
				Alter Table [Secondary_Entry] Disable Trigger All

				update 	[Secondary_Entry]
				Set [Number] = [T].[Id] + IsNull(@FirstEntryTypeNum,0) -1
				From
					[Secondary_Entry] [C]
					inner join #T [T] On [T].[Guid] = [C].[Guid]
		
				Alter Table [Secondary_Entry] Enable Trigger All
				commit Tran Tr1
		
			  FETCH NEXT FROM cursor_Name INTO @TypeGuid
			
			END
			
			CLOSE cursor_Name
			DEALLOCATE cursor_Name
	end
	----------------------



	-- ÃäãÇØ ÇáÚÞæÏ
	if @ContractType = 1
	begin
			if IsNull(@FirstContractTypeNum,0) <= 0
			Set @FirstContractTypeNum = 1
			
			DECLARE cursor_Name CURSOR FAST_FORWARD FOR 
			SELECT [Guid] 
			FROM [ContractType]
			where
				[Guid] = @ContractTypeGuid or @ContractTypeGuid = 0x0
			
			OPEN cursor_Name
			FETCH NEXT FROM cursor_Name INTO @TypeGuid
			
			WHILE @@FETCH_STATUS = 0
			BEGIN
				Truncate Table #T
		
				insert into #T
				([Guid])	
				Select 
					[Guid]
				From
					[LeaseApartment]
				where 
					[TypeGuid] = @TypeGuid
				Order By
					[EditDate],[Number]
		
				begin Tran Tr1
				Alter Table [LeaseApartment] Disable Trigger All

				update 	[LeaseApartment]
				Set [Number] = [T].[Id] + IsNull(@FirstContractTypeNum, 0) -1
				From
					[LeaseApartment] [C]
					inner join #T [T] On [T].[Guid] = [C].[Guid]

				Alter Table [LeaseApartment] Enable Trigger All
				commit Tran Tr1
		
		
				Truncate Table #T
		
				insert into #T
				([Guid])	
				Select 
					[Guid]
				From
					[ParkingContract]
				where 
					[TypeGuid] = @TypeGuid
				Order By
					[EditDate],[Number]
		
				begin Tran Tr1
				Alter Table [ParkingContract] Disable Trigger All
				update 	[ParkingContract]
				Set [Number] = [T].[Id]
				From
					[ParkingContract] [C]
					inner join #T [T] On [T].[Guid] = [C].[Guid]
				Alter Table [ParkingContract] Enable Trigger All
				commit Tran Tr1
		
		
				Truncate Table #T
		
				insert into #T
				([Guid])	
				Select 
					[Guid]
				From
					[LandContract]
				where 
					[TypeGuid] = @TypeGuid
				Order By
					[EditDate],[Number]
		
				begin Tran Tr1
				Alter Table [LandContract] Disable Trigger All
				update 	[LandContract]
				Set [Number] = [T].[Id]
				From
					[LandContract] [C]
					inner join #T [T] On [T].[Guid] = [C].[Guid]
				Alter Table [LandContract] Enable Trigger All
				commit Tran Tr1
		
			  FETCH NEXT FROM cursor_Name INTO @TypeGuid
			
			END
			
			CLOSE cursor_Name
			DEALLOCATE cursor_Name
	end
	----------------------

	-- ÃäãÇØ ÇáÃæÑÇÞ ÇáãÇáíÉ
	if @CheckType = 1
	begin
			DECLARE cursor_Name CURSOR FAST_FORWARD FOR 
			SELECT  [Guid] 
			FROM [CheckType]
			where
				[Guid] = @CheckTypeGuid or @CheckTypeGuid = 0x0
			
			OPEN cursor_Name
			FETCH NEXT FROM cursor_Name INTO @TypeGuid
			
			WHILE @@FETCH_STATUS = 0
			BEGIN
				Truncate Table #T
		
				insert into #T
				([Guid])	
				Select 
					[Guid]
				From
					[Checks]
				where 
					[TypeGuid] = @TypeGuid
				Order By
					[Number]
		
				begin Tran Tr1
				Alter Table [Checks] Disable Trigger All
				update 	[Checks]
				Set [Number] = [T].[Id] +ISNULL(@FirstCheckTypeNum,0) -1
				From
					[Checks] [C]
					inner join #T [T] On [T].[Guid] = [C].[Guid]
				Alter Table [Checks] Enable Trigger All
				commit Tran Tr1
		
		
			  FETCH NEXT FROM cursor_Name INTO @TypeGuid
			
			END
			
			CLOSE cursor_Name
			DEALLOCATE cursor_Name
	end
	----------------------


	-- ÇáÔÞÞ
	if @Flat = 1
	begin
			Truncate Table #T
	
			insert into #T
			([Guid])	
			Select 
				[Guid]
			From
				[Apartment]
			Order By
				[Number]
	
			begin Tran Tr1
			Alter Table [Apartment] Disable Trigger All
			update 	[Apartment]
			Set [Number] = [T].[Id]
			From
				[Apartment] [C]
				inner join #T [T] On [T].[Guid] = [C].[Guid]
			Alter Table [Apartment] Enable Trigger All
			commit Tran Tr1
	
	end
	----------------------

	-- ÇáãÍáÇÊ
	if @Shop = 1
	begin
			Truncate Table #T
	
			insert into #T
			([Guid])	
			Select 
				[Guid]
			From
				[Shop]
			Order By
				[Number]
	
			begin Tran Tr1
			Alter Table [Shop] Disable Trigger All
			update 	[Shop]
			Set [Number] = [T].[Id]
			From
				[Shop] [C]
				inner join #T [T] On [T].[Guid] = [C].[Guid]
			Alter Table [Shop] Enable Trigger All
			commit Tran Tr1
	
	end

	-- ãæÇÞÝ
	if @Parking = 1
	begin
			Truncate Table #T
	
			insert into #T
			([Guid])	
			Select 
				[Guid]
			From
				[Parking]
			Order By
				[Number]
	
			begin Tran Tr1
			Alter Table [Parking] Disable Trigger All
			update 	[Parking]
			Set [Number] = [T].[Id]
			From
				[Parking] [C]
				inner join #T [T] On [T].[Guid] = [C].[Guid]
			Alter Table [Parking] Enable Trigger All
			commit Tran Tr1
	
	end


	-- ÃÑÖ
	if @Land = 1
	begin
			Truncate Table #T
	
			insert into #T
			([Guid])	
			Select 
				[Guid]
			From
				[Earth]
			Order By
				[Number]
	
			begin Tran Tr1
			Alter Table [Earth] Disable Trigger All
			update 	[Earth]
			Set [Number] = [T].[Id]
			From
				[Earth] [C]
				inner join #T [T] On [T].[Guid] = [C].[Guid]
			Alter Table [Earth] Enable Trigger All
			commit Tran Tr1
	
	end


	-- ÃÑÖ
	if @Villa = 1
	begin
			Truncate Table #T
	
			insert into #T
			([Guid])	
			Select 
				[Guid]
			From
				[Villa]
			Order By
				[Number]
	
			begin Tran Tr1
			Alter Table [Villa] Disable Trigger All
			update 	[Villa]
			Set [Number] = [T].[Id]
			From
				[Villa] [C]
				inner join #T [T] On [T].[Guid] = [C].[Guid]
			Alter Table [Villa] Enable Trigger All
			commit Tran Tr1
	
	end

	-- ÍÓÇÈÇÊ
	if @Account = 1
	begin
			Truncate Table #T
	
			insert into #T
			([Guid])	
			Select 
				[Guid]
			From
				[Account]
			Order By
				[Code], [Number]
	
			begin Tran Tr1
			Alter Table [Account] Disable Trigger All
			update 	[Account]
			Set [Number] = [T].[Id]
			From
				[Account] [C]
				inner join #T [T] On [T].[Guid] = [C].[Guid]
			Alter Table [Account] Enable Trigger All
			commit Tran Tr1
	
	end

	-- ÍÓÇÈÇÊ
	if @Cust = 1
	begin
			Truncate Table #T
	
			insert into #T
			([Guid])	
			Select 
				[Guid]
			From
				[Customer] 
			Order By
				[Number]
	
			begin Tran Tr1
			Alter Table [Customer]  Disable Trigger All
			update 	[Customer] 
			Set [Number] = [T].[Id]
			From
				[Customer]  [C]
				inner join #T [T] On [T].[Guid] = [C].[Guid]
			Alter Table [Account] Enable Trigger All
			commit Tran Tr1
	
	end
	-- ÃäãÇØ ÝæÇÊíÑ ÇáßåÑÈÇ
	if @ElectricityBillType = 1
	begin
			if IsNull(@FirstElectricityBillTypeNum,0) <= 0
			Set @FirstElectricityBillTypeNum = 1

			DECLARE cursor_Name CURSOR FAST_FORWARD FOR 
			SELECT  [Guid] 
			FROM ElectricityType
			where
				[Guid] = @ElectricityBillTypeGuid or @ElectricityBillTypeGuid = 0x0
			
			OPEN cursor_Name
			FETCH NEXT FROM cursor_Name INTO @TypeGuid
			
			WHILE @@FETCH_STATUS = 0
			BEGIN
				Truncate Table #T
		
				insert into #T
				([Guid])	
				Select 
					[Guid]
				From
					ElectricityBill
				where 
					[TypeGuid] = @TypeGuid
				Order By
					[Number]
		
				begin Tran Tr1
				Alter Table [ElectricityBill] Disable Trigger All
				update 	[ElectricityBill]
				Set [Number] = [T].[Id] + ISNULL(@FirstElectricityBillTypeNum,0) -1
				From
					[ElectricityBill] [C]
					inner join #T [T] On [T].[Guid] = [C].[Guid]
				Alter Table [ElectricityBill] Enable Trigger All
				commit Tran Tr1
		
			  FETCH NEXT FROM cursor_Name INTO @TypeGuid
			END

			CLOSE cursor_Name
			DEALLOCATE cursor_Name
	end


GO
/****** Object:  StoredProcedure [dbo].[PrcRenumberChecks]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcRenumberChecks]
  
as
	
	Create Table #T
	(
		[Id] int Identity(1,1),
		[Guid] Uniqueidentifier
	)
	
	Declare @TypeGuid Uniqueidentifier
	
	Alter Table [Checks] Disable Trigger All
	DECLARE cursor_Name CURSOR FAST_FORWARD FOR 
	SELECT Distinct [TypeGuid] 
	FROM Checks
	
	OPEN cursor_Name
	FETCH NEXT FROM cursor_Name INTO @TypeGuid
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
		Truncate Table #T

		insert into #T
		([Guid])	
		Select 
			[Guid]
		From
			[Checks]
		where 
			[TypeGuid] = @TypeGuid
		Order By
			[Number]

		update 	[Checks]
		Set [Number] = [T].[Id]
		From
			[Checks] [C]
			inner join #T [T] On [T].[Guid] = [C].[Guid]


	  FETCH NEXT FROM cursor_Name INTO @TypeGuid
	
	END
	
	CLOSE cursor_Name
	DEALLOCATE cursor_Name

	Alter Table [Checks] Enable Trigger All



GO
/****** Object:  StoredProcedure [dbo].[PrcRenumberContract]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcRenumberContract]
  
as
	
	Create Table #T
	(
		[Id] int Identity(1,1),
		[Guid] Uniqueidentifier
	)
	
	Declare @TypeGuid Uniqueidentifier

	Alter Table [LeaseApartment] disable Trigger All

	DECLARE cursor_Name CURSOR FAST_FORWARD FOR 
	SELECT Distinct [TypeGuid] 
	FROM LeaseApartment
	
	OPEN cursor_Name
	FETCH NEXT FROM cursor_Name INTO @TypeGuid
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
		Truncate Table #T

		insert into #T
		([Guid])	
		Select 
			[Guid]
		From
			[LeaseApartment]
		where 
			[TypeGuid] = @TypeGuid
		Order By
			[Number], FromDate

		update 	[LeaseApartment]
		Set [Number] = [T].[Id]
		From
			[LeaseApartment] [C]
			inner join #T [T] On [T].[Guid] = [C].[Guid]


	  FETCH NEXT FROM cursor_Name INTO @TypeGuid
	
	END
	
	CLOSE cursor_Name
	DEALLOCATE cursor_Name
	Alter Table [LeaseApartment] Enable Trigger All



	Alter Table [ParkingContract] disable Trigger All

	DECLARE cursor_Name CURSOR FAST_FORWARD FOR 
	SELECT Distinct [TypeGuid] 
	FROM ParkingContract
	
	OPEN cursor_Name
	FETCH NEXT FROM cursor_Name INTO @TypeGuid
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
		Truncate Table #T

		insert into #T
		([Guid])	
		Select 
			[Guid]
		From
			[ParkingContract]
		where 
			[TypeGuid] = @TypeGuid
		Order By
			[Number]

		update 	[ParkingContract]
		Set [Number] = [T].[Id]
		From
			[ParkingContract] [C]
			inner join #T [T] On [T].[Guid] = [C].[Guid]

	  FETCH NEXT FROM cursor_Name INTO @TypeGuid
	
	END
	
	CLOSE cursor_Name
	DEALLOCATE cursor_Name
	Alter Table [ParkingContract] Enable Trigger All


	
	Alter Table [LandContract] disable Trigger All
	
	DECLARE cursor_Name CURSOR FAST_FORWARD FOR 
	SELECT Distinct [TypeGuid] 
	FROM [LandContract]
	
	OPEN cursor_Name
	FETCH NEXT FROM cursor_Name INTO @TypeGuid
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
		Truncate Table #T

		insert into #T
		([Guid])	
		Select 
			[Guid]
		From
			[LandContract]
		where 
			[TypeGuid] = @TypeGuid
		Order By
			[Number]

		
		update 	[LandContract]
		Set [Number] = [T].[Id]
		From
			[LandContract] [C]
			inner join #T [T] On [T].[Guid] = [C].[Guid]

	  FETCH NEXT FROM cursor_Name INTO @TypeGuid
	
	END
	
	CLOSE cursor_Name
	DEALLOCATE cursor_Name
	
	Alter Table [LandContract] Enable Trigger All



GO
/****** Object:  StoredProcedure [dbo].[PrcReNumberHEntry]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[PrcReNumberHEntry]
(
	@FirstEntryNum int = 0
)
  
as
	Create Table #R
	(
		[Id] int identity(1,1),
		[Guid] uniqueidentifier
	)
	
	Insert into #R
	([Guid])
	Select
		[Guid]
	From
		Hentry
	where 
		Number > 1
	Order By
		[Date], [Number]

	Update Hentry
	Set [Number] = [R].[Id] + IsNull(@FirstEntryNum,0) +1 
	From
		[Hentry] [H]
		inner join [#R] [R] on [R].[Guid] = [H].[Guid]


GO
/****** Object:  StoredProcedure [dbo].[PrcRepaireCashPayment]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[PrcRepaireCashPayment]
  
as
	Declare @Guid uniqueidentifier, @ContractGuid uniqueidentifier
	
	DECLARE cursor_Name CURSOR FAST_FORWARD FOR 
	Select 
		S.Guid, S.ContractGuid
	from 
		Secondary_Entry S
		left join [ContractCachPayment] C on C.EntryGuid = S.Guid
		inner join [vwAllContract] A on A.Guid = S.contractGuid
	where 
		(C.EntryGuid is null)
		and S.ContractGuid is Not Null
		and A.Kind = 0
		
	
	
	OPEN cursor_Name
	FETCH NEXT FROM cursor_Name INTO @Guid, @ContractGuid
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
	  exec [PrcCreateEntryFromEntryType] @Guid, @ContractGuid
	  
	  FETCH NEXT FROM cursor_Name INTO @Guid, @ContractGuid
	
	END
	
	CLOSE cursor_Name
	DEALLOCATE cursor_Name
	
	DECLARE cursor_Name CURSOR FAST_FORWARD FOR 
	Select 
		S.Guid, S.ContractGuid
	from 
		Secondary_Entry S
		left join [ContractParkingCachPayment] C on C.EntryGuid = S.Guid
		inner join [vwAllContract] A on A.Guid = S.contractGuid
	where 
		(C.EntryGuid is null)
		and S.ContractGuid is Not Null
		and A.Kind = 1
	
	
	OPEN cursor_Name
	FETCH NEXT FROM cursor_Name INTO @Guid, @ContractGuid
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
	  exec [PrcCreateEntryFromEntryType] @Guid, @ContractGuid
	  
	  FETCH NEXT FROM cursor_Name INTO @Guid, @ContractGuid
	
	END
	
	CLOSE cursor_Name
	DEALLOCATE cursor_Name


	--------------
	DECLARE cursor_Name CURSOR FAST_FORWARD FOR 
	Select 
		S.Guid, S.ContractGuid
	from 
		Secondary_Entry S
		left join [LandContractCachPayment] C on C.EntryGuid = S.Guid
		inner join [vwAllContract] A on A.Guid = S.contractGuid
	where 
		(C.EntryGuid is null)
		and S.ContractGuid is Not Null
		and A.Kind = 2
	
	
	OPEN cursor_Name
	FETCH NEXT FROM cursor_Name INTO @Guid, @ContractGuid
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
	  exec [PrcCreateEntryFromEntryType] @Guid, @ContractGuid
	  
	  FETCH NEXT FROM cursor_Name INTO @Guid, @ContractGuid
	
	END
	
	CLOSE cursor_Name
	DEALLOCATE cursor_Name

	--------------
	DECLARE cursor_Name CURSOR FAST_FORWARD FOR 
	Select 
		S.Guid, S.ContractGuid
	from 
		Secondary_Entry S
		left join [ElectricityCachPayment] C on C.EntryGuid = S.Guid
		inner join [vwAllContract] A on A.Guid = S.contractGuid
	where 
		(C.EntryGuid is null)
		and S.ContractGuid is Not Null
		and A.Kind = -1
	
	
	OPEN cursor_Name
	FETCH NEXT FROM cursor_Name INTO @Guid, @ContractGuid
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
	  exec [PrcCreateEntryFromEntryType] @Guid, @ContractGuid
	  
	  FETCH NEXT FROM cursor_Name INTO @Guid, @ContractGuid
	
	END
	
	CLOSE cursor_Name
	DEALLOCATE cursor_Name
		

GO
/****** Object:  StoredProcedure [dbo].[PrcRepAutoSMS]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcRepAutoSMS]
  
as

	Set NoCount on

	Declare @Day int,
			@AutoSend Bit

	Select 
		@AutoSend  = [AutoSend],
		@Day  = [Day]
	from 
		[SMSSetup]
	where
		[Tag] = 1

	--ÇáÚÞæÏ ÇáÊí ÞÑÈ ÇäÊåÇÄåÇ
	Select 
		[ContractNo],
		[B].[Name] as [BuildingName],
		[B].[ltnName] as [BuildingltnName],
		[B].[ArName] as [BuildingArName],
		Case when Isnull([A].[No], '') <> '' then [A].[No] else [S].[No] end as [No],
		Case when Isnull([A].[No], '') <> '' then dbo.SC('ÔÞÉ') else dbo.SC('ãÍá') end as [FlatKind],
		Case when Isnull([A].[No], '') <> '' then [A].[FloorNo] else Null end as [Floor],
		[cu].[Name] as [CustomerName],
		[cu].[ltnName] as [CustomerltnName],
		[cu].[arName] as [CustomerArName],
		[cu].[Mobile] as [CustomerMobile],
		[FromDate],
		[ToDate],
		DateDiff(Day, GetDate(), [ToDate]) as [Datediff],
		[L].[Rent] - [L].[DiscountValue] as [RentAfterDiscount],
		[SMS3].[Count] as [SMSCount],
		[L].[Guid]
		,1 as [Operation]
	From
		[vbLeaseApartment] [L]
		inner join [vwBuilding] [B] On [L].[BuildingGuid] = [B].[Guid]
		inner join [vwCustomer] [cu] on [cu].[Guid] = [L].[CustomerGuid]  or Cu.InsuranceAccountGuid = L.CustAccountGuid
		left join [vwApartment] [A] On [A].[Guid] = [L].[ApartmentGuid]
		left join [vwShop] [S] On [S].[Guid] = [L].[ApartmentGuid]
		left join [RepSMS] [SMS2] on [SMS2].[ObjGuid] = [L].[Guid] and [SMS2].[IdReport] = 7000
		left join (Select 
						[ObjGuid],
						[IdReport],
						Count(*) as [Count]
					From
						[RepSMSCount] 
					where
						[IdReport] = 7000
					Group By
						[ObjGuid],
						[IdReport]
					)[SMS3] on [SMS3].[ObjGuid] = [L].[Guid]
	where
		(DateDiff(Day, GetDate(), [ToDate]) <= @Day)
		and (DateDiff(Day, GetDate(), [ToDate]) > 0)
		and ([LeaseKind] = 0 or [LeaseKind] = 1)
		and ([Contractfinish] = 0)

		and ([SMS2].[ObjGuid] is Null )

		and (@AutoSend = 1)
	Order By 
		[B].[Name],
		DateDiff(Day, GetDate(), [ToDate]),
		[ContractNo],
		[ToDate]

	Declare @R1 int
	Set @R1 = @@RowCount

	Select 
		@AutoSend  = [AutoSend],
		@Day  = [Day]
	from 
		[SMSSetup]
	where
		[Tag] = 2

	--ÇáÚÞæÏ ãäÊåíÉ ÇáãÏÉ
	Select 
		[ContractNo],
		[B].[Name] as [BuildingName],
		[B].[ltnName] as [BuildingltnName],
		[B].[ArName] as [BuildingArName],
		[cu].[Name] as [CustomerName],
		[cu].[ltnName] as [CustomerltnName],
		[cu].[arName] as [CustomerArName],
		[cu].[PhoneJob], 
		[cu].[Mobile], 
		Case when Isnull([A].[No], '') <> '' then [A].[No] else [S].[No] end as [No],
		Case when Isnull([A].[No], '') <> '' then dbo.SC('ÔÞÉ') else dbo.SC('ãÍá') end as [FlatKind],
		Case when Isnull([A].[No], '') <> '' then [A].[FloorNo] else Null end as [Floor],
		[FromDate],
		[ToDate],
		case when DateDiff(Day,  [ToDate], GetDate()) > 0 then DateDiff(Day,  [ToDate], GetDate()) end as [Datediff],
		[L].[Rent] - [L].[DiscountValue] as [RentAfterDiscount],


		[L].[Guid]
		,[A].[Note] as [FlatNote]
		,[L].[Note2] as [ContractNote]
		,[B].[Emirate] as [Bulding_Emirate]
		,[B].[Area] as [Bulding_Area]
		,[B].[Street] as [Bulding_Street]
		,[B].[BuildingNo] as [Bulding_BuildingNo]
		,[B].[PieceNo] as [Bulding_PieceNo]
		,[B].[BasinNo] as [Bulding_BasinNo]
		,[B].[BondType] as [Bulding_BondType]
		,[B].[BondNo] as [Bulding_BondNo]
		,[B].[BondDate] as [Bulding_BondDate]
		,[SMS3].[Count] as [SMSCount]
		,1 as [Operation]
	From
		[vbLeaseApartment] [L]
		inner join [vwBuilding] [B] On [L].[BuildingGuid] = [B].[Guid]
		inner join [vwCustomer] [cu] on [cu].[Guid] = [L].[CustomerGuid]  or Cu.InsuranceAccountGuid = L.CustAccountGuid
		left join [vwApartment] [A] On [A].[Guid] = [L].[ApartmentGuid]
		left join [vwShop] [S] On [S].[Guid] = [L].[ApartmentGuid]

		left join [RepSMS] [SMS2] on [SMS2].[ObjGuid] = [L].[Guid] and [SMS2].[IdReport] = 9000
		left join (Select 
						[ObjGuid],
						[IdReport],
						Count(*) as [Count]
					From
						[RepSMSCount] 
					where
						[IdReport] = 9000
					Group By
						[ObjGuid],
						[IdReport]
					)[SMS3] on [SMS3].[ObjGuid] = [L].[Guid]
 	where
  		(
  				(DateDiff(Day,  [ToDate], GetDate()) >= @Day)
  		)
		and ([SMS2].[ObjGuid] is Null )
		and (@AutoSend = 1)
		and (l.ContractFinish = 0)
	Order By
		[B].[Name],
		DateDiff(Day,  [ToDate], GetDate())

	Declare @R2 int
	Set @R2 = @@RowCount


	--ÇáÃæÑÇÞ ÇáãÇáíÉ ÇáãÑÊÌÚÉ
	Select 
		P.*
		,Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([T].[SMSCheckReturnMsgEn],'') <> '') then [T].[SMSCheckReturnMsgEn] else [T].[SMSCheckReturnMsg] end as [SMS]
		,[SMS3].[Count] as [SMSCount]
		,1 as [Operation]
	From
		[vwCheckReturn] [P]
		inner join CheckType T on T.Guid = p.TypeGuid
		left join [RepSMS] [SMS2] on [SMS2].[ObjGuid] = [P].[Guid] and [SMS2].[IdReport] = 1200
		left join (Select 
						[ObjGuid],
						[IdReport],
						Count(*) as [Count]
					From
						[RepSMSCount] 
					where
						[IdReport] = 1200
					Group By
						[ObjGuid],
						[IdReport]
					)[SMS3] on [SMS3].[ObjGuid] = [P].[Guid]
 	where
		DateDiff(Day,  [P].[ReturnDate], GetDate()) >= T.[SMSCheckReturnDay]
		and ([SMS2].[ObjGuid] is Null )
		and ([SMSCheckReturnAutoSend] = 1)
 	Order By 
 		[P].[dueDate], [P].[No]

	Declare @R3 int
	Set @R3 = @@RowCount


	--ÇáÃæÑÇÞ ÇáãÇáíÉ ÇáãÍÕáÉ
	Select 
		P.*
		,Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([T].[SMSChecksCollectionMsgEn],'') <> '') then [T].[SMSChecksCollectionMsgEn] else [T].[SMSChecksCollectionMsg] end as [SMS]
		,[SMS3].[Count] as [SMSCount]
		,1 as [Operation]
	From
		[vwCheckCollection] [P]
		inner join CheckType T on T.Guid = p.TypeGuid
		left join [RepSMS] [SMS2] on [SMS2].[ObjGuid] = [P].[Guid] and [SMS2].[IdReport] = 1300
		left join (Select 
						[ObjGuid],
						[IdReport],
						Count(*) as [Count]
					From
						[RepSMSCount] 
					where
						[IdReport] = 1300
					Group By
						[ObjGuid],
						[IdReport]
					)[SMS3] on [SMS3].[ObjGuid] = [P].[Guid]
  	where
 		DateDiff(Day,  [P].[CollectionDate], GetDate()) >= [SMSChecksCollectionDay]
		and ([SMS2].[ObjGuid] is Null )
		and ([SMSChecksCollectionAutoSend] = 1)
 	Order By 
 		[P].[dueDate], [P].[No]

	Declare @R4 int
	Set @R4 = @@RowCount


	-- ÇáÃæÑÇÞ ÇáãÇáíÉ ÇáãÓÊÍÞÉ
	Select
		[v].[Guid], 
		[v].[TypeName],
		[Cu].[Name] as [CustName],
		[Cu].[ArName] as [CustArName],
		[Cu].[LtnName] as [CustLtnName]
		,[Cu].[Mobile] as [CustomerMobile],
		[v].[No],
		[v].[Value],
		[v].[CurrencyCode],
		[v].[CurrencyVal],
		[v].[Date],
		[v].[dueDate],
		[v].[BankName]	

		,[L].[ContractNo]
		,[L].[BuildingName]
		,[L].[FlatNo]
		,[L].[FloorNo]
		,[L].[BuildingArName],
		[L].[BuildingLtnName]
		,Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([T].[SMSChecksDueMsgEn],'') <> '') then [T].[SMSChecksDueMsgEn] else [T].[SMSChecksDueMsg] end as [SMS]
		,[SMS3].[Count] as [SMSCount]
		,1 as [Operation]
	From
		[vwChecks] [v]
		inner join CheckType T on T.Guid = V.TypeGuid
		left join [vwChecksCollection] [C] on [C].[CheckGuid] = [V].[Guid] --and [C].[Kind] = 1
		left join (
						Select 
							[CheckGuid],
							Sum([Value]) as [Value] 
						From
							[ChecksPartialCollection] 
						Group By
							[CheckGuid]
					) [C4] on [C4].[CheckGuid] = [V].[Guid]

		left join [vwLeaseApartment] [L] on [L].[Guid] = [V].[ContractGuid]
		Inner Join [vwAccount] [Ac] On [V].[Account] = [Ac].[Guid]

		left join [vwCustomer] [Cu] on [Cu].[AcGuid] = [V].[Account] or Cu.InsuranceAccountGuid = V.Account

		left join [RepSMS] [SMS2] on [SMS2].[ObjGuid] = [V].[Guid] and [SMS2].[IdReport] = 1400
		left join (Select 
						[ObjGuid],
						[IdReport],
						Count(*) as [Count]
					From
						[RepSMSCount] 
					where
						[IdReport] = 1400
					Group By
						[ObjGuid],
						[IdReport]
					)[SMS3] on [SMS3].[ObjGuid] = [V].[Guid]
	where
		(
			[v].[DueDate] <= DateAdd(d, [SMSChecksDueDay], GetDate())
		)
		and (([C].[CheckGuid] Is null) and ([C4].[CheckGuid] is Null or [C4].[Value] < [V].[Value] ))
		and (
				(IsNull([V].[NoneDueDate],1) = 0)
				or [v].[DueDate] = 0
			)

		and ([SMS2].[ObjGuid] is Null )
		and ([SMSChecksDue] = 1)
	Order By 
		[v].[DueDate] 

	Declare @R5 int
	Set @R5 = @@RowCount


	Select @R1 as [R1], @R2 as [R2], @R3 as [R3], @R4 as [R4], @R5 as [R5]



GO
/****** Object:  StoredProcedure [dbo].[prcRun]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Proc [dbo].[prcRun]
(
	@Note Varchar(256)
)
  
as
	Insert into PRun
	([Note])
	Select
		@Note

GO
/****** Object:  StoredProcedure [dbo].[PrcSaveRepCheck]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcSaveRepCheck]
(
	@ObjGuid uniqueidentifier = '{50C88966-2CE3-4E9B-9A8C-FF7A9BB8DADC}',
	@UserGuid uniqueidentifier = 'BA39109E-54EA-479F-9C3F-5856C14842C7',
	@IsCheck bit = 0,
	@RepId int = 3000
)
  
as
	Delete [RepCheck]
	where
		[ObjGuid] = @ObjGuid
		and [IdReport] = @RepId
		--and [UserGuid] = @UserGuid

	if @IsCheck = 1
	begin
		insert into [RepCheck]
		(
			[ObjGuid],
			[UserGuid],
			[IdReport],
			[date]
		)
		Select
			@ObjGuid,
			@UserGuid,
			@RepId,
			GetDate()
	end


GO
/****** Object:  StoredProcedure [dbo].[PrcSaveRepCheckCount]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcSaveRepCheckCount]
(
	@ObjGuid uniqueidentifier = '40C85B71-F3C0-46AA-9303-8C3FA449073F',
	@UserGuid uniqueidentifier = '0F15DFA3-0F8C-4A56-A831-21BB87498F07',
	@IsCheck bit = 1,
	@RepId int = 3000
)
  
as
	if @IsCheck = 1
	begin
		insert into [RepCheckCount]
		(
			[ObjGuid],
			[UserGuid],
			[IdReport],
			[date]
		)
		Select
			@ObjGuid,
			@UserGuid,
			@RepId,
			GetDate()
	end


GO
/****** Object:  StoredProcedure [dbo].[PrcSaveRepSMS]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcSaveRepSMS]
(
	@ObjGuid uniqueidentifier = '40C85B71-F3C0-46AA-9303-8C3FA449073F',
	@UserGuid uniqueidentifier = '0F15DFA3-0F8C-4A56-A831-21BB87498F07',
	@IsCheck bit = 1,
	@RepId int = 3000
)
  
as
	Delete [RepSMS]
	where
		[ObjGuid] = @ObjGuid
		and [IdReport] = @RepId
		and [UserGuid] = @UserGuid

	if @IsCheck = 1
	begin
		insert into [RepSMS]
		(
			[ObjGuid],
			[UserGuid],
			[IdReport],
			[date]
		)
		Select
			@ObjGuid,
			@UserGuid,
			@RepId,
			GetDate()
	end


GO
/****** Object:  StoredProcedure [dbo].[PrcSaveRepSMSCount]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcSaveRepSMSCount]
(
	@ObjGuid uniqueidentifier = '40C85B71-F3C0-46AA-9303-8C3FA449073F',
	@UserGuid uniqueidentifier = '0F15DFA3-0F8C-4A56-A831-21BB87498F07',
	@IsCheck bit = 1,
	@RepId int = 3000
)
  
as
	if @IsCheck = 1
	begin
		insert into [RepSMSCount]
		(
			[ObjGuid],
			[UserGuid],
			[IdReport],
			[date]
		)
		Select
			@ObjGuid,
			@UserGuid,
			@RepId,
			GetDate()
	end


GO
/****** Object:  StoredProcedure [dbo].[PrcSelect]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[PrcSelect]
(
	@TableName Varchar(256) = ''
)
  
as
	if @TableName = ''
	return

	Declare @S Varchar(256)
	Set @S = '
	Select 
		* 
	from 
		 '+@TableName

	Exec (@S)
		

GO
/****** Object:  StoredProcedure [dbo].[PrcServicesContractList]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcServicesContractList]
(
	@CustGuid uniqueidentifier = 0x0
	,@Emirate Varchar(256) = ''
	,@Suburb Varchar(256) = ''
	,@Area Varchar(256) = ''
	,@Street Varchar(256) = ''
	,@ContractState int = 1
	,@PayType int = 4
	,@Datewith int = 0
	,@Date1 DateTime = '12/30/1899'
	,@Date2 DateTime = '12/30/2016'
	,@ShowIsCheck Bit = 1
	,@ShowIsNotCheck Bit = 1
	,@CKDate Bit = 0
	,@EndState int = 2
	,@NewState int = 2
	,@Mark Bit = 1
	,@NotMark Bit = 1
	,@AcquittancePrinted int = 2
	,@AcquittancePrintedByUserGuid uniqueidentifier = 0x0
	,@LinkCheck int = 2
	,@whereabouts varchar(255) = ''
	,@Trademark varchar(255) = ''
	,@FinishDate int = 3
	,@ContractValue int = 2
)
  
as
	Set noCount on

	Declare @Msg varchar(255),
			@MsgConst varchar(255)
	Set @MsgConst = dbo.SC('ßÔÝ ÚÞæÏ ÇáÎÏãÇÊ')
			
	Set @Msg = @MsgConst
	exec PrcSetProgrss @Msg, 100, 0

	Declare @Tbl Table
	(
		[ContractNo] Varchar(256)
		,[BuildingName] Varchar(256)
		,[Value] Float
		,[Discount] Float
		,[ValueAfterDiscount] Float
		,[ContractState] Varchar(256)
		,[Emirate] Varchar(256)
		,[Suburb] Varchar(256)
		,[Area] Varchar(256)
		,[Street] Varchar(256)
		,[CustName] Varchar(256)
		,[CustPhone] Varchar(256)
		,[CustNationality] Varchar(256)
		,[CustEMail] Varchar(256)
		,[ContractDateEdit] Datetime
		,[ContractDateBegin] Datetime
		,[ContractDateEnd] Datetime
		,[ServicesContractType] Varchar(256)
		,[ContractFinish] Bit
		,[ContractGuid] uniqueidentifier
		,[NewState] int

		,[ContractFinishDate] Datetime
		,[ResultingAmount] Float
		,[ResultingAmount2] Float
		,[Note2] Varchar(1000)
		,[Purpose] Varchar(256)
		,Trademark Varchar(256)
		
		,[CountOldContract] int
		
		,[AcquittancePrinted] Bit
		,[AcquittancePrintdate] Datetime
		,[AcquittancePrintedBy] Varchar(256)
		,[CostGuid] uniqueidentifier
		,[AccountGuid] uniqueidentifier
		,[Mark] Bit

		--,[PrvContractFinishDate] Datetime
		--,[PrvContractEndDate] Datetime

		,[Kind] Int
		,[Sort] int
	)

	Declare  @Now_Date Datetime
	Set @Now_Date = GetDate()
	

	Set @Msg = @MsgConst
	exec PrcSetProgrss @Msg, 100, 5
	
	--Building
	Select
		*
	Into #Building_CL
	From
		[vwBuilding] B
	where
		([B].[Emirate] = @Emirate or @Emirate = '')
		and ([B].[Suburb] = @Suburb or @Suburb = '')
		and ([B].[Area] = @Area or @Area = '')
		and ([B].[Street] = @Street or @Street = '')
		
	Set @Msg = @MsgConst
	exec PrcSetProgrss @Msg, 100, 7
		

	--Select * from #Building_CL
		
	
	Select
		L.*
		--,(Select [ContractFinishDate] from [ServicesContract] where Guid = L.[PrvContractGuid]) as [PrvContractFinishDate]
		--,(Select [ToDate] from [ServicesContract] where Guid = L.[PrvContractGuid]) as [PrvContractEndDate]
		,T.Name as ContractName
		,U.LoginName as [AcquittancePrintedBy]
	into #ServicesContract_CL
	From
		[ServicesContract] L
		inner join ServicesContractType T on T.Guid = L.TypeGuid
		inner join [Resource] [R2] on [R2].[Guid] = [L].[TypeGuid]  and [R2].[Kind] = 100 and [R2].[spid] = @@Spid 
		left join [Realty_Users] U on U.[Guid] = L.AcquittancePrintedByGuid
	where
		([L].[CustomerGuid] = @CustGuid or @CustGuid = 0x0)
		and ([L].[ContractFinish] = @EndState or @EndState = 2)
		and (
				([l].[Mark] = 1 and @Mark = 1)
				or ([l].[Mark] = 0 and @NotMark = 1)
			)
		and (L.PayType = @PayType or @PayType  = 4)
		and (L.Trademark = @Trademark or @Trademark = '')
		and (L.AcquittancePrintedByGuid = @AcquittancePrintedByUserGuid or @AcquittancePrintedByUserGuid = 0x0)
		
		and (L.whereabouts = @whereabouts or @whereabouts = '')
		and (
				(
					(
					([ContractFinishDate] < [ToDate] and @FinishDate = 0) or
					([ContractFinishDate] > [ToDate] and @FinishDate = 1) or
					([ContractFinishDate] = [ToDate] and @FinishDate = 2) 
					)
				and [ContractFinish] = 1
				)
				or @FinishDate = 3
			)
		and (
				(([L].Rent - [L].DiscountValue) <> 0 and @ContractValue = 0) or
				(([L].Rent - [L].DiscountValue) = 0 and @ContractValue = 1) or
				@ContractValue = 2
			)
	
		and	(
				((([L].[ToDate] <= @Now_Date) or ([L].[ContractFinish] = 1)) and @ContractState = 0)
			  	or ([L].[ToDate] > @Now_Date and @ContractState = 1)
				or @ContractState = 2
			)		
			and (
				(
					([L].[FromDate] >= @Date1 and @Datewith  = 0)
					and ([L].[FromDate] <= @Date2 and @Datewith  = 0 or @Date2 = '12/30/1899')
				)
				or
				(
					([L].[ToDate] >= @Date1 and @Datewith  = 1)
					and ([L].[ToDate] <= @Date2 and @Datewith  = 1 or @Date2 = '12/30/1899')
				)

				or
				(
					([L].[ContractFinishDate] >= @Date1 and @Datewith  = 2)
					and ([L].[ContractFinishDate] <= @Date2 and @Datewith  = 2 or @Date2 = '12/30/1899')
					and ([L].[ContractFinish] = 1)
				)

				or
				(
					([L].[EditDate] >= @Date1 and @Datewith  = 3)
					and ([L].[EditDate] <= @Date2 and @Datewith  = 3 or @Date2 = '12/30/1899')
				)
				or
				(
					([L].[AcquittancePrintdate] >= @Date1 and @Datewith  = 4)
					and ([L].[AcquittancePrintdate] <= @Date2 and @Datewith  = 4 or @Date2 = '12/30/1899')
				)

				or @CKDate = 0
			) 
		and (L.AcquittancePrinted = @AcquittancePrinted or @AcquittancePrinted = 2)			

	Set @Msg = @MsgConst
	exec PrcSetProgrss @Msg, 100, 12

	
	--Customer 
	Select
		*
	into #Customer
	From
		vwCustomer
	where
		([Guid] = @CustGuid or @CustGuid = 0x0)
		
    
	Insert into @Tbl 
	Select 
		[L].[ContractNo]
		,[B].[Name] as [BuildingName]
		,[L].[Rent]
		,[L].[DiscountValue]
		,[L].[Rent] - [L].[DiscountValue]
		,Case when ([L].[ToDate] <= @Now_Date) or ([L].[ContractFinish] = 1) then dbo.sc('ãäÊåí ÇáãÏÉ')  
			  when [L].[ToDate] > @Now_Date then dbo.sc('ÛíÑ ãäÊåí ÇáãÏÉ') end as [ContractState]
		,[B].[Emirate] as [Emirate]
		,[B].[Suburb] as [Suburb]
		,[B].[Area] as [Area]
		,[B].[Street] as [Street]
		,[Cu].[Name] as [CustName]
		,[Cu].[Mobile] as [CustPhone]
		,[Cu].Nationality
		,Cu.EMail as CustEMail
		,[L].[EditDate] as [ContractDateEdit]
		,[L].[FromDate] as [ContractDateBegin]
		,[L].[ToDate] as [ContractDateEnd]
		,[L].[ContractName]
		,[L].[ContractFinish]
		,[L].[Guid] as [ContractGuid]
		,[L].[NewState] 

		,[ContractFinishDate]
		,[ResultingAmount]
		,[ResultingAmount2]
		,[Note2] 
		,L.[Purpose]
		,L.Trademark
		,l.[CountOldContract]
		,l.AcquittancePrinted
		,L.AcquittancePrintDate
		,L.[AcquittancePrintedBy]
		,[L].[CostGuid]
		,L.[CustAccountGuid]
		,[L].[Mark]

		--,[PrvContractFinishDate]
		--,[PrvContractEndDate]

		,0 as [Kind]
		,0 as [Sort]
	from 
		#Building_CL [B]
		Inner join #ServicesContract_CL [L] On [B].[Guid] = [L].[BuildingGuid] 
		inner join [Resource] [R] on [R].[Guid] = [B].[Guid]  and [R].[Kind] = 101 and [R].[spid] = @@Spid 
		Inner join [#Customer] [Cu] on [Cu].[Guid] = [L].[CustomerGuid] 
		


	Set @Msg = @MsgConst +' '+ dbo.SC('ÇáÃÞÓÇØ')
	exec PrcSetProgrss @Msg, 100, 60

	Declare @PCheck Bit 
	Set @PCheck = 1	
	Declare @PNotCheck Bit 
	Set @PNotCheck = 0

	if @LinkCheck = 0 -- ÈÏæä ÇÞÓÇØ
	Delete @Tbl
	From
		@Tbl T
		inner join [Checks] C on C.ContractGuid = T.ContractGuid
	
	if @LinkCheck = 1 -- áåÇ ÇÞÓÇØ
	Delete @Tbl
	From
		@Tbl T
		left join [Checks] C on C.ContractGuid = T.ContractGuid
	where
		C.Guid is Null
		
	Set @Msg = @MsgConst +' '+ dbo.SC('ÇáÃæÑÇÞ ÇáãÇáíÉ')
	exec PrcSetProgrss @Msg, 100, 70

	-- ÇáÔíßÇÊ
	Create Table #Collection_CL
	(
		[ContractGuid] uniqueidentifier,
		[Total] Float,
		[Collection] Float
	)
	
	Select
		p.Guid as [CheckGuid],
		[P].[ContractGuid],
		IsNull([P].[Value] * [P].[CurrencyVal],0) as [checkValue]
	into #Collection_Contract_Checks
	From
		[vbChecks] [P]
		inner join @Tbl [t] on [t].[ContractGuid] = [P].[ContractGuid]

	Select
		[CC].[ContractGuid],
		Sum(IsNull([C1].[Value] * [C1].[CurrencyVal],0)) as [Collection]
	Into #Collection_Sum_CL
	From
		#Collection_Contract_Checks CC
		inner join [ChecksCollection] [C1] on [C1].[CheckGuid] = [CC].[CheckGuid] and [C1].[Kind] = 1
	Group By
		[CC].[ContractGuid]
		
	insert into #Collection_CL
	([ContractGuid] ,[Total],[Collection])
	Select
		[ContractGuid],
		Sum(IsNull([CC].[checkValue],0)) as [Total],
		0
	From
		#Collection_Contract_Checks CC
	Group by
		[ContractGuid]
		
	update #Collection_CL Set [Collection] = S.[Collection]
	From
		#Collection_CL C
		inner join #Collection_Sum_CL S on C.ContractGuid = S.ContractGuid

	Set @Msg = @MsgConst +' '+ dbo.SC('ÇáÏÝÚÇÊ ÇáäÞÏíÉ')
	exec PrcSetProgrss @Msg, 100, 75

	-- ÇáÊÞÏí
	Select
		[P].[ContractGuid],
		Sum(IsNull([P].[Value] * [P].[CurrencyVal],0)) as [Cash]
	Into #Cash
	From
		[vwContractCachPayment] [P]
		inner join @Tbl [t] on [t].[ContractGuid] = [P].[ContractGuid] and P.AcGuid = t.AccountGuid
	Group By
		[P].[ContractGuid]	

	Set @Msg = @MsgConst +' '+ dbo.SC('ÃÑÕÏÉ ÇáÒÈÇÆä')
	exec PrcSetProgrss @Msg, 100, 80

	Select
		En.AcGuid,
		SUM(En.debit - en.Credit) as [Balance]
	into #CustBalance
	From
		(Select distinct AccountGuid from @Tbl ) T
		inner join DEntry En on En.AcGuid = T.AccountGuid
	Group By
		En.AcGuid

	
	
	Set @Msg = ''
	exec PrcSetProgrss @Msg, 100, 90

	Select 
		[E].*,
		
		Case when isnUll([ContractFinish],0) = 0 then dbo.sc('áÇ') else dbo.sc('äÚã') end As [ContractFinishStr],
		Case when isnUll([NewState],0) = 0 then dbo.sc('ÌÏíÏ') 
			 when isnUll([NewState],0) = 1 then dbo.sc('ÊÌÏíÏ') 
		else 
			''
		end As [NewStateStr],
		
		
		isNull([C].[Collection],0) as [Collection],
		isNull([C].[Total],0) - isNull([C].[Collection],0) as [CheckNotCollection],
		isNull([h].[Cash],0) as [Cash],
		IsNull([C].[Collection],0) + IsNull([h].[Cash],0) as [TotalPays],
		isNull(E.ValueAfterDiscount ,0) - IsNull([C].[Collection],0) - IsNull([h].[Cash],0) as [ContractRest],
		CAST(0 as Float) as [CustBalance],
				
		Case when [R].[ObjGuid] is null then @PNotCheck
			 when [R].[ObjGuid] is not null  then @PCheck end as [Check],
		1 as [DoOperation]
	into #ServicesContractList_4
	From
		@Tbl [E]
		left join #Collection_CL [C] on [E].[ContractGuid] = [C].[ContractGuid]
		left join #Cash [h] on [E].[ContractGuid] = [h].[ContractGuid]
		left join [RepCheck] [R] on [R].[ObjGuid] = [E].[ContractGuid] and [R].[IdReport] = 2000
	where
		(
			([R].[ObjGuid] is not null and @ShowIsCheck = 1)
			or
			([R].[ObjGuid] is null and @ShowIsNotCheck = 1)
		)
		and (Isnull([E].[NewState],0) = @NewState or @NewState = 2)
		
	Set @Msg = ''
	exec PrcSetProgrss @Msg, 100, 95
	
	update	
		#ServicesContractList_4
	set
		custBalance = C.Balance
	From
		#ServicesContractList_4 E
		inner join #CustBalance C on C.AcGuid = E.AccountGuid 
	
	Set @Msg = ''
	exec PrcSetProgrss @Msg, 0, 0
	
	Select
		*
	from
		#ServicesContractList_4
	Order By 
		[Sort],
		[BuildingName]
		
	
	Select
		SUM(Value) as [Value],
		SUM(ValueAfterDiscount) as ValueAfterDiscount,
		SUM(ResultingAmount) as ResultingAmount
	From
		#ServicesContractList_4
	where
		[Sort] = 0
		

GO
/****** Object:  StoredProcedure [dbo].[PrcSetConText]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create Procedure [dbo].[PrcSetConText]
(
	@msg Varchar(255) = '150'
)
as
	declare @b varbinary(1000) 

	set @b = CAST(@msg as varbinary(1000) )
	set context_info  @b
	
	--return

		
	Select 
		spid, cast(context_info as varchar(100)) as Value
	from 
		master.dbo.sysprocesses 
	where 
		cast(context_info as varchar(100)) <> ''
		--spid = @@SPID
	

GO
/****** Object:  StoredProcedure [dbo].[PrcSetCurrentAssetsArea]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcSetCurrentAssetsArea]
(
	@AssetsGuid uniqueidentifier = 'F8453488-FA93-4D8A-A581-5A63BB953A08'
)
  
as
	Declare @AssetsAreaGuid uniqueidentifier
	Select Top 1 
		@AssetsAreaGuid = [AreaGuid]
	From 
		[AssetsChangeArea]
	where
		[AssetsGuid] = @AssetsGuid
	Order By
		DATE desc, Number Desc
	
	if ISNULL(@AssetsAreaGuid, 0x0) = 0x0
	Set @AssetsAreaGuid = (Select [AssetsAreaGuid] from Assets where Guid = @AssetsGuid)
	
	Update Assets set [CurrentAssetsAreaGuid] = @AssetsAreaGuid where Guid = @AssetsGuid
	
	

GO
/****** Object:  StoredProcedure [dbo].[PrcSetElectricityBillIsCollect]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcSetElectricityBillIsCollect]
(
	@ElectricityBillGuid uniqueidentifier = 'AE70120A-C611-4083-8150-BFECAAF7B6A7'
)
 
as
	Declare @ContractGuid uniqueidentifier
	 
	Select @ContractGuid = ContractGuid  From [ElectricityBill] 
	where
		Guid = @ElectricityBillGuid  
	
	Create Table #ElectricityBill
	(
		[Id] int identity(1,1),
		[Guid] uniqueidentifier,
		[TotalValue] Float,
		[Balance] Float
	)
	
	insert into #ElectricityBill
	([Guid], [TotalValue])
	Select [Guid],[TotalValue] - ISNULL(Overdue,0)  From [ElectricityBill]
	where
		ContractGuid = @ContractGuid
	order by
		Date, Number
		
	--Select * from #ElectricityBill
		
	Create Table #ElectricityPay1
	(
		Number int, 
		[Date] datetime,
		[Value] Float
	)
	
	--ÓäÏÇÊ ÞÈÖ
	insert into #ElectricityPay1
	([Number], [Date], [Value])
	Select 
		S.Number, S.Date, [D].[Credit] - [D].[Debit] as [Value]
	from 
		Secondary_Entry S
		inner join Secondary_EntryDetail D on D.ParentGuid = S.Guid
		inner join [ElectricityBill] E on S.ContractGuid = E.Guid
	where 
		E.ContractGuid = @ContractGuid
		

	--ÔíßÇÊ
	insert into #ElectricityPay1
	([Number], [Date], [Value])
	Select 
		S.Number, S.Date, LL.[Value]
	from 
		Checks S
		inner join [LinkCheckContract] LL on LL.ParentGuid = S.Guid
		inner join [ElectricityBill] E on LL.ContractGuid = E.Guid
	where 
		E.ContractGuid = @ContractGuid
		
	--Select * from #ElectricityPay1
	
	Create Table #ElectricityPay
	(
		[Id] int identity(1,1),
		[Value] Float,
		[Balance] Float
	)
	
	insert into #ElectricityPay
	([Value])
	Select Value from #ElectricityPay1
	Order By
		DATE, Number

	
	update #ElectricityBill Set Balance = [RunTotal]
	From
		#ElectricityBill E
		inner join (
					Select 
						E.Id,
						(SELECT SUM(TotalValue) FROM #ElectricityBill D WHERE D.id <= E.id) AS [RunTotal]
					from 
						#ElectricityBill E
		) R on R.Id = E.Id

	update #ElectricityPay Set Balance = [RunTotal]
	From
		#ElectricityPay E
		inner join (
					Select 
						E.Id,
						(SELECT SUM(Value) FROM #ElectricityPay D WHERE D.id <= E.id) AS [RunTotal]
					from 
						#ElectricityPay E
		) R on R.Id = E.Id
		

	--Select * from #ElectricityBill
	
	Update ElectricityBill Set IsCollect = 0
	from
		ElectricityBill B
		inner join #ElectricityBill E on E.Guid = B.Guid
		

	--SELECT 
	--	Id, Balance
	--FROM #ElectricityPay order by id
	
	

	Declare @Id int,
			@Balance Float
	DECLARE @cursor_Name CURSOR 
	Set @cursor_Name = CURSOR FAST_FORWARD FOR 

	SELECT 
		Id, Balance
	FROM #ElectricityPay order by id
	
	OPEN @cursor_Name
	FETCH NEXT FROM @cursor_Name INTO @id, @Balance
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
		
		--Select @Balance as bbb, IsCollect , * 
		--from
		--	ElectricityBill B
		--	inner join #ElectricityBill E on E.Guid = B.Guid
		--where
		--	E.Balance <= @Balance

		Update ElectricityBill Set IsCollect = 1
		from
			ElectricityBill B
			inner join #ElectricityBill E on E.Guid = B.Guid
		where
			E.Balance <= @Balance
	  
	  FETCH NEXT FROM @cursor_Name INTO @id, @Balance
	END
	
	CLOSE @cursor_Name
	DEALLOCATE @cursor_Name
	
	
	Select 
		IsCollect, B.TotalValue, B.Number, E.Balance 
	from 
		#ElectricityBill E
		inner join 	ElectricityBill B on B.Guid = E.Guid
	
	Select * from #ElectricityPay
	

	

GO
/****** Object:  StoredProcedure [dbo].[PrcSetFlatLastContract]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcSetFlatLastContract]
(
	@FlatGuid uniqueidentifier = 0x0
)
  
as
	update Apartment
	Set
		[LastContractGuid] = S.Guid
	from
		Apartment P
		inner join (
  						Select
							[C].[Guid],
  							[C].[ApartmentGuid]
  						From
  							[LeaseApartment]  [C]
  						where
  							[FromDate] = 
 							(
 								Select 
 									Max([FromDate]) 
 								From 
 									[LeaseApartment] [C2] 
 								where 
 									[C].[ApartmentGuid] = [C2].[ApartmentGuid]
 							)
					) S on S.[ApartmentGuid] = p.Guid
	where
		P.Guid = @FlatGuid or @FlatGuid = 0x0
			

GO
/****** Object:  StoredProcedure [dbo].[PrcSetHijriConfig]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[PrcSetHijriConfig]
(
	@HYear int = 1436
)
  
as
	if exists(Select * from HjrConfig where hjryear = @HYear) return
	--return
	
	
	
	Declare @Date Datetime
	Set @Date = dbo.fnHijriStrtoGergDate(Cast(@HYear as Varchar(4))+'/1/1','yyyy/mm/dd')
	Declare @S Varchar(256)

	Declare @Hy int
	Declare @Hm int
	Declare @Hd int

	Set @S = Convert(Varchar(256), @Date , 131)

	Set @Hy = SUBSTRING (@S, 7, 4)
		
	Declare @iM int, @iD int, @MXD int
	Set @Im = 1
	while @iM <= 12
	begin
		Set @iD = 1
		Set @MXD = 1
		while @iD <= 30
		begin
			Set @S = Convert(Varchar(256), dbo.fnDecodeHijriDatetoGergDate(@HY, @iM, @iD) , 131)
		
			Set @Hy = SUBSTRING (@S, 7, 4)
			Set @Hm = SUBSTRING (@S, 4, 2)
			Set @Hd = SUBSTRING (@S, 1, 2)

			Set @hd = Replace(@hd,' ','0')
			Set @hm = dbo.FnFormatNumber(@hm, 2)
			Set @hd = dbo.FnFormatNumber(@hd, 2)
			
			if @MXD < @hd
			Set @MXD = @hd			
			--Select @Im, @Id, @Hy, @Hm, @Hd

			Set @iD = @iD + 1
		end
		
		insert into HjrConfig
		Select
			@HYear, @iM, dbo.fnDecodeHijriDatetoGergDate(@HY, @iM, 1), @MXD
			
		Set @iM = @iM + 1
	end

	
	Select * from HjrConfig where hjryear = @HYear

GO
/****** Object:  StoredProcedure [dbo].[PrcSetLastContractFlatRentPrice]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcSetLastContractFlatRentPrice]
(
	@DateKind int = 0
)
  
as
	--ÂÎÑ ÚÞÏ
	Select 
		[ApartmentGuid],
		MAX(
			Case when @DateKind = 0 then FromDate
				 when @DateKind = 1 then ToDate
				 when @DateKind = 2 then editDate
			end
			) as Date
	into #LastContract
	From	
		[LeaseApartment] L
		inner join [ContractType] T on T.Guid = l.TypeGuid
		inner join [Resource] R on r.Guid = L.BuildingGuid and R.Kind = 99 
	where
		T.ContractKind = 0
	Group By
		[ApartmentGuid]
		
	
	insert into [ChangeFlatRent]
	([Number],[ParentGuid],[Date],[Price],[CurrencyGuid])
	Select
		(Select isNull(MAX(Number),0) + 1 From [ChangeFlatRent] where ParentGuid = L.ApartmentGuid),
		L.ApartmentGuid,
		C.Date,
		L.Rent,
		L.CurrencyGuid
	From
		[LeaseApartment] L
		inner join #LastContract C on L.ApartmentGuid = C.ApartmentGuid	 and 
		Case when @DateKind = 0 then L.FromDate
				 when @DateKind = 1 then L.ToDate
				 when @DateKind = 2 then L.editDate
		end 
		= C.Date
		
		left join [ChangeFlatRent] R on R.ParentGuid = l.ApartmentGuid and 
										R.Price = L.Rent and 
										L.CurrencyGuid = R.CurrencyGuid and 
										R.Date = C.Date
		
	where
		R.ParentGuid is Null

	Select @@ROWCOUNT as RC
	
	exec PrcSetLastFlatRentPrice 0x0
	

GO
/****** Object:  StoredProcedure [dbo].[PrcSetLastFlatRentPrice]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[PrcSetLastFlatRentPrice]
(
	@ParentGuid uniqueidentifier = 0x0
)
  
as
	Select 
		[C].[ParentGuid],
		[Price] as [Rent],
		[CurrencyGuid] as [RentCurrencyGuid]
	into #ChangeFlatRent
	From
		[ChangeFlatRent] [C]
		inner join (
						Select 
								[ParentGuid],
								Max(Date) as [MaxDate],
								Max([Number]) as [MaxNumber]
						From
							[ChangeFlatRent]
						where
							ParentGuid = @ParentGuid or @ParentGuid = 0x0
						Group By
							[ParentGuid]
					) [C2] on [C2].[ParentGuid] = [C].[ParentGuid] 
							and [C].[Date] = [C2].[MaxDate] 
							and (Case when [C].[Date] = [C2].[MaxDate] then [MaxNumber] else [C].[Number] end = [C].[Number])
	where
		C.ParentGuid = @ParentGuid or @ParentGuid = 0x0
		
	update Apartment 
	Set 
		Rent = C.Rent,
		RentCurrencyGuid = C.RentCurrencyGuid
	From
		 Apartment a
		 inner join #ChangeFlatRent C on C.ParentGuid = a.Guid

GO
/****** Object:  StoredProcedure [dbo].[PrcSetLastLandRentPrice]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[PrcSetLastLandRentPrice]
(
	@ParentGuid uniqueidentifier = 0x0
)
  
as
	Select 
		[C].[ParentGuid],
		[Price] as [Rent],
		[CurrencyGuid] as [RentCurrencyGuid]
	into #ChangeLandRent
	From
		[ChangeLandRent] [C]
		inner join (
						Select 
								[ParentGuid],
								Max(Date) as [MaxDate],
								Max([Number]) as [MaxNumber]
						From
							[ChangeLandRent]
						where
							ParentGuid = @ParentGuid or @ParentGuid = 0x0
						Group By
							[ParentGuid]
					) [C2] on [C2].[ParentGuid] = [C].[ParentGuid] 
							and [C].[Date] = [C2].[MaxDate] 
							and (Case when [C].[Date] = [C2].[MaxDate] then [MaxNumber] else [C].[Number] end = [C].[Number])
	where
		C.ParentGuid = @ParentGuid or @ParentGuid = 0x0
		
	update Earth  
	Set 
		Rent = C.Rent,
		RentCurrencyGuid = C.RentCurrencyGuid
	From
		 Earth a
		 inner join #ChangeLandRent C on C.ParentGuid = a.Guid

GO
/****** Object:  StoredProcedure [dbo].[PrcSetMatDescriptionPriceFromTmp]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcSetMatDescriptionPriceFromTmp]
(
	@MatCode varchar(255) = '101'
)
  
as
	Declare @MatGuid uniqueidentifier
	Set @MatGuid = (Select Guid From Mat where Code = @MatCode)
	
	Delete [MatUnitsPrice] where MatGuid = @MatGuid
	
	insert into [MatUnitsPrice]
	([Number],[MatGuid],[PriceKind],[Price1],[Price2],[Price3])
	Select 
		G.Number,
		@MatGuid,
		[G].[Name] AS [PriceKind],
		Case 
			when G.Number = 1 then ( Select Top 1 Price11 From [ImportMatTmp] where Code = @MatCode order by id) 
			when G.Number = 2 then ( Select Top 1 Price12 From [ImportMatTmp] where Code = @MatCode order by id) 
			when G.Number = 3 then ( Select Top 1 Price13 From [ImportMatTmp] where Code = @MatCode order by id) 
			when G.Number = 4 then ( Select Top 1 Price14 From [ImportMatTmp] where Code = @MatCode order by id) 
			when G.Number = 5 then ( Select Top 1 Price15 From [ImportMatTmp] where Code = @MatCode order by id) 
			when G.Number = 6 then ( Select Top 1 Price16 From [ImportMatTmp] where Code = @MatCode order by id) 
			when G.Number = 7 then ( Select Top 1 Price17 From [ImportMatTmp] where Code = @MatCode order by id) 
		end, 
		Case 
			when G.Number = 1 then ( Select Top 1 Price21 From [ImportMatTmp] where Code = @MatCode order by id) 
			when G.Number = 2 then ( Select Top 1 Price22 From [ImportMatTmp] where Code = @MatCode order by id) 
			when G.Number = 3 then ( Select Top 1 Price23 From [ImportMatTmp] where Code = @MatCode order by id) 
			when G.Number = 4 then ( Select Top 1 Price24 From [ImportMatTmp] where Code = @MatCode order by id) 
			when G.Number = 5 then ( Select Top 1 Price25 From [ImportMatTmp] where Code = @MatCode order by id) 
			when G.Number = 6 then ( Select Top 1 Price26 From [ImportMatTmp] where Code = @MatCode order by id) 
			when G.Number = 7 then ( Select Top 1 Price27 From [ImportMatTmp] where Code = @MatCode order by id) 
		end, 
		Case 
			when G.Number = 1 then ( Select Top 1 Price31 From [ImportMatTmp] where Code = @MatCode order by id) 
			when G.Number = 2 then ( Select Top 1 Price32 From [ImportMatTmp] where Code = @MatCode order by id) 
			when G.Number = 3 then ( Select Top 1 Price33 From [ImportMatTmp] where Code = @MatCode order by id) 
			when G.Number = 4 then ( Select Top 1 Price34 From [ImportMatTmp] where Code = @MatCode order by id) 
			when G.Number = 5 then ( Select Top 1 Price35 From [ImportMatTmp] where Code = @MatCode order by id) 
			when G.Number = 6 then ( Select Top 1 Price36 From [ImportMatTmp] where Code = @MatCode order by id) 
			when G.Number = 7 then ( Select Top 1 Price37 From [ImportMatTmp] where Code = @MatCode order by id) 
		end
	From 
		[MatDescriptionConfig] [g]
	where
		[Kind] = 1
	Order By
		[G].[Number]
	

GO
/****** Object:  StoredProcedure [dbo].[PrcSetMovingAccount]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcSetMovingAccount]
  
as
	Truncate Table [MovingAccount]

	insert into [MovingAccount]
	Select
		[Ac].Guid
	From 
		[Account] [Ac]
		left join [Account] [Ac2] on [Ac2].[ParentGuid]  = [Ac].[Guid]
	where 
		([Ac2].[Guid] is Null)
		and ([Ac].[Type] = 0 or [Ac].[Type] = 3)

GO
/****** Object:  StoredProcedure [dbo].[PrcSetParkingLastContract]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create Procedure [dbo].[PrcSetParkingLastContract]
(
	@ParkingGuid uniqueidentifier = 0x0
)
as
	Alter Table Parking Disable Trigger all
	
	update Parking
	Set
		[LastContractGuid] = S.Guid
	from
		Parking P
		inner join (
  						Select
							[C].[Guid],
  							[C].[ParkingGuid]
  						From
  							[ParkingContract]  [C]
  						where
  							[FromDate] = 
 							(
 								Select 
 									Max([FromDate]) 
 								From 
 									[ParkingContract] [C2] 
 								where 
 									[C].[ParkingGuid] = [C2].[ParkingGuid]
 							)
					) S on S.[ParkingGuid] = p.Guid
	where
		P.Guid = @ParkingGuid or @ParkingGuid = 0x0

	Alter Table Parking Enable Trigger all
			

GO
/****** Object:  StoredProcedure [dbo].[PrcSetParkingPrice]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcSetParkingPrice]
(
	@ParkingGuid uniqueidentifier = 0x0
)
  
as
	update Parking
	Set
		Sale = S.Sale,
		SaleCurrencyGUID = S.SaleCurrencyGuid
	from
		Parking P
		inner join (
					Select
						[ParentGuid],
						[Price] as [Sale],
						[CurrencyGuid] as [SaleCurrencyGuid]	
					From
						[ChangeParkingPrice] [C]
					where
						[Number] = (
									Select 
										Max([Number]) 
									From 
										[ChangeParkingPrice] [C2] 
									where 
										[C2].[ParentGuid] = [C].[ParentGuid]
									)
					) S on S.[ParentGuid] = p.Guid
	where
		P.Guid = @ParkingGuid or @ParkingGuid = 0x0
			

	update Parking
	Set
		Rent = S.Rent,
		RentCurrencyGUID = S.RentCurrencyGuid
	from
		Parking P
		inner join (
					Select
						[ParentGuid],
						[Price] as [Rent],
						[CurrencyGuid] as [RentCurrencyGuid]	
					From
						[ChangeParkingRent] [C]
					where
						[Number] = (
									Select 
										Max([Number]) 
									From 
										[ChangeParkingPrice] [C2] 
									where 
										[C2].[ParentGuid] = [C].[ParentGuid]
									)
					) S on S.[ParentGuid] = p.Guid
	where
		P.Guid = @ParkingGuid or @ParkingGuid = 0x0


GO
/****** Object:  StoredProcedure [dbo].[PrcSetProgrss]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create Procedure [dbo].[PrcSetProgrss]
(
	@msg Varchar(255) = '150',
	@MaxPos int = -1,
	@Pos int = -1
)
as
	if exists(Select Top 1 * from [Progress_Tbl] where Spid = @@spid)
	begin
		if @MaxPos <> -1
		update 
			[Progress_Tbl]
		Set
			[Msg] = @msg,
			SubMsg = '',
			[MaxPos] = @MaxPos,
			[Pos] = @Pos
		where
			Spid = @@spid
		else
		update 
			[Progress_Tbl]
		Set
			SubMsg = @msg
		where
			Spid = @@spid

	end
	else
	begin
		insert into [Progress_Tbl]
		([Msg], [MaxPos], [Pos])
		Select
			 @msg,
			 @MaxPos,
			 @Pos
	end
	
	--insert into LogFile (Opration) Select @msg
	
	

GO
/****** Object:  StoredProcedure [dbo].[PrcSetShopLastContract]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcSetShopLastContract]
(
	@ShopGuid uniqueidentifier = 0x0
)
  
as
	update Shop
	Set
		[LastContractGuid] = S.Guid
	from
		Shop P
		inner join (
  						Select
							[C].[Guid],
  							[C].[ApartmentGuid]
  						From
  							[LeaseApartment]  [C]
  						where
  							[FromDate] = 
 							(
 								Select 
 									Max([FromDate]) 
 								From 
 									[LeaseApartment] [C2] 
 								where 
 									[C].[ApartmentGuid] = [C2].[ApartmentGuid]
 							)
					) S on S.[ApartmentGuid] = p.Guid
	where
		P.Guid = @ShopGuid or @ShopGuid = 0x0
			

GO
/****** Object:  StoredProcedure [dbo].[PrcSetShopPrice]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcSetShopPrice]
(
	@ShopGuid uniqueidentifier = 0x0
)
  
as
	update Shop
	Set
		Sale = S.Sale,
		SaleCurrencyGUID = S.SaleCurrencyGuid
	from
		Shop P
		inner join (
					Select
						[ParentGuid],
						[Price] as [Sale],
						[CurrencyGuid] as [SaleCurrencyGuid]	
					From
						[ChangeShopPrice] [C]
					where
						[Number] = (
									Select 
										Max([Number]) 
									From 
										[ChangeShopPrice] [C2] 
									where 
										[C2].[ParentGuid] = [C].[ParentGuid]
									)
					) S on S.[ParentGuid] = p.Guid
	where
		P.Guid = @ShopGuid or @ShopGuid = 0x0
			

	update Shop
	Set
		Rent = S.Rent,
		RentCurrencyGUID = S.RentCurrencyGuid
	from
		Shop P
		inner join (
					Select
						[ParentGuid],
						[Price] as [Rent],
						[CurrencyGuid] as [RentCurrencyGuid]	
					From
						[ChangeShopRent] [C]
					where
						[Number] = (
									Select 
										Max([Number]) 
									From 
										[ChangeShopPrice] [C2] 
									where 
										[C2].[ParentGuid] = [C].[ParentGuid]
									)
					) S on S.[ParentGuid] = p.Guid
	where
		P.Guid = @ShopGuid or @ShopGuid = 0x0


GO
/****** Object:  StoredProcedure [dbo].[PrcShopOffer]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcShopOffer]
(
	@NO VARCHAR(256) = '',
	@Building  VARCHAR(256) = '',
	@Customer  VARCHAR(256) = '',
	@Area1 Float = 0,
	@Area2 Float = 0,
	@ShopKind VARCHAR(256) = '',
	@Description VARCHAR(256) = '',
	@Overlooking VARCHAR(256) = '',
	@OfferKind Int = 3,
	@OfferValue1 Float = 0,
	@OfferValue2 Float = 0,
	@Delegated VARCHAR(256) = '',
	@CustPhone VARCHAR(256) = '',
	@CustMobile VARCHAR(256) = ''
)
  
as
	Select 
		*,
		Case when OfferKind = 0 then 'ÈíÚ'
			 when OfferKind = 1 then 'ÔÑÇÁ'
			 when OfferKind = 2 then 'ÅíÌÇÑ'
		end as OfferKindStr
	From 
		[ShopOffer]
	where
		([NO] = @NO  or @NO = '')
		and ([Building] Like '%'+@Building+'%')
		and ([Customer] Like '%'+@Customer+'%')
		and ([Area] > @Area1 or @Area1 = 0)
		and ([Area] < @Area2 or @Area2 = 0)
		and ([ShopKind] Like '%'+@ShopKind+'%')
		and ([Description] Like '%'+@Description +'%')
		and ([Overlooking] Like '%'+@Overlooking +'%')
		and ([OfferKind] = @OfferKind or @OfferKind = 3)
		and ([OfferValue] between @OfferValue1 and @OfferValue2 or @OfferValue2 = 0)
		and ([Delegated] Like '%'+@Delegated +'%')
		and ([CustPhone] Like '%'+@CustPhone +'%')
		and ([CustMobile] Like '%'+@CustMobile +'%')
		

GO
/****** Object:  StoredProcedure [dbo].[PrcSMSEntry]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcSMSEntry]
(
	@Guid uniqueidentifier = 0x0
)
  
as
	Select 
		S.[date],
		S.[Number],
		(Select SUM(Debit) From Secondary_EntryDetail where ParentGuid = @Guid) as [Debit],
		(Select SUM(Credit) From Secondary_EntryDetail where ParentGuid = @Guid) as [Credit],
		S.[Note],
		D.Note  as [ItemNote],
		Ac.Name as Account,
		Aci.Name as AccountItem,
		Cu.Mobile as CustMobile
	From 
		Secondary_Entry S
		inner join Account Ac on Ac.Guid = S.AccountGuid
		inner join (
					Select	Top 1
						*
					From
						Secondary_EntryDetail
					where
						ParentGuid = @Guid	
					) D on D.ParentGuid = S.Guid
		inner join Account Aci on Aci.Guid = D.AcGuid
		inner join Customer Cu on Cu.AcGuid = Aci.Guid
	where
		S.Guid = @Guid

GO
/****** Object:  StoredProcedure [dbo].[PrcSMSEntryDate]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcSMSEntryDate]
(
	@Guid uniqueidentifier = 0x0
)
  
as
	Select 
		S.[date],
		S.[Number],
		(Select SUM(Debit) From EntryDateDetail where ParentGuid = @Guid) as [Debit],
		(Select SUM(Credit) From EntryDateDetail where ParentGuid = @Guid) as [Credit],
		S.[Note],
		D.Note  as [ItemNote],
		Ac.Name as Account,
		Aci.Name as AccountItem,
		Cu.Mobile as CustMobile
	From 
		EntryDate S
		inner join Account Ac on Ac.Guid = S.AccountGuid
		inner join (
					Select	Top 1
						*
					From
						EntryDateDetail
					where
						ParentGuid = @Guid	
					) D on D.ParentGuid = S.Guid
		inner join Account Aci on Aci.Guid = D.AcGuid
		inner join Customer Cu on Cu.AcGuid = Aci.Guid
	where
		S.Guid = @Guid

GO
/****** Object:  StoredProcedure [dbo].[PrcSMSLog]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcSMSLog]
(	
	@UserGuid uniqueidentifier = 0x0,
	@Phone Varchar(256) = '',
	@OperationNote int = 0,
	@ActiveNote Bit = 0,
	@Msg Varchar(256) = '',
	@ActiveDate Bit = 0,
	@Date1 DateTime = '1/1/2007',
	@Date2 DateTime = '1/1/2008'
)
  
as
	if @OperationNote = 0 --íÍæí
	Set @Msg  = '%'+@Msg+'%'

	Select 
		S.*,
		S.Date as [Time],
		U.loginName as [UserName],
		Cast('' as VARchar(256)) as CustName,
		Cast(0x0 as uniqueidentifier) as CustGuid
	into #SMSLog_Tmp
	From 
		[SMSLog] S		
		inner join Realty_Users U on U.Guid = S.UserGuid
	where
		(S.userGuid = @UserGuid or @UserGuid = 0x0)
		and (S.Phone = @Phone or @Phone = '')
 		and 
 			(
 				[S].[Msg] Like @Msg
 				or @ActiveNote = 0
 			)
 		and (dbo.fndateOnly([Date]) Between @Date1 And @Date2 or @ActiveDate = 0)
	
	Update #SMSLog_Tmp Set CustGuid = C.Guid, CustName = C.Name
	From
		#SMSLog_Tmp S
		inner join Customer C on C.mobile = s.phone
		
	Select 
		*
	from 
		#SMSLog_Tmp S
	Order By 
		DATe
		

GO
/****** Object:  StoredProcedure [dbo].[PrcSpreadingPermission]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcSpreadingPermission]
(
	@UserGuid uniqueidentifier = '6E5BB828-3126-423C-ACE5-5D14B4548D9A'
)
  
as

	Update Realty_Users Set 
		[SecLvl] = (Select [SecLvl] From Realty_Users where Guid = @UserGuid),
		[bAdmin] = (Select [bAdmin] From Realty_Users where Guid = @UserGuid),
		[UserSecLvl] = (Select [UserSecLvl] From Realty_Users where Guid = @UserGuid),
		[BranchGuid] = (Select [BranchGuid] From Realty_Users where Guid = @UserGuid)
	From
		Realty_Users R 
		inner join [Resource] S on S.Guid = R.Guid
		
	--[Realty_Detail_users] 
	Delete 
		[Realty_Detail_users] 
	From
		[Realty_Detail_users] D
		inner join [Resource] S on S.Guid = D.[ParentGuid]
	where
		S.SPID = @@Spid
		
	insert into [Realty_Detail_users]
	([Number],[ParentGuid],[IdCard],[Permit],[Str])
	Select
		[Number],R.Guid,[IdCard],[Permit],[Str]
	From
		[Realty_Detail_users] D, [Resource] R
	where
		R.Kind = 3333 and SPID = @@Spid
		and 
		D.ParentGuid = @UserGuid
		
	--[EntryTypePrivilege]
	Delete 
		[EntryTypePrivilege]
	From
		[EntryTypePrivilege] D
		inner join [Resource] S on S.Guid = D.[UserGuid]
	where
		S.SPID = @@Spid
		
	insert into [EntryTypePrivilege]
	([UserGuid],[EntryTypeGuid],[Open],[Add],[Edit],[Del],[Mark],[MarkEdit],[MarkDel],[Print],[Design])
	Select
		R.Guid,D.[EntryTypeGuid],D.[Open],D.[Add],D.[Edit],D.[Del],D.[Mark],D.[MarkEdit],D.[MarkDel],D.[Print],D.[Design]
	From
		[EntryTypePrivilege] D, [Resource] R
	where
		R.Kind = 3333 and SPID = @@Spid
		and 
		D.[UserGuid] = @UserGuid
	
	--[ContractTypePrivilege]
	Delete 
		[ContractTypePrivilege]
	From
		[ContractTypePrivilege] D
		inner join [Resource] S on S.Guid = D.[UserGuid]
	where
		S.SPID = @@Spid
		
	insert into [ContractTypePrivilege]
	([UserGuid],[ContractTypeGuid],[Open],[Add],[Edit],[Del],[Mark],[MarkEdit],[MarkDel],[Print],[Design],[Field7],[Field8],[Field9],[Field10],[Field11],[Field12],[Field13],[Field14],[Field15],[Field16],[MaxDiscount])
	Select
		R.Guid,[ContractTypeGuid],[Open],[Add],[Edit],[Del],[Mark],[MarkEdit],[MarkDel],[Print],[Design],[Field7],[Field8],[Field9],[Field10],[Field11],[Field12],[Field13],[Field14],[Field15],[Field16],[MaxDiscount]
	From
		[ContractTypePrivilege] D, [Resource] R
	where
		R.Kind = 3333 and SPID = @@Spid
		and 
		D.[UserGuid] = @UserGuid
		
	--[CheckTypePrivilege]
	Delete 
		[CheckTypePrivilege]
	From
		[CheckTypePrivilege] D
		inner join [Resource] S on S.Guid = D.[UserGuid]
	where
		S.SPID = @@Spid
		
	insert into [CheckTypePrivilege]
	([UserGuid],[CheckTypeGuid],[Open],[Add],[Edit],[Del],[Mark],[MarkEdit],[Markdel],[Print],[Design],[Posted],[collected],[Endorsement],[Returned])
	Select
		R.Guid,[CheckTypeGuid],[Open],[Add],[Edit],[Del],[Mark],[MarkEdit],[Markdel],[Print],[Design],[Posted],[collected],[Endorsement],[Returned]
	From
		[CheckTypePrivilege] D, [Resource] R
	where
		R.Kind = 3333 and SPID = @@Spid
		and 
		D.[UserGuid] = @UserGuid
		
	--[ElectricityTypePrivilege]
	Delete 
		[ElectricityTypePrivilege]
	From
		[ElectricityTypePrivilege] D
		inner join [Resource] S on S.Guid = D.[UserGuid]
	where
		S.SPID = @@Spid
		
	insert into [ElectricityTypePrivilege]
	([UserGuid],[ElectricityTypeGuid],[Open],[Add],[Edit],[Del],[Mark],[MarkEdit],[MarkDel],[Print],[Design],[Field1],[Field2],[MaxDiscount])
	Select
		R.Guid,[ElectricityTypeGuid],[Open],[Add],[Edit],[Del],[Mark],[MarkEdit],[MarkDel],[Print],[Design],[Field1],[Field2],[MaxDiscount]
	From
		[ElectricityTypePrivilege] D, [Resource] R
	where
		R.Kind = 3333 and SPID = @@Spid
		and 
		D.[UserGuid] = @UserGuid


	--[[MenuPrivilege]]
	Delete 
		[MenuPrivilege]
	From
		[MenuPrivilege] D
		inner join [Resource] S on S.Guid = D.[UserGuid]
	where
		S.SPID = @@Spid
		
	insert into [MenuPrivilege]
	([UserGuid],[MenuName])
	Select
		R.Guid,D.[MenuName]
	From
		[MenuPrivilege] D, [Resource] R
	where
		R.Kind = 3333 and SPID = @@Spid
		and 
		D.[UserGuid] = @UserGuid


GO
/****** Object:  StoredProcedure [dbo].[PrcStatement]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create Procedure [dbo].[PrcStatement]
(
	@CustGuid uniqueidentifier = '344FCF15-3ABA-4406-9EAC-AE82B63C897D',
	@CostGuid uniqueidentifier = 0x0,
	@AccountGuid uniqueidentifier = 0x0,--'ADCE91EB-16AD-49DB-8F74-410DC81E3E1C',
	
	@Unit int = 0,
	@BillPost int = 2,

	@EntryPost bit = 1,
	@EntryNotPost bit = 1,
	
	@LikeNote varchar(256) = '',
	@NotLikeNote varchar(256) = '',
	
	@CurrencyGuid [uniqueidentifier] = '11111111-C748-4B13-8B91-1E9B299DF1C1',
	@CurrencyVal Float = 1,

	@CkDate bit = 1,
	@Date1 DateTime = '1/1/2014',
	@Date2 DateTime = '1/1/2018'
)
as
	exec [dbo].[PrcMatBillsDetail]   @GroupGuid = 0x0 ,@MatGuid = 0x0 ,@StoreGuid = 0x0 
									,@CostGuid = @CostGuid, @Class = '' , @Unit = @Unit
									,@BillPost = @BillPost
									,@CurrencyGuid = @CurrencyGuid, @Currencyval = @Currencyval
									,@CkDate = 0
									,@Date1 = 0,@Date2	= 0

	Declare @BaseTbl Table 
	(
		[id] int,
		[AccountCode] varchar(255) COLLATE database_default,
		[AccountName] varchar(255) COLLATE database_default,
		[Date] datetime,
		[Debit] float,
		[Credit] float,
		[Note] varchar(255) COLLATE database_default,
		[Guid] uniqueidentifier,
		[AccountGuid] uniqueidentifier,
		[Tag] int,
		
		[CuNumber] int,
		[CuPersonalityNo1] Varchar(256) COLLATE database_default,
		[CuPersonalityNo2] Varchar(256) COLLATE database_default,
		[CuNationality] Varchar(256) COLLATE database_default,
		[CuLtnNationality] Varchar(256) COLLATE database_default,
		[CuPhoneJob] Varchar(256) COLLATE database_default,
		[CuMobile] Varchar(256) COLLATE database_default,
		[CuAddress] Varchar(256) COLLATE database_default,
		[CuLtnAddress] Varchar(256) COLLATE database_default,
		[CuFax] Varchar(256) COLLATE database_default,
		[CuEMail] Varchar(256) COLLATE database_default,
		[CuBankName] Varchar(256) COLLATE database_default,
		[CuBankAccCode] Varchar(256) COLLATE database_default,
		[CustNote1] Varchar(256) COLLATE database_default,
		[CustNote2] Varchar(256) COLLATE database_default,
		[CustNote3] Varchar(256) COLLATE database_default,
		[CustNote4] Varchar(256) COLLATE database_default,
		[CustNote5] Varchar(256) COLLATE database_default,
		[CustNote6] Varchar(256) COLLATE database_default,
		[CustNote7] Varchar(256) COLLATE database_default,
		
		[mtGroup] Varchar(255) COLLATE database_default,
		[mtCode] Varchar(255) COLLATE database_default,
		[mtName] Varchar(255) COLLATE database_default,
		[mtLtnName] Varchar(255) COLLATE database_default,
		[mtBarcode] Varchar(255) COLLATE database_default,
		
		[buPayType] Int,
		[buIsPosted] Bit,
		[biQty] Float,		[Unit] Varchar(255) COLLATE database_default,		[biQty2] Float,		[Unity2] Varchar(255) COLLATE database_default,		[biQty3] Float,		[Unity3] Varchar(255) COLLATE database_default,				[biPrice] Float,		[biTotalPrice] Float,		[biBonus] Float,		[biStoreGuid] [uniqueidentifier] ,		[biDiscountPercent] Float,		[biDiscount] Float,		[biExtraPercent] Float,		[biExtra] Float,		[biNote] Varchar(256),		[biProductDate] Datetime,		[biExpireDate] Datetime,		[biCostGuid] [uniqueidentifier] ,		[biClass] Varchar(256) COLLATE database_default,		[biLength] Float,		[biwidth] Float,		[biheight] Float,		[biCount] Float,		[biItemUnit] int,
		[TypeGuid] [uniqueidentifier] 
	)

	if @CustGuid <> 0x0
	begin
		Select @AccountGuid = acGuid from Customer where [Guid] = @CustGuid
	end
		
	select * into #fnGetAccountList from dbo.fnGetAccountList(@AccountGuid)
	
	--Ïáíá ÇáÒÈÇÆä
	select 
		ac.code,
		ac.Name,
		Cu.Guid
	into #fnGetCustList 
	from
		Customer Cu 
		inner join dbo.fnGetAccountList(0x0) Ac on Cu.acGuid = ac.Guid
	
	--Select * from #fnGetAccountList
	--Select * from [MatBillsDetail]

	--ÇáÝÇÊæÑÉ ÇáäÞÏíÉ	
	insert into @BaseTbl
	([AccountCode],[AccountName],[Date],[Debit],[Credit],[Note],[Guid],[AccountGuid],[Tag],[TypeGuid])	
	Select
		ac.code,
		ac.Name,
		b.[Date] as [Date],
		case when [t].[BillKind] in (1, 2, 5) then ([b].[ItemsTotal] +	[b].[BuExtra] - [b].[BuDiscount]) end as [Debit],
		case when [t].[BillKind] in (0, 3, 4) then ([b].[ItemsTotal] +	[b].[BuExtra] - [b].[BuDiscount]) end as [Credit],
		dbo.SC('äÞÏÇð')+' '+[t].[Name] as [Note],
		B.[Guid] as [Guid],
		b.[CustAccGuid],
		1 as [Tag],
		[b].TypeGuid
	from 
		bill b 
		inner join BillType [t] on [t].Guid = [b].TypeGuid
		inner join [Customer] Cu on Cu.Guid = b.[CustGuid]
		inner join #fnGetCustList Ac on Ac.GUID = b.[CustGuid]
		inner join [resource] R on R.Guid = b.[TypeGuid] and R.Spid = @@SPID and R.Kind = 2
	where
		(b.CustGuid = @CustGuid or @CustGuid = 0x0)
		and (isNull([b].[Note],'') Not Like '%'+@NotLikeNote+'%' or @NotLikeNote = '')
		and (isNull([b].[Note],'') Like '%'+@LikeNote+'%' )
		and (
				(B.isPosted = 0 and @BillPost = 0)
				or (B.isPosted = 1 and @BillPost = 1)
				or @BillPost = 2
			)
		and (b.Date <= @Date2 or @CkDate = 0)
		and (b.Paytype = 0)
		
	--ÇáÝÇÊæÑÉ ÇáäÞÏíÉ
	insert into @BaseTbl
	([AccountCode],[AccountName],[Date],[Debit],[Credit],[Note],[Guid],[AccountGuid],[Tag],[TypeGuid])	
	Select
		ac.code,
		ac.Name,
		b.[Date] as [Date],
		case when [t].[BillKind] in (0, 3, 4) then ([b].[ItemsTotal] +	[b].[BuExtra] - [b].[BuDiscount]) end as [Credit],
		case when [t].[BillKind] in (1, 2, 5) then ([b].[ItemsTotal] +	[b].[BuExtra] - [b].[BuDiscount]) end as [Debit],
		dbo.SC('äÞÏÇð')+' '+[t].[Name] as [Note],
		B.[EntryGuid] as [Guid],
		b.[CustAccGuid],
		1 as [Tag],
		[b].TypeGuid
	from 
		bill b 
		inner join BillType [t] on [t].Guid = [b].TypeGuid
		inner join [Customer] Cu on Cu.Guid = b.[CustGuid]
		inner join #fnGetCustList Ac on Ac.GUID = b.[CustGuid]
		inner join [resource] R on R.Guid = b.[TypeGuid] and R.Spid = @@SPID and R.Kind = 2
	where
		(b.CustGuid = @CustGuid or @CustGuid = 0x0)
		and (isNull([b].[Note],'') Not Like '%'+@NotLikeNote+'%' or @NotLikeNote = '')
		and (isNull([b].[Note],'') Like '%'+@LikeNote+'%' )
		and (
				(B.isPosted = 0 and @BillPost = 0)
				or (B.isPosted = 1 and @BillPost = 1)
				or @BillPost = 2
			)
		and (b.Date <= @Date2 or @CkDate = 0)
		and (b.Paytype = 0)

	--Select @AccountGuid, * from #fnGetAccountList
	
	insert into @BaseTbl
	([AccountCode],[AccountName],[Date],[Debit],[Credit],[Note],[Guid],[AccountGuid],[Tag],[TypeGuid])	
	Select
		ac.[code],
		ac.[Name],
		H.[Date] as [Date],
		D.[Debit],
		D.[Credit],
		D.[Note] as [Note],
		H.[Guid] as [Guid],
		[Ac].GUID,
		2 as [Tag],
		0x0
	from 
		[HEntry] H
		inner join [Dentry] D on D.ParentGuid = H.[Guid]
		inner join #fnGetAccountList Ac on Ac.GUID = D.[AcGuid]
	where
		(d.costGuid = @CostGuid or @CostGuid = 0x0)
		and (isNull([d].[Note],'') Not Like '%'+@NotLikeNote+'%' or @NotLikeNote = '')
		and (isNull([d].[Note],'') Like '%'+@LikeNote+'%' )
		and (
				--ãáÛì (ParentKind <> 22) and--ÇÓÊËäÇÁ ÞíæÏ ÇáÝæÇÊíÑ				
				 (ParentKind <> 8000 )  -- ÇÓÊËäÇÁ ÇäãÇØ ÇáÓäÏÇÊ
				or (ParentKind = 0) 
			)
		and	(
				(H.isposted = @EntryPost )
				or (Not H.isposted = @EntryNotPost )
			)
		and (H.Date <= @Date2 or @CkDate = 0)

	--ÇäãÇØ ÇáÓäÏÇÊ
	insert into @BaseTbl
	([AccountCode],[AccountName],[Date],[Debit],[Credit],[Note],[Guid],[AccountGuid],[Tag],[TypeGuid])	
	Select
		ac.code,
		ac.Name,
		H.[Date] as [Date],
		D.[Debit],
		D.[Credit],
		D.[Note] as [Note],
		H.[Guid] as [Guid],
		[Ac].GUID ,
		3 as [Tag],
		S.TypeGuid
	from 
		[HEntry] H
		inner join [Dentry] D on D.ParentGuid = H.[Guid]
		inner join #fnGetAccountList Ac on Ac.GUID = D.[AcGuid]
		inner join [Secondary_Entry] S on S.Guid = H.Guid
		inner join [Resource] R on R.Guid = S.TypeGuid and Spid = @@SPID and R.Kind = 2
	where
		(d.costGuid = @CostGuid or @CostGuid = 0x0)
		and (isNull([d].[Note],'') Not Like '%'+@NotLikeNote+'%' or @NotLikeNote = '')
		and (isNull([d].[Note],'') Like '%'+@LikeNote+'%' )
		and	(
				(H.isposted = @EntryPost )
				or (Not H.isposted = @EntryNotPost )
			)
		and (H.Date <= @Date2 or @CkDate = 0)

	--ãÚÇáÌÉ ãÑßÒ ÇáßáÝÉ
	if @CostGuid <> 0x0
	begin
		Select * into #fnGetCostList from dbo.fnGetCostList(@CostGuid)
		
		Delete @BaseTbl
		from
			@BaseTbl D
			left join #fnGetCostList Co on Co.GUID = D.[CostGuid]
		where
			[co].[Guid] is Null
	end
	

	--ÇáÑÕíÏ ÇáÓÇÈÞ
	insert into @BaseTbl
	([AccountCode],[AccountName],[Date],[Debit],[Credit],[Note],[Guid],[AccountGuid],[Tag])	
	Select
		accountcode,
		accountName,
		Null as [Date],
		0 as [Debit],
		0 as [Credit],
		dbo.SC('ÇáÑÕíÏ ÇáÓÇÈÞ') as [Note],
		AccountGuid as [Guid],
		AccountGuid,
		0 as [Tag]
	from 
		@BaseTbl
	Group By
		accountcode,accountName, AccountGuid

	--ÇáÑÕíÏ ÇáÓÇÈÞ
	if @CkDate = 1
	begin
		Select 
			AccountGuid , 
			Case when Sum(isNull([Debit],0) - isNull([Credit],0)) > 0 then Abs(Sum(isNull([Debit],0) - isNull([Credit],0))) else 0 end as [Debit], 
			Case when Sum(isNull([Debit],0) - isNull([Credit],0)) < 0 then Abs(Sum(isNull([Debit],0) - isNull([Credit],0))) else 0 end as [Credit]
			into #OldBalance
		from 
			@BaseTbl
		where
			(Date < @Date1)
		group By
			AccountGuid 
			
		update @BaseTbl
		Set [Debit] = d.[Debit] ,[Credit] = D.[Credit]
		from
			@BaseTbl B
			inner join #OldBalance D on B.AccountGuid = D.AccountGuid
		where
			B.Tag = 0
	end

	--ãÚÇáÌÉ ÇáÊÇÑíÎ
	if @CkDate = 1
	begin
		Delete 
			@BaseTbl 
		where 
			(Not (Date between @Date1 and @Date2))
			and Date is Not Null --ÇáÑÕíÏ ÇáÓÇÈÞ
	end
	
	--ÇáÑÕíÏ ÇáäåÇÆí
	insert into @BaseTbl
	([AccountCode],[AccountName],[Date],[Debit],[Credit],[Note],[Guid],[AccountGuid],[Tag])	
	Select
		accountcode,
		accountName,
		Null as [Date],
		0 as [Debit],
		0 as [Credit],
		dbo.SC('ÇáÑÕíÏ ÇáäåÇÆí') as [Note],
		AccountGuid as [Guid],
		AccountGuid,
		5 as [Tag]
	from 
		@BaseTbl
	Group By
		accountcode,accountName, AccountGuid

	--ÇáÑÕíÏ ÇáäåÇÆí
	if @CkDate = 1
	begin
		Select 
			AccountGuid , 
			Case when Sum(isNull([Debit],0) - isNull([Credit],0)) > 0 then Abs(Sum(isNull([Debit],0) - isNull([Credit],0))) else 0 end as [Debit], 
			Case when Sum(isNull([Debit],0) - isNull([Credit],0)) < 0 then Abs(Sum(isNull([Debit],0) - isNull([Credit],0))) else 0 end as [Credit]
			into #EndBalance
		from 
			@BaseTbl
		where
			Tag in (0,1,2,3)
		group By
			AccountGuid 
			
		update @BaseTbl
		Set [Debit] = d.[Debit] ,[Credit] = D.[Credit]
		from
			@BaseTbl B
			inner join #EndBalance D on B.AccountGuid = D.AccountGuid
		where
			B.Tag = 5
	end
	

	--ÈíÇä ÇáÝÇÊæÑÉ
	update @BaseTbl Set 
		[Note] = Case when bt.buPaytype = 0 then dbo.SC('äÞÏÇð') +' ' end+bt.[btName]
	from
		@BaseTbl B
		inner join vwBill bt on bt.buentryGuid = b.Guid

	--ÈíÇäÇÊ ÇáÒÈæä
	update @BaseTbl Set 
		[CuNumber] = cu.[Number],
		[CuPersonalityNo1] = Cu.[PersonalityNo1],
		[CuPersonalityNo2] = Cu.[PersonalityNo2],
		[CuNationality] = Cu.[Nationality],
		[CuLtnNationality] = Cu.[LtnNationality],
		[CuPhoneJob] = Cu.[PhoneJob],
		[CuMobile] = Cu.[Mobile],
		[CuAddress] = Cu.[Address],
		[CuLtnAddress] = Cu.[LtnAddress],
		[CuFax] = Cu.[Fax],
		[CuEMail] = Cu.[EMail],
		[CuBankName] = Cu.[BankName],
		[CuBankAccCode] = Cu.[BankAccCode],
		[CustNote1] = Cu.[CustNote1],
		[CustNote2] = Cu.[CustNote2],
		[CustNote3] = Cu.[CustNote3],
		[CustNote4] = Cu.[CustNote4],
		[CustNote5] = Cu.[CustNote5],
		[CustNote6] = Cu.[CustNote6],
		[CustNote7] = Cu.[CustNote7]
	from
		@BaseTbl B
		inner join Customer Cu on Cu.AcGuid = b.AccountGuid
	
	
	-- Id	
	Create Table #T
	(
		[Id] int Identity(1,1),
		[Guid] Uniqueidentifier,
		[Tag] int
	)
	
	insert into #T ([Guid],[Tag])
	Select [Guid], [Tag] from @BaseTbl order By [AccountCode], Case when Tag = 5 then 1 else 0 end, [Date]
	
	update @BaseTbl set id = T.id
	from @BaseTbl b inner join #T T On t.Guid = b.Guid and T.Tag = b.Tag
		
	--ÊÝÇÕíá ÇáÝæÇÊíÑ
	insert into @BaseTbl
	([id],[Note],[Guid],[AccountGuid],[Tag],
	 [mtGroup],[mtCode],[mtName],[mtLtnName],[mtBarcode],
		
	 [buPayType],[buIsPosted],
	 [biQty],[Unit],[biQty2],[Unity2],[biQty3],[Unity3],	 [biPrice],[biTotalPrice],[biBonus],[biStoreGuid],[biDiscountPercent],	 [biDiscount],[biExtraPercent],[biExtra],[biNote],[biProductDate],[biExpireDate],[biCostGuid],	 [biClass],[biLength],[biwidth],[biheight],[biCount],[biItemUnit]
	)
	Select
		[id],
		[mt].[Name] as [Note],
		d.[Guid],
		d.[AccountGuid],
		4 as [Tag],
		[mt].[GroupName],
		[mt].[Code],
		[mt].[Name],
		[mt].[LtnName],
		[mt].[Barcode],
		
		b.[buPayType],		b.[buIsPosted],		
		dd.Qty as [Qty],
		dd.[Unit],
		
		[dd].[Qty2],
		dd.[Unity2],
		[dd].[Qty3],
		dd.[Unity3],

		dd.[Price],		bi.[TotalPrice],bi.[Bonus],bi.[StoreGuid],bi.[DiscountPercent],	    bi.[Discount],bi.[ExtraPercent],bi.[Extra],bi.[Note],bi.[ProductDate],bi.[ExpireDate],bi.[CostGuid],	    bi.[Class],bi.[Length],bi.[width],bi.[height],bi.[Count],bi.[ItemUnit]
	from
		@BaseTbl d
		inner join vwbill b on b.[EntryGuid] = D.Guid
		inner join Billdetail bi on bi.parentGuid = B.buGuid
		inner join [MatBillsDetail] dd on dd.BuGuid = B.buGuid and bi.Number = dd.biNumber
		inner join vwmat mt on mt.Guid = bi.matGuid
	
	Select 
		* ,
		Case when (Tag <> 4) then
		(Select 
			SUM(isNull(Debit,0)-isNull(Credit,0)) 
		 from 
			@BaseTbl A 
		 where 
			A.AccountGuid = b.AccountGuid and A.id <= B.id and Tag <> 5) end as Balance
	from 
		@BaseTbl B
	order By
		[id],[Guid], Tag

	
	Create Table #EndRes
	(
		[Note] varchar(256)  COLLATE database_default,
		[debit] float,
		[Credit] float,
		[Balance] float,
		[Kind] int
	)
	
	insert into #EndRes
	Select 
		dbo.Sc('ÇáÑÕíÏ ÇáÓÇÈÞ') as [Note],
		(Select SUM(isNull(Debit,0))from @BaseTbl where Tag = 0) as [Debit],
		(Select SUM(isNull(Credit,0))from @BaseTbl where Tag = 0) as [Credit],
		0,
		1
		
	insert into #EndRes
	Select 
		dbo.Sc('ÑÕíÏ ÇáÍÑßÉ') as [Note],
		(Select SUM(isNull(Debit,0))from @BaseTbl where Tag in(1,2,3)) as [Debit],
		(Select SUM(isNull(Credit,0))from @BaseTbl where Tag in(1,2,3)) as [Credit],
		0,
		2

	insert into #EndRes
	Select
		dbo.Sc('ÇáÑÕíÏ ÇáäåÇÆí') as [Note],
		(Select SUM(isNull([Debit],0)) from @BaseTbl where Tag in(0,1,2,3)) as [Debit],
		(Select SUM(isNull([Credit],0))from @BaseTbl where Tag in(0,1,2,3)) as [Credit],
		0,
		3

	update #EndRes Set Balance = [Debit] - [Credit]
	 
	Select * from #EndRes order By kind		


GO
/****** Object:  StoredProcedure [dbo].[PrcStrSource]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcStrSource]
  
as

	Declare @Country varchar(255)
	
	Select @Country = Value From DMD_Const where VName = 'Country'
	
	if (@Country = 'ÏæáÉ ÇáßæíÊ') or (@Country = 'Kuwait') 
	exec [dbo].[PrcStrSource3]
	else
	exec [dbo].[PrcStrSource1]
	


GO
/****** Object:  StoredProcedure [dbo].[PrcStrSource1]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcStrSource1]
  
as

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáÅíÑÇÏÇÊ ÇáãÍÞÞÉ','Revenues report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáÇÈäíÉ','Buildings report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáÊÐßíÑ','Reminder report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáÏÝÚÇÊ ÇáãÊÃÎÑÉ','Overdue payments report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáÒÈÇÆä','Customers report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáÔÞÞ','Flat report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáÔÞÞ ÇáãÄÌÑÉ æ ÛíÑ ÇáãÄÌÑÉ','Leased and non-leased flats report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáÔÞÞ ÇáãÈÇÚÉ æ ÛíÑ ÇáãÈÇÚÉ','Sold and unsold flats report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáÔÞÞ æ ÇáãÍáÇÊ    ','Flats and Shops report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáÔÞÞ æ ÇáãÍáÇÊ  ÇáÛíÑ ãÄÌÑÉ','Non-leased flats and shops report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáÔÞÞ æ ÇáãÍáÇÊ  ÇáãÄÌÑÉ','leased flats and shops report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáÔÞÞ æ ÇáãÍáÇÊ  ÇáãÈÇÚÉ','Sold flats and shops report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáÔÞÞ æ ÇáãÍáÇÊ  ÛíÑ ÇáãÈÇÚÉ','Non-sold flats and shops report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáÔßÇæì','Complaints report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáÔíßÇÊ','Cheque Report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáÝáá','Villas report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáãÍáÇÊ','Shops report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáãæÇÞÝ','Parking report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáãæÇÞÝ ÇáãÄÌÑÉ æ ÛíÑ ÇáãÄÌÑÉ','Leased and non-leased parking report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáæÍÏÇÊ ÇáãÍÌæÒÉ','Reserved units report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÈØÇÞÇÊ ÇáÊÐßíÑ','Remind cards report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÊÃãíäÇÊ ÇáÚÞæÏ','Contracts deposit report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÊÈÏáÇÊ ÃÓÚÇÑ ÅíÌÇÑÇÊ ÇáÔÞÞ','Changes report of flats rent pricing'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÊÈÏáÇÊ ÃÓÚÇÑ ÇáÔÞÞ','Changes report of flats pricing'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÊÈÏáÇÊ ÃÓÚÇÑ ÈíÚ ÇáÔÞÞ','Changes report of flats sell pricing'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÊÈÏáÇÊ ÇÓÚÇÑ ÇáÔÞÞ','Changes report of flats pricing'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÊÛíÑÇÊ ãæÇÞÚ ÇáÃÕæá','Change asset location report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÌÑÏ ÇáÃÕæá','Assets inventory report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÏæÑÉ ÇáÚÞÏ','Contract cycle report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÔíßÇÊ ÇáÃÈäíÉ ÇáÓäæí','Cheque buildings annual report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÚÑæÖ ÇáÃÈäíÉ','Buildings offers report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÚÑæÖ ÇáÃÑÇÖí','Lands offers report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÚÑæÖ ÇáÔÞÞ','Flats offers report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÚÑæÖ ÇáÝáá','Villas offers report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÚÑæÖ ÇáãÍáÇÊ','Shops offers report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÚãáíÇÊ ÇáÃÕæá','Asset operations report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞáíÕ ÍÌã ÞÇÚÏÉ ÇáÈíÇäÇÊ','Shrink database'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊßÈíÑ ÇáäæÇÝÐ','Maximize windows'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊßÑÇÑ ÇáÍÇáÉ','Situation recurrence'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊßáÝÉ ÇáÈäÇÁ','Building cost'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÓÚÑ ÇáæÓØí','Average price'
 
insert into [StrSource] 
([Ar],[En])
select  'ÂÎÑ ÓÚÑ','last price'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃßÈÑ ÓÚÑ','largest price'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÇÏÉ ÌÏíÏÉ...','New material...'
 
insert into [StrSource] 
([Ar],[En])
select  'Ããíä ÇáãÓÊæÏÚ','Storekeeper'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÓÊæÏÚ ÇáÑÆíÓí','Main Store'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅäÔÇÁ ãÓÊæÏÚ ÝÑÚí','Create Sub-Store'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÇáãÓÊæÏÚ','Store card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÌãæÚÉ','Group'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃäãÇØ ÇáãäÇÞáÇÊ ÅÏÎÇá','Input stock transfer types'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃäãÇØ ÇáãäÇÞáÇÊ ÅÎÑÇÌ','Output stock transfer types'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÝÇÊæÑÉ','Bill number'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈíÇä ÇáÝÇÊæÑÉ','Bill details'
 
insert into [StrSource] 
([Ar],[En])
select  'äãØ ÇáÝÇÊæÑÉ','Bill type'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÚÇÏá ÇáÚãáÉ','Currency rate'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÓã ÇáÍÓÇÈ','Account name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑãÒ ÇáãÓÊæÏÚ','Store code'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑãÒ ÇáãÇÏÉ','Material code'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÓã ÇáãÇÏÉ','Material name'
 
insert into [StrSource] 
([Ar],[En])
select  'æÍÏÉ ÇáÞáã','Line unit'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÓÚÑ ÇáÇÝÑÇÏí','Unit price'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÓÚÑ ÇáÇÌãÇáí','Total price'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈíÇä ÇáÞáã','Line details'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÌãíÚ ÍÓÈ ÇáÊÕäíÝ','Grouped by Category'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÑÖ ÇáãæÇÏ ÇáÝÇÑÛÉ ','View empty materials'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÝÕíá ÇáãÓÊæÏÚÇÊ ','Stores details'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÑÖ ÇáãæÇÏ ÇáãÓÊæÏÚíÉ ','View stocking materials'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÑÖ ÇáãæÇÏ ÇáÎÏãíÉ','View service materials'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚÇÊ ÇÍÊÓÇÈ ÇáßãíÇÊ','Calculate quantities Group'
 
insert into [StrSource] 
([Ar],[En])
select  'ØÑíÞÉ ÍÓÇÈ ÇáßãíÉ','Calculating quantity method'
 
insert into [StrSource] 
([Ar],[En])
select  '[A] ÇáÊÕäíÝ [B] ÇáØæá  [C] ÇáÚÑÖ [D] ÇáÇÑÊÝÇÚ','[A] Category [B] Length [C] Width [D] Height'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÏÞíÞ','Check'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈÖÇÚÉ Çæá ÇáãÏÉ','First period inventory'
 
insert into [StrSource] 
([Ar],[En])
select  'áÕÞ ÌÏæá','Paste table'
 
insert into [StrSource] 
([Ar],[En])
select  'ÝÇÊæÑÉ ãÔÊÑíÇÊ','Purchase bill'
 
insert into [StrSource] 
([Ar],[En])
select  'ÝÇÊæÑÉ ãÈíÚÇÊ','Sales bill'
 
insert into [StrSource] 
([Ar],[En])
select  'ÝÇÊæÑÉ ãÑÊÌÚ ãÔÊÑíÇÊ','Purchase return bill'
 
insert into [StrSource] 
([Ar],[En])
select  'ÝÇÊæÑÉ ãÑÊÌÚ ãÈíÚÇÊ','Sales return bill'
 
insert into [StrSource] 
([Ar],[En])
select  'ãäÇÞáÉ','Stock transfer'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÎÑÇÌ ãä ','Output from'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÏÎÇá Çáì','Input to'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÍãíá ãáÝÇÊ ÇáØÈÇÚÉ','load print files'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ãÓÇÑ ãáÝÇÊ  ÇáØÈÇÚÉ áåÐÇ ÇáäãØ ÈÔßá ÕÍíÍ','Enter print path for this type correctly'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ äåÇíÉ ÇáÚÞÏ ÃßÈÑ ãä ÊÇÑíÎ äåÇíÉ ÇáÅÓÊËãÇÑ ááÈäÇÁ','Contract expiry date is larger than investment end date of the building'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ äåÇíÉ ÇáãÏÉ','End duration date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎå','Date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇßÏ ãä ÅÏÎÇá ÇáÍÓÇÈ','Enter account name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇßÏ ãä ÅÚÏÇÏÇÊ ÇáÅÊÕÇá','Check connection settings'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇßÏ ãä ÇÏÎÇá ÚÏÏ ÇáÇíÇã ÈÔßá ÕÍíÍ','Enter correctly number of days'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇßÏ ãä ÕÍÉ ÇáãÓÇÑ : ','Check the path'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇßíÏ ßáãÉ ÇáãÑæÑ','Verify password'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÈÏáÇÊ ÃÓÚÇÑ ÅíÌÇÑÇÊ ÇáÔÞÞ ','Flats rent changing'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÈÏáÇÊ ÃÓÚÇÑ ÇáÔÞÞ','Flats price changing'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÈÏíá ÃÓÚÇÑ ÅíÌÇÑ ÇáÔÞÞ','Flat rental update'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÈÏíá ÃÓÚÇÑ ÈíÚ ÇáÔÞÞ','Flat selling update'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÈÏíá ÇáÃÓÚÇÑ','Pricing update'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÈÏíá ÇáÅíÌÇÑ','Rental update'
 
insert into [StrSource] 
([Ar],[En])
select  '  ÇáÃÏæÇÊ','Tools'
 
insert into [StrSource] 
([Ar],[En])
select  '  ÇáÈØÇÞÇÊ','Card'
 
insert into [StrSource] 
([Ar],[En])
select  '  ÇáÊÞÇÑíÑ','Reports'
 
insert into [StrSource] 
([Ar],[En])
select  '  ÇáÍÓÇÈÇÊ','Accounts'
 
insert into [StrSource] 
([Ar],[En])
select  '  ÇáÕíÇäÉ ','Maintenance'
 
insert into [StrSource] 
([Ar],[En])
select  '  ÇáãÓÊÎÏãæä  ','Users'
 
insert into [StrSource] 
([Ar],[En])
select  '  ÇáãÚÇãáÇÊ','Transactions'
 
insert into [StrSource] 
([Ar],[En])
select  '  ÎíÇÑÇÊ','Options'
 
insert into [StrSource] 
([Ar],[En])
select  '  ÎíÇÑÇÊ ÚÇãÉ','General Options'
 
insert into [StrSource] 
([Ar],[En])
select  '  ÚãáíÇÊ ÇáÕíÇäÉ','Maintenance operations'
 
insert into [StrSource] 
([Ar],[En])
select  '  ãáÝ','File'
 
insert into [StrSource] 
([Ar],[En])
select  '  æáÛÇíÉ : ','To:'
 
insert into [StrSource] 
([Ar],[En])
select  '  æáÛÇíÉ ÊÇÑíÎ : ','to date:'
 
insert into [StrSource] 
([Ar],[En])
select  ' ÅÑÓÇá ÑÓÇáÉ ÈÔßá Âáí ÚäÏ ÇáÅÑÌÇÚ ÝæÑÇð','Immediately send SMS when check return'
 
insert into [StrSource] 
([Ar],[En])
select  '[K] ÊÇÑíÎ ÇáÅÞÝÇá','[K] Closing Date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÑÈÇÍ ÇáÔÞÞ','Profits flats'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÑÞÇã ÇáÅíÕÇáÇÊ','Receipts No'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÚÊãÇÏ ÍÓÇÈ ÇáÒÈæä ßÍÓÇÈ ãÞÇÈá ÇÝÊÑÇÖí ááÊÍÕíá','Use customer account as default collection account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÓã ÇááÇÊíäí íÍæí','Latin name contains'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÇáíÉ','Current'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÑãÒ','Code'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÍÕáÉ','Collected'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈÞí ááÅÎáÇÁ','Vacating In'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÊßæä åÐå ÇáÃÑÖ ãä ÊÌãíÚ ÃßËÑ ãä ÈØÇÞÉ ÃÑÖ æåí','This land consists of assembling more than one land, It''s:'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÊßæä åÐå ÇáÔÞÉ ãä ÊÌãíÚ ÃßËÑ ãä ÔÞÉ','This flat consists of assembling more than one flat'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÊã ÇáÚãáíÉ ÈäÌÇÍ','The process will be success'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊËÈíÊ ÇáÅÕÏÇÑ','Install version'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊËÈíÊ ÇáÊæÕíÝ','Install description'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÌÇåá','Ignore'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÌÏíÏ','Renewal'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÌÏíÏ ÇáÚÞÏ','Contract renewal'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÌãíÚí','Assembly'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÍÏíË','Update'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÍÏíË ÇÓÚÇÑ ÇíÌÇÑ ÇáÔÞÞ','Flat rental update'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÍÏíË ÊáÞÇÆí','Auto-Update'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÍÏíË äÓÎÉ','Version update'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÍÏíÏ Çáßá','Check all'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÍÑíÑ ÇáÔßæì','Complaint issue date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÍÑíÑ ÇáÚÞÏ','Contract issue'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÍÑíß ãÑßÒ ÇáßáÝÉ ãÚ ÇáÍÓã ÇáããäæÍ','Cost center belong to commission discount'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÍÑíß ãÑßÒ ÇáßáÝÉ ãÚ ÇáÚãæáÉ ãä ÇáÚãíá','Cost center belong to commission client account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÍÑíß ãÑßÒ ÇáßáÝÉ ãÚ ÇáÚãæáÉ ãä ÕÇÍÈ ÇáÚÞÇÑ','Cost center belong to commission owner account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÍÑíß ãÑßÒ ÇáßáÝÉ ãÚ ÇáãÓÊÃÌÑ','Cost center belong to tenant account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÍÑíß ãÑßÒ ÇáßáÝÉ ãÚ ÛÑÇãÇÊ ÅäåÇÁ ÇáÚÞÏ','Cost center belong to contract termination fees account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÍÕíá','Collect'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÍÕíá ÇáÔíß','cheque collection'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÍÕíá ÌÒÆí','Partial collection'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÍãíá ÇáãßÊÈÇÊ ...','Loading libraries ...'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÍæíá ÇááÛÉ   ','Language'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÎÕíÕ','Customize'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÎÕíÕ ÇáãÓÇÑ','Select path'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÎÕíÕ ãÌáÏ ÇáØÈÇÚÉ','Select printing folder'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÎÕíÕ ãÌáÏ ÇáØÈÇÚÉ...','Select printing folder'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÏÞíÞ ÇáÊÞÑíÑ','Check box'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÏæíÑ ÇáãáÝÇÊ','Closing File'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÏæíÑ ÈØÇÞÇÊ ÝÞØ','Close cards only'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÏæíÑ ßÇãá ÇáãáÝÇÊ ÍÊì ÊÇÑíÎ ÇÎÑ ÚãáíÉ','Close all Data until the last operation date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÏæíÑ ßÇãá ÇáãáÝÇÊ áÊÇÑíÎ ãÚíä ÈÏæä äÞá ÇáÚãáíÇÊ ÇááÇÍÞÉ','Close all data to specific date without move subsequent operations'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÏæíÑ ßÇãá ÇáãáÝÇÊ áÊÇÑíÎ ãÚíä ãÚ äÞá ÇáÚãáíÇÊ ÇááÇÍÞÉ','Close all data to specific date with move subsequent operations'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÐßíÑ ÚÇã áßá ÇáãÓÊÎÏãíä','Reminder for all users'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÐßíÑ ÝÞØ ááãÓÊÎÏã ÇáÍÇáí','Reminder for current user only'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÑÌãÉ ÇáÑÓÇÆá','Message Translate'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÑÍíá','Post'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÑÍíá ÇáÔíß','Post cheque'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÑÍíá ÇáÞíÏ ÈÔßá Âáí','Post journal entry automatically'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÑÎíÕ ÇáÈáÏíÉ','Municipal licensing'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÑÎíÕ ÇáÈáÏíÉ Çáì ÊÇÑíÎ','Municipality license to date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÑÎíÕ ÇáÈáÏíÉ ãä ÊÇÑíÎ','Municipality license from date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÑÎíÕ ÇáÏÝÇÚ ÇáãÏäí','Civil defense licensing'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÑÎíÕ ÇáÏÝÇÚ ÇáãÏäí Çáì ÊÇÑíÎ','Civil defense license to date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÑÎíÕ ÇáÏÝÇÚ ÇáãÏäí ãä ÊÇÑíÎ','Civil defense license from date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÓÌíá ÇáÏÎæá','Login'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÔßíá ÇáÈíÇä','Generate notes'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÕÇÚÏí','Ascending'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÕÏíÑ txt','Export to TXT'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÕÏíÑ xls ...','Export to xls...'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÕÏíÑ Åáì ÇßÓá','Export to excel file'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÕÏíÞ ÇáÚÞÏ','Contract registration'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÕÝíÉ ÇáÊÞÑíÑ ÍÓÈ','Filter report by'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÕãíã','Design'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÖÇÑíÓ','Relief'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÖãíä ÇáÊÍÕíá ÇáÌÒÆí','Include partial collection'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊØÈíÞ','Apply'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊØæíÑ ÚÞÇÑí','Real estate development'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÙåíÑ','Endorsement'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÙåíÑ ÇáÔíß','Cheque endorsement'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÚÏíá','Modify'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÚÏíá ÇáÈíÇäÇÊ','Modify data'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÚÏíá ÇáãÑÇÌÚ','Modify checked'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÚÏíá ÊÐßíÑÇÊ ÇáÛíÑ','Modify others reminders'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã  ÇÓÊáÇã ÇáÚÞÏ ÇáãæÞÚ ãä ÇáØÑÝíä','Signed contract has been received from both sides'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ÃÎÐ ÂÎÑ äÓÎÉ ÅÍÊíÇØíÉ ãäÐ','Last backup was taken since'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÅíÑÇÏÇÊ ÇáÑÓæã','Revenue fee account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÅíÑÇÏÇÊ ÊÕÏíÞ ÇáÚÞÏ','Contract registration revenue account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÅíÑÇÏÇÊ ÓÚÑ ÇáÚÞÏ','Contract price revenue account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÏÚæì','Lawsuit'
 
insert into [StrSource] 
([Ar],[En])
select  'ØáÈ ÇáÅÎáÇÁ','Evacuation request'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÚÞæÏ Ýí ÇáãáÝÇÊ ÇáÓÇÈÞÉ','Contract No. in old files'
 
insert into [StrSource] 
([Ar],[En])
select  'äÓÎÉ ãÑÎÕÉ áÜ','Licensed to '
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÚÏíá ÓÚÑ ÇáÚÞÏ','Modify contract price'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÚÏíá ÓÚÑ ÇáßáÝÉ ááÔÞÞ','Modify flat cost price'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÚÏíá ÕáÇÍíÇÊ ÇáÝÑæÚ','Edit branch permissions'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÚÏíá ÞíãÉ ÛÑÇãÉ ÇáÊÃÎíÑ     ','Modify delay fee value'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÚÏíá äÓÈÉ ÇáÚãæáÉ','Modify commission'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÛíÑ ÃÓÚÇÑ ÇáÅíÌÇÑ','Change rental rates'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÛíÑ ÃÓÚÇÑ ÇáÈíÚ','Change sell rates'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÛíÑ ÇáÓÚÑ 1','Update 1st Price'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÛíÑ ÇáÓÚÑ 2','Update 2nd Price'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÛíÑ ÇáÓÚÑ 3','Update 3rd Price'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÛíÑ ÓÚÑ ÇáÈíÚ','Change sell rate'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÛíÑ ãæÞÚ ÃÕá','Change asset location'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÛííÑ ÇáãÓÊÎÏã','Change user'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÛííÑ Çáì ÓÚÑ','Update price to'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÛííÑ ßá ÓÚÑ','Update every price to'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÛííÑ ßáãÉ ÇáãÑæÑ','Change password'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÛííÑ ãÌáÏ ÇáØÈÇÚÉ','Change printing folder'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÝÇÑíÑ','Reports'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÝÕíáí 1','Detailed 1'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÝÕíáí 2','Detailed 2'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÝÕíáí 3','Detailed 3'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÝÕíáí 4','Detailed 4'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÝÚíá','Activate'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÝÚíá ÃäãÇØ ÇáÚÞæÏ','Active contract types'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÝÚíá ÇáÃÈäíÉ','Active buildings'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÝÚíá ÇáÊÇÑíÎ','Active date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÝÚíá ÇáÑÞã','Active No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÝÚíá ÇáÚãáíÇÊ ÇáÃÎÑì ááæÑÞÉ ÇáãÇáíÉ ÚäÏ ÇáÅÑÌÇÚ','Active others operations of the check when it is return'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÝÚíá ÇáÝÑæÚ','Activate Branch System'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÝÚíá ãáÝ ÇáÊÓÌíá','Activate log file'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÝÚíá äÇÝÐÉ ÇáÊÓÌíá','Activate log window'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÇÑíÑ','Reports'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÇÑíÑ SMS','SMS Reports'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÇÑíÑ ÅÍÕÇÆíÉ','Statistical reports'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÇÑíÑ ÇáÇíÑÇÏÇÊ ','Revenue reports'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÇÑíÑ ÇáÚÑæÖ  ','Offers reports'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÇÑíÑ ÇáÚÞæÏ','Contract reports'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÇÑíÑ ÇáãÓÊæÏÚÇÊ   ','Stores report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÇÑíÑ ÇáæÍÏÇÊ ÇáÚÞÇÑíÉ    ','Realty units reports'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÃÑÈÇÍ ÇáÔÞÞ','Flats revenue report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÅÑÓÇá SMS','SMS send report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÃæÇãÑ ÇáÕíÇäÉ','Maintenance orders report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáÃÑÇÖí','Lands report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáÃæÑÇÞ ÇáãÇáíÉ','Note papers report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáÃæÑÇÞ ÇáãÇáíÉ ÇáãÓÊÍÞÉ','Due note papers report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÅÚÇÏÉ ÊÔÛíá ÇáÈÑäÇãÌ','Program will restart'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÅÚØÇÁ ÇáÞíÏ ÑÞã ÌÏíÏ','Journal entry will have new number'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÅÛáÇÞ ßá ÇáäæÇÝÐ ÇáãÝÊæÍÉ ÃæáÇð','All opened windows will closed'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÅíÞÇÝ ÌãíÚ ÇáãÓÊÎÏãíä Úä ÇáÚãá ','All users will be stop working'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÇÏÑÇÌ ÓÚÑ ÂÎÑ ÚÞÏ ÇíÌÇÑ Ýí ÊÈÏáÇÊ ÇÓÚÇÑ ÇáÇíÌÇÑ ááÔÞÞ','Last contract amount will be placed in flats rent changing'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÇÑÓÇá ÇáÑÓÇÆá áßá ÇáÒÈÇÆä ÇáãÍÏÏÉ','SMS will be sent to each selected customer'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÇÛáÇÞ ÇáäÇÝÐÉ¿','window will be closed'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÇáÊÌÏíÏ','Contract will be renewed'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÊÍÏíË ÅíÌÇÑÇÊ  ßÇÝÉ ÇáÔÞÞ ááÈäÇÁ ÇáãÍÏÏ
åá ÊÑíÏ ÇáãÊÇÈÚÉ','All prices of selected units wil be updated
Do you want to continue?'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÊÚÏíá ßÇÝÉ ÃÓÚÇÑ ÇáæÍÏÇÊ ááÈäÇÁ ÇáãÍÏÏ','All prices of selected building units wil be updated'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÊÚÏíá ßÇÝÉ ÃÓÚÇÑ ÇáæÍÏÇÊ ááÈäÇÁ ÇáãÍÏÏ
åá ÊÑíÏ ÇáãÊÇÈÚÉ','All prices of selected building units wil be updated
Do you want to continue?
'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÊäÝíÐ ÇáÚãáíÉ æ áä ÊÓÊØíÚ ÇáÊÑÇÌÚ','Process will be implemented and will not be able to undo'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÍÐÝ ÃíÖÇ ÌãíÚ ÇáÔíßÇÊ ÇáãÑÊÈØÉ Åä æÌÏÊ','All related cheque will be deleted'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã äÔÑ ÕáÇÍíÇÊ ÇáãÓÊÎÏã ','This process will publish user permissions'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã äÞá ÌãíÚ ÇáÈØÇÞÇÊ','This process will move all cards'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã æÞÝ ÇáÊÚÇãá ãÚ ÇáÈíÇäÇÊ ÇáÍÇáíÉ','This process will stop dealing with the current data'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓíÎÊáÝ ÇáÑÕíÏ ÍÓÈ ÇáÝÒÑ ÇáÎÇÕ ÇáãÍÏÏ ãä ÞÈáß','Balance will be different according to specific sorting'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓíÓÇÚÏß åÐå ÇáãÚÇáÌ Ýí ÊÏæíÑ ÇáÈíÇäÇÊ ÈØÑíÞÉ ÓåáÉ æ ÂãäÉ','This wizard will help you to close the file in an easy and safe way'
 
insert into [StrSource] 
([Ar],[En])
select  'ÔÑÇÁ','Purchase '
 
insert into [StrSource] 
([Ar],[En])
select  'ÔÑßÉ','Company'
 
insert into [StrSource] 
([Ar],[En])
select  'ÔÑæØ ÇáÏÝÚ','Payment terms'
 
insert into [StrSource] 
([Ar],[En])
select  'ÔÑæØ ÇáÚÞÏ','Contract terms'
 
insert into [StrSource] 
([Ar],[En])
select  'ÔÑæØ ÇáãÈáÛ','Amount terms'
 
insert into [StrSource] 
([Ar],[En])
select  'ÔÑíØ ÇáÊÐßíÑ','Remind bar'
 
insert into [StrSource] 
([Ar],[En])
select  'ÔÑíØ ÇáÊäÈíåÇÊ','Remind bar'
 
insert into [StrSource] 
([Ar],[En])
select  'ÔÞÉ','Flat'
 
insert into [StrSource] 
([Ar],[En])
select  'ÔÞÉ ÊÌãíÚíÉ','Assemblage flat'
 
insert into [StrSource] 
([Ar],[En])
select  'ÔÞÞ ÇáÈäÇÁ','Building flats'
 
insert into [StrSource] 
([Ar],[En])
select  'ÔÞÞ ÇáÎÏã','Servants flats'
 
insert into [StrSource] 
([Ar],[En])
select  'ÔÞÞ ÇáÓÇÆÞíä','Drivers flats'
 
insert into [StrSource] 
([Ar],[En])
select  'ÔÞÞ ÈäÇÁ','Building flats'
 
insert into [StrSource] 
([Ar],[En])
select  'ÔÞÞ æ ãÍáÇÊ ÇáÈäÇÁ','Building shops / flats'
 
insert into [StrSource] 
([Ar],[En])
select  'Ôßæì ÇáÕíÇäÉ','Maintenance complaint'
 
insert into [StrSource] 
([Ar],[En])
select  'ÔåÑ','Month'
 
insert into [StrSource] 
([Ar],[En])
select  'ÔåÑí','Monthly'
 
insert into [StrSource] 
([Ar],[En])
select  'Ôíß','cheque'
 
insert into [StrSource] 
([Ar],[En])
select  'Ôíß ãÏÝæÚ Åáì','Cheque paid to'
 
insert into [StrSource] 
([Ar],[En])
select  'Ôíß ãÞÈæÖ ãä','Cheque received from'
 
insert into [StrSource] 
([Ar],[En])
select  'ÔíßÇÊ','Cheques'
 
insert into [StrSource] 
([Ar],[En])
select  'ÔíßÇÊ ÍÓÈ ÎØÉ','cheques by plan'
 
insert into [StrSource] 
([Ar],[En])
select  'ÔíßÇÊ ÏÝÚ','Payable cheques'
 
insert into [StrSource] 
([Ar],[En])
select  'ÔíßÇÊ ÞÈÖ','Recievable cheques'
 
insert into [StrSource] 
([Ar],[En])
select  'ÔíßÇÊ ãÓÊÍÞÉ','Due cheques'
 
insert into [StrSource] 
([Ar],[En])
select  'ÕÇÍÈ ÇáÚÞÇÑ','Property owner'
 
insert into [StrSource] 
([Ar],[En])
select  'ÕÇÝí ÇáãÈáÛ ÇáãÓÊÍÞ','Net due amount'
 
insert into [StrSource] 
([Ar],[En])
select  'ÕÇÝí ÇáãÈáÛ ÇáãÓÊÍÞ ááãÇáß / ÇáÒÈæä','Net due amount to Owner / Customer'
 
insert into [StrSource] 
([Ar],[En])
select  'ÕÇÝí ÇáãÓÊÍÞ ááãÓÊÃÌÑ','Net due amount for customer'
 
insert into [StrSource] 
([Ar],[En])
select  'ÕÝÍÇÊ ÇáÈØÇÞÉ','Card pages'
 
insert into [StrSource] 
([Ar],[En])
select  'ÕáÇÍíÇÊ ÇáÝÑæÚ','Branches permissions'
 
insert into [StrSource] 
([Ar],[En])
select  'ÕáÇÍíÇÊ ÇáÞæÇÆã','Menu permissions'
 
insert into [StrSource] 
([Ar],[En])
select  'ÕäÏæÞ ÇáÈÑíÏ','P.O.Box'
 
insert into [StrSource] 
([Ar],[En])
select  'ÕäÏæÞ ÈÑíÏ','P.O.Box'
 
insert into [StrSource] 
([Ar],[En])
select  'ÕæÑ','Photos'
 
insert into [StrSource] 
([Ar],[En])
select  'ÕíÇäÉ','File maintenance'
 
insert into [StrSource] 
([Ar],[En])
select  'ÕíÇäÉ ÃÕá','Asset maintenance'
 
insert into [StrSource] 
([Ar],[En])
select  'Öã ÇáÓäæÇÊ ÇáÓÇÈÞÉ','Included previous years'
 
insert into [StrSource] 
([Ar],[En])
select  'ØÇÈÞ ãíÒÇäíä','Mizanin floor'
 
insert into [StrSource] 
([Ar],[En])
select  'ØÈÇÚÉ','Print'
 
insert into [StrSource] 
([Ar],[En])
select  'ØÈÇÚÉ ÅíÕÇá','Print receipt'
 
insert into [StrSource] 
([Ar],[En])
select  'ØÈÇÚÉ ÇáÊäÈíå','Print warning'
 
insert into [StrSource] 
([Ar],[En])
select  'ØÈÇÚÉ ÇíÕÇá','Print reciept'
 
insert into [StrSource] 
([Ar],[En])
select  'ØÈÇÚÉ ÈÑÇÁÉ ÐãÉ','Print clearance'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈíÇä ÇáÝíáÇ','Villa details'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈíÇä ÇáæÑÞÉ','Note details'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈíÇäÇÊ ÇáÔÞÉ','Flat details'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈíÇäÇÊ ÇáÔßæì','Complaint details'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈíÇäÇÊ ÇáÝíáÇ ÇáÎÇÑÌíÉ','Villa exterior details'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈíÇäÇÊ ÇáÝíáÇ ÇáÏÇÎáíÉ','Villa interior details'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈíÇäÇÊ ÇáßÝíá','Sponser data'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈíÇäÇÊ ÇáãæÞÝ','Parking data'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈíÇäÇÊ ÔÎÕíÉ 1','Peronal data 1'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈíÇäÇÊ ÔÎÕíÉ 2','Peronal data 2'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈíÚ','Sell'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈíÚ ÔÞÉ','Flat Selling'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈíÚ ãÍá','Shop Selling'
 
insert into [StrSource] 
([Ar],[En])
select  'Èíä','Between'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÃßÏ ãä ÅÏÎÇá ÇáÊÇÑíÎ ÈÔßá ÕÍíÍ','Make sure you enter the date correctly'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÃßÏ ãä ÅÏÎÇá ÇáãÈÇáÛ ÈÔßá ÕÍíÍ','Make sure you enter the amounts correctly'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÃßÏ ãä ÅÏÎÇá ÇáäÓÈ','Make sure to enter percentages'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÃßÏ ãä Ãäß áÇ ÊÖíÝ ÔÞÞ ãßÑÑÉ áäÝÓ ÇáÈäÇÁ','Make sure you do not add duplicate flat to the same building'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÃßÏ ãä Ãäß áÇ ÊÖíÝ ãÓÊæÏÚÇÊ ãßÑÑÉ áäÝÓ ÇáÈäÇÁ','Make sure you do not add duplicate warehouses for the same building'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÃßÏ ãä ÊÇÑíÎ ÇáÅäåÇÁ','Check termination date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÃßÏ ãä ßáãÉ ÇáãÑæÑ','Check the password'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÃßÏ ãä æÌæÏ ÇáÈÑäÇãÌ','Make sure the program is exist'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÃãíä ÇáÚÞÏ ÇáÍÇáí','Current contract deposit'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÃãíä ÇáÚÞÏ ÇáÓÇÈÞ','Previous contract deposit'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÃãíä ßåÑÈÇÁ','Electicity deposit'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÃãíäÇÊ ÇáÚÞæÏ','Contracts deposit report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ','Date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÂÎÑ ÏÝÚÉ ','Last payment date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÂÎÑ ÏÝÚÉ ãÓÊÍÞÉ','Last due payment date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÅÓÊËãÇÑ ÇáÈäÇÁ','Building investment date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÅÓÊÍÞÇÞ ÇáÏÝÚÉ','Payment due date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÅÞÝÇá ÃãÑ ÇáÕíÇäÉ ','Maintenance order closing date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÅäÊåÇÁ ÇáÅÞÇãÉ','Residence end date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÅäÊåÇÁ ÇáÍÌÒ ãÍÏÏ','Booking end date specified'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÅäÊåÇÁ ÇáÕáÇÍíÉ','Date of expiration'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÅäåÇÁ ÇáÍÌÒ','Booking termination date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÅäåÇÁ ÇáÚÞÏ','Contract termination date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÅäåÇÁ ÇáÚÞÏ ÃÕÛÑ ãä ÊÇÑíÎ ÈÏÇíÉ ÇáÚÞÏ ','Contract termination date is smaller than contract start date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÅäåÇÁ ÇáÚÞÏ ÞÈá ÊÇÑíÎ ÈÏÇíÊå ','Contract termination date before strarting date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ Ãæá ÞÓØ','First installment date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÅÎáÇÁ','Evacuation date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÅÏÎÇá','Input date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÅÑÌÇÚ','Return date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÅÓÊÍÞÇÞ','Due date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÅÓÊáÇã','Received date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÅÞÝÇá','Closing date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÅäÊÇÌ','Production date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÅäÊåÇÁ','Expire Date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÅäåÇÁ ãÍÏÏ','Termination date specific'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÇÑÌÇÚ','Return date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÇÓÊÍÞÇÞ','Due date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÇäÊåÇÁ ÇáãÊæÞÚ','Expected completion date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÈÏÁ ÃßÈÑ ãä ÊÇÑíÎ ÇáÇäÊåÇÁ','Start date is larger than the expiration date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÈÏÇíÉ','Start Date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÈíÚ','Selling date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÊÍÑíÑ','Issue date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÊÍÕíá','Collect date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÊÐßíÑ','Reminder date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÊÑÍíá','Deposit date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÊÙåíÑ','Endorsement date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÍÌÒ','Booking date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÎÑæÌ','Leaving date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÏÎæá','Joining date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÏÝÚÉ','Payment date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÓäÏ','Entry date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÔÍä','Shipping date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÔÑÇÁ','Purchase date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÖã ááãÍÝÙÉ','Joining date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÚÞÏ','Contract date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÚãáíÉ','Operation date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáãíáÇÏ','Date of birth'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáäåÇíÉ','Expire Date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáæÕæá','Arrive date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇäÊåÇÁ ÌæÇÒ ÇáÓÝÑ','Expiry passport date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÈÏÃ ÇáßÝÇáÉ','Warranty start date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÈÏÇíÉ ÇáÅÓÊËãÇÑ','Investment starting date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÈÏÇíÉ ÇáÅåÊáÇß','Depreciation starting date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÈÏÇíÉ ÇáÕíÇäÉ','Maintenance starting date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÈÏÇíÉ ÇáÚÞÏ','Contract starting date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÈÏÇíÉ ÇáÚÞÏ ÃßíÑ ãä ÊÇÑíÎ ÇáÅÓÊËãÇÑ !','Contract starting date is larger than investment starting date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÈÏÇíÉ ÇáãÏÉ','Start duration date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ØÈÇÚÉ ÇáÊäÈíå','Warn printing date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÚÞÏ ÇáÕíÇäÉ','Maintenance contract starting date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ äåÇíÉ ÇáÅÓÊËãÇÑ','Investment expiry date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ äåÇíÉ ÇáÚÞÏ','Contract expiry date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ äåÇíÉ ÇáÚÞÏ ÃßÈÑ ãä ÊÇÑíÎ äåÇíÉ ÇáÅÓÊËãÇÑ ááÃÑÖ','Contract expiry date is larger than investment end date of the land'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÑæÖ ãÊÝÑÞÉ','Various offers'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÑíÖ','Bold'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÞÏ ÃÑÖ','Land contract'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÞÏ ÅíÌÇÑ ÃÑÖ','Land rent contract'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÞÏ ÅíÌÇÑ ÔÞÉ','Flat rent contract'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÞÏ ÅíÌÇÑ ÝíáÇ','Villa rent contract'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÞÏ ÅíÌÇÑ ãÍá','Shop rent contract'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÞÏ ÅíÌÇÑ ãæÞÝ','Parking rent contract'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÞÏ ÇáÕíÇäÉ','Maintenance contract'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÞÏ ÇíÌÇÑ ÔÞÉ','Flat rent contract'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÞÏ ÇíÌÇÑ ãÍá','Shop rent rontract'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÞÏ ÇíÌÇÑ ãæÞÝ','Parking rent contract'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÞÏ ÈíÚ ÃÑÖ','Land selling contract'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÞÏ ÈíÚ ÔÞÉ','Flat selling contract'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÞÏ ÈíÚ ÝíáÇ','Villa selling contract'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÞÏ ÈíÚ ãÍá','Shop selling contract'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÞÏ ÈíÚ ãæÞÝ','Parking selling contract'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÞÏ ãæÞÝ','Parking contract'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÞæÏ ÇáÅíÌÇÑ  ','Rent contracts'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÞæÏ ÇáÈíÚ  ','Selling contracts'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÞæÏ ÇáãæÇÞÝ ÇáãÑÊÈØÉ','Related parking contracts'
 
insert into [StrSource] 
([Ar],[En])
select  'Úáíå ÏÚæì ÞÖÇÆíÉ','Lawsuit'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚáíåÇ ÏÚæì ÞÖÇÆíÉ','Lawsuit'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚãÇá ÇáÕíÇäÉ','Maintenance workers'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚãÑ ÇáÅÕá','Asset age'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚãáíÇÊ ÇáÃæÑÇÞ ÇáãÇáíÉ','Notes operations'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚãáíÇÊ ÇáÕíÇäÉ','Maintenance operations'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚãæÏí','Vertical'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚãæáÉ ÇáÎÏãÇÊ','Service commission'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚäÕÑ ÎÑíØÉ','Map element'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚäæÇä ÇáÒÈæä','Customer address'
 
insert into [StrSource] 
([Ar],[En])
select  'ÛÑÇãÇÊ ÇáÊÃÎíÑ','Delay fees'
 
insert into [StrSource] 
([Ar],[En])
select  ' ÅÑÓÇá ÑÓÇáÉ ÈÔßá Âáí ÞÈá ÇäÊåÇÁ ÇáÚÞÏ ÈÜ','Automatically send SMS before contract expiration'
 
insert into [StrSource] 
([Ar],[En])
select  ' ÇáÅÎÊÕÇÑÇÊ','Shortcuts'
 
insert into [StrSource] 
([Ar],[En])
select  ' ÇáÃÏæÇÊ','Tools'
 
insert into [StrSource] 
([Ar],[En])
select  ' ÇáÑÓÇÆá ÇáÞÕíÑÉ SMS','SMS'
 
insert into [StrSource] 
([Ar],[En])
select  ' ÈÇáÅÖÇÝÉ Çáì ','in addition to'
 
insert into [StrSource] 
([Ar],[En])
select  ' ÊÚÏíá ÊÚííä ÇáãæÞÚ','Reset Location'
 
insert into [StrSource] 
([Ar],[En])
select  ' ÊäÒíá ÞíãÉ ÇáÏÝÚÉ ÇáãÓÊÍÞÉ ÈÚÏ ÈíÚ ÇáÔÞÞ','Add value to the installment due after Flat Sale'
 
insert into [StrSource] 
([Ar],[En])
select  ' ÎØÃ Ýí ÇÓã ÇáãÓÊÎÏã Ãæ ßáãÉ ÇáãÑæÑ ','Wrong username or password'
 
insert into [StrSource] 
([Ar],[En])
select  ' ÎíÇÑÇÊ ÚÇãÉ','General Options'
 
insert into [StrSource] 
([Ar],[En])
select  ' ÔÞÉ','Flat'
 
insert into [StrSource] 
([Ar],[En])
select  ' ÚÞæÏ ÓÇÈÞÉ','Previous contracts'
 
insert into [StrSource] 
([Ar],[En])
select  ' ãÌãæÚÇÊ ÍÓÇÈ ÇáßãíÉ','Calculate quantity groups'
 
insert into [StrSource] 
([Ar],[En])
select  ' äÓÎÉ ÚÑÖ áÇ íãßä ÇáÏÎæá Çáì ÞÇÚÏÉ ÇáÈíÇäÇÊ','Demo version you can''t access this database'
 
insert into [StrSource] 
([Ar],[En])
select  ' æáÛÇíÉ ','To:'
 
insert into [StrSource] 
([Ar],[En])
select  ' íÌÈ ÊäÕíÈ ÇáäÓÎÉ ÇáÌÏíÏÉ','You must install new version'
 
insert into [StrSource] 
([Ar],[En])
select  '&ÊÚÏíá','&Modify'
 
insert into [StrSource] 
([Ar],[En])
select  '&ÍÝÙ ','&Save'
 
insert into [StrSource] 
([Ar],[En])
select  '[A] ÇÓã ÇáÒÈæä ÚÑÈí','[A] Arabic Customer Name'
 
insert into [StrSource] 
([Ar],[En])
select  '[A] ÇáÍÓÇÈ','[A] Account'
 
insert into [StrSource] 
([Ar],[En])
select  '[A] ÊÇÑíÎ ÇáÓäÏ','[A] Entry Date'
 
insert into [StrSource] 
([Ar],[En])
select  '[A] ÑÞã ÇáæÑÞÉ','[A] CheckNo'
 
insert into [StrSource] 
([Ar],[En])
select  '[B] ÇÓã ÇáÒÈæä áÇÊíäí','[B] Latin Customer Name'
 
insert into [StrSource] 
([Ar],[En])
select  '[B] ÇáÍÓÇÈ ÇáãÞÇÈá','[B] Obverse Account'
 
insert into [StrSource] 
([Ar],[En])
select  '[B] ÑÞã ÈØÇÞÉ ÇáÓäÏ ','[B] Entry Card No'
 
insert into [StrSource] 
([Ar],[En])
select  '[B] ÞíãÉ ÇáæÑÞÉ','[B] Check Value'
 
insert into [StrSource] 
([Ar],[En])
select  '[C] ÇáÞíãÉ','[C] Value'
 
insert into [StrSource] 
([Ar],[En])
select  '[C] ÊÇÑíÎ ÇáÇÓÊÍÞÇÞ','[C] Due Date'
 
insert into [StrSource] 
([Ar],[En])
select  '[C] ÑÞã ÇáÔÞÉ','[C] Flat Number'
 
insert into [StrSource] 
([Ar],[En])
select  '[C] ÑÞã ÇáÔßæì  ','[C] Complaint No'
 
insert into [StrSource] 
([Ar],[En])
select  '[C] ÑÞã ÇáÚÞÇÑ','[C] Property No.'
 
insert into [StrSource] 
([Ar],[En])
select  '[C] ÞíãÉ ÇáÔíß ','[C] ChequeValue'
 
insert into [StrSource] 
([Ar],[En])
select  '[C] ãÏíä','[C] Debit'
 
insert into [StrSource] 
([Ar],[En])
select  '[D] ÅÓã ÇáÈäÇÁ ÚÑÈí','[D] Building Arabic Name'
 
insert into [StrSource] 
([Ar],[En])
select  '[D] ÅÓã ÇáÈäß','[D] Bank Name'
 
insert into [StrSource] 
([Ar],[En])
select  '[D] ÇáÏÇÆä','[D] Credit'
 
insert into [StrSource] 
([Ar],[En])
select  '[D] ÊÇÑíÎ ÊÍÑíÑ ÇáÔßæì ','[D] Complaint Date'
 
insert into [StrSource] 
([Ar],[En])
select  '[D] ÑÞã ÃãÑ ÇáÕíÇäÉ','[D] Maintenance Order No'
 
insert into [StrSource] 
([Ar],[En])
select  '[D] ÑÞã ÇáÔíß ','[D] Cheque No'
 
insert into [StrSource] 
([Ar],[En])
select  '[D] ÑÞã ÇáÚÞÏ','[D] Contract No'
 
insert into [StrSource] 
([Ar],[En])
select  '[E] ÅÓã ÇáÈäÇÁ áÇÊíäí','[E]  Building Latin Name'
 
insert into [StrSource] 
([Ar],[En])
select  '[E] ÅÓã ÇáãÞÈæÖ ãäå','[E] Recipient Name'
 
insert into [StrSource] 
([Ar],[En])
select  '[E] ÇÓã ÇáÈäÇÁ  ÚÑÈí','[E] Arabic Building Name'
 
insert into [StrSource] 
([Ar],[En])
select  '[E] ÇÓã ÇáÈäß  ','[E] Bank Name'
 
insert into [StrSource] 
([Ar],[En])
select  '[E] ÇáÑÞã','[E] Number'
 
insert into [StrSource] 
([Ar],[En])
select  '[E] ÈíÇä ÇáÓäÏ','[E] Entry Details'
 
insert into [StrSource] 
([Ar],[En])
select  '[F] ÇÓã ÇáÈäÇÁ  áÇÊíäí','[F] Latin Building Name'
 
insert into [StrSource] 
([Ar],[En])
select  '[F] ÈíÇä ÇáÞáã','[F] Line Details'
 
insert into [StrSource] 
([Ar],[En])
select  '[F] ÊÇÑíÎ ÇáÅÓÊÍÞÇÞ','[F] Due Date'
 
insert into [StrSource] 
([Ar],[En])
select  '[F] ÊÇÑíÎ ÇáÇÓÊÍÞÇÞ ','[F] Due Date'
 
insert into [StrSource] 
([Ar],[En])
select  '[F] ÊÇÑíÎ ÇáÊÍÑíÑ','[F] Issue Date'
 
insert into [StrSource] 
([Ar],[En])
select  '[G] ÇÓã ÇáãÏÝæÚ áå','[G] Payee name'
 
insert into [StrSource] 
([Ar],[En])
select  '[G] ÇÓã ÍÓÇÈ ÇáÓäÏ','[G] Entry Account Name'
 
insert into [StrSource] 
([Ar],[En])
select  '[G] ÇáÚÇãá ÇáãÓÄæá ','[G] Worker Name'
 
insert into [StrSource] 
([Ar],[En])
select  '[G] ÊÇÑíÎ ÅäÊåÇÁ ÇáÚÞÏ','[G] Contract expiry date'
 
insert into [StrSource] 
([Ar],[En])
select  '[G] ÊÇÑíÎ ÈÏÇíÉ ÇáÚÞÏ','[G] Contract Starting Date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÛÑÇãÉ ÇáÅÑÌÇÚ','Return fee'
 
insert into [StrSource] 
([Ar],[En])
select  'ÛÑÇãÉ ÇáÊÃÎíÑ','Delay fees'
 
insert into [StrSource] 
([Ar],[En])
select  'ÛÑÇãÉ ÇáÔíß ÇáãÑÊÌÚ','Returned cheque fees'
 
insert into [StrSource] 
([Ar],[En])
select  'ÛÑÇãÉÇáÅÑÌÇÚ','Return fee'
 
insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ÇáãÄÌÑÉ','Non-leased'
 
insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ÇáãÈÇÚÉ','Unsold'
 
insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ÇáãÍÕáÉ','Un-collected'
 
insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ÇáãÍÙæÑ','Un-blocking'
 
insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ÇáãÑÊÌÚÉ','Not returned'
 
insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ÇáãÑÍá / ÞíãÉ','Not deposit \ Value'
 
insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ÇáãäÊåíÉ','Un-finished'
 
insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ÞÇÈá ááÅÑÌÇÚ','Unable to return'
 
insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ÞÇÈá ááÊÍÕíá','Unable to collect'
 
insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ÞÇÈá ááÊÑÍíá','Unable to deposit'
 
insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ÞÇÈá ááÊÙåíÑ','Unable to endorsement'
 
insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ãÄÌÑ','Non-leased'
 
insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ãÄÌÑÉ','Non-leased'
 
insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ãÈÇÚ','Not sold'
 
insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ãÍÕá','Uncollected'
 
insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ãÍÕá ÃÕáÇð','It is already not collected'
 
insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ãÑÊÌÚ','Not returned'
 
insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ãÑÌÚ ÃÕáÇð','It is already not returned'
 
insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ãÑÍá','Not posted'
 
insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ãÑÍá ÃÕáÇð','It is already not posted'
 
insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ãÑÍá ááÈäß','Not posted to bank'
 
insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ãÑÍáÉ ááÈäß','Not posted to bank'
 
insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ãÙåÑ ÃÕáÇð','It is already not endorsed'
 
insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ãÙåÑÉ','Not endorsed'
 
insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ãäÊåí','valid'
 
insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ãäÊåí ÇáãÏÉ','Not expired'
 
insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ãæÌæÏÉ','Not available'
 
insert into [StrSource] 
([Ar],[En])
select  'ÝÇÊæÑÉ ßåÑÈÇÁ','Electricity bill'
 
insert into [StrSource] 
([Ar],[En])
select  'ÝÇßÓ','Fax'
 
insert into [StrSource] 
([Ar],[En])
select  'ÝÊÍ','Open'
 
insert into [StrSource] 
([Ar],[En])
select  'ÝÊÍ ÇáÅÚÏÇÏÇÊ','Settings'
 
insert into [StrSource] 
([Ar],[En])
select  'ÝÊÍ ÇáÈíÇäÇÊ','Open data'
 
insert into [StrSource] 
([Ar],[En])
select  'ÝÊÍ Ïáíá ÇáÍÓÇÈÇÊ','Open chart of account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÝÊÍ Ïáíá ãÑÇßÒ ÇáßáÝÉ','Open chart of cost center'
 
insert into [StrSource] 
([Ar],[En])
select  'ÝÊÑÉ ÍÓÇÈ ÇáÅíÑÇÏ : ','Revenue calculate period:'
 
insert into [StrSource] 
([Ar],[En])
select  'ÝÑÏ','Person'
 
insert into [StrSource] 
([Ar],[En])
select  'ÝÑÖ ÅÏÎÇá ÇáÈíÇä áßá Þáã','Force filling details for each line'
 
insert into [StrSource] 
([Ar],[En])
select  'ÝÑÖ ÅÏÎÇá ãÑßÒ ÇáßáÝÉ áßá Þáã','Force filling cost center for each line'
 
insert into [StrSource] 
([Ar],[En])
select  'ÝÑæÞÇÊ ÃÓÚÇÑ ÇáÕÑÝ','Currency rate differences'
 
insert into [StrSource] 
([Ar],[En])
select  'ÝæÇÊíÑ ÇáßåÑÈÇÁ','Electricity bills'
 
insert into [StrSource] 
([Ar],[En])
select  'ÝæÇÊíÑ ßåÑÈÇÁ','Electricity bills'
 
insert into [StrSource] 
([Ar],[En])
select  '[G] ÑÞã ÇáÔÞÉ ','[G] Flat No'
 
insert into [StrSource] 
([Ar],[En])
select  '[H] ÅÓã ÇáÈäÇÁ','[H] Building Name'
 
insert into [StrSource] 
([Ar],[En])
select  '[H] ÅÓã ÍÓÇÈ ÇáÞáã','[H] Line Account Name'
 
insert into [StrSource] 
([Ar],[En])
select  '[H] ÇáÍÇáÉ  ','[H] Status'
 
insert into [StrSource] 
([Ar],[En])
select  '[H] ÊÇÑíÎ äåÇíÉ ÇáÚÞÏ','[H] Contract End Date'
 
insert into [StrSource] 
([Ar],[En])
select  '[H] ÑÞã ÇáÚÞÇÑ','[H] Property No.'
 
insert into [StrSource] 
([Ar],[En])
select  '[H] ÑÞã ÇáÚÞÏ  ','[H] Contract No'
 
insert into [StrSource] 
([Ar],[En])
select  '[H] ÑÞã åÇÊÝ ÇáÌæÇá ááÚÇãá ÇáãÓÄæá ','[H] Worker Mobile No'
 
insert into [StrSource] 
([Ar],[En])
select  '[I] ÇÓã ÇáÈäÇÁ  ÚÑÈí','[I] Arabic Building Name'
 
insert into [StrSource] 
([Ar],[En])
select  '[I] ÊÇÑíÎ ÇáÇäÊåÇÁ ÇáãÊæÞÚ ','[I] Expected completion date'
 
insert into [StrSource] 
([Ar],[En])
select  '[J] ÇÓã ÇáÈäÇÁ  áÇÊíäí','[J] Latin Building Name'
 
insert into [StrSource] 
([Ar],[En])
select  '[J] ÑÞã ÇáÔÞÉ','[J] Flat No.'
 
insert into [StrSource] 
([Ar],[En])
select  '[J]ÊÇÑíÎ ÈÏÇËÉ ÇáÕíÇäÉ','[J] Maintenance Starting Date'
 
insert into [StrSource] 
([Ar],[En])
select  '[J]ÊÇÑíÎ ÈÏÇíÉ ÇáÕíÇäÉ','[J] Maintenance Starting Date'
 
insert into [StrSource] 
([Ar],[En])
select  '[K] ÊÇÑíÎ ÇáÅÑÌÇÚ','[K] Return Date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈäÇÁ','Building'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈäÇíÉ','Building'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈäÊ åÇæÓ','Pent house'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈíÇä ÇáÃÑÖ','Land details'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈíÇä ÇáÍÓÇÈ','Account notes'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈíÇä ÇáÍÓÇÈ ÇáãÞÇÈá','Obverse account notes'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈíÇä ÇáÓäÏ','Journal entry details'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈíÇä ÇáÚÞÇÑ','Property details'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈíÇä ÇáÚÞÏ','Contract details'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈíÇä ÇáÚãáíÇÊ','Operations details'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊßáÝÉ ÇáÔÞÉ','Flats cost'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã','Done'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓäÏ ÞíÏ ÛíÑ ãÊæÇÒä ','Journal entry unbalanced'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓäÏ íæãíÉ','Journal enrty'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓäÏÇÊ','Entries'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓäÏÇÊ ÇáÞíÏ','Journal entries'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓäÏÇÊ ÏÝÚ   ','Payment vouchers'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓäÏÇÊ ÞÈÖ   ','Reciept vouchers'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÅÓÊÑÌÇÚ ÈíÇäÇÊ ÓÇÈÞÉ','Previous data will be restored'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÅÖÇÝÉ ÇáÃæÑÇÞ ÇáãÇáíÉ ÇáãÍÏÏÉ','Selected checks will be added'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÅÖÇÝÉ ÇáÃæÑÇÞ ÇáãÇáíÉ ÇáãÍÏÏÉ
åá ÊÑíÏ ÇáãÊÇÈÚÉ','Selected checks will be added
Do you want to continue?'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÅÖÇÝÉ ÈØÇÞÇÊ ÔÞÞ ÇáÈäÇÁ ÇáãÍÏÏ ','Selected flats building cards will be added'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÅÖÇÝÉ ÈØÇÞÇÊ ãßÇÊÈ ÇáÈäÇÁ ÇáãÍÏÏ ','Selected office building cards will be added'
 
insert into [StrSource] 
([Ar],[En])
select  'ßáÝÉ ÇáæÍÏÉ','Unit cost'
 
insert into [StrSource] 
([Ar],[En])
select  'ßáãÉ ÇáãÑæÑ','Password'
 
insert into [StrSource] 
([Ar],[En])
select  'ßáãÉ ÇáãÑæÑ ÇáÌÏíÏÉ','New Password'
 
insert into [StrSource] 
([Ar],[En])
select  'ßáãÉ ÇáãÑæÑ ÇáÞÏíãÉ ','Old Password'
 
insert into [StrSource] 
([Ar],[En])
select  'ßáãÉ ÇáãÑæÑ ÛíÑ ÕÍíÍÉ','Password is incorrect'
 
insert into [StrSource] 
([Ar],[En])
select  'ßãíÉ ÇáÅÓÊåáÇß [X]','Consumption quantity [X]'
 
insert into [StrSource] 
([Ar],[En])
select  'ßåÑÈÇÁ','Electricity'
 
insert into [StrSource] 
([Ar],[En])
select  'ßíÝíÉ ÇáÊæÒíÚ','Distribution method'
 
insert into [StrSource] 
([Ar],[En])
select  'áÇ','No'
 
insert into [StrSource] 
([Ar],[En])
select  'áÇ Êãáß ÇáÕáÇÍíÇÊ ááÞíÇã ÈåÐå ÇáÚãáíÉ','You don''t have permission to do this operation'
 
insert into [StrSource] 
([Ar],[En])
select  'áÇ Êãáß ÇáÕáÇÍíÇÊ ááÞíÇã ÈåÐå ÇáÚãáíÉ
ÈÓÈÈ ãÓÊæì ÇáÓãÇÍíÉ

ÑÇÌÚ ãÏíÑ ÇáäÙÇã','You don''t have permission to do this operation because of security level
Contact your system administrator'
 
insert into [StrSource] 
([Ar],[En])
select  'áÇ Êãáß ÇáÕáÇÍíÇÊ áãÔÇåÏÉ ßÇãá ÇáÈíÇäÇÊ','You don''t have permission to see all information'
 
insert into [StrSource] 
([Ar],[En])
select  'áÇ Êãáß ÕáÇÍíÉ ÊÚÏíá ÚÞæÏ ÇáÛíÑ','You don''t have permission to modify contracts made by another user'
 
insert into [StrSource] 
([Ar],[En])
select  'áÇ ÊæÌÏ äÊÇÆÌ ááÚÑÖ','No result'
 
insert into [StrSource] 
([Ar],[En])
select  'áÇ íÍæí','Not contain'
 
insert into [StrSource] 
([Ar],[En])
select  'áÇ íãßä ÅÊãÇã ÇáÍÌÒ , ÇáÚÞÇÑ ãÄÌÑ ÑÞã ÇáÚÞÏ : ','Reservations can not be completed, the property leased, Contract No:'
 
insert into [StrSource] 
([Ar],[En])
select  'áÇ íãßä ÅÊãÇã ÇáÍÌÒ , ÇáÚÞÇÑ ãÍÌæÒ ÑÞã ÇáÈØÇÞÉ : ','Reservations can not be completed, the property is reserved, card number:'
 
insert into [StrSource] 
([Ar],[En])
select  'áÇ íãßä ÅÊãÇã ÇáÚÞÏ , ÇáÚÞÇÑ ãÄÌÑ ÑÞã ÇáÚÞÏ : ','Can not complete the contract, the property leased, Contract No:'
 
insert into [StrSource] 
([Ar],[En])
select  'áÇ íãßä ÅÊãÇã ÇáÚÞÏ , ÇáÚÞÇÑ ãÈÇÚ  ÑÞã ÇáÚÞÏ : ','Can not complete the contract, the property sold Contract No:'
 
insert into [StrSource] 
([Ar],[En])
select  'áÇ íãßä ÅÊãÇã ÇáÚÞÏ , ÇáÚÞÇÑ ãÍÌæÒ ÑÞã ÇáÈØÇÞÉ : ','Can not complete the contract, the property is reserved, card number:'
 
insert into [StrSource] 
([Ar],[En])
select  'áÇ íãßä ÅÊãÇã ÇáÚÞÏ áÇä ÇáãæÞÝ ãÍÌæÒ','The contract can not be completed because the parking is reserved'
 
insert into [StrSource] 
([Ar],[En])
select  'áÇ íãßä ÅÊãÇã ÇáÚãáíÉ','Can not complete the process'
 
insert into [StrSource] 
([Ar],[En])
select  'áÇ íãßä ÅÏÑÇÌ ÇáÍÓÇÈ : ','Account can not be inserted:'
 
insert into [StrSource] 
([Ar],[En])
select  'áÇ íãßä ÅÖÇÝÉ ÅÈä  áãÑßÒ ßáÝÉ ãÓÊÎÏã Ýí ÈØÇÞÉ ÔÞÉ','Unable to add sub-cost center to cost center already used in flat card'
 
insert into [StrSource] 
([Ar],[En])
select  'áÇ íãßä ÅÖÇÝÉ ÅÈä  áãÑßÒ ßáÝÉ ãÓÊÎÏã Ýí ÓäÏÇÊ ÇáÞíÏ','Unable to add sub-cost center to cost center already used in journal entry'
 
insert into [StrSource] 
([Ar],[En])
select  'áÇ íãßä ÅÖÇÝÉ ÅÈä áÍÓÇÈ ãÓÊÎÏã Ýí ÓäÏÇÊ ÇáÞíÏ','You can not add sub-account to account used in entries'
 
insert into [StrSource] 
([Ar],[En])
select  'áÇ íãßä ÅÖÇÝÉ ÇáÔÞÉ áÇäåÇ æÇÑÏÉ Ýí ÚÞÏ : ','You can not add the flat because it is contained in the contract:'
 
insert into [StrSource] 
([Ar],[En])
select  'áÇ íãßä ÅÖÇÝÉ ÇáãÍá áÇäå æÇÑÏ Ýí ÚÞÏ : ','You can not add the shop because it is contained in the contract:'
 
insert into [StrSource] 
([Ar],[En])
select  'áÇ íãßä Ãä Êßæä ÇáãÌãæÚÉ ÇáÑÆíÓíÉ åí ÇáãÌæÚÉ äÝÓåÇ Ãæ ÃÍÏ ÇÈäÇÆåÇ','Main group can''t be the same group itself or its sons'
 
insert into [StrSource] 
([Ar],[En])
select  'áÇ íãßä Ãä íßæä  ÇáãÓÊæÏÚ ÇáÑÆíÓí åæ ÇáãÓÊæÏÚ  äÝÓå Ãæ ÃÍÏ ÇÈäÇÆå','Main store can''t be the same store itself or its sons'
 
insert into [StrSource] 
([Ar],[En])
select  'áÇ íãßä Ãä íßæä ÇáÍÓÇÈ ÇáÎÊÇãí åæ ÇáÍÓÇÈ äÝÓå Ãæ ÃÍÏ ÇÈäÇÆå','Closing account can''t be the same account itself or its sons'
 
insert into [StrSource] 
([Ar],[En])
select  'áÇ íãßä Ãä íßæä ÇáÍÓÇÈ ÇáÑÆíÓí åæ ÇáÍÓÇÈ äÝÓå Ãæ ÃÍÏ ÇÈäÇÆå','Main account can''t be the same account itself or its sons'
 
insert into [StrSource] 
([Ar],[En])
select  'áÇ íãßä Ãä íßæä ÇáãÑßÒ ÇáÑÆíÓí åæ ÇáãÑßÒ äÝÓå Ãæ ÃÍÏ ÇÈäÇÆå','Main cost center account can''t be the same account itself or its sons'
 
insert into [StrSource] 
([Ar],[En])
select  'áÇ íãßä ÇáÞíÇã ÈÇáÊÚÏíá Ýí ÇáæÞÊ ÇáÍÇáí ','Unable to modify now'
 
insert into [StrSource] 
([Ar],[En])
select  'áÇ íãßä ÇáÞíÇã ÈÇáÚãáíÉ','Can not do this operation'
 
insert into [StrSource] 
([Ar],[En])
select  'áÇ íãßä ÇáÞíÇã ÈÇáÚãáíÉ Ýí ÇáæÞÊ ÇáÍÇáí ','Unable to do this operation now'
 
insert into [StrSource] 
([Ar],[En])
select  'áÇ íãßä ÇáÞíÇã ÈåÐå ÇáÚãáíÉ','Can not do this operation'
 
insert into [StrSource] 
([Ar],[En])
select  'áÇ íãßä ÊæáíÏ ãÑßÒ ÇáßáÝÉ','Unable to generate cost center'
 
insert into [StrSource] 
([Ar],[En])
select  'áÇ íãßä ÍÐÝ ÇáÞíÏ ÇáÍÇáí áÇä áå ÃÕá','Unable to delete current journal entry because it''s has origin'
 
insert into [StrSource] 
([Ar],[En])
select  'áÇ íãßä ÍÝÙ ÞíÏ ÝÇÑÛ','Can not save empty entry'
 
insert into [StrSource] 
([Ar],[En])
select  'áÇ íæÌÏ ÎÑíØÉ ááäãØ ÇáãÍÏÏ','No map for selected type'
 
insert into [StrSource] 
([Ar],[En])
select  'áÇ íæÌÏ ÏÚæì','No lawsuit'
 
insert into [StrSource] 
([Ar],[En])
select  'áÇÊíäí','Latin'
 
insert into [StrSource] 
([Ar],[En])
select  'áÇä ÇáæÑÞÉ ÇáãÇáíÉ ãÍÕáÉ','because this check is collected'
 
insert into [StrSource] 
([Ar],[En])
select  'áÇä ÇáæÑÞÉ ÇáãÇáíÉ ãÍÕáÉ ãÓÈÞÇ','because this check is already collected'
 
insert into [StrSource] 
([Ar],[En])
select  'áÇä ÇáæÑÞÉ ÇáãÇáíÉ ãÑÊÌÚÉ','because this check is already returned'
 
insert into [StrSource] 
([Ar],[En])
select  'áÇä ÇáæÑÞÉ ÇáãÇáíÉ ãÑÍáÉ','because this check is already deposited'
 
insert into [StrSource] 
([Ar],[En])
select  'áÇä ÇáæÑÞÉ ÇáãÇáíÉ ãÑÍáÉ ãÓÈÞÇ','because this check is already deposited'
 
insert into [StrSource] 
([Ar],[En])
select  'áÇä ÇáæÑÞÉ ÇáãÇáíÉ ãÙåÑÉ','because this check is already endorsed'
 
insert into [StrSource] 
([Ar],[En])
select  'áÊØÈíÞ ÇáÊÛíÑÇÊ íÌÈ ÅÚÇÏÉ ÊÔÛíá ÇáÈÑäÇãÌ','To apply changes you must restart the program'
 
insert into [StrSource] 
([Ar],[En])
select  'áÏíß ÅÕÏÇÑ ÌÏíÏ ãä ÇáÈÑäÇãÌ ','You have a new version of the program'
 
insert into [StrSource] 
([Ar],[En])
select  'áÏíß ÅÕÏÇÑ ÌÏíÏ ãä ÇáÈÑäÇãÌ 
íÌÈ ÊÍÏíË ÇáãáÝÇÊ
åá ÊÑíÏ ÇáÞíÇã ÈÚãáíÉ ÇáÊÍÏíË ÇáÂä ¿','You have a new version of the program 
You must update the files 
Do you want to update now?'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÃÑÇÖí ÇáãÄÌÑÉ','Number of leased land'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÃÑÇÖí ÛíÑ ÇáãÄÌÑÉ','Number of non-leased land'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÃÑÞÇã ÈÚÏ ÇáÝÇÕáÉ ÇáÅÌÈÇÑíÉ','Number of digits after required comma'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÃÑÞÇã ÈÚÏ ÇáÝÇÕáÉ ÇáÅÎÊíÇÑíÉ','Number of digits after optional comma'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÃÞÓÇØ','Number of Installments'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÃíÇã','Number of days'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÃíÇã ÇáãÊÈÞíÉ','Remaining days No'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÃíÇã ÇáãÊÈÞíÉ ááÍÌÒ ÃÕÛÑ ãä','Remaining days number of reservation is smaller than'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÃíÇã ÇáãÓÊÍÞÉ','Due days No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÃíÇã ãä','Number of days from'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÍÏÇÆÞ','Gardens No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÍãÇãÇÊ','Bathroom No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÓÇßäíä','Residents count'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÓäæÇÊ','Number of Years'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÔÑÝÇÊ','Balcony No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÔÞÞ','Flats count'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÔÞÞ ÇáÊí ÚáíåÇ ÏÚæì ÞÖÇÆíÉ','Number of flats has lawsuit'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÔÞÞ ÇáãÄÌÑÉ','Number of leased flats'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÔÞÞ ÛíÑ ÇáãÄÌÑÉ','Number of non-leased flats'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÔÞÞ Ýí ÇáØÇÈÞ','Flats No. in floor'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÔæÇÑÚ','Streets No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáØæÇÈÞ','Floors count'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÚÞæÏ','Number of contracts'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÛÑÝ ÇáÃÎÑì','Number of extra rooms'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÛÑÝ ÇáÃÓÇÓíÉ','Number of main rooms'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáãÍáÇÊ','Shops count'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáãÓÇÈÍ','Basin count'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáãÓÊæÏÚÇÊ','Warehouses No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáãáÇÚÈ','Play yards count'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáäÓÎ ÇáãÄÞÊÉ','Number of temporary copies'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÔÞ ÇáÓÇÆÞíä','Number of drivers flats'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÔÞÞ ÇáÈäÇÁ','Number of flats building'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÔÞÞ ÇáÎÏã ','Number of servants flats'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÔÞÞ ÇáÓÇÆÞíä','Number of drivers flats'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ØæÇÈÞ ÇáÈäÊ åÇæÓ','Number of penthouse floors'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ØæÇÈÞ ÇáÔÞÞ','Number of flats floors'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ØæÇÈÞ ÇáãßÇÊÈ','Number of offices floors'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ØæÇÈÞ ÇáãæÇÞÝ','Number of parking floors'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ØæÇÈÞ ÇáãæÇÞÝ ÊÍÊ ÇáÇÑÖ','Number of underground parking floors'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ØæÇÈÞ ÇáãíÒÇäíä','Number of mizanen floors'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÛÑÝ ÇáÎÏã','Number of maid room'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ãÑÇÊ ÅÑÓÇá SMS','Number of times send SMS'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ãÑÇÊ ÇáØÈÇÚÉ','Number of times printing'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ãæÇÞÝ ÇáÓíÇÑÇÊ','Parking count'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ äÞÇØ ÇáÅäÇÑÉ','Lighting points count'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ æÍÏÇÊ ÇáÅäÊÇÌ ÇáãÊæÞÚÉ','Expected production units number'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏã ÅÓÊÌÇÈÉ','No response'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏã ÊæÝÑ ÑÕíÏ','No balance'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÑÈí','Arabic'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÑÖ','Preview'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÑÖ ÇáÃæÑÇÞ ÇáãÇáíÉ ÇáãÏÝæÚÉ ÇáãÓÊÍÞÉ','View due payable notes'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÑÖ ÇáÃæÑÇÞ ÇáãÇáíÉ ÇáãÞÈæÖÉ ÇáãÓÊÍÞÉ','View due recievable notes'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÑÖ ÇáÈØÇÞÉ','View card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÑÖ ÇáÔíß','View cheque'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÑÖ ÇáÞíÏ','View entry'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÑÖ ÇáÞíæÏ ÇáãÑÍáÉ','View posted entry'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÑÖ ÇáÞíæÏ ÛíÑ ÇáãÑÍáÉ','View non-posted entry'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÑÖ ÇáãÈáÛ ÇáãÏÝæÚ','Show paid amount'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÑÖ ÇáãÏÞÞ','Show checked box'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÑÖ ÇáãÑÇÌÚ','View checked'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÑÖ ÈÇáÃÑÕÏÉ','Show by balance'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÑÖ ÈÇáãÌÇãíÚ','Show by total'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÑÖ ÓÚÑ ÇáßáÝÉ','Show cost price'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÑÖ ÛíÑ ÇáãÏÞÞ','Show Unchecked box'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÑÖ ÛíÑ ÇáãÑÇÌÚ','View un-checked'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÑÖ ÞíÏ','View entry'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÑÖ ÞíÏ ÇáÊÇãíäÇÊ','View deposit entry'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÑÖ ÞíÏ ÇáãÈáÛ ÇáãÓÊÍÞ','View due amount entry'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÏÉ ÇáÚÞÏ','Contract duration'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÏÝæÚÉ','Paid'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÏíä','Debit'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÏíäÉ','Debited'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÐßÑÉ ÅåÊáÇß ÇáÃÕæá','Depreciation asset card'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÑÇÌÚ','Checked'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÑÇÌÚÉ ÚãáíÇÊ ÇáÇæÑÇÞ ÇáãÇáíÉ','Checked for notes operations'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÑÇßÒ ÇáßáÝ','Cost centers'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÑÇßÒ ÇáßáÝÉ   ','Cost centers'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÑÊÈØÉ ÈÈäÇÁ','Linked to building'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÑÊÌÚ','Returned'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÑÊÌÚ ÔÑÇÁ','Purchase return'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÑÊÌÚ ãÈíÚ','Sales return'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÑÊÌÚ ãÓÈÞÇð','Already returned'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÑÊÌÚÉ','Returned'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÑÊÍÚ ãä /íæã','Returned from / day'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÑÍá','Posted'
 
insert into [StrSource] 
([Ar],[En])
select  'ãõÑÍá','Posted'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÑÍá ááÈäß','Posted to bank'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÑÍáÉ','Posted'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÑÍáÉ ááÈäß','Posted to bank'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÑßÒ ÇáßáÝÉ','Cost center'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÑßÒ ÇáßáÝÉ ÇáÃÈ ááÃÈäíÉ','Main building cost center'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÑßÒ ÇáßáÝÉ ÇáÑÆíÓí','Main cost center'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÑßÒ ÇáßáÝÉ ÏÇÆä','Credit cost center'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÑßÒ ÇáßáÝÉ ãÏíä','Debit cost center'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÑßÒ ÇáßáÝÉ ãÓÊÎÏã Ýí ÓäÏÇÊ ÇáÞíÏ','Cost center is used in entries'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÑßÒ ÇáßáÝÉ ãßÑÑ','Duplicate cost center'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÑßÒ ßáÝÉ ÇáÑÆíÓí','Main cost center'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÑßÒ ßáÝÉ ÇáÑÆíÓí áÔÞÞ ÇáÈäÇÁ','Main cost center for flats'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÓÇÍÉ ÇáÃÑÖ','Land area'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÓÇÍÉ ÇáÃÑÖ ÇáãÚãÑÉ','Built land area'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÓÇÍÉ ÇáÍÏÇÆÞ','Gardens area'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÓÇÍÉ ÇáãáÇÚÈ','Play yard area'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÓÇÍÉ ãæÇÞÝ ÇáÓíÇÑÇÊ','Car parking area'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÓÇÑ 1','Path 1'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÓÇÑ 2','Path 2'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÓÇÑ ÇáäÓÎ ÇáÅÍÊíÇØí','Backup location path'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÓÇÚÏÉ','Help'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÓÊÍÞÉ','Due'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÓÊæÏÚíÉ','Stored'
 
insert into [StrSource] 
([Ar],[En])
select  'ÝíáÇ','Villa'
 
insert into [StrSource] 
([Ar],[En])
select  'ÝíááÇ','Villa'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞÇÈá ááÅÑÌÇÚ','Can be returned'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞÇÈá ááÈäÇÁ','Can be build'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞÇÈá ááÊÍÕíá','Can be collected'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞÇÈá ááÊÍÕíá ÇáÌÒÆí','Can be partial collection'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞÇÈá ááÊÑÍíá','Can be posted'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞÇÈá ááÊÙåíÑ','Can be endrosed'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞÇÚÏÉ ÇáÈíÇäÇÊ ãæÌæÏÉ íÑÌì ÇÓÊÎÏÇã ÇÓã ÂÎÑ','Database already exists please use another name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞÈá ÇáÈÏÃ ÈÚãáíÉ ÇáÅÓÊÑÌÇÚ','Before starting restore process'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞÏ ÊÎÊáÝ äÊÇÆÌ ÇáÊÞÑíÑ ÊÈÚÇð ááÔÑæØ ÇáãÍÏÏÉ','Results will be different depending on the specific conditions of report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞÑÈ ÅÎáÇÄåÇ','Near to evacuate'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞÑÈ ÅäÊåÇÁ ÇáÚÞÏ','Contract near to expire'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞÕ','Cut'
 
insert into [StrSource] 
([Ar],[En])
select  'Þã ÈÍÐÝ ÇáÃÕá ÇæáÇ','First delete asset'
 
insert into [StrSource] 
([Ar],[En])
select  'Þã ÈÍÐÝ ÇáÚãáíÇÊ ÇáãÑÊÈØÉ ÃæáÇ','First you have to delete all related operations'
 
insert into [StrSource] 
([Ar],[En])
select  'Þã ÈÍÝÙ ÇáÈØÇÞÉ ÇáÍÇáÉ ÃæáÇð','First you have to save current card'
 
insert into [StrSource] 
([Ar],[En])
select  'Þã ÈÍÝÙ ÇáÈØÇÞÉ ÇáÍÇáíÉ ÃæáÇð','First delete current card'
 
insert into [StrSource] 
([Ar],[En])
select  'Þã ÈÍÝÙ ÇáÈØÇÞÉ ÇæáÇ','First delete card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíÏ','Entry'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíÏ ÅÝÊÊÇÍí','Opening journal entry'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíÏ ÇÝÊÊÇÍí ','Opening journal entry'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíÏ ÇáÅäÌÇÒ','Under process'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíÏ ÝÑæÞÇÊ ÃÓÚÇÑ ÇáÕÑÝ','Exchange rate entry'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÂÎÑ ÏÝÚÉ ','Last payment value'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÅÏÎÇá','Input value'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÃÑÖ','Land value'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÅÓÊËãÇÑ','Investment value'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÅÓÊåáÇß','Consumption value'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÃÕá','Asset value'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÃÕá ßÎÑÏÉ','Asset value as scrap'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÅÖÇÝÉ','Extra value '
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÅåÊáÇß','Depreciation value'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÅíÌÇÑ','Rent value'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÈíÚ','Selling value'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÊÃãíä ÇáÍÇáí','Current deposit value'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÊÃãíä ÇáÓÇÈÞ','Previous deposit value'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÍÓã','Discount value'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÎÑÏÉ','Scrap value'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÏÝÚÇÊ ÇáãÊÃÎÑÉ','Late payments value'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÏÝÚÇÊ ÇáãÍÕáÉ','Collected payments value'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÓÊæì ÇáÊÔØíÈ','Finishing quality'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÓÊæì ÇáÓÑíÉ','Security level'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÓÊæì ÇáÓãÇÍíÉ','Security level'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÓÍæÈ Úáì Èäß','Drawn on Bank'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÔÛæáÉ','Busy'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÕÇÏÑ ÇáÊÞÑíÑ','Report sources'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÖÛæØ','Compressed'
 
insert into [StrSource] 
([Ar],[En])
select  'ãØÇÈÞÉ ÈäÇÁ','Building Combarision'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÙåÑ','Endorsed'
 
insert into [StrSource] 
([Ar],[En])
select  'ãõÙåÑ','Endorsed'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÙåÑÉ','Endorsed'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÚÇáÌ ÇáÊÏæíÑ','Closing file wizard'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÚÇíäÉ ÞÈá ØÈÇÚÉ','Print preview'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÚÏá ÇáÅåÊáÇß','Depreciation average'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÚáæãÇÊ','Information'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÚáæãÇÊ ÇáÊæÒíÚ','Distribution information'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÚáæãÇÊ ÇáÚÞÏ','Contract information'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÚáæãÇÊ ÇáãÓÊÎÏã','User information'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÚáæãÇÊ ÍÓÇÈ','Account information'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÚáæãÇÊ ÚÇãÉ','General information'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÛáÞÉ','Closed'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÝÊÇÍ ÇáÅÎÊÕÇÑ','Shortcut key'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÝÊæÍÉ','Opened'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÞÈæÖÉ','Receivable'
 
insert into [StrSource] 
([Ar],[En])
select  'ãßÇÊÈ','Offices'
 
insert into [StrSource] 
([Ar],[En])
select  'ãßÇä ÇáÚÞÏ','Contract location'
 
insert into [StrSource] 
([Ar],[En])
select  'ãßÇä ÇáæÕæá','Destination'
 
insert into [StrSource] 
([Ar],[En])
select  'ãßÑÑ','Duplicate'
 
insert into [StrSource] 
([Ar],[En])
select  'ãáÇÍÙÇÊ','Notes'
 
insert into [StrSource] 
([Ar],[En])
select  'ãáÇÍÙÉ','Notes'
 
insert into [StrSource] 
([Ar],[En])
select  'ãáÇÎÙÇÊ','Note'
 
insert into [StrSource] 
([Ar],[En])
select  'ãáÎÕ ÇáÅåÊáÇß','Depreciation summary'
 
insert into [StrSource] 
([Ar],[En])
select  'ãáÝ','File'
 
insert into [StrSource] 
([Ar],[En])
select  'ãáÝ ÇáÈíÇäÇÊ','Data file'
 
insert into [StrSource] 
([Ar],[En])
select  'ãáÝ ÇáÊÓÌíá','Log file'
 
insert into [StrSource] 
([Ar],[En])
select  'ãáÝ ÇáØÈÇÚÉ ÛíÑ ãæÌæÏ','Print file does not exist'
 
insert into [StrSource] 
([Ar],[En])
select  'ãáÝ ÌÏíÏ','New File'
 
insert into [StrSource] 
([Ar],[En])
select  'ãáß','Owned'
 
insert into [StrSource] 
([Ar],[En])
select  'ãáßíÉ ÇáÔÞÉ','Flat ownership'
 
insert into [StrSource] 
([Ar],[En])
select  'ãä','From'
 
insert into [StrSource] 
([Ar],[En])
select  'ãä ÇáãæÞÚ','From location'
 
insert into [StrSource] 
([Ar],[En])
select  'ãä ÊÇÑíÎ','From Date'
 
insert into [StrSource] 
([Ar],[En])
select  'ãä ÊÇÑíÎ : ','From Date:'
 
insert into [StrSource] 
([Ar],[En])
select  'ãä ÑÞã','From No'
 
insert into [StrSource] 
([Ar],[En])
select  'ãäÊåí','Terminated'
 
insert into [StrSource] 
([Ar],[En])
select  'ãäÊåí ÇáãÏÉ','Expired'
 
insert into [StrSource] 
([Ar],[En])
select  'ãäÊåí ÇáãÏÉ æÊã ÅäåÇÁ ÇáÚÞÏ','Expired contract and terminated'
 
insert into [StrSource] 
([Ar],[En])
select  'ãäÊåí ÇáãÏÉ æáã íÊã ÅäåÇÁ ÇáÚÞÏ','Expired contract and didn''t terminated'
 
insert into [StrSource] 
([Ar],[En])
select  'ãäÊåíÉ ÇáÚÞÏ','Expired contract'
 
insert into [StrSource] 
([Ar],[En])
select  'ãäÎÝÖ','Low'
 
insert into [StrSource] 
([Ar],[En])
select  'ãäÏæÈ ÇáãÈíÚÇÊ','Sales agent'
 
insert into [StrSource] 
([Ar],[En])
select  'ãäÐ/ íæã','Since / Day'
 
insert into [StrSource] 
([Ar],[En])
select  'ãæÇÏ','Materials'
 
insert into [StrSource] 
([Ar],[En])
select  'ãæÇÕÝÇÊ','Specifications'
 
insert into [StrSource] 
([Ar],[En])
select  'ãæÇÕÝÇÊ ÇáãæÇÏ','Materials specification'
 
insert into [StrSource] 
([Ar],[En])
select  'ãæÇÝÞ','OK'
 
insert into [StrSource] 
([Ar],[En])
select  'ãæÇÞÚ ÇáÃÕæá','Asset locations'
 
insert into [StrSource] 
([Ar],[En])
select  'ãæÇÞÝ ÇáÓíÇÑÇÊ','Car parking'
 
insert into [StrSource] 
([Ar],[En])
select  'ãæÇÞÝ ÇáÓíÇÑÇÊ ÊÍÊ ÇáÃÑÖ','Underground car parking'
 
insert into [StrSource] 
([Ar],[En])
select  'ØÈÇÚÉ ãÎÕÕÉ','Custom print'
 
insert into [StrSource] 
([Ar],[En])
select  'ØÑÞ ÍÓÇÈ ÇáßãíÉ','Quantity calculation methods'
 
insert into [StrSource] 
([Ar],[En])
select  'ØÑíÞÉ ÇáÅåÊáÇß','Depreciation method'
 
insert into [StrSource] 
([Ar],[En])
select  'ØÑíÞÉ ÇáÊÛííÑ','Change type'
 
insert into [StrSource] 
([Ar],[En])
select  'ØÑíÞÉ ÇáÍÓÇÈ','Calculation method'
 
insert into [StrSource] 
([Ar],[En])
select  'ØÑíÞÉ ÇáÏÝÚ','Payment method'
 
insert into [StrSource] 
([Ar],[En])
select  'ØÑíÞÉ ÇáÏÝÚ äÕÇð','Payment method in words'
 
insert into [StrSource] 
([Ar],[En])
select  'ØÑíÞÉ ÇáÔÍä','Shipping Method'
 
insert into [StrSource] 
([Ar],[En])
select  'ØÑíÞÉ ÇãÊáÇß ÈäÇÁ','Building ownership'
 
insert into [StrSource] 
([Ar],[En])
select  'Øæá','Length'
 
insert into [StrSource] 
([Ar],[En])
select  'Øæá ÇáÓæÑ ÇáÎÇÑÌí','Fence length'
 
insert into [StrSource] 
([Ar],[En])
select  'ØíÇÚÉ','Print'
 
insert into [StrSource] 
([Ar],[En])
select  'ÙåæÑ äÇÝÐÉ ÇáÃÞÓÇØ ÚäÏ ÅÖÇÝÉ ÇáÚÞÏ','Show checks generation window when adding contract'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÇÏí','Normal'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÇáí','High'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÇã','General'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÇã áßá ÇáãÓÊÎÏãíä','For all users'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÇãá ÇáÊÍæíá','Exchange'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÃíÇã ÇáÅíÑÇÏ','Revenue days No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÃíÇã ÇáÊÇÎíÑ','Delay days No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÃíÇã ÇáÊÇÎíÑ Èíä','Delay days No. between'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÃíÇã ÇáÚÞÏ','Contract days'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÏÝÚÇÊ ÇáãÍÕáÉ ÌÒÆíÇ','Partial collected payments value'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÏÝÚÇÊ ÇáãÓÊÍÞÉ','Due payments value'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÏÝÚÇÊ ÇáãÓÊÍÞÉ ÌÒÆíÇ','Partial due payments value'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÏÝÚÉ','Payment value'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÚÞÏ','Contract amount'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÚÞÏ ÈÚÏ ÇáÍÓã','Discounted contract amount '
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÚãæáÉ ãä ÇáÚãíá','Commission amount from customer'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÚãæáÉ ãä ÕÇÍÈ ÇáÚÞÇÑ','Commission amount from owner'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáãÕÇÑíÝ','Expenses amount'
 
insert into [StrSource] 
([Ar],[En])
select  'ßÔÝ ÇáÃÑÇÖí','Land report'
 
insert into [StrSource] 
([Ar],[En])
select  'ßÔÝ ÇáÈäÇíÇÊ','Building report'
 
insert into [StrSource] 
([Ar],[En])
select  'ßÔÝ ÇáÔÞÞ','Flats report'
 
insert into [StrSource] 
([Ar],[En])
select  'ßÔÝ ÇáÚÑæÖ ÇáãÊäæÚÉ','Various offers report'
 
insert into [StrSource] 
([Ar],[En])
select  'ßÔÝ ÇáÚÞæÏ','Contract report'
 
insert into [StrSource] 
([Ar],[En])
select  'ßÔÝ ÚÞÇÑÇÊ Úãíá','Customer properties report'
 
insert into [StrSource] 
([Ar],[En])
select  'ßá','Every'
 
insert into [StrSource] 
([Ar],[En])
select  'ßá ÃÓÈæÚ','Every week'
 
insert into [StrSource] 
([Ar],[En])
select  'ßá ÇáÕáÇÍíÇÊ','Full authoritize'
 
insert into [StrSource] 
([Ar],[En])
select  'ßá ÔåÑ','Every month'
 
insert into [StrSource] 
([Ar],[En])
select  'ßá íæã','Every day'
 
insert into [StrSource] 
([Ar],[En])
select  'ßáÇåãÇ','Both'
 
insert into [StrSource] 
([Ar],[En])
select  'ßáÝÉ ÇáÔÞÞ ÇáãÈÇÚÉ','Sold flat cost'
 
insert into [StrSource] 
([Ar],[En])
select  'ßáÝÉ ÇáÚÞÇÑ','Property cost'
 
insert into [StrSource] 
([Ar],[En])
select  'ßáÝÉ ÇáãÍá','Shop cost'
 
insert into [StrSource] 
([Ar],[En])
select  'ßáÝÉ ÇáãÔÑæÚ','Project cost'
 
insert into [StrSource] 
([Ar],[En])
select  'ßáÝÉ ÇáãæÞÝ','Parking cost'
 
insert into [StrSource] 
([Ar],[En])
select  'äåÇíÉ ÇáãÏÉ','End date'
 
insert into [StrSource] 
([Ar],[En])
select  'äæÚ','Type'
 
insert into [StrSource] 
([Ar],[En])
select  'äæÚ ÇáÃÑÖ','Land type'
 
insert into [StrSource] 
([Ar],[En])
select  'äæÚ ÇáÅíÌÇÑ Óäæí / ÔåÑí','Rent type Annually / Monthly'
 
insert into [StrSource] 
([Ar],[En])
select  'äæÚ ÇáÈØÇÞÉ','Card type'
 
insert into [StrSource] 
([Ar],[En])
select  'äæÚ ÇáÍÓÇÈ','Account type'
 
insert into [StrSource] 
([Ar],[En])
select  'äæÚ ÇáÎØ','Font type'
 
insert into [StrSource] 
([Ar],[En])
select  'äæÚ ÇáÏÝÚ','Payment method'
 
insert into [StrSource] 
([Ar],[En])
select  'äæÚ ÇáÓäÏ','Ownership type'
 
insert into [StrSource] 
([Ar],[En])
select  'äæÚ ÇáÓíÇÑÉ','Car type'
 
insert into [StrSource] 
([Ar],[En])
select  'äæÚ ÇáÔÞÉ','Flat type'
 
insert into [StrSource] 
([Ar],[En])
select  'äæÚ ÇáÔíß','Cheque type'
 
insert into [StrSource] 
([Ar],[En])
select  'äæÚ ÇáÚÑÖ','Offer type'
 
insert into [StrSource] 
([Ar],[En])
select  'äæÚ ÇáÚÞÇÑ','Unit type'
 
insert into [StrSource] 
([Ar],[En])
select  'äæÚ ÇáÚÞÏ','Contract type'
 
insert into [StrSource] 
([Ar],[En])
select  'äæÚ ÇáÚíä','Property type'
 
insert into [StrSource] 
([Ar],[En])
select  'äæÚ ÇáæÑÞÉ ÇáãÇáíÉ','Check type'
 
insert into [StrSource] 
([Ar],[En])
select  'äæÚ äÙÇã ÇáÍãÇíÉ ','Safety system type'
 
insert into [StrSource] 
([Ar],[En])
select  'åÇÊÝ','Telephone'
 
insert into [StrSource] 
([Ar],[En])
select  'åÇÊÝ ÇáÒÈæä','Customer tel'
 
insert into [StrSource] 
([Ar],[En])
select  'åÇÊÝ ÇáÚãá','Business telephone'
 
insert into [StrSource] 
([Ar],[En])
select  'åÐÇ ÇáÊÚÇÏá ÛíÑ ãæÌæÏ Ýí äÔÑÉ ÇáÃÓÚÇÑ ','This rate does not exist in exchange rate window'
 
insert into [StrSource] 
([Ar],[En])
select  'åÐÇ ÇáÔíß ãÑÊÈØ ÈÚÞÏ ','This cheque is linked with contract'
 
insert into [StrSource] 
([Ar],[En])
select  'åÐÇ ÇáÔíß ãÑÊÈØ ÈÚÞÏ 
åá ÊÑíÏ ÇáÊÚÏíá','This cheque is linked with contract
Do you want to modify?'
 
insert into [StrSource] 
([Ar],[En])
select  'åÐÇ ÇáÔíß ãÑÊÈØ ÈÚÞÏ 
åá ÊÑíÏ ÇáÍÐÝ','This cheque is linked with contract
Do you want to delete?'
 
insert into [StrSource] 
([Ar],[En])
select  'åÐÇ ÇáÔíß ãÑÊÈØ ÈÝÇÊæÑÉ ','This cheque linked with bill'
 
insert into [StrSource] 
([Ar],[En])
select  'åÐÇ ÇáÚÞÏ ÑÞã : ','This contract No.'
 
insert into [StrSource] 
([Ar],[En])
select  'åÐÇ ÇáÚÞÏ ÑÞã : 2','This contract No: 2'
 
insert into [StrSource] 
([Ar],[En])
select  'åÐÇ ÇáÞíÏ áå ÇÕá åá ÊÑíÏ ÇáãÊÇÈÚÉ ÈÚãáíÉ ÇáÍÐÝ¿','This journal entry has origin are you sure to delete?'
 
insert into [StrSource] 
([Ar],[En])
select  'åÐÇ ÇáãÍá ÊÌãíÚí æ ÃÍÏ ãßæäÇÊå ÏÇÎá Ýí ÚÞÏ ','This is multiple shop and one of its components is included in the contract'
 
insert into [StrSource] 
([Ar],[En])
select  'åÐå ÇáÃÑÖ ÃÑÖ ÊÌãíÚíÉ æ ÃÍÏ ãßæäÇÊåÇ ÏÇÎá Ýí ÚÞÏ ','This is multiple land and one of its components is included in the contract'
 
insert into [StrSource] 
([Ar],[En])
select  'åÐå ÇáÇÑÖ ãä ÃÑÖ ÊÌãíÚíÉ ÏÇÎá Ýí ÚÞÏ ','This is multiple land and one of its components is included in the contract'
 
insert into [StrSource] 
([Ar],[En])
select  'åÐå ÇáÔÞÉ ÔÞÉ ÊÌãíÚíÉ æ ÃÍÏ ãßæäÇÊåÇ ÏÇÎá Ýí ÚÞÏ ','This is multiple flat and one of its components is included in the contract'
 
insert into [StrSource] 
([Ar],[En])
select  'åÐå ÇáÔÞÉ ãä ÔÞÉ ÊÌãíÚíÉ ÏÇÎá Ýí ÚÞÏ ','This flat include in multiple flat inside contract'
 
insert into [StrSource] 
([Ar],[En])
select  'åÐå ÇáãÍá ãä ãÍá ÊÌãíÚí ÏÇÎá Ýí ÚÞÏ ','This shop include in multiple shop inside contract'
 
insert into [StrSource] 
([Ar],[En])
select  'åÐå ÇáäÇÝÐÉ ÊÍæí ÈÚÖ ÇáãÚáæãÇÊ ÇáÊí íãßä Ãä Êßæä ãßÑÑÉ','This window contains some information that can be duplicated'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÅÖÇÝÊå ÇáÂä¿','Are you sure to add it now?'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÅÚÇÏÉ ÇáÊÔÛíá ÇáÂä¿','Do you want to restart programs now?'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÅÚÇÏÉ ÊÑÞíã ÇáÈØÇÞÇÊ ÇáãÍÏÏÉ','Do you want to renumber the selected cards?'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÅÚÇÏÉ ÊÔßíá ÇáÈíÇä ÇáãßÊæÈ ÓÇÈÞÇ ÇíÖÇ¿','Do you want to regnerate notes that is already exist?'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÅÛáÇÞ ÇáäÇÝÐÉ ÇáÍÇáíÉ','Do you want to close the current window?'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÅáÛÇÁ ÇáÍÌÒ¿','Do you want to cancel reservation?'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÇáÊÌÏíÏ¿','Do you want to renew?'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÇáÊÚÏíá','Do you want to modify?'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÇáÍÐÝ','Do you want to delete?'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÇáÎÑæÌ ãä ÇáÈÑäÇãÌ','Do you want to close the program?'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÇáÞíÇã ÈÚãá äÓÎÉ ÅÍÊíÇØíÉ','Do you want to make backup'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÇáÞíÇã ÈÚãáíÉ ÇáÊÍÏíË ÇáÂä ¿','Do you want to update now?'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÇáãÊÇÈÚÉ','Do you want to proceed?'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÇáãÊÇÈÚÉ¿','Do you want to proceed?'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÇäåÇÁ ÇáÚÞÏ ÇáÍÇáí ÈÊÇÑíÎ ÇäÊåÇÁ ÇáÚÞÏ¿','Do you want to terminate the current contract using contract end date?'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÈÇáÊÃßíÏ ÊÛííÑ ÃÓÚÇÑ ÇáßáÝÉ ááÔÞÞ','Are you sure to change flats cost prices?'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÊÑÍíá ÇáÝÇÊæÑÉ¿','Do you want to post the bill?'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÊÑÍíá ÇáÞíÏ¿','Do you want to post the journal entry?'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÊÑÍíá ÇáÞíæÏ ÇáãÍÏÏÉ¿','Are you sure to post selected entries?'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÊÚÈÆÉ ÇáÍÓÇÈ ÇáãÞÇÈá ¿','Do you want to fill obverse account?'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÊÚííäå Ýí ÇáãæÞÚ ÇáÍÇáí ?','Do you want to set him in current site?'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÊÝÕíá ãÑÇßÒ ÇáßáÝÉ Ýí ÇáÞíÏ ÇáÅÝÊÊÇÍí','Do you want to show cost center in opening entry?'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÍÐÝ ÅÚÏÇÏÇÊ ÇáÓäÉ ÇáåÌÑíÉ ÇáÍÇáíÉ¿','Are you sure to delete current Hijri year settings?'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÍÐÝ ÈØÇÞÉ ÇáÍÓÇÈ ÇáãÑÊÈØÉ¿','Do you want to delete related account card?'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÍÐÝ ÈØÇÞÉ ÍÓÇÈ ÇáÊÃãíä ÇáãÑÊÈØÉ¿','Do you want to delete related deposit account card?'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÍÐÝ ÈØÇÞÉ ãÑßÒ ÇáßáÝÉ ÇáãÑÊÈØÉ¿','Do you want to delete related cost center card?'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÍÐÝ ÍÓÇÈ ÇáÈäÇÁ ÇíÖÇ¿','Do you want to delete building account also?'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÍÐÝ ÍÓÇÈ ÇáÈäß ááÈäÇÁ ÇíÖÇ¿','Do you want to delete building bank account also?'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÍÐÝ ãÑßÒ ÇáßáÝÉ ÇáÑÆíÓí áÔÞÞ ÇáÈäÇÁ ÇíÖÇ¿','Do you want to delete building cost center account also?'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÍÐÝÇÚÏÇÏÇÊ ÇáÓäÉ ÇáåÌÑíÉ ÇáÍÇáíÉ¿','Do you want to delete current settings of Hijri Year?'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÝÚáÇð ÅÊãÇã ÚãáíÉ ÇáÊÎÒíä¿','Do you want to save?'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÝÚáÇ ÅÚÇÏÉ ÊÑãíÒ ÇáÃÈäÇÁ','Do you want renumbering sub-accounts?'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÝÚáÇð ÇáÞíÇã ÈÇáÍÐÝ','Are you sure to delete?'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÝÚáÇð ÇáÞíÇã ÈÚãáíÉ ÇáÅÖÇÝÉ ÇáÂä','Do you want to add now?'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÝÚáÇð ÊÞáíÕ ÍÌã ÞÇÚÏÉ ÇáÈíÇäÇÊ','Do you want to shrink size of the database'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÝÚáÇð ÍÌÒ ÇáÔÞÉ¿','Do you want to reserve the flat?'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÝÚáÇð ÍÌÒ ÇáãÍá¿','Do you want to reserve the shop?'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÝÚáÇð ÍÌÒ ÇáãæÞÝ¿','Do you want to reserve the parking?'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÝÚáÇ ÍÐÝ ßá ÇáÃæÑÇÞ ÇáãÇáíÉ ÇáãÍÏÏÉ¿','Are you sure to delete all selected notes?'
 
insert into [StrSource] 
([Ar],[En])
select  'áæä ÇáÎØ','Font color'
 
insert into [StrSource] 
([Ar],[En])
select  'áæä ÇáÓíÇÑÉ','Car color'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÄÌÑ','Leased'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÄÌÑÉ','Leased'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÇÆá','Italic'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÈÇÚ','Sold'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÈÇÚÉ','Sold'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÈáÛ','Amount'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÈíÚ','Sales'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÈíÚ ÇáÃÕá','Asset sale'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÈíÚ2','Sales2'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÈíÚ3','Sales3'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÊÇÈÚÉ','Continue'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÊÝÑÞÇÊ','Various'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÊæÓØ','Medium'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÌáÏ ÇáØÈÇÚÉ ÇáÅÝÊÑÇÖí','Default printing folder'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÌáÏ ÌÏíÏ','New Folder'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÌãÚ ÇáÇåÊáÇß','Depreciation accumulated'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÌãÚ ÇáÇåÊáÇß ÇáÌÏíÏ ','New depreciation accumulated'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ','Total'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ  ÇáÝÊÑÉ ãÏíä','Total debit period'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÇáÊÃãíäÇÊ','Deposit total'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÇáÊÃãíäÇÊ ÇáÍÇáíÉ ááÚÞæÏ','Total current deposit of contracts'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÇáÊÃãíäÇÊ ÇáÓÇÈÞÉ ááÚÞæÏ','Total previous deposit of contracts'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÇáÊÃãíäÇÊ ÇáÚÇã','Total general deposit'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÇáÏÝÚÇÊ ãÓÊÍÞÉ ÇáÏÝÚ','Total due payments'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÇáÓäÏ ÇáÍÇáí','Current entry total'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÇáÝÊÑÉ ÏÇÆä','Total credit period'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÇáÞíãÉ','Total value'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÇáßáÝÉ','Total cost'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÇáãÕÇÑíÝ','Total expenses'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÇáäÓÈ ÇáÍÇáíÉ   ','Total current percentage  '
 
insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÑÃÓ ÇáãÇá','Total capital'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÓÇÈÞ ÏÇÆä','Previous total credit'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÓÇÈÞ ãÏíä','Previous total debit'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ Þíã ÇáÔíßÇÊ ÃÕÛÑ ãä ÇáãÈáÛ ÇáãÊÈÞí','The sum of cheque values smaller then remaining amount'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ Þíã ÇáÔíßÇÊ ÃßÈÑ ãä ÇáãÈáÛ ÇáãÊÈÞí','The sum of cheque values larger then remaining amount'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÞíãÉ ÇáÚÞæÏ','Total value of contracts'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ äåÇÆí ÏÇÆä','Total credit'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ äåÇÆí ãÏíä','Total debit'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚÇÊ ÇáãæÇÏ','Materials group'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÍÌæÒ','Reserved'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÍÌæÒÉ','Reserved'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÍÑÝ','character'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÍÕá','Collected '
 
insert into [StrSource] 
([Ar],[En])
select  'ãõÍÕá','Collected'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÍÕá ÌÒÆíÇ','Partial collected'
 
insert into [StrSource] 
([Ar],[En])
select  'ãõÍÕá ÌÒÆíÇð','Partial collected'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÍÕá ÌÒÆíÇð','Partial collected'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÍÕá ÌÒÆíÇ / ÞíãÉ','Partial collected / Value'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÍÕá ãä /íæã','Collected drom / Day'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÍÕáÉ','Collected'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÍÙæÑ','Blocked'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÍá','Shop'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÍá ÊÌãíÚí','Compilation shop'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÍáÇÊ','Shops'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÎÕÕ','Customized'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÎØØ ÇáÈäÇÁ','Building chart'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÏÉ ÇáÅíÌÇÑ äÕÇð','Rent duration in word'
 
insert into [StrSource] 
([Ar],[En])
select  ' ÇáÌåÇÒ','Computer'
 
insert into [StrSource] 
([Ar],[En])
select  'Test   ÇáÎØ   Font','Test   ÇáÎØ   Font'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÌãÇáí ÊßáÝÉ ÇáÊØæíÑ','Total development cost'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÌãÇáí ÞíãÉ ÇáÚÞÇÑ ÇáãØæÑ','Total value of the property developer'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ãÑßÒ ÇáßáÝÉ','Enter cost center'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ãÑßÒ ÇáßáÝÉ ÇáÑÆíÓí','Enter main cost center'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ãÑßÒ ÇáßáÝÉ ááÞáã ','Enter cost center to line'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ãÑßÒ ßáÝÉ ','Enter cost center'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ãÑßÒ ßáÝÉ ÇáÃÑÖ  Ýí ÈØÇÞÉ ÇáÃÑÖ','Enter land cost center in land card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ãÑßÒ ßáÝÉ ÇáÃÑÖ Ýí ÈØÇÞÉ ÇáÃÑÖ','Enter land cost center in land card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ãÑßÒ ßáÝÉ ÇáÔÞÉ Ýí ÈØÇÞÉ ÇáÔÞÉ','Enter flat cost center in flat card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ãÑßÒ ßáÝÉ ÇáÝíáÇ Ýí ÈØÇÞÉ ÇáÝíáÇ','Enter villa cost center in villa card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ãÑßÒ ßáÝÉ ÇáãÍá Ýí ÈØÇÞÉ ÇáãÍá','Enter shop cost center in shop card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ãÑßÒ ßáÝÉ ÇáãæÞÝ Ýí  ÈØÇÞÉÇáãæÞÝ','Enter parking cost center in parking card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáãÇáß','Owner name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáãÎØØ','Plans name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÖÇÝÉ ãæÞÝ','Add parking'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáãÑÇßÒ ÇáÝÇÑÛÉ','Show empty cost center'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ãÑßÒ ÇáßáÝÉ ÇáÊÇÈÚ ááÚÞÏ','Show cost center for contract'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊÑãíÒ ÇáÃÈäÇÁ','Recoding sub accounts'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅäÔÇÁ ãÑßÒ ßáÝÉ','Generate cost center'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅäÔÇÁ ãÑßÒ ßáÝÉ ÝÑÚí','Add sub cost center'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÚÊãÇÏ ÍÓÇÈ ÕäÏæÞ ÇáÈäÇÁ ßÍÓÇÈ ÇÝÊÑÇÖí ááÊÍÕíá  ÇáÌÒÆí','Set cash account of building as default account of partial collection'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÃÈÚÇÏ','Dimensions'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÃÈÚÇÏ æ ÇáÍÏæÏ','Dimensions and border'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÍÏÇËíÇÊ ãä ÛæÛá','Coordinates from Google'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÈÖÇÚÉ','Goods'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÍáíá','Analysis'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊäÙíã','Organization'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÏæÏ','Border'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÍí','Neighborhood'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÔÇÑÚ ÇáÑÆíÓí','Main road'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÕß','Instrument'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáØÈíÚÉ','Nature'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÚæÇãá æÇáãÔÇÑíÚ ÇáãÄËÑÉ','Factors and projects affecting'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÑÇÝÞ ÇáÚÇãÉ','Public facilities'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÑÝÞÇÊ','Attachments'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÑßÒ ÇáÑÆíÓí','Main cost center'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÕÏÑ','Source'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãßÇÝÆ','equal'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáäÊÇÆÌ','Results'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáäÕ','Text'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáæÇÌåÇÊ','Interfaces'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈÊßáíÝ ãä','Commissioned by'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ãÑßÒ ÇáßáÝÉ','Cost center card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ãÑßÒ ßáÝÉ','Cost center card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈíÇäÇÊ ÇáÚÞÇÑ','Property information'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈíÇäÇÊ ÇáãáßíÉ','Ownership information'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈíÇäÇÊ ÓÎÕíÉ áÇÊíäí','Latin personal information'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÍÑíß ãÑßÒ ÇáßáÝÉ Ýí ÇáÍÓÇÈ ÇáÏÇÆä','Cost center belong to credits account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÍÑíß ãÑßÒ ÇáßáÝÉ Ýí ÇáÍÓÇÈ ÇáãÏíä','Cost center belong to debits account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÍÑíß ãÑßÒ ÇáßáÝÉ Ýí ÇáÚÞæÏ','Cost center belong to contracts'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÍÑíß ãÑßÒ ÇáßáÝÉ Ýí ÇáÚãæáÉ','Cost center belong to commission account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÍÑíß ãÑßÒ ÇáßáÝÉ Ýí ÇáÚãæáÉ Ýí ÇáÏÇÆä','Cost center belong to commission credit account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÍÑíß ãÑßÒ ÇáßáÝÉ Ýí ÇáÚãæáÉ Ýí ÇáãÏíä','Cost center belong to commission debit account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÍÑíß ãÑßÒ ÇáßáÝÉ ãÚ ÅíÑÇÏ ÇáÊÃãíä','Cost center belong to deposit account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÍÑíß ãÑßÒ ÇáßáÝÉ ãÚ ÅíÑÇÏ ÇáÑÓæã ÇáÃÎÑì','Cost center belong to other fees account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÍÑíß ãÑßÒ ÇáßáÝÉ ãÚ ÅíÑÇÏ ÊÕÏíÞ ÇáÚÞÏ','Cost center belong to contract registration account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÍÑíß ãÑßÒ ÇáßáÝÉ ãÚ ÅíÑÇÏ ÓÚÑ ÇáÚÞÏ','Cost center belong to contract price account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÕäíÝ ÇáãäØÞÉ','Area classification'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÚÏíá ãæÇÕÝÇÊ ÇáãæÇÞÝ','Modify Parking Specifications'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊäÓíÞ ÇáæíäÏæÒ','Windows format'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊäÓíÞ ãÍÏÏ','Specific format'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ ÇáÃæÑÇÞ ÇáãÇáíÉ','Generate cheques'
 
insert into [StrSource] 
([Ar],[En])
select  'ÌäæÈÇð','South'
 
insert into [StrSource] 
([Ar],[En])
select  'ÌåÉ ÇáÅÕÏÇÑ','Issuer'
 
insert into [StrSource] 
([Ar],[En])
select  'Í/ãÎÒæä ÈÖÇÚÉ ÂÎÑ ÇáãÏÉ','Ending inventory A/C'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÇáãæÞÝ ÇáãÍÏÏ','Delete selected parking'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÊÃãíä ÇáÈäÇÁ','Building deposit account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÈÖÇÚÉ ÂÎÑ ÇáãÏÉ','Ending inventory account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÊßáÝÉ ÇáÊØæíÑ','Calculate development cost'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÕäÏæÞ ÇáÈäÇÁ','Building cash account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÞíãÉ ÇáÚÞÇÑ ÇáãØæÑ','Calculate developed property value'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈÇÊ ÇáÒÈÇÆä','Customers account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÙÑ ÇáÈØÇÞÉ áßá ÇáãÚÇãáÇÊ','Block card in all transactions'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÙÑ ÇáÈØÇÞÉ ááÚÞæÏ','Block card in contracts'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÞá ÈíÇä ÒÈæä 1','Customer field 1'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÞá ÈíÇä ÒÈæä 2','Customer field 2'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÞá ÈíÇä ÒÈæä 3','Customer field 3'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÞá ÈíÇä ÒÈæä 4','Customer field 4'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÞá ÈíÇä ÒÈæä 5','Customer field 5'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÞá ÈíÇä ÒÈæä 6','Customer field 6'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÞá ÈíÇä ÒÈæä 7','Customer field 7'
 
insert into [StrSource] 
([Ar],[En])
select  'ÎÇÑÌ ÇáäØÇÞ ÇáÚãÑÇäí','Outside urban boundary'
 
insert into [StrSource] 
([Ar],[En])
select  'ÎÏãÇÊ ãÊæÝÑÉ','Available services'
 
insert into [StrSource] 
([Ar],[En])
select  'ÏÇÎá ÇáäØÇÞ ÇáÚãÑÇäí','Inside urban boundary'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÎÕÉ ÇáÏÝÇÚ ÇáãÏäí','Civil Defense License'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÊÓÌíá','Registration number'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáãÎØØ','Planned No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑãÒ ãÑßÒ ÇáßáÝÉ','Cost center code'
 
insert into [StrSource] 
([Ar],[En])
select  'ÔÑÞÇð','East'
 
insert into [StrSource] 
([Ar],[En])
select  'ÔãÇáÇð','North'
 
insert into [StrSource] 
([Ar],[En])
select  'ÕÑÝ ÕÍí','Sanitation'
 
insert into [StrSource] 
([Ar],[En])
select  'ØÈíÚÉ ÇáÃÑÖ','Nature of the land'
 
insert into [StrSource] 
([Ar],[En])
select  'ØÈíÚÉ ÇáãäØÞÉ','Nature area'
 
insert into [StrSource] 
([Ar],[En])
select  'ØÑíÞÉ ÇáÊËãíä','Evaluation method'
 
insert into [StrSource] 
([Ar],[En])
select  'ÛÑÈÇð','West'
 
insert into [StrSource] 
([Ar],[En])
select  'ÝÑæÞÇÊ ÇÓÚÇÑ ÇáÕÑÝ','Exchange differences'
 
insert into [StrSource] 
([Ar],[En])
select  'ã2','Square meter'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÇÁ','Water'
 
insert into [StrSource] 
([Ar],[En])
select  ' ÇáÞíÏ ÇáãÍÇÓÈí','Mutli Entry'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏäì ÓÚÑ ááÚÞÇÑ','The lowest price of the property'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáÈÇÆÚ','Sales man'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáãæÇÞÝ ÇáÊÌãíÚíÉ ÇáÊí Êã ÅäåÇÁ ÚÞÏåÇ','Show assembled parking which contract was terminated'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáãæÇÞÝ ÇáãÏãÌÉ ÈãæÇÞÝ ÊÌãíÚíÉ','Show parking that inside assembled parking'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊÑãíÒ','Recoding'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊÑãíÒ ãÑÇßÒ ÇáßáÝÉ','Recoding cost centers'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊÓãíÉ ãÑÇßÒ ÇáßáÝÉ','Renaming cost centers'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊæáíÏ ÓäÏÇÊ ÇáÞíÏ ááÚÞæÏ','Recreate entries for contracts'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÚÊãÇÏ ÇáÎíÇÑÇÊ ÇáÇÝÊÑÇÖíÉ ááäãØ','Use default options in Types'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÚáì ÓÚÑ ááÚÞÇÑ','Highest price for a property'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃäÊÈå !','Please note !!'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÖÛØ ÒÑ ÇÈÏÃ ÇáÊÏæíÑ ááÈÏÁ','Press start to proceed'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÚÇÏÉ ÇáÝåÑÓÉ','Reindexing'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÚÇÏÉ ÊÓãíÉ','Rename'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÚÇÏÉ ÊÓãíÉ ãÑÇßÒ ÇáßáÝÉ','Renaming cost centers'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÃÕá ÛíÑ ÝÚÇá','Assen inactive'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÅØáÇáÉ áÇÊíäí','Latin view'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÝÇÏÉ','Benefit'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÌÏíÏ ÇáÊáÞÇÆí','Autor enew'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÍÞÞ ãä ÇáÅÊÕÇá ÈÇáãÎÏã','Checking the connection with server'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÞã ÇáÌÏíÏ','New number'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÞã ÇáÍÇáí','Current number'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáØÑÞ ÇáãÓÊÎÏãÉ','Used roads'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÚãáíÇÊ Úáì ÇáÔíßÇÊ','Operations on cheques'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíãÉ ÇáãÍÕáÉ ÌÒÆíÇ','Amount partly collected'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÓÇÍÉ ÇáãÄÌÑÉ','Leased area'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÓÇÍÉ ÛíÑ ÇáãÄÌÑÉ','Non-leased area'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãáÝ ÛíÑ ãæÌæÏ','File does not exist'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãæÑÏíä','Suppliers'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáæÍÏÇÊ ÇáãÍÙæÑÉ','Blocked units'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáæÕÝ áÇÊíäí','Latin description'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇäÊÈåäæÚ ÇáÈØÇÞÉ: ÒÈæä [0] - ãæÑÏ [1]ÇáäæÚ: ÔÑßÉ [0] - ÝÑÏ [1]ãÓÊæì ÇáÓÑíÉ: ÈÏæä [0] - ãäÎÝÖ [1] - ãÊæÓØ [2] - ÚÇáí[3] - ÎÇÕ [4]','Notice: card type: Customer (0) - Supplier (1) Type: Company (0) - Person (1) Security level: Without (0) - Low (1) - Intermediate (2) - High (3) - Special (4)'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈíÇä ÇáÏÝÚÉ ÇáÃæáì','First payment details'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈíÇä ÇáÏÝÚÉ ÇáÃæáì áÇÊíäí','First payment latin details'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈíÇä ÇáÚÞÏ áÇÊíäí','Contract latin details'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈíÇä ãÚÇáÌÉ ÇáÅÑÌÇÚ','Return processing details'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÅäåÇÁ ÇáÔíß ÇáãÑÊÌÚ','Returned cheque termination date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÍÑíß ãÑßÒ ÇáßáÝÉ ãÚ ÅíÑÇÏÇÊ ÅäåÇÁ ÇáÚÞÏ ','Cost center belong to contract termination account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÍÑíß ãÑßÒ ÇáßáÝÉ ãÚ ÇáÅíÑÇÏ','Cost center belong to revenue account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÍÑíß ãÑßÒ ÇáßáÝÉ ãÚ ÇáÍÓÇÈ ÇáÇÝÊÑÇÖí','Cost center belong to default account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÍãíá ÇáÈíÇäÇÊ','Loading data'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÍãíá ÈíÇäÇÊ ÇáÈØÇÞÉ','Loading card information'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÍãíá ÌÏæá ÇáÍÓÇÈÇÊ','Loading accounts table'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÍãíá ÌÏæá ÇáÒÈÇÆä','Loading customers table'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÍãíá ÌÏæá ÇáÔÞÞ','Loading units table'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÍãíá ÌÏæá ãÑÇßÒ ÇáßáÝÉ','Loading jobcost table'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÏÞíÞ ÇáÃÑÕÏÉ','Checking account balances'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÏÞíÞ ÇáÃÓÚÇÑ','Checking prices'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÏÞíÞ ÇáÈíÇäÇÊ','Checking data'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÏÞíÞ ÇáÓãÇÍíÉ','Checking permission'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊØÈíÞ ÇáÊÛíÑÇÊ','Apply changes'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÏíÑ ÞíãÉ ÇáÚÞÇÑ','Estimate property value'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ãÚÇáÌÉ ÇáÅÑÌÇÚ','Return processing'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊåíÆÉ ÇáäÇÝÐÉ','Prepare window'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ ÇáÞíæÏ ááÚÞæÏ ÈÏæä ÞíÏ','Generate entries for contracts without exist entry'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÇáÉ ÇáãæÞÝ','Parking status'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÑÓæã','Fees account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÎÑíØÉ ÇáãæÞÚ','Location map'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáØÇÈÞ Èíä','Floor No. between'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓÊßæä äÊÇÆÌ ÇáÊÞÑíÑ ÛíÑ ãÑÊÈÉ ÈÔßá ÕÍíÍ æÓíÎÊáÝ ÇáÑÕíÏ ÍÓÈ ÇáÎíÇÑÇÊ ÇáãÍÏÏÉ Öãä ÇáÝÑÒ','Report results will not be arranged properly and balance will not be different depending on selected sorting option'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓÚÑ ÇáãÊÑ ÇáãÑÈÚ','Price per square meter'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÇÚÇÏÉ ÊæáíÏ ÓäÏÇÊ ÇáÞíÏ','Generating entries will be processed'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÊÏæíÑ ÈíÇäÇÊ ÇáÓäÉÇáÍÇáíÉ Çáì ãáÝ ÌÏíÏ','Data of this year will be transferred to new file'
 
insert into [StrSource] 
([Ar],[En])
select  'ÔÞÞ','Apartments'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÚÞæÏ ÇáÍÇáíÉ','Current contracts No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÚÞæÏ ÇáÓÇÈÞÉ','Previous contracts No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÝáá ÇáãÄÌÑÉ','Leased villas No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÝáá ÛíÑ ÇáãÄÌÑÉ','Non-leased villas No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞãÊ ÈÊÍÏíÏ ÎíÇÑ : ','You chose: '
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÃÑÖ ÇáÍÇáíÉ','Land current value'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÍÓÇÈ ÇáÇåÊáÇß','Depreciation account value'
 
insert into [StrSource] 
([Ar],[En])
select  'ßÇäæä ÇáËÇäí','January'
 
insert into [StrSource] 
([Ar],[En])
select  'ááãÊÇÈÚÉ ÅÖÛØ ÇáÊÇáí','Click Next to continue'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÑÇßÒ ÊÓæÞ','Shopping malls'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÑÊÌÚ ãäÐ /íæã','Returned since/day'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÑßÒ ßáÝÉ ÏÇÆä','Credit cost center'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÑßÒ ßáÝÉ ãÏíä','Debit cost center'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÓÌÏ','Mosque'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÖì Úáì ÇÑÌÇÚåÇ','It went on Return'
 
insert into [StrSource] 
([Ar],[En])
select  'ãØÇÚã','Restaurants'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÚÇáÌÉ ÇáÅÑÌÇÚ','Return processing'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÚÇãá ÇáÈäÇÁ','Building factors'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÚáæãÇÊ ÇáãäØÞÉ','Area information'
 
insert into [StrSource] 
([Ar],[En])
select  'ãæÇÞÝ','Parking'
 
insert into [StrSource] 
([Ar],[En])
select  'ãíÒÇÊ ÇáÚÞÇÑ','Property Features'
 
insert into [StrSource] 
([Ar],[En])
select  'ãíÒÇÊ æÓáÈíÇÊ ÇáÚÞÇÑ','Property positives & negatives features'
 
insert into [StrSource] 
([Ar],[En])
select  'äÈÐÉ Úä ÇáÚÞÇÑ','About Property'
 
insert into [StrSource] 
([Ar],[En])
select  'äÊÇÆÌ ÇáÊËãíä','Evaluation Results'
 
insert into [StrSource] 
([Ar],[En])
select  'äÓÈÉ ÇáÒíÇÏÉ Úáì ÇáÚÞÏ ÇáÍÇáí','Increased percentage of current contract'
 
insert into [StrSource] 
([Ar],[En])
select  'äÕ ÇáÑÓÇáÉ                 [A] ÈÏá ÅÓã ÇáÒÈæä','Text                [A] Customer name'
 
insert into [StrSource] 
([Ar],[En])
select  'äØÇÞ ÇáãäØÞÉ','Region-wide'
 
insert into [StrSource] 
([Ar],[En])
select  'äÙÇã ÇáÈäÇÁ','Building system'
 
insert into [StrSource] 
([Ar],[En])
select  'äæÚ ÇáÚíä áÇÊíäí','Latin property type'
 
insert into [StrSource] 
([Ar],[En])
select  'åÐÇ íÚäí Çäå ÓíÊã ÊÚÏíá ÇáÚÞæÏ ÈÍÓÈ ÇáÍÓÇÈÇÊ ÇáÇÝÊÑÇÖíÉ æáä ÊÓÊØíÚ ÇáÊÑÇÌÚ Úä åÐå ÇáÚãáíÉ ¿','This means that contracts will be modified according to the default accounts and will not be able to undo this process?'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÇÚÇÏÉ ÊÑÞíã ÇáÇæÑÇÞ ÇáãÇáíÉ','Do you want to Renumbering cheques'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÇÚÇÏÉ ÊÑÞíã ÇáÚÞæÏ','Do you want to Renumbering contracts'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÇáãÊÇÈÚÉ?','Do you want to continue?'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÍÐÝ ÇáãáÝ ÇáãÑÝÞ ÇáãÍÏÏÉ','Do you want to delete the selected file attached'
 
insert into [StrSource] 
([Ar],[En])
select  'íÝÖá ÃÎÐ äÓÎÉ ÇÍÊíÇØíÉ ÞÈá ÇáÞíÇã ÈåÐå ÇáÚãáíÉ','We prefer to take a backup before performing this operation'
 
insert into [StrSource] 
([Ar],[En])
select  '',''
 
insert into [StrSource] 
([Ar],[En])
select  'SMS','SMS'
 
insert into [StrSource] 
([Ar],[En])
select  'ÂÎÑ ÊÇÑíÎ ÊÍÕíá ÌÒÆí','Last date of partial collection'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇá Email','Send Email'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊÑÞíã ÈØÇÞÇÊ ÇáÍÓÇÈÇÊ','Renumbering accounts card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÚÊãÇÏ ÊÇÑíÎ','Use date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÃÌæÑ','Fees'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÓã ÇáÊÌÇÑí','Commercial name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÇãÑ','Order'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÇãíäÇÊ','Deposits'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÞÑíÑ ÇáÔåÑí ÇáÔÇãá','Monthly Report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÔÞÞ ÇáãÄÌÑÉ','Leased apartments'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÚÞæÏ ÇáÊí ÞÑÈ ÇäÊåÇÄåÇ','Contracts near to expire'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíãÉ ÇáÅÝÊÑÇÖíÉ ','Default value'
 
insert into [StrSource] 
([Ar],[En])
select  'Çáì ÇáäãØ','To type'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇäãÇØ ÚÞæÏ ÇáÎÏãÇÊ','Services contract types'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈíÇä ÇáÍÓÇÈ ÇáãÞÇÈá ãä ÈíÇä ÇáÓäÏ','Obverse account details from entry details'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÅÓÊÑÏÇÏ ÇáÊÃãíäÇÊ','Deposit retrieve date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÍÑíß ãÑßÒ ÇáßáÝÉ ãÚ ÇáÍÓã ÇáãßÊÓÈ','Move cost center with earned discount'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÍÑíß ãÑßÒ ÇáßáÝÉ ãÚ ÇáãÕÇÑíÝ','Move cost center with expenses'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÓáÓá ÇáÔíß','Sequence cheque'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ÅÓÊÑÏÇÏ ÇáÊÃãíäÇÊ','Deposits has been retrieved'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ÊÓáíã ÇáÚÞÏ ÇáÒÈæä','Contract has been delivered to customer'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊæÕíÝ ÇáÍÞæá ÇáÅÖÇÝíÉ','Extra fields description'
 
insert into [StrSource] 
([Ar],[En])
select  'Í/ ÇáÕÑÝ ÇáÕÍí','Sanitation A/C'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÇáÉ ÇáæÑÞÉ ÇáãÇáíÉ','Cheque status'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÊì ÊÇÑíÎ : ','Until:'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÏÏ ÇáÈäÇÁ','Select building'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÇáÅÑÌÇÚ','Delete return'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÇáÊÍÕíá','Delete collection'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÇáÊÍÕíá ÇáÌÒÆí','Delete partial collection'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÇáÊÑÍíá','Delete deposit'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÇáÊÙåíÑ','Delete endorsement'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÕæÑ','Delete photos'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÛÑÇãÇÊ','Fees account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáßåÑÈÇÁ','Electricity account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáãíÇå','Water account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇíÑÇÏÇÊ ÇáÑÓæã 1','Fees revenue account 1'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇíÑÇÏÇÊ ÇáÑÓæã 2','Fees revenue account 2'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇíÑÇÏÇÊ ÇáÑÓæã 3','Fees revenue account 3'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇíÑÇÏÇÊ ÇáÑÓæã 4','Fees revenue account 4'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇíÑÇÏÇÊ ÇáÑÓæã 5','Fees revenue account 5'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÝÙ ÇáÈíÇäÇÊ','Saving data'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÞæá ÅÖÇÝíÉ','Extra fields'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÓÇáÉ ÌÏíÏÉ  ','New message'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÕíÏ ÇáãÇÏÉ','Material balance'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã :','No:'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÊÞÑíÑ ãßÑÑ','Duplicate report number'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÌáÓÉ','Session number'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáãÍá ãßÑÑ','Duplicate shop number'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓäÏÇÊ áåÇ ÃÕá','Entries has origin'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÅÚÇÏÉ ÊÑãíÒ ãÑÇßÒ ÇáßáÝÉ ÇáÊÇÈÚÉ ááÈäÇÁ ÇáãÍÏÏ','Jobcost for selected building will be Recoded'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÅÚÇÏÉ ÊÓãíÉ ãÑÇßÒ ÇáßáÝÉ ÇáÊÇÈÚÉ ááÈäÇÁ ÇáãÍÏÏ','Jobcost for selected building will be Renamed'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÊÌÏíÏ ÇáÚÞæÏ ÇáãÍÏÏÉ','Select contracts will be renewed'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÊÚÏíá ÇáÈíÇäÇÊ','Data will be modified'
 
insert into [StrSource] 
([Ar],[En])
select  'ÕáÇÍíÇÊ ÇáÚÞæÏ','Contracts permission'
 
insert into [StrSource] 
([Ar],[En])
select  'ÖÈØ ÚÑÖ ÇáÃÚãÏÉ','Adjust columns width'
 
insert into [StrSource] 
([Ar],[En])
select  'ØÈÇÚÉ ÃÕæá ÇáÓäÏÇÊ ÇáÛíÑ ãÑÍáÉ','Print unposted entreis origin'
 
insert into [StrSource] 
([Ar],[En])
select  'ØÈÇÚÉ ÇáÅíÕÇáÇÊ','Print receipts'
 
insert into [StrSource] 
([Ar],[En])
select  'ØÈÇÚÉ ÇáÇíÕÇá','Print receipt'
 
insert into [StrSource] 
([Ar],[En])
select  'ØÈÇÚÉ ÕæÑÉ','Print photo'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÚÞæÏ Çáßáí','Contracts total No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÚÞæÏ Ýí ÇáÓäæÇÊ ÇáÓÇÈÞÉ','Contracts No. in previous years'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏã ÅäåÇÁ ÇáÚÞÏ ÚäÏ æÌæÏ ÑÕíÏ ááÒÈæä','Not terminate contract when there is a customer balance'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÞÏ ÎÏãÇÊ','Services contract'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÞæÏ ÇáÎÏãÇÊ','Services contracts'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÞæÏ ÇáÕíÇäÉ','Maintenance contracts'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚæÏÉ','Return'
 
insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ÇáãÍÙæÑÉ','Unblocked'
 
insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ãÓÊÑÏÉ','Not refunded'
 
insert into [StrSource] 
([Ar],[En])
select  'ÝÇÊæÑÉ ÇáßåÑÈÇÁ','Electricity bill'
 
insert into [StrSource] 
([Ar],[En])
select  'ÝÊÑÉ ÇáÅíÑÇÏ ãä ÊÇÑíÎ ','Revenue period from date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÝÔá','Failed'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞÇÈá ááÊÌÏíÏ ÇáÊáÞÇÆí','Allow automatic renewal'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÑÓã','Fees amount'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÒíÇÏÉ Úáì ÇáÚÞÏ ÇáÍÇáí','Increased value on current contract'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÔíß','Cheque value'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÚÞÏ ÈÚÏ ÇáÒíÇÏÉ','Contract value after Increased'
 
insert into [StrSource] 
([Ar],[En])
select  'ßÔÝ ÍÓÇÈ ÒÈæä','Customer account statement'
 
insert into [StrSource] 
([Ar],[En])
select  'áÇíÌÏÏ ÊáÞÇÆíÇ','Do not automatically renewed'
 
insert into [StrSource] 
([Ar],[En])
select  'áÌáÈ ÂÎÑ ÓÚÑ ááÔÞÞ','To retrieve apartments latest price'
 
insert into [StrSource] 
([Ar],[En])
select  'áã ÊÊã ÇáãÚÇáÌÉ','Processing not complete'
 
insert into [StrSource] 
([Ar],[En])
select  'áã íÊã ÇäÔÇÁ ãÑßÒ ÇáßáÝÉ','Jobcost not created'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÇáÞíã Ýí ãÑÇßÒ ÇáßáÝÉ ÇáãÊÚÏÏÉ ÛíÑ ãØÇÈÞ áÞíãÉ ÇáæÑÞÉ ÇáãÇáíÉ','Total value in multiple jobcost is not match with cheque value'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÇáäÓÈ ÇáÍÇáíÉ = ','Total current rates ='
 
insert into [StrSource] 
([Ar],[En])
select  'ãÏíÑ','Admin'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÑÇßÒ ßáÝÉ ãÊÚÏÏÉ','Multiple cost center'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÓÊÑÏÉ','Refund'
 
insert into [StrSource] 
([Ar],[En])
select  'ãä ÇáäãØ','From type'
 
insert into [StrSource] 
([Ar],[En])
select  'äÞá ÈØÇÞÇÊ ÇáÓäÏÇÊ','Move entries cards'
 
insert into [StrSource] 
([Ar],[En])
select  'äæÚ ÇáÓÚÑ','Price type'
 
insert into [StrSource] 
([Ar],[En])
select  'åÐÇ ÇáÞíÏ ãÑÊÈØ ÈæÑÞÉ ãÇáíÉ','This entry is related with cheque'
 
insert into [StrSource] 
([Ar],[En])
select  'åÐå ÇáÚãáíÉ ÞÏ ÊÊØáÈ æÞÊÇ ØæíáÇð','This process may take a long time'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÍÐÝ ÇáÕæÑÉ ÇáãÍÏÏÉ','Do you want to delete the selected photo?'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÍÝÙ ÊÚÏíáÇÊ ÇáÒíÇÏÉ Úáì ÇáÚÞæÏ','Do you want to save the changes to increase contracts value'
 
insert into [StrSource] 
([Ar],[En])
select  'æÍÏÉ ÇáÝÇÊæÑÉ','Bill unit'
 
insert into [StrSource] 
([Ar],[En])
select  'æÞÊ ÇáÏÎæá','Entry time'
 
insert into [StrSource] 
([Ar],[En])
select  'íÌÏÏ ÊáÞÇÆíÇ','Automatically renewed'
 
insert into [StrSource] 
([Ar],[En])
select  'íÑÌì ÇáÇäÊÈÇå!!','Please attention !!'
 
insert into [StrSource] 
([Ar],[En])
select  ' ÚãáíÇÊ ÇáÕíÇäÉ','Maintenance operations'
 
insert into [StrSource] 
([Ar],[En])
select  '1 = ãÏíä ÝÞØ','1 = debit only'
 
insert into [StrSource] 
([Ar],[En])
select  '10 ÃÔåÑ','10 months'
 
insert into [StrSource] 
([Ar],[En])
select  '11 ÃÔåÑ','11 months'
 
insert into [StrSource] 
([Ar],[En])
select  '2 = ÏÇÆä ÝÞØ','2 = credit only'
 
insert into [StrSource] 
([Ar],[En])
select  '3 = ãÏíä Ãæ ÏÇÆä','3 = credit or debit'
 
insert into [StrSource] 
([Ar],[En])
select  '4 ÃÔåÑ','4 months'
 
insert into [StrSource] 
([Ar],[En])
select  '5 ÃÔåÑ','5 months'
 
insert into [StrSource] 
([Ar],[En])
select  '7 ÃÔåÑ','7 months'
 
insert into [StrSource] 
([Ar],[En])
select  '8 ÃÔåÑ','8 months'
 
insert into [StrSource] 
([Ar],[En])
select  '9 ÃÔåÑ','9 months'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÎÑÇÌ ÇáãÇÏÉ ÈÇáÓÇáÈ','Negative products output'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÍÓÇÈ ÇáÇÝÊÑÇÖí áäãØ ÓäÏ ÇáÞÈÖ','Enter default account for receipt voucher type'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÍÓÇÈ ÇáÏÇÆä áÚãæáÉ ÇáÅÑÌÇÚ','Enter credit account of return fees'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÍÓÇÈ ÇáÏÇÆä ááÊÑÍíá','Enter credit account of deposit'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÍÓÇÈ ÇáãÏíä áÚãæáÉ ÇáÅÑÌÇÚ','Enter debit account of return fees'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÍÓÇÈ ÇáãÏíä ááÊÑÍíá','Enter debit account of deposit'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÊÇÑíÎ ÇáÊÑÍíá','Enter deposit date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÍÓÇÈ ÇáÅÑÌÇÚ ÇáÏÇÆä','Enter credit return account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÍÓÇÈ ÇáÅÑÌÇÚ ÇáãÏíä','Enter debit return account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÍÓÇÈ ÇáÊÍÕíá ÇáÏÇÆä','Enter credit collection account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÍÓÇÈ ÇáÊÍÕíá ÇáãÏíä','Enter debit collection account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÍÓÇÈ ÇáÑÓæã ááÞáã','Enter fees account for the line'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÚÏÏ ÇáæÍÏÇÊ áåÐÇ ÇáÈäÇÁ','Enter units for this building'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá äæÚ ÇáÚíä','Enter property type'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇá ÈÑíÏ ÇáßÊÑæäí','Send Email'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊÚÑÇÖ Google Maps','Browse Google Maps'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊÓãíÉ ãÑÇßÒ ÇáßáÝÉ ááÈäÇÁ','ReNumbering jobcost for building'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅáÛÇÁ ÊÍÏíÏ Çáßá','Uncheck All'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅäÔÇÁ ÇáÞíæÏ','Create entries'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃäãÇØ ÇáÞíæÏ','Entries types'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃäãÇØ ÚÞæÏ ÇáÎÏãÇÊ','Services contract types'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃäãÇØ ÚÞæÏ ÇáÕíÇäÉ','Maintenance contract types'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅíÞÇÝ','Stop'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÖÇÝÉ ÕæÑ','Add Photo'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÚÏÇÏÇÊ ÇáãÓÍ ÇáÖæÆí','Scanner settings'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÃÏæÇÊ','Tools'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÃæÑÇÞ ÇáãÇáíÉ ááÚÞæÏ','Contracts cheque report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÅíÑÇÏÇÊ','Revenue'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÇæÑÇÞ ÇáãÇáíÉ ááÚÞæÏ','Contracts cheque report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÃãíäÇÊ','Deposits'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÍÑíÑ','Issue'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÞÇÑíÑ','Reports'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÞÑíÑ ÇáÔåÑí','Monthly Report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÏ ÇáÃÏäì','Minimum'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÏ ÇáÃÚáì','Maximum'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÒíÇÏÉ Úáì ÇáÚÞÏ ÇáÍÇáí','Increase on the current contract'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÔíßÇÊ ÇáãÑÊÌÚÉ','Returned cheques'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÚÞæÏ ãäåíÉ ÇáãÏÉ','Expired contract'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÝÇÊæÑÉ ãÑÇÌÚÉ','Bill checked'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíÏ ÛíÑ ãÑÍá','Unposted entry'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíÏ áå ÃÕá åá ÊÑíÏ ÇáÊÚÏíá ¿','Entry has origin are you sure to modify?'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíÏ ãÑÊÈØ ÈÊÍÕíá æÑÞÉ ãÇáíÉ','Entry is related to cheque collection'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíãÉ ÇáÓäæíÉ','Annual value'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáßãíÉ ÇáÌÏíÏÉ ÊÕÈÍ','New Quantity become'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáßãíÉ ÇáÍÇáíÉ','Current quantity'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÍÙæÑÉ','Blocked'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÕÇÑíÝ','Expenses'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãáÝ ÛíÑ ÕÇáÍ','File is invalid'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáæÍÏÇÊ ÇáÝÇÑÛÉ','Empty units'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇäÊÈå','Warning'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇäÊåÇÁ ÇáÅÞÇãÉ','Residence expiry'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇäÊåÇÁ ÇáåæíÉ','ID expiry'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇäÊåÇÁ ÌæÇÒ ÇáÓÝÑ','Passport expiry'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇíÑÇÏ','Revenue'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÇáÏÚæì','Lawsuit card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÝíááÇ','Villa card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈÛÖ ÇáäÙÑ Úä ÇáÎíÇÑÇÊ ÇáãÍÏÏÉ','Regardless of the specific options'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÃßÏ ãä ÅÏÎÇá ÇáÑãÒ ãÍÇÑÝ ÝÞØ','Make sure you enter code characters only'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÃßÏ ãä ÕÍÉ ãÓÇÑ ÞÇÚÏÉ ÇáÈíÇäÇÊ : ','Make sure the database path:'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÍ ÇáÅÓÊÍÞÇÞ','Due date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÅÓÊÑÏÇÏ','Refund date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÇÅÑÌÇÚ','Return date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇßÏ ãä ÅÏÎÇá ÇáãÈÇáÛ Ýí ÇáÞáã ','Make sure you enter value in the line'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇßÏ ãä ÕÍÉ ÇáãÓÇÑ','Make sure the correct path'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÌÇåá Çáßá','Ignore all'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÌÇæÒÊ ÇáãÇÏÉ','Material exceeded'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÌÇæÒÊ äÓÈÉ ÇáÍÓã ÇáãÓãæÍ ÈåÇ ','Exceeded allowed discount rate'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÌÏíÏ ÚÞæÏ ÇáÃÑÇÖí æÇáÝáá','Renew lands and villas contract'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÌÏíÏ ÚÞæÏ ÇáÔÞÞ æÇáãÍáÇÊ','Renew flats and shops contract'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÌÏíÏ ÚÞæÏ ÇáãæÇÞÝ','Renew parking contract'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÍÏíË ÈíÇäÇÊ ÇáÑÓæã ááÚÞÏ','Update contract fees'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÍÏíÏ ßá ÇáÎíÇÑÇÊ','Select all'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÍãíá ...','Loading ...'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÍãíá ÇáÚãáÉ','Loading currency'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÏÞíÞ ÃÑÕÏÉ ÇáÍÓÇÈÇÊ','Checking account balances'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÕÏíÑ csv ...','Export csv ...'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ÅÑÓÇá ÇáÑÓÇáÉ','Message has been sent'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ÅÑÓÇá ÇáÚÞÏ Åáì ÇáÊÕÏíÞ','Contract sent to registration'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ÅÓÊÑÌÇÚ ÇáäÓÎÉ ÇáÅÍÊíÇØíÉ ÈäÌÇÍ','Data restore successfully done'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ÅäåÇÁ ÇáÚÞÏ','Contract was terminated'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ÇÓÊáÇã ÇáÚÞÏ ãä ÇáÊÕÏíÞ','Contract received from registration'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ÇáÅÎáÇÁ','Evacuated'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ÇáÅÑÓÇá','Sent'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ÇáÅÑÓÇá ááÊÕÏíÞ','Sent to registration'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ÇáÅÓÊáÇã ãä ÇáÊÕÏíÞ','Received from registration'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ÇáÅäåÇÁ','Terminated'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ÇáÇíÏÇÚ','Deposited'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÕÇÑíÝ ÇáÏÚæì','Lawsuit expenses'
 
insert into [StrSource] 
([Ar],[En])
select  'äÊíÌÉ ÛíÑ ãÚÑæÝÉ','Result unknown'
 
insert into [StrSource] 
([Ar],[En])
select  'Check connection settings','Check connection settings'
 
insert into [StrSource] 
([Ar],[En])
select  'Check database path : ','Check database path : '
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÖÇÝÉ ÇáÊÍÕíá ÇáÌÒÆí','Add partial collection'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈÏæä ÊÇÑíÎ ÅÓÊÍÞÇÞ','without due date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ äåÇíÉ ÇáÚÞÏ ÎÇÑÌ ãÌÇá ÊÇÑíÎ ÈÏÇíÉ æäåÇíÉ ÇáãÏÉ','Contract end date outside of starting and ending period'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÕãíã ØÈÇÚÉ ÇáÇíÕÇá','Design printed receipt'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÚÏíá ÇáÊÍÕíá ÇáÌÒÆí','Modify partial collection'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÚÏíá ãæÇÕÝÇÊ ÇáÔÞÞ','Modify flats specification'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÚÏíá ãæÇÕÝÇÊ ÇáãÍáÇÊ','Modify shops specification'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÛíÑ ÇáÍÓÇÈ','Change account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÛííÑ ÇáÍÓÇÈÇÊ','Change accounts'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáÏÚÇæì','Lawsuits report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÚÑæÖ ÇáÇÈäíÉ','Buildings offer report'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ÅáÛÇÁ ãÑÇÌÚÉ ÇáÚÞÏ','Contract checking has been canceled'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ÇÓÊÑÏÇÏ ÇáÊÃãíä','Deposit has been returned'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ÇáÊÌÏíÏ','Has been renewal'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ÇáÊÍæíá Çáì','Redirected to'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ÇáÊÚÏíá Úáì åÐå ÇáÈíÇäÇÊ ãä ÞÈá ãÓÊÎÏã ÂÎÑ, ÓíÊã ÊÍÏíË ÇáÈíÇäÇÊ','Data has been modified by another user, the data will be updated'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ÊÌÏíÏ','Renewal has been done'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ÊÍÏíË','Update done'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ÊÍÏíË : ','Update done'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ÊÍÏíË ÃÓÚÇÑ ','Prices have been updated'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ÊÍÕíá ÇáÑÓæã ãÓÈÞÇ ãä ÎáÇá ÃãÑ ÞÈÖ','Fees has been collected by receipt order'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ÊÓáíã ÇáÚÞÏ Åáì ÇáÚãíá','Contract delivered to customer'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ÊÚÏíá : ','It has been modified'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ÊÚÏíá ÅÓã ÇáÈäÇÁ ãä ÞÈáß , åá ÊÑíÏ ÊÚÏíá ÅÓã ÇáÍÓÇÈ¿','Building name has been modified by you, do you want to modify account name?'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ÊÚÏíá ÅÓã ÇáÈäÇÁ ãä ÞÈáß , åá ÊÑíÏ ÊÚÏíá ÅÓã ãÑÇßÒ ÇáßáÝÉ ÇáãÑÊÈØÉ¿','Building name has been modified by you, do you want to modify cost center account name?'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ÊÚÏíá ÅÓã ÇáÈäÇÁ ãä ÞÈáß , åá ÊÑíÏ ÊÚÏíá ÅÓã ãÑßÒ ÇáßáÝÉ¿','Building name has been modified by you, do you want to modify cost center account name?'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ÊÚÏíá ÅÓã ÇáÒÈæä ãä ÞÈáß , åá ÊÑíÏ ÊÚÏíá ÅÓã ÇáÍÓÇÈ¿','Customer name has been modified by you, do you want to modify account name?'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ÊÚÏíá ÅÓã ÇáÒÈæä ãä ÞÈáß , åá ÊÑíÏ ÊÚÏíá ÅÓã ÍÓÇÈ ÇáÊÇãíäÇÊ','Customer name has been modified by you, do you want to modify deposit account name?'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ÊÚÏíá ÇáÍÇáÉ ÈäÌÇÍ','Status has been modified successfully'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ÊÚÏíá ÑÞã ÇáÔÞÉ åá ÊÑíÏ ÊÚÏíá ãÑßÒ ÇáßáÝÉ','Flat number has been changed, do you want to change cost center account name?'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ÊÚÏíá ÑÞã ÇáãÍá åá ÊÑíÏ ÊÚÏíá ãÑßÒ ÇáßáÝÉ','Shop No has been modified do you want to modify cost center?'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ÊÚÏíá ßáãÉ ÇáãÑæÑ ÈäÌÇÍ','Password was modified successfully'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ÊÚÑíÝ ØÑíÞÉ ÍÓÇÈ áåÐå ÇáãÌãæÚÉ ','Calculation method has been defined for this group'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ÊÛííÑ','Changes has been done'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ÊÛííÑ ãßÇä ÇáÃÚãÏÉ åá ÊÑíÏ ÍÝÙ ÇáÊÛíÑÇÊ','Column places was changed ,Do you want to save changes?'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ÊæËíÞ ÇáÚÞÏ','Contract registered'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ßÊÇÈÉ æ ÊæËíÞ ÇáÚÞÏ','Contract printed and authorized'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ãÑÇÌÚÉ ÇáÚÞÏ','Contract checking has been done'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã äÞá','Transfer has been done'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊãÊ ÇáÕíÇäÉ','Maintenance done'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊãÊ ÇáÚãáíÉ ÈäÌÇÍ','Operation successfully complete'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊãÊ ÚãáíÉ ÇáÊÏæíÑ ÈäÌÇÍ','Closing files process has successfully complete'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊãÊ ÚãáíÉ ÇáÕíÇäÉ','Maintenance done'
 
insert into [StrSource] 
([Ar],[En])
select  'Êãßäß åÐå ÇáÚãáíÉ ãä ÅÚÇÏÉ ÕíÇÛÉ ÇáÈíÇä áÌãíÚ ÇáÃæÑÇÞ ÇáãÇáíÉ ÇáãÍÏÏÉ','This process enables you to re-write details of selected checks'
 
insert into [StrSource] 
([Ar],[En])
select  'Êãßäß åÐå ÇáÚãáíÉ ãä ÅÚÇÏÉ ÕíÇÛÉ ÇáÈíÇä áÌãíÚ ÇáÃæÑÇÞ ÇáãÇáíÉ ÇáãÍÏÏÉ
åá ÊÑíÏ ÇáãÊÇÈÚÉ¿','This process enables you to re-write details of selected checks
Do you want to continue?'
 
insert into [StrSource] 
([Ar],[En])
select  'Êãßäß åÐå ÇáÚãáíÉ ãä ÇÚÇÏÉ ÖíÇÛÉ ÇáÈíÇä áÌãíÚ ÇáÃæÑÇÞ ÇáãÇáíÉ ÇáãÍÏÏ
åá ÊÑíÏ ÇáãÊÇÈÚÉ¿','This process enables you to re-write details of selected checks
Do you want to continue?'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊäÇÒáí','Descending'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊäÈíå ÇÓÊÍÞÇÞ ÇáÃæÑÇÞ ÇáãÇáíÉ ÇáãÏÝæÚÉ ÞÈá','Alert for due payble cheque before'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊäÈíå ÇÓÊÍÞÇÞ ÇáÃæÑÇÞ ÇáãÇáíÉ ÇáãÞÈæÖÉ ÞÈá:','Alert for due receivable cheque before'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊäÈíå ÞÑÈ äåÇíÉ ÚÞÏ ÅíÌÇÑ ÞÈá','Alert for contracts expiry before'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊäÈíå ááÅÓÊÍÞÇÞ ááÔíßÇÊ ÇáãÏÝæÚÉ ÞÈá','Alert for due payble cheques before:'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊäÈíå ááÅÓÊÍÞÇÞ ááÔíßÇÊ ÇáãÞÈæÖÉ ÞÈá','Alert for due receivable cheques before:'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊäÈíå äåÇíÉ ÚÞÏ ÇáÅíÌÇÑ ÞÈá','Alert for contracts expiry before:'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊäÈíåÇÊ SMS','SMS Alerts'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊäÓíÞ ÇáÃÑÞÇã','Numbers format'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊäÓíÞ ÇáÊÇÑíÎ','Date format'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊäÝíÐ ÇáÚãáíÇÊ','Processing'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊæËíÞ ÇáÚÞÏ','Contract registration'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊæÒíÚ ÇáÑÈÍ','Profit distribution'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊæÒíÚ ÇáãÈáÛ','Amount distribution'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈÇÊ ãÊÚÏÏÉ','Multiple accounts'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÕíÏ ÇáÒÈæä ÏÇÆä','Customer credit balance'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÕíÏ ÇáÒÈæä áÇ íÓÇæí ÇáÕÝÑ','Customer balance is not equal to zero'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÕíÏ ÇáÒÈæä ãÏíä','Customer debit balance'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÅíÕÇá ãßÑÑ','Duplicate receipt number'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓÚÑ ÇáÈíÚ','Selling Price'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓÚÑ ÇáÈíÚ 1','Selling Price 1'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓÚÑ ÇáÈíÚ 2','Selling Price 2'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓÚÑ ÇáÈíÚ 3','Selling Price 3'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓÚÑ ÇáÚÞÏ','Contract price'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓÚÑ ÇáßáÝÉ','Cost price'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓÚÑ ãÍÏÏ','Specific price'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓäÉ','Year'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓäÏ ÇáÞíÏ','Journal enrty'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓäÏ ÇáíæãíÉ','Journal entry'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓäÏ ÏÝÚ','Payment voucher'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓäÏ ÕÑÝ','Payment voucher'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓäÏ ÞÈÖ','Reciept voucher'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓäÏ ÞíÏ','Journal enrty'
 
insert into [StrSource] 
([Ar],[En])
select  'Óäæí','Annual'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÅäåÇÁ ÇáÌáÓÉ ááãÓÊÎÏã ','User session will be terminated'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÇáÂä ÊÏÞíÞ ÃÑÕÏÉ ÇáÍÓÇÈÇÊ','Checking accounts balance will start now'
 
insert into [StrSource] 
([Ar],[En])
select  'ÔåÑíä','2 month'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇíÇã ÇáÚÞÏ','Contract days No'
 
insert into [StrSource] 
([Ar],[En])
select  'ÝÑÞ ÇäåÇÁ ÇáÚÞÏ','Contract terminate difference'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÈáÛ ÇáÚÞÏ ãÍÕá ÈÇáßÇãá','Contract amount was collected'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÇáÞíã ÛíÑ ãØÇÈÞ áÞíãÉ ÇáÚÞÏ','Total value is not match with contract value'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÇáÞíã Ýí ÇáÍÓÇÈÇÊ ÇáãÊÚÏÏÉ ÛíÑ ãØÇÈÞ áÞíãÉ ÇáÚÞÏ','Total value in multiple accounts is not match with contract value'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÔØæÈÉ','Canceled'
 
insert into [StrSource] 
([Ar],[En])
select  'äÓÈÉ ÇáÍÓã ÃßÈÑ ãä ÇáäÓÈÉ ÇáãÓãæÍ ÈåÇ','Discount rate larger than the allowable percentage'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÅáÛÇÁ ãÑÇÌÚÉ ÇáÃæÑÇÞ ÇáãÇáíÉ ÇáãÑÊÈØÉ¿','Do you want to cancel checked of related cheques?'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÅáÛÇÁ ãÑÇÌÚÉ ÇáÏÝÚÇÊ ÇáäÞÏíÉ ÇáãÑÊÈØÉ¿','Do you want to cancel checked of related cash payments?'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÇáãÊÇÈÚÉ ¿','Do you want to continue?'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ãÑÇÌÚÉ ÇáÃæÑÇÞ ÇáãÇáíÉ ÇáãÑÊÈØÉ¿','Do you want to check the related cheques?'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ãÑÇÌÚÉ ÇáÏÝÚÇÊ ÇáäÞÏíÉ ÇáãÑÊÈØÉ¿','Do you want to review the related cash payments?'
 
insert into [StrSource] 
([Ar],[En])
select  'æÞÝ ÇáÊäÝíÐ','Suspended'
 
insert into [StrSource] 
([Ar],[En])
select  'íÑÌì ÇáÅäÊÈÇå!','Please attention !!'
 
insert into [StrSource] 
([Ar],[En])
select  'íæÌÏ ÚÞæÏ ãæÇÞÝ ãÑÊÈØÉ ÈåÐÇ ÇáÚÞÏ','There is related parking contracts with this contract'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÓÈÇÈ ÇáãÔßáÉ','Problem causes'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÓÈÇÈ ÚÏã ÇáÅäÌÇÒ','Reasons for non-completion'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÓÈæÚ','Week'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊÈÚÇÏ ãä ÃÕá','Exclude from asset'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊÈÚÇÏ ãä ÇáÃÕá','Exclude from asset'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊËãÇÑ','Investment'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊËäÇÁ ÇáÈØÇÞÇÊ','Exception cards'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊËäÇÁ ÇáÈØÇÞÇÊ ÇáÝÇÑÛÉ æ ÇáãÑÕÏÉ','Exclude empty and balanced cards'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊËäÇÁ ÇáÞíæÏ ÇáÇÝÊÊÇÍíÉ','Exclude opening entries'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊÑÌÇÚ','Restore'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊÑÌÇÚ ÇáäÓÎÉ ÇáÅÍÊíÇØíÉ','Restore data backup'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊÑÌÇÚ äÓÎÉ ÅÍÊíÇØíÉ','Restore data backup'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊÚÇÏÉ ÊÑÊíÈ ÇáÃÚãÏÉ','Restore columns sort'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊÚÇÏÉ äÓÎÉ ÅÍÊíÇØíÉ','Restore data backup'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊÚÑÇÖ ÇáÍÓÇÈÇÊ','View accounts'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊÚÑÇÖ ÇáãÑÇÌÚ','View checked'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊÚÑÇÖ ÕáÇÍíÇÊ ÇáÝÑæÚ','View branch permissions'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊÚÑÇÖ ÝÑæÞÇÊ ÃÓÚÇÑ ÇáÕÑÝ','View exchange rate'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊÚÑÇÖ ãáÝ ÇáÊÓÌíá','View log file'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊÚÑÇÖ äÇÝÐÉ ÇáÃÞÓÇØ','View installments windows '
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊÚÑÇÖ äÇÝÐÉ ÇáÊÓÌíá','View log window'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊÚÑÇÖ...','Browse...'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊáÇã ÈäÇÁ','Receiving building'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊíÑÇÏ xls ...','Import From xls ...'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÓÚÇÑ','Prices'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÓÚÇÑ ÇáÕÑÝ','Exchange rates'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáÃÕá','Asset name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáÃãÑ','Order name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáÈäÇÁ','Building name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáÈäß','Bank name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáÍÓÇÈ','Account name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáÍÓÇÈ ãßÑÑ','Account name duplicate'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáÒÈæä','Customer name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáÔÑíß','Partner name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáÞÇÆãÉ','Menu name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáÞÇÆãÉ ÇááÇÊíäí','Latin menu name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáßãÈíæÊÑ','Computer name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáãÌãÚ','Complex name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáãÏíäÉ ãßÑÑ','City name duplicate'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáãÓÊÃÌÑ','Tenants name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáãÓÊÇÌÑ','Tenants name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáãÓÊÎÏã','User Name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáãÓÊÝíÏ','Beneficiary name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáãäØÞÉ','Area name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáãæÑÏ','Supplier name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáäãØ','Type Name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÌÑÁ ÇáÚãáÉ','Currency part name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÌÑÁ ÇáÚãáÉ ÇááÇÊíäí','Currency part latin name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÌÒÁ ÇáÚãáÉ','Currency part name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÌÒÁ ÇáÚãáÉ ÇááÇÊíäí','Currency part latin name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÕÇÍÈ ÇáÚÞÇÑ','Property owner name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ãáÝ ÞÇÚÏÉ ÇáÈíÇäÇÊ ÇáÌÏíÏ','Name of new database file'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÕÛÑ Çæ íÓÇæí','Less or Equal'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÕÛÑ ãä','Less than'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÕäÇÝ ÇáÃÕæá','Asset category'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÖÇÝÇÊ','Additions'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊãÊ ÇáãÚÇáÌÉ','Processed'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊæÓíÚ ßá ÇáÇÚãÏÉ','Expand all columns'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ ÔíßÇÊ  / ÇãßÇäíÉ ÇáÍÝÙ ãÚ ÚÏã ÊØÇÈÞ ÇáãÈáÛ','Allow to generate cheques even with the mismatch amount'
 
insert into [StrSource] 
([Ar],[En])
select  'Í/ ÇíÑÇÏ ÇáÝÇÊæÑÉ','Revenue A/C'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÜ/ ÝÑæÞÇÊ ÃÓÚÇÑ ÇáÕÑÝ','Currency differences A/C'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÇáÉ ÅÏÎÇá ÇáÚÞÏ','Contract input case'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÇáÉ ÇáÃÑÖ','Land status'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÇáÉ ÇáÅäåÇÁ','Termination status'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÇáÉ ÇáÅíÌÇÑ','Leaasing status'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÇáÉ ÇáÍÏÇÆÞ','Garden status'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÇáÉ ÇáÔÞÉ','Flat status'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÇáÉ ÇáÕíÇäÉ','Maintenance status'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÇáÉ ÇáÚÑÖ','Offer status'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÇáÉ ÇáÚÞÇÑ','Property status'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÇáÉ ÇáÚÞÏ','Contract status'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÇáÉ ÇáÝíáÇ','Villa status'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÌÒ','Reserve'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÌÒ ÚÞÇÑ','Property reservation'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÌã ÇáÎØ','Font size'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÏË ÇáÎØÃ ÇáÊÇáí','The following error occurred'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÏÏ ÅÓã ÇáãÓÊÎÏã','Select the user name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÏÏ ÇáÍÓÇÈÇÊ ÇáÎÊÇãíÉ ÇáãØáæÈ ÊÏæíÑåÇ','Select the final accounts to be closed'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÏÏ ÍÞá ÇáãÏíä Ãæ ÇáÏÇÆä','Chose Debit / Credit account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÏÏ äæÚ ÇáãáßíÉ','Select ownership type'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ','Delete'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ  Çáßá','Delete All'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÇáÃÑÖ ÇáãÍÏÏÉ','Delete selected land'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÇáÔÞÉ ÇáãÍÏÏÉ','Delete selected flats'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÇáÔÞÞ','Delete flats'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÇáÔÞÞ ÇáÎÏã','Delete servants flats'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÇáÞáã ÇáãÍÏÏ','Delete selected line'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÇáÞíÏ','Delete journal entry'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÇáãÍá ÇáãÍÏÏ','Delete selected shop'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÇáãÍáÇÊ','Delete shops'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÇáãÓÊæÏÚÇÊ','Delete warehouses'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÇáãßÇÊÈ','Delete offices'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÇáãæÇÞÝ','Delete parking'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÇáãæÞÚ','Delete location'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÊÐßíÑÇÊ ÇáÛíÑ','Delete others reminders'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÓØÑ','Delete row'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÔÞÞ ÇáÓÇÆÞíä','Delete drivers flats'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÔÞÞ ÇáãíÒÇäíä','Delete mizanin'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÔÞÞ ÈäÊ åÇæÓ','Delete pent house'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÑßÉ','Activity'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÖÇÝÉ','Add'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÖÇÝÉ ÃÑÖ','Add land'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÖÇÝÉ ÇáÈíÇäÇÊ...','Add details...'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÖÇÝÉ Çáì ÃÕá','Add to asset'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÖÇÝÉ Çáì ÇáÃÕá','Add to asset'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÖÇÝÉ ÔÞÉ','Add flat'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÖÇÝÉ ÔÞÞ ÇáÈäÇÁ','Add buildings flats'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÖÇÝÉ ÔÞÞ ÈäÇÁ','Add buildings flats'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÚÏ ÇáãÍÇæáÉ ãÑÉ ËÇäíÉ','Try again'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÚÏÇÏ ÇáÎÑÇÆØ','Maps settings'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÚÏÇÏÇÊ','Settings'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÚÏÇÏÇÊ &SMS','SMS Settings'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÚÏÇÏÇÊ SMS','SMS Settings'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÚÏÇÏÇÊ ÇáÎÑÇÆØ','Map ettings'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÚÏÇÏÇÊ ÇáÓäæÇÊ ÇáÓÇÈÞÉ','Previous years settings'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÚÏÇÏÇÊ ÚÇãÉ','General settings'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÚÏÇÏÇÊ ãÎØØ ÇáÈäÇÁ','Building plan settings'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÛáÇÞ','Close'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÛáÇÞ ßÇÝÉ ÇáÅØÇÑÇÊ','Close all windows'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÝÊÑÇÖí','Default'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÍÕíá ÇáÌÒÆí íæáÏ ÞíÏ ÈÔßá Âáí','Partial collection generate journal entry automatically'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÍÕíá íæáÏ ÞíÏ','Collection generate journal entry'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÍÕíá íæáÏ ÞíÏ ÈÔßá Âáí','Collection generate journal entry automatically'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÏÞíÞ','Check box'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÐßíÑ','Reminder'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÑÊíÈ','Sorting'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÑÌãÉ','Translate'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ÃÎÐ äÓÎÉ ÅÍÊíÇØíÉ ÈäÌÇÍ','Data backup successfully done'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ÅÑÓÇá SMS','SMS was sent successfully'
 
insert into [StrSource] 
([Ar],[En])
select  'Ïáíá ãÑÇßÒ ÇáßáÝÉ','Chart of cost center'
 
insert into [StrSource] 
([Ar],[En])
select  'ÏæÑÉ ÇáÚÞÏ','Contract cycle'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÃÓ ÇáãÇá','Capital'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÇÌÚ ãÏíÑ ÇáäÙÇã','Contact system administrator'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÈØ ÇáãÓÊÎÏã ÈÇáÈÇÆÚ','Link user with salesman'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÌæÚ','Back'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÓæã ÃÎÑì','Other fees'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÕíÏ ÇáÍÑßÉ','Activity balance'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÕíÏ ÇáÑÓÇÆá','SMS Balance'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÕíÏ ÇáÒÈæä','Customer balance'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÕíÏ ÇáÝÊÑÉ ÏÇÆä','Period credit balance'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÕíÏ ÇáÝÊÑÉ ãÏíä','Period debit balance'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÕíÏ ÍÓÇÈ','Account balance'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÕíÏ ÓÇÈÞ ÏÇÆä','Previous credit balance'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÕíÏ ÓÇÈÞ ãÏíä','Previous debit balance'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÕíÏ äåÇÆí ÏÇÆä','Final credit balance'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÕíÏ äåÇÆí ãÏíä','Final debit balance'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã','No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÃãÑ ÇáÕíÇäÉ','Maintenance order No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã Ç áÈäÇÁ','Building No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÅíÕÇá','Receipt No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÈØÇÞÉ','Card No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÈØÇÞÉ : ','Card number:'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÈäÇÁ','Building No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÌæÇá','Mobile'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÍÓÇÈ','Account No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÍæÖ','Basin No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÓäÏ','Ownership entry No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÓíÇÑÉ','Car plate No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÔÍä','Shipping number'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÔÞÉ','Flat No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÔÞÉ / ÇáãÍá','Flat / Shop No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÔßæì','Complaint No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÔßæì ãßÑÑ','Complaint number duplicate'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÔíß','Cheque No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÚÞÇÑ','Property No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÚÞÏ','Contract No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÚÞÏ : ','Contract No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÝíáÇ','Villa No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÞØÚÉ','Area No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÞíÏ ','Entry No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÞíÏ ÇáÇÝÊÊÇÍí','Opening entry number'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÞíÏ ãßÑÑ','Journal entry duplicate'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáãÍá','Shop No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáãæÞÝ','Parking No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáåÇÊÝ','Phone No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáæÍÏÉ','Unit No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÈØÇÞÉ ÇáÚãá','Labour card No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÈØÇÞÉ ÇáãÄÌÑ','Lessor card No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÈØÇÞÉ ÇáåæíÉ ','ID card No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÌæÇÒ ÇáÓÝÑ','Passport No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÚÏÇÏ ÇáßåÑÈÇÁ','Electricity meter No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÚÏÇÏ ÇáãíÇå','Water meter No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã åÇÊÝ ÇáÚãá','Business No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã æ ãßÇä ÅÕÏÇÑ ÇáÅÞÇãÉ','Resident No. and issued by'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑãÒ ÇáÃÕá','Asset code'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑãÒ ÇáÈÇÑßæÏ','Barcode'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑãÒ ÇáÈäÇÁ','Building code'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑãÒ ÇáÍÓÇÈ','Account code'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑãÒÇáÃÕá','Asset code'
 
insert into [StrSource] 
([Ar],[En])
select  'ÒÈæä','Cutomer'
 
insert into [StrSource] 
([Ar],[En])
select  'ÒíÇÏÉ Ýí ÚãÑ ÇáÃÕá','Increase in asset life'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓÇÚÉ ÇáÊÐßíÑ','Reminder time'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓÈÈ ÇáÅÑÌÇÚ','Return reason'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓÈÈ ÇáÊÇÎíÑ','Delay reason'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓÊã äÞá ßá ÇáÍÑßÇÊ ÇáÊÇÈÚÉ ááÍÓÇÈ :','All activities of this account will be transferred:'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓØÍ ÇáãßÊÈ','Desktop'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓØÑ ÌÏíÏ','New row'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓÚÑ ÇÇáÅíÌÇÑ','Rent price'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓÚÑ ÇáÅíÌÇÑ','Rent price'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓÚÑ ÇáÅíÍÇÑ','Rent price'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÝÑÇÛ ÈíÇäÇÊ ÇáäÇÝÐÉ ÈÚÏ ÇáÅÖÇÝÉ','Empty window after data added'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÝÑÇÛ ÈíÇäÇÊ ÇáäÇÝÐÉ ÈÚÏ ÇáÍÐÝ','Empty window after data deletion'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÝÞí','Horizontally'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÞÓÇØ ÇáÚÞÏ','Contract installments'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÞÓÇØ ÇáÚÞÏ ÍÓÈ ÎØÉ','Contract installments by plan'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÞÝÇá ÃãÑ ÇáÕíÇäÉ','Close maintenance order '
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÞÝÇá ÇáÔßæì','Close complaint'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÞÝÇá Ôßæì ÇáÕíÇäÉ','Close maintenance complaint'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃßÈÑ Çæ íÓÇæí','Largest or Equal'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃßÈÑ ãä','More than'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃßËÑ ãä ãÑÉ','More than once'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅáÛÇÁ ÇáÃãÑ','Cancel'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅáÛÇÁ ÍÌÒ','Cancel reservation'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅáÛÇÁ ÍÌæÒÇÊ ÇáÛíÑ','Cancel other reservation'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅãÊáÇß ÇáÃÑÖ','Land ownership'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅãÊáÇß ÇáÈäÇÁ','Building ownership'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃãÑ ÇáÕíÇäÉ','Maintenance order'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃãÑ ÇáÕíÇäÉ ÞíÏ ÇáÅäÌÇÒ','Maintenance order in progress'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃãÑ ÕíÇäÉ','Maintenance order'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅãßÇäíÉ ÇáÊÕÏíÑ áÅßÓá','Export to Excel'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅãßÇäíÉ ÊÚÏíá ÓäÏÇÊ ÇáÛíÑ','Modify other users journal entries'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅãßÇäíÉ ÊÚÏíá ÔíßÇÊ ÇáÛíÑ','Modify other users cheques'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅãßÇäíÉ ÊÚÏíá ÚÞæÏ ÇáÛíÑ','Modify other users contracts'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅãßÇäíÉ ÊÛííÑ ÇáÈÇÆÚ','Change salesman'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅãßÇäíÉ ÊÛííÑ ßáãÉ ÇáãÑæÑ','Change password'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅãßÇäíÉ ÍÐÝ ÇáÓäÏÇÊ ÇáÊí áåÇ ÇÕá','Delete journal entries with origin'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅãßÇäíÉ ØÈÇÚÉ ÇáÊÞÇÑíÑ','Print Reports'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅäÊÈå ÓíÊã ÅÚÇÏÉ ÊÑÞíã ÓäÏÇÊ ÇáÞíÏ ÍÓÈ ÇáÊÇÑíÎ','Attentions: journal entries will be renumbering by date order!!!'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃäÊÈå!','Attention!'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅäÔÇÁ ÇáÅÌÑÇÆíÇÊ æ ÇáÊæÇÈÚ','Create procedures and triggers'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅäÔÇÁ ÇáÌÏÇæá','Create tables'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅäÔÇÁ ÇáÞíÏ','Create journal entry'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅäÔÇÁ ÇáÞíÏ ÈÊÇÑíÎ','Create journal entry on date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅäÔÇÁ ÇáãáÝ','Create File'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅäÔÇÁ ÍÓÇÈ ÝÑÚí','Add subaccount'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅäÔÇÁ Öãä','Create into'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅäÔÇÁ ÝÑÚ ÝÑÚí','Add sub-branch'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅäÔÇÁ ÞÇÚÏÉ ÈíÇäÇÊ','Create database'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅäÔÇÁ ãáÝ  ÌÏíÏ','Generate New File'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅäÞÇÕ Ýí ÚãÑ ÇáÃÕá','Decrease in asset life'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃäãÇØ ÇáÃæÑÇÞ ÇáãÇáíÉ','Note Papers Types'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃäãÇØ ÇáÓäÏÇÊ','Entries Types'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃäãÇØ ÇáÔíßÇÊ','Cheques Types'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃäãÇØ ÇáÚÞæÏ','Contracts Types'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃäãÇØ ÇáÝæÇÊíÑ','Bill Types'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃäãÇØ ÇáÞíÏ ÇáÍÓÇÈí','Accounting journal entry types'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃäãÇØ ÝæÇÊíÑ ÇáßåÑÈÇÁ','Electricity Bill Types'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅäåÇÁ','Terminate'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅäåÇÁ ÇáÃæÑÇÞ ÇáãÑÊÌÚÉ','Finish returned cheques'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅäåÇÁ ÇáÇæÑÇÞ ÇáãÑÊÌÚÉ','Finish returned cheques'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅäåÇÁ ÇáÔíßÇÊ ÇáãÑÊÌÚÉ','Finish returned cheques'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅäåÇÁ ÇáÕíÇäÉ','Close maintenance'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅäåÇÁ ÇáÚÞÏ','Contract termination'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅåÊáÇß ÇáÃÕæá','Assets depreciation'
 
insert into [StrSource] 
([Ar],[En])
select  'Ãæá ãÑÉ','First time'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅíÌÇÑ','Rent'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅíÌÇÑ ÔÞÉ','Flat rent'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÏæÇÊ','Tools'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÑÓÇá SMS áãÌãæÚÉ','Send SMS to group'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÓÊËãÇÑ','Investment'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÓÊÚÑÇÖ ÇáãÑÇÌÚ ','View checked'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÓÊÚÑÇÖ ÊÐßíÑÇÊ ÇáÛíÑ','View others reminder'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÓÊÚÑÇÖ äÇÝÐÉ ÃÑÕÏÉ ÇáÍÓÇÈÇÊ','View information window'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÑÍíá','Posting'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÑÍíá íæáÏ ÞíÏ','Posting generate journal entry'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÑÍíá íæáÏ ÞíÏ ÈÔßá Âáí','Posting generate journal entry automatically'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÓáÓá','Sequence'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÓãíÉ ÇáÌÏíÏÉ','New name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÕäíÝ','Class'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÙåíÑ','Endrosement'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÙåíÑ íæáÏ ÞíÏ','Endrosement generate journal entry'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÙåíÑ íæáÏ ÞíÏ ÈÔßá Âáí','Endrosement generate journal entry automatically'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÚÇÏá','Rate'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÝÇÕíá','Details'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÞÇÑíÑ ÇáÚÞÇÑíÉ','Realty Reports'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊæÒíÚí','Distributive'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊæáÏ ÞíÏ','Generate journal entry'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊæáÏ ÞíÏ ÈÔßá ÊáÞÇÆí','Generate journal entry automatically'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ ÃæÑÇÞ ãÇáíÉ','Generate checks'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ ÃæÑÇÞ ãÇáíÉ ÍÓÈ ÎØÉ','Generate checks by plan'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ ÇáÔÞÞ','Generating flats'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ ÇáÔÞÞ ÇáÎÏã','Generate servants flats'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ ÇáÔÞÞ ÇáÓÇÆÞíä','Generate drivers flats'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ ÇáÞíÏ','Generate journal entry'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ Çáßá','Generate All'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ ÇáãÍáÇÊ','Generate shops'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ ÇáãÓÊæÏÚÇÊ','Generate warehouses'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ ÇáãßÇÊÈ','Generate offices'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ ÇáãæÇÞÝ','Generate parking'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ ÓäÏ ÞíÏ','Generate journal entry'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ ÔÞÞ ÇáãíÒÇäíä','Generate mizanin'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ ÔÞÞ ÈäÊ åÇæÓ','Generate pent house'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ ÔíßÇÊ','Generate cheques'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ ÔíßÇÊ ÍÓÈ ÎØÉ ','Generate cheques by plan'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ ÞíÏ','Generate journal entry'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ ÞíÏ ÇáÅäåÇÁ','Generate termination journal entry'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ ÞíÏ ÈÔßá Âáí','Generate journal entry automatically'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ ÞíÏ ÝÑæÞÇÊ ÃÓÚÇÑ ÇáÕÑÝ','Generate exchange rate journal entry'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ ÞíÏ áßá Þáã','Generate journal entry for each line'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÑÈÇÍ ÈíÚ ÇáÔÞÞ','Profits flats sales'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÑÌÇÚ','Return'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÑÌÇÚ ÇáÔíß','cheque return'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇá','Send'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇá &SMS','Send SMS'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇá SMS','Send SMS'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇá SMS áãÌãæÚÉ','Send SMS to Group'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇá Âáí','Automatically Send'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇá Âáí ÚäÏ ÅÖÇÝÉ ÃãÑ ÇáÕíÇäÉ','Automatically send SMS when add maintenance order'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇá Âáí ÚäÏ ÅÖÇÝÉ Ôßæì','Automatically send SMS when add complaint'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇá Âáí ÚäÏ ÇáÇÖÇÝÉ','Automatically send SMS when add'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇá Âáí ÞÈá ÇÓÊÍÞÇÞ ÇáæÑÞÉ ÇáãÇáíÉ ÈÜ ','Automatically send SMS before check due date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇá ÇáÕÝÍÉ ÇáãÍÏÏÉ','Send the selected page'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇá ÇáÚÞÏ Åáì ÇáÊÕÏíÞ','Send contract to registration'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇá ÑÓÇáÉ ÈÔßá Âáí ÚäÏ ÇáÊÍÕíá ÝæÑÇð','Automatically send SMS when collect the check'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇá ÑÓÇáÉ ÈÔßá Âáí Ýí íæã ÇäÊåÇÁ ÇáÚÞÏ','Automatically send SMS on contract expiry day'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇá ÑÓÇáÉ ÈÚÏ ÅÑÌÇÚ ÇáæÑÞÉ ÇáãÇáíÉ ÈÜ','Automatically send SMS after return the check'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇá ÑÓÇáÉ ÈÚÏ ÇäÊåÇÁ ÇáÚÞÏ ÈÜ','Automatically send SMS after expiration of contract'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇá ÑÓÇáÉ ÈÚÏ ÊÍÕíá ÇáæÑÞÉ ÇáãÇáíÉ ÈÜ','Automatically send SMS after collect the check'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇá ßá SMS ','Send All SMS'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÑÖ','Land'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÒÇáÉ ÅÔÇÑÉ ÇáãÑÇÌÚ','Remove checked mark'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÓÈÇÈ ÇáÊÇÎíÑ','Delay reasons'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÑÌÇÚ','Return'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÑÌÇÚ  íæáÏ ÞíÏ ÈÔßá Âáí','check return generates journal entry automatically'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÑÌÇÚ íæáÏ ÞíÏ','check return generates journal entry'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÑÓÇá ÇáÂáí SMS','Automatic SMS sending'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÃÑÖ','Land'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÃÑÞÇã ÇáãÑÓá ÇáíåÇ','Consignee numbers'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÒÇÍÉ','Displacement'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÓÊÈÚÇÏÇÊ','Disposals'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÓÊÍÞÇÞ','Due'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÓÊÚáÇã Úä ÇáÑÕíÏ','Balance inquiry'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÓÊåáÇß','Consumption'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÓã','Name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÓã ÇáßÇãá','Full name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÓã ÇáßÇãá íÍæí','Full name contains'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÓã ÇááÇÊíäí','Latin name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÓã ÇááÇÊíäí ãßÑÑ','Duplicate latin name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÓã ãßÑÑ','Duplicate name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÕÏÇÑ ÑÞã ','Version No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÃÕá','Origin'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÃÕá ÝÚÇá','Asset active'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÃÕá ãÈÇÚ','Asset sold'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÃÕæá','Assets'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÖÇÝÇÊ','Extras'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÅØÇÑÇÊ ÇáãÝÊæÍÉ','Opened windows'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÅØáÇáÉ','View'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÙåÇÑ','View'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÃÚÏÇÏ','Numbers'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÚÏÇÏÇÊ','Settings'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÃÚÙãí','Maximum'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÝÊÑÇÖíÇÊ','Defaults'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÝÊÑÇÖíÉ','Defaults'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÃÞÓÇØ','Installments'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÅãÇÑÉ','Emirate'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÅäÊÙÇÑ','Please wait'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÃäãÇØ','Types'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÃäãÇØ ÇáÃæÑÇÞ ÇáãÇáíÉ','Note types'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÅåÊáÇß','Depreciation'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÅåÊáÇßÇÊ','Depreciations'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÃæÑÇÞ ÇáãÇáíÉ','Note papers'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÃæÑÇÞ ÇáãÇáíÉ ÇáÊí áíÓ áåÇ ÍÇáÉ','Checks without any case'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÃæÑÇÞ ÇáãÇáíÉ ÇáãÍÕáÉ','Collected checks'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÃæÑÇÞ ÇáãÇáíÉ ÇáãÑÊÌÚÉ','Returned checks'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÃæÑÇÞ ÇáãÇáíÉ ÇáãÓÊÍÞÉ','Due checks'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÃæá','First'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÅíÌÇÑ','Rent'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÅíÑÇÏ','Income'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÅíÑÇÏÇÊ ÇáãÍÞÞÉ','Revenues'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÅíÕÇá ãßÑÑ','Receipt duplicate'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÇÌãÇáí','Total'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÇÑÖ','Land'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÇÑÖ æÇÑÏÉ ÈÚÞÏ : ','Land contained in contract:'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÇÓÊÈÚÇÏÇÊ','Disposals'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÇÓÊÍÞÇÞ','Due'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÇÓã','Name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÇÓã ÇáÊÌÇÑí','Commercial Name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÇÖÇÝÉ','Added'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÇÚãÇá ÇáãäÌÒÉ','Completed works'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÇæáì','First'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÇíÏÇÚ','Deposit'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÈÇÆÚ','Salesman'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÈÇÑßæÏ','Barcode'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÈÇÞí','Rest'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÈÍË','Search'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÈÍË Ýí ÇáÚÞæÏ','Search in contracts'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÈÑäÇãÌ','Program'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÈØÇÞÇÊ','Cards'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÈØÇÞÇä','Cards'
 
insert into [StrSource] 
([Ar],[En])
select  'ÌÇÑí ÇáÊäÝíÐ','Processing'
 
insert into [StrSource] 
([Ar],[En])
select  'ÌÏíÏ','New'
 
insert into [StrSource] 
([Ar],[En])
select  'ÌÑÏ ÇáÃÕæá','Assets inventory'
 
insert into [StrSource] 
([Ar],[En])
select  'ÌÑÏ ÇáãæÇÏ','Materials inventory'
 
insert into [StrSource] 
([Ar],[En])
select  'ÌÑÏ ÊÝÕíáí ÇáãÓÊæÏÚÇÊ','Warehouses detailed inventory'
 
insert into [StrSource] 
([Ar],[En])
select  'ÌÑÏ ÊÝÕíáí ááãÓÊæÏÚÇÊ','Warehouses detailed inventory'
 
insert into [StrSource] 
([Ar],[En])
select  'ÌæÇá','Mobile'
 
insert into [StrSource] 
([Ar],[En])
select  'ÌæÇá ÇáÒÈæä','Customer mobile'
 
insert into [StrSource] 
([Ar],[En])
select  'Í/ ÇáÅÖÇÝÇÊ','Extra A/C'
 
insert into [StrSource] 
([Ar],[En])
select  'Í/ ÇáÍÓãíÇÊ','Discount A/C'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÖÇÝÉ ãÈáÛ ËÇÈÊ','Add fixed amount'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÖÇÝÉ ãÍá','Add shop'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÖÇÝÉ ãáÝ','Add file'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÖÇÝÉ ãæÞÚ','Add location'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÖÛØ ÒÑ ÇáÈÏÇ ááÈÏÃ ÈÇáÊÏæíÑ','Press the start button to start the process'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅØÇÑ','Window'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÅÓã ÇáÍÓÇÈ','Show account name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÇæÑÇÞ ÇáÛíÑ ãÑÊÈØÉ ÈÚÞæÏ','Show checks that not related with contracts'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÊÝÇÕíá','Show details'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÍÑßÇÊ','Show activities'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÍÓÇÈÇÊ ÇáÎÊÇãíÉ','Show closing accounts'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÍÓÇÈÇÊ ÇáÑÆíÓíÉ','Show main accounts'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÍÓÇÈÇÊ ÇáÝÇÑÛÉ','Show empty accounts'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÍÓÇÈÇÊ ÇáÝÑÚíÉ ÇáÝÇÑÛÉ','Show empty sub accounts'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÍÓÇÈÇÊ ÇáãÑÕÏÉ','Show balanced accounts'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÍÓÇÈÇÊ Ýí ÇáÚÞæÏ','Show accounts in contracts'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÍÞæá','Show fields'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÎÑÇÆØ','Show maps'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÏÇÆä','Show credit'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÑÕíÏ','Show balance'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÑÕíÏ ÇáÓÇÈÞ','Show previous balance'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÔÞÞ','Show flats'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÔÞÞ æ ÇáãÍáÇÊ ÇáãÏãÌÉ ÈÔÞÞ æãÍáÇÊ ÊÌãíÚíÉ','Show merged shops and flats'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÚÞÇÑÇÊ','Show properties'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÚÞæÏ ÇáÊí áíÓ áåÇ ÊÃãíäÇÊ','Show contracts without security deposit'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÝÇÕáÉ ÇáÃáÝíÉ','Show thousand separator'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáãÍáÇÊ','Show shops'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáãÏíä','Show debit'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáãáÎÕ ÇáÓäæí','Show annual summary'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáãæÇÞÝ','Show parking'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÊÝÇÕíá ÇáÍÓÇÈÇÊ ÇáÎÊÇãíÉ','Show closing accounts details'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÍÓÇÈÇÊ ÇáÒÈÇÆä / ÇáãæÑÏíä','Show supplier / customer accounts'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÍÞá ÇáÏÇÆä','Show credit account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÍÞá ÇáÚÞÏ','Show contract field'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÍÞá ÇáãÏíä','Show debit account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÑÓÇÆá ÅÊãÇã ÇáÚãáíÉ ÈäÌÇÍ','Show successfully finisshed messages'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÑÓÇÆá ÊÃßíÏ ÇáÍÝÙ','Show save confirming messages'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÑãÒ ÇáÍÓÇÈ','Show account code'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÇáÊÑÞíã','Renumbering'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊÑÞíã','Renumbering'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊÑÞíã ÇáÃæÑÇÞ ÇáãÇáíÉ','Renumbering checks'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊÑÞíã ÇáÚÞæÏ','Renumbering contracts'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊÑÞíã ÈØÇÞÇÊ ÇáÃÑÖ','Renumbering land cards'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊÑÞíã ÈØÇÞÇÊ ÇáÔÞÞ','Renumbering flat cards'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊÑÞíã ÈØÇÞÇÊ ÇáÝáá','Renumbering villa cards'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊÑÞíã ÈØÇÞÇÊ ÇáãÍáÇÊ','Renumbering shop cards'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊÑÞíã ÈØÇÞÇÊ ÇáãæÇÞÝ','Renumbering parking cards'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊÑÞíã ÓäÏÇÊ ÇáÞíÏ','Renumbering journal entries'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊÑÞíã äãØ ÃæÑÇÞ ãÇáíÉ','Renumbering notes type'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊÑÞíã äãØ ÓäÏ','Renumbering journal entries type'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊÑÞíã äãØ ÚÞæÏ','Renumbering contract type'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊÑãíÒ ÃÈäÇÁ ÇáÍÓÇÈ','Renumbering subaccounts'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊÓãíÉ','Rename'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊÓãíÉ ÇáãáÝ','File rename'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊÔßíá ÇáÈíÇä','Regenerate notes'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊæáíÏ ÓäÏÇÊ ÇáÞíÏ','Regenerate journal entries'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊæáíÏ ÓäÏÇÊ ÇáÞíÏ ááÔíßÇÊ','Regenerate cheque journal entries'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ãÚÇáÌÉ ÇáÈíÇä','Reprocessing notes'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÚÊãÇÏ ÇáÍÓÇÈÇÊ ÇáÅÝÊÑÇÖíÉ','Use default accounts'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÚÊãÇÏ ÊÇÑíÎ','Use date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÚÊãÇÏ ÊÇÑíÎ ÇáÅÓÊÍÞÇÞ','Use due date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÚÊãÇÏ ÍÓÇÈ ÇáÅíÑÇÏ ááÈäÇÁ ßÍÓÇÈ ãÞÇÈá ÇÝÊÑÇÖí áÚãæáÉ ÇáÊÍÕíá','Use building revenue account as default account of collection commission'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÚÊãÇÏ ÍÓÇÈ ÇáÒÈæä ßÍÓÇÈ ãÞÇÈá ÇÝÊÑÇÖí ááÊÍÕíá ÇáÌÒÆí ','Use customer account as default partial collection account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÚÊãÇÏ ÏÑÌÉ','Use Level'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÚÊãÇÏ ÏÑÌÉ ÓÑíÉ ÇáÔíß','Use security level of cheque'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÚÏ ÅÏÎÇá ßáãÉ ÇáãÑæÑ ÇáÌÏíÏÉ ÈÔßá ÕÍíÍ','Enter new password correctly'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÚÏ ÇáãÍÇáÉ ãÑÉ ËÇäíÉ','Try again'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÈØÇÞÉ ãÝÊæÍÉ ãä ÇáÍÇÓÈ : ','Card is opened from computer:'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÈäÇÁ','Building'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÈäÇíÉ','Building'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÈäÊ åÇæÓ','Pent House'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÈäß','Bank'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÈíÇä','Notes'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÈíÇä 2','Notes2'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÈíÇä ÇáÌãÑßí','Customs statement'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÈíÇä íÍæí','Notes Contain'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÈíÇä2','Notes2'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÈíÇäÇÊ','Data'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÈíÇäÇÊ ÇáãÇáíÉ','Financial data'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÈíÇäÇÊ Ýí ÍÇáÉ ÊÚÏíá åá ÊÑíÏ ÊÌÇåá ÇáÊÛííÑÇÊ','Data still unsaved, Do you want to ignore changes?'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÈíÇäÇÊ ãÓÊÎÏãÉ æ áÇ íãßä ÍÐÝåÇ','Data used and cannot be deleted'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÈíÚ','Sales'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÃãíä','Security deposit'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÇËíÑ Úáì ÇáÚãÑ','effect on age'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÇÑíÎ','Date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÇÑíÎ ÇáÊÐßíÑ','Remind date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÇÑíÎ ÇáãÊæÞÚ áÅäåÇÁ ÇáÕíÇäÉ ','Expected date to finish maintenance'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÇÑíÎ ÇáãÍÏÏ ÃÕÛÑ ãä ÊÇÑíÎ ÇáÊËÈíÊ','Date is smaller than fixed date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÇÑíÎ ÇáãÍÏÏ ÃÕÛÑ ãä ÊÇÑíÎ ÈÏÇíÉ ÇáãÏÉ','Selected date is smaller than starting date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÇÑíÎ ÇáãÍÏÏ ÃßÈÑ ãä ÊÇÑíÎ äåÇíÉ ÇáãÏÉ','Selected date is larger than starting date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÇÑíÎ ÍÓÈ','Date by'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÇÑíÎ ÛíÑ ãØÇÈÞ','Date is not match'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÇáí','Next'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÍÕíá','Collection'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÍÕíá ÇáÌÒÆí','Partial collection'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÍÕíá ÇáÌÒÆí íæáÏ ÞíÏ','Partial collection generate journal entry'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÏÝÚÉ ÇáÓäæíÉ','Annual payment'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÏÝÚÉ ÇáÔåÑíÉ','Monthly payment'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÏÝÚÉ ÇáãÓÊÍÞÉ','Due payment'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÏæáÉ','Country'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÓÊÚÑÇÖ äÇÝÐÉ ÇáÕæÑ ','View image window'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÓÊáÇã ÇáÚÞÏ ãä ÇáÊÕÏíÞ ','Contract received from registration'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÓã ÇáãÌãÚ','Complex name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÓã ÇáãÓÊÎÏã','User Name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÓã ÇáãáÝ','File name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇØÇÑ','Window'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÙåÇÑ','View'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÙåÇÑ ÊÞÑíÑ ÇáÏÝÚÇÊ ÇáãÊÃÎÑÉ','Show overdue payments report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÚÊÈÇÑ ÇáÏÝÚÉ ÇáãÓÊÍÞÉ ÏÝÚÉ ãÊÃÎÑÉ Ýí ÍÇá ÊÌÇæÒ ','Consider due payment as late payment if exceeded'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÚÊÈÇÑ ÇáÚãæáÉ','Consider commission'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÚÊãÇÏ ÊÇÑíÎ äåÇíÉ ÇáÇÓÊËãÇÑ ßÊÇÑíÎ äåÇíÉ ÚÞæÏ ÇáÅíÌÇÑ','Use expiry of investment date as contracts expiry date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÚÊãÇÏ ÍÓÇÈ ÇáÊÍÕíá ßÍÓÇÈ ãÞÇÈá ÇÝÊÑÇÖí áÛÑÇãÉ ÇáÊÃÎíÑ','Use collection account as default observe account of delay fees'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÚÊãÇÏ ÍÓÇÈ ÇáÒÈæä / ÇáãæÑÏ ßÍÓÇÈ ÇÝÊÑÇÖí áÛÑÇãÉ ÇáÅÑÌÇÚ','Use supplier / customer account as default account of check return fees'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÚÊãÇÏ ÍÓÇÈ ÇáÒÈæä / ÇáãæÑÏ ßÍÓÇÈ ÇÝÊÑÇÖí áÛÑÇãÉ ÇáÊÃÎíÑ','Use supplier / customer account as default account of delay fees'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÚÊãÇÏ ÍÓÇÈ ÇáÒÈæä / ÇáãæÑÏ ßÍÓÇÈ ÇÝÊÑÇÖí ááÅÑÌÇÚ','Use supplier / customer account as default account of check return'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÚÊãÇÏ ÍÓÇÈ ÇáÒÈæä ßÍÓÇÈ ãÞÇÈá ÇÝÊÑÇÖí ááÊÑÍíá','Use customer account as default account of check post'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÚÊãÇÏ ÍÓÇÈ ÇáãÕÑÝ ááÈäÇÁ  ßÍÓÇÈ ÇÝÊÑÇÖí ááÅÑÌÇÚ','Use bank account as default account of check return'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÚÊãÇÏ ÍÓÇÈ ÇáãÕÑÝ ááÈäÇÁ ßÍÓÇÈ ÇÝÊÑÇÖí ááÊÍÕíá ','Use bank account as default account of check post'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÚÊãÇÏ ÍÓÇÈ ÇáãÕÑÝ ááÈäÇÁ ßÍÓÇÈ ÇÝÊÑÇÖí ááÊÍÕíá  ÇáÌÒÆí','Use building bank account as default account partial collection'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÚÊãÇÏ ÍÓÇÈ ãÇáß ÇáÈäÇÁ ßÍÓÇÈ ÇÝÊÑÇÖí áÚãæáÉ ÇáÊÍÕíá','Use owner account as default account of collect commssion'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÚÊãÇÏ ÍÓÇÈ ãÇáß ÇáÈäÇÁ ßÍÓÇÈ ÇÝÊÑÇÖí ááÊÑÍíá ','Use owner account as default account of check post'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÚÊãÇÏ ãÞÏÇÑ ÇáÚãæáÉ ãä ÈØÇÞÉ ÇáÈäÇÁ','Use commession rate from building card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÚÏÇÏ ÇáÓäæÇÊ ÇáÓÇÈÞÉ','Previous years settings'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÚÏÇÏÇÊ ÇáÍÓÇÈÇÊ ÇáãÝÖáÉ','Favorite accounts settings'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÞÓÇØ','Installments'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÃÈäíÉ','Buildings'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÊÕÇá ÈÇáãáÝ ÇáÌÏíÏ','Connect New File'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÌãÇáí','Total Amount'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÎÊÕÇÑ','Shotcut'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÎÊÕÇÑ ãßÑÑ','Duplicate shortcut'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÎÊÕÇÑÇÊ','Shotcuts'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÃÎíÑ','Last'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÏÎÇá','Input'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÃÏæÇÊ ÇáÎÇÑÌíÉ','External tools'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÃÑÇÖí','Lands'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÃÑÇÖí ÇáãÄÌÑÉ æÇáÛíÑ ãÄÌÑÉ ','Leased and non-leased lands'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÃÑÇÖí ÇáãÄÌÑÉ æÛíÑ ÇáãÄÌÑÉ','Leased and non-leased lands'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÃÑÇÖí ÇáãÈÇÚÉ æÇáÛíÑ ãÈÇÚÉ ','Sold and Non-Sold Lands'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÇÈØ','Link'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÈÍ','Income'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÎÕÉ','License'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÎÕÉ Çáì ÊÇÑíÎ','License to date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÎÕÉ ãä ÊÇÑíÎ','License from date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÓÇÆá ÇáÞÕíÑÉ','SMS'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÓÇÆá ÇáãÑÓáÉ','Sent SMS'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÕíÏ','Balance'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÕíÏ ÇáÓÇÈÞ','Previous balance'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÕíÏ ÇáäåÇÆí','Final balance'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÕíÏ ÊÑÇßãí','Cumulative balance'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÞã','Number'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÞã ÇáÊÓáÓáí','Serial Number'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÞã ÇáÏÇÎáí','Internal Number'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÞã ÇáãÊÓáÓá ãßÑÑ','Duplicate serial number'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÑãÒ ÇááÇÊíäí','Latin code'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÑãÒ ãßÑÑ','Duplicate code'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÒÈÇÆä','Customers'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÒÈÇÆä ÇáãÍÙæÑÉ','Blocked customers'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÒÈæä','Customer'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÒÈæä Ýí åÐÇ ÇáÚÞÏ ãÎÊáÝ Úä ÇáÒÈæä Ýí ÚÞÏ ÇáÔÞÉ ÇáãÑÇÏ ÑÈØå ¡ åá ÃäÊ ãÊÃßÏ ãä ÇáÇÓÊãÑÇÑ¿ ','The customer in this contract is different from the customer in the contract to be linked to the flat, are you sure to continue?'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÒíæä','Customer'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÓÇÈÞ','Previous'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÓÇÈÞ >>','Previous >>'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÓÇÚÉ','Timing'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÓÌá ÇáÊÌÇÑí','Trading license'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÓÚÑ','Price'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÓÚÑ ÇáÅÌãÇáí','Total price'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÓÚÑ ÇáÃÏäì','Minimum price'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÓÚÑ ÇáÃÚáì','Maximum price'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÓÚÑ ÇáÅÝÑÇÏí','Unit price'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÓÚÑ Èíä','Price between'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÓãÇÍ ÈÅÖÇÝÉ ÚÞÏ ÌÏíÏ áäÝÓ ÇáÚãíá Ïæä ÅäåÇÁ ÇáÚÞÏ ÇáÞÏíã','Allow adding a new contract for the same client without ending the old contract'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÓäÉ ÇáÍÇáíÉ','Current year'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÓäÏ','Ownership voucher'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÓäÏ ãÑÇÌÚ','Entry checked'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÓäÏÇÊ','Journal entries'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÓäæÇÊ ÇáÓÇÈÞÉ','Previous years'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÔÇÑÚ','Street'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÔÍä','Shipping'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÔÑßÉ','Company'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÔÞÉ','Flat'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÔÞÉ ãÍÌæÒÉ ãä ÞÈá : ','Flat reserved by:'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÔÞÉ æÇÑÏÉ ÈÚÞÏ : ','The Flat in contract:'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÔÞÞ','Flats'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÔßÇæí','Complaints'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÔßá','Theme'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÔßæì','Complaints'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÔåÑ','Month'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÔåÑ 1','Month 1'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÔåÑ 10','Month 10'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÔåÑ 11','Month 11'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÔåÑ 12','Month 12'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÔåÑ 2','Month 2'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÔåÑ 3','Month 3'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÔåÑ 4','Month 4'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÔåÑ 5','Month 5'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÔåÑ 6','Month 6'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÔåÑ 7','Month 7'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÔåÑ 8','Month 8'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÔåÑ 9','Month 9'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÔíßÇÊ','Cheques'
 
insert into [StrSource] 
([Ar],[En])
select  '[N] ãßÇä ÇáÚÞÏ','[N] Contract Place'
 
insert into [StrSource] 
([Ar],[En])
select  '<<   ÇáÊÇáí ','<<   Next'
 
insert into [StrSource] 
([Ar],[En])
select  '3 ÃÔåÑ','3 Months'
 
insert into [StrSource] 
([Ar],[En])
select  '6 ÃÔåÑ','6 Months'
 
insert into [StrSource] 
([Ar],[En])
select  'Å&ÖÇÝÉ','A&dd'
 
insert into [StrSource] 
([Ar],[En])
select  'Å&ÛáÇÞ','C&lose'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÈÏÃ ÈÇáÊÏæíÑ','Start file closing'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÌÇÒÉ ÇáÅÓÊíÑÇÏ','Import license'
 
insert into [StrSource] 
([Ar],[En])
select  'ÂÌá','Credit'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÌãÇáí ÇáÅíÌÇÑ ÈÚÏ ÇáÍÓã','Total rent after discount'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÌãÇáí ÇáÅíÌÇÑ ÞÈá ÇáÍÓã','Total rent before discount'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÌãÇáí ÇáÅíÑÇÏ','Total revenue'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÌãÇáí ÇáÊÃãíäÇÊ','Total security deposit'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÌãÇáí ÇáãÈáÛ ÇáãÍÕá','Total collected amount'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÌãÇáí ÇáãÈáÛ ÇáãÓÊÍÞ ááãÇáß','Total due amount to owner'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÌãÇáí ÇáãÈáÛ ÛíÑ ÇáãÍÕá','Total uncollected amount'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÃÑÇÖí ÇáãÈÇÚÉ æÛíÑ ÇáãÈÇÚÉ','Sold and Non-Sold Lands'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÃÑÈÇÍ æ ÇáÎÓÇÆÑ','Profit and Loss'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÃÑÈÇÍ æ ÇáÎÓÇÆÑ æ ÇáãíÒÇäíÉ','Profit, Loss and Balance'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÑÊÝÇÚ','Hight'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÔíßÇÊ ÇáãÄÌáÉ','Deferred cheques'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÔíßÇÊ ÇáãÍÕáÉ','Collected cheques'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÔíßÇÊ ÇáãÓÊáãÉ','Received cheques'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÔíßÇÊ ÛíÑ ÇáãÍÕáÉ','Uncollected cheques'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÕÝÉ','Adjective'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÕáÇÍíÇÊ','Permissions'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÕáÇÍíÉ','Permission'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÕäÝ','Category'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÕäÝ ÇáÃÈ','Main category'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÕæÑ','Pictures'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÕíÇäÉ','Maintenance'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÖÇÍíÉ','Suburb'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÖÑÈ ÈÑÞã ËÇÈÊ','Multiplication by fixed number'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÖÑÈ ÈäÓÈÉ ãÆæíÉ','Multiplication by percentage'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáØÇÈÞ','Floor'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáØÈÇÚÉ','Printing'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáØæá','Length'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÚÇãá ÇáãÓÄæá','Responsible worker'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÚÏÇÏ','Meter'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÚÏÇÏ ÇáÍÇáí','Current meter'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÚÏÇÏ ÇáÓÇÈÞ','Previous meter'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÚÏÏ','Number'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÚÏÏ Çáßáí','Total number'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÚÏÏ Ýí ÇáØÇÈÞ','No. in each floor'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÚÑÖ','Status'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÚÑæÖ','Offers'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÚÞÇÑ','Property'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÚÞÇÑÇÊ','Properties'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÚÞÏ','Contract'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÚÞÏ ÇáãÑÊÈØ','Related contract'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÚÞÏ ãÑÇÌÚ','Contract checked'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÚÞæÏ','Contracts'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÚÞæÏ ãäÊåíÉ ÇáãÏÉ','Expired contracts'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÚÞæÏ ãäÊåíÉ ÇáãÏÉ æ ÛíÑ ãäÊåíÉ ÇáÚÞÏ','Expired contracts and Non-terminated contracts'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÚãÑ ÇáÅäÊÇÌí','Useful life'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÚãÑ ÇáÇäÊÇÌí','Useful life'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÚãá ÇáãØáæÈ','Action required'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÚãá ÈÇáÊÇÑíÎ ÇáåÌÑí','Work in Hijri date format'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÚãáÇÊ','Currencies'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÚãáÉ','Currency'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÚãáÉ ÇáÅÝÊÑÇÖíÉ','Default currency'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÚãáÉ æ ÇáÊÚÇÏá','Currency & Rate'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÚãáíÇÊ','Operations'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÚãáíÇÊ Úáì ÇáÇÕá','Operations on asset'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÚãáíÇÊ Ýí ÊÞÑíÑ ÇáÃæÑÇÞ ÇáãÇáíÉ','Operations in note report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÚãáíÇÊ Ýí äÞÑíÑ ÇáÃæÑÇÞ ÇáãÇáíÉ','Operations in note report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÚãáíÉ','Transaction'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÚãæáÉ','Commission'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÚãíá','Client'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÚäÕÑ ãÍÏÏ Ýí ãæÞÚ ÂÎÑ ','Element specified in another location'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÚäæÇä','Address'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÚäæÇä íÍæí','Address contain'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÛÇÁ ÇáÅÑÌÇÚ','Cancel return'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÈÇáÛ ÇáäÞÏíÉ ÇáãÓÊÍÞÉ ','Cash due'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÈáÛ','Amount'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÈáÛ ÇáÅÌãÇáí','Total amount'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÈáÛ ÇáãÊÈÞí','Remaining amount'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÈáÛ ÇáãÊÑÊÈ','Due amount'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÈáÛ ÇáãÏÝæÚ','Paid amount'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÈáÛ ÇáãÓÊÍÞ','Amount due'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÈáÛ ÇáäÞÏí ÇáãÓÊÍÞ','Amount due'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÊÇÌÑÉ','Trading sheet'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÊÇÎÑÇÊ','Overdue amounts'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÊÛíÑÇÊ','Variables'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÌãÚ','Complex'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÌãæÚ','Total'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÌãæÚÉ ÇáÑÆíÓíÉ','Main group'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÍÊæíÇÊ    F1','Contents    F1'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÍÌæÒ','Reserved'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÍÕá','Collected'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÍÕá / ÞíãÉ','Collected / Value'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÍÕá ÓÇÈÞÇ','Previously collected'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáæÍÏÉ 3','Unit 3'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáæÑÞÉ ÇáãÇáíÉ ãÑÇÌÚÉ','Note is checked'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáæÓØí','Average'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáæÕÝ','Description'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáæÙíÝÉ','Ocupation'
 
insert into [StrSource] 
([Ar],[En])
select  'Çáì','To'
 
insert into [StrSource] 
([Ar],[En])
select  'Çáì ÇáÍÓÇÈ','To account'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÇáäÓÈ','Total percentages'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÌãÇáí ÇáãÍÕá','Total collected'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÌãÇáí ÇáãÏÝæÚ','Total paid'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÍÊÓÇÈ ÇáÚãæáÉ','Commission calculation '
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÎÊÈÇÑ','Test'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÎÊÑ äæÚ ÇáÊÏæíÑ','Select file closing type'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÎÊíÇÑ ÇáÎØ','Font test'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÎÊíÇÑ ãÓÇÑ','Choose path'
 
insert into [StrSource] 
([Ar],[En])
select  'ÂÎÑ ÞÑÇÁÉ ááÚÏÇÏ','Last meter reading'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÎÑÇÌ','Output'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÎÝÇÁ Ýí äÇÝÐÉ ÇáÈÍË','Hide in search window'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÎÝÇÁ ãáÝ','Hide the file'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÏÇÑÉ','Management'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÏÇÑÉ ÃÑÇÖí','Land Management'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÏÇÑÉ ÇáÃäãÇØ     ','Types Manager'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÏÇÑÉ ÇáÚÞÇÑÇÊ','Properties management'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÏÇÑÉ ÇáãÓÊÎÏãíä','Users Manager'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÏÇÑÉ ÚÞÇÑÇÊ','Properties management'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÍá ÍÓÇÈ ÅíÑÇÏÇÊ ÊÕÏíÞ ÇáÚÞÏ','Enter revenue contract registration account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÍá ÍÓÇÈ ÇíÑÏÇÊ ÊÕÏíÞ ÇáÚÞÏ','Enter contract registration revenue account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÏÎÇá','Input'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÏÎÇá ÇáÓäÏÇÊ ÇáäÞÏíÉ','Add cash transactions'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá  ÑÞã ÇáÔÞÉ','Enter flat No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá  ÑÞã ÇáãÍá','Enter shop No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÅÓã ÇáÈäÇÁ','Enter building name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÅÓã ÇáÍÓÇÈ','Enter account name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÅÓã ÇáÚãíá','Enter customer name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÅÓã ÇáãáÝ','Enter file name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÅÓã ÇáãæÑÏ','Enter supplier name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÅÓã ÕÇÍÈ ÇáÚÞÇÑ','Enter property owner name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÅÓã ÕÇÍÈ ÇáÚÞÇÑ Ýí ÈØÇÞÉ ÇáÈäÇÁ','Enter property owner name in building card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÅÓã ÕÇÍÈ ÇáÚÞÇÑ Ýí ÈØÇÞÉ ÇáÚÞÇÑ','Enter property owner name in property card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÅÓã ÕÇÍÈ ÇáÚÞÇÑ ááÓØÑ : ','Enter property owner name to line:'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÅÓã ÕÇÍÈ ÇáãæÞÝ Ýí ÈØÇÞÉ ÇáãæÞÝ','Enter parking owner name in parking card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇÓã ÇáãÓÊÎÏã æßáãÉ ÇáãÑæÑ ááÏÎæá ááãáÝ','Enter User Name and Password to access the file'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÅÓã','Enter Name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÈíÇä ááÞáã ','Enter line details'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÊÇÑíÎ','Enter date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÊÇÑíÎ ááÓØÑ ','Enter date to line'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÊÚÇÏá Ýí ÇáÞáã ','Enter rate to line'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÍÓÇÈ','Enter account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÍÓÇÈ ÇáÎÊÇãí','Enter closing account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÍÓÇÈ ÇáÏÇÆä','Enter credit account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÍÓÇÈ ÇáÑÆíÓí áÊÃãíäÇÊ ÇáãÓÊÃÌÑíä Ýí ÈØÇÞÉ ÇáÈäÇÁ','Enter tenant''s security deposit account in building card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÍÓÇÈ ÇáÑÆíÓí ááãÓÊÃÌÑíä Ýí ÈØÇÞÉ ÇáÈäÇÁ','Enter tenants account in building card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÍÓÇÈ ÇáãÏíä','Enter debit account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÍÓÇÈ ÇáãÞÇÈá','Enter obverse account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÍÓÇÈ Ýí ÈØÇÞÉ ÇáÈäÇÁ ','Enter account in building card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÍÓÇÈÇÊ ÇáÅÝÊÑÇÖíÉ ááäãØ','Enter default accounts to check type'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÑÞã','Enter number'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÑãÒ','Enter code'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÑãÒ ÃÑÞÇã ÝÞØ','Enter numbers only for code'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÒÈæä','Enter customer'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÓäÉ','Enter year'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÚãáÉ','Chose currency'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÝÑÚ','Enter branch'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÞíãÉ','Enter value'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáäãØ ÇáÇæá','Enter first type'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáäãØ ÇáËÇäí','Enter second type'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÊÇÑíÎ Ãæá ÇáãÏÉ','Enter first period date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÊÇÑíÎ Ãæá ÇáãÏÉ ÇáÌÏíÏ','Enter first period date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÞÇÑíÑ ÇáÚÞÇÑíÉ 2','Realty Reports'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÞÇÑíÑ ÇáãÍÇÓÈíÉ   ','Accounting Reports'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÞÑíÈ Çáì','Round to'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊäÈíå ãØÈæÚ','Warning printed'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊäÈíåÇÊ','Alerts'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊäÝíÐ','Implementation'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊæÕíÝ','Description'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊæÕíÝ ÇááÇÊíäí','Latin description'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊæÞíÚ ÛíÑ ãØÇÈÞ','Signature not match'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáËÇáË','Third'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáËÇáËÉ','Third'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáËÇäí','Second'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáËÇäíÉ','Second'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáËæÇÈÊ','Fixed value'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÌÏæá ÇáãÑÊÈØ : ','Related table:'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÌÒÁ','Part'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÌäÓíÉ','Nationality'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÌåÉ','Direction'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÌåÉ ÇáãÕÏÞÉ ','Registered by'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÌæÇá','Mobile'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÇÓÈ','Computer'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÇÓÈÉ','Calculator'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÇÝÙÉ','Clipboard'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÇáÉ','Status'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÌÒ','Booking'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÌÒ ãáÛì','Booking canceled'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÏ ÇáÃÏäì áÊÍÕíá ÇáÚãæáÉ','Minimum level of collection commission'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÐÝ','Delete'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÐÝ ÇáÌãÇÚí ááÔíßÇÊ ãä ÊÞÑíÑ ÇáÃæÑÇÞ ÇáãÇáíÉ','Delete all cheques at notes report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÑßÉ ÇáíæãíÉ ááÚÞæÏ','Daily activity of contracts'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÓÇÈ','Account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÓÇÈ ÇáÃÈ áÊÇãíäÇÊ ÇáÒÈÇÆä','Main account of customers deposit account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÓÇÈ ÇáÃÈ ááÃÈäíÉ','Buildings main account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÓÇÈ ÇáÃÈ ááÒÈÇÆä','Customers main account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÓÇÈ ÇáÃÈ ááãæÑÏíä','suppliers main account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÓÇÈ ÇáÅÝÊÑÇÖí','Default account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÓÇÈ ÇáÎÊÇãí','Closing account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÓÇÈ ÇáÏÇÆä','Credit account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÓÇÈ ÇáÑÆíÓí','Main account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÓÇÈ ÇáÑÆíÓí áÊÃãíäÇÊ ÇáãÓÊÇÌÑíä','Main account of customers deposit account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÓÇÈ ÇáÑÆíÓí ááãÓÊÇÌÑíä','Customers deposit account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÓÇÈ ÇáãÏíä','Debit account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÓÇÈ ÇáãÞÇÈá','Obverse account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÓÇÈÇÊ','Accounts'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÓÇÈÇÊ ÇáÅÝÊÑÇÖíÉ','Default accounts'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÓÇÈÇÊ ÇáÅÝÊÑÇÖíÉ áÚãæáÉ ÇáÊÍÕíá','Default accounts of collection commission'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÓÇÈÇÊ ÇáãÑÕÏÉ','Balanced accounts'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÓÇÈÇÊ ÇáãÝÖáÉ','Favorite accounts'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÓã ÇáÃÚÙãí','Maximum discount'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÓãíÇÊ','Discounts '
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÙÑ','Blocking'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÞá','Feild'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÞæá','Feilds'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÍá æÇÑÏ ÈÚÞÏ : ','Solution in contract:'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÍåÉ ÇáãÕÏÞÉ','Registered at'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÍæÖ','Basin'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÎÑÇÆØ','Maps'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÏÇÆä','Credit'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÏÝÚÇÊ','Payments'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÏÝÚÇÊ ÇáãÓÊÍÞÉ','Due payments'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÏÝÚÇÊ ÇáäÞÏíÉ','Cash payments'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÏÝÚÇÊ ÇáäÞÏíÉ ÇáãÞÈæÖÉ','Received cash payments'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÏÝÚÉ','Payment'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÏÝÚÉ ÇáÃÎíÑÉ','Last payment'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÏÝÚÉ ÇáÃæáì','First payment'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÏÝÚÉ ÇáÃæáì Ýí ÊæáíÏ ÇáÔíßÇÊ ÊæáÏ ÓäÏÇÊ','First cash payment generates entry at cheque generation window'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÍÙæÑ','Blocked'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÍÝÙÉ ÇáÚÞÇÑíÉ','Real estate briefcase'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÍá','Shop'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÍá ãÍÌæÒ ãä ÞÈá : ','Shop is reserved by:'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÍá æÇÑÏ ÈÚÞÏ : ','Shop inside contract:'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÍáÇÊ','Shops'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÏíä','Debit'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÏíäÉ','City'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÑÇÌÚ áÚãáíÇÊ ÇáÇæÑÇÞ ÇáãÇáíÉ','Checked for notes operations'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÑÇÌÚÉ','Checked'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÑÊÌÚ','Returned'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÑÊÌÚ / ÞíãÉ','Returned / Value'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÑÊÌÚÉ','Returned'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÑÍá','Posted'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÑÍá / ÞíãÉ','Posted / Value'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÑÍáÉ','Posted'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÑÓá','Sent'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÒÇäíÉ','Balance sheet'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÓÇÍÉ','Area'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÓÇÍÉ ÇáÅÌãÇáíÉ','Total area'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÓÇÍÉ Èíä','Area between'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÓÇÍÉ ãä','Area from'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÓÇÍÉ æ ÇáÊÔØíÈ','Space area and finishing'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÓÇÑ','File location'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÓÇÑ ÇáÅÝÊÑÇÖí','Default path'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÓÊÃÌÜÑ','Tenant'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÓÊÎÏã','User'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÓÊÎÏãæä','Users'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÓÊÎÏãíä','Users'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÓÊÎÏãíä ÇáÍÇáííä','Current users'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÓÊÝíÏ','Beneficiary'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÓÊäÏ','Voucher'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÓÊæÏÚ','Store'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÓÊæÏÚÇÊ','Warehouses'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÓÊæì','Level'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÕÇÑíÝ ÇáÌãÑßíÉ','Customs expenses'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÕØáÍ :','Term:'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÕØáÍ ÇáÌÏíÏ','New term'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÕØáÍÇÊ','Terms'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÕáÍ ÇáÞÏíã','Old term'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÙåÑ','Endorsement'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÙåÑ / ÞíãÉ','Endorsement / Value'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÙåÑÉ','Endorsement'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÚÇãáÇÊ','Transactions'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÚÇãáÇÊ ÇáÚÞÇÑíÉ','Realty Transactions'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÚÇãáÇÊ ÇáãÍÇÓÈíÉ','Accounting Transactions'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÚáæãÇÊ ÇáÚÇãÉ','General Information'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÚáæãÇÊ ÇáãÇáíÉ','Financial Information'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÝÊÇÍ','Key'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãßÇÊÈ','Offices'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãáÇÍÙÇÊ','Notes'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ãÄÌÑ æÈÇÆÚ','Lessor and sales man card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÅäåÇÁ','Termination date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÊËÈíÊ','Fixed date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÊÍÑíÑ ÇáÚÞÏ','Contract issue date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊËÈíÊ ÇáÚãáíÇÊ','Fixed operations'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÑÊíÈ ÊÕÇÚÏí','Ascending order'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÑÊíÈ ÊäÇÒáí','Descending order'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÕÏíÑ xls','Export XLS'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáÑÓÇÆá  SMS','SMS Report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáÑÓÇÆá ÇáãÑÓáÉ','Snet SMS report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ ÔÞÞ ÇáÎÏã','Generate servants flats'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ ÔÞÞ ÇáÓÇÆÞíä','Generate driver flats'
 
insert into [StrSource] 
([Ar],[En])
select  'ÌãÇÏì ÇáÃæá','Jumada I'
 
insert into [StrSource] 
([Ar],[En])
select  'ÌãÇÏì ÇáËÇäí','Jumada II'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÇáãÑÇÌÚ','Delete checked'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÔÞÞ ÇáÎÏã','Delete servants flats'
 
insert into [StrSource] 
([Ar],[En])
select  'Ðæ ÇáÍÌÉ','Zulhijjah'
 
insert into [StrSource] 
([Ar],[En])
select  'Ðæ ÇáÞÚÏÉ','Zulkaedah'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÈíÚ Çæá','rabee al awwal'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÈíÚ ËÇäí','rabee al thani'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÌÈ','Rajab'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑãÖÇä','Ramadan'
 
insert into [StrSource] 
([Ar],[En])
select  'ÔÚÈÇä','Shaban'
 
insert into [StrSource] 
([Ar],[En])
select  '[K] ÊÇÑíÎ ÇáÊÍÕíá ','[K] Collection Date'
 
insert into [StrSource] 
([Ar],[En])
select  '[K] ÑÞã ÇáÚÞÏ','[K] Contract No.'
 
insert into [StrSource] 
([Ar],[En])
select  '[L] ÇáãáÇÍÙÇÊ','[L] Note'
 
insert into [StrSource] 
([Ar],[En])
select  '[L] ÞíãÉ ÇáÚÞÏ','[L] Contract Value'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÛÇÁ ÇáÃãÑ','Cancel'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÛÇÁ ÇáÊÍÕíá','Cancel collection'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÛÇÁ ÇáÊÑÍíá','Cancel deposit'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÛÇÁ ÇáÊÙåíÑ','Cancel endorsement'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÛÇÁ ÊÍÏíÏ Çáßá','Uncheck All'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÛÑÇãÇÊ','Fines'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÛÑÖ ãä ÇáÅíÌÇÑ','Purpose of rent'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÛÑÝ æ ÇáØæÇÈÞ','Rooms and Flats'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÝÑÒ ÍÓÈ','Sort By'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÝÑÒ...','Sort...'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÝÑÚ','Brunch'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÝÑÚ ÇáÑÆíÓí','Main branch'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÝÑÞ','Difference'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÝÑæÚ','Branches'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÝÚáí','Actual'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÝáá','Villas'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÝáá ÇáãÄÌÑÉ æÇáÛíÑ ãÄÌÑÉ ','Leased and Non-leased villas'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÝáá ÇáãÄÌÑÉ æÛíÑ ÇáãÄÌÑÉ','Leased and Non-leased villas'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÝáá ÇáãÈÇÚÉ æÇáÛíÑ ãÈÇÚÉ ','Sold and Non-sold villas'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÝáá ÇáãÈÇÚÉ æÛíÑ ÇáãÈÇÚÉ','Sold and Non-sold villas'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÝæÇÊíÑ','Bills'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÝíáÇ','Villa'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÝíáá ÇáãÄÌÑÉ æÛíÑ ÇáãÄÌÑÉ','Leased and Non-leased villas'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÞÇÆãÉ','List'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÞÓØ','Payemnt'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÞÓØ ÇáËÇÈÊ','Fixed installment'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÞÓØ ÇáãÊÒÇíÏ','Increasing installment'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÞÓØ ÇáãÊäÇÞÕ','Decreasing installment'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÞãÑ ÇáÕäÇÚí','Satellite'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÞæÇÆã','Menus'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíÇã ÈÅÌÑÇÆíÇÊ ÇáãØÇÈÞÉ','Do matching procedures'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíÏ ÇáÅÝÊÊÇÍí','Opening entry'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíÏ ÇáÇÝÊÊÇÍí','Opening entry'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíÏ ÇáÍÓÇÈí','Journal entry'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíÏ ÇáãÎÊÇÑ ÛíÑ ÕÍíÍ áÃäå áÇíÍæí ÍÓÇÈ ÇáÒÈæä','Journal entry does not contain customer account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíÏ ÛíÑ ãäØÞí','illogical journal entry'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíãÉ','Value'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíãÉ 1','Value 1'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíãÉ 2','Value 2'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíãÉ ÇáÅÌãÇáíÉ','Total amount'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíãÉ ÇáÃÓÇÓíÉ áÍÓÇÈ ÇáÇåÊáÇß ','Primary value to calculate depreciation'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíãÉ ÇáÌÏíÏÉ ááÃÕá','New value of asset'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíãÉ ÇáÍÇáíÉ','Current value'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíãÉ ÇáÔåÑíÉ','Monthly value'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíãÉ ÇáãÍÕáÉ','Value received'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíãÉ ÇáãÍÕáÉ ÃßÈÑ ãä ÇáÞíãÉ ÇáÅÌãÇáíÉ','Collected value is lager than total value'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíãÉ ÇáãÓÊÍÞÉ ááãÇáß','Value due to owner'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíãÉ ÇáãÓÊÍÞÉ ááãÓÊÃÌÑ','Value due to tenant'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãáÇÍÙÇÊ 2','Notes 2'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãáÛì','Canceled'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãáßíÉ','Ownership'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãäÇØÞ','Areas'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãäÇÞáÇÊ','Transfers'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãäÊåíÉ','Finished'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãäÔÃ','Origin'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãäØÞÉ','Area name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãåäÉ','Occupation'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãæÇÏ','Materials'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãæÇÏ ÇáãÓÊÎÏãÉ','Used materials'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãæÇÞÝ','Parking'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãæÇÞÝ ÇáãÄÌÑÉ æ ÛíÑ ÇáãÄÌÑÉ','Leased and Non-leased Parking'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãæÇÞÝ ãÙááÉ','Sheltered parking'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãæÑÏ','Supplier'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãæÖæÚ','Theme'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãæÖæÚ  Theme','Theme'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãæÖæÚ íÍæí','Subject contains'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãæÞÚ','Location'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãæÞÚ ÇáÃÈ','Main location'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãæÞÚ ÇáÃæáí','First location'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãæÞÚ ÇáÌÏíÏ','New location'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãæÞÚ ÇáÍÇáí','Current location'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãæÞÚ Úáì ÇáÎÑíØÉ','Location on map'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãæÞÝ','Parkings'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãæÞÝ ãÍÌæÒ ãä ÞÈá : ','Parking is reserved by:'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãíÒÇäíÉ','Balance sheet'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãíÒÇäíä','Mezzanine'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáäÇÝÐÉ','Window'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáäÊíÌÉ','Result'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáäÓÈÉ %','Percentage %'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáäÓÈÉ ÇáãÏÝæÚÉ','Paid percentage'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáäÓÎ ÇáÅÍÊíÇØ ÇáÊáÞÇÆí','Auto backup'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáäÓÎ ÇáÅÍÊíÇØí','Backup'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáäÓÎ Úáì ÞÑÕ ÎÇÑÌí','Backup on external device'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáäÓÎÉ ÇáÅÍÊíÇØíÉ ÛíÑ ÕÇáÍÉ','Backup is not valid'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáäÙÇã ÇáãáÍÞ ÈÇáãÓÈÍ','Basin Filter System'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáäãØ','Type'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáäæÇÝÐ ÇáãÝÊæÍÉ','Opened windows'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáäæÚ','Type'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáåÇÊÝ','Phone'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáåÏÇíÇ','Gifts'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáæÍÏÇÊ','Units'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáæÍÏÇÊ ÇáÊí ÓíÊã ÅÎáÇÄåÇ','Units that will be vacated'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáæÍÏÇÊ ÇáãÄÌÑÉ æÛíÑ ÇáãÄÌÑÉ','Leased and Non-leased units'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáæÍÏÇÊ ÇáãÈÇÚÉ æÛíÑ ÇáãÈÇÚÉ','Sold and Non-sold units'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáæÍÏÉ','Unit'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáæÍÏÉ 2','Unit 2'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÊÇÑíÎ ÇáÅÓÊÍÞÇÞ','Enter due date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÊÇÑíÎ ÇáÅÝÞÇá','Enter closing date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÊÇÑíÎ ÇáÊÍÑíÑ','Enter issue date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÊÇÑíÎ ÇáÔÑÇÁ','Enter purchase date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíãÉ ßÎÑÏÉ','Value as scrap'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíæÏ','Entries'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáßÝÇáÉ','Warranty'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáßÝíá','Sponser'
 
insert into [StrSource] 
([Ar],[En])
select  'Çáßá','All'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáßáÝÉ','Cost'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáßáÝÉ ÇáÅÌãÇáíÉ','Total cost'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáßáÝÉ ááæÍÏÉ','Unit cost'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáßãíÉ','Quantity'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáßãíÉ 2','Quantity 2'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáßãíÉ 3','Quantity 3'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáßåÑÈÇÁ','Electricity'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇááÛÉ','Language'
 
insert into [StrSource] 
([Ar],[En])
select  'Çááæä','Color'
 
insert into [StrSource] 
([Ar],[En])
select  'Çááæä ÇáÃæá','1st Color'
 
insert into [StrSource] 
([Ar],[En])
select  'Çááæä ÇáËÇäí','2nd Color'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÄÌÑ','Lessor'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÄÌÑÉ','Leased'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÇÏÉ','Material'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÇáß','Owner'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÇáß ÇáÓÇÈÞ','Previous owner'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÈÇÚÉ','Sold '
 
insert into [StrSource] 
([Ar],[En])
select  'ÈÏæä','Without'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈÏæä ÅåÊáÇß','Without depreciation'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈÏæä ÊÞÑíÈ','No rounding'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈÏæä ÏÝÚÉ Ãæáì','Without downpayment'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈÑÇÁ ÐãÉ ','Clearance'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈÑíÏ ÇáßÊÑæäí','Email Address'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈÓÈÈ ãÓÊæì ÇáÓãÇÍíÉ','Because of permission level'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÇÊ','Cards'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÇÊ ÇáÍÓÇÈÇÊ ÇáÝÇÑÛÉ','Empty accounts cards'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÇÊ ÇáÒÈÇÆä ÇáãÑÕÏÉ','Balanced customer cards'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ','Card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÃÑÖ','Land card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÃÑÖ (ÚÑæÖ)','Land card (Offers)'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÃÑÖ æ  ÝíáÇ','Land & Villa card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÃÕá','Asset card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÇáÍÓÇÈ','Account card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÇáÒÈæä','Customer card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÇáÚÞÇÑ','Property card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÇáÚãáÉ','Currency card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÇáÝÑÚ','Branch card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÇáãÇÏÉ','Material card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÇáãÌãæÚÉ','Group card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÇáãÍÝÙÉ','Briefcase card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÇáãÍÝÙÉ ÇáÚÞÇÑíÉ','Realty briefcase card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÈÇÆÚ','Salesman card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÈäÇÁ','Building card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÈäÇíÉ','Building card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÈäÇíÉ (ÚÑæÖ)','Building card (Offers)'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÊÌãíÚíÉ','Assemblage card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÊÐßíÑ','Card reminder'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÍÌÒ ÚÞÇÑ','Property booking card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÍÓÇÈ','Account card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÒÈæä','Customer card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÒÈæä / ãæÑÏ','Customer / Supplier card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÔÞÉ','Flat card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÔÞÉ (ÚÑæÖ)','Flat card (Offers)'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ Ôßæì','Complaint card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÚÇãá ÇáÕíÇäÉ','Maintenance worker card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÚÇãá ÕíÇäÉ','Maintenance worker card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÚãÇÑÉ','Building card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÚãáÉ','Currency card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÝÑÚ','Branch card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÝíáÇ','Villa card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÝíáÇ (ÚÑæÖ)','Villa card (Offers)'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ãÃÌÑ æ ÈÇÆÚ','Lessor & Sales man card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ãÇÏÉ','Material card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ãÇáß','Owner card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ãÌãæÚÉ','Group card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ãÍá','Shop card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ãÍá (ÚÑæÖ)','Shop card (Offers)'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ãÍá æ ãæÞÝ','Shop & Parking Card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ãÏíäÉ','City card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ãÓÊÃÌÑ / ãæÑÏ','Customer / Supplier card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ãÓÊæÏÚ','Store card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ãäØÞÉ','Area card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ãæÞÝ','Parking card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈÞí / íæã','Day / Left'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈÞí áÅäÊåÇÁ ÇáÚÞÏ','Time of contract expiry'
 
insert into [StrSource] 
([Ar],[En])
select  'ËÇÈÊ','Fixed'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÇáÉ ÅäåÇÁ ÇáÚÞÏ','Contract termination status'
 
insert into [StrSource] 
([Ar],[En])
select  'Ïáíá ãÑÇßÒ ÇáßáÝ','Chart of cost center'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÃÕá ÇáÓäÏ','Entry origin No'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÓäÏ ÇáÞíÏ','Journal entry No'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓÚÑ','Price'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÑÖ ãÑßÒ ÇáßáÝÉ','Show cost center'
 
insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ÇáãÑÓá','Not Sent'
 
insert into [StrSource] 
([Ar],[En])
select  'ÝÊÑÉ ÍÓÇÈ ÇáÅíÑÇÏ','Revenue period'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíÏ ÇáÅÑÌÇÚ','Return entry'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíÏ ÇáÊÍÕíá','Collect entry'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíÏ ÇáÊÍÕíá ÇáÌÒÆí','Partial collect entry'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíÏ ÇáÊÑÍíá','Deposit entry'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíÏ ÇáÊÙåíÑ','Endorsement entry'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíÏ ÇáæÑÞÉ','Note entry'
 
insert into [StrSource] 
([Ar],[En])
select  'äæÚ ÇáãÇÏÉ','Material type'
 
insert into [StrSource] 
([Ar],[En])
select  ' Êã ØÈÇÚÉ ÈÑÇÁÉ ÇáÐãÉ ÈæÇÓØÉ','Clearance printed by'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÌãÇáí ÇáÑÓæã','Fees total'
 
insert into [StrSource] 
([Ar],[En])
select  'ÂÎÑ ÔÑÇÁ','Pricing policy'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÊÇÑíÎ ÈÏÇíÉ ÇáÅÓÊËãÇÑ','Enter investment starting date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÊÇÑíÎ äåÇíÉ ÇáÚÞÏ','Enter contract end date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÊÚÇÏá ÇáÚãáÉ','Enter currency rate'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÊÚÇÏá ÚãáÉ ÇáÅÓÊËãÇÑ','Enter currency rate of investment'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÊÚÇÏá ÚãáÉ ÇáÔÑÇÁ','Enter currency rate of purchase'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÊæÕíÝ ÇáãáÝ','Enter file description'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÊæÕíÝ ÇáãáÝ ÇáÌÏíÏ','Enter new file description'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÍÓÇÈ ÅíÑÇÏ ÓÚÑ ÇáÚÞÏ','Enter incoming account of contract price'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÍÓÇÈ ÇáÅÞÝÇá','Enter closing account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÍÓÇÈ ÇáÅÞÝÇá ááÑÈÍ Ãæ ÇáÎÓÇÑÉ','Enter closing account of profit and loss'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÍÓÇÈ ÇáÅíÑÇÏ','Enter revenue account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÍÓÇÈ ÇáÈäÇÁ','Enter building account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÍÓÇÈ ÇáÊÃãíä','Enter security deposit account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÍÓÇÈ ÇáÍÓã','Enter discount account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÍÓÇÈ ÇáÏÝÚÉ ÇáÃæáì','Enter down payment account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÍÓÇÈ ÇáÚãæáÉ ãä ÇáÚãíá','Enter commission account from customer'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÍÓÇÈ ÇáÚãæáÉ ãä ÕÇÍÈ ÇáÈäÇÁ','Enter commission account from building owner'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÍÓÇÈ ÇáÚãæáÉ ãä ÕÇÍÈ ÇáÚÞÇÑ','Enter commission account from property owner'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÍÓÇÈ ÇáÚãíá','Enter customer account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÍÓÇÈ ÇáãÇáß','Enter owner account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÍÓÇÈ ÇáãÔÑæÚ','Enter project account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÍÓÇÈ ÇáãæÑÏ','Enter supplier account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÍÓÇÈ ÕÇÍÈ ÇáÚÞÇÑ Ýí ÈØÇÞÉ ÇáÚÞÇÑ','Enter owner account to property card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÍÓÇÈ ÝÑæÞÇÊ ÃÓÚÇÑ ÇáÕÑÝ Ýí ÅÚÏÇÏÇÊ ÇáÈÑäÇãÌ','Enter exchange rate account in program settings'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÍÓÈ ÅíÑÇÏ ÇáÑÓæã ÇáÃÎÑì','Enter account of revenue other fees'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÍÓÈ ÇíÑÇÏ ÇáÑÓæã ÇáÃÎÑì','Enter revenue account of other fees'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÑãÒ ÇáÍÓÇÈ','Enter account code'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÚãáÉ ÇáÅÓÊËãÇÑ','Enter investment currency'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÚãáÉ ÇáÔÑÇÁ','Enter purchase currency'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÚäæÇä ÇáÍÇÓÈ ÇáãÑßÈ Úáíå ÏÇÑÉ ÇáÍãÇíÉ (IpAddress)','Enter computer IP Address where the dongle was installed'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÞíãÉ ÇáÅÓÊËãÇÑ','Enter investment value'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÞíãÉ ÇáÏÝÚÉ','Enter value payment'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ãÈáÛ ÇáÔÑÇÁ','Enter purchase amount'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá äãØ ÇáÔíß','Enter cheque type'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá äãØ ÓäÏ ÇáÞÈÖ','Enter receipt voucher type'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá äæÚ ÇáÏÝÚ','Enter payment type'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏæÇÊ','Tools'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏæÇÊ ÎÇÑÌíÉ','External Tools'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏæÇÊ ÎÇÑÌíÉ...','External Tools'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÐÇÃÑÏÊ ÇáÊÚÏíá ÇÖÛØ ÒÑ ÊÚÏíá','If you want to modify data press the Modify button'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÑÇÖí','Lands'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÑÞÇã ÇáÇíÕÇáÇÊ','Receipt numbers'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊíÑÇÏ xls','Import XLS'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊíÑÇÏ ÇáÈíÇäÇÊ','Import Data'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáÔÇÑÚ','Street No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÇæÑÇÞ ÇáÛíÑ ãÑÊÈØÉ ÈÚÞæÏ ÝÞØ','Only show checks that not related with contracts'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÑÓÇáÉ Ýí ÊÞÑíÑ ÇáÑÓÇÆá','Show message in SMS report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÑÓÇáÉ Ýí ÊÞÑíÑ ÇáÑÓÇÆá ÈÚÏ ÅÑÌÇÚ ÇáæÑÞÉ ÇáãÇáíÉ ÈÜ','Show message in SMS report after check return in'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÑÓÇáÉ Ýí ÊÞÑíÑ ÇáÑÓÇÆá ÈÚÏ ÇäÊåÇÁ ÇáÚÞÏ ÈÜ','Show message in SMS report after contract expires in'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÑÓÇáÉ Ýí ÊÞÑíÑ ÇáÑÓÇÆá ÈÚÏ ÊÍÕíá ÇáæÑÞÉ ÇáãÇáíÉ ÈÜ','Show message in SMS report after collect check in'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÑÓÇáÉ Ýí ÊÞÑíÑ ÇáÑÓÇÆá ÚäÏ ÇáÅÑÌÇÚ ÝæÑÇð','Show message in SMS report immediately after check return'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÑÓÇáÉ Ýí ÊÞÑíÑ ÇáÑÓÇÆá ÚäÏ ÇáÊÍÕíá ÝæÑÇð','Show message in SMS report immediately after check collect'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÑÓÇáÉ Ýí ÊÞÑíÑ ÇáÑÓÇÆá Ýí íæã ÇäÊåÇÁ ÇáÚÞÏ','Show message in SMS report when contract expire'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÑÓÇáÉ Ýí ÊÞÑíÑ ÇáÑÓÇÆá ÞÈá ÇäÊåÇÁ ÇáÚÞÏ ÈÜ','Show message in SMS report before contract expire in'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÔÞÞ ÇáÊÌãíÚíÉ ÇáÊí Êã ÅäåÇÁ ÚÞÏåÇ','Show assembled flat that contract has been terminated'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅãßÇäíÉ ÊÑÍíá ÓäÏ ÇáÞíÏ','Deposit journal entry'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅäÔÇÁ ÍÓÇÈÇÊ ÊÃãíä Öãä','Create deposit accounts into'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅäÔÇÁ ÍÓÇÈÇÊ Öãä','Create accounts into'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÓÊËäÇÁ ÇáÔíßÇÊ ÇáãÑÊÌÚÉ','Exclude returned cheque'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÓÊËäÇÁ ÇáÔíßÇÊ ÈÏæä ÊÇÑíÎ ÇÓÊÍÞÇÞ','Exclude cheque without due date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÓã ÇáÌÏæá','Table name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÐßíÑ  ÈÇáäÓÎ ÇáÅÍÊíÇØí ßá ','Remind backup every'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÓÇÆá ÇáÞÕíÑÉ SMS','SMS'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÓãÇÍ ááãÓÊÎÏãíä ÈßÇãá ÇáÕáÇÍíÇÊ ÊÌÇæÒ ÊÇÑíÎ ÊËÈíÊ ÇáÚãáíÇÊ','Allow users with full authorize passing fixed date of operations'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÚÞÏ ãäÊåí','Contract Expired'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíÏ ÍÓÇÈí','Multi entries'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíãÉ ÇáÇÌãÇáíÉ','Total value'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÍÕáÉ ÌÒÆíÇ','Partial collected'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÍÕáÉ ÌÒÆíÇð','Partial collected'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÍÕáÉ ßáíÇð','Completely collected'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÌáÏ ØÈÇÚÉ ÇáÅíÕÇáÇÊ','Receipt print folder'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÌáÏ ØÈÇÚÉ ÈÑÇÁÉ ÇáÐãÉ','Clearance print folder'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÇáÅíÑÇÏÇÊ ','Total revenue'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÇáÏÝÚÇÊ ÇáãÍÕáÉ','Collected payments total'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÇáÏÝÚÇÊ ÇáãÓÊÍÞÉ ááÏÝÚ','Due paymants total'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÇáÔíßÇÊ ÇáãÍÕáÉ','Collected cheque total'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÇáÔíßÇÊ ÇáãÓÊÍÞÉ','Due cheque total'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÇáÛÑÇãÇÊ','Total fines'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÇáÞíã ÇáãÓÊÍÞÉ ááãÇáß','Sum of values ??due to owner'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÇáÞíã ÇáãÓÊÍÞÉ ááãÓÊÃÌÑ ','Sum of values ??due to tenant'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÕÇÝí ÇáãÓÊÍÞ ááãÓÊÃÌÑíä','Total net due for tenants'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÞíãÉ ÇáÚÞæÏ ÈÚÏ ÇáÍÓã ','Total value of contracts after discount'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÞíãÉ ÇáÚÞæÏ ÞÈá ÇáÍÓã ','Total value of contracts before discount'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÍÑã','Muharram'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÑßÒ ßáÝÉ','Cost center'
 
insert into [StrSource] 
([Ar],[En])
select  'ãáÇÍÙÇÊ ÇáÚÞÏ','Contract note'
 
insert into [StrSource] 
([Ar],[En])
select  'ãæÞÝ ÊÌãíÚí','Assemblage parking'
 
insert into [StrSource] 
([Ar],[En])
select  'ãíÒÇä ÇáãÑÇÌÚÉ ãÑßÒ ßáÝÉ','Cost center trail balance'
 
insert into [StrSource] 
([Ar],[En])
select  'ãíáÇÏí','Gregorian'
 
insert into [StrSource] 
([Ar],[En])
select  'äÊíÌÉ ÇáÇÑÓÇá','Send result'
 
insert into [StrSource] 
([Ar],[En])
select  'äÕ ÇáÑÓÇáÉ [M]','The Message [M]'
 
insert into [StrSource] 
([Ar],[En])
select  'äæÚ ÇáÈØÇÞÉ ÒÈæä/ãæÑÏ','Card type Customer/Supplier'
 
insert into [StrSource] 
([Ar],[En])
select  'åÌÑí','Hijri'
 
insert into [StrSource] 
([Ar],[En])
select  'æåÐå ÇáãæÇÞÝ åí :','Those parking are:'
 
insert into [StrSource] 
([Ar],[En])
select  'íÊßæä åÐÇ ÇáãæÞÝ ãä ÊÌãíÚ ÃßËÑ ãä ãæÞÝ','This parking consists of assembling more than one parking'
 
insert into [StrSource] 
([Ar],[En])
select  'íæÌÏ ÚÞÏ áäÝÓ ÇáÚÞÇÑ ÛíÑ ãäÊåí','There is valid contract for same property'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÏÎÇá ÇáÊÇãíä ÅáÒÇãí','Security deposit required'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÅÓã ÇáãÓÊÎÏã','Enter Username'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÅÓã ÕÇÍÈ ÇáÚÞÇÑ Ýí ÈØÇÞÉ ÇáãæÞÝ','Enter owner name in parking card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇá ÑÓÇáÉ ÚäÏ ÅÖÇÝÉ ÃãÑ ÇáÕíÇäÉ','Send SMS when adding maintenance order'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇá ÑÓÇáÉ ÚäÏ ÅÖÇÝÉ ÇáÔßæì','Send SMS when adding complaint'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇá ÑÓÇáÉ ÚäÏ ÇáÅÑÌÇÚ','Send SMS when returning check'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇá ÑÓÇáÉ ÚäÏ ÇáÊÍÕíá','Send SMS when collecting check'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇá ÚäÏ ÇáÇÖÇÝÉ','Send SMS when add'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇá ÞÈá ÇÓÊÍÞÇÞ ÇáæÑÞÉ ÇáãÇáíÉ ÈÜ ','Send SMS before check due in'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇáÉ ÑÓÇáÉ ÚäÏ ÅÞÝÇá Ôßæì ÇáÕíÇäÉ','Send SMS when closing complaint'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÈäÇÁ Ýí ÅäÔÇÁ ÇáÚÞæÏ','Show building in contracts'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÓã ÇáÒÈæä','Customer name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÓã ÇáãÑÓá','Sender name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÇíÑÇÏÇÊ ÇáãÍÝæÙÉ','Saved revenues'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊËãíä ÇáÚÞÇÑí','Realty Estimation'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÓÇáÉ','Message'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÓæã','Fees'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÕíÏ ÇáÏÝÊÑí ááÒÈæä','Customer balance'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÑãÒ ÇáÎÇÕ','Special Code'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÓÚÑ ÈÚÏ ÇáÍÓã','Price after discount'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíãÉ ÇáÌÏíÏÉ','New value'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíãÉ ÇáÓÇÈÞÉ','Previous value'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíãÉ ÇáãÑÊÌÚÉ','Returned value'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáæÕÝ ÇáÚÑÈí','Arabic description'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáæÕÝ ÇááÇÊíäí','Latin description'
 
insert into [StrSource] 
([Ar],[En])
select  'Çáì ÇáãÓÊÎÏãíä ÇáãÍÏÏíä','To selected users'
 
insert into [StrSource] 
([Ar],[En])
select  'Çáì ÇáãæÞÚ','To location'
 
insert into [StrSource] 
([Ar],[En])
select  'Çáì ÊÇÑíÎ','To date'
 
insert into [StrSource] 
([Ar],[En])
select  'Çáíæã ÇáÍÇáí','Current date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇäÊÈå !  ','Warning !'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇäÊåÇÁ ÇáÚÞÏ','End of contract'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇäÔÇÁ ÇáÞíÏ','Generate journal entry'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇäÞØÚ ÇáÇÊÕÇá','Connection lost'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇäãÇØ ÇáÃæÑÇÞ ÇáãÇáíÉ','Note Paper Types'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇäãÇØ ÇáÚÞæÏ','Contract Types'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇäãÇØ ÇáÝæÇÊíÑ','Bills Type'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇäåÇÁ ÇáÚÞÏ','Terminate contract'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇíÌÇÑ','Rent'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇíÑÇÏ Çáíæã','Daily income'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇíÑÇÏÇÊ ÇáÊÃÌíÑ ÇáãÍÞÞÉ','Rental income earned'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈÇÞí ááÊÍÕíá','Rest of collection'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈÊÇÑíÎ','date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈÍË','Search'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈÏæä ÇÞÓÇØ','without installments'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈíÇä ÇáÞíÏ','Entry details'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈíÇäÇÊ ÔÎÕíÉ','Personal informations'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈíÇäÇÊ ÔÎÕíÉ áÇÊíäí','Latin Personal Information'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ  ÅäÊåÇÁ ÇáÅÞÇãÉ','Residence expiry date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÂÎÑ Ôíß ãÊÃÎÑ','Last delayed cheque'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÅäÊåÇÁ ÇáåæíÉ','ID expiry date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÅäåÇÁ ÇáÚÞÏ ÇáÓÇÈÞ','Previous contract termination date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÏÝÚÉ ÇáÃæáì','First payment date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ Çæá Ôíß ãÊÃÎÑ','First delayed cheque'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ØÈÇÚÉ ÈÑÇÁÉ ÇáÐãÉ','Clearance print date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ äåÇíÉ ÇáÅÓÊÍÞÇÞ','Due end date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ äåÇíÉ ÇáÚÞÏ ÇáÓÇÈÞ','Previous contract ending date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÏÞíÞ ÃÓÚÇÑ æÃÑÕÏÉ ÇáãæÇÏ','Check prices and material balances'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÕÏíÑ ÇáÌÏæá XLS','Export table to XLS'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÝÚíá ÍÓÇÈ ÇáÅíÑÇÏÇÊ ÇáÛíÑ ãÍÞÞÉ áäÝÓ ÇáÓäÉ ÇáãÇáíÉ','Active unrealized revenue account for same year'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÑÓÇÆá SMS','SMS Report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÚÑæÖ ÇáÃÓÚÇÑ','Quotations Report'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ÅÓÊáÇã ÇáÚÞÏ ÇáãÕÏÞ ãä ÇáÒÈæä','Registered contract has been received from customer'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ÇÓÊáÇã ÇáÚÞÏ áÅÑÓÇáå ááÊÕÏíÞ','Contract has been received for send it to registration'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ÇáÅÓÊíÑÇÏ','Data has been imported'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ÊÓáíã ÇáÚÞÏ ÇáãÕÏÞ ááÒÈæä','Registered contract has been delivered to customer'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ÊÓáíã ÇáÚÞÏ ááÒÈæä','Contract has been delivered to customer'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ØÈÇÚÉ ÇáÚÞÏ','Contract printed'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ØÈÇÚÉ æÑÞÉ ÊãÏíÏ','Extension paper printed'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊæÕíÝ ÇáÌÏÇæá','Tables description'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ ÞíÏ ÈäãØ','Generate entry by type'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÅíÑÇÏ ÇáÛíÑ ãÍÞÞ','Unrealized revenue account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÈØ ãÚ','Link with'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÓæã ÓÚÑ ÇáÚÞÏ','Contract price value'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÃÑÖ','Land No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÅÞÇãÉ','Residence No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÊÞÑíÑ','Report No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÔÞÉ ÇáãÑÊÈØÉ','Related flat No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÔíß ÇáÊÓáÓáí','Cheque serial No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÚÑÖ','Quotation No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÚÞÏ ÇáÊÓáÓáí','Contract serial No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓíÇÓÉ ÇáÊÓÚíÑ','Last purchase'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÅÓÊíÑÇÏ ÈíÇäÇÊ ÇáÒÈÇÆä ÇáãÍÏÏÉ','Customers data will be imported'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÍÐÝ ÃíÖÇ ÌãíÚ ÇáÓäÏÇÊ ÇáãÑÊÈØÉ Åä æÌÏÊ','All related entries will be deleted'
 
insert into [StrSource] 
([Ar],[En])
select  'ÕáÇÍíÇÊ ÇáÃÈäíÉ','Buildings Permission'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÃíÇã ÇáÝÇÑÛÉ','Empty days No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÏÝÚÇÊ ÇáãÊÃÎÑÉ','Late payments No'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÔÞÞ ÇáÓÇßäíä','Dwell flats No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÑÖ ÓÚÑ','Quotation Card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÞÏ','Contract'
 
insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ãÍÏÏ','Not specified'
 
insert into [StrSource] 
([Ar],[En])
select  'Ýáá','Villas'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÞÓØ','Installment value'
 
insert into [StrSource] 
([Ar],[En])
select  'áÇÔíÁ','Nothing'
 
insert into [StrSource] 
([Ar],[En])
select  'áåÇ ÇÞÓÇØ','with installments'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÏÉ ÇáÔíß','Cheque period'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÓÇÍÉ ÇáÚÞÇÑ','Property area'
 
insert into [StrSource] 
([Ar],[En])
select  'ãä ÇáÍÇÓÈ','From computer'
 
insert into [StrSource] 
([Ar],[En])
select  'äÇÝÐÉ ÇáÊÓÌíá ãÚ ÇáÊÚÏíáÇÊ','Log file with editing'
 
insert into [StrSource] 
([Ar],[En])
select  'äÇÝÐÉ ÇáãÚáæãÇÊ','Information Window'
 
insert into [StrSource] 
([Ar],[En])
select  'äÞá ãÇíáí ÚäÏ ÊÌÏíÏ ÇáÚÞÏ','Move the following when renewing contract'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÌãÇáí ÚÏÏ ÇáæÍÏÇÊ','Total units number'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÒÇáÉ ÅÔÇÑÉ ØÈÇÚÉ ÈÑÇÁÉ ÇáÐãÉ','Remove clearance print check'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊÚÑÇÖ ÇáãÓÊÎÏãíä ÇáÍÇáííä','Browse other users'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊíÑÇÏ ÇáÌÏæá ãä XLS','Import table from XLS'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊíÑÇÏ ÈíÇäÇÊ ÇáÒÈÇÆä','Import Customers Data'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáãÎÏã','Server Namer'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáãÑÓá','Sender ID'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáäãæÐÌ','Report Name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÕá ÇáÓäÏ','Entry origin'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÚãáÉ','Show currency'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ãÑÈÚ ÍæÇÑ ÇÎÊíÇÑ ÇááÛÉ','Show choose language dialog box'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÃÕæá ÇáËÇÈÊÉ','Fixed assets'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÖÇÝÉ','Additions'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÅíÌÇÑ ÍÓÈ ÂÎÑ ÚÞÏ ãÕÏÞ','Rent by last registered contract'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÇáæÇä','Colors'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÈØÇÞÉ','Card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÌåÇÒ','Device'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÌåÉ ÇáãÕÏÑÉ','Issued by'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÌåÉ ÇáãÕÏÑÉ ááÅíÕÇá','Receipt issued by'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÇáÉ ÇáãÍÏÏÉ ÝÞØ','Selected status only'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÓÇÈ ÍÓÈ','Account by'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÓã','Discount'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÏÚæì','Lawsuite'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÓÍÈ ãä ãÌãæÚÉ ÇæÑÇÞ / Feeder','Use feeder'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÓãÇÍ ÈÊÇÌíÑ ÇáæÍÏÇÊ ÇáÚÞÇÑíÉ ÈÚÏ ÈíÚåÇ','Allow leased units after sell it'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÚãæáÉ ãä ÇáÚãíá','Commission from customer value'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÚãæáÉ ãä ÕÇÍÈ ÇáÚÞÇÑ','Commission from owner value'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíãÉ Èíä','Value Between'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíãÉ ÛíÑ ÇáãÍÕáÉ','Value not collected'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÈÇáÛ ÇáäÞÏíÉ','Cash Amount'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÌãæÚ ÇáÚÇã','Grand total'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÑÇÌÚÉ áÇäãÇØ ÇáÓäÏÇÊ','Checked for entries type'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÓÍ ÇáÖæÆí','Scanning settings'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÕÇÑíÝ ÇáÏÇÎáíÉ','Internal expenses'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãæÇÕÝÉ','Specification'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáæÍÏÉ ÇáÃæáì','First unit'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáæÍÏÉ ÇáËÇáËÉ','Third unit'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáæÍÏÉ ÇáËÇäíÉ','Second unit'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáæÑÞÉ ÇáãÇáíÉ','Note paper'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈÏÃ ÇáÊÑÞíã','Start numbering'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈÏÃ ÇáÚÞÏ','Contract start'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈÏÇ ÅÚÇÏÉ ÇáÊÑÞíã','Start renumbering process'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈÏÇíÉ ÃãÑ ÇáÕíÇäÉ','Maintenance order start'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈÏÇíÉ ÇáÚÞÏ','Contract start date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈÏÇíÉ ÇáãÏÉ','Begining date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈíÇä ÇáÅíÕÇá','Receipt details'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÅãÊäÇÚ Úä ÇáÓÏÇÏ','Date abstain from payment'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÅíÕÇá','Receipt No'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÇãÊäÇÚ Úä ÇáÓÏÇÏ','Date refrain from repayment'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÊÓáíã ááÞÓã ÇáÞÇäæäí','Delivery date to legal department'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÊäÝíÐ','Execution date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÞíÏ','Entry No'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÈÑÇÁÉ ÐãÉ ÇáÈáÏíÉ','Municipality clearance date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÈÑÇÁÉ ÐãÉ ÇáßåÑÈÇÁ','Electricity clearance date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÝÊÍ ÇáÏÚæì','Lawsuit date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ äåÇíÉ ÇáÏÚæì','Lawsuit end date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇãíä ÇáÚÞÏ ÇáÍÇáí','Current contract deposit'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇãíä ÇáÚÞÏ ÇáÓÇÈÞ','Previous contract deposit'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÎÕíÕ ãÌáÏ ááÈØÇÞÉ','Specify folder for card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÎÕíÕ ãÌáÏ ááäãØ','Specify folder for type'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÓáíã ÇáÏÚæì','Lawsuit delivery'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÔßíá ÇáÈíÇä ÚÑÈí','Arabic generate note'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÔßíá ÇáÈíÇä áÇÊíäí','Latin generate note'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÝÚíá äÇÝÐÉ ÇáÊÓÌíá ãÚ ÇáÊÚÏíáÇÊ','Active log file with editing'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáÊÚÏíáÇÊ','Editing report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáÏÚÇæì ÇáÞÖÇÆíÉ','Lawsuit Report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÚÑæÖ ÇáÇÓÚÇÑ','Quotations report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞííã ÇáÃËÇË','Assess furniture'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ÅäåÇÁ ÇáÏÚæì ÇáÞÖÇÆíÉ','Lawsuite termination on'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ÇáÅÓÊÑÏÇÏ ãä ÇáÚãíá','Retrieved from customer'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ÇáÇÓÊáÇã','Received'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã æÞÝ ÇáÊäÝíÐ','Execution stop on'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ ÈíÇä ÇáÍÓÇÈ ÇáãÞÇÈá ãä ÈíÇä ÇáÃÞáÇã','Generate obverse account details using lines details'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÇáÉ ÇáÏÚæì','Lawsuite status'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÏÇÆä','Credit account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ãÏíä','Debit account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈÇÊ ÇáÑÓæã','Fees Accounts'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈÇÊ ÇíÑÇÏÇÊ ÇáÑÓæã 1','Fees revenue account 1'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈÇÊ ÇíÑÇÏÇÊ ÇáÑÓæã 2','Fees revenue account 2'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈÇÊ ÇíÑÇÏÇÊ ÇáÑÓæã 3','Fees revenue account 3'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÝØ ÇáÕæÑÉ ÈÕíÛÉ','Save photo with extension'
 
insert into [StrSource] 
([Ar],[En])
select  'ÏÞÉ ÇáÕæÑÉ áá jpg','Jpg Resolution'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÈØ ÇáãÓÊÎÏã ãÚ ÍÇáÉ ÇáÏÚæì','Link user with lawsuit status'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÈØ ÇáãÓÊÎÏã ãÚ ãÕÇÑíÝ ÇáÏÚæì','Link user with lawsuit expenses'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÎÕÉ ÇáÈáÏíÉ','Municipal license'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÓæã ÊÕÏíÞ ÇáÚÞÏ','Contract registration value'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÊäÝíÐ','Execution No'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÏÚæì','Lawsuit No'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÑæÖ ÇáÇÓÚÇÑ','Quotations'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÞÏ ÇáÔÞÉ ÇáãÑÊÈØ ÈÇáãæÞÝ','Flat contract linked to parking'
 
insert into [StrSource] 
([Ar],[En])
select  'ÝÊÍ ÇáÏÚæì','Open Lawsuit'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÅíÕÇá','Receipt value'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÈÇáÛ ÇáÔíßÇÊ','Cheque Amount'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÈáÛ ÇáÅíÌÇÑ ÇáãÓÊÍÞ','Rent amount due'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÇáÅÖÇÝÇÊ','Total additions'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÇáÍÓãíÇÊ','Total discount'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÇáÔíßÇÊ ÇáãÏÝæÚÉ','Total paid cheques'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÇáãÈÇáÛ','Total Amount'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÕÇÑíÝ ÇáÕíÇäÉ','Maintenance expenses'
 
insert into [StrSource] 
([Ar],[En])
select  'äãØ ÓäÏ ÇáÞÈÖ','Receive voucher type'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅãßÇäíÉ ÇäåÇÁ Úãá ãÓÊÎÏã','End other users session'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÓÊíÑÇÏ ÈíÇäÇÊ ÇáÒÈÇÆä','Import Customers Data'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÎáÇÁ','Evacuate date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÈÑíÏ ÇáÅáßÊÑæäí','E-mail'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÞÑíÑ','Report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÏ ÇáÃÚáì áäÓÈÉ ÇáÍÓã','Maximum limit of discount rate'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÏÚæì ÇáÞÖÇÆíÉ','Lawsuit'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÓÇÆá ÇáäÕíÉ','SMS Message'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÓãÇÍ ÈÅÖÇÝÉ ÚÞÏ ÌÏíÏ Ïæä ÅäåÇÁ ÇáÚÞÏ ÇáÞÏíã','Allow to add a new contract without terminate the old contract'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÕÇÝí','Net'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíãÉ ÇáãÑÌÚÉ','Return Value'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãØÈæÚÉ','Printed'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈÏá ÅÓã ÇáÒÈæä','Customer Name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈÏá ÅÓã ÇáÒÈæä [A]','Customer Name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈÏá ÅÓã ÇáÒÈæä[A]','Customer Name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈÑÇÁÉ ÇáÐãÉ','Clearance'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈíÇäÇÊ ÅÖÇÝíÉ','Extra Information'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÂÎÑ Ôíß ãÓÊÍÞ','Last due check date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÅÑÓÇá ÇáÚÞÏ Åáì ÇáÊÕÏíÞ','Contract delivery date to registration'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÅÓÊáÇã ÇáÚÞÏ ÇáãÕÏÞ ãä ÇáÒÈæä','Contract received date from customer'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÅäÊåÇÁ ÌæÇÒ ÇáÓÝÑ','Passport expiry date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÅäåÇÁ ÇáÚÞÏ Öãä ÝÊÑÉ ÚÞÏ ÂÎÑ ÑÞã ÇáÚÞÏ : ','Contract termination date inside the period of contract No:'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇÓÊáÇã ÇáÚÞÏ áÅÑÓÇáå ááÊÕÏíÞ','Contract received date for registration'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇÓÊáÇã ÇáÚÞÏ ãä ÇáÊÕÏíÞ','Contract received date from registration'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÊÓáíã ÇáÚÞÏ ÇáãÕÏÞ ááÒÈæä','Registered contract delivery date to customer'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÊÓáíã ÇáÚÞÏ ááÒÈæä','Contract delivery date to customer'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÌãíÚ ÃÞáÇã ÇáÞíæÏ','Collapse lines Entries'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÏÞíÞ ÃÑÕÏÉ ÇáãæÇÏ','Checking quantity balance'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÚÏíá ÊÇÑíÎ ØÈÇÚÉ ÈÑÇÁÉ ÇáÐãÉ','Modify clearance print date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÝÓíÑ ÇáäÊÇÆÌ ÇáãÑÌÚÉ','Meaning of return values'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÝÚíá ÕáÇÍíÇÊ ÇáÃÈäíÉ','Active buildings permission'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ÇÓÊáÇã ÇáÚÞÏ ãä ÇáÒÈæä','Contract received from customer'
 
insert into [StrSource] 
([Ar],[En])
select  'Êã ØÈÇÚÉ ÈÑÇÁÉ ÇáÐãÉ','Clearance Printed'
 
insert into [StrSource] 
([Ar],[En])
select  'ÌäÓíÉ ÇáÒÈæä','Customer nationality'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÅíÑÇÏÇÊ','Fees account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÒÈæä','Customer account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÝÙ ÇáÕæÑÉ ÈÕíÛÉ','Save picture as'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÞá ÈíÇä ÇáÒÈæä 1','Customer information 1'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÞá ÈíÇä ÇáÒÈæä 2','Customer information 2'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÞá ÈíÇä ÇáÒÈæä 3','Customer information 3'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÞá ÈíÇä ÇáÒÈæä 4','Customer information 4'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÞá ÈíÇä ÇáÒÈæä 5','Customer information 5'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÞá ÈíÇä ÇáÒÈæä 6','Customer information 6'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÞá ÈíÇä ÇáÒÈæä 7','Customer information 7'
 
insert into [StrSource] 
([Ar],[En])
select  'ÎÏãÇÊ ÚÇãÉ','General Services'
 
insert into [StrSource] 
([Ar],[En])
select  'ÎíÇÑÇÊ ÇáÊÞÑíÑ','Report Option'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÇÈØ ÇáÇÑÓÇá','Sending link'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÓæã 1','Fees 1'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÓæã 2','Fees 2'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÓæã 3','Fees 3'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÓæã 4','Fees 4'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÓæã 5','Fees 5'
 
insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÝÇßÓ','Fax No'
 
insert into [StrSource] 
([Ar],[En])
select  'ÔæÇá','Shawal'
 
insert into [StrSource] 
([Ar],[En])
select  'ÕÝÑ','Safar'
 
insert into [StrSource] 
([Ar],[En])
select  'ÖÛØ ÇáäÓÎÉ ÇáÅÍÊíÇØíÉ','Compress backup'
 
insert into [StrSource] 
([Ar],[En])
select  'ØÈÇÚÉ ÈÑÇÁÉ ÇáÐãÉ','Clearance print'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáæÍÏÇÊ ÇáãÄÌÑÉ','Leased units Number'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáæÍÏÇÊ ÛíÑ ÇáãÄÌÑÉ','Non-leased units number'
 
insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ÇáãØÈæÚÉ','Not Printed'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÏÝÚÇÊ ÇáäÞÏíÉ','Cash payments value'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáãÈÇáÛ ÇáãÓÊÍÞÉ ÌÒÆíÇ','Partial due amounts value'
 
insert into [StrSource] 
([Ar],[En])
select  'áÑÓÇÆá ÇááÛÉ ÇáÚÑÈíÉ','for arabic message'
 
insert into [StrSource] 
([Ar],[En])
select  'áÑÓÇÆá ÇááÛÉ ÇááÇÊíäíÉ','for english message'
 
insert into [StrSource] 
([Ar],[En])
select  'áÞÏ ÊÌÇæÒÊ äÓÈÉ ÇáÍÓã ÇáãÓãæÍ ÈåÇ','You have exceeded limit of discount rate'
 
insert into [StrSource] 
([Ar],[En])
select  '[V] ÇáãÈáÛ ÇáãÍÕá','[V] Collected amount'
 
insert into [StrSource] 
([Ar],[En])
select  '[M] ÑÞã ÇáÔíß ÇáÊÓáÓáí','[M] Cheque card no.'
 
insert into [StrSource] 
([Ar],[En])
select  '[N] ÅÓã ÇáäãØ ÚÑÈí','[N] Type arabic name'
 
insert into [StrSource] 
([Ar],[En])
select  '[M] ÅÓã ÇáäãØ áÇÊíäí','[M] Type latin name'
 
insert into [StrSource] 
([Ar],[En])
select  '[F] ÅÓã ÇáÈäÇÁ áÇÊíäí','[F] Building latin name'
 
insert into [StrSource] 
([Ar],[En])
select  '[H]ÅÓã ÇáÒÈæä áÇÊíäí ','[H] Customer latin name'
 
insert into [StrSource] 
([Ar],[En])
select  'áÊØÈíÞ ÇáÊÛíÑÇÊ íÌÈ ÅÚÇÏÉ ÊÔÛíá ÇáÈÑäÇãÌåá ÊÑíÏ ÅÚÇÏÉ ÇáÊÔÛíá ÇáÂä¿','To apply changes you must restart the program
Do you want to restart programs now?'
 
insert into [StrSource] 
([Ar],[En])
select  'Ïáíá ÇáÃÕæá','Chart of Asset'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅäÔÇÁ ãÌãæÚÉ ÝÑÚíÉ','Create sub-group'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÇáÃÕá','Asset card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅäÔÇÁ ãÌãæÚÉ ÝÑÚíÉ...','Create sub-group...'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÕá ÌÏíÏ','New asset'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÚáÞÉ','Suspend'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÊÃÎÑÉ','Delayed'
 
insert into [StrSource] 
([Ar],[En])
select  'ÎÇÑÌÉ Úä ÇáÅÑÇÏÉ','Out of control'
 
insert into [StrSource] 
([Ar],[En])
select  ' åá ÊÑíÏ ÍÝÙ ÇáÊÛíÑÇÊ Úáì ÚãæÏ ÇáÊäÈíå ãØÈæÚ ¿','Do you want to save the changes of Warning printed column?'
 
insert into [StrSource] 
([Ar],[En])
select  'áÇ íÌÈ ÊÛíÑ ÇáÊÚÇÏá ááÚãáÉ ÇáÃÓÇÓíÉ','You should not change the default currency rate'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíÏ ÚßÓí Úä ÇáÞíÏ ÑÞã','Inversed entry from entry No.'
 
insert into [StrSource] 
([Ar],[En])
select  '<ÚÏÏ ÇíÇã ÇáÚÞÏ>','<Contract days No>'
 
insert into [StrSource] 
([Ar],[En])
select  '<ÑÕíÏ ÇáÒÈæä>','<Customer balance>'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÍÐÝ ÇáÔÞÞ ÇáãÍÏÏÉ','Do you want to delete selected flats'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÅÖÇÝÉ ÇáÔÞÞ ÇáãÍÏÏÉ','Do you want to add selected flats'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÍÐÝ ÇáãÍáÇÊ ÇáãÍÏÏÉ','Do you want to delete selected shops'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÅÖÇÝÉ ÇáãÍáÇÊ ÇáãÍÏÏÉ','Do you want to add selected shops'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÍÏíÏ','Select'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÏÏ ÇáÔÞÞ ÇáÊí ÊÑíÏ ÊÌãíÚåÇ','Select the flats you want to assemble'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÖÇÝÉ ÇáÔÞÞ ÇáãÍÏÏÉ','Add selected flats'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÇáãÍáÇÊ ÇáãÍÏÏÉ','Delete selected shops'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÖÇÝÉ ÇáãÍáÇÊ ÇáãÍÏÏÉ','Add selected shops'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÌãíÚ ÍÓÈ ÇáÇÕäÇÝ','Group by category'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÃÕæá ÇáÊí áíÓ ÚáíåÇ ÍÑßÉ','Show assets without activity'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÌãÚ ÇáÅåÊáÇß ÇáÓÇÈÞ','Previous depreciation accumulated'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÚÊÈÇÑ ÇáæÍÏÇÊ ÇáãÌãÚÉ Ýí æÍÏÇÊ ÊÌãíÚíÉ ãÄÌÑÉ','Consider assembled units in as leased'
 
insert into [StrSource] 
([Ar],[En])
select  'íÑÌì ÇáÅäÊÈÇå!ÓÊßæä äÊÇÆÌ ÇáÊÞÑíÑ ÛíÑ ãÑÊÈÉ ÈÔßá ÕÍíÍ æÓíÎÊáÝ ÇáÑÕíÏ ÍÓÈ ÇáÎíÇÑÇÊ ÇáãÍÏÏÉ Öãä ÇáÝÑÒ','Attention please!
The results of the report is going to be not properly arranged and the balance will be different depending on the options selected in the sorting'
 
insert into [StrSource] 
([Ar],[En])
select  'ÝáÊÑ ÌÏíÏ','New filter'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÛÇÁ ÇáÝáÊÑ','Remove filter'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÑßÒ ÇáßáÝÉ : ','Cost Center :'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ / ÅÎÝÇÁ ÇáÃÚãÏÉ','Show / Hide column'
 
insert into [StrSource] 
([Ar],[En])
select  'äæÚ ÇáãÊÍæá','Variable type'
 
insert into [StrSource] 
([Ar],[En])
select  'æÕÝ','Description'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚÉ','Group'
 
insert into [StrSource] 
([Ar],[En])
select  'äæÚ ÇáÑÈØ ãÚ ÇáãÌãæÚÇÊ ÇáÃÎÑì','Link type with other groups'
 
insert into [StrSource] 
([Ar],[En])
select  'ÔÑØ','Condition'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÍÏÏ','Specified'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÇáÔÑØ','Delete condition'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÖÇÝÉ ãÌãæÚÉ','Add group'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÖÇÝÉ ÔÑØ','Add condition'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÇáÝáÊÑ','Delete filter'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÊÍæáÇÊ','Variables'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÏÝ','Delete'
 
insert into [StrSource] 
([Ar],[En])
select  'íæÌÏ ãÔßáÉ ÈÇáÞíÏ ÑÞã :','There is a problem in Entry No:'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÊÍæá','Variable'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ','Value'
 
insert into [StrSource] 
([Ar],[En])
select  'ÝáÊÑ','Filter'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊØÈíÞ ÇáãÊÍæáÇÊ','Apple variables'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÊÍæáÇÊ','Variables'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíÏ ÚßÓí','Inverse entry'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇá ÊÞÑíÑ ÈÇáÈÑíÏ ÇáÅáßÊÑæäí','Send Report by Email'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈÕíÛÉ','Extension'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÖãíä ÇáÎØæØ','Include fonts'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíÏ ÏÝÊÑ ÇáÇÓÊÇÐ','General ledger entry'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÚÊãÇÏ ÍÓÇÈ ÇáãÕÑÝ ááÈäÇÁ ßÍÓÇÈ ÇÝÊÑÇÖí ááÅÑÌÇÚ ÚäÏ ÊÍÕíá ÇáÔíß ÝÞØ','Use bank account as default account of cheque return if it is collected'
 
insert into [StrSource] 
([Ar],[En])
select  'ääÕÍ ÈÔÏÉ Úãá äÓÎÉ ÇÍÊíÇØíÉ ÞÈá ÇáÈÏÁ ÈåÐå ÇáÚãáíÉåá ÊÑíÏ Úãá äÓÎÉ ÇÍÊíÇØíÉ ÇáÂä¿','We strongly recommended to backup your data before you start this process
Do you want to make backup now?'
 
insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÇÚÇÏÉ ÊæáíÏ ÓäÏÇÊ ÇáÞíÏåÐå ÇáÚãáíÉ ÞÏ ÊÊØáÈ æÞÊÇð ØæíáÇðåá ÊÑíÏ ÇáãÊÇÈÚÉ?','Regenerate entries will start now, this process may take a long time, do you continue?'
 
insert into [StrSource] 
([Ar],[En])
select  'ääÕÍ ÈÔÏÉ Úãá äÓÎÉ ÇÍÊíÇØíÉ ÞÈá ÇáÈÏÁ ÈåÐå ÇáÚãáíÉ','We strongly recommended to backup your data before you start this process'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ Úãá äÓÎÉ ÇÍÊíÇØíÉ ÇáÂä¿','Do you want to make backup now?'
 
insert into [StrSource] 
([Ar],[En])
select  'åÐå ÇáÚãáíÉ ÞÏ ÊÊØáÈ æÞÊÇð ØæíáÇð','This process may take a long time'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÃíÇã ÇáÝÇÑÛÉ','Empty days value'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÝæÇÊíÑ ÇáßåÑÈÇÁ','Electricity bills report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÍãíá ÇáãßÊÈÇÊ ...ÇáÍÓÇÈÇÊ ÇáãÝÖáÉ','Loading libraries...Favorite accounts'
 
insert into [StrSource] 
([Ar],[En])
select  'ßãíÉ ÇÓÊåáÇß ÇáßåÑÈÇÁ','Electricity consumption amount'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇÓÊåáÇß ÇáßåÑÈÇÁ','Electricity consumption value'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáãÇÁ','Water value'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÕÑÝ ÇáÕÍí','Sewerage value'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÑÖ ÇáÝÇÊæÑÉ','View bill'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÑÖ ÇáÚÞÏ','View contract'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊÑÞíã ÈØÇÞÇÊ ÇáÒÈÇÆä','Renumbering customer cards'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊÑÞíã äãØ ÝæÇÊíÑ ÇáßåÑÈÇÁ','Renumbering electricity bills type'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÔíßÇÊ','Cheque value'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÈáÛ ÇáãÞÈæÖ','Collected amount'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÝæÇÊíÑ ÇáãÑÕÏÉ','Show balanced bills'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÓÊåáÇß ÇáßåÑÈÇÁ','Electricity consumption'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅäåÇÁ ÇáÅÑÌÇÚ','Return termination'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÕÛÑ ãä ÊÇÑíÎ äåÇíÉ ÇáÚÞÏ','Smaller than contract end date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃßÈÑ ãä ÊÇÑíÎ äåÇíÉ ÇáÚÞÏ','Bigger than contract end date'
 
insert into [StrSource] 
([Ar],[En])
select  'íÓÇæí ÊÇÑíÎ äåÇíÉ ÇáÚÞÏ','Equal the contract end date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊËäÇÁ ÇáÇæÑÇÞ ÇáãÇáíÉ ÇáãÑÊÌÚÉ ÈÓÈÈ','Excluding returned cheque with reason'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅãßÇäíÉ ÇÏÎÇá ÚÞÏ ÈÊÇÑíÎ ÈÚÏ ÊÇÑíÎ äåÇíÉ ÇáãÏÉ','Allow save contract starting after end duration date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ãÄÌÑ','Lessor card'
 
insert into [StrSource] 
([Ar],[En])
select  ' ÚÏÇ ÓÈÈ ÇáÅÑÌÇÚ','Except return reason'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÓÇÈ ÇáÇÝÊÑÇÖí','Default account'
 
insert into [StrSource] 
([Ar],[En])
select  '[T] ÊÇÑíÎ ÇáÊÍÑíÑ','[T] Issue date'
 
insert into [StrSource] 
([Ar],[En])
select  '[O] ÊÇÑíÎ ÇáÚãáíÉ','[O] Operation date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÕÝíÉ','Filter'
 
insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ãä ÇáÍÞá','Value from field'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÏæíÑ áÛÇíÉ ÊÇÑíÎ','Close file to date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÏæíÑ ÇáÚÞæÏ ÇáãäåíÉ ÇáÊí áåÇ ÇæÑÇÞ ãÇáíÉ áã ÊÍÕá','Move terminated contracts that has uncollected cheques'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÕäÏæÞ','Cash account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÈäÇÁ Ýí ÇáÊÞÇÑíÑ','Show building in reports'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÇáÈíÇäÇÊ ÇáÓÇÈÞÉ','Delete previous data'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÝÙ ÃÞáÇã ÇáÓäÏ','Save entry lines'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÞá','Field'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÈÏÇíÉ ÇáÚÞÏ ÃßÈÑ ãä ÊÇÑíÎ äåÇíÉ ÇáãÏÉ','Contract start date is bigger than End date period'
 
insert into [StrSource] 
([Ar],[En])
select  'ØÈÇÚÉ ÇáÓÌá','Print log'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÍÓÇÈ ÇáÕäÏæÞ','Enter cash account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÍÓÇÈ ÇáÔíßÇÊ','Enter cheque account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÕäÏæÞ','Petty cash'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÚÏíá ÇáÚÞæÏ ÍÓÈ ÇáÎíÇÑÇÊ ÇáÅÝÊÑÇÖíÉ','Modify contracts using default options'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÚÇÏÉ ÊæáíÏ ÓäÏÇÊ ÇáÞíÏ ááÚÞæÏ','ReGenerate entries for contracts'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÚÏíá ÚÞæÏ ÇáãæÇÞÝ ÍÓÈ ÇáÅÚÏÇÏÇÊ ÇáÅÝÊÑÇÖíÉ','Modify parking contracts using default options'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÚÇÏÉ ÊæáíÏ ÓäÏÇÊ ÇáÞíÏ áÚÞæÏ ÇáãæÇÞÝ','ReGenerate entries for parking contracts'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÚÏíá ÚÞæÏ ÇáÃÑÇÖí ÍÓÈ ÇáÅÚÏÇÏÇÊ ÇáÅÝÊÑÇÖíÉ','Modify land contracts using default options'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÚÇÏÉ ÊæáíÏ ÓäÏÇÊ ÇáÞíÏ áÚÞæÏ ÇáÃÑÇÖí','ReGenerate entries for land contracts'
 
insert into [StrSource] 
([Ar],[En])
select  'ÏÚæì ÞÖÇÆíÉ Úáì ÇáæÍÏÉ','Lawsuit on unit'
 
insert into [StrSource] 
([Ar],[En])
select  'ÏÚæì ÞÖÇÆíÉ Úáì ÇáÚÞÏ','Lawsuit on contract'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÈÑíÏ ÇáÅáßÊÑæäí ááÒÈæä','Customer Email'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÇáß','Owner'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÓÊÃÌÑ','Tenant'
 
insert into [StrSource] 
([Ar],[En])
select  'ÈÇÆÚ','Vendor'
 
insert into [StrSource] 
([Ar],[En])
select  'ãÔÊÑí','Buyer'
 
insert into [StrSource] 
([Ar],[En])
select  'ÒÈæä ãÍÊãá','Potential customer'
 
insert into [StrSource] 
([Ar],[En])
select  '=%','=%'
 
insert into [StrSource] 
([Ar],[En])
select  '0000','0000'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃÑÞÇã ÇíÕÇáÇÊ ÇáÚÞÏ','Contract receipts No.'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáíÈÇä','Details'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÑßÉ ÇáÃÑÖ','Land activity'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÑßÉ ÇáÔÞÉ','Flat activity'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÑßÉ ÇáÚÞÇÑ','Property activity'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÑßÉ ÇáÚãá ÇáíæãíÉ','Daily working report'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÑßÉ ÇáÝíáÇ','Villa activity'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÑßÉ ÇáãÍá','Shop activity'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÑßÉ ÇáãæÞÝ','Parking activity'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÑßÉ ÔÞÉ','Flat activity'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÑßÉ ÚÞÇÑ','Property activity'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÑßÉ ãÇÏÉ','Material activity'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÅÚÇÏÉ ÇáÊÞííã','Revaluation account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇÑÈÇÍ ÑÇÓãÇáíÉ','Capital profit account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÅÎÑÇÌ','Output account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÅÏÎÇá','Input account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÃÕá','Asset account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÅÞÝÇá','Closing account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÅåÊáÇß','Depreciation account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÅåÊáÇß ÍÊì ÊÇÑíÎ','Depreciation account to date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÅíÑÇÏ','Revenue A/C'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÈäÇÁ','Building A/C'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÈäß ááÃÑÖ','Land bank account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÈäß ááÈäÇÁ','Building bank A/C'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÈäß ááÝíáÇ','Villa bank A/C'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÈäß ãÛáÞ','Bank account closed'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÊÃãíä','Deposit A/C'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÊÇãíä','Deposit A/C'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÍÓã','Discount A/C'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÏÝÚÉ ÇáÃæáì','Down payment A/C'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÚãæáÉ','Commission account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÚãæáÉ ãä ÇáÚãíá','Commission from client A/C'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÚãæáÉ ãä ÕÇÍÈ ÇáÚÞÇÑ','Commission from owner A/C'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÚãíá','Customer A/C'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÝíáÇ','Villa account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáãÇáß','Owner account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáãÈáÛ ÇáãÓÊÍÞ','Calculate due amount'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáãÔÑæÚ','Project account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáãÕÇÑíÝ','Expense account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáãæÑÏ','Supplier account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáäÊÇÆÌ','Calculate results'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇíÑÇÏÇÊ ÇáÑÓæã','Fees revenue account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇíÑÇÏÇÊ ÇáÛÑÇãÇÊ','Fines revenue account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇíÑÇÏÇÊ ÛÑÇãÇÊ ÇáÊÃÎíÑ','Delay fines revenue A/C'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇíÑÏÇÊ ÇáÑÓæã','Fees revenue account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇíÑÏÇÊ ÊÕÏíÞ ÇáÚÞÏ','Contract registration revenue A/C'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇíÑÏÇÊ ÓÚÑ ÇáÚÞÏ','Contract price revenue A/C'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÊáÞÇÆí','Automatic calculate'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÎÓÇÆÑ ÑÇÓãÇáíÉ','Capital lost account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ãÌãÚ ÇáÅåÊáÇß','Depreciation accumulated account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈÇÊ','Accounts'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈÇÊ ÅÝÊÑÇÖíÉ','Default accounts'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈÇÊ ÇáÈäÇÁ','Building account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÈ ','by'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÈ ÇáÊÇÑíÎ','By date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÈ ÎØÉ','By plan'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÈ ÚÏÏ ÇáÃíÇã','By days number'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓã Úáì ','Discount on'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÙÑ ÇáÈØÇÞÉ','Block card'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÝÙ','Save'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÝÙ XML','Save as XML'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÝÙ ÇáÅÚÏÇÏÇÊ','Save settings'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÝÙ ÇáÊÏÞíÞ','Save checked'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÝÙ Çáßá','Save all'
 
insert into [StrSource] 
([Ar],[En])
select  'åæÇÊÝ','Telephones'
 
insert into [StrSource] 
([Ar],[En])
select  'æ','and'
 
insert into [StrSource] 
([Ar],[En])
select  'æ áÛÇíÉ','Until'
 
insert into [StrSource] 
([Ar],[En])
select  'æÍÏÇÊ','Units'
 
insert into [StrSource] 
([Ar],[En])
select  'æÍÏÇÊ ÇáÅäÊÇÌ','Production units'
 
insert into [StrSource] 
([Ar],[En])
select  'æÕÝ ÇáãÔßáÉ','Problem description'
 
insert into [StrSource] 
([Ar],[En])
select  'æÕÝåÇ','Descriptions'
 
insert into [StrSource] 
([Ar],[En])
select  'æáÛÇíÉ','Until'
 
insert into [StrSource] 
([Ar],[En])
select  'æáä ÊÓÊØíÚ ÈÚÏåÇ ÃÓÊÚÇÏÉ ÇáÈíÇäÇÊ ÇáÍÇáíÉ','and you will not be able to retrieve current data'
 
insert into [StrSource] 
([Ar],[En])
select  'æåÐå ÇáÔÞÞ åí :','These flats are:'
 
insert into [StrSource] 
([Ar],[En])
select  'æåÐå ÇáãÍáÇÊ åí :','These shops are:'
 
insert into [StrSource] 
([Ar],[En])
select  'íÊßæä åÐÇ ÇáãÍá ãä ÊÌãíÚ ÃßËÑ ãä ãÍá','This is a collective shop'
 
insert into [StrSource] 
([Ar],[En])
select  'íÌÈ ÃæáÇð ÅÚÏÇÏ ÇáÅÊÕÇá','Connection must first set up'
 
insert into [StrSource] 
([Ar],[En])
select  'íÌÈ ÊÍÏíË ÇáãáÝÇÊ','Files must be updated'
 
insert into [StrSource] 
([Ar],[En])
select  'íÌÈ ÊÍÏíÏ ÃÑÞÇã ÇáÞíæÏ ÇáÇÝÊÊÇÍíÉ ÇáÊí ÓíÊã ÇÓÊËäÇÄåÇ ááÍÕæá Úáì äÊÇÆÌ ÕÍíÍÉ Ýí ÇáÊÞÇÑíÑ','Opening entries number which will be excluded must be specified for correct information in the report'
 
insert into [StrSource] 
([Ar],[En])
select  'íÍÊÇÌ ÇáÏáíá Çáì ÇÚÇÏÉ ÊÍÏíË , åá ÊÑíÏ ÇáÞíÇã ÈÐáß ÇáÂä¿','Chart must be refreshed, Do you want to do it?'
 
insert into [StrSource] 
([Ar],[En])
select  'íÍæí','Contain'
 
insert into [StrSource] 
([Ar],[En])
select  'íÑÌì ÅÏÎÇá ÇáÞíãÉ','Please enter the amount'
 
insert into [StrSource] 
([Ar],[En])
select  'íÑÌì ÇáÅäÊÈÇå Çáì Çä ÇáÔÞÞ ÇáÊí áã ÊÍÏÏ ãÓÇÍÊåÇ áä ÊÊÛíÑ ßáÝÊåÇ','Please note that the flats did not specify with area, the cost will not change'
 
insert into [StrSource] 
([Ar],[En])
select  'íÓÇæí','Equal'
 
insert into [StrSource] 
([Ar],[En])
select  'íÓÏÏ ÇáãÈáÛ ÎáÇá','Payment within'
 
insert into [StrSource] 
([Ar],[En])
select  'íãáß ßá ÇáÕáÇÍíÇÊ','This user has all permissions'
 
insert into [StrSource] 
([Ar],[En])
select  'íæÌÏ ÏÚæì','There is lawsuit'
 
insert into [StrSource] 
([Ar],[En])
select  'íæÌÏ ÏÝÚÉ','Payment available'
 
insert into [StrSource] 
([Ar],[En])
select  'íæÌÏ ÓáÇáã ÏÇÎáíÉ','Interior stairs'
 
insert into [StrSource] 
([Ar],[En])
select  'íæÌÏ ÚÞÏ áäÝÓ ÇáÒÈæä æ äÝÓ ÇáÚÞÇÑ ÛíÑ ãäÊåí','There is existing contract for same customer and property'
 
insert into [StrSource] 
([Ar],[En])
select  'íæÌÏ ÚÞÏ ãæÞÝ áäÝÓ ÇáÒÈæä','There is parking contract for same customer'
 
insert into [StrSource] 
([Ar],[En])
select  'íæÌÏ ãÑßÒ ßáÝÉ ÂÎÑ áå äÝÓ ÇáÑãÒ','There is another cost center has same code'
 
insert into [StrSource] 
([Ar],[En])
select  'íæÌÏ ãÓÊÎÏã ÂÎÑ ÈäÝÓ ÇáÅÓã','There is another User has same name'
 
insert into [StrSource] 
([Ar],[En])
select  'íæÌÏ äÙÇã ÍãÇíÉ','Safety system available'
 
insert into [StrSource] 
([Ar],[En])
select  'íæáÏ ÞíÏ','Generate entry'
 
insert into [StrSource] 
([Ar],[En])
select  'íæáÏ ÞíÏ ÈÔßá Âáí','Generate entry automatically'
 
insert into [StrSource] 
([Ar],[En])
select  'íæã','Day'
 
insert into [StrSource] 
([Ar],[En])
select  'íæãíÉ ÇáÚãá','Daily entries report'
 
insert into [StrSource] 
([Ar],[En])
select  '[A] ÅÓã ÇáÈäÇÁ','[A] Building Name'
 
insert into [StrSource] 
([Ar],[En])
select  '[B] ÑÞã ÇáÚÞÇÑ','[B] Unit No'
 
insert into [StrSource] 
([Ar],[En])
select  '[C]ÅÓã ÇáÒÈæä','[C] Customer name'
 
insert into [StrSource] 
([Ar],[En])
select  '[D]ÑÞã ÇáÚÞÏ','[D] Contract No'
 
insert into [StrSource] 
([Ar],[En])
select  '[E]ÑÞã ÇáÚÞÏ ÇáÊÓáÓáí','[E] Contract serial No'
 
insert into [StrSource] 
([Ar],[En])
select  '[N] ÑÞã ÇáÔíß ÇáÊÓáÓáí','[N] Cheque Serial No'
 
insert into [StrSource] 
([Ar],[En])
select  '[N] ÑÞã ÇáÚÞÏ ÇáÊÓáÓáí','[N] Contract Serial No'
 
insert into [StrSource] 
([Ar],[En])
select  '[P] ÊÇÑíÎ äåÇíÉ ÇáÅÓÊÍÞÇÞ','[P] Due End Date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÌãÇáí ÇáÝÇÊæÑÉ','Total bill'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÌãÇáí ÇáãÈáÛ ÇáãÓÊÍÞ','Total amount due'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇá ÑÓÇáÉ ÚäÏ ÇáÊÍÕíá ÇáÌÒÆí','Sned SMS on partial collection'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊÚÑÇÖ äÇÝÐÉ ÇáÊÓÌíá ááÊÚÏíáÇÊ','View log window with editing'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáÍÇÓÈ','Computer name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÓãÇÁ ÍÞæá ÇáØÈÇÚÉ','Fields printing name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅÚÏÇÏÇÊ ÇáãÓÍ ÇáÖæÆí','Scanning settings'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃäãÇØ ÃæÇãÑ ÇáÞÈÖ','Received Orders Types'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃäãÇØ ÇæÇãÑ ÇáÞÈÖ','Received Orders Types'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅäåÇÁ ÇáÏÚæì','Lawsuit terminate'
 
insert into [StrSource] 
([Ar],[En])
select  'ÅäåÇÁ ÇáÏÚæì ÇáÞÖÇÆíÉ','Lawsuite termination'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃæÇãÑ ÇáÞÈÖ','Received orders'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÊÚÇÈ ÇáãÍÇãÇå','Attorney fees'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÑÓÇá SMS','Send SMS'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÓÊÎÏÇã ÈÑäÇãÌ ÇáÌåÇÒ','Use device software'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÓãÇÁ ÍÞæá ÇáØÈÇÚÉ','Fields printing name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇÚÊãÇÏ ÍÓÇÈ ÇáÒÈæä ááÚÞÏ ßÍÓÇÈ ÇÝÊÑÇÖí ááÏÚæì','Use customer account as default lawsuit account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÝÙ ÇáãáÇÍÙÇÊ','Save note'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÝÙ ãÄÞÊ','Temporary save'
 
insert into [StrSource] 
([Ar],[En])
select  'Íæá ÇáÈÑäÇãÌ','About program'
 
insert into [StrSource] 
([Ar],[En])
select  'ÎÇÕ','Private'
 
insert into [StrSource] 
([Ar],[En])
select  'ÎÇÕ ÈÇáãÓÊÎÏã ÇáÍÇáí','Specified for current user'
 
insert into [StrSource] 
([Ar],[En])
select  'ÎÇáíÉ','Vacant'
 
insert into [StrSource] 
([Ar],[En])
select  'ÎÊÇãí','Closing'
 
insert into [StrSource] 
([Ar],[En])
select  'ÎÏãíÉ','Services'
 
insert into [StrSource] 
([Ar],[En])
select  'ÎÑæÌ','Exit'
 
insert into [StrSource] 
([Ar],[En])
select  'ÎÑíØÉ ÊÝÕíáíÉ','Detailed map'
 
insert into [StrSource] 
([Ar],[En])
select  'ÎÕã','Discount'
 
insert into [StrSource] 
([Ar],[En])
select  'ÎÕã ÇáÚãæáÉ','Discount commission'
 
insert into [StrSource] 
([Ar],[En])
select  'ÎØÃ ÕáÇÍíÉ','Permission error'
 
insert into [StrSource] 
([Ar],[En])
select  'ÎØÃ Ýí ÅÓã ÇáãáÝ','Error in the file name'
 
insert into [StrSource] 
([Ar],[En])
select  'ÎØÃ Ýí ãáÝ ÇáÅÚÏÇÏÇÊ','An error in settings file'
 
insert into [StrSource] 
([Ar],[En])
select  'ÎíÇÑ ÊæáíÏ ÇáÞíÏ Ýí ÅäåÇÁ ÚÞÏ','Generate journal entry at contract expiry option'
 
insert into [StrSource] 
([Ar],[En])
select  'ÎíÇÑÇÊ','Options'
 
insert into [StrSource] 
([Ar],[En])
select  'ÎíÇÑÇÊ ÚÇãÉ','General options'
 
insert into [StrSource] 
([Ar],[En])
select  'ÏÇÆä','Credit'
 
insert into [StrSource] 
([Ar],[En])
select  'ÏÎæá','Enter'
 
insert into [StrSource] 
([Ar],[En])
select  'ÏÑÌÉ ÇáÓÑíÉ','Security level'
 
insert into [StrSource] 
([Ar],[En])
select  'ÏÚæÉ ÞÖÇÆíÉ','Lawsuit'
 
insert into [StrSource] 
([Ar],[En])
select  'ÏÚæì ÞÖÇÆíÉ','Lawsuit'
 
insert into [StrSource] 
([Ar],[En])
select  'ÏÝÊÑ ÅÓÊÇÐ ãÑßÒ ßáÝÉ','Cost center general ledger'
 
insert into [StrSource] 
([Ar],[En])
select  'ÏÝÊÑ ÇÓÊÇÐ','General ledger'
 
insert into [StrSource] 
([Ar],[En])
select  'ÏÝÊÑ ÇÓÊÇÐ ÍÓÇÈ','General ledger'
 
insert into [StrSource] 
([Ar],[En])
select  'ÏÝÊÑ ÇÓÊÇÐ ÍÓÇÈ ãÑßÒ ßáÝÉ','Cost center general ledger'
 
insert into [StrSource] 
([Ar],[En])
select  'ÏÝÊÑ ÇÓÊÇÐ ãÑßÒ ßáÝÉ','Cost center general ledger'
 
insert into [StrSource] 
([Ar],[En])
select  'ÏÝÊÑ ÇáÃÓÊÇÐ','General Ledger'
 
insert into [StrSource] 
([Ar],[En])
select  'ÏÝÊÑ ÇáÇÓÊÇÐ','General Ledger'
 
insert into [StrSource] 
([Ar],[En])
select  'ÏÝÊÑ ÇáíæãíÉ','Journal Ledger'
 
insert into [StrSource] 
([Ar],[En])
select  'Ïáíá ÇáÃáæÇä','Color list'
 
insert into [StrSource] 
([Ar],[En])
select  'Ïáíá ÇáÍÓÇÈÇÊ','Chart of Accounts'
 
insert into [StrSource] 
([Ar],[En])
select  'Ïáíá ÇáÝÑæÚ','Chart of Branches'
 
insert into [StrSource] 
([Ar],[En])
select  'Ïáíá ÇáãÓÊæÏÚÇÊ','Chart of Stores'
 
insert into [StrSource] 
([Ar],[En])
select  'Ïáíá ÇáãæÇÏ','Chart of Materials'
 
insert into [StrSource] 
([Ar],[En])
select  'ãæÑÏ','Supplier'
 
insert into [StrSource] 
([Ar],[En])
select  'ãæÞÚ ÂÎÑ','Other location'
 
insert into [StrSource] 
([Ar],[En])
select  'ãæÞÝ','Parking'
 
insert into [StrSource] 
([Ar],[En])
select  'ãæÞÝ ÓíÇÑÇÊ','Car parking'
 
insert into [StrSource] 
([Ar],[En])
select  'ãíÒÇä ÇáãÑÇÌÚÉ','Trial Balance'
 
insert into [StrSource] 
([Ar],[En])
select  'ãíÒÇä ÇáãÑÇÌÚÉ ÇáÓäæí','Annual Trail Balance'
 
insert into [StrSource] 
([Ar],[En])
select  'ãíÒÇä ãÑÇÌÚÉ ãÑßÒ ßáÝÉ','Cost center trail balance'
 
insert into [StrSource] 
([Ar],[En])
select  'äÇÝÐÉ ÃÑÕÏÉ ÇáÍÓÇÈÇÊ','Accounts balance window'
 
insert into [StrSource] 
([Ar],[En])
select  'äÇÝÐÉ ÇáÊÓÌíá','Log file'
 
insert into [StrSource] 
([Ar],[En])
select  'äÇÝÐÉ ÇáÊÓÌíá - ','Log File - '
 
insert into [StrSource] 
([Ar],[En])
select  'äÇÝÐÉ ÇáÊäÈíåÇÊ','Alerts window'
 
insert into [StrSource] 
([Ar],[En])
select  'äÇÝÐÉ ÇáÕæÑ','Pictures window'
 
insert into [StrSource] 
([Ar],[En])
select  'äÊíÌÉ ÅÑÓÇá ÇáÜ SMS','SMS sent result'
 
insert into [StrSource] 
([Ar],[En])
select  'äÓÈÉ ÇáÅÖÇÝÉ','Extra rate'
 
insert into [StrSource] 
([Ar],[En])
select  'äÓÈÉ ÇáÇåÊáÇß ÇáÓäæíÉ ','Depreciation annual percentage'
 
insert into [StrSource] 
([Ar],[En])
select  'äÓÈÉ ÇáÍÓã','Discount rate'
 
insert into [StrSource] 
([Ar],[En])
select  'äÓÈÉ ÇáÍÓã ÇáÚÙãì','Maximum discount rate'
 
insert into [StrSource] 
([Ar],[En])
select  'äÓÈÉ ÇáÚãæáÉ','Commission rate'
 
insert into [StrSource] 
([Ar],[En])
select  'äÓÎ','Copy'
 
insert into [StrSource] 
([Ar],[En])
select  'äÓÎ ÅÍÊíÇØí','Backup'
 
insert into [StrSource] 
([Ar],[En])
select  'äÓÎ ÇáÌÏæá','Copy table'
 
insert into [StrSource] 
([Ar],[En])
select  'äÓÎ Çáßá','Copy all'
 
insert into [StrSource] 
([Ar],[En])
select  'äÓÎÉ ÞÇÚÏÉ ÇáÈíÇäÇÊ ÃÍÏË ãä äÓÎÉ ÇáÈÑäÇãÌ','Database version is latest than the program version'
 
insert into [StrSource] 
([Ar],[En])
select  'äÔÑ','Publish'
 
insert into [StrSource] 
([Ar],[En])
select  'äÔÑ ÇáÕáÇÍíÇÊ','Publish permissions'
 
insert into [StrSource] 
([Ar],[En])
select  'äÔÑ ÕáÇÍíÇÊ ÇáãÓÊÎÏã','Publish user permissions'
 
insert into [StrSource] 
([Ar],[En])
select  'äÔÑÉ ÃÓÚÇÑ ÇáÚãáÇÊ','Bulletin currency prices'
 
insert into [StrSource] 
([Ar],[En])
select  'äÕ ÇáÑÓÇáÉ','Message text'
 
insert into [StrSource] 
([Ar],[En])
select  'äÕ ÇáÑÓÇáÉ ÚÑÈí','SMS Arabic text'
 
insert into [StrSource] 
([Ar],[En])
select  'äÕ ÇáÑÓÇáÉ áÇÊíäí','SMS Latin text'
 
insert into [StrSource] 
([Ar],[En])
select  'äÙÇã ÇáÍãÇíÉ','Safety system'
 
insert into [StrSource] 
([Ar],[En])
select  'äÚã','Yes'
 
insert into [StrSource] 
([Ar],[En])
select  'äÞÏÇð','Cash'
 
insert into [StrSource] 
([Ar],[En])
select  'äÞá','Transfar'
 
insert into [StrSource] 
([Ar],[En])
select  'äÞá ÇáÈØÇÞÇÊ','Move cards'
 
insert into [StrSource] 
([Ar],[En])
select  'äÞá ÇáÈØÇÞÇÊ Èíä ÇáÇäãÇØ','Transfer cards between types'
 
insert into [StrSource] 
([Ar],[En])
select  'äÞá ÇáÍÑßÇÊ Èíä ÇáÍÓÇÈÇÊ','Transfer cards between accounts'
 
insert into [StrSource] 
([Ar],[En])
select  'äÞá ÍÑßÉ ÇáÍÓÇÈÇÊ','Transfer activity of accounts'
 
insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÊÛííÑ ãÑßÒ ÇáßáÝÉ','Are you sure to change cost center?'
 
insert into [StrSource] 
([Ar],[En])
select  'áÕÞ','Paste'
 
insert into [StrSource] 
([Ar],[En])
select  'áÕÞ ÇáÌÏæá','Paste table'
 
insert into [StrSource] 
([Ar],[En])
select  'áÕÞ Çáßá','Paste all'
 
insert into [StrSource] 
([Ar],[En])
select  'ááØÈÇÚÉ','Print'
 
insert into [StrSource] 
([Ar],[En])
select  'áã ÈäÌÍ ÊæáíÏ ÇáÞíæÏ ÇáãÈáÛ ÇáäÞÏí ÇáãÓÊÍÞ','Failed to generate the entries of due cash amount'
 
insert into [StrSource] 
([Ar],[En])
select  'áã ÈäÌÍ ÊæáíÏ ÞíÏ ÇáÊÇãíäÇÊ','Failed to generate deposit entries'
 
insert into [StrSource] 
([Ar],[En])
select  'áã ÊÊã ÇáÕíÇäÉ','Maintenance not finish'
 
insert into [StrSource] 
([Ar],[En])
select  'áã ÊäÌÍ ÚãáíÉ ÊæáíÏ ÞíæÏ ÇáãÈáÛ ÇáäÞÏí ÇáãÓÊÍÞ','Generating entries process for duo amount does not succeed'
 
insert into [StrSource] 
([Ar],[En])
select  'áã íÊã','Process not finish'
 
insert into [StrSource] 
([Ar],[En])
select  'áã íÊã ÃÎÐ Ãí äÓÎÉ ÅÍÊíÇØíÉ ÍÊì ÇáÂä','No backup copy has been taken yet'
 
insert into [StrSource] 
([Ar],[En])
select  'áã íÊã ÇáÅäåÇÁ','Contract not terminated'
 
insert into [StrSource] 
([Ar],[En])
select  'áã íÊã ÇáÇíÏÇÚ','Not deposit'
 
insert into [StrSource] 
([Ar],[En])
select  'áã íÊã ÊÍÏíÏ ÑÞã ÇáÞíÏ ÇáÇÝÊÊÇÍí ÇáÐí ÓíÊã ÇÓÊËäÇÄå ááãáÝ ÇáÍÇáí ÞÏ íÍÊæí ÇáÊÞÑíÑ Úáì ãÚáæãÇÊ ÎÇØÆÉ','Opening entry number which will be excluded does not specified ,the report may contain wrong information'
 
insert into [StrSource] 
([Ar],[En])
select  'áã íÊã ÚÑÖ ßÇÝÉ ÇáÊäÈíåÇÊ ','All alerts doesn’t show'
 
insert into [StrSource] 
([Ar],[En])
select  'áã íäÌÍ ÊæáíÏ ÇáÞíÏ','Failed to generate journal entry'
 
insert into [StrSource] 
([Ar],[En])
select  'áã íäÌÍ ÊæáíÏ ÞíÏ ÇáÊÃãíäÇÊ','Generating deposit entries process does not succeed'
 
insert into [StrSource] 
([Ar],[En])
select  'áä ÊÓÊØíÚ ÇáÊÑÇÌÚ Úä åÐå ÇáÚãáíÉ','You can not undo this operation'
 
insert into [StrSource] 
([Ar],[En])
select  'áä ÊÓÊØíÚ ÇáÊÑÇÌÚ Úä åÐå ÇáÚãáíÉ¡ åá ÃäÊ ãÊÃßÏ¿','You can not undo this operation
Are you sure?'
 
insert into [StrSource] 
([Ar],[En])
select  'áäÝÓ ÇáÚãíá','Same customer'
 
insert into [StrSource] 
([Ar],[En])
select  'äÞá ßá ÍÑßÇÊ ÇáÍÓÇÈ','Transfar all account activity'
 
insert into [StrSource] 
([Ar],[En])
select  'äãØ ÇáÃæÑÇÞ ÇáãÇáíÉ ÇáÇÝÊÑÇÖí Ýí ÊæáíÏ ÇáÃÞÓÇØ','Default note type in generating contract installments'
 
insert into [StrSource] 
([Ar],[En])
select  'äãØ ÇáÎÑíØÉ','Map type'
 
insert into [StrSource] 
([Ar],[En])
select  'äãØ ÇáÔíß','Cheque type'
 
insert into [StrSource] 
([Ar],[En])
select  'äãØ ÇáÔíß ÇáÅÝÊÑÇÖí Ýí ÊæáíÏ ÇáÔíßÇÊ','Default note type in generating cheques'
 
insert into [StrSource] 
([Ar],[En])
select  'äåÇíÉ ÇáÚÞÏ','Contract expiry date'
 
insert into [StrSource] 
([Ar],[En])
select  'ÃäãÇØ ÇáãäÇÞáÇÊ','Stock transfers type'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáãæÇÏ','Material account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊæáÏ ÞíÏ ÊáÞÇÆíÇð','Generate journal entry automatically'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÓÚíÑ','Pricing'
 
insert into [StrSource] 
([Ar],[En])
select  'Ãæ','or'
 
insert into [StrSource] 
([Ar],[En])
select  'ÂÎÑ ÓÚÑ ááÒÈæä','Customer last price'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÃËÑ Úáì ÊÓÚíÑ ÇáãæÇÏ','Effect materials pricing'
 
insert into [StrSource] 
([Ar],[En])
select  'ÇáãÓÊæÏÚ ÇáÅÝÊÑÇÖí','Default store'
 
insert into [StrSource] 
([Ar],[En])
select  'Çáì ÇáãÓÊæÏÚ','To store'
 
insert into [StrSource] 
([Ar],[En])
select  'Çáì ãÑßÒ ÇáßáÝÉ','To cost center'
 
insert into [StrSource] 
([Ar],[En])
select  'äæÚ ÇáÝÇÊæÑÉ','Bill type'
 
insert into [StrSource] 
([Ar],[En])
select  'ãä ãÑßÒ ÇáßáÝÉ','To cost center'
 
insert into [StrSource] 
([Ar],[En])
select  'ãä ÇáãÓÊæÏÚ','From store'
 
insert into [StrSource] 
([Ar],[En])
select  'áæä ÇÓØÑ ÇáÌÏæá','Table line color'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÞæá ÇáÝÇÊæÑÉ','Bill fields'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáäÞÏíÇÊ','Cash account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÍÓãíÇÊ','Discount material'
 
insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÅÖÇÝÇÊ','Extra account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÑÍá Çáì ÇáãÓÊæÏÚ ÊáÞÇÆíÇð','Post to store automatically'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÑÍá Çáì ÇáãÓÊæÏÚ','Post to store'

insert into [StrSource] 
([Ar],[En])
select  'ÅÖÇÝÉ ãØÇÈÞÉ ÌÏíÏÉ','Add new reconciliation'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÑÕíÏ ÇáÝÚáí','Show actual balance'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÕíÏ ÇáÝÚáí','Actual balance'

insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÇáãØÇÈÞÉ ÇáãÍÏÏÉ','Delete selected reconciliation'

insert into [StrSource] 
([Ar],[En])
select  'ãØÇÈÞÉ ÌÏíÏÉ','New reconciliation'

insert into [StrSource] 
([Ar],[En])
select  'ãØÇÈÞÉ ÍÓÇÈ','Account reconciliation'

insert into [StrSource] 
([Ar],[En])
select  'ãä ÂÎÑ ãØÇÈÞÉ','From last reconciliation'

insert into [StrSource] 
([Ar],[En])
select  'ÑÕíÏ ÇáãØÇÈÞÉ','Reconciliation balance'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÓÌá','Log file'

insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ÇáãÑÍá','Not posted'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊÈÏÇá','Replace'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÈäæß','Banks'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÌÏíÏ','New'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÌäÓíÉ áÇÊíäí','Latin nationality'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÞÏíã','Old'

insert into [StrSource] 
([Ar],[En])
select  'ÈíÇäÇÊ ÇáÞæÇÆã ÇáÅÝÊÑÇÖíÉ','List default data'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÅÓÊÈÏÇá ÇáÞíãÉ ÇáÌÏíÏÉ ÈÇáÞíãÉ ÇáÞÏíãÉ','Old value will be replaced by the New value'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÅÓÊÈÏÇá ÇáÞíãÉ ÇáÌÏíÏÉ ÈÇáÞíãÉ ÇáÞÏíãÉåá ÊÑíÏÇáãÊÇÈÚÉ ¿','Old value will be replaced by the New value, Do you want to continue?'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÍÐÝ ÇáÞíãÉ ÇáÞÏíãÉ ¿','Do you want to delete the old value?'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏÇáãÊÇÈÚÉ ¿','Do you want to continue?'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÅÓÊÈÏÇá :','Replaced data :'

insert into [StrSource] 
([Ar],[En])
select  '[Q] æÕÝ ÇáãÔßáÉ','[Q] Problem description'

insert into [StrSource] 
([Ar],[En])
select  '[P] ÇÓã ÇáÈäÇÁ  ÚÑÈí','[P] Arabic building name'

insert into [StrSource] 
([Ar],[En])
select  '[O] ÇÓã ÇáÈäÇÁ  áÇÊíäí','[O] Latin building name'

insert into [StrSource] 
([Ar],[En])
select  '[N] ÑÞã ÇáÔÞÉ ','[N] Flat No.'

insert into [StrSource] 
([Ar],[En])
select  '[M] ÇÓã ÇáÚÇãá áÇÊíäí','[M] Latin worker name'

insert into [StrSource] 
([Ar],[En])
select  '[L] ÇÓã ÇáÚÇãá ÚÑÈí','[L] Arabic worker name'

insert into [StrSource] 
([Ar],[En])
select  ' áÚÇãá ÇáÕíÇäÉ  SMS','Send SMS to worker'

insert into [StrSource] 
([Ar],[En])
select  'ÃæÇãÑ ÇáÕíÇäÉ','Maintenance orders'

insert into [StrSource] 
([Ar],[En])
select  'ÚÇãá ÃãÑ ÇáÕíÇäÉ','Worker maintenance order'

insert into [StrSource] 
([Ar],[En])
select  '[R] ÌæÇá ÇáÒÈæä','[R] Customer mobile'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÑßÉ','Transaction'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ãÑÇßÒ ÇáßáÝÉ ÇáÊÞÇØÚí','Cost centers cross report'

insert into [StrSource] 
([Ar],[En])
select  'ÕÇÝí ÇáÎÓÇÑÉ','Net loss'

insert into [StrSource] 
([Ar],[En])
select  'ÅäÊåì','Finish'

insert into [StrSource] 
([Ar],[En])
select  'ãÌãá ÇáÑÈÍ','Gross profit'

insert into [StrSource] 
([Ar],[En])
select  'ãÕÑæÝ ÇáÚãæáÇÊ','Commission expense'

insert into [StrSource] 
([Ar],[En])
select  'ãÌáÏ ØÈÇÚÉ ÇáÓÌá','Log print folder'

insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÚãæáÉ ááÈÇÆÚ','Salesman commission value'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ãÕÑæÝ ÇáÚãæáÇÊ','Commission expense account'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÚãæáÉ ÇáÈÇÆÚ','Salesman commission account'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÊÓáíã ÇáÚÞÇÑ','Property delivery date'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÈÑíÏ ÇáÃáßÊÑæäí ááÒÈæä','Customer Email'

insert into [StrSource] 
([Ar],[En])
select  'ÊÈæíÈ ÌÏíÏ','New tab'

insert into [StrSource] 
([Ar],[En])
select  'ÊÌãíÚ ãáÝÇÊ ÇáÈØÇÞÉ','Collecting card files'

insert into [StrSource] 
([Ar],[En])
select  'ÍÏÏ ÇáãÌáÏ ÇáÐí ÓíÊã äÞá ÌãíÚ ÇáãáÝÇÊ ÇáÎÇÕÉ ÈÇáÈØÇÞÉ Çáíå :','Select the folder that will transfer all card files to it:'

insert into [StrSource] 
([Ar],[En])
select  'ÍÏÏ ÇáãáÝÇÊ ÇáÊí ÊÑíÏ äÞáåÇ Çáì ÇáãÌáÏ ÇáãÍÏÏ','Select the files that you want transfer it to selected folder'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãáÝ','File'

insert into [StrSource] 
([Ar],[En])
select  'ÛÑÇãÇÊ ÇáÅÑÌÇÚ','Returns fines'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÔíßÇÊ ÇáãÍÕáÉ áÝÊÑÉ ÇáÅíÑÇÏ','Collected checques of revenue period'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÏÝÚÇÊ ÇáäÞÏíÉ áÝÊÑÉ ÇáÅíÑÇÏ','Cash payments of revenue period'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇÓã ÕÇÍÈ ÇáÚÞÇÑ Ýí ÈØÇÞÉ ÇáÚÞÇÑ','Enter property owner name in property card'

insert into [StrSource] 
([Ar],[En])
select  'ÅÒÇáÉ ÇáãáÝ ÇáãÑÝÞ ÇáãÍÏÏ','Remove selected file'

insert into [StrSource] 
([Ar],[En])
select  'ÅÖÇÝÉ ãÑÝÞÇÊ','Attach files'

insert into [StrSource] 
([Ar],[En])
select  'ÇÌãÇáí ÚÏÏ ÇáæÍÏÇÊ','Units total number'

insert into [StrSource] 
([Ar],[En])
select  'ÇÚÇÏÉ ÊÓãíÉ ÇáÊÈæíÈ','Rename tab'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãáÝ ãæÌæÏ ãÓÈÞÇð','File already exists'

insert into [StrSource] 
([Ar],[En])
select  'ÊÃßÏ ãä ÅÏÎÇá ÇáÑãÒ ÃÑÞÇã ÝÞØ','Be sure to enter the code numbers only'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇßÏ ãä ÕÍÉ ÇáãÓÇÑ ÇáÌÏíÏ ÇáãÍÏÏ','Make sure of the new path specified'

insert into [StrSource] 
([Ar],[En])
select  'ÊÌãíÚ ÇáãáÝÇÊ','Assembling files'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÊÚÏíá ÅÓã ÇáÈÇÆÍ ãä ÞÈáß , åá ÊÑíÏ ÊÚÏíá ÅÓã ÇáÍÓÇÈ¿','Salesman name has been modified, do you want to modify the account name?'

insert into [StrSource] 
([Ar],[En])
select  'ÊæÞÝ','Stop'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã äÞá ÌãíÚ ÇáãáÝÇÊ ÇáãÍÏÏ Çáì ÇáãÌáÏ ÇáãÍÏÏ','Selected files will be transferred to the specified folder'

insert into [StrSource] 
([Ar],[En])
select  'ãÏæÑ','closed'

insert into [StrSource] 
([Ar],[En])
select  'ãÖÇÝ ÓÇÈÞÇ','Already added'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÍÐÝ ÇáãØÇÈÞÉ ÇáãÍÏÏÉ ¿','Do you want to delete selected reconciliation?'

insert into [StrSource]

([Ar],[En])

select  'ÇáÚÞÇÑ : ','Property:'

insert into [StrSource]

([Ar],[En])

select  'ÇáÞíãÉ ÇáãÊÈÞíÉ','Residual value'

insert into [StrSource]

([Ar],[En])

select  'æÕÝ ÇáÊÞÑíÑ','Report description'

insert into [StrSource]

([Ar],[En])

select  'ÛíÑ ãÑÇÌÚ','UnChecked'

insert into [StrSource]

([Ar],[En])

select  'ÚãáíÇÊ','Operations'

insert into [StrSource]

([Ar],[En])

select  'ÓíÊã ÅÖÇÝÉ ÇáÃæÑÇÞ ÇáãÇáíÉ ÇáãÍÏÏÉåá ÊÑíÏ ÇáãÊÇÈÚÉ','Selected checks will be added
Do you want to continue?'

insert into [StrSource]

([Ar],[En])

select  'ÓäÏ ÇáãáßíÉ','Property deed'

insert into [StrSource]

([Ar],[En])

select  'ÇáÛÇÁ ÊÑÍíá','UnPost'

insert into [StrSource]

([Ar],[En])

select  'ÊÌãíÚ / ÊÝÕíá','Assembled / Detailed'

insert into [StrSource]

([Ar],[En])

select  'ÊÌãíÚ ÇáÍÓÇÈÇÊ','Assemble accounts'

insert into [StrSource]

([Ar],[En])

select  'ÅáÛÇÁ ÇáÊÑÍíá','UnPost'

insert into [StrSource]

([Ar],[En])

select  'ÓíÊã ÊÑÍíá ÇáÞíæÏ ÇáãÍÏÏÉ','Selected entries will be posted'

insert into [StrSource]

([Ar],[En])

select  'ÓíÊã  ÇáÛÇÁ ÊÑÍíá ÇáÞíæÏ ÇáãÍÏÏÉ','Selected entries will be UnPosted'

insert into [StrSource]

([Ar],[En])

select  'ÂÎÑ ÊÚÏíá ãä ÞÈá ÇáãÓÊÎÏã: ','Last modification by User:'

insert into [StrSource]

([Ar],[En])

select  'ÂÎÑ ÊÚÏíá: ','Last modification:'

insert into [StrSource]

([Ar],[En])

select  'ÅäÔÇÁ: ','Created'

insert into [StrSource]

([Ar],[En])

select  'ÇáÊÇÑíÎ: ','Date:'

insert into [StrSource]

([Ar],[En])

select  'Êã ÇáÅäÔÇÁ ãä ÞÈá ÇáãÓÊÎÏã: ','Created by User'

insert into [StrSource]

([Ar],[En])

select  'äÞá ßá ÍÑßÇÊ ãÑßÒ ÇáßáÝÉ','Transfar all job cost activity'

insert into [StrSource]

([Ar],[En])

select  'äÞá ÇáÍÑßÇÊ Èíä ãÑÇßÒ ÇáßáÝÉ','Transfer activities between job costs'

insert into [StrSource]

([Ar],[En])

select  'ÅÓã ÇáÇÕá','Origin name'

insert into [StrSource]

([Ar],[En])

select  'ÅÓã ÇáãÇÏÉ áÇÊíäí','Material Latin name'

insert into [StrSource]

([Ar],[En])

select  'ÅÙåÇÑ ÇáÝæÇÊíÑ ÇáÃÎíÑÉ ÝÞØ','Show last bills only'

insert into [StrSource]

([Ar],[En])

select  'ÇáÚäæÇä áÇÊíäí','Latin address'

insert into [StrSource]

([Ar],[En])

select  'ÇáßãíÉ 1','Quantity 1'

insert into [StrSource]

([Ar],[En])

select  'Çíãíá','Email'

insert into [StrSource]

([Ar],[En])

select  'ÊÑÍíá ÇáÝÇÊæÑÉ','Post bill'

insert into [StrSource]

([Ar],[En])

select  'ÊÓáÓá ÇáÒÈæä','Customer serial'

insert into [StrSource]

([Ar],[En])

select  'ÎíÇÑÇÊ ÇáÓäÏÇÊ','Entries option'

insert into [StrSource]

([Ar],[En])

select  'ÎíÇÑÇÊ ÇáÝæÇÊíÑ','Bills option'

insert into [StrSource]

([Ar],[En])

select  'ÑÞã ÇáÃÕá','Origin No'

insert into [StrSource]

([Ar],[En])

select  'ÑÞã ÇáÈØÇÞÉ ááÒÈæä','Customer card No'

insert into [StrSource]

([Ar],[En])

select  'ÑÞã ÇáåæíÉ ááÒÈæä','Customer ID No'

insert into [StrSource]

([Ar],[En])

select  'ÑÞã ÍÓÇÈ ÇáÒÈæä Ýí ÇáÈäß','Cusomter bank account No'

insert into [StrSource]

([Ar],[En])

select  'ãÌãæÚÉ ÇáãÇÏÉ','Material group'

insert into [StrSource]

([Ar],[En])

select  'äæÚ ÇáÏÝÚ ááÝÇÊæÑÉ','Bill payment type'

insert into [StrSource]

([Ar],[En])

select  'åÏÇíÇ','Gifts'

insert into [StrSource]

([Ar],[En])

select  'ÕÇÝí ÇáÑÈÍ','Net profit'

insert into [StrSource]

([Ar],[En])

select  'ÇäÔÇÁ ÞíÏ','Create journal entry'

insert into [StrSource]

([Ar],[En])

select  'ÅÚÇÏÉ ÊäÝíÐ ÂÎÑ ÃãÑ','Execute the last command'

insert into [StrSource]

([Ar],[En])

select  'ÇáäÓÈÉ','Percentage'

insert into [StrSource]

([Ar],[En])

select  'ÊÃßÏ ãä ÊæÒíÚ ÇáÞíã ÈÔßá ÕÍíÍ','Make sure the distribution of values properly'

insert into [StrSource]

([Ar],[En])

select  'ÇáÞíãÉ ÇáãÑÊÈØÉ ÈÇáÚÞæÏ ãÎÊáÝÉ Úä ÞíãÉ ÇáæÑÞÉ , åá ÊÑíÏ ÇÚÇÏÉ ÊæÒíÚ ÇáãÈáÛ ÍÓÈ ÇáäÓÈ¿','The linked value with contract is different then the cheque amount, Do you want to redistribute the amount by percentages?'

insert into [StrSource]

([Ar],[En])

select  'ÑÈØ ÇáÔíß ãÚ ÇáÚÞæÏ','Link cheque with contracts'

insert into [StrSource]

([Ar],[En])

select  'ÑÈØ ãÊÚÏÏ','Multi-Link'

insert into [StrSource]

([Ar],[En])

select  'ÓÊã äÞá ßá ÇáÍÑßÇÊ ÇáÊÇÈÚÉ áãÑßÒ ÇáßáÝÉ :','All transactions of this cost center will be moved'

insert into [StrSource]

([Ar],[En])

select  'ãÊÚÏÏ','Multi'

insert into [StrSource]

([Ar],[En])

select  'ÓÌá ÇáÃæÇãÑ','Commands log'

insert into [StrSource]

([Ar],[En])

select  'ãÒÇãäÉ ÇáãáÝÇÊ','Synchronize files'

insert into [StrSource]

([Ar],[En])

select  'ÞíãÉ ÇáÑÓæã','Fees value'

insert into [StrSource]

([Ar],[En])

select  'ÑÓæã ÇÊÍÇÏ ÇáãáÇß','Owners Associations fees'

insert into [StrSource]

([Ar],[En])

select  'ÏÝÚÇÊ ÇáÚÞæÏ','Contract payments report'

insert into [StrSource]

([Ar],[En])

select  'ÍÓÇÈ ÇáÇíÑÇÏ','Revenue account'

insert into [StrSource]

([Ar],[En])

select  'ÊÓÌíá ÑÓæã ÇÊÍÇÏ ÇáãáÇß','Owners Associations fees'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍÑíß ãÑßÒ ÇáßáÝÉ ÏÇÆä','Cost center belong to credits account'
 
insert into [StrSource] 
([Ar],[En])
select  'ÊÍÑíß ãÑßÒ ÇáßáÝÉ ãÏíä','Cost center belong to debits account'

insert into [StrSource]

([Ar],[En])

select  'ÇáÓÚÑ ááæÍÏÉ','Unit price'

insert into [StrSource]

([Ar],[En])

select  'ÅäåÇÁ ÇáÇÑÌÇÚ','Return termination'

insert into [StrSource]

([Ar],[En])

select  '[B] ÇÓã ÇáÈäÇÁ','[B] Building name'

insert into [StrSource]

([Ar],[En])

select  '[N] ÑÞã ÇáÚÞÇÑ','[N] Property No'

insert into [StrSource]

([Ar],[En])

select  '[O] ÅÓã ÇáãÇáß','[O] Owner name'

insert into [StrSource]

([Ar],[En])

select  'ÇáãáÝ ãæÌæÏ ÓÇÈÞÇð','File already exist'

insert into [StrSource]

([Ar],[En])

select  'ÈÏæä ãÓÇÍÉ','Without an area'

insert into [StrSource]

([Ar],[En])

select  'ÍÏÏ ãÓÇÑ ÇáÌåÉ','Select destination path'

insert into [StrSource]

([Ar],[En])

select  'ÍÏÏ ãÓÇÑ ÇáãÕÏÑ','Select source path'

insert into [StrSource]

([Ar],[En])

select  'ÓíÊã äÓÎ ÇáãáÝÇÊ ÇáãÍÏÏÉ Çáì ÇáãÓÇÑ ÇáÌÏíÏ','Selected files will be copied to the the new path'

insert into [StrSource]

([Ar],[En])

select  'áÇíæÌÏ ÞíÏ','No journal entry'

insert into [StrSource]

([Ar],[En])

select  'áä íÊã ÅäÔÇÁ ÞíÏ ááæÍÏÇÊ ÇáÊí áíÓ áåÇ ÍÓÇÈ ãÇáß Çæ áíÓ áåÇ ãÓÇÍÉ','Journal entry will not be created for units without owner or area'

insert into [StrSource]

([Ar],[En])

select  'áíÓ áåÇ ÍÓÇÈ ãÇáß','does not has owner account'

insert into [StrSource]

([Ar],[En])

select  'ãÚÏá','Modified'

insert into [StrSource]

([Ar],[En])

select  'äÌÍ','Succeed'

insert into [StrSource]

([Ar],[En])

select  'ÓíÊã ÅäåÇÁ ÇáÚÞæÏ ÇáãÍÏÏÉ','Selected contracts will be terminated'

insert into [StrSource]

([Ar],[En])

select  'Êã ÅäåÇÁ','Terminated'

insert into [StrSource]

([Ar],[En])

select  'ÅäåÇÁ ÚÞæÏ ÇáãæÇÞÝ','Parking contracts termination'

insert into [StrSource]

([Ar],[En])

select  'ÅäåÇÁ ÚÞæÏ ÇáÃÑÇÖí æÇáÝáá','lands and villas contracts termination'

insert into [StrSource]

([Ar],[En])

select  'Êã ÅäåÇÁ','Terminated'

insert into [StrSource]

([Ar],[En])

select  'ÃÏÎá ÇáÈäÇÁ','Enter Building'

insert into [StrSource]

([Ar],[En])

select  'ÅäåÇÁ ÇáÚÞæÏ ÇáãÍÏÏÉ','Terminate selected contracts'

insert into [StrSource]

([Ar],[En])

select  'ÊÌÏíÏ ÇáÚÞæÏ ÇáãÍÏÏÉ','Renew selected contracts'

insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇÓÊåáÇß ÇáãÇÁ','Water consumption value'

insert into [StrSource] 
([Ar],[En])
select  'ÇÓÊåáÇß ÇáãÇÁ','Water consumption'

insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ ÞíÏ ÚäÏ ÇáÅäåÇÁ ÈÔßá Âáí','Generate journal entry on termination automatically'

insert into [StrSource] 
([Ar],[En])
select  'ØÑíÞÉ ÍÓÇÈ ÇáãÇÁ','Water calculation method'

insert into [StrSource] 
([Ar],[En])
select  'ØÑíÞÉ ÍÓÇÈ ÇáßåÑÈÇÁ','Electricity calculation method'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÇÏ ÇáßåÑÈÇÁ ÇáÍÇáí','Electricity current meter'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÇÏ ÇáßåÑÈÇÁ ÇáÓÇÈÞ','Electricity previous meter'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÇÏ ÇáãÇÁ ÇáÍÇáí','Water current meter'
 
insert into [StrSource] 
([Ar],[En])
select  'ÚÏÇÏ ÇáãÇÁ ÇáÓÇÈÞ','Water previous meter'

insert into [StrSource] 
([Ar],[En])
select  'ßãíÉ ÇÓÊåáÇß ÇáãÇÁ','Water consumption amount'

insert into [StrSource] 
([Ar],[En])
select  'ØÑíÞÉ ÇáÍÓÇÈ ÇáãÇÁ','Water calculation method'

insert into [StrSource] 
([Ar],[En])
select  'ØÑíÞÉ ÇáÍÓÇÈ ÇáßåÑÈÇÁ','Electricity calculation method'

insert into [StrSource] 
([Ar],[En])
select  'ØÑíÞÉ  ÍÓÇÈ ÇáßåÑÈÇÁ','Electricity calculation method'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÓã ÇáÌÏíÏ','New name'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÓã ÇáÍÇáí','Current name'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÓÌá ÇáÊÌÇÑí áÇÊíäí','Latin trading license'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÕÝÉ áÇÊíäí','Latin Adjective'

insert into [StrSource] 
([Ar],[En])
select  'ÇáßÝíá áÇÊíäí','Latin Sponser'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãåäÉ áÇÊíäí','Latin Occupation'

insert into [StrSource] 
([Ar],[En])
select  'ÈíÇäÇÊ ÇáßÝíá áÇÊíäí','Latin Sponser data'

insert into [StrSource] 
([Ar],[En])
select  'ÈÇÑßæÏ','Barcode'

insert into [StrSource] 
([Ar],[En])
select  'ÊÚÏíá ÈØÇÞÇÊ ÇáÒÈÇÆä','Modify Customer cards'

insert into [StrSource] 
([Ar],[En])
select  'ÍÞá ÅÖÇÝí 1','Field 1'

insert into [StrSource] 
([Ar],[En])
select  'ÍÞá ÅÖÇÝí 2','Field 2'

insert into [StrSource] 
([Ar],[En])
select  'ÍÞá ÅÖÇÝí 3','Field 3'

insert into [StrSource] 
([Ar],[En])
select  'ÍÞá ÅÖÇÝí 4','Field 4'

insert into [StrSource] 
([Ar],[En])
select  'ÍÞá ÅÖÇÝí 5','Field 5'

insert into [StrSource] 
([Ar],[En])
select  'ÍÞá ÅÖÇÝí 6','Field 6'

insert into [StrSource] 
([Ar],[En])
select  'ÍÞá ÅÖÇÝí 7','Field 7'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÓÇÍÉ ÇáÇÌãÇáíÉ','Total area'

insert into [StrSource] 
([Ar],[En])
select  'ÛÑÇãÇÊ ÇáÇäåÇÁ','Termination fines'

insert into [StrSource] 
([Ar],[En])
select  'ÑÓæã ÇáÛÑÇãÇÊ','Fines fees'

insert into [StrSource] 
([Ar],[En])
select  'Ïæä ÞíãÉ','Without amount'

insert into [StrSource] 
([Ar],[En])
select  'áå ÞíãÉ','With amount'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÈØÇÞÉ ÇáåæíÉ ãßÑÑ','ID card number duplicate'

insert into [StrSource] 
([Ar],[En])
select  'ÅäÔÇÁ ÍÓÇÈÇÊ áÈØÇÞÇÊ ÇáÒÈÇÆä','Create accounts for Customers cards'

insert into [StrSource] 
([Ar],[En])
select  'ÅÈÏÇ','Start'

insert into [StrSource] 
([Ar],[En])
select  'ÅÖÛØ ÅÈÏÇ áÇäÔÇÁ ÇáÍÓÇÈÇÊ','Click start to create accounts'

insert into [StrSource] 
([Ar],[En])
select  'ÅäÔÇÁ ÍÓÇÈ','Create account'

insert into [StrSource] 
([Ar],[En])
select  'ÅäÔÇÁ ÍÓÇÈ ÊÃãíä','Create deposit account'

insert into [StrSource] 
([Ar],[En])
select  'ÇÛáÇÞ','Close'

insert into [StrSource] 
([Ar],[En])
select  'ÍÏÏ ÇáÈØÇÞÇÊ ÇáÊí ÊÑíÏ ÇäÔÇÁ ÍÓÇÈÇÊ áåÇ','Select cards that you want to create accounts'

insert into [StrSource] 
([Ar],[En])
select  'ÍÏÏ ÇáÍÓÇÈ ÇáÇÈ ááÒÈÇÆä','Select main account for customers'

insert into [StrSource] 
([Ar],[En])
select  'ÍÏÏ ÇáÍÓÇÈ ÇáÑÆíÓíÉ','Select main account'

insert into [StrSource] 
([Ar],[En])
select  'ÍÏÏ ÍÓÇÈ ÇáÊÃãíäÇÊ ÇáÇÈ ááÒÈÇÆä','Select main deposit account for customers'

insert into [StrSource] 
([Ar],[En])
select  'åÐÇ ÇáãÚÇáÌ ÓíÓÇÚÏß Ýí ÇäÔÇÁ ÍÓÇÈÇÊ áÈØÇÞÇÊ ÇáÒÈÇÆä áíÓ áåÇ ÍÓÇÈ Çæ ÍÓÇÈ ÊÇãíä','This wizard help you to create accounts for customers that does not have account or deposit account'

insert into [StrSource] 
([Ar],[En])
select  'åÐå ÇáÈØÇÞÇÊ áíÓ áåÇ ÍÓÇÈ Çæ áíÓ áåÇ ÍÓÇÈ ÊÃãíä','These cards does not have account or deposit account'

insert into [StrSource] 
([Ar],[En])
select  'ÍÏÏ ÇáÍÓÇÈ ÇáÃÈ ááÒÈÇÆä','Select main account for customers'

insert into [StrSource] 
([Ar],[En])
select  'áÇ Êãáß ÇáÕáÇÍíÇÊ ááÞíÇã ÈåÐå ÇáÚãáíÉÑÇÌÚ ãÏíÑ ÇáäÙÇã','You dont have permission for this operation Check with your System Administrator'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÑÎíÕ','License'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÓã ÇáÈíÇäí áÃÑÕÏÉ ÇáÍÓÇÈÇÊ','Accounts Balance Chart'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÓã ÇáÈíÇäí áÇÑÕÏÉ ÇáÍÓÇÈÇÊ','Accounts Balance Chart'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÕíÏ ÏÇÆä','Credit balance'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÕíÏ ãÏíä','Debit balance'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÛÑÖ ãä ÇáÚÞÏ','Purpose of the contract'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÛÑÖ ãä ÇáÚÞÏ áÇÊíäí','Purpose of the contract Latin'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÝÊÑÉ','Period'

insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÊÕäíÝ','Card category'

insert into [StrSource] 
([Ar],[En])
select  'Ïáíá ÇáÊÕäíÝ','Categories chart'

insert into [StrSource] 
([Ar],[En])
select  'ßÔÝ ÚÞæÏ ÇáÎÏãÇÊ','Services contracts report'

insert into [StrSource] 
([Ar],[En])
select  'ááØÈÇÚÉ áÇÊíäí','Latin printing'

insert into [StrSource] 
([Ar],[En])
select  'áä íÊã ÇäÔÇÁ ÍÓÇÈ ááÈØÇÞÉ','Card account will not be created'

insert into [StrSource] 
([Ar],[En])
select  'áä íÊã ÇäÔÇÁ ÍÓÇÈ ááÈØÇÞÉåá ÊÑíÏ ÇáãÊÇÈÚÉ¿','Card account will not be created
do you want to continue?'

insert into [StrSource] 
([Ar],[En])
select  'ãÏÉ ÇáÚÞÏ äÕÇð','Contract duration in text'

insert into [StrSource] 
([Ar],[En])
select  'ãßÇä ÇáÚÞÏ áÇÊíäí','Contract location latin'

insert into [StrSource] 
([Ar],[En])
select  'äæÚ ÇáÚÞÏ Óäæí / ÔåÑí','Contract type yearly / monthly'

insert into [StrSource] 
([Ar],[En])
select  'ÞæÇÆã ÇáÏÎá','Income Statement'

insert into [StrSource] 
([Ar],[En])
select  'ãÒÇãäÉ ÇáãáÝÇÊ ...','Synchronize files ...'

insert into [StrSource] 
([Ar],[En])
select  'ÊÝÚíá ÇÑÔÝÉ ÇáãáÝÇÊ Öãä ÞÇÚÏÉ ÇáÈíÇäÇÊ ...','Activating archive files within the database ...'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÃÑÔÝÉ','Archiving'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍãíá ÇáãáÝÇÊ ãä ÞÇÚÏÉ ÇáÈíÇäÇÊ ...','Load files from Database ...'

insert into [StrSource] 
([Ar],[En])
select  'ÇÓÊÚÑÇÖ','Browse'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÌáÏ','Folder'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÓÇÑ ÇáÌÏíÏ','New Path'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÓÇÑ ÇáÞÏíã','Old Path'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍáíá','Analysis'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍãíá','Download'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍãíá ÇáæËÇÆÞ ãä ÞÇÚÏÉ ÇáÈíÇäÇÊ Çáì ÇáÞÑÕ ÇáÕáÈ','Download documents from Database to the hard drive'

insert into [StrSource] 
([Ar],[En])
select  'ÊÛíÑ ãÓÇÑ ÇáãáÝÇÊ ...','Change files path ...'

insert into [StrSource] 
([Ar],[En])
select  'ÊÛííÑ ãÓÇÑ ÇáãáÝÇÊ','Change files path'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÊÍãíá ÇáÕæÑ æÇáãáÝÇÊ æÇáæËÇÆÞ ãä ÞÇÚÏÉ ÇáÈíÇäÇÊ ÇáÞÑÕ ÇáÕáÈ','Photos, files and documents will be loaded from the database'

insert into [StrSource] 
([Ar],[En])
select  'äæÚ ãÍÏÏ ãä ÇáãáÝÇÊ','Specific type of files'

insert into [StrSource] 
([Ar],[En])
select  ' ÇáÛÇÁ ÊÝÚíá ÍÝÙ ÇáãáÝÇÊ æÇáæËÇÆÞ æÇáÕæÑ  Ýí ÞÇÚÏÉ ÇáÈíÇäÇÊ','Deactivate save files, documents and images in the database'

insert into [StrSource] 
([Ar],[En])
select  'ÅÈÞÇÁ ÇáãÓÊäÏÇÊ Ýí ãßÇäåÇ ÇáÇÕáí','Keep documents in the original location'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÓÇÑ ÇáÇÝÊÑÇÖí áÍÝÙ ÇáæËÇÆÞ','Default path to save documents'

insert into [StrSource] 
([Ar],[En])
select  'ÊÝÚíá ÇÑÔÝÉ ÇáãáÝÇÊ Öãä ÞÇÚÏÉ ÇáÈíÇäÇÊ','Activating archive files in the database'

insert into [StrSource] 
([Ar],[En])
select  'ÊÝÚíá ÍÝÙ ÇáãáÝÇÊ æÇáæËÇÆÞ æÇáÕæÑ  Ýí ÞÇÚÏÉ ÇáÈíÇäÇÊ','Activating save files, documents and images in the database'

insert into [StrSource] 
([Ar],[En])
select  'ÊÝÚíá ÍÝÙ ÇáãáÝÇÊ æÇáæËÇÆÞ æÇáÕæÑ Ýí ÞÇÚÏÉ ÇáÈíÇäÇÊ','Activating save files, documents and images in the database'

insert into [StrSource] 
([Ar],[En])
select  'ÊãÊ ÚãáíÉ ÇáÊÝÚíá','Activation has been applied'

insert into [StrSource] 
([Ar],[En])
select  'ÊãÊ ÚãáíÉ ÇáÛÇÁ ÇáÊÝÚíá','Deactivation has been applied'

insert into [StrSource] 
([Ar],[En])
select  'ÑÈØ ÇáãÓÊäÏÇÊ','Linking documents'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÊØÈíÞ ÇáÊÛíÑÇÊ','Changes will be applied'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÊØÈíÞ ÇáÊÛíÑÇÊåá ÊÑíÏ ÇáãÊÇÈÚÉ¿','Changes will be applied
Do you want to continue?'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÍÐÝ ßá ÇáãáÝÇÊ ÇáãÑÝÞÉ ãä ÞÇÚÏÉ ÇáÈíÇäÇÊ æáä íãßä ÇáÊÑÇÌÚ Úä ÇáÚãáíÉ','All files will be deleted from the database, this operation can not be reversed'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÍÐÝ ßá ÇáæËÇÆÞ æÇáÕæÑ ÇáãÑÝÞÉ ãä ÞÇÚÏÉ ÇáÈíÇäÇÊ','All attached documents and images will be deleted from the database'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã äÓÎ ßá ÇáæËÇÆÞ æÇáÕæÑ ÇáãÄÑÔÝÉ Çáì ÞÇÚÏÉ ÇáÈíÇäÇÊ','All attached documents and images will be copied to the database'

insert into [StrSource] 
([Ar],[En])
select  'ÚÑÖ ãáÝÇÊ Çá PDF Ýí ÇáÈÑäÇãÌ','View PDF files'

insert into [StrSource] 
([Ar],[En])
select  'ãÚ ÇáÚáã ÇäåÇ ÓÊÈÞì ãÍÝæÙÉ Úáì ÇáÞÑÕ ÇáÕáÈ','and be noted that it will still be saved on the hard drive'

insert into [StrSource] 
([Ar],[En])
select  'ãä ÇáÂä ÓíÊã ÍÝÙ ÇáãáÝÇÊ æÇáæËÇÆÞ æÇáÕæÑ  ÇáãÑÝÞÉ Ýí ÞÇÚÏÉ ÇáÈíÇäÇÊ','From now on, all files and attached documents will be saved on the database'

insert into [StrSource] 
([Ar],[En])
select  'ãä ÇáÂä áä íÊã ÍÝÙ ÇáãáÝÇÊ æÇáæËÇÆÞ ÇáãÑÝÞÉ Ýí ÞÇÚÏÉ ÇáÈíÇäÇÊ','From now on, all files and attached documents will not be saved on the database'

insert into [StrSource] 
([Ar],[En])
select  'äÓÎ ÇáãáÝ Çáì ÇáãÓÇÑ ÇáÅÝÊÑÇÖí ÚäÏ ÑÈØå ãÚ ÇáãÓÊäÏ','Copy the file to the default path when linking it with the document'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÍÐÝ ÇáæËÇÆÞ æÇáÕæÑ ÇáÍÇáíÉ ãä ÞÇÚÏÉ ÇáÈíÇäÇÊ','Do you want to delete the existing documents and images from the database'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ äÓÎ ÇáãáÝÇÊ æÇáæËÇÆÞ æÇáÕæÑ  ÇáãÄÑÔÝÉ Çáì ÞÇÚÏÉ ÇáÈíÇäÇÊ','Do you want to copy archived files, documents and images to the database'

insert into [StrSource] 
([Ar],[En])
select  'æÓíÊã ÇáÅßÊÝÇÁ ÈÍÝÙåÇ Úáì ÇáãÌáÏÇÊ Ýí ÇáÞÑÕ ÇáÕáÈ ÝÞØ','and will be saved in folders on the hard drive only'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÍÓÇÈ ÇáÇÝÊÑÇÖí áäãØ ÇáÓäÏ ÇáäÞÏí','Enter default account for cash entry type'

insert into [StrSource] 
([Ar],[En])
select  'äãØ ÇáÓäÏ ÇáäÞÏí','Cash entry type'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÓäÏ ÇáäÞÏí','Cash entry'

insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊæáíÏ ÓäÏÇÊ ÇáÞíÏ áÚÞæÏ ÇáÎÏãÇÊ','Recreate entries for service contracts'

insert into [StrSource] 
([Ar],[En])
select  'äãØ ÇáÚÞÏ','Contract type'

insert into [StrSource] 
([Ar],[En])
select  'ãÚáæãÇÊ ãÇÏÉ','Material information'

insert into [StrSource] 
([Ar],[En])
select  'áã íÍä æÞÊåÇ','Time not ripe'

insert into [StrSource] 
([Ar],[En])
select  'áã íÊã ÇáÊäÝíÐ','Not Implemented'

insert into [StrSource] 
([Ar],[En])
select  'ßÔÝ ÚÞæÏ ÇáÕíÇäÉ','Maintenance contracts report'

insert into [StrSource] 
([Ar],[En])
select  'ÚÇãá ÇáÕíÇäÉ','Maintenance worker'

insert into [StrSource] 
([Ar],[En])
select  'ÓÈÈ ÚÏã ÇáÊäÝíÐ','Reason for non-implementation'

insert into [StrSource] 
([Ar],[En])
select  'ÒíÇÑÇÊ ÚÞæÏ ÇáÕíÇäÉ','Maintenance contract visits'

insert into [StrSource] 
([Ar],[En])
select  'ÒíÇÑÇÊ ÇáÕíÇäÉ','Maintenance visits'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÒíÇÑÉ','Visit Number'

insert into [StrSource] 
([Ar],[En])
select  'ÍÇä æÞÊåÇ æáã ÊäÝÐ','Due time but not implement'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÇáÊäÝíÐ','Implemented'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÒíÇÑÇÊ ÇáÕíÇäÉ','Maintenance visits report'

insert into [StrSource] 
([Ar],[En])
select  'ÊÚÑíÝ ÇÚãÇá ÇáÕíÇäÉ','Maintenance work card'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍÑíß ãÑßÒ ÇáßáÝÉ ãÚ ÇáÇíÑÇÏ','Move cost center with revenue account'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÒíÇÑÉ','Visit date'

insert into [StrSource] 
([Ar],[En])
select  'ÈíÇä ÚÏã ÊäÝíÐ ÇáÕíÇäÉ','Non-implementation maintenance details'

insert into [StrSource] 
([Ar],[En])
select  'ÈíÇä ÊäÝíÐ ÇáÕíÇäÉ','Implementation maintenance details'

insert into [StrSource] 
([Ar],[En])
select  'ÈíÇä ÇáÒíÇÑÉ','Visit details'

insert into [StrSource] 
([Ar],[En])
select  'ÇäãÇØ ÚÞæÏ ÇáÕíÇäÉ','Maintenance contract types'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÚÞÇÑ æÃÚãÇá ÇáÕíÇäÉ','Unit and Maintenance works'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÒíÇÑÇÊ','Visits'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÃÚãÇá ÇáãØáæÈÉ','Required works'

insert into [StrSource] 
([Ar],[En])
select  'ÇÚãÇá ÇáÕíÇäÉ','Maintenance works'

insert into [StrSource] 
([Ar],[En])
select  'ÃÚãÇá ÇáÕíÇäÉ','Maintenance works'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáÚÞÏ','Contract name'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍãíá ÇáãáÝÇÊ ãä ÞÇÚÏÉ ÇáÈíÇäÇÊ','Load files from the database'

insert into [StrSource] 
([Ar],[En])
select  'ÕíÇäÉ ÇáÚÞÇÑÇÊ','Units Maintenance'

insert into [StrSource] 
([Ar],[En])
select  'ÃÑÈÇÍ ÇáãæÇÏ','Materials profits'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊíÑÇÏ ÈíÇäÇÊ ÇáãæÇÏ æÇáãÌãæÚÇÊ','Import materials & groups information'

insert into [StrSource] 
([Ar],[En])
select  'ÞÇÆãÉ ÇáÊÏÝÞÇÊ ÇáäÞÏíÉ','Cash flow statement'

insert into [StrSource] 
([Ar],[En])
select  'ÞÇÆãÉ ÇáãÑßÒ ÇáãÇáí','Financial position statement'

insert into [StrSource] 
([Ar],[En])
select  'ÊÕäíÝÇÊ ÞæÇÆã ÇáÏÎá','Financial statements classification'

insert into [StrSource] 
([Ar],[En])
select  'ÝÊÑÉ ÇáÇíÑÇÏ æÇáÊÍÕíá','Collection & Revenue Period'

insert into [StrSource] 
([Ar],[En])
select  'ÒíÇÑÇÊ ÇáÕíÇäÉ ÇáãÓÊÍÞÉ','Due maintenance visits'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÚÏÇÏ','Counter number'

insert into [StrSource] 
([Ar],[En])
select  'ÃÌÑÉ ÇáÓÇÚÉ','Hour fee'

insert into [StrSource] 
([Ar],[En])
select  'ÃÌæÑ ÇáÕíÇäÉ','Maintenance fees'

insert into [StrSource] 
([Ar],[En])
select  'ÇÓã ÇáÚÇãá','Worker name'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÕäíÝ Ýí ÞæÇÆã ÇáÏÎá','Classification with income statement'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÞã ãßÑÑ','Duplicate number'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÚãÇá','Workers'

insert into [StrSource] 
([Ar],[En])
select  'ÈÏæä ÚÞÏ','Without contract'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáÒíÇÑÉ','Visits report'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÊÚÏíá ÏÑÌÉ  ÇáÓÑíÉ áåÐÇ ÇáÍÓÇÈ, åá ÊÑíÏ ÊÚÏíá ÏÑÌÉ ÇáÓÑíÉ áÇÈäÇÆå¿','Security level has been modified for this account, do you want to change it for the sons?'

insert into [StrSource] 
([Ar],[En])
select  'ÍÑßÉ ÇáÚÞÇÑÇÊ ÇáãÄÌÑÉ','Leased property activity'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáãÕÑæÝ','Expense account'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÓÇÚÇÊ','Working hours'

insert into [StrSource] 
([Ar],[En])
select  'ÝÇÊæÑÉ ÇáãæÇÏ ÇáãÓÊÎÏãÉ','Bill of materials'

insert into [StrSource] 
([Ar],[En])
select  'äÞá ÇáÍÑßÇÊ Èíä ÇáãæÇÏ','Transfer activity between materials'

insert into [StrSource] 
([Ar],[En])
select  'ãÑÇßÒ ÇáßáÝÉ ááæÑÞÉ ÇáãÇáíÉ','Cost center for cheque'

insert into [StrSource] 
([Ar],[En])
select  'ßá ÍÓÇÈ Úáì æÑÞÉ','Each account on a separate sheet'

insert into [StrSource] 
([Ar],[En])
select  'ÚÞÏ ÕíÇäÉ','Maintenance contract'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈÇÊ ÇáæÑÞÉ ÇáãÇáíÉ','Cheque accounts'

insert into [StrSource] 
([Ar],[En])
select  'ÊäÈíå ÇáæÍÏÇÊ ÇáÊí ÓíÊã ÅÎáÇÄåÇ ÞÈá','Alert for units will be vacated before'

insert into [StrSource] 
([Ar],[En])
select  'ãÏæÑÉ','Rounded'

insert into [StrSource] 
([Ar],[En])
select  'äãØ ÇáÝÇÊæÑÉ ÇáÅÝÊÑÇÖí','Default bill type'

insert into [StrSource] 
([Ar],[En])
select  'ÊäÈíå ÒíÇÑÇÊ ÇáÕíÇäÉ ÞÈá','Alert maintenance visits before'

insert into [StrSource] 
([Ar],[En])
select  'ÝÊÍ äãØ ÇáÝÇÊæÑÉ ÇáãÍÏÏ áãæÇÏ ÇáÕíÇäÉ ÇáãÓÊÎÏãÉ ÈÇáÒíÇÑÉ','Open the selected type of the bill for materials used for maintenance visit'

insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇá Âáí ÚäÏ ÇáÅäåÇÁ','Automatically send SMS when termination'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÞã ÇáÅÝÊÑÇÖí áÇÑÓÇá ÇáÑÓÇÆá','Default number to send SMS'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÕíÇäÉ ÇáÎÇÑÌíÉ','External Maintenance'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÕíÇäÉ ÇáÏÇÎáíÉ','Internal Maintenance'

insert into [StrSource] 
([Ar],[En])
select  'ÚäÏ ÇáÅäåÇÁ','When termination'

insert into [StrSource] 
([Ar],[En])
select  'ÚäÏ ÇáÇÖÇÝÉ','When add'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáÌÒÁ ÌãÚ','Plural part name'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÓã ÈÇáÌãÚ','Name in plural'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÈ ÇáÏæáÉ','By Country'

insert into [StrSource] 
([Ar],[En])
select  'ááÊÝÞíØ ÚÑÈí','Arabic in words'

insert into [StrSource] 
([Ar],[En])
select  'ááÊÝÞíØ áÇÊíäí','Latin in words'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáÍÇÑÓ','Watchman name'

insert into [StrSource] 
([Ar],[En])
select  'ÇßÓá','Excel'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÞã ÇáÂáí','AutoNumber'

insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÍÇÑÓ ÇáÈäÇÁ','Watchman card'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÊÚííä','Date of hiring'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÊÍÑíÑ ÇáÅäåÇÁ','Termination issue date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÈÏáÇÊ ÍÑÇÓ ÇáÈäÇÁ','Alterations of wachtmen'

insert into [StrSource] 
([Ar],[En])
select  'ÊÕÏíÑ html.....','Export html....'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÇÑíÑ ÇáÍÑßÉ','Activity reports'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÇÑíÑ ÇáãÏíÑ','Managers Reports'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáÃÈäíÉ','Buildings report'

insert into [StrSource] 
([Ar],[En])
select  'ÍÇÑÓ ÇáÈäÇÁ','Watchman'

insert into [StrSource] 
([Ar],[En])
select  'ÍÑßÉ ÅÌãÇáí ÇáãæÇÏ','Total material movement'

insert into [StrSource] 
([Ar],[En])
select  'ÓäÉ ÇáÈäÇÁ','Built year'

insert into [StrSource] 
([Ar],[En])
select  'ÝÍÕ ÍÙÑ ÇáÒÈÇÆä','Check customers blocking'

insert into [StrSource] 
([Ar],[En])
select  'ÞÑÇÁÉ ÚÏÇÏ ÇáßåÑÈÇÁ','Electricity meter reading'

insert into [StrSource] 
([Ar],[En])
select  'ÞÑÇÁÉ ÚÏÇÏ ÇáßåÑÈÇÁ ááÈäÇÁ','Building electricity meter reading'

insert into [StrSource] 
([Ar],[En])
select  'ãÓÇÍÉ ÇáÈäÇÁ ','Building area'

insert into [StrSource] 
([Ar],[En])
select  'äæÚ ÇáÊÑÎíÕ','License type'

insert into [StrSource] 
([Ar],[En])
select  'ßáÝÉ','Cost'

insert into [StrSource] 
([Ar],[En])
select  'ÛÑÇãÇÊ ÇáÇÑÌÇÚ','Return fees'

insert into [StrSource] 
([Ar],[En])
select  'ÚãæáÉ ÇáÊÍÕíá','Commission collection'

insert into [StrSource] 
([Ar],[En])
select  'ÕáÇÍíÇÊ ÇáØáÈíÇÊ','Orders permission'

insert into [StrSource] 
([Ar],[En])
select  'Í/ãÏíä','Debit'

insert into [StrSource] 
([Ar],[En])
select  'Í/ ÇáÏÇÆä','Credit'

insert into [StrSource] 
([Ar],[En])
select  'ÊÝÚíá æÇáÛÇÁ ÇÑÔÝÉ ÇáãáÝÇÊ Öãä ÞÇÚÏÉ ÇáÈíÇäÇÊ','Active file archiving within database'

insert into [StrSource] 
([Ar],[En])
select  'ÊÛíÑ ãÓÇÑ ÇáãáÝÇÊ','Change files path'

insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ãÃÌÑ','Lessor card'

insert into [StrSource] 
([Ar],[En])
select  'ÇáØáÈíÇÊ','Orders'

insert into [StrSource] 
([Ar],[En])
select  'ÃäãÇØ ÇáØáÈíÇÊ','Orders types'

insert into [StrSource] 
([Ar],[En])
select  'ÇäãÇØ ÇáØáÈíÇÊ','Orders types'

insert into [StrSource] 
([Ar],[En])
select  'ÇäãÇØ ÇáØáÈíÇÊ','Orders types'

insert into [StrSource] 
([Ar],[En])
select  'ÈíÇä ÂÎÑ ÍÇáÉ','Last status details'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÓÊÎÏã / ÂÎÑ ÍÇáÉ','User / Last status'

insert into [StrSource] 
([Ar],[En])
select  'ÂÎÑ ÍÇáÉ','Last status'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÂÎÑ ÍÇáÉ','Last status date'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÓã ÚÑÈí','Arabic name'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÓã áÇÊíäí','Latin name'


GO
/****** Object:  StoredProcedure [dbo].[PrcStrSource3]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcStrSource3]
  
as

insert into [StrSource] 
([Ar],[En])
select  '[O] ÅÓã ÇáãÇáß','[O] Owner name'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÍÓÇÈ ÇáÅíÑÇÏ','Enter revenue account'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáÍÇÑÓ','Watchman name'

insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊäÝíÐ ÂÎÑ ÃãÑ','Execute the last command'

insert into [StrSource] 
([Ar],[En])
select  'ÇÚÇÏÉ ÊæáíÏ ÓäÏÇÊ ÇáÞíÏ áÚÞæÏ ÇáÃÑÇÖí','ReGenerate entries for land contracts'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÇÑíÎ ÍÓÈ','Date by'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÓÚÑ ÇáÅÌãÇáí','Total price'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíãÉ ÇáãÑÊÌÚÉ','Returned value'

insert into [StrSource] 
([Ar],[En])
select  'Çáì ÊÇÑíÎ','To date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÍ ÇáÅÓÊÍÞÇÞ','Merit Date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ','Date...'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ  ÅäÊåÇÁ ÇáÅÞÇãÉ','Residence expiry date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÂÎÑ ÏÝÚÉ ','Last payment date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÂÎÑ ÏÝÚÉ ãÓÊÍÞÉ','Last due payment date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÂÎÑ Ôíß ãÊÃÎÑ','Last delayed cheque'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÂÎÑ Ôíß ãÓÊÍÞ','Last due check date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÅÑÓÇá ÇáÚÞÏ Åáì ÇáÊÕÏíÞ','Contract delivery date to registration'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÅÓÊËãÇÑ ÇáÈäÇÁ','Building investment date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÅÓÊÍÞÇÞ ÇáÏÝÚÉ','Payment due date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÅÓÊÑÏÇÏ ÇáÊÃãíäÇÊ','Deposit retrieve date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÅÓÊáÇã ÇáÚÞÏ ÇáãÕÏÞ ãä ÇáÒÈæä','Contract received date from customer'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÅÞÝÇá ÃãÑ ÇáÕíÇäÉ ','Maintenance order closing date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÅäÊåÇÁ ÇáÅÞÇãÉ','Residence end date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÅäÊåÇÁ ÇáÇÕÏÇÑ','
The expiry date of release'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÅäÊåÇÁ ÇáÍÌÒ ãÍÏÏ','Booking end date specified'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÅäÊåÇÁ ÇáÕáÇÍíÉ','Date of expiration'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÅäÊåÇÁ ÇáåæíÉ','ID expiry date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÅäÊåÇÁ ÌæÇÒ ÇáÓÝÑ','Passport expiry date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÅäåÇÁ ÇáÍÌÒ','Booking termination date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÅäåÇÁ ÇáÔíß ÇáãÑÊÌÚ','Returned cheque termination date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÅäåÇÁ ÇáÚÞÏ','Contract termination date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÅäåÇÁ ÇáÚÞÏ ÃÕÛÑ ãä ÊÇÑíÎ ÈÏÇíÉ ÇáÚÞÏ ','Contract termination date is smaller than contract start date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÅäåÇÁ ÇáÚÞÏ ÇáÓÇÈÞ','Previous contract termination date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÅäåÇÁ ÇáÚÞÏ Öãä ÝÊÑÉ ÚÞÏ ÂÎÑ ÑÞã ÇáÚÞÏ : ','Contract termination date inside the period of contract No:'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÅäåÇÁ ÇáÚÞÏ ÞÈá ÊÇÑíÎ ÈÏÇíÊå ','Contract termination date before strarting date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ Ãæá ÞÓØ','First installment date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇÓÊáÇã ÇáÚÞÏ áÅÑÓÇáå ááÊÕÏíÞ','Contract received date for registration'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇÓÊáÇã ÇáÚÞÏ ãä ÇáÊÕÏíÞ','Contract received date from registration'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÅÎáÇÁ','Evacuation date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÅÏÎÇá','Input date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÅÑÌÇÚ','Return date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÅÓÊÍÞÇÞ','due  date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÅÓÊÑÏÇÏ','Refund date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÅÓÊáÇã','Received date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÅÕÏÇÑ','release date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÅÞÝÇá','Closing date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÅãÊäÇÚ Úä ÇáÓÏÇÏ','Date abstain from payment'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÅäÊÇÌ','Production date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÅäÊåÇÁ','Expire Date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÅäåÇÁ','Termination date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÅäåÇÁ ãÍÏÏ','Termination date specific'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÅíÕÇá','Receipt Date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÇÑÌÇÚ','Refund date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÇÓÊÍÞÇÞ','Claiming date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÇãÊäÇÚ Úä ÇáÓÏÇÏ','Date of abstention of paying'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÇäÊåÇÁ ÇáãÊæÞÚ','Expected completion date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÈÏÁ ÃßÈÑ ãä ÊÇÑíÎ ÇáÇäÊåÇÁ','Start date is larger than the expiration date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÈÏÇíÉ','Start Date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÈíÚ','Selling date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÊËÈíÊ','Fixed date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÊÍÑíÑ','Issue date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÊÍÕíá','Collect date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÊÐßíÑ','Reminder date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÊÑÍíá','Deposit date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÊÑÎíÕ','License date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÊÓáíã ááÞÓã ÇáÞÇäæäí','Delivery date to legal department'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÊÙåíÑ','Endorsement date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÊÚííä','Date of hiring'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÊäÝíÐ','Execution date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÍÌÒ','Booking date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÎÑæÌ','Leaving date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÏÎæá','Entering date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÏÝÚÉ','Payment date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÏÝÚÉ ÇáÃæáì','First payment date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÒíÇÑÉ','Visit date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÓäÏ','Entry date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÔÍä','Shipping date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÔÑÇÁ','Purchase date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÚÞÏ','Contract date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÚãáíÉ','Operation date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÞÑÇÁÉ ÇáÓÇÈÞÉ','Last read date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáÞíÏ','Voucher Date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáãíáÇÏ','Date of birth'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáäåÇíÉ','Ending date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇáæÕæá','Arrive date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÇäÊåÇÁ ÌæÇÒ ÇáÓÝÑ','Passport Expiry Date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ Çæá Ôíß ãÊÃÎÑ','First delayed cheque'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÈÏÃ ÇáßÝÇáÉ','Warranty start date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÈÏÇíÉ ÇáÅÓÊËãÇÑ','Investment starting date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÈÏÇíÉ ÇáÅåÊáÇß','Depreciation starting date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÈÏÇíÉ ÇáÕíÇäÉ','Maintenance starting date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÈÏÇíÉ ÇáÚÞÏ','Contract starting date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÈÏÇíÉ ÇáÚÞÏ ÃßÈÑ ãä ÊÇÑíÎ äåÇíÉ ÇáãÏÉ','Contract start date is bigger than End date period'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÈÏÇíÉ ÇáÚÞÏ ÃßíÑ ãä ÊÇÑíÎ ÇáÅÓÊËãÇÑ !','Contract starting date is larger than investment starting date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÈÏÇíÉ ÇáãÏÉ','Start duration date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÈÑÇÁÉ ÐãÉ ÇáÈáÏíÉ','Municipality clearance date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÈÑÇÁÉ ÐãÉ ÇáßåÑÈÇÁ','Electricity clearance date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÊÍÑíÑ ÇáÅäåÇÁ','Termination issue date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÊÍÑíÑ ÇáÚÞÏ','Contract issue date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÊÓáíã ÇáÚÞÇÑ','Property delivery date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÊÓáíã ÇáÚÞÏ ÇáãÕÏÞ ááÒÈæä','Registered contract delivery date to customer'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÊÓáíã ÇáÚÞÏ ááÒÈæä','Contract delivery date to customer'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ØÈÇÚÉ ÇáÊäÈíå','Warn printing date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ØÈÇÚÉ ÈÑÇÁÉ ÇáÐãÉ','Clearance print date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÚÞÏ ÇáÕíÇäÉ','Maintenance contract starting date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ ÝÊÍ ÇáÏÚæì','Lawsuit date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ äåÇíÉ ÇáÅÓÊËãÇÑ','Investment expiry date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ äåÇíÉ ÇáÅÓÊÍÞÇÞ','Due end date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ äåÇíÉ ÇáÏÚæì','Lawsuit end date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ äåÇíÉ ÇáÚÞÏ','Contract expiry date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ äåÇíÉ ÇáÚÞÏ ÃßÈÑ ãä ÊÇÑíÎ äåÇíÉ ÇáÅÓÊËãÇÑ ááÃÑÖ','Contract expiry date is larger than investment end date of the land'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ äåÇíÉ ÇáÚÞÏ ÃßÈÑ ãä ÊÇÑíÎ äåÇíÉ ÇáÅÓÊËãÇÑ ááÈäÇÁ','Contract expiry date is larger than investment end date of the building'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ äåÇíÉ ÇáÚÞÏ ÇáÓÇÈÞ','Previous contract ending date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ äåÇíÉ ÇáÚÞÏ ÎÇÑÌ ãÌÇá ÊÇÑíÎ ÈÏÇíÉ æäåÇíÉ ÇáãÏÉ','Contract end date outside of starting and ending period'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎ äåÇíÉ ÇáãÏÉ','End duration date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇÑíÎå','History'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇßÏ ãä ÅÏÎÇá ÇáÍÓÇÈ','Make sure that account name is correct'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇßÏ ãä ÅÏÎÇá ÇáãÈÇáÛ Ýí ÇáÞáã ','Make sure you enter value in the line'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇßÏ ãä ÅÚÏÇÏÇÊ ÇáÅÊÕÇá','Check connection settings'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇßÏ ãä ÇÏÎÇá ÚÏÏ ÇáÇíÇã ÈÔßá ÕÍíÍ','Enter correctly number of days'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇßÏ ãä ÕÍÉ ÇáãÓÇÑ','Make sure the correct path'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇßÏ ãä ÕÍÉ ÇáãÓÇÑ : ','Check the path'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇßÏ ãä ÕÍÉ ÇáãÓÇÑ ÇáÌÏíÏ ÇáãÍÏÏ','Make sure of the new path specified'

insert into [StrSource] 
([Ar],[En])
select  'ÊÇßíÏ ßáãÉ ÇáãÑæÑ','Verify password'

insert into [StrSource] 
([Ar],[En])
select  'ÊÈÏáÇÊ ÃÓÚÇÑ ÅíÌÇÑÇÊ ÇáÔÞÞ ','Flats rent changing'

insert into [StrSource] 
([Ar],[En])
select  'ÊÈÏáÇÊ ÃÓÚÇÑ ÇáÔÞÞ','Flats price changing'

insert into [StrSource] 
([Ar],[En])
select  'ÊÈÏáÇÊ ÍÑÇÓ ÇáÈäÇÁ','Alterations of wachtmen'

insert into [StrSource] 
([Ar],[En])
select  'ÊÈÏíá ÃÓÚÇÑ ÅíÌÇÑ ÇáÔÞÞ','Change flat rental prices'

insert into [StrSource] 
([Ar],[En])
select  'ÊÈÏíá ÃÓÚÇÑ ÈíÚ ÇáÔÞÞ','Flat selling update'

insert into [StrSource] 
([Ar],[En])
select  'ÊÈÏíá ÇáÃÓÚÇÑ','Pricing update'

insert into [StrSource] 
([Ar],[En])
select  'ÊÈÏíá ÇáÅíÌÇÑ','Rental update'

insert into [StrSource] 
([Ar],[En])
select  'ÊÈæíÈ ÌÏíÏ','New tab'

insert into [StrSource] 
([Ar],[En])
select  'ÊÊßæä åÐå ÇáÃÑÖ ãä ÊÌãíÚ ÃßËÑ ãä ÈØÇÞÉ ÃÑÖ æåí','This land consists of assembling more than one land, It''s:'

insert into [StrSource] 
([Ar],[En])
select  'ÊÊßæä åÐå ÇáÔÞÉ ãä ÊÌãíÚ ÃßËÑ ãä ÔÞÉ','This flat consists of assembling more than one flat'

insert into [StrSource] 
([Ar],[En])
select  'ÊÊã ÇáÚãáíÉ ÈäÌÇÍ','The process will be success'

insert into [StrSource] 
([Ar],[En])
select  'Çáì ãÑßÒ ÇáßáÝÉ','To cost center'

insert into [StrSource] 
([Ar],[En])
select  'ÇáíÈÇä','Notes '

insert into [StrSource] 
([Ar],[En])
select  'Çáíæã ÇáÍÇáí','Current date'

insert into [StrSource] 
([Ar],[En])
select  'ÇäÊÈå','Warning'

insert into [StrSource] 
([Ar],[En])
select  'ÇäÊÈå !  ','Warning !'

insert into [StrSource] 
([Ar],[En])
select  'ÇäÊÈåäæÚ ÇáÈØÇÞÉ: ÒÈæä [0] - ãæÑÏ [1]ÇáäæÚ: ÔÑßÉ [0] - ÝÑÏ [1]ãÓÊæì ÇáÓÑíÉ: ÈÏæä [0] - ãäÎÝÖ [1] - ãÊæÓØ [2] - ÚÇáí[3] - ÎÇÕ [4]','Notice: card type: Customer (0) - Supplier (1) Type: Company (0) - Person (1) Security level: Without (0) - Low (1) - Intermediate (2) - High (3) - Special (4)'

insert into [StrSource] 
([Ar],[En])
select  'ÇäÊåÇÁ ÇáÅÞÇãÉ','Residence expiry'

insert into [StrSource] 
([Ar],[En])
select  'ÇäÊåÇÁ ÇáÚÞÏ','End of contract'

insert into [StrSource] 
([Ar],[En])
select  'ÇäÊåÇÁ ÇáåæíÉ','ID expiry'

insert into [StrSource] 
([Ar],[En])
select  'ÇäÊåÇÁ ÌæÇÒ ÇáÓÝÑ','Passport expiry'

insert into [StrSource] 
([Ar],[En])
select  'ÇäÔÇÁ ÞíÏ','Create journal entry'

insert into [StrSource] 
([Ar],[En])
select  'ÇäÞØÚ ÇáÇÊÕÇá','Connection lost'

insert into [StrSource] 
([Ar],[En])
select  'ÇäãÇØ ÇáØáÈíÇÊ','Orders Patterns'

insert into [StrSource] 
([Ar],[En])
select  'ÇäãÇØ ÇáÝæÇÊíÑ','Bills Patterns'

insert into [StrSource] 
([Ar],[En])
select  'ÇíÌÇÑ','Rent'

insert into [StrSource] 
([Ar],[En])
select  'ÇíÑÇÏ Çáíæã','Daily income'

insert into [StrSource] 
([Ar],[En])
select  'ÇíÑÇÏÇÊ ÇáÊÃÌíÑ ÇáãÍÞÞÉ','Rental income earned'

insert into [StrSource] 
([Ar],[En])
select  'Çíãíá','Email'

insert into [StrSource] 
([Ar],[En])
select  'ÈÇÆÚ','Vendor'

insert into [StrSource] 
([Ar],[En])
select  'ÈÇÑßæÏ','Barcode'

insert into [StrSource] 
([Ar],[En])
select  'ÈÇÞí ááÊÍÕíá','Rest of collection'

insert into [StrSource] 
([Ar],[En])
select  'ÈÊÇÑíÎ','On the date'

insert into [StrSource] 
([Ar],[En])
select  'ÈÊßáíÝ ãä','Commissioned by'

insert into [StrSource] 
([Ar],[En])
select  'ÈÍË','Search'

insert into [StrSource] 
([Ar],[En])
select  'ÈÏÃ ÇáÊÑÞíã','Start numbering'

insert into [StrSource] 
([Ar],[En])
select  'ÈÏÃ ÇáÚÞÏ','Contract start'

insert into [StrSource] 
([Ar],[En])
select  'ÈÏÇ ÅÚÇÏÉ ÇáÊÑÞíã','Start renumbering process'

insert into [StrSource] 
([Ar],[En])
select  'ÈÏÇíÉ ÃãÑ ÇáÕíÇäÉ','Maintenance order start'

insert into [StrSource] 
([Ar],[En])
select  'ÈÏÇíÉ ÇáÚÞÏ','Contract start date'

insert into [StrSource] 
([Ar],[En])
select  'ÈÏÇíÉ ÇáãÏÉ','Begining date'

insert into [StrSource] 
([Ar],[En])
select  'ÈÏá ÅÓã ÇáÒÈæä','Cutomer Name'

insert into [StrSource] 
([Ar],[En])
select  'ÈÏá ÅÓã ÇáÒÈæä [A]','Customer Name [A]'

insert into [StrSource] 
([Ar],[En])
select  'ÈÏæä','Without'

insert into [StrSource] 
([Ar],[En])
select  'ÈÏæä ÅåÊáÇß','Without depreciation'

insert into [StrSource] 
([Ar],[En])
select  'ÈÏæä ÇÞÓÇØ','without installments'

insert into [StrSource] 
([Ar],[En])
select  'ÈÏæä ÊÇÑíÎ ÅÓÊÍÞÇÞ','without due date'

insert into [StrSource] 
([Ar],[En])
select  'ÈÏæä ÊÞÑíÈ','No rounding'

insert into [StrSource] 
([Ar],[En])
select  'ÈÏæä ÏÝÚÉ Ãæáì','Without downpayment'

insert into [StrSource] 
([Ar],[En])
select  'ÈÏæä ÚÞÏ','Without contract'

insert into [StrSource] 
([Ar],[En])
select  'ÈÏæä ãÓÇÍÉ','Without an area'

insert into [StrSource] 
([Ar],[En])
select  'ÈÑÇÁÉ ÇáÐãÉ','Clearance'

insert into [StrSource] 
([Ar],[En])
select  'ÈÑíÏ ÇáßÊÑæäí','Email Address'

insert into [StrSource] 
([Ar],[En])
select  'ÈÓÈÈ ãÓÊæì ÇáÓãÇÍíÉ','Because of permission level'

insert into [StrSource] 
([Ar],[En])
select  'ÈÕíÛÉ','Extension'

insert into [StrSource] 
([Ar],[En])
select  'ÈÖÇÚÉ Çæá ÇáãÏÉ','First period inventory'

insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÇÊ','Cards..'

insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÇÊ ÇáÍÓÇÈÇÊ ÇáÝÇÑÛÉ','Empty accounts cards'

insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÇÊ ÇáÒÈÇÆä ÇáãÑÕÏÉ','Balanced customer cards'

insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÃÑÖ','Land card'

insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÃÑÖ (ÚÑæÖ)','Land card (Offers)'

insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÃÑÖ æ  ÝíáÇ','Land & Villa card'

insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÃÕá','Asset card'

insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÇáÍÓÇÈ','Account card'

insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÇáÏÚæì','Lawsuit card'

insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÇáÒÈæä','Customer card'

insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÇáÚÞÇÑ','Property card'

insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÇáÚãáÉ','Currency card'

insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÇáÝÑÚ','Branch card'

insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÇáãÇÏÉ','Material card'

insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÇáãÌãæÚÉ','Group card'

insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÇáãÍÝÙÉ','Briefcase card'

insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÇáãÍÝÙÉ ÇáÚÞÇÑíÉ','Realty briefcase card'

insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÇáãÓÊæÏÚ','Store card'

insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÈÇÆÚ','Salesman card'

insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÈäÇÁ','Building card'

insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÈäÇíÉ','Building Card'

insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÈäÇíÉ (ÚÑæÖ)','Building card (Offers)'

insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÊÌãíÚíÉ','Assemblage card'

insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÊÐßíÑ','Card reminder'

insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÊÕäíÝ','Card catery'

insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÍÇÑÓ ÇáÈäÇÁ','Watchman card'

insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÍÌÒ ÚÞÇÑ','Property booking card'

insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÍÓÇÈ','Account Card'

insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÒÈæä','Client Card'

insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÒÈæä / ãæÑÏ','Customer / Supplier card'

insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÔÞÉ','Flat card'

insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÔÞÉ (ÚÑæÖ)','Flat card (Offers)'

insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ Ôßæì','Complaint card'

insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÚÇãá ÇáÕíÇäÉ','Maintenance worker card'

insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÝÑÚ','Branch Card'

insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÝíáÇ','Villa card'

insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ÝíáÇ (ÚÑæÖ)','Villa card (Offers)'

insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ãÄÌÑ','Lessor card'

insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ãÃÌÑ æ ÈÇÆÚ','Lessor & Sales man card'

insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ãÄÌÑ æÈÇÆÚ','Lessor and sales man card'

insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ãÇÏÉ','Item Card'

insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ãÇáß','Owner card'

insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ãÌãæÚÉ','Group Card'

insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ãÍá','Shop card'

insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ãÍá (ÚÑæÖ)','Shop card (Offers)'

insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ãÍá æ ãæÞÝ','Shop & Parking Card'

insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ãÏíäÉ','City card'

insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ãÑßÒ ÇáßáÝÉ','Cost center card'

insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ãÓÊÃÌÑ / ãæÑÏ','Customer / tenant card'

insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ãÓÊæÏÚ','Store Card'

insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ãäØÞÉ','Area card'

insert into [StrSource] 
([Ar],[En])
select  'ÈØÇÞÉ ãæÞÝ','Parking card'

insert into [StrSource] 
([Ar],[En])
select  'ÈÛÖ ÇáäÙÑ Úä ÇáÎíÇÑÇÊ ÇáãÍÏÏÉ','Regardless of the specific options'

insert into [StrSource] 
([Ar],[En])
select  'ÈÞí / íæã','Day / Left'

insert into [StrSource] 
([Ar],[En])
select  'ÈÞí áÅäÊåÇÁ ÇáÚÞÏ','Time of contract expiry'

insert into [StrSource] 
([Ar],[En])
select  'ÈÞí ááÅÎáÇÁ','Vacating In'

insert into [StrSource] 
([Ar],[En])
select  'ÈäÇíÉ','Building'

insert into [StrSource] 
([Ar],[En])
select  'ÈäÊ åÇæÓ','Bent house'

insert into [StrSource] 
([Ar],[En])
select  'ÈíÇä ÇáÃÑÖ','Land details'

insert into [StrSource] 
([Ar],[En])
select  'ÈíÇä ÇáÅíÕÇá','Receipt details'

insert into [StrSource] 
([Ar],[En])
select  'ÈíÇä ÇáÍÓÇÈ','Account notes'

insert into [StrSource] 
([Ar],[En])
select  'ÈíÇä ÇáÍÓÇÈ ÇáãÞÇÈá','Obverse account notes'

insert into [StrSource] 
([Ar],[En])
select  'ÈíÇä ÇáÍÓÇÈ ÇáãÞÇÈá ãä ÈíÇä ÇáÓäÏ','Obverse account details from entry details'

insert into [StrSource] 
([Ar],[En])
select  'ÈíÇä ÇáÏÝÚÉ ÇáÃæáì','First payment details'

insert into [StrSource] 
([Ar],[En])
select  'ÈíÇä ÇáÏÝÚÉ ÇáÃæáì áÇÊíäí','First payment latin details'

insert into [StrSource] 
([Ar],[En])
select  'ÈíÇä ÇáÒíÇÑÉ','Visit details'

insert into [StrSource] 
([Ar],[En])
select  'ÈíÇä ÇáÓäÏ','Journal entry details'

insert into [StrSource] 
([Ar],[En])
select  'ÈíÇä ÇáÚÞÇÑ','Property details'

insert into [StrSource] 
([Ar],[En])
select  'ÈíÇä ÇáÚÞÏ','Contract Notes'

insert into [StrSource] 
([Ar],[En])
select  'ÈíÇä ÇáÚÞÏ áÇÊíäí','Contract latin details'

insert into [StrSource] 
([Ar],[En])
select  'ÈíÇä ÇáÚãáíÇÊ','Operations details'

insert into [StrSource] 
([Ar],[En])
select  'ÈíÇä ÇáÝÇÊæÑÉ','Bill details'

insert into [StrSource] 
([Ar],[En])
select  'ÈíÇä ÇáÝíáÇ','Villa details'

insert into [StrSource] 
([Ar],[En])
select  'ÈíÇä ÇáÞáã','Line details'

insert into [StrSource] 
([Ar],[En])
select  'ÈíÇä ÇáÞíÏ','Entry details'

insert into [StrSource] 
([Ar],[En])
select  'ÈíÇä ÇáæÑÞÉ','Note details'

insert into [StrSource] 
([Ar],[En])
select  'ÈíÇä ÊäÝíÐ ÇáÕíÇäÉ','Implementation maintenance details'

insert into [StrSource] 
([Ar],[En])
select  'ÈíÇä ÚÏã ÊäÝíÐ ÇáÕíÇäÉ','Non-implementation maintenance details'

insert into [StrSource] 
([Ar],[En])
select  'ÈíÇä ãÚÇáÌÉ ÇáÅÑÌÇÚ','Return processing details'

insert into [StrSource] 
([Ar],[En])
select  'ÈíÇäÇÊ ÅÖÇÝíÉ','Extra Information'

insert into [StrSource] 
([Ar],[En])
select  'ÈíÇäÇÊ ÇáÔÞÉ','Flat details'

insert into [StrSource] 
([Ar],[En])
select  'ÈíÇäÇÊ ÇáÔßæì','Complaint details'

insert into [StrSource] 
([Ar],[En])
select  'ÈíÇäÇÊ ÇáÚÞÇÑ','Property information'

insert into [StrSource] 
([Ar],[En])
select  'ÈíÇäÇÊ ÇáÝíáÇ ÇáÎÇÑÌíÉ','Villa exterior details'

insert into [StrSource] 
([Ar],[En])
select  'ÈíÇäÇÊ ÇáÝíáÇ ÇáÏÇÎáíÉ','Villa interior details'

insert into [StrSource] 
([Ar],[En])
select  'ÈíÇäÇÊ ÇáÞæÇÆã ÇáÅÝÊÑÇÖíÉ','List default data'

insert into [StrSource] 
([Ar],[En])
select  'ÈíÇäÇÊ ÇáßÝíá','Sponser data'

insert into [StrSource] 
([Ar],[En])
select  'ÈíÇäÇÊ ÇáßÝíá áÇÊíäí','Latin Sponser data'

insert into [StrSource] 
([Ar],[En])
select  'ÈíÇäÇÊ ÇáãáßíÉ','Ownership information'

insert into [StrSource] 
([Ar],[En])
select  'ÈíÇäÇÊ ÇáãæÞÝ','Parking data'

insert into [StrSource] 
([Ar],[En])
select  'ÈíÇäÇÊ ÓÎÕíÉ áÇÊíäí','Latin personal info'

insert into [StrSource] 
([Ar],[En])
select  'ÈíÇäÇÊ ÔÎÕíÉ','Personal informations'

insert into [StrSource] 
([Ar],[En])
select  'ÈíÇäÇÊ ÔÎÕíÉ 1','Peronal data 1'

insert into [StrSource] 
([Ar],[En])
select  'ÈíÇäÇÊ ÔÎÕíÉ 2','Peronal data 2'

insert into [StrSource] 
([Ar],[En])
select  'ÈíÇäÇÊ ÔÎÕíÉ áÇÊíäí','Latin personal information'

insert into [StrSource] 
([Ar],[En])
select  'ÈíÚ','Sell'

insert into [StrSource] 
([Ar],[En])
select  'ÈíÚ ÔÞÉ','Flat Selling'

insert into [StrSource] 
([Ar],[En])
select  'ÈíÚ ãÍá','Shop Selling'

insert into [StrSource] 
([Ar],[En])
select  'Èíä','Between'

insert into [StrSource] 
([Ar],[En])
select  'ÊÃËÑ Úáì ÊÓÚíÑ ÇáãæÇÏ','Effect materials pricing'

insert into [StrSource] 
([Ar],[En])
select  'ÊÃßÏ ãä ÅÏÎÇá ÇáÊÇÑíÎ ÈÔßá ÕÍíÍ','Make sure you enter the date correctly'

insert into [StrSource] 
([Ar],[En])
select  'ÊÃßÏ ãä ÅÏÎÇá ÇáÑãÒ ÃÑÞÇã ÝÞØ','Be sure to enter the code numbers only'

insert into [StrSource] 
([Ar],[En])
select  'ÊÃßÏ ãä ÅÏÎÇá ÇáÑãÒ ãÍÇÑÝ ÝÞØ','Make sure you enter code characters only'

insert into [StrSource] 
([Ar],[En])
select  'ÊÃßÏ ãä ÅÏÎÇá ÇáãÈÇáÛ ÈÔßá ÕÍíÍ','Make sure you enter the amounts correctly'

insert into [StrSource] 
([Ar],[En])
select  'ÊÃßÏ ãä ÅÏÎÇá ÇáäÓÈ','Make sure to enter percentages'

insert into [StrSource] 
([Ar],[En])
select  'ÊÃßÏ ãä Ãäß áÇ ÊÖíÝ ÔÞÞ ãßÑÑÉ áäÝÓ ÇáÈäÇÁ','Make sure you do not add duplicate flat to the same building'

insert into [StrSource] 
([Ar],[En])
select  'ÊÃßÏ ãä Ãäß áÇ ÊÖíÝ ãÓÊæÏÚÇÊ ãßÑÑÉ áäÝÓ ÇáÈäÇÁ','Make sure you do not add duplicate warehouses for the same building'

insert into [StrSource] 
([Ar],[En])
select  'ÊÃßÏ ãä ÊÇÑíÎ ÇáÅäåÇÁ','Check termination date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÃßÏ ãä ÊæÒíÚ ÇáÞíã ÈÔßá ÕÍíÍ','Make sure the distribution of values properly'

insert into [StrSource] 
([Ar],[En])
select  'ÊÃßÏ ãä ÕÍÉ ãÓÇÑ ÞÇÚÏÉ ÇáÈíÇäÇÊ : ','Make sure the database path:'

insert into [StrSource] 
([Ar],[En])
select  'ÊÃßÏ ãä ßáãÉ ÇáãÑæÑ','Check the password'

insert into [StrSource] 
([Ar],[En])
select  'ÊÃßÏ ãä æÌæÏ ÇáÈÑäÇãÌ','Make sure the program is exist'

insert into [StrSource] 
([Ar],[En])
select  'ÊÃãíä ÇáÚÞÏ ÇáÍÇáí','Current contract deposit'

insert into [StrSource] 
([Ar],[En])
select  'ÊÃãíä ÇáÚÞÏ ÇáÓÇÈÞ','Previous contract deposit'

insert into [StrSource] 
([Ar],[En])
select  'ÊÃãíä ßåÑÈÇÁ','Electicity deposit'

insert into [StrSource] 
([Ar],[En])
select  'ÊÃãíäÇÊ ÇáÚÞæÏ','Contracts Insurance'

insert into [StrSource] 
([Ar],[En])
select  'ÊËÈíÊ ÇáÅÕÏÇÑ','Install version'

insert into [StrSource] 
([Ar],[En])
select  'ÊËÈíÊ ÇáÊæÕíÝ','Install description'

insert into [StrSource] 
([Ar],[En])
select  'ÊËÈíÊ ÇáÚãáíÇÊ','Fixed operations'

insert into [StrSource] 
([Ar],[En])
select  'ÊÌÇåá','Ignore'

insert into [StrSource] 
([Ar],[En])
select  'ÊÌÇåá Çáßá','Ignore all'

insert into [StrSource] 
([Ar],[En])
select  'ÊÌÇæÒÊ ÇáãÇÏÉ','Material exceeded'

insert into [StrSource] 
([Ar],[En])
select  'ÊÌÇæÒÊ äÓÈÉ ÇáÍÓã ÇáãÓãæÍ ÈåÇ ','Exceeded allowed discount rate'

insert into [StrSource] 
([Ar],[En])
select  'ÊÌÏíÏ','Renewal'

insert into [StrSource] 
([Ar],[En])
select  'ÊÌÏíÏ ÇáÚÞÏ','Contract renewal'

insert into [StrSource] 
([Ar],[En])
select  'ÊÌÏíÏ ÇáÚÞæÏ ÇáãÍÏÏÉ','Renew selected contracts'

insert into [StrSource] 
([Ar],[En])
select  'ÊÌÏíÏ ÚÞæÏ ÇáÃÑÇÖí æÇáÝáá','Renew lands and villas contract'

insert into [StrSource] 
([Ar],[En])
select  'ÊÌÏíÏ ÚÞæÏ ÇáÔÞÞ æÇáãÍáÇÊ','Renew flats and shops contract'

insert into [StrSource] 
([Ar],[En])
select  'ÊÌÏíÏ ÚÞæÏ ÇáãæÇÞÝ','Renew parking contract'

insert into [StrSource] 
([Ar],[En])
select  'ÊÌãíÚ / ÊÝÕíá','Assembled / Detailed'

insert into [StrSource] 
([Ar],[En])
select  'ÊÌãíÚ ÃÞáÇã ÇáÞíæÏ','Collapse lines Entries'

insert into [StrSource] 
([Ar],[En])
select  'ÊÌãíÚ ÇáÍÓÇÈÇÊ','Assemble accounts'

insert into [StrSource] 
([Ar],[En])
select  'ÊÌãíÚ ÇáãáÝÇÊ','Assembling files'

insert into [StrSource] 
([Ar],[En])
select  'ÊÌãíÚ ÍÓÈ ÇáÇÕäÇÝ','Group by catery'

insert into [StrSource] 
([Ar],[En])
select  'ÊÌãíÚ ÍÓÈ ÇáÊÕäíÝ','Grouped by Catery'

insert into [StrSource] 
([Ar],[En])
select  'ÊÌãíÚ ãáÝÇÊ ÇáÈØÇÞÉ','Collecting card files'

insert into [StrSource] 
([Ar],[En])
select  'ÊÌãíÚí','Assembly'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍÏíË','Update'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍÏíË ÇÓÚÇÑ ÇíÌÇÑ ÇáÔÞÞ','Update Flat rental prices'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍÏíË ÈíÇäÇÊ ÇáÑÓæã ááÚÞÏ','Update contract fees'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍÏíË ÊáÞÇÆí','Auto-Update'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍÏíË äÓÎÉ','Version update'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍÏíÏ','Select'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍÏíÏ Çáßá','Check all'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍÏíÏ ßá ÇáÎíÇÑÇÊ','Select all'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍÑíÑ ÇáÔßæì','Complaint issue date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍÑíÑ ÇáÚÞÏ','Contract issue'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍÑíß ãÑßÒ ÇáßáÝÉ ÏÇÆä','Cost center belong to credits account'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍÑíß ãÑßÒ ÇáßáÝÉ Ýí ÇáÍÓÇÈ ÇáÏÇÆä','Move the cost center with the credits account'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍÑíß ãÑßÒ ÇáßáÝÉ Ýí ÇáÍÓÇÈ ÇáãÏíä','Cost center belong to debits account'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍÑíß ãÑßÒ ÇáßáÝÉ Ýí ÇáÚÞæÏ','Cost center belong to contracts'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍÑíß ãÑßÒ ÇáßáÝÉ Ýí ÇáÚãæáÉ','Cost center belong to commission account'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍÑíß ãÑßÒ ÇáßáÝÉ Ýí ÇáÚãæáÉ Ýí ÇáÏÇÆä','Cost center belong to commission credit account'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍÑíß ãÑßÒ ÇáßáÝÉ Ýí ÇáÚãæáÉ Ýí ÇáãÏíä','Cost center belong to commission debit account'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍÑíß ãÑßÒ ÇáßáÝÉ ãÚ ÅíÑÇÏ ÇáÊÃãíä','Cost center belong to deposit account'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍÑíß ãÑßÒ ÇáßáÝÉ ãÚ ÅíÑÇÏ ÇáÑÓæã ÇáÃÎÑì','Cost center belong to other fees account'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍÑíß ãÑßÒ ÇáßáÝÉ ãÚ ÅíÑÇÏ ÊÕÏíÞ ÇáÚÞÏ','Cost center belong to contract registration account'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍÑíß ãÑßÒ ÇáßáÝÉ ãÚ ÅíÑÇÏ ÓÚÑ ÇáÚÞÏ','Cost center belong to contract price account'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍÑíß ãÑßÒ ÇáßáÝÉ ãÚ ÅíÑÇÏÇÊ ÅäåÇÁ ÇáÚÞÏ ','Cost center belong to contract termination account'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍÑíß ãÑßÒ ÇáßáÝÉ ãÚ ÇáÅíÑÇÏ','Move cost center with revenue account'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍÑíß ãÑßÒ ÇáßáÝÉ ãÚ ÇáÍÓÇÈ ÇáÇÝÊÑÇÖí','Cost center belong to default account'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍÑíß ãÑßÒ ÇáßáÝÉ ãÚ ÇáÍÓã ÇáãßÊÓÈ','Move cost center with earned discount'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍÑíß ãÑßÒ ÇáßáÝÉ ãÚ ÇáÍÓã ÇáããäæÍ','Cost center belong to commission discount'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍÑíß ãÑßÒ ÇáßáÝÉ ãÚ ÇáÚãæáÉ ãä ÇáÚãíá','Cost center belong to commission client account'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍÑíß ãÑßÒ ÇáßáÝÉ ãÚ ÇáÚãæáÉ ãä ÕÇÍÈ ÇáÚÞÇÑ','Cost center belong to commission owner account'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍÑíß ãÑßÒ ÇáßáÝÉ ãÚ ÇáãÓÊÃÌÑ','Cost center belong to tenant account'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍÑíß ãÑßÒ ÇáßáÝÉ ãÚ ÇáãÕÇÑíÝ','Move cost center with expenses'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍÑíß ãÑßÒ ÇáßáÝÉ ãÚ ÛÑÇãÇÊ ÅäåÇÁ ÇáÚÞÏ','Cost center belong to contract termination fees account'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍÕíá','Collect'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍÕíá ÇáÔíß','cheque collection'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍÕíá ÌÒÆí','Partial collection'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍãíá','Loading '

insert into [StrSource] 
([Ar],[En])
select  'ÊÍãíá ÇáÈíÇäÇÊ','Loading data'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍãíá ÇáÚãáÉ','Loading currency'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍãíá ÇáãßÊÈÇÊ ','Loading libraries '

insert into [StrSource] 
([Ar],[En])
select  'ÊÍãíá ÇáãßÊÈÇÊ ...','Install Laibraries ...'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍãíá ÇáãßÊÈÇÊ ÇáÍÓÇÈÇÊ ÇáãÝÖáÉ','Loading librariesFavorite accounts'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍãíá ÇáãáÝÇÊ ãä ÞÇÚÏÉ ÇáÈíÇäÇÊ','Load files from Database '

insert into [StrSource] 
([Ar],[En])
select  'ÊÍãíá ÇáãáÝÇÊ ãä ÞÇÚÏÉ ÇáÈíÇäÇÊ ...','Install Files from data base ...'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍãíá ÇáæËÇÆÞ ãä ÞÇÚÏÉ ÇáÈíÇäÇÊ Çáì ÇáÞÑÕ ÇáÕáÈ','Download documents from Database to the hard drive'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍãíá ÈíÇäÇÊ ÇáÈØÇÞÉ','Loading card information'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍãíá ÌÏæá ÇáÍÓÇÈÇÊ','Loading accounts table'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍãíá ÌÏæá ÇáÒÈÇÆä','Loading customers table'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍãíá ÌÏæá ÇáÔÞÞ','Loading units table'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍãíá ÌÏæá ãÑÇßÒ ÇáßáÝÉ','Loading jobcost table'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍãíá ãáÝÇÊ ÇáØÈÇÚÉ','load print files'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍãíá ãáÝÇÊ ÇáØÈÇÚÉ','Download print files'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍãíá ãáÝÇÊ ÇáØÈÇÚÉ\Bin\Rpt\Contract Rent Flat','Download print files\Bin\Rpt\Contract Rent Flat'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍãíá ãáÝÇÊ ÇáØÈÇÚÉ\Bin\Rpt\Receiving Check','Install Printing Files\Bin\Rpt\Receiving Check'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍãíá ãáÝÇÊ ÇáØÈÇÚÉ\Bin\Rpt\Receiving Entry','Install Printing Files\Bin\Rpt\Receiving Entry'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍãíá ãáÝÇÊ ÇáØÈÇÚÉD:\ÊÕÇãíã ÇáÚÞÇÑí\Al-Aqari\ÊÕÇãíã ÇáÚÞÇÑí\ÚÞæÏ ÇáÅíÌÇÑ','Download print filesD:\ÊÕÇãíã ÇáÚÞÇÑí\Al-Aqari\ÊÕÇãíã ÇáÚÞÇÑí\ÚÞæÏ ÇáÅíÌÇÑ'

insert into [StrSource] 
([Ar],[En])
select  'ÊÍæíá ÇááÛÉ   ','Change Language'

insert into [StrSource] 
([Ar],[En])
select  'ÊÎÕíÕ','Customize'

insert into [StrSource] 
([Ar],[En])
select  'ÊÎÕíÕ ÇáãÓÇÑ','Select path'

insert into [StrSource] 
([Ar],[En])
select  'ÊÎÕíÕ ãÌáÏ ÇáØÈÇÚÉ','Select printing folder'

insert into [StrSource] 
([Ar],[En])
select  'ÊÎÕíÕ ãÌáÏ ÇáØÈÇÚÉ...','Specify Printing floder...'

insert into [StrSource] 
([Ar],[En])
select  'ÊÎÕíÕ ãÌáÏ ÇáÞæÇáÈ','Customizable templates folder'

insert into [StrSource] 
([Ar],[En])
select  'ÊÎÕíÕ ãÌáÏ ááÈØÇÞÉ','Specify folder for card'

insert into [StrSource] 
([Ar],[En])
select  'ÊÎÕíÕ ãÌáÏ ááäãØ','Specify folder for type'

insert into [StrSource] 
([Ar],[En])
select  'ÊÏÞíÞ','Check'

insert into [StrSource] 
([Ar],[En])
select  'ÊÏÞíÞ ÃÑÕÏÉ ÇáÍÓÇÈÇÊ','Checking account balances'

insert into [StrSource] 
([Ar],[En])
select  'ÊÏÞíÞ ÃÑÕÏÉ ÇáãæÇÏ','Checking quantity balance'

insert into [StrSource] 
([Ar],[En])
select  'ÊÏÞíÞ ÃÓÚÇÑ æÃÑÕÏÉ ÇáãæÇÏ','Check prices and material balances'

insert into [StrSource] 
([Ar],[En])
select  'ÊÏÞíÞ ÇáÃÓÚÇÑ','Checking prices'

insert into [StrSource] 
([Ar],[En])
select  'ÊÏÞíÞ ÇáÈíÇäÇÊ','Checking data'

insert into [StrSource] 
([Ar],[En])
select  'ÊÏÞíÞ ÇáÊÞÑíÑ','Auditing the report'

insert into [StrSource] 
([Ar],[En])
select  'ÊÏÞíÞ ÇáÓãÇÍíÉ','Checking permission'

insert into [StrSource] 
([Ar],[En])
select  'ÊÏæíÑ ÇáÚÞæÏ ÇáãäåíÉ ÇáÊí áåÇ ÇæÑÇÞ ãÇáíÉ áã ÊÍÕá','Move terminated contracts that has uncollected cheques'

insert into [StrSource] 
([Ar],[En])
select  'ÊÏæíÑ ÇáãáÝÇÊ','Closing File'

insert into [StrSource] 
([Ar],[En])
select  'ÊÏæíÑ ÈØÇÞÇÊ ÝÞØ','Close cards only'

insert into [StrSource] 
([Ar],[En])
select  'ÊÏæíÑ ßÇãá ÇáãáÝÇÊ ÍÊì ÊÇÑíÎ ÇÎÑ ÚãáíÉ','Close all Data until the last operation date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÏæíÑ ßÇãá ÇáãáÝÇÊ áÊÇÑíÎ ãÚíä ÈÏæä äÞá ÇáÚãáíÇÊ ÇááÇÍÞÉ','Close all data to specific date without move subsequent operations'

insert into [StrSource] 
([Ar],[En])
select  'ÊÏæíÑ ßÇãá ÇáãáÝÇÊ áÊÇÑíÎ ãÚíä ãÚ äÞá ÇáÚãáíÇÊ ÇááÇÍÞÉ','Close all data to specific date with move subsequent operations'

insert into [StrSource] 
([Ar],[En])
select  'ÊÏæíÑ áÛÇíÉ ÊÇÑíÎ','Close file to date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÐßíÑ ÚÇã áßá ÇáãÓÊÎÏãíä','Reminder for all users'

insert into [StrSource] 
([Ar],[En])
select  'ÊÐßíÑ ÝÞØ ááãÓÊÎÏã ÇáÍÇáí','Reminder for current user only'

insert into [StrSource] 
([Ar],[En])
select  'ÊÑÊíÈ ÊÕÇÚÏí','Ascending order'

insert into [StrSource] 
([Ar],[En])
select  'ÊÑÊíÈ ÊäÇÒáí','Descending order'

insert into [StrSource] 
([Ar],[En])
select  'ÊÑÌãÉ ÇáÑÓÇÆá','Message Translate'

insert into [StrSource] 
([Ar],[En])
select  'ÊÑÍá Çáì ÇáãÓÊæÏÚ','Post to store'

insert into [StrSource] 
([Ar],[En])
select  'ÊÑÍá Çáì ÇáãÓÊæÏÚ ÊáÞÇÆíÇð','Post to store automatically'

insert into [StrSource] 
([Ar],[En])
select  'ÊÑÍíá','Post'

insert into [StrSource] 
([Ar],[En])
select  'ÊÑÍíá ÇáÔíß','Post cheque'

insert into [StrSource] 
([Ar],[En])
select  'ÊÑÍíá ÇáÝÇÊæÑÉ','Post bill'

insert into [StrSource] 
([Ar],[En])
select  'ÊÑÍíá ÇáÞíÏ ÈÔßá Âáí','Post journal entry automatically'

insert into [StrSource] 
([Ar],[En])
select  'ÊÑÎíÕ ÇáÈáÏíÉ','Municipal licensing'

insert into [StrSource] 
([Ar],[En])
select  'ÊÑÎíÕ ÇáÈáÏíÉ Çáì ÊÇÑíÎ','Municipality license to date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÑÎíÕ ÇáÈáÏíÉ ãä ÊÇÑíÎ','Municipality license from date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÑÎíÕ ÇáÏÝÇÚ ÇáãÏäí','Civil defense licensing'

insert into [StrSource] 
([Ar],[En])
select  'ÊÑÎíÕ ÇáÏÝÇÚ ÇáãÏäí Çáì ÊÇÑíÎ','Civil defense license to date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÑÎíÕ ÇáÏÝÇÚ ÇáãÏäí ãä ÊÇÑíÎ','Civil defense license from date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÓÌíá ÇáÏÎæá','Login'

insert into [StrSource] 
([Ar],[En])
select  'ÊÓÌíá ÑÓæã ÇÊÍÇÏ ÇáãáÇß','Register owners Associations fees'

insert into [StrSource] 
([Ar],[En])
select  'ÊÓáÓá ÇáÒÈæä','Customer serial'

insert into [StrSource] 
([Ar],[En])
select  'ÊÓáÓá ÇáÔíß','Sequence cheque'

insert into [StrSource] 
([Ar],[En])
select  'ÊÓáíã ÇáÏÚæì','Lawsuit delivery'

insert into [StrSource] 
([Ar],[En])
select  'ÊÔßíá ÇáÈíÇä','Generate notes'

insert into [StrSource] 
([Ar],[En])
select  'ÊÔßíá ÇáÈíÇä ÚÑÈí','Arabic generate note'

insert into [StrSource] 
([Ar],[En])
select  'ÊÔßíá ÇáÈíÇä áÇÊíäí','Latin generate note'

insert into [StrSource] 
([Ar],[En])
select  'ÊÕÇÚÏí','Ascending'

insert into [StrSource] 
([Ar],[En])
select  'ÊÕÏíÑ csv ','Export csv '

insert into [StrSource] 
([Ar],[En])
select  'ÊÕÏíÑ csv ...','Export csv ...'

insert into [StrSource] 
([Ar],[En])
select  'ÊÕÏíÑ html','Export html'

insert into [StrSource] 
([Ar],[En])
select  'ÊÕÏíÑ html.....','Export html.....'

insert into [StrSource] 
([Ar],[En])
select  'ÊÕÏíÑ txt','Export to TXT'

insert into [StrSource] 
([Ar],[En])
select  'ÊÕÏíÑ xls','Export to xls'

insert into [StrSource] 
([Ar],[En])
select  'ÊÕÏíÑ xls ...','Export xls ...'

insert into [StrSource] 
([Ar],[En])
select  'ÊÕÏíÑ Åáì ÇßÓá','Export to excel file'

insert into [StrSource] 
([Ar],[En])
select  'ÊÕÏíÑ ÇßÓá ãÎÕÕ','Export customized Excel'

insert into [StrSource] 
([Ar],[En])
select  'ÊÕÏíÑ ÇáÌÏæá XLS','Export table to XLS'

insert into [StrSource] 
([Ar],[En])
select  'ÊÕÏíÞ ÇáÚÞÏ','Validate the contract'

insert into [StrSource] 
([Ar],[En])
select  'ÊÕÝíÉ','filtering'

insert into [StrSource] 
([Ar],[En])
select  'ÊÕÝíÉ ÇáÊÞÑíÑ ÍÓÈ','Filter report by'

insert into [StrSource] 
([Ar],[En])
select  'ÊÕãíã','Design'

insert into [StrSource] 
([Ar],[En])
select  'ÊÕãíã ØÈÇÚÉ ÇáÇíÕÇá','Design printed receipt'

insert into [StrSource] 
([Ar],[En])
select  'ÊÕäíÝ ÇáãäØÞÉ','Area classification'

insert into [StrSource] 
([Ar],[En])
select  'ÊÕäíÝÇÊ ÞæÇÆã ÇáÏÎá','Financial statements classification'

insert into [StrSource] 
([Ar],[En])
select  'ÊÖÇÑíÓ','Relief'

insert into [StrSource] 
([Ar],[En])
select  'ÊÖãíä ÇáÊÍÕíá ÇáÌÒÆí','Include partial collection'

insert into [StrSource] 
([Ar],[En])
select  'ÊÖãíä ÇáÎØæØ','Include fonts'

insert into [StrSource] 
([Ar],[En])
select  'ÊØÈíÞ','Apply'

insert into [StrSource] 
([Ar],[En])
select  'ÊØÈíÞ ÇáÊÛíÑÇÊ','Apply changes'

insert into [StrSource] 
([Ar],[En])
select  'ÊØÈíÞ ÇáãÊÍæáÇÊ','Apple variables'

insert into [StrSource] 
([Ar],[En])
select  'ÊØæíÑ ÚÞÇÑí','Real estate development'

insert into [StrSource] 
([Ar],[En])
select  'ÊÙåíÑ','Endorsement'

insert into [StrSource] 
([Ar],[En])
select  'ÊÙåíÑ ÇáÔíß','Cheque endorsement'

insert into [StrSource] 
([Ar],[En])
select  'ÊÚÇÏá ÇáÚãáÉ','Currency rate'

insert into [StrSource] 
([Ar],[En])
select  'ÊÚÏíá','Modify'

insert into [StrSource] 
([Ar],[En])
select  'ÊÚÏíá ÇáÈíÇäÇÊ','Modify data'

insert into [StrSource] 
([Ar],[En])
select  'ÊÚÏíá ÇáÊÍÕíá ÇáÌÒÆí','Modify partial collection'

insert into [StrSource] 
([Ar],[En])
select  'ÊÚÏíá ÇáÚÞæÏ ÍÓÈ ÇáÎíÇÑÇÊ ÇáÅÝÊÑÇÖíÉ','Modify contracts using default options'

insert into [StrSource] 
([Ar],[En])
select  'ÊÚÏíá ÇáãÑÇÌÚ','Modify checked'

insert into [StrSource] 
([Ar],[En])
select  'ÊÚÏíá ÈØÇÞÇÊ ÇáÒÈÇÆä','Modify Customer cards'

insert into [StrSource] 
([Ar],[En])
select  'ÊÚÏíá ÊÇÑíÎ ØÈÇÚÉ ÈÑÇÁÉ ÇáÐãÉ','Modify clearance print date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÚÏíá ÊÐßíÑÇÊ ÇáÛíÑ','Modify others reminders'

insert into [StrSource] 
([Ar],[En])
select  'ÊÚÏíá ÓÚÑ ÇáÚÞÏ','Modify contract price'

insert into [StrSource] 
([Ar],[En])
select  'ÊÚÏíá ÓÚÑ ÇáßáÝÉ ááÔÞÞ','Modify flat cost price'

insert into [StrSource] 
([Ar],[En])
select  'ÊÚÏíá ÕáÇÍíÇÊ ÇáÝÑæÚ','Edit branch permissions'

insert into [StrSource] 
([Ar],[En])
select  'ÊÚÏíá ÚÞæÏ ÇáÃÑÇÖí ÍÓÈ ÇáÅÚÏÇÏÇÊ ÇáÅÝÊÑÇÖíÉ','Modify land contracts using default options'

insert into [StrSource] 
([Ar],[En])
select  'ÊÚÏíá ÚÞæÏ ÇáãæÇÞÝ ÍÓÈ ÇáÅÚÏÇÏÇÊ ÇáÅÝÊÑÇÖíÉ','Modify parking contracts using default options'

insert into [StrSource] 
([Ar],[En])
select  'ÊÚÏíá ÞíãÉ ÛÑÇãÉ ÇáÊÃÎíÑ     ','Modify delay fee value'

insert into [StrSource] 
([Ar],[En])
select  'ÊÚÏíá ãæÇÕÝÇÊ ÇáÔÞÞ','Modify flats specification'

insert into [StrSource] 
([Ar],[En])
select  'ÊÚÏíá ãæÇÕÝÇÊ ÇáãÍáÇÊ','Modify shops specification'

insert into [StrSource] 
([Ar],[En])
select  'ÊÚÏíá ãæÇÕÝÇÊ ÇáãæÇÞÝ','Modify Parking Specifications'

insert into [StrSource] 
([Ar],[En])
select  'ÊÚÏíá äÓÈÉ ÇáÚãæáÉ','Modify commission'

insert into [StrSource] 
([Ar],[En])
select  'ÊÚÑíÝ ÇÚãÇá ÇáÕíÇäÉ','Maintenance work card'

insert into [StrSource] 
([Ar],[En])
select  'ÊÛíÑ ÃÓÚÇÑ ÇáÅíÌÇÑ','Change rental rates'

insert into [StrSource] 
([Ar],[En])
select  'ÊÛíÑ ÃÓÚÇÑ ÇáÈíÚ','Change sell rates'

insert into [StrSource] 
([Ar],[En])
select  'ÊÛíÑ ÇáÍÓÇÈ','Change account'

insert into [StrSource] 
([Ar],[En])
select  'ÊÛíÑ ÇáÓÚÑ 1','Update 1st Price'

insert into [StrSource] 
([Ar],[En])
select  'ÊÛíÑ ÇáÓÚÑ 2','Update 2nd Price'

insert into [StrSource] 
([Ar],[En])
select  'ÊÛíÑ ÇáÓÚÑ 3','Update 3rd Price'

insert into [StrSource] 
([Ar],[En])
select  'ÊÛíÑ ÓÚÑ ÇáÈíÚ','Change sell rate'

insert into [StrSource] 
([Ar],[En])
select  'ÊÛíÑ ãÓÇÑ ÇáãáÝÇÊ ','Change files path '

insert into [StrSource] 
([Ar],[En])
select  'ÊÛíÑ ãÓÇÑ ÇáãáÝÇÊ ...','Change the files path ...'

insert into [StrSource] 
([Ar],[En])
select  'ÊÛíÑ ãæÞÚ ÃÕá','Change asset location'

insert into [StrSource] 
([Ar],[En])
select  'ÊÛííÑ ÇáÍÓÇÈÇÊ','Change accounts'

insert into [StrSource] 
([Ar],[En])
select  'ÊÛííÑ ÇáãÓÊÎÏã','Change user'

insert into [StrSource] 
([Ar],[En])
select  'ÊÛííÑ Çáì ÓÚÑ','Update price to'

insert into [StrSource] 
([Ar],[En])
select  'ÊÛííÑ ßá ÓÚÑ','Update every price to'

insert into [StrSource] 
([Ar],[En])
select  'ÊÛííÑ ßáãÉ ÇáãÑæÑ','Change password'

insert into [StrSource] 
([Ar],[En])
select  'ÊÛííÑ ãÌáÏ ÇáØÈÇÚÉ','Change printing folder'

insert into [StrSource] 
([Ar],[En])
select  'ÊÛííÑ ãÓÇÑ ÇáãáÝÇÊ','Change files path'

insert into [StrSource] 
([Ar],[En])
select  'ÊÝÇÕíá  ÇáÚÞÏ','Contract Details'

insert into [StrSource] 
([Ar],[En])
select  'ÊÝÓíÑ ÇáäÊÇÆÌ ÇáãÑÌÚÉ','Meaning of return values'

insert into [StrSource] 
([Ar],[En])
select  'ÊÝÕíá ÇáãÓÊæÏÚÇÊ ','Stores details'

insert into [StrSource] 
([Ar],[En])
select  'ÊÝÕíáí 1','Detailed 1'

insert into [StrSource] 
([Ar],[En])
select  'ÊÝÕíáí 2','Detailed 2'

insert into [StrSource] 
([Ar],[En])
select  'ÊÝÕíáí 3','Detailed 3'

insert into [StrSource] 
([Ar],[En])
select  'ÊÝÕíáí 4','Detailed 4'

insert into [StrSource] 
([Ar],[En])
select  'ÊÝÚíá','Activate'

insert into [StrSource] 
([Ar],[En])
select  'ÊÝÚíá ÃäãÇØ ÇáÚÞæÏ','Active contract types'

insert into [StrSource] 
([Ar],[En])
select  'ÊÝÚíá ÇÑÔÝÉ ÇáãáÝÇÊ Öãä ÞÇÚÏÉ ÇáÈíÇäÇÊ','Activating archive files within the database '

insert into [StrSource] 
([Ar],[En])
select  'ÊÝÚíá ÇÑÔÝÉ ÇáãáÝÇÊ Öãä ÞÇÚÏÉ ÇáÈíÇäÇÊ ...','Activate archiving file through data base  ...'

insert into [StrSource] 
([Ar],[En])
select  'ÊÝÚíá ÇáÃÈäíÉ','Active buildings'

insert into [StrSource] 
([Ar],[En])
select  'ÊÝÚíá ÇáÊÇÑíÎ','Active date'

insert into [StrSource] 
([Ar],[En])
select  'ÊÝÚíá ÇáÑÞã','Active No'

insert into [StrSource] 
([Ar],[En])
select  'ÊÝÚíá ÇáÚãáíÇÊ ÇáÃÎÑì ááæÑÞÉ ÇáãÇáíÉ ÚäÏ ÇáÅÑÌÇÚ','Active others operations of the check when it is return'

insert into [StrSource] 
([Ar],[En])
select  'ÊÝÚíá ÇáÝÑæÚ','Activate Branch System'

insert into [StrSource] 
([Ar],[En])
select  'ÊÝÚíá ÍÓÇÈ ÇáÅíÑÇÏÇÊ ÇáÛíÑ ãÍÞÞÉ áäÝÓ ÇáÓäÉ ÇáãÇáíÉ','Active unrealized revenue account for same year'

insert into [StrSource] 
([Ar],[En])
select  'ÊÝÚíá ÍÝÙ ÇáãáÝÇÊ æÇáæËÇÆÞ æÇáÕæÑ  Ýí ÞÇÚÏÉ ÇáÈíÇäÇÊ','Activating save files, documents and images in the database'

insert into [StrSource] 
([Ar],[En])
select  'ÊÝÚíá ÕáÇÍíÇÊ ÇáÃÈäíÉ','Active buildings permission'

insert into [StrSource] 
([Ar],[En])
select  'ÊÝÚíá ãáÝ ÇáÊÓÌíá','Activate log file'

insert into [StrSource] 
([Ar],[En])
select  'ÊÝÚíá äÇÝÐÉ ÇáÊÓÌíá','Activate log window'

insert into [StrSource] 
([Ar],[En])
select  'ÊÝÚíá äÇÝÐÉ ÇáÊÓÌíá ãÚ ÇáÊÚÏíáÇÊ','Active log file with editing'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÇÑíÑ','Reports'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÇÑíÑ SMS','SMS Reports'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÇÑíÑ ÅÍÕÇÆíÉ','Statistical reports'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÇÑíÑ ÇáÇíÑÇÏÇÊ ','Revenue reports'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÇÑíÑ ÇáÍÑßÉ','Activity reports'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÇÑíÑ ÇáÚÑæÖ  ','Offers reports'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÇÑíÑ ÇáÚÞæÏ','Contract reports'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÇÑíÑ ÇáãÏíÑ','Managers Reports'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÇÑíÑ ÇáãÓÊæÏÚÇÊ   ','Stores report'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÇÑíÑ ÇáæÍÏÇÊ ÇáÚÞÇÑíÉ    ','Realty units reports'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÏíÑ ÞíãÉ ÇáÚÞÇÑ','Estimate property value'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÃÑÈÇÍ ÇáÔÞÞ','Flats revenue report'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÅÑÓÇá SMS','SMS send report'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÃæÇãÑ ÇáÕíÇäÉ','Maintenance orders report'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáÃÈäíÉ','Buildings report'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáÃÑÇÖí','Lands report'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáÃæÑÇÞ ÇáãÇáíÉ','Note papers report'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáÃæÑÇÞ ÇáãÇáíÉ ÇáãÓÊÍÞÉ','Due note papers report'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáÅíÑÇÏÇÊ ÇáãÍÞÞÉ','Revenues report'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáÇÈäíÉ','Building Reports '

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáÊÐßíÑ','Reminder report'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáÊÚÏíáÇÊ','Editing report'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáÏÚÇæì','Lawsuits report'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáÏÚÇæì ÇáÞÖÇÆíÉ','Lawsuit Report'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáÏÝÚÇÊ ÇáãÊÃÎÑÉ','Overdue payments report'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáÑÓÇÆá  SMS','SMS Report'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáÑÓÇÆá ÇáãÑÓáÉ','Snet SMS report'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáÒÈÇÆä','Customers report'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáÒíÇÑÉ','Visits report'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáÔÞÞ','Flat report'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáÔÞÞ ÇáãÄÌÑÉ æ ÛíÑ ÇáãÄÌÑÉ','Leased and non-leased flats report'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáÔÞÞ ÇáãÈÇÚÉ æ ÛíÑ ÇáãÈÇÚÉ','Sold and unsold flats report'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáÔÞÞ æ ÇáãÍáÇÊ    ','Flats and Shops report'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáÔÞÞ æ ÇáãÍáÇÊ  ÇáÛíÑ ãÄÌÑÉ','Non-leased flats and shops report'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáÔÞÞ æ ÇáãÍáÇÊ  ÇáãÄÌÑÉ','leased flats and shops report'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáÔÞÞ æ ÇáãÍáÇÊ  ÇáãÈÇÚÉ','Sold flats and shops report'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáÔÞÞ æ ÇáãÍáÇÊ  ÛíÑ ÇáãÈÇÚÉ','Non-sold flats and shops report'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáÔßÇæì','Complaints report'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáÔíßÇÊ','Cheque Report'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáÝáá','Villas report'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáãÍáÇÊ','Shops report'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáãæÇÞÝ','Parking report'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáãæÇÞÝ ÇáãÄÌÑÉ æ ÛíÑ ÇáãÄÌÑÉ','Leased and non-leased parking report'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÇáæÍÏÇÊ ÇáãÍÌæÒÉ','Reserved units report'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÈØÇÞÇÊ ÇáÊÐßíÑ','Remind cards report'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÊÃãíäÇÊ ÇáÚÞæÏ','Contracts deposit report'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÊÈÏáÇÊ ÃÓÚÇÑ ÅíÌÇÑÇÊ ÇáÔÞÞ','Changes report of flats rent pricing'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÊÈÏáÇÊ ÃÓÚÇÑ ÇáÔÞÞ','Changes report of flats pricing'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÊÈÏáÇÊ ÃÓÚÇÑ ÈíÚ ÇáÔÞÞ','Changes report of flats sell pricing'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÊÛíÑÇÊ ãæÇÞÚ ÇáÃÕæá','Change asset location report'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÌÑÏ ÇáÃÕæá','Assets inventory report'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÏæÑÉ ÇáÚÞÏ','Contract cycle report'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÒíÇÑÇÊ ÇáÕíÇäÉ','Maintenance visits report'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÔíßÇÊ ÇáÃÈäíÉ ÇáÓäæí','Cheque buildings annual report'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÚÑæÖ ÇáÃÈäíÉ','Buildings offers report'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÚÑæÖ ÇáÃÑÇÖí','Lands offers report'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÚÑæÖ ÇáÃÓÚÇÑ','Quotations Report'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÚÑæÖ ÇáÔÞÞ','Flats offers report'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÚÑæÖ ÇáÝáá','Villas offers report'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÚÑæÖ ÇáãÍáÇÊ','Shops offers report'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÚãáíÇÊ ÇáÃÕæá','Asset operations report'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ÝæÇÊíÑ ÇáßåÑÈÇÁ','Electricity bills report'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞÑíÑ ãÑÇßÒ ÇáßáÝÉ ÇáÊÞÇØÚí','Cost centers cross report'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞáíÕ ÍÌã ÞÇÚÏÉ ÇáÈíÇäÇÊ','Shrink database'

insert into [StrSource] 
([Ar],[En])
select  'ÊÞííã ÇáÃËÇË','Assess furniture'

insert into [StrSource] 
([Ar],[En])
select  'ÊßÈíÑ ÇáäæÇÝÐ','Maximize windows'

insert into [StrSource] 
([Ar],[En])
select  'ÊßÑÇÑ ÇáÍÇáÉ','Situation recurrence'

insert into [StrSource] 
([Ar],[En])
select  'ÊßáÝÉ ÇáÈäÇÁ','Building cost'

insert into [StrSource] 
([Ar],[En])
select  'ÊßáÝÉ ÇáÔÞÉ','Flats cost'

insert into [StrSource] 
([Ar],[En])
select  'ÊßíÝ','AC'

insert into [StrSource] 
([Ar],[En])
select  'Êã','Done'

insert into [StrSource] 
([Ar],[En])
select  'Êã  ÇÓÊáÇã ÇáÚÞÏ ÇáãæÞÚ ãä ÇáØÑÝíä','Signed contract has been received from both sides'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÃÎÐ ÂÎÑ äÓÎÉ ÅÍÊíÇØíÉ ãäÐ','Last backup was taken since'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÃÎÐ äÓÎÉ ÅÍÊíÇØíÉ ÈäÌÇÍ','Data backup successfully done'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÅÑÓÇá SMS','SMS was sent successfully'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÅÑÓÇá ÇáÑÓÇáÉ','Message has been sent'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÅÑÓÇá ÇáÚÞÏ Åáì ÇáÊÕÏíÞ','Contract sent to registration'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÅÓÊÈÏÇá :','Replaced data :'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÅÓÊÑÌÇÚ ÇáäÓÎÉ ÇáÅÍÊíÇØíÉ ÈäÌÇÍ','Data restore successfully done'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÅÓÊÑÏÇÏ ÇáÊÃãíäÇÊ','Deposits has been retrieved'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÅÓÊáÇã ÇáÚÞÏ ÇáãÕÏÞ ãä ÇáÒÈæä','Registered contract has been received from customer'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÅáÛÇÁ ãÑÇÌÚÉ ÇáÚÞÏ','Contract checking has been canceled'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÅäåÇÁ','Terminated'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÅäåÇÁ ÇáÏÚæì ÇáÞÖÇÆíÉ','Lawsuite termination on'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÅäåÇÁ ÇáÚÞÏ','Contract was terminated'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÇÓÊÑÏÇÏ ÇáÊÃãíä','Deposit has been returned'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÇÓÊáÇã ÇáÚÞÏ áÅÑÓÇáå ááÊÕÏíÞ','Contract has been received for send it to registration'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÇÓÊáÇã ÇáÚÞÏ ãä ÇáÊÕÏíÞ','Contract have been received from credence'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÇÓÊáÇã ÇáÚÞÏ ãä ÇáÒÈæä','Contract received from customer'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÇáÅÎáÇÁ','Evacuated'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÇáÅÑÓÇá','Sent'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÇáÅÑÓÇá ááÊÕÏíÞ','Sent to registration'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÇáÅÓÊÑÏÇÏ ãä ÇáÚãíá','Retrieved from customer'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÇáÅÓÊáÇã ãä ÇáÊÕÏíÞ','Received from registration'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÇáÅÓÊíÑÇÏ','Data has been imported'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÇáÅäÔÇÁ ãä ÞÈá ÇáãÓÊÎÏã: ','Created by User'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÇáÇÓÊáÇã','Received'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÇáÇíÏÇÚ','Deposited'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÇáÊÌÏíÏ','Has been renewal'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÇáÊÍæíá Çáì','Redirected to'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÇáÊÚÏíá Úáì åÐå ÇáÈíÇäÇÊ ãä ÞÈá ãÓÊÎÏã ÂÎÑ, ÓíÊã ÊÍÏíË ÇáÈíÇäÇÊ','Data has been modified by another user, the data will be updated'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÇáÊäÝíÐ','Implemented'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÊÌÏíÏ','Renewal has been done'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÊÍÏíË','Update done'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÊÍÏíË ÃÓÚÇÑ ','Prices have been updated'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÊÍÕíá ÇáÑÓæã ãÓÈÞÇ ãä ÎáÇá ÃãÑ ÞÈÖ','Fees has been collected by receipt order'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÊÓáíã ÇáÚÞÏ Åáì ÇáÚãíá','Contract delivered to customer'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÊÓáíã ÇáÚÞÏ ÇáÒÈæä','Contract has been delivered to customer'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÊÓáíã ÇáÚÞÏ ÇáãÕÏÞ ááÒÈæä','Registered contract has been delivered to customer'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÊÚÏíá : ','It has been modified'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÊÚÏíá ÅÓã ÇáÈÇÆÍ ãä ÞÈáß , åá ÊÑíÏ ÊÚÏíá ÅÓã ÇáÍÓÇÈ¿','Salesman name has been modified, do you want to modify the account name?'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÊÚÏíá ÅÓã ÇáÈäÇÁ ãä ÞÈáß , åá ÊÑíÏ ÊÚÏíá ÅÓã ÇáÍÓÇÈ¿','Building name has been modified by you, do you want to modify account name?'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÊÚÏíá ÅÓã ÇáÈäÇÁ ãä ÞÈáß , åá ÊÑíÏ ÊÚÏíá ÅÓã ãÑÇßÒ ÇáßáÝÉ ÇáãÑÊÈØÉ¿','Building name has been modified by you, do you want to modify cost center account name?'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÊÚÏíá ÅÓã ÇáÒÈæä ãä ÞÈáß , åá ÊÑíÏ ÊÚÏíá ÅÓã ÇáÍÓÇÈ¿','Customer name has been modified by you, do you want to modify account name?'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÊÚÏíá ÅÓã ÇáÒÈæä ãä ÞÈáß , åá ÊÑíÏ ÊÚÏíá ÅÓã ÍÓÇÈ ÇáÊÇãíäÇÊ','Customer name has been modified by you, do you want to modify deposit account name?'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÊÚÏíá ÇáÍÇáÉ ÈäÌÇÍ','Status has been modified successfully'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÊÚÏíá ÏÑÌÉ  ÇáÓÑíÉ áåÐÇ ÇáÍÓÇÈ, åá ÊÑíÏ ÊÚÏíá ÏÑÌÉ ÇáÓÑíÉ áÇÈäÇÆå¿','Security level has been modified for this account, do you want to change it for the sons?'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÊÚÏíá ÑÞã ÇáÔÞÉ åá ÊÑíÏ ÊÚÏíá ãÑßÒ ÇáßáÝÉ','Flat number has been changed, do you want to change cost center account name?'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÊÚÏíá ÑÞã ÇáãÍá åá ÊÑíÏ ÊÚÏíá ãÑßÒ ÇáßáÝÉ','Shop No has been modified do you want to modify cost center?'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÊÚÏíá ßáãÉ ÇáãÑæÑ ÈäÌÇÍ','Password was modified successfully'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÊÚÑíÝ ØÑíÞÉ ÍÓÇÈ áåÐå ÇáãÌãæÚÉ ','Calculation method has been defined for this group'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÊÛííÑ','Changes has been done'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÊÛííÑ ãßÇä ÇáÃÚãÏÉ åá ÊÑíÏ ÍÝÙ ÇáÊÛíÑÇÊ','Column places was changed ,Do you want to save changes?'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÊæËíÞ ÇáÚÞÏ','Contract registered'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÊæÞíÚ ÇáÚÞÏ ãä ÞÈá ÇáÒÈæä','The contract was signed by the customer'

insert into [StrSource] 
([Ar],[En])
select  'Êã ÊæÞíÚ ÇáÚÞÏ ãä ÞÈá ÇáãÇáß','The contract was signed by the owner'

insert into [StrSource] 
([Ar],[En])
select  'Êã ØÈÇÚÉ ÇáÚÞÏ','Contract printed'

insert into [StrSource] 
([Ar],[En])
select  'Êã ØÈÇÚÉ ÈÑÇÁÉ ÇáÐãÉ','Clearance Printed'

insert into [StrSource] 
([Ar],[En])
select  'Êã ØÈÇÚÉ æÑÞÉ ÊãÏíÏ','Extension paper printed'

insert into [StrSource] 
([Ar],[En])
select  'Êã ßÊÇÈÉ æ ÊæËíÞ ÇáÚÞÏ','Contract printed and authorized'

insert into [StrSource] 
([Ar],[En])
select  'Êã ãÑÇÌÚÉ ÇáÚÞÏ','Contract checking has been done'

insert into [StrSource] 
([Ar],[En])
select  'Êã ãÚÇáÌÉ ÇáÅÑÌÇÚ','Return was handled'

insert into [StrSource] 
([Ar],[En])
select  'Êã äÞá','Transfer has been done'

insert into [StrSource] 
([Ar],[En])
select  'Êã æÞÝ ÇáÊäÝíÐ','Execution stop on'

insert into [StrSource] 
([Ar],[En])
select  'ÊãÊ ÇáÚãáíÉ ÈäÌÇÍ','Operation successfully complete'

insert into [StrSource] 
([Ar],[En])
select  'ÊãÊ ÇáãÚÇáÌÉ','Processed'

insert into [StrSource] 
([Ar],[En])
select  'ÊãÊ ÚãáíÉ ÇáÊÏæíÑ ÈäÌÇÍ','Closing files process has successfully complete'

insert into [StrSource] 
([Ar],[En])
select  'ÊãÊ ÚãáíÉ ÇáÊÝÚíá','Activation has been applied'

insert into [StrSource] 
([Ar],[En])
select  'ÊãÊ ÚãáíÉ ÇáÕíÇäÉ','Maintenance done'

insert into [StrSource] 
([Ar],[En])
select  'ÊãÊ ÚãáíÉ ÇáÛÇÁ ÇáÊÝÚíá','Deactivation has been applied'

insert into [StrSource] 
([Ar],[En])
select  'Êãßäß åÐå ÇáÚãáíÉ ãä ÅÚÇÏÉ ÕíÇÛÉ ÇáÈíÇä áÌãíÚ ÇáÃæÑÇÞ ÇáãÇáíÉ ÇáãÍÏÏÉ','This process enables you to re-write details of selected checks'

insert into [StrSource] 
([Ar],[En])
select  'Êãßäß åÐå ÇáÚãáíÉ ãä ÅÚÇÏÉ ÕíÇÛÉ ÇáÈíÇä áÌãíÚ ÇáÃæÑÇÞ ÇáãÇáíÉ ÇáãÍÏÏÉ
åá ÊÑíÏ ÇáãÊÇÈÚÉ¿','This process enables you to re-write details of selected checks
Do you want to continue?'

insert into [StrSource] 
([Ar],[En])
select  'ÊäÇÒáí','Descending'

insert into [StrSource] 
([Ar],[En])
select  'ÊäÈíå ÇÓÊÍÞÇÞ ÇáÃæÑÇÞ ÇáãÇáíÉ ÇáãÏÝæÚÉ ÞÈá','Alert for due payble cheque before'

insert into [StrSource] 
([Ar],[En])
select  'ÊäÈíå ÇÓÊÍÞÇÞ ÇáÃæÑÇÞ ÇáãÇáíÉ ÇáãÞÈæÖÉ ÞÈá:','Alert for due receivable cheque before'

insert into [StrSource] 
([Ar],[En])
select  'ÊäÈíå ÇáæÍÏÇÊ ÇáÊí ÓíÊã ÅÎáÇÄåÇ ÞÈá','Alert for units will be vacated before'

insert into [StrSource] 
([Ar],[En])
select  'ÊäÈíå ÒíÇÑÇÊ ÇáÕíÇäÉ ÞÈá','Alert maintenance visits before'

insert into [StrSource] 
([Ar],[En])
select  'ÊäÈíå ÞÑÈ äåÇíÉ ÚÞÏ ÅíÌÇÑ ÞÈá','Alert for contracts expiry before'

insert into [StrSource] 
([Ar],[En])
select  'ÊäÈíå ááÅÓÊÍÞÇÞ ááÔíßÇÊ ÇáãÏÝæÚÉ ÞÈá','Alert for due payble cheques before:'

insert into [StrSource] 
([Ar],[En])
select  'ÊäÈíå ááÅÓÊÍÞÇÞ ááÔíßÇÊ ÇáãÞÈæÖÉ ÞÈá','Alert for due receivable cheques before:'

insert into [StrSource] 
([Ar],[En])
select  'ÊäÈíå äåÇíÉ ÚÞÏ ÇáÅíÌÇÑ ÞÈá','Alert for contracts expiry before:'

insert into [StrSource] 
([Ar],[En])
select  'ÊäÈíåÇÊ SMS','SMS Alerts'

insert into [StrSource] 
([Ar],[En])
select  'ÊäÓíÞ ÇáÃÑÞÇã','Numbers format'

insert into [StrSource] 
([Ar],[En])
select  'ÊäÓíÞ ÇáÊÇÑíÎ','Date format'

insert into [StrSource] 
([Ar],[En])
select  'ÊäÓíÞ ÇáæíäÏæÒ','Windows format'

insert into [StrSource] 
([Ar],[En])
select  'ÊäÓíÞ ãÍÏÏ','Specific format'

insert into [StrSource] 
([Ar],[En])
select  'ÊäÝíÐ ÇáÚãáíÇÊ','Implementation of operations'

insert into [StrSource] 
([Ar],[En])
select  'ÊåíÆÉ ÇáäÇÝÐÉ','Create Windows'

insert into [StrSource] 
([Ar],[En])
select  'ÊæËíÞ ÇáÚÞÏ','Contract registration'

insert into [StrSource] 
([Ar],[En])
select  'ÊæÒíÚ ÇáÑÈÍ','Profit distribution'

insert into [StrSource] 
([Ar],[En])
select  'ÊæÒíÚ ÇáãÈáÛ','Amount distribution'

insert into [StrSource] 
([Ar],[En])
select  'ÊæÒíÚí','Distributive'

insert into [StrSource] 
([Ar],[En])
select  'ÊæÓíÚ ßá ÇáÇÚãÏÉ','Expand all columns'

insert into [StrSource] 
([Ar],[En])
select  'ÊæÕíÝ ÇáÌÏÇæá','Tables description'

insert into [StrSource] 
([Ar],[En])
select  'ÊæÕíÝ ÇáÍÞæá ÇáÅÖÇÝíÉ','Extra fields description'

insert into [StrSource] 
([Ar],[En])
select  'ÊæáÏ ÞíÏ','Generate journal entry'

insert into [StrSource] 
([Ar],[En])
select  'ÊæáÏ ÞíÏ ÈÔßá ÊáÞÇÆí','Generate journal entry automatically'

insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ ÃæÑÇÞ ãÇáíÉ','Generate checks'

insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ ÃæÑÇÞ ãÇáíÉ ÍÓÈ ÎØÉ','Generate checks by plan'

insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ ÇáÃæÑÇÞ ÇáãÇáíÉ','Generate cheques'

insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ ÇáÔÞÞ','Generating flats'

insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ ÇáÔÞÞ ÇáÎÏã','Generate servants flats'

insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ ÇáÔÞÞ ÇáÓÇÆÞíä','Generate drivers flats'

insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ ÇáÞíÏ','Generat voucher'

insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ ÇáÞíæÏ ááÚÞæÏ ÈÏæä ÞíÏ','Generate entries for contracts without exist entry'

insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ Çáßá','Generate All'

insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ ÇáãÍáÇÊ','Generate shops'

insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ ÇáãÓÊæÏÚÇÊ','Generate warehouses'

insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ ÇáãßÇÊÈ','Generate offices'

insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ ÇáãæÇÞÝ','Generate parking'

insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ ÈíÇä ÇáÍÓÇÈ ÇáãÞÇÈá ãä ÈíÇä ÇáÃÞáÇã','Generate obverse account details using lines details'

insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ ÓäÏ ÞíÏ','Generate journal voucher'

insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ ÔÞÞ ÇáÎÏã','Generate servant appartments'

insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ ÔÞÞ ÇáÓÇÆÞíä','Generate driver flats'

insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ ÔÞÞ ÇáãíÒÇäíä','Generate mizanin'

insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ ÔÞÞ ÈäÊ åÇæÓ','Generate pent house'

insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ ÔíßÇÊ  / ÇãßÇäíÉ ÇáÍÝÙ ãÚ ÚÏã ÊØÇÈÞ ÇáãÈáÛ','Allow to generate cheques even with the mismatch amount'

insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ ÔíßÇÊ ÍÓÈ ÎØÉ ','Generate cheques by plan'

insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ ÞíÏ','Generate. Voucher'

insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ ÞíÏ ÇáÅäåÇÁ','Generate termination journal entry'

insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ ÞíÏ ÈÔßá Âáí','Auto Generate Voucher.'

insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ ÞíÏ ÈäãØ','Generate entry by type'

insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ ÞíÏ ÚäÏ ÇáÅäåÇÁ ÈÔßá Âáí','Generate journal entry on termination automatically'

insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ ÞíÏ ÝÑæÞÇÊ ÃÓÚÇÑ ÇáÕÑÝ','Generate exchange rate journal entry'

insert into [StrSource] 
([Ar],[En])
select  'ÊæáíÏ ÞíÏ áßá Þáã','Generate journal entry for each line'

insert into [StrSource] 
([Ar],[En])
select  'ËÇÈÊ','Fixed'

insert into [StrSource] 
([Ar],[En])
select  'ÌÜÜÇÏÉ','Jada'

insert into [StrSource] 
([Ar],[En])
select  'ÌÇÑí ÇáÊäÝíÐ','Processing'

insert into [StrSource] 
([Ar],[En])
select  'ÌÏíÏ','New'

insert into [StrSource] 
([Ar],[En])
select  'ÌÑÏ ÇáÃÕæá','Assets inventory'

insert into [StrSource] 
([Ar],[En])
select  'ÌÑÏ ÇáãæÇÏ','Materials inventory'

insert into [StrSource] 
([Ar],[En])
select  'ÌÑÏ ÊÝÕíáí ÇáãÓÊæÏÚÇÊ','Warehouses detailed inventory'

insert into [StrSource] 
([Ar],[En])
select  'ÌÑÏ ÊÝÕíáí ááãÓÊæÏÚÇÊ','Detailed Inventory report'

insert into [StrSource] 
([Ar],[En])
select  'ÌãÇÏì ÇáÃæá','Jumada I'

insert into [StrSource] 
([Ar],[En])
select  'ÌãÇÏì ÇáËÇäí','Jumada II'

insert into [StrSource] 
([Ar],[En])
select  'ÌäÓíÉ ÇáÒÈæä','Customer nationality'

insert into [StrSource] 
([Ar],[En])
select  'ÌäæÈÇð','South'

insert into [StrSource] 
([Ar],[En])
select  'ÌåÉ ÇáÅÕÏÇÑ','Issuer'

insert into [StrSource] 
([Ar],[En])
select  'ÌæÇá','Mobile'

insert into [StrSource] 
([Ar],[En])
select  'ÌæÇá ÇáÒÈæä','Customer mobile'

insert into [StrSource] 
([Ar],[En])
select  'Í/ ÇáÅÖÇÝÇÊ','Extra A/C'

insert into [StrSource] 
([Ar],[En])
select  'Í/ ÇáÕÑÝ ÇáÕÍí','Sanitation A/C'

insert into [StrSource] 
([Ar],[En])
select  'Í/ ÇíÑÇÏ ÇáÝÇÊæÑÉ','Revenue A/C'

insert into [StrSource] 
([Ar],[En])
select  'ÍÜ/ ÝÑæÞÇÊ ÃÓÚÇÑ ÇáÕÑÝ','Currency differences A/C'

insert into [StrSource] 
([Ar],[En])
select  'Í/ãÎÒæä ÈÖÇÚÉ ÂÎÑ ÇáãÏÉ','Ending inventory A/C'

insert into [StrSource] 
([Ar],[En])
select  'ÍÇÑÓ ÇáÈäÇÁ','Watchman'

insert into [StrSource] 
([Ar],[En])
select  'ÍÇáÉ ÅÏÎÇá ÇáÚÞÏ','Contract input case'

insert into [StrSource] 
([Ar],[En])
select  'ÍÇáÉ ÅäåÇÁ ÇáÚÞÏ','Contract termination status'

insert into [StrSource] 
([Ar],[En])
select  'ÍÇáÉ ÇáÃÑÖ','Land status'

insert into [StrSource] 
([Ar],[En])
select  'ÍÇáÉ ÇáÅäåÇÁ','Termination status'

insert into [StrSource] 
([Ar],[En])
select  'ÍÇáÉ ÇáÅíÌÇÑ','Leaasing status'

insert into [StrSource] 
([Ar],[En])
select  'ÍÇáÉ ÇáÍÏÇÆÞ','Garden status'

insert into [StrSource] 
([Ar],[En])
select  'ÍÇáÉ ÇáÏÚæì','Lawsuite status'

insert into [StrSource] 
([Ar],[En])
select  'ÍÇáÉ ÇáÔÞÉ','Flat status'

insert into [StrSource] 
([Ar],[En])
select  'ÍÇáÉ ÇáÕíÇäÉ','Maintenance status'

insert into [StrSource] 
([Ar],[En])
select  'ÍÇáÉ ÇáÚÑÖ','Offer status'

insert into [StrSource] 
([Ar],[En])
select  'ÍÇáÉ ÇáÚÞÇÑ','Property status'

insert into [StrSource] 
([Ar],[En])
select  'ÍÇáÉ ÇáÚÞÏ','Contract status'

insert into [StrSource] 
([Ar],[En])
select  'ÍÇáÉ ÇáÝíáÇ','Villa status'

insert into [StrSource] 
([Ar],[En])
select  'ÍÇáÉ ÇáãæÞÝ','Parking status'

insert into [StrSource] 
([Ar],[En])
select  'ÍÇáÉ ÇáæÑÞÉ ÇáãÇáíÉ','Cheque status'

insert into [StrSource] 
([Ar],[En])
select  'ÍÇä æÞÊåÇ æáã ÊäÝÐ','Due time but not implement'

insert into [StrSource] 
([Ar],[En])
select  'ÍÊì ÊÇÑíÎ : ','Until:'

insert into [StrSource] 
([Ar],[En])
select  'ÍÌÒ','Reserve'

insert into [StrSource] 
([Ar],[En])
select  'ÍÌÒ ÇáßãíÉ ÈÚÏ ÇÖÇÝÉ ÇáØáÈ','reserve quantity after adding order'

insert into [StrSource] 
([Ar],[En])
select  'ÍÌÒ ÚÞÇÑ','Property reservation'

insert into [StrSource] 
([Ar],[En])
select  'ÍÌã ÇáÎØ','Font size'

insert into [StrSource] 
([Ar],[En])
select  'ÍÏË ÇáÎØÃ ÇáÊÇáí','The following error occurred'

insert into [StrSource] 
([Ar],[En])
select  'ÍÏÏ ÅÓã ÇáãÓÊÎÏã','Select the user name'

insert into [StrSource] 
([Ar],[En])
select  'ÍÏÏ ÇáÈØÇÞÇÊ ÇáÊí ÊÑíÏ ÇäÔÇÁ ÍÓÇÈÇÊ áåÇ','Select cards that you want to create accounts'

insert into [StrSource] 
([Ar],[En])
select  'ÍÏÏ ÇáÈäÇÁ','Select building'

insert into [StrSource] 
([Ar],[En])
select  'ÍÏÏ ÇáÍÓÇÈ ÇáÃÈ ááÒÈÇÆä','Select main account for customers'

insert into [StrSource] 
([Ar],[En])
select  'ÍÏÏ ÇáÍÓÇÈ ÇáÑÆíÓíÉ','Select main account'

insert into [StrSource] 
([Ar],[En])
select  'ÍÏÏ ÇáÍÓÇÈÇÊ ÇáÎÊÇãíÉ ÇáãØáæÈ ÊÏæíÑåÇ','Select the final accounts to be closed'

insert into [StrSource] 
([Ar],[En])
select  'ÍÏÏ ÇáÔÞÞ ÇáÊí ÊÑíÏ ÊÌãíÚåÇ','Select the flats you want to assemble'

insert into [StrSource] 
([Ar],[En])
select  'ÍÏÏ ÇáãÌáÏ ÇáÐí ÓíÊã äÞá ÌãíÚ ÇáãáÝÇÊ ÇáÎÇÕÉ ÈÇáÈØÇÞÉ Çáíå :','Select the folder that will transfer all card files to it:'

insert into [StrSource] 
([Ar],[En])
select  'ÍÏÏ ÇáãáÝÇÊ ÇáÊí ÊÑíÏ äÞáåÇ Çáì ÇáãÌáÏ ÇáãÍÏÏ','Select the files that you want transfer it to selected folder'

insert into [StrSource] 
([Ar],[En])
select  'ÍÏÏ ÍÓÇÈ ÇáÊÃãíäÇÊ ÇáÇÈ ááÒÈÇÆä','Select main deposit account for customers'

insert into [StrSource] 
([Ar],[En])
select  'ÍÏÏ ÍÞá ÇáãÏíä Ãæ ÇáÏÇÆä','Chose Debit / Credit account'

insert into [StrSource] 
([Ar],[En])
select  'ÍÏÏ ãÓÇÑ ÇáÌåÉ','Select destination path'

insert into [StrSource] 
([Ar],[En])
select  'ÍÏÏ ãÓÇÑ ÇáãÕÏÑ','Select source path'

insert into [StrSource] 
([Ar],[En])
select  'ÍÏÏ äæÚ ÇáãáßíÉ','Select ownership type'

insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ','Delete.'

insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ  Çáßá','Delete All'

insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÇáÅÑÌÇÚ','Delete return'

insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÇáÃÑÖ ÇáãÍÏÏÉ','Delete selected land'

insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÇáÈíÇäÇÊ ÇáÓÇÈÞÉ','Delete previous data'

insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÇáÊÍÕíá','Delete collection'

insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÇáÊÍÕíá ÇáÌÒÆí','Delete partial collection'

insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÇáÊÑÍíá','Delete deposit'

insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÇáÊÙåíÑ','Delete endorsement'

insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÇáÔÑØ','Delete condition'

insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÇáÔÞÉ ÇáãÍÏÏÉ','Delete selected flats'

insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÇáÔÞÞ','Delete flats'

insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÇáÔÞÞ ÇáÎÏã','Delete servants flats'

insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÇáÝáÊÑ','Delete filter'

insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÇáÞáã ÇáãÍÏÏ','Delete selected line'

insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÇáÞíÏ','Delete journal entry'

insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÇáãÍá ÇáãÍÏÏ','Delete selected shop'

insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÇáãÍáÇÊ','Delete shops'

insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÇáãÍáÇÊ ÇáãÍÏÏÉ','Delete selected shops'

insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÇáãÑÇÌÚ','Delete checked'

insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÇáãÓÊæÏÚÇÊ','Delete warehouses'

insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÇáãØÇÈÞÉ ÇáãÍÏÏÉ','Delete selected reconciliation'

insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÇáãßÇÊÈ','Delete offices'

insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÇáãæÇÞÝ','Delete parking'

insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÇáãæÞÚ','Delete location'

insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÇáãæÞÝ ÇáãÍÏÏ','Delete selected parking'

insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÊÐßíÑÇÊ ÇáÛíÑ','Delete others reminders'

insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÓØÑ','Delete row'

insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÔÞÞ ÇáÎÏã','Delete servant appartments'

insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÔÞÞ ÇáÓÇÆÞíä','Delete drivers flats'

insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÔÞÞ ÇáãíÒÇäíä','Delete mizanin'

insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÔÞÞ ÈäÊ åÇæÓ','Delete pent house'

insert into [StrSource] 
([Ar],[En])
select  'ÍÐÝ ÕæÑ','Delete photos'

insert into [StrSource] 
([Ar],[En])
select  'ÍÑßÉ','Activity'

insert into [StrSource] 
([Ar],[En])
select  'ÍÑßÉ ÅÌãÇáí ÇáãæÇÏ','Total material movement'

insert into [StrSource] 
([Ar],[En])
select  'ÍÑßÉ ÇáÃÑÖ','Land activity'

insert into [StrSource] 
([Ar],[En])
select  'ÍÑßÉ ÇáÔÞÉ','Flat activity'

insert into [StrSource] 
([Ar],[En])
select  'ÍÑßÉ ÇáÚÞÇÑ','Property activity'

insert into [StrSource] 
([Ar],[En])
select  'ÍÑßÉ ÇáÚÞÇÑÇÊ ÇáãÄÌÑÉ','Leased property activity'

insert into [StrSource] 
([Ar],[En])
select  'ÍÑßÉ ÇáÚãá ÇáíæãíÉ','Daily working report'

insert into [StrSource] 
([Ar],[En])
select  'ÍÑßÉ ÇáÝíáÇ','Villa activity'

insert into [StrSource] 
([Ar],[En])
select  'ÍÑßÉ ÇáãÍá','Shop activity'

insert into [StrSource] 
([Ar],[En])
select  'ÍÑßÉ ÇáãæÞÝ','Parking activity'

insert into [StrSource] 
([Ar],[En])
select  'ÍÑßÉ ãÇÏÉ','Material activity'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÅÚÇÏÉ ÇáÊÞííã','Revaluation account'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÅíÑÇÏÇÊ','Revenues Account'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÅíÑÇÏÇÊ ÇáÑÓæã','Fees revenue account'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÅíÑÇÏÇÊ ÊÕÏíÞ ÇáÚÞÏ','Contract registration revenue account'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÅíÑÇÏÇÊ ÓÚÑ ÇáÚÞÏ','Contract price revenue account'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇÑÈÇÍ ÑÇÓãÇáíÉ','Capital profit account'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÅÎÑÇÌ','Output account'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÅÏÎÇá','Input account'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÃÕá','Asset account'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÅÖÇÝÇÊ','Extra account'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÅÞÝÇá','Closing account'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÅåÊáÇß','Depreciation account'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÅåÊáÇß ÍÊì ÊÇÑíÎ','Depreciation account to date'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÅíÑÇÏ','Revenue account'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÅíÑÇÏ ÇáÛíÑ ãÍÞÞ','Unrealized revenue account'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÈäÇÁ','Building A/C'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÈäß ááÃÑÖ','Land bank account'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÈäß ááÈäÇÁ','Building bank A/C'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÈäß ááÝíáÇ','Villa bank A/C'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÈäß ãÛáÞ','Bank account closed'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÊÃãíä','Deposit A/C'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÊÃãíä ÇáÈäÇÁ','Building deposit account'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÊÇãíä','Insuarance account'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÍÓã','Discount A/C'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÍÓãíÇÊ','Discount material'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÏÝÚÉ ÇáÃæáì','Down payment A/C'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÑÓæã','Fees account'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÒÈæä','Customer account'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÚãæáÉ','Commission account'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÚãæáÉ ãä ÇáÚãíá','Commission from client A/C'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÚãæáÉ ãä ÕÇÍÈ ÇáÚÞÇÑ','Commission from owner A/C'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÚãíá','Customer A/C'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÛÑÇãÇÊ','Fines Account'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáÝíáÇ','Villa account'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáßåÑÈÇÁ','Electricity account'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáãÇáß','Owner account'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáãÈáÛ ÇáãÓÊÍÞ','Calculate due amount'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáãÔÑæÚ','Project account'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáãÕÇÑíÝ','Expense account'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáãæÇÏ','Material account'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáãæÑÏ','Supplier account'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáãíÇå','Water account'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáäÊÇÆÌ','Calculate results'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇáäÞÏíÉ','Cash account'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇíÑÇÏÇÊ ÇáÑÓæã 1','Fees revenue account 1'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇíÑÇÏÇÊ ÇáÑÓæã 2','Fees revenue account 2'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇíÑÇÏÇÊ ÇáÑÓæã 3','Fees revenue account 3'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇíÑÇÏÇÊ ÇáÑÓæã 4','Fees revenue account 4'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇíÑÇÏÇÊ ÇáÑÓæã 5','Fees revenue account 5'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇíÑÇÏÇÊ ÇáÛÑÇãÇÊ','Fines revenue account'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇíÑÇÏÇÊ ÛÑÇãÇÊ ÇáÊÃÎíÑ','Delay fines revenue A/C'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇíÑÏÇÊ ÊÕÏíÞ ÇáÚÞÏ','Contract registration revenue A/C'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÇíÑÏÇÊ ÓÚÑ ÇáÚÞÏ','Contract price revenue A/C'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÈÖÇÚÉ ÂÎÑ ÇáãÏÉ','Ending inventory account'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÊßáÝÉ ÇáÊØæíÑ','Calculate development cost'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÊáÞÇÆí','Automatic calculate'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÎÓÇÆÑ ÑÇÓãÇáíÉ','Capital lost account'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÏÇÆä','Credit account'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÕäÏæÞ ÇáÈäÇÁ','Building cash account'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÚãæáÉ ÇáÈÇÆÚ','Salesman commission account'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ÞíãÉ ÇáÚÞÇÑ ÇáãØæÑ','Calculate developed property value'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ãÌãÚ ÇáÅåÊáÇß','Depreciation accumulated account'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ãÏíä','Debit account'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈ ãÕÑæÝ ÇáÚãæáÇÊ','Commission expense account'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈÇÊ ÇáÈäÇÁ','Building account'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈÇÊ ÇáÑÓæã','Fees Accounts'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈÇÊ ÇáÒÈÇÆä','Customers account'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈÇÊ ÇáæÑÞÉ ÇáãÇáíÉ','Cheque accounts'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈÇÊ ÇíÑÇÏÇÊ ÇáÑÓæã 1','Fees revenue accounts 1'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈÇÊ ÇíÑÇÏÇÊ ÇáÑÓæã 2','Fees revenue accounts 2'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈÇÊ ÇíÑÇÏÇÊ ÇáÑÓæã 3','Fees revenue accounts 3'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÇÈÇÊ ãÊÚÏÏÉ','Multiple accounts'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÈ ','by'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÈ ÇáÊÇÑíÎ','By date'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÈ ÇáÏæáÉ','By Country'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÈ ÎØÉ','By plan'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓÈ ÚÏÏ ÇáÃíÇã','By days number'

insert into [StrSource] 
([Ar],[En])
select  'ÍÓã Úáì ','Discount on'

insert into [StrSource] 
([Ar],[En])
select  'ÍÙÑ ÇáÈØÇÞÉ','Block card'

insert into [StrSource] 
([Ar],[En])
select  'ÍÙÑ ÇáÈØÇÞÉ áßá ÇáãÚÇãáÇÊ','Block card in all transactions'

insert into [StrSource] 
([Ar],[En])
select  'ÍÙÑ ÇáÈØÇÞÉ ááÚÞæÏ','Block card in contracts'

insert into [StrSource] 
([Ar],[En])
select  'ÍÝØ ÇáÕæÑÉ ÈÕíÛÉ','Save photo with extension'

insert into [StrSource] 
([Ar],[En])
select  'ÍÝÙ','Save'

insert into [StrSource] 
([Ar],[En])
select  'ÍÝÙ XML','Save as XML'

insert into [StrSource] 
([Ar],[En])
select  'ÍÝÙ ÃÞáÇã ÇáÓäÏ','Save entry lines'

insert into [StrSource] 
([Ar],[En])
select  'ÍÝÙ ÇáÅÚÏÇÏÇÊ','Save settings'

insert into [StrSource] 
([Ar],[En])
select  'ÍÝÙ ÇáÈíÇäÇÊ','Saving data'

insert into [StrSource] 
([Ar],[En])
select  'ÍÝÙ ÇáÊÏÞíÞ','Save checked'

insert into [StrSource] 
([Ar],[En])
select  'ÍÝÙ ÇáÕæÑÉ ÈÕíÛÉ','Save picture as'

insert into [StrSource] 
([Ar],[En])
select  'ÍÝÙ Çáßá','Save all'

insert into [StrSource] 
([Ar],[En])
select  'ÍÝÙ ÇáãáÇÍÙÇÊ','Save note'

insert into [StrSource] 
([Ar],[En])
select  'ÍÝÙ ãÄÞÊ','Temporary save'

insert into [StrSource] 
([Ar],[En])
select  'ÍÝÙC:\Users\Public\Pictures\Sample Pictures\Desertjpg','saveC:\Users\Public\Pictures\Sample Pictures\Desertjpg'

insert into [StrSource] 
([Ar],[En])
select  'ÍÞá','Field'

insert into [StrSource] 
([Ar],[En])
select  'ÍÞá ÅÖÇÝí 1','Field 1'

insert into [StrSource] 
([Ar],[En])
select  'ÍÞá ÅÖÇÝí 2','Field 2'

insert into [StrSource] 
([Ar],[En])
select  'ÍÞá ÅÖÇÝí 3','Field 3'

insert into [StrSource] 
([Ar],[En])
select  'ÍÞá ÅÖÇÝí 4','Field 4'

insert into [StrSource] 
([Ar],[En])
select  'ÍÞá ÅÖÇÝí 5','Field 5'

insert into [StrSource] 
([Ar],[En])
select  'ÍÞá ÅÖÇÝí 6','Field 6'

insert into [StrSource] 
([Ar],[En])
select  'ÍÞá ÅÖÇÝí 7','Field 7'

insert into [StrSource] 
([Ar],[En])
select  'ÍÞá ÈíÇä ÇáÒÈæä 1','Customer information 1'

insert into [StrSource] 
([Ar],[En])
select  'ÍÞá ÈíÇä ÇáÒÈæä 2','Customer information 2'

insert into [StrSource] 
([Ar],[En])
select  'ÍÞá ÈíÇä ÇáÒÈæä 3','Customer information 3'

insert into [StrSource] 
([Ar],[En])
select  'ÍÞá ÈíÇä ÇáÒÈæä 4','Customer information 4'

insert into [StrSource] 
([Ar],[En])
select  'ÍÞá ÈíÇä ÇáÒÈæä 5','Customer information 5'

insert into [StrSource] 
([Ar],[En])
select  'ÍÞá ÈíÇä ÇáÒÈæä 6','Customer information 6'

insert into [StrSource] 
([Ar],[En])
select  'ÍÞá ÈíÇä ÇáÒÈæä 7','Customer information 7'

insert into [StrSource] 
([Ar],[En])
select  'ÍÞá ÈíÇä ÒÈæä 1','Customer field 1'

insert into [StrSource] 
([Ar],[En])
select  'ÍÞá ÈíÇä ÒÈæä 2','Customer field 2'

insert into [StrSource] 
([Ar],[En])
select  'ÍÞá ÈíÇä ÒÈæä 3','Customer field 3'

insert into [StrSource] 
([Ar],[En])
select  'ÍÞá ÈíÇä ÒÈæä 4','Customer field 4'

insert into [StrSource] 
([Ar],[En])
select  'ÍÞá ÈíÇä ÒÈæä 5','Customer field 5'

insert into [StrSource] 
([Ar],[En])
select  'ÍÞá ÈíÇä ÒÈæä 6','Customer field 6'

insert into [StrSource] 
([Ar],[En])
select  'ÍÞá ÈíÇä ÒÈæä 7','Customer field 7'

insert into [StrSource] 
([Ar],[En])
select  'ÍÞæá ÅÖÇÝíÉ','Extra fields'

insert into [StrSource] 
([Ar],[En])
select  'ÍÞæá ÇáÝÇÊæÑÉ','Bill fields'

insert into [StrSource] 
([Ar],[En])
select  'Íæá ÇáÈÑäÇãÌ','About program'

insert into [StrSource] 
([Ar],[En])
select  'ÎÇÑÌ ÇáäØÇÞ ÇáÚãÑÇäí','Outside urban boundary'

insert into [StrSource] 
([Ar],[En])
select  'ÎÇÑÌÉ Úä ÇáÅÑÇÏÉ','Out of control'

insert into [StrSource] 
([Ar],[En])
select  'ÎÇÕ','Private'

insert into [StrSource] 
([Ar],[En])
select  'ÎÇÕ ÈÇáãÓÊÎÏã ÇáÍÇáí','Specified for current user'

insert into [StrSource] 
([Ar],[En])
select  'ÎÇáíÉ','Vacant'

insert into [StrSource] 
([Ar],[En])
select  'ÎÊÇãí','Closing'

insert into [StrSource] 
([Ar],[En])
select  'ÎÏãÇÊ ÚÇãÉ','General Services'

insert into [StrSource] 
([Ar],[En])
select  'ÎÏãÇÊ ãÊæÝÑÉ','Available services'

insert into [StrSource] 
([Ar],[En])
select  'ÎÏãíÉ','Services'

insert into [StrSource] 
([Ar],[En])
select  'ÎÑæÌ','Exit'

insert into [StrSource] 
([Ar],[En])
select  'ÎÑíØÉ ÇáãæÞÚ','Location map'

insert into [StrSource] 
([Ar],[En])
select  'ÎÑíØÉ ÊÝÕíáíÉ','Detailed map'

insert into [StrSource] 
([Ar],[En])
select  'ÎÕã ÇáÚãæáÉ','Discount commission'

insert into [StrSource] 
([Ar],[En])
select  'ÎØÃ ÕáÇÍíÉ','Permission error'

insert into [StrSource] 
([Ar],[En])
select  'ÎØÃ Ýí ÅÓã ÇáãáÝ','Error in the file name'

insert into [StrSource] 
([Ar],[En])
select  'ÎØÃ Ýí ãáÝ ÇáÅÚÏÇÏÇÊ','An error in settings file'

insert into [StrSource] 
([Ar],[En])
select  'ÎíÇÑ ÊæáíÏ ÇáÞíÏ Ýí ÅäåÇÁ ÚÞÏ','Generate journal entry at contract expiry option'

insert into [StrSource] 
([Ar],[En])
select  'ÎíÇÑÇÊ','Options'

insert into [StrSource] 
([Ar],[En])
select  'ÎíÇÑÇÊ ÇáÊÞÑíÑ','Report Option'

insert into [StrSource] 
([Ar],[En])
select  'ÎíÇÑÇÊ ÇáÓäÏÇÊ','Entries option'

insert into [StrSource] 
([Ar],[En])
select  'ÎíÇÑÇÊ ÇáÝæÇÊíÑ','Bills option'

insert into [StrSource] 
([Ar],[En])
select  'ÏÇÆä','Crediit'

insert into [StrSource] 
([Ar],[En])
select  'ÏÇÎá ÇáäØÇÞ ÇáÚãÑÇäí','Inside urban boundary'

insert into [StrSource] 
([Ar],[En])
select  'ÏÎæá','Enter'

insert into [StrSource] 
([Ar],[En])
select  'ÏÑÌÉ ÇáÓÑíÉ','Security degree'

insert into [StrSource] 
([Ar],[En])
select  'ÏÚæì','Lawsuit.'

insert into [StrSource] 
([Ar],[En])
select  'ÏÚæì ÞÖÇÆíÉ','lawsuit'

insert into [StrSource] 
([Ar],[En])
select  'ÏÚæì ÞÖÇÆíÉ Úáì ÇáÚÞÏ','Lawsuit on contract'

insert into [StrSource] 
([Ar],[En])
select  'ÏÚæì ÞÖÇÆíÉ Úáì ÇáæÍÏÉ','Lawsuit on unit'

insert into [StrSource] 
([Ar],[En])
select  'ÏÝÊÑ ÅÓÊÇÐ ãÑßÒ ßáÝÉ','Cost center general ledger'

insert into [StrSource] 
([Ar],[En])
select  'ÏÝÊÑ ÇÓÊÇÐ ÍÓÇÈ','Account General Ledger'

insert into [StrSource] 
([Ar],[En])
select  'ÏÝÊÑ ÇáÃÓÊÇÐ','General ledger'

insert into [StrSource] 
([Ar],[En])
select  'ÏÝÊÑ ÇáÇÓÊÇÐ','General Ledger'

insert into [StrSource] 
([Ar],[En])
select  'ÏÝÊÑ ÇáíæãíÉ','Journal Ledger'

insert into [StrSource] 
([Ar],[En])
select  'ÏÝÚÇÊ ÇáÚÞæÏ','Contract payments report'

insert into [StrSource] 
([Ar],[En])
select  'ÏÞÉ ÇáÕæÑÉ áá jpg','Jpg Resolution'

insert into [StrSource] 
([Ar],[En])
select  'Ïáíá ÇáÃÕæá','Chart of Asset'

insert into [StrSource] 
([Ar],[En])
select  'Ïáíá ÇáÃáæÇä','Color list'

insert into [StrSource] 
([Ar],[En])
select  'Ïáíá ÇáÊÕäíÝ','Cateries chart'

insert into [StrSource] 
([Ar],[En])
select  'Ïáíá ÇáÍÓÇÈÇÊ','Chart of Accounts'

insert into [StrSource] 
([Ar],[En])
select  'Ïáíá ÇáÝÑæÚ','Chart of Branches'

insert into [StrSource] 
([Ar],[En])
select  'Ïáíá ÇáãÓÊæÏÚÇÊ','Chart of Stores'

insert into [StrSource] 
([Ar],[En])
select  'Ïáíá ÇáãæÇÏ','Chart of Materials'

insert into [StrSource] 
([Ar],[En])
select  'Ïáíá ãÑÇßÒ ÇáßáÝÉ','Chart of cost center'

insert into [StrSource] 
([Ar],[En])
select  'ÏæÑÉ ÇáÚÞÏ','Contract cycle'

insert into [StrSource] 
([Ar],[En])
select  'Ïæä ÞíãÉ','Without amount'

insert into [StrSource] 
([Ar],[En])
select  'Ðæ ÇáÍÌÉ','Zulhijjah'

insert into [StrSource] 
([Ar],[En])
select  'Ðæ ÇáÞÚÏÉ','Zulkaedah'

insert into [StrSource] 
([Ar],[En])
select  'ÑÃÓ ÇáãÇá','Capital'

insert into [StrSource] 
([Ar],[En])
select  'ÑÇÈØ ÇáÇÑÓÇá','Sending link'

insert into [StrSource] 
([Ar],[En])
select  'ÑÇÌÚ ãÏíÑ ÇáäÙÇã','Contact system administrator'

insert into [StrSource] 
([Ar],[En])
select  'ÑÈØ ÇáÔíß ãÚ ÇáÚÞæÏ','Link cheque with contracts'

insert into [StrSource] 
([Ar],[En])
select  'ÑÈØ ÇáãÓÊÎÏã ÈÇáÈÇÆÚ','Link user with salesman'

insert into [StrSource] 
([Ar],[En])
select  'ÑÈØ ÇáãÓÊÎÏã ãÚ ÍÇáÉ ÇáÏÚæì','Link user with lawsuit status'

insert into [StrSource] 
([Ar],[En])
select  'ÑÈØ ÇáãÓÊÎÏã ãÚ ãÕÇÑíÝ ÇáÏÚæì','Link user with lawsuit expenses'

insert into [StrSource] 
([Ar],[En])
select  'ÑÈØ ÇáãÓÊäÏÇÊ','Linking documents'

insert into [StrSource] 
([Ar],[En])
select  'ÑÈØ ãÊÚÏÏ','Multi-Link'

insert into [StrSource] 
([Ar],[En])
select  'ÑÈØ ãÚ','Link with'

insert into [StrSource] 
([Ar],[En])
select  'ÑÈíÚ Çæá','rabee al awwal'

insert into [StrSource] 
([Ar],[En])
select  'ÑÈíÚ ËÇäí','rabee al thani'

insert into [StrSource] 
([Ar],[En])
select  'ÑÌÈ','Rajab'

insert into [StrSource] 
([Ar],[En])
select  'ÑÌæÚ','Back'

insert into [StrSource] 
([Ar],[En])
select  'ÑÎÕÉ ÇáÈáÏíÉ','Municipal license'

insert into [StrSource] 
([Ar],[En])
select  'ÑÎÕÉ ÇáÏÝÇÚ ÇáãÏäí','Civil Defense License'

insert into [StrSource] 
([Ar],[En])
select  'ÑÓÇáÉ ÌÏíÏÉ  ','New message'

insert into [StrSource] 
([Ar],[En])
select  'ÑÓæã 1','Fees 1'

insert into [StrSource] 
([Ar],[En])
select  'ÑÓæã 2','Fees 2'

insert into [StrSource] 
([Ar],[En])
select  'ÑÓæã 3','Fees 3'

insert into [StrSource] 
([Ar],[En])
select  'ÑÓæã 4','Fees 4'

insert into [StrSource] 
([Ar],[En])
select  'ÑÓæã 5','Fees 5'

insert into [StrSource] 
([Ar],[En])
select  'ÑÓæã ÃÎÑì','Other fees'

insert into [StrSource] 
([Ar],[En])
select  'ÑÓæã ÇÊÍÇÏ ÇáãáÇß','Owners Associations fees'

insert into [StrSource] 
([Ar],[En])
select  'ÑÓæã ÇáÛÑÇãÇÊ','Fines fees'

insert into [StrSource] 
([Ar],[En])
select  'ÑÓæã ÊÕÏíÞ ÇáÚÞÏ','Contract registration value'

insert into [StrSource] 
([Ar],[En])
select  'ÑÓæã ÓÚÑ ÇáÚÞÏ','Contract price value'

insert into [StrSource] 
([Ar],[En])
select  'ÑÕíÏ ÇáÍÑßÉ','Activity balance'

insert into [StrSource] 
([Ar],[En])
select  'ÑÕíÏ ÇáÑÓÇÆá','SMS Balance'

insert into [StrSource] 
([Ar],[En])
select  'ÑÕíÏ ÇáÒÈæä','Customer balance'

insert into [StrSource] 
([Ar],[En])
select  'ÑÕíÏ ÇáÒÈæä ÏÇÆä','Customer credit balance'

insert into [StrSource] 
([Ar],[En])
select  'ÑÕíÏ ÇáÒÈæä áÇ íÓÇæí ÇáÕÝÑ','Customer balance is not equal to zero'

insert into [StrSource] 
([Ar],[En])
select  'ÑÕíÏ ÇáÒÈæä ãÏíä','Customer debit balance'

insert into [StrSource] 
([Ar],[En])
select  'ÑÕíÏ ÇáÝÊÑÉ ÏÇÆä','Period credit balance'

insert into [StrSource] 
([Ar],[En])
select  'ÑÕíÏ ÇáÝÊÑÉ ãÏíä','Period debit balance'

insert into [StrSource] 
([Ar],[En])
select  'ÑÕíÏ ÇáãÇÏÉ','Material balance'

insert into [StrSource] 
([Ar],[En])
select  'ÑÕíÏ ÇáãØÇÈÞÉ','Reconciliation balance'

insert into [StrSource] 
([Ar],[En])
select  'ÑÕíÏ ÍÓÇÈ','Account balance'

insert into [StrSource] 
([Ar],[En])
select  'ÑÕíÏ ÓÇÈÞ ÏÇÆä','Previous credit balance'

insert into [StrSource] 
([Ar],[En])
select  'ÑÕíÏ ÓÇÈÞ ãÏíä','Previous debit balance'

insert into [StrSource] 
([Ar],[En])
select  'ÑÕíÏ äåÇÆí ÏÇÆä','Final credit balance'

insert into [StrSource] 
([Ar],[En])
select  'ÑÕíÏ äåÇÆí ãÏíä','Final debit balance'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã','number'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã :','No:'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÃÕá ÇáÓäÏ','Entry origin No'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÃãÑ ÇáÕíÇäÉ','Maintenance order No'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÃÑÖ','Land No'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÃÕá','Origin No'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÅÞÇãÉ','Residence No'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÅíÕÇá','Receipt No'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÅíÕÇá ãßÑÑ','Duplicate receipt number'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÈØÇÞÉ','Card No'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÈØÇÞÉ : ','Card number:'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÈØÇÞÉ ááÒÈæä','Customer card No'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÈäÇÁ','Building No'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÊÑÎíÕ','License No'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÊÓÌíá','Registration number'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÊÞÑíÑ','Report No'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÊÞÑíÑ ãßÑÑ','Duplicate report number'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÊäÝíÐ','Execution No'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÌáÓÉ','Session number'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÌæÇá','Mobile Number'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÍÓÇÈ','Account No'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÍæÖ','Basin No'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÏÚæì','Lawsuit No'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÒíÇÑÉ','Visit Number'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÓäÏ','Ownership entry No'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÓíÇÑÉ','Car plate No'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÔÍä','Shipping number'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÔÞÉ','Flat No'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÔÞÉ / ÇáãÍá','Flat / Shop No'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÔÞÉ ÇáãÑÊÈØÉ','Related flat No'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÔßæì','Complaint No'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÔßæì ãßÑÑ','Complaint number duplicate'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÔíß','Cheque No'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÔíß ÇáÊÓáÓáí','Cheque serial No'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáØÇÈÞ Èíä','Floor No between'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÚÏÇÏ','Meter number'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÚÑÖ','Quotation No'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÚÞÇÑ','Property No'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÚÞÏ','Contract No'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÚÞÏ ÇáÊÓáÓáí','Contract serial No'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÝÇÊæÑÉ','Bill number'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÝÇßÓ','Fax No'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÝíáÇ','Villa No'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÞÓÜÜíãÉ','Plot No'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÞØÚÉ','Area No'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÞíÏ ','Voucher Number'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÞíÏ ÇáÇÝÊÊÇÍí','Opening entry number'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáÞíÏ ãßÑÑ','Journal entry duplicate'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáãÍá','Shop No'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáãÍá ãßÑÑ','Duplicate shop number'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáãÎØØ','Planned No'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáãæÞÝ','Parking No'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáåÇÊÝ','Phone No'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáåæíÉ ááÒÈæä','Customer ID No'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÇáæÍÏÉ','Unit No'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÈØÇÞÉ ÇáÚãá','Labour card No'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÈØÇÞÉ ÇáãÄÌÑ','Lessor card No'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÈØÇÞÉ ÇáåæíÉ ','ID card No'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÈØÇÞÉ ÇáåæíÉ ãßÑÑ','ID card number duplicate'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÌæÇÒ ÇáÓÝÑ','Passport No'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÍÓÇÈ ÇáÒÈæä Ýí ÇáÈäß','Cusomter bank account No'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÓäÏ ÇáÞíÏ','Journal entry No'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÚÏÇÏ ÇáßåÑÈÇÁ','Electricity meter No'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã ÚÏÇÏ ÇáãíÇå','Water meter No'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã åÇÊÝ ÇáÚãá','Business No'

insert into [StrSource] 
([Ar],[En])
select  'ÑÞã æ ãßÇä ÅÕÏÇÑ ÇáÅÞÇãÉ','Resident No and issued by'

insert into [StrSource] 
([Ar],[En])
select  'ÑãÒ ÇáÃÕá','Asset code'

insert into [StrSource] 
([Ar],[En])
select  'ÑãÒ ÇáÈÇÑßæÏ','Barcode code'

insert into [StrSource] 
([Ar],[En])
select  'ÑãÒ ÇáÈäÇÁ','Building code'

insert into [StrSource] 
([Ar],[En])
select  'ÑãÒ ÇáÍÓÇÈ','Account code'

insert into [StrSource] 
([Ar],[En])
select  'ÑãÒ ÇáãÇÏÉ','Material code'

insert into [StrSource] 
([Ar],[En])
select  'ÑãÒ ÇáãÓÊæÏÚ','Store code'

insert into [StrSource] 
([Ar],[En])
select  'ÑãÒ ãÑßÒ ÇáßáÝÉ','Cost center code'

insert into [StrSource] 
([Ar],[En])
select  'ÑãÖÇä','Ramadan'

insert into [StrSource] 
([Ar],[En])
select  'ÒÈæä','Cutomer'

insert into [StrSource] 
([Ar],[En])
select  'ÒÈæä ãÍÊãá','Potential customer'

insert into [StrSource] 
([Ar],[En])
select  'ÒíÇÏÉ Ýí ÚãÑ ÇáÃÕá','Increase in asset life'

insert into [StrSource] 
([Ar],[En])
select  'ÒíÇÑÇÊ ÇáÕíÇäÉ','Maintenance visits'

insert into [StrSource] 
([Ar],[En])
select  'ÒíÇÑÇÊ ÇáÕíÇäÉ ÇáãÓÊÍÞÉ','Due maintenance visits'

insert into [StrSource] 
([Ar],[En])
select  'ÒíÇÑÇÊ ÚÞæÏ ÇáÕíÇäÉ','Maintenance contract visits'

insert into [StrSource] 
([Ar],[En])
select  'ÓÇÚÉ ÇáÊÐßíÑ','Reminder time'

insert into [StrSource] 
([Ar],[En])
select  'ÓÈÈ ÇáÅÑÌÇÚ','Return reason'

insert into [StrSource] 
([Ar],[En])
select  'ÓÈÈ ÇáÊÇÎíÑ','Delay reason'

insert into [StrSource] 
([Ar],[En])
select  'ÓÈÈ ÚÏã ÇáÊäÝíÐ','Reason for non-implementation'

insert into [StrSource] 
([Ar],[En])
select  'ÓÊßæä äÊÇÆÌ ÇáÊÞÑíÑ ÛíÑ ãÑÊÈÉ ÈÔßá ÕÍíÍ æÓíÎÊáÝ ÇáÑÕíÏ ÍÓÈ ÇáÎíÇÑÇÊ ÇáãÍÏÏÉ Öãä ÇáÝÑÒ','Report results will not be arranged properly and balance will not be different depending on selected sorting option'

insert into [StrSource] 
([Ar],[En])
select  'ÓÊã äÞá ßá ÇáÍÑßÇÊ ÇáÊÇÈÚÉ ááÍÓÇÈ :','All activities of this account will be transferred:'

insert into [StrSource] 
([Ar],[En])
select  'ÓÊã äÞá ßá ÇáÍÑßÇÊ ÇáÊÇÈÚÉ áãÑßÒ ÇáßáÝÉ :','All transactions of this cost center will be moved'

insert into [StrSource] 
([Ar],[En])
select  'ÓÌá ÇáÃæÇãÑ','Commands log'

insert into [StrSource] 
([Ar],[En])
select  'ÓØÍ ÇáãßÊÈ','Desktop'

insert into [StrSource] 
([Ar],[En])
select  'ÓØÑ ÌÏíÏ','New row'

insert into [StrSource] 
([Ar],[En])
select  'ÓÚÑ','Price'

insert into [StrSource] 
([Ar],[En])
select  'ÓÚÑ ÇáÅíÌÇÑ','Rent price'

insert into [StrSource] 
([Ar],[En])
select  'ÓÚÑ ÇáÅíÍÇÑ','Rent price'

insert into [StrSource] 
([Ar],[En])
select  'ÓÚÑ ÇáÈíÚ','Selling Price'

insert into [StrSource] 
([Ar],[En])
select  'ÓÚÑ ÇáÈíÚ 1','Selling Price 1'

insert into [StrSource] 
([Ar],[En])
select  'ÓÚÑ ÇáÈíÚ 2','Selling Price 2'

insert into [StrSource] 
([Ar],[En])
select  'ÓÚÑ ÇáÈíÚ 3','Selling Price 3'

insert into [StrSource] 
([Ar],[En])
select  'ÓÚÑ ÇáÚÞÏ','Contract price'

insert into [StrSource] 
([Ar],[En])
select  'ÓÚÑ ÇáßáÝÉ','Cost price'

insert into [StrSource] 
([Ar],[En])
select  'ÓÚÑ ÇáãÊÑ ÇáãÑÈÚ','Price per square meter'

insert into [StrSource] 
([Ar],[En])
select  'ÓÚÑ ãÍÏÏ','Specific price'

insert into [StrSource] 
([Ar],[En])
select  'ÓäÉ','Year'

insert into [StrSource] 
([Ar],[En])
select  'ÓäÉ ÇáÈäÇÁ','Built year'

insert into [StrSource] 
([Ar],[En])
select  'ÓäÏ ÇáÞíÏ','Journal enrty'

insert into [StrSource] 
([Ar],[En])
select  'ÓäÏ ÇáãáßíÉ','Property deed'

insert into [StrSource] 
([Ar],[En])
select  'ÓäÏ ÏÝÚ','Payment voucher'

insert into [StrSource] 
([Ar],[En])
select  'ÓäÏ ÕÑÝ','Receipt  voucher'

insert into [StrSource] 
([Ar],[En])
select  'ÓäÏ ÞÈÖ','Reciept voucher'

insert into [StrSource] 
([Ar],[En])
select  'ÓäÏ ÞíÏ','Journal Voucher'

insert into [StrSource] 
([Ar],[En])
select  'ÓäÏ ÞíÏ ÛíÑ ãÊæÇÒä ','Journal entry unbalanced'

insert into [StrSource] 
([Ar],[En])
select  'ÓäÏ íæãíÉ','Daily Voucher'

insert into [StrSource] 
([Ar],[En])
select  'ÓäÏÇÊ','Vouchers'

insert into [StrSource] 
([Ar],[En])
select  'ÓäÏÇÊ ÇáÞíÏ','Journal entries'

insert into [StrSource] 
([Ar],[En])
select  'ÓäÏÇÊ ÏÝÚ   ','Payment vouchers'

insert into [StrSource] 
([Ar],[En])
select  'ÓäÏÇÊ ÞÈÖ   ','Reciept vouchers'

insert into [StrSource] 
([Ar],[En])
select  'ÓäÏÇÊ áåÇ ÃÕá','Entries has origin'

insert into [StrSource] 
([Ar],[En])
select  'Óäæí','Annual'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÇÓÉ ÇáÊÓÚíÑ','Last purchase'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã  ÇáÛÇÁ ÊÑÍíá ÇáÞíæÏ ÇáãÍÏÏÉ','Selected entries will be UnPosted'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÅÓÊÈÏÇá ÇáÞíãÉ ÇáÌÏíÏÉ ÈÇáÞíãÉ ÇáÞÏíãÉ','Old value will be replaced by the New value'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÅÓÊÈÏÇá ÇáÞíãÉ ÇáÌÏíÏÉ ÈÇáÞíãÉ ÇáÞÏíãÉåá ÊÑíÏÇáãÊÇÈÚÉ ¿','Old value will be replaced by the New value, Do you want to continue?'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÅÓÊÑÌÇÚ ÈíÇäÇÊ ÓÇÈÞÉ','Previous data will be restored'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÅÓÊíÑÇÏ ÈíÇäÇÊ ÇáÒÈÇÆä ÇáãÍÏÏÉ','Customers data will be imported'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÅÖÇÝÉ ÇáÃæÑÇÞ ÇáãÇáíÉ ÇáãÍÏÏÉ','Selected checks will be added'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÅÖÇÝÉ ÇáÃæÑÇÞ ÇáãÇáíÉ ÇáãÍÏÏÉåá ÊÑíÏ ÇáãÊÇÈÚÉ','
Will be added to the securities specified Do you want to proceed'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÅÖÇÝÉ ÇáÃæÑÇÞ ÇáãÇáíÉ ÇáãÍÏÏÉåá ÊÑíÏ ÇáãÊÇÈÚÉ','Selected Cheques will be added
Do you want to continue?'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÅÖÇÝÉ ÈØÇÞÇÊ ÔÞÞ ÇáÈäÇÁ ÇáãÍÏÏ ','Selected flats building cards will be added'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÅÖÇÝÉ ÈØÇÞÇÊ ãßÇÊÈ ÇáÈäÇÁ ÇáãÍÏÏ ','Selected office building cards will be added'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÅÚÇÏÉ ÊÑãíÒ ãÑÇßÒ ÇáßáÝÉ ÇáÊÇÈÚÉ ááÈäÇÁ ÇáãÍÏÏ','Jobcost for selected building will be Recoded'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÅÚÇÏÉ ÊÓãíÉ ãÑÇßÒ ÇáßáÝÉ ÇáÊÇÈÚÉ ááÈäÇÁ ÇáãÍÏÏ','Jobcost for selected building will be Renamed'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÅÚÇÏÉ ÊÔÛíá ÇáÈÑäÇãÌ','Program will restart'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÅÚØÇÁ ÇáÞíÏ ÑÞã ÌÏíÏ','Journal entry will have new number'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÅÛáÇÞ ßá ÇáäæÇÝÐ ÇáãÝÊæÍÉ ÃæáÇð','All opened windows will closed'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÅäåÇÁ ÇáÌáÓÉ ááãÓÊÎÏã ','User session will be terminated'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÅäåÇÁ ÇáÚÞæÏ ÇáãÍÏÏÉ','Selected contracts will be terminated'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÅíÞÇÝ ÌãíÚ ÇáãÓÊÎÏãíä Úä ÇáÚãá ','All users will be stop working'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÇÏÑÇÌ ÓÚÑ ÂÎÑ ÚÞÏ ÇíÌÇÑ Ýí ÊÈÏáÇÊ ÇÓÚÇÑ ÇáÇíÌÇÑ ááÔÞÞ','Last contract amount will be placed in flats rent changing'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÇÑÓÇá ÇáÑÓÇÆá áßá ÇáÒÈÇÆä ÇáãÍÏÏÉ','SMS will be sent to each selected customer'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÇÚÇÏÉ ÊæáíÏ ÓäÏÇÊ ÇáÞíÏ','Generating entries will be processed'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÇÚÇÏÉ ÊæáíÏ ÓäÏÇÊ ÇáÞíÏåÐå ÇáÚãáíÉ ÞÏ ÊÊØáÈ æÞÊÇð ØæíáÇðåá ÊÑíÏ ÇáãÊÇÈÚÉ?','Regenerate entries will start now, this process may take a long time, do you continue?'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÇÛáÇÞ ÇáäÇÝÐÉ¿','window will be closed'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÇáÂä ÊÏÞíÞ ÃÑÕÏÉ ÇáÍÓÇÈÇÊ','Checking accounts balance will start now'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÇáÊÌÏíÏ','Contract will be renewed'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÊÌÏíÏ ÇáÚÞæÏ ÇáãÍÏÏÉ','Select contracts will be renewed'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÊÍÏíË ÅíÌÇÑÇÊ  ßÇÝÉ ÇáÔÞÞ ááÈäÇÁ ÇáãÍÏÏ
åá ÊÑíÏ ÇáãÊÇÈÚÉ','All prices of selected units wil be updated
Do you want to continue?'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÊÍãíá ÇáÕæÑ æÇáãáÝÇÊ æÇáæËÇÆÞ ãä ÞÇÚÏÉ ÇáÈíÇäÇÊ ÇáÞÑÕ ÇáÕáÈ','Photos, files and documents will be loaded from the database'

insert into [StrSource] 
([Ar],[En])
select  '  ÇáÈØÇÞÇÊ','Cards'

insert into [StrSource] 
([Ar],[En])
select  '  ÇáÊÞÇÑíÑ','Reports'

insert into [StrSource] 
([Ar],[En])
select  '  æáÛÇíÉ : ','Till :'

insert into [StrSource] 
([Ar],[En])
select  '  æáÛÇíÉ ÊÇÑíÎ : ','to date:'

insert into [StrSource] 
([Ar],[En])
select  ' ÅÑÓÇá ÑÓÇáÉ ÈÔßá Âáí ÚäÏ ÇáÅÑÌÇÚ ÝæÑÇð','Send a message automatically at return immediately'

insert into [StrSource] 
([Ar],[En])
select  ' ÅÑÓÇá ÑÓÇáÉ ÈÔßá Âáí ÞÈá ÇäÊåÇÁ ÇáÚÞÏ ÈÜ','Send a message automatically before the end of the contract'

insert into [StrSource] 
([Ar],[En])
select  ' ÇáÅÎÊÕÇÑÇÊ','Shortcuts'

insert into [StrSource] 
([Ar],[En])
select  ' ÇáÃÏæÇÊ','Tools'

insert into [StrSource] 
([Ar],[En])
select  ' ÇáÑÓÇÆá ÇáÞÕíÑÉ SMS','Short Message SMS'

insert into [StrSource] 
([Ar],[En])
select  ' ÇáÛÇÁ ÊÝÚíá ÍÝÙ ÇáãáÝÇÊ æÇáæËÇÆÞ æÇáÕæÑ  Ýí ÞÇÚÏÉ ÇáÈíÇäÇÊ','Deactivate save files, documents and images in the database'

insert into [StrSource] 
([Ar],[En])
select  ' ÇáÞíÏ ÇáãÍÇÓÈí','Journal Entry'

insert into [StrSource] 
([Ar],[En])
select  ' ÈÇáÅÖÇÝÉ Çáì ','in addition to'

insert into [StrSource] 
([Ar],[En])
select  ' ÊÚÏíá ÊÚííä ÇáãæÞÚ','Reset Location'

insert into [StrSource] 
([Ar],[En])
select  ' Êã ØÈÇÚÉ ÈÑÇÁÉ ÇáÐãÉ ÈæÇÓØÉ','Clearance printed by'

insert into [StrSource] 
([Ar],[En])
select  ' ÊäÒíá ÞíãÉ ÇáÏÝÚÉ ÇáãÓÊÍÞÉ ÈÚÏ ÈíÚ ÇáÔÞÞ','insert payable installment value after the sale of apartments'

insert into [StrSource] 
([Ar],[En])
select  ' ÎØÃ Ýí ÇÓã ÇáãÓÊÎÏã Ãæ ßáãÉ ÇáãÑæÑ ','Wrong username or password'

insert into [StrSource] 
([Ar],[En])
select  ' ÎíÇÑÇÊ ÚÇãÉ','General Options'

insert into [StrSource] 
([Ar],[En])
select  ' ÔÞÉ','Flat'

insert into [StrSource] 
([Ar],[En])
select  ' ÚÏÇ ÓÈÈ ÇáÅÑÌÇÚ','Except return reason'

insert into [StrSource] 
([Ar],[En])
select  ' ÚÞæÏ ÓÇÈÞÉ','Previous contracts'

insert into [StrSource] 
([Ar],[En])
select  ' áÚÇãá ÇáÕíÇäÉ  SMS','Send SMS to maintenance worker'

insert into [StrSource] 
([Ar],[En])
select  ' ãÌãæÚÇÊ ÍÓÇÈ ÇáßãíÉ','Calculate quantity groups'

insert into [StrSource] 
([Ar],[En])
select  ' äÓÎÉ ÚÑÖ áÇ íãßä ÇáÏÎæá Çáì ÞÇÚÏÉ ÇáÈíÇäÇÊ','Demo version you can''t access this database'

insert into [StrSource] 
([Ar],[En])
select  ' åá ÊÑíÏ ÍÝÙ ÇáÊÛíÑÇÊ Úáì ÚãæÏ ÇáÊäÈíå ãØÈæÚ ¿','Do you want to save the changes on the alarm printed coloumn ?'

insert into [StrSource] 
([Ar],[En])
select  ' æáÛÇíÉ ','To'

insert into [StrSource] 
([Ar],[En])
select  ' íÌÈ ÊäÕíÈ ÇáäÓÎÉ ÇáÌÏíÏÉ','You must install new version'

insert into [StrSource] 
([Ar],[En])
select  '&ÊÚÏíá','&Modify'

insert into [StrSource] 
([Ar],[En])
select  '&ÍÝÙ ','&Save'

insert into [StrSource] 
([Ar],[En])
select  '[A] ÅÓã ÇáÈäÇÁ','[A] Building Name'

insert into [StrSource] 
([Ar],[En])
select  '[A] ÇÓã ÇáÒÈæä ÚÑÈí','[A] CustomerArabic Name'

insert into [StrSource] 
([Ar],[En])
select  '[A] ÇáÊÕäíÝ [B] ÇáØæá  [C] ÇáÚÑÖ [D] ÇáÇÑÊÝÇÚ','[A] Catery [B] Length [C] Width [D] Height'

insert into [StrSource] 
([Ar],[En])
select  '[A] ÇáÍÓÇÈ','[A] Account'

insert into [StrSource] 
([Ar],[En])
select  '[A] ÊÇÑíÎ ÇáÓäÏ','[A] Voucher Date'

insert into [StrSource] 
([Ar],[En])
select  '[A] ÑÞã ÇáæÑÞÉ','[A] Paper No'

insert into [StrSource] 
([Ar],[En])
select  '[B] ÇÓã ÇáÈäÇÁ','[B] Building name'

insert into [StrSource] 
([Ar],[En])
select  '[B] ÇÓã ÇáÒÈæä áÇÊíäí','[B] Customer Latin  Name'

insert into [StrSource] 
([Ar],[En])
select  '[B] ÇáÍÓÇÈ ÇáãÞÇÈá','[B] Contra Account'

insert into [StrSource] 
([Ar],[En])
select  '[B] ÑÞã ÇáÚÞÇÑ','[B] Property No'

insert into [StrSource] 
([Ar],[En])
select  '[B] ÑÞã ÈØÇÞÉ ÇáÓäÏ ','[B] Voucher Card No'

insert into [StrSource] 
([Ar],[En])
select  '[B] ÞíãÉ ÇáæÑÞÉ','[B] paper Value'

insert into [StrSource] 
([Ar],[En])
select  '[C] ÇáÞíãÉ','[C] Value'

insert into [StrSource] 
([Ar],[En])
select  '[C] ÊÇÑíÎ ÇáÇÓÊÍÞÇÞ','[C] Due Date'

insert into [StrSource] 
([Ar],[En])
select  '[C] ÑÞã ÇáÔÞÉ','[C] Flat Number'

insert into [StrSource] 
([Ar],[En])
select  '[C] ÑÞã ÇáÔßæì  ','[C] Complaint No'

insert into [StrSource] 
([Ar],[En])
select  '[C] ÑÞã ÇáÚÞÇÑ','[C] Property No'

insert into [StrSource] 
([Ar],[En])
select  '[C] ÞíãÉ ÇáÔíß ','[C] ChequeValue'

insert into [StrSource] 
([Ar],[En])
select  '[C] ãÏíä','[C] Debit'

insert into [StrSource] 
([Ar],[En])
select  '[C]ÅÓã ÇáÒÈæä','[C] Customer name'

insert into [StrSource] 
([Ar],[En])
select  '[D] ÅÓã ÇáÈäÇÁ ÚÑÈí','[D] Building Arabic Name'

insert into [StrSource] 
([Ar],[En])
select  '[D] ÅÓã ÇáÈäß','[D] Bank Name'

insert into [StrSource] 
([Ar],[En])
select  '[D] ÇáÏÇÆä','[D] Credit'

insert into [StrSource] 
([Ar],[En])
select  '[D] ÊÇÑíÎ ÊÍÑíÑ ÇáÔßæì ','[D] Complaint Date'

insert into [StrSource] 
([Ar],[En])
select  '[D] ÑÞã ÃãÑ ÇáÕíÇäÉ','[D] Maintenance Order No'

insert into [StrSource] 
([Ar],[En])
select  '[D] ÑÞã ÇáÔíß ','[D] Cheque No'

insert into [StrSource] 
([Ar],[En])
select  '[D] ÑÞã ÇáÚÞÏ','[D] Contract No'

insert into [StrSource] 
([Ar],[En])
select  '[E] ÅÓã ÇáÈäÇÁ áÇÊíäí','[E]  Building Latin Name'

insert into [StrSource] 
([Ar],[En])
select  '[E] ÅÓã ÇáãÞÈæÖ ãäå','[E] Recipient Name'

insert into [StrSource] 
([Ar],[En])
select  '[E] ÇÓã ÇáÈäÇÁ  ÚÑÈí','[E] Building Arabic  Name'

insert into [StrSource] 
([Ar],[En])
select  '[E] ÇÓã ÇáÈäß  ','[E] Bank Name'

insert into [StrSource] 
([Ar],[En])
select  '[E] ÇáÑÞã','[E] Number'

insert into [StrSource] 
([Ar],[En])
select  '[E] ÈíÇä ÇáÓäÏ','[E] Voucher Details'

insert into [StrSource] 
([Ar],[En])
select  '[E]ÑÞã ÇáÚÞÏ ÇáÊÓáÓáí','[E] Contract serial No'

insert into [StrSource] 
([Ar],[En])
select  '[F] ÅÓã ÇáÈäÇÁ áÇÊíäí','[F] Building latin name'

insert into [StrSource] 
([Ar],[En])
select  '[F] ÇÓã ÇáÈäÇÁ  áÇÊíäí','[F] Building Latin  Name'

insert into [StrSource] 
([Ar],[En])
select  '[F] ÈíÇä ÇáÞáã','[F] Line Details'

insert into [StrSource] 
([Ar],[En])
select  '[F] ÊÇÑíÎ ÇáÅÓÊÍÞÇÞ','[F] Due Date'

insert into [StrSource] 
([Ar],[En])
select  '[F] ÊÇÑíÎ ÇáÊÍÑíÑ','[F] Issue Date'

insert into [StrSource] 
([Ar],[En])
select  '[G] ÇÓã ÇáãÏÝæÚ áå','[G] Payee name'

insert into [StrSource] 
([Ar],[En])
select  '[G] ÇÓã ÍÓÇÈ ÇáÓäÏ','[G] Voucher Account Name'

insert into [StrSource] 
([Ar],[En])
select  '[G] ÇáÚÇãá ÇáãÓÄæá ','[G] Worker Name'

insert into [StrSource] 
([Ar],[En])
select  '[G] ÊÇÑíÎ ÅäÊåÇÁ ÇáÚÞÏ','[G] Contract expiry date'

insert into [StrSource] 
([Ar],[En])
select  '[G] ÊÇÑíÎ ÈÏÇíÉ ÇáÚÞÏ','[G] Contract Starting Date'

insert into [StrSource] 
([Ar],[En])
select  '[G] ÑÞã ÇáÔÞÉ ','[G] Flat No'

insert into [StrSource] 
([Ar],[En])
select  '[H] ÅÓã ÇáÈäÇÁ','[H] Building Name'

insert into [StrSource] 
([Ar],[En])
select  '[H] ÅÓã ÍÓÇÈ ÇáÞáã','[H] Line Account Name'

insert into [StrSource] 
([Ar],[En])
select  '[H] ÇáÍÇáÉ  ','[H] Status'

insert into [StrSource] 
([Ar],[En])
select  '[H] ÊÇÑíÎ äåÇíÉ ÇáÚÞÏ','[H] Contract End Date'

insert into [StrSource] 
([Ar],[En])
select  '[H] ÑÞã ÇáÚÞÇÑ','[H] Property No'

insert into [StrSource] 
([Ar],[En])
select  '[H] ÑÞã ÇáÚÞÏ  ','[H] Contract No'

insert into [StrSource] 
([Ar],[En])
select  '[H] ÑÞã åÇÊÝ ÇáÌæÇá ááÚÇãá ÇáãÓÄæá ','[H] Worker Mobile No'

insert into [StrSource] 
([Ar],[En])
select  '[H]ÅÓã ÇáÒÈæä áÇÊíäí ','[H] Customer latin name'

insert into [StrSource] 
([Ar],[En])
select  '[I] ÇÓã ÇáÈäÇÁ  ÚÑÈí','[I] Arabic Building Name'

insert into [StrSource] 
([Ar],[En])
select  '[I] ÊÇÑíÎ ÇáÇäÊåÇÁ ÇáãÊæÞÚ ','[I] Expected completion date'

insert into [StrSource] 
([Ar],[En])
select  '[J] ÇÓã ÇáÈäÇÁ  áÇÊíäí','[J] Latin Building Name'

insert into [StrSource] 
([Ar],[En])
select  '[J] ÑÞã ÇáÔÞÉ','[J] Flat No'

insert into [StrSource] 
([Ar],[En])
select  '[J]ÊÇÑíÎ ÈÏÇËÉ ÇáÕíÇäÉ','[J] Maintenance Starting Date'

insert into [StrSource] 
([Ar],[En])
select  '[K] ÊÇÑíÎ ÇáÅÑÌÇÚ','[K] Return Date'

insert into [StrSource] 
([Ar],[En])
select  '[K] ÊÇÑíÎ ÇáÅÞÝÇá','[K] Closing Date'

insert into [StrSource] 
([Ar],[En])
select  '[K] ÊÇÑíÎ ÇáÊÍÕíá ','[K] Collection Date'

insert into [StrSource] 
([Ar],[En])
select  '[K] ÑÞã ÇáÚÞÏ','[K] Contract No'

insert into [StrSource] 
([Ar],[En])
select  '[L] ÇÓã ÇáÚÇãá ÚÑÈí','[L] Arabic worker name'

insert into [StrSource] 
([Ar],[En])
select  '[L] ÇáãáÇÍÙÇÊ','[L] Note'

insert into [StrSource] 
([Ar],[En])
select  '[L] ÞíãÉ ÇáÚÞÏ','[L] Contract Value'

insert into [StrSource] 
([Ar],[En])
select  '[M] ÅÓã ÇáäãØ áÇÊíäí','[M] Latin pattern name'

insert into [StrSource] 
([Ar],[En])
select  '[M] ÇÓã ÇáÚÇãá áÇÊíäí','[M] Latin worker name'

insert into [StrSource] 
([Ar],[En])
select  '[M] ÑÞã ÇáÔíß ÇáÊÓáÓáí','[M] Cheque serial no'

insert into [StrSource] 
([Ar],[En])
select  '[N] ÅÓã ÇáäãØ ÚÑÈí','[N] pattern arabic name'

insert into [StrSource] 
([Ar],[En])
select  '[N] ÑÞã ÇáÔÞÉ ','[N] Flat No'

insert into [StrSource] 
([Ar],[En])
select  '[N] ÑÞã ÇáÔíß ÇáÊÓáÓáí','[N] Cheque Serial No'

insert into [StrSource] 
([Ar],[En])
select  '[N] ÑÞã ÇáÚÞÇÑ','[N] Property No'

insert into [StrSource] 
([Ar],[En])
select  '[N] ÑÞã ÇáÚÞÏ ÇáÊÓáÓáí','[N] Contract Serial No'

insert into [StrSource] 
([Ar],[En])
select  '[N] ãßÇä ÇáÚÞÏ','[N] Contract Place'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÊÏæíÑ ÈíÇäÇÊ ÇáÓäÉÇáÍÇáíÉ Çáì ãáÝ ÌÏíÏ','Data of this year will be transferred to new file'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÊÑÍíá ÇáÞíæÏ ÇáãÍÏÏÉ','Selected entries will be posted'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÊØÈíÞ ÇáÊÛíÑÇÊ','Changes will be applied'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÊØÈíÞ ÇáÊÛíÑÇÊåá ÊÑíÏ ÇáãÊÇÈÚÉ¿','Changes will be applied
Do you want to continue?'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÊÚÏíá ÇáÈíÇäÇÊ','Data will be modified'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÊÚÏíá ßÇÝÉ ÃÓÚÇÑ ÇáæÍÏÇÊ ááÈäÇÁ ÇáãÍÏÏ','All prices of selected building units wil be updated'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÊÚÏíá ßÇÝÉ ÃÓÚÇÑ ÇáæÍÏÇÊ ááÈäÇÁ ÇáãÍÏÏ
åá ÊÑíÏ ÇáãÊÇÈÚÉ','All prices of selected building units wil be updated
Do you want to continue?
'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÊäÝíÐ ÇáÚãáíÉ æ áä ÊÓÊØíÚ ÇáÊÑÇÌÚ','Process will be implemented and will not be able to undo'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÍÐÝ ÃíÖÇ ÌãíÚ ÇáÓäÏÇÊ ÇáãÑÊÈØÉ Åä æÌÏÊ','All related entries will be deleted'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÍÐÝ ÃíÖÇ ÌãíÚ ÇáÔíßÇÊ ÇáãÑÊÈØÉ Åä æÌÏÊ','All related cheque will be deleted'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÍÐÝ ßá ÇáãáÝÇÊ ÇáãÑÝÞÉ ãä ÞÇÚÏÉ ÇáÈíÇäÇÊ æáä íãßä ÇáÊÑÇÌÚ Úä ÇáÚãáíÉ','All files will be deleted from the database, this operation can not be reversed'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã ÍÐÝ ßá ÇáæËÇÆÞ æÇáÕæÑ ÇáãÑÝÞÉ ãä ÞÇÚÏÉ ÇáÈíÇäÇÊ','All attached documents and images will be deleted from the database'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã äÓÎ ÇáãáÝÇÊ ÇáãÍÏÏÉ Çáì ÇáãÓÇÑ ÇáÌÏíÏ','Selected files will be copied to the the new path'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã äÓÎ ßá ÇáæËÇÆÞ æÇáÕæÑ ÇáãÄÑÔÝÉ Çáì ÞÇÚÏÉ ÇáÈíÇäÇÊ','All attached documents and images will be copied to the database'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã äÔÑ ÕáÇÍíÇÊ ÇáãÓÊÎÏã ','This process will publish user permissions'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã äÞá ÌãíÚ ÇáÈØÇÞÇÊ','This process will move all cards'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã äÞá ÌãíÚ ÇáãáÝÇÊ ÇáãÍÏÏ Çáì ÇáãÌáÏ ÇáãÍÏÏ','Selected files will be transferred to the specified folder'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÊã æÞÝ ÇáÊÚÇãá ãÚ ÇáÈíÇäÇÊ ÇáÍÇáíÉ','This process will stop dealing with the current data'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÎÊáÝ ÇáÑÕíÏ ÍÓÈ ÇáÝÒÑ ÇáÎÇÕ ÇáãÍÏÏ ãä ÞÈáß','Balance will be different according to specific sorting'

insert into [StrSource] 
([Ar],[En])
select  'ÓíÓÇÚÏß åÐå ÇáãÚÇáÌ Ýí ÊÏæíÑ ÇáÈíÇäÇÊ ÈØÑíÞÉ ÓåáÉ æ ÂãäÉ','This wizard will help you to close the file in an easy and safe way'

insert into [StrSource] 
([Ar],[En])
select  'ÔÑÇÁ','Purchase '

insert into [StrSource] 
([Ar],[En])
select  'ÔÑØ','Condition'

insert into [StrSource] 
([Ar],[En])
select  'ÔÑÞÇð','East'

insert into [StrSource] 
([Ar],[En])
select  'ÔÑßÉ','Company'

insert into [StrSource] 
([Ar],[En])
select  'ÔÑæØ ÇáÏÝÚ','Payment terms'

insert into [StrSource] 
([Ar],[En])
select  'ÔÑæØ ÇáÚÞÏ','Contract terms'

insert into [StrSource] 
([Ar],[En])
select  'ÔÑæØ ÇáãÈáÛ','Amount terms'

insert into [StrSource] 
([Ar],[En])
select  'ÔÑíØ ÇáÊÐßíÑ','Remind bar'

insert into [StrSource] 
([Ar],[En])
select  'ÔÑíØ ÇáÊäÈíåÇÊ','Notifications bar'

insert into [StrSource] 
([Ar],[En])
select  'ÔÚÈÇä','Shaban'

insert into [StrSource] 
([Ar],[En])
select  'ÔÞÉ','Flat .'

insert into [StrSource] 
([Ar],[En])
select  'ÔÞÉ ÊÌãíÚíÉ','Assemblage flat'

insert into [StrSource] 
([Ar],[En])
select  'ÔÞÉ0101','Appartment 1010'

insert into [StrSource] 
([Ar],[En])
select  'ÔÞÞ','Apartments'

insert into [StrSource] 
([Ar],[En])
select  'ÔÞÞ ÇáÈäÇÁ','Building flats'

insert into [StrSource] 
([Ar],[En])
select  'ÔÞÞ ÇáÎÏã','Servants flats'

insert into [StrSource] 
([Ar],[En])
select  'ÔÞÞ ÇáÓÇÆÞíä','Drivers flats'

insert into [StrSource] 
([Ar],[En])
select  'ÔÞÞ æ ãÍáÇÊ ÇáÈäÇÁ','Building shops / flats'

insert into [StrSource] 
([Ar],[En])
select  'Ôßæì ÇáÕíÇäÉ','Maintenance complaint'

insert into [StrSource] 
([Ar],[En])
select  'ÔãÇáÇð','North'

insert into [StrSource] 
([Ar],[En])
select  'ÔåÑ','month'

insert into [StrSource] 
([Ar],[En])
select  'ÔåÑí','Monthly'

insert into [StrSource] 
([Ar],[En])
select  'ÔåÑíä','2 month'

insert into [StrSource] 
([Ar],[En])
select  'ÔæÇá','Shawal'

insert into [StrSource] 
([Ar],[En])
select  'Ôíß','cheque'

insert into [StrSource] 
([Ar],[En])
select  'Ôíß ãÏÝæÚ Åáì','Cheque paid to'

insert into [StrSource] 
([Ar],[En])
select  'Ôíß ãÞÈæÖ ãä','Cheque received from'

insert into [StrSource] 
([Ar],[En])
select  'ÔíßÇÊ','Cheques'

insert into [StrSource] 
([Ar],[En])
select  'ÔíßÇÊ ÍÓÈ ÎØÉ','cheques by plan'

insert into [StrSource] 
([Ar],[En])
select  'ÔíßÇÊ ÏÝÚ','Payable cheques'

insert into [StrSource] 
([Ar],[En])
select  'ÔíßÇÊ ÞÈÖ','Recievable cheques'

insert into [StrSource] 
([Ar],[En])
select  'ÔíßÇÊ ãÓÊÍÞÉ','Due cheques'

insert into [StrSource] 
([Ar],[En])
select  'ÕÇÍÈ ÇáÚÞÇÑ','Property owner'

insert into [StrSource] 
([Ar],[En])
select  'ÕÇÝí ÇáÎÓÇÑÉ','Net loss'

insert into [StrSource] 
([Ar],[En])
select  'ÕÇÝí ÇáÑÈÍ','Net profit'

insert into [StrSource] 
([Ar],[En])
select  'ÕÇÝí ÇáãÈáÛ ÇáãÓÊÍÞ','Net due amount'

insert into [StrSource] 
([Ar],[En])
select  'ÕÇÝí ÇáãÈáÛ ÇáãÓÊÍÞ ááãÇáß / ÇáÒÈæä','Net due amount to Owner / Customer'

insert into [StrSource] 
([Ar],[En])
select  'ÕÇÝí ÇáãÓÊÍÞ ááãÓÊÃÌÑ','Net due amount for customer'

insert into [StrSource] 
([Ar],[En])
select  'ÕÑÝ ÕÍí','Sanitation'

insert into [StrSource] 
([Ar],[En])
select  'ÕÝÍÇÊ ÇáÈØÇÞÉ','Card pages'

insert into [StrSource] 
([Ar],[En])
select  'ÕÝÑ','Safar'

insert into [StrSource] 
([Ar],[En])
select  'ÕáÇÍíÇÊ ÇáÃÈäíÉ','Buildings Permission'

insert into [StrSource] 
([Ar],[En])
select  'ÕáÇÍíÇÊ ÇáÚÞæÏ','Contracts permission'

insert into [StrSource] 
([Ar],[En])
select  'ÕáÇÍíÇÊ ÇáÝÑæÚ','Branches permissions'

insert into [StrSource] 
([Ar],[En])
select  'ÕáÇÍíÇÊ ÇáÞæÇÆã','Menu permissions'

insert into [StrSource] 
([Ar],[En])
select  'ÕäÏæÞ ÇáÈÑíÏ','POBox'

insert into [StrSource] 
([Ar],[En])
select  'ÕäÏæÞ ÈÑíÏ','P.O.B'

insert into [StrSource] 
([Ar],[En])
select  'ÕæÑ','Photos'

insert into [StrSource] 
([Ar],[En])
select  'ÕíÇäÉ','File maintenance'

insert into [StrSource] 
([Ar],[En])
select  'ÕíÇäÉ ÃÕá','Asset maintenance'

insert into [StrSource] 
([Ar],[En])
select  'ÕíÇäÉ ÇáÚÞÇÑÇÊ','Units Maintenance'

insert into [StrSource] 
([Ar],[En])
select  'ÖÈØ ÚÑÖ ÇáÃÚãÏÉ','Adjust columns width'

insert into [StrSource] 
([Ar],[En])
select  'ÖÛØ ÇáäÓÎÉ ÇáÅÍÊíÇØíÉ','Compress backup'

insert into [StrSource] 
([Ar],[En])
select  'Öã ÇáÓäæÇÊ ÇáÓÇÈÞÉ','Included previous years'

insert into [StrSource] 
([Ar],[En])
select  'ØÇÈÞ ãíÒÇäíä','Mizanin floor'

insert into [StrSource] 
([Ar],[En])
select  'ØÈÇÚÉ','Print'

insert into [StrSource] 
([Ar],[En])
select  'ØÈÇÚÉ ÃÕæá ÇáÓäÏÇÊ ÇáÛíÑ ãÑÍáÉ','Print unposted entreis origin'

insert into [StrSource] 
([Ar],[En])
select  'ØÈÇÚÉ ÅíÕÇá','Print receipt'

insert into [StrSource] 
([Ar],[En])
select  'ØÈÇÚÉ ÇáÅíÕÇáÇÊ','Print receipts'

insert into [StrSource] 
([Ar],[En])
select  'ØÈÇÚÉ ÇáÊäÈíå','Print warning'

insert into [StrSource] 
([Ar],[En])
select  'ØÈÇÚÉ ÇáÓÌá','Print log'

insert into [StrSource] 
([Ar],[En])
select  'ØÈÇÚÉ ÇíÕÇá','Print Reciept'

insert into [StrSource] 
([Ar],[En])
select  'ØÈÇÚÉ ÈÑÇÁÉ ÇáÐãÉ','Clearance print'

insert into [StrSource] 
([Ar],[En])
select  'ØÈÇÚÉ ÈÑÇÁÉ ÐãÉ','Print clearance'

insert into [StrSource] 
([Ar],[En])
select  'ØÈÇÚÉ ÕæÑÉ','Print photo'

insert into [StrSource] 
([Ar],[En])
select  'ØÈÇÚÉ ãÎÕÕÉ','Custom print'

insert into [StrSource] 
([Ar],[En])
select  'ØÈíÚÉ ÇáÃÑÖ','Nature of the land'

insert into [StrSource] 
([Ar],[En])
select  'ØÈíÚÉ ÇáãäØÞÉ','Nature area'

insert into [StrSource] 
([Ar],[En])
select  'ØÑÞ ÍÓÇÈ ÇáßãíÉ','Quantity calculation methods'

insert into [StrSource] 
([Ar],[En])
select  'ØÑíÞÉ  ÍÓÇÈ ÇáßåÑÈÇÁ','Electricity calculation method'

insert into [StrSource] 
([Ar],[En])
select  'ØÑíÞÉ ÇáÅåÊáÇß','Depreciation method'

insert into [StrSource] 
([Ar],[En])
select  'ØÑíÞÉ ÇáÊËãíä','Evaluation method'

insert into [StrSource] 
([Ar],[En])
select  'ØÑíÞÉ ÇáÊÛííÑ','Change type'

insert into [StrSource] 
([Ar],[En])
select  'ØÑíÞÉ ÇáÍÓÇÈ','Calculation method'

insert into [StrSource] 
([Ar],[En])
select  'ØÑíÞÉ ÇáÍÓÇÈ ÇáãÇÁ','Water calculation method'

insert into [StrSource] 
([Ar],[En])
select  'ØÑíÞÉ ÇáÏÝÚ','Payment type'

insert into [StrSource] 
([Ar],[En])
select  'ØÑíÞÉ ÇáÏÝÚ äÕÇð','Payment method in words'

insert into [StrSource] 
([Ar],[En])
select  'ØÑíÞÉ ÇáÔÍä','Shipping Method'

insert into [StrSource] 
([Ar],[En])
select  'ØÑíÞÉ ÇãÊáÇß ÈäÇÁ','Type of building owner ship'

insert into [StrSource] 
([Ar],[En])
select  'ØÑíÞÉ ÍÓÇÈ ÇáßãíÉ','Calculating quantity method'

insert into [StrSource] 
([Ar],[En])
select  'ØáÈ ÇáÅÎáÇÁ','Evacuation request'

insert into [StrSource] 
([Ar],[En])
select  'Øæá ÇáÓæÑ ÇáÎÇÑÌí','Fence length'

insert into [StrSource] 
([Ar],[En])
select  'ØíÇÚÉ','Print.'

insert into [StrSource] 
([Ar],[En])
select  'ÙåæÑ äÇÝÐÉ ÇáÃÞÓÇØ ÚäÏ ÅÖÇÝÉ ÇáÚÞÏ','Show checks generation window when adding contract'

insert into [StrSource] 
([Ar],[En])
select  'ÚÇÏí','Normal'

insert into [StrSource] 
([Ar],[En])
select  'ÚÇáí','High'

insert into [StrSource] 
([Ar],[En])
select  'ÚÇã','General'

insert into [StrSource] 
([Ar],[En])
select  'ÚÇã áßá ÇáãÓÊÎÏãíä','For all users'

insert into [StrSource] 
([Ar],[En])
select  'ÚÇãá ÃãÑ ÇáÕíÇäÉ','Worker maintenance order'

insert into [StrSource] 
([Ar],[En])
select  'ÚÇãá ÇáÊÍæíá','Exchange'

insert into [StrSource] 
([Ar],[En])
select  'ÚÇãá ÇáÕíÇäÉ','Maintenance worker'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÇÏ ÇáßåÑÈÇÁ ÇáÍÇáí','Electricity current meter'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÇÏ ÇáßåÑÈÇÁ ÇáÓÇÈÞ','Electricity previous meter'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÇÏ ÇáãÇÁ ÇáÍÇáí','Water current meter'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÇÏ ÇáãÇÁ ÇáÓÇÈÞ','Water previous meter'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÃíÇã ÇáÅíÑÇÏ','Revenue days No'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÃíÇã ÇáÊÇÎíÑ','Delay days No'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÃíÇã ÇáÊÇÎíÑ Èíä','Delay days No between'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÃíÇã ÇáÚÞÏ','Number of days contract'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÃÑÇÖí ÇáãÄÌÑÉ','Number of leased land'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÃÑÇÖí ÛíÑ ÇáãÄÌÑÉ','Number of non-leased land'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÃÑÞÇã ÈÚÏ ÇáÝÇÕáÉ ÇáÅÌÈÇÑíÉ','Number of digits after required comma'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÃÑÞÇã ÈÚÏ ÇáÝÇÕáÉ ÇáÅÎÊíÇÑíÉ','Number of digits after optional comma'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÃÞÓÇØ','Number of Installments'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÃíÇã','Number of days'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÃíÇã ÇáÝÇÑÛÉ','Empty days No'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÃíÇã ÇáãÊÈÞíÉ','Remaining days No'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÃíÇã ÇáãÊÈÞíÉ ááÍÌÒ ÃÕÛÑ ãä','Remaining days number of reservation is smaller than'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÃíÇã ÇáãÓÊÍÞÉ','Due days No'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÃíÇã ãä','Number of days from'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÇÈäÇÁ','number of children'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÍÏÇÆÞ','Gardens No'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÍãÇãÇÊ','Bathroom No'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÏÝÚÇÊ ÇáãÊÃÎÑÉ','Late payments No'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÒíÇÑÇÊ','Visits Count'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÓÇÚÇÊ','Working hours'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÓÇßäíä','Residents count'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÓäæÇÊ','Number of Years'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÔÑÝÇÊ','Balcony No'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÔÞÞ','Flats count'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÔÞÞ ÇáÊí ÚáíåÇ ÏÚæì ÞÖÇÆíÉ','Number of flats has lawsuit'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÔÞÞ ÇáãÄÌÑÉ','Number of leased flats'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÔÞÞ ÛíÑ ÇáãÄÌÑÉ','Number of non-leased flats'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÔÞÞ Ýí ÇáØÇÈÞ','Flats No in floor'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÔæÇÑÚ','Streets No'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáØæÇÈÞ','Floors count'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÚÞæÏ','Number of contracts'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÚÞæÏ ÇáÍÇáíÉ','Current contracts No'

insert into [StrSource] 
([Ar],[En])
select  '[O] ÇÓã ÇáÈäÇÁ  áÇÊíäí','[O] Latin building name'

insert into [StrSource] 
([Ar],[En])
select  '[O] ÊÇÑíÎ ÇáÚãáíÉ','[O] Operation date'

insert into [StrSource] 
([Ar],[En])
select  '[P] ÇÓã ÇáÈäÇÁ  ÚÑÈí','[P] Arabic building name'

insert into [StrSource] 
([Ar],[En])
select  '[P] ÊÇÑíÎ äåÇíÉ ÇáÅÓÊÍÞÇÞ','[P] Due End Date'

insert into [StrSource] 
([Ar],[En])
select  '[Q] æÕÝ ÇáãÔßáÉ','[Q] Problem description'

insert into [StrSource] 
([Ar],[En])
select  '[R] ÌæÇá ÇáÒÈæä','[R] Customer mobile'

insert into [StrSource] 
([Ar],[En])
select  '[T] ÊÇÑíÎ ÇáÊÍÑíÑ','[T] Issue date'

insert into [StrSource] 
([Ar],[En])
select  '[V] ÇáãÈáÛ ÇáãÍÕá','[V] Collected amount'

insert into [StrSource] 
([Ar],[En])
select  '<ÇáÊÇáí>','<<   Next'

insert into [StrSource] 
([Ar],[En])
select  '<ÑÕíÏ ÇáÒÈæä>','<Customer balance>'

insert into [StrSource] 
([Ar],[En])
select  '<ÚÏÏ ÇíÇã ÇáÚÞÏ>','<Contract count days>'

insert into [StrSource] 
([Ar],[En])
select  '1   ãÏíä ÝÞØ','1   debit only'

insert into [StrSource] 
([Ar],[En])
select  '10 ÃÔåÑ','10 months'

insert into [StrSource] 
([Ar],[En])
select  '11 ÃÔåÑ','11 months'

insert into [StrSource] 
([Ar],[En])
select  '2   ÏÇÆä ÝÞØ','2   credit only'

insert into [StrSource] 
([Ar],[En])
select  '3   ãÏíä Ãæ ÏÇÆä','3   credit or debit'

insert into [StrSource] 
([Ar],[En])
select  '3 ÃÔåÑ','3 Months'

insert into [StrSource] 
([Ar],[En])
select  '4 ÃÔåÑ','4 months'

insert into [StrSource] 
([Ar],[En])
select  '5 ÃÔåÑ','5 months'

insert into [StrSource] 
([Ar],[En])
select  '6 ÃÔåÑ','6 Months'

insert into [StrSource] 
([Ar],[En])
select  '7 ÃÔåÑ','7 months'

insert into [StrSource] 
([Ar],[En])
select  '8 ÃÔåÑ','8 months'

insert into [StrSource] 
([Ar],[En])
select  '9 ÃÔåÑ','9 months'

insert into [StrSource] 
([Ar],[En])
select  'Selected checks will be addedåá ÊÑíÏ ÇáãÊÇÈÚÉ','Selected checks will be added, do you want to continue?'

insert into [StrSource] 
([Ar],[En])
select  'Warning !Selected flats building cards will be addedåá ÊÑíÏ ÇáãÊÇÈÚÉ¿','Warning !Selected flats building cards will be added, Do you want to continue ?'

insert into [StrSource] 
([Ar],[En])
select  'Å&ÖÇÝÉ','&Add'

insert into [StrSource] 
([Ar],[En])
select  'Å&ÛáÇÞ','&Close'

insert into [StrSource] 
([Ar],[En])
select  'ÅÈÏÃ ÈÇáÊÏæíÑ','Start Closing Books'

insert into [StrSource] 
([Ar],[En])
select  'ÅÈÏÇ','Start'

insert into [StrSource] 
([Ar],[En])
select  'ÅÈÞÇÁ ÇáãÓÊäÏÇÊ Ýí ãßÇäåÇ ÇáÇÕáí','Keep documents in the original location'

insert into [StrSource] 
([Ar],[En])
select  'ÅÌÇÒÉ ÇáÅÓÊíÑÇÏ','Allow Import'

insert into [StrSource] 
([Ar],[En])
select  'ÃÌÑÉ ÇáÓÇÚÉ','Hour fee'

insert into [StrSource] 
([Ar],[En])
select  'ÂÌá','Credit.'

insert into [StrSource] 
([Ar],[En])
select  'ÅÌãÇáí ÇáÅíÌÇÑ ÈÚÏ ÇáÍÓã','Total rent after discount'

insert into [StrSource] 
([Ar],[En])
select  'ÅÌãÇáí ÇáÅíÌÇÑ ÞÈá ÇáÍÓã','Total rent before discount'

insert into [StrSource] 
([Ar],[En])
select  'ÅÌãÇáí ÇáÊÃãíäÇÊ','Total Insurances'

insert into [StrSource] 
([Ar],[En])
select  'ÅÌãÇáí ÇáÑÓæã','Total Fees'

insert into [StrSource] 
([Ar],[En])
select  'ÅÌãÇáí ÇáÝÇÊæÑÉ','Total Invocie'

insert into [StrSource] 
([Ar],[En])
select  'ÅÌãÇáí ÇáãÈáÛ ÇáãÍÕá','Total collected amount'

insert into [StrSource] 
([Ar],[En])
select  'ÅÌãÇáí ÇáãÈáÛ ÇáãÓÊÍÞ','Total amount due'

insert into [StrSource] 
([Ar],[En])
select  'ÅÌãÇáí ÇáãÈáÛ ÇáãÓÊÍÞ ááãÇáß','Total amount due to owner'

insert into [StrSource] 
([Ar],[En])
select  'ÅÌãÇáí ÇáãÈáÛ ÛíÑ ÇáãÍÕá','Total uncollected amount'

insert into [StrSource] 
([Ar],[En])
select  'ÅÌãÇáí ÇáãÍÕá','Total collected'

insert into [StrSource] 
([Ar],[En])
select  'ÅÌãÇáí ÇáãÏÝæÚ','Total paid'

insert into [StrSource] 
([Ar],[En])
select  'ÅÌãÇáí ÊßáÝÉ ÇáÊØæíÑ','Total development cost'

insert into [StrSource] 
([Ar],[En])
select  'ÅÌãÇáí ÚÏÏ ÇáæÍÏÇÊ','Total number of units'

insert into [StrSource] 
([Ar],[En])
select  'ÅÌãÇáí ÞíãÉ ÇáÚÞÇÑ ÇáãØæÑ','Total Value Of Developed Property'

insert into [StrSource] 
([Ar],[En])
select  'ÃÌæÑ ÇáÕíÇäÉ','Maintenance fees'

insert into [StrSource] 
([Ar],[En])
select  'ÅÍÊÓÇÈ ÇáÚãæáÉ','Commission calculation '

insert into [StrSource] 
([Ar],[En])
select  'ÅÎÊÈÇÑ','Test'

insert into [StrSource] 
([Ar],[En])
select  'ÅÎÊÑ äæÚ ÇáÊÏæíÑ','Select file closing type'

insert into [StrSource] 
([Ar],[En])
select  'ÅÎÊíÇÑ ÇáÎØ','Font test'

insert into [StrSource] 
([Ar],[En])
select  'ÅÎÊíÇÑ ãÓÇÑ','Choose path'

insert into [StrSource] 
([Ar],[En])
select  'ÂÎÑ ÊÇÑíÎ ÊÍÕíá ÌÒÆí','Last date of partial collection'

insert into [StrSource] 
([Ar],[En])
select  'ÂÎÑ ÊÚÏíá ãä ÞÈá ÇáãÓÊÎÏã: ','Last modify by User:'

insert into [StrSource] 
([Ar],[En])
select  'ÂÎÑ ÊÚÏíá: ','Last modifiy:'

insert into [StrSource] 
([Ar],[En])
select  'ÂÎÑ ÓÚÑ','last price'

insert into [StrSource] 
([Ar],[En])
select  'ÂÎÑ ÓÚÑ ááÒÈæä','Customer last price'

insert into [StrSource] 
([Ar],[En])
select  'ÂÎÑ ÔÑÇÁ','Last purchase price'

insert into [StrSource] 
([Ar],[En])
select  'ÂÎÑ ÞÑÇÁÉ ááÚÏÇÏ','Last meter reading'

insert into [StrSource] 
([Ar],[En])
select  'ÅÎÑÇÌ','Output'

insert into [StrSource] 
([Ar],[En])
select  'ÅÎÑÇÌ ÇáãÇÏÉ ÈÇáÓÇáÈ','Negative products output'

insert into [StrSource] 
([Ar],[En])
select  'ÅÎÑÇÌ ãä ','Output from'

insert into [StrSource] 
([Ar],[En])
select  'ÅÎÝÇÁ Ýí äÇÝÐÉ ÇáÈÍË','Hide in search window'

insert into [StrSource] 
([Ar],[En])
select  'ÅÎÝÇÁ ãáÝ','Hide the file'

insert into [StrSource] 
([Ar],[En])
select  'ÅÏÇÑÉ','Management'

insert into [StrSource] 
([Ar],[En])
select  'ÅÏÇÑÉ ÃÑÇÖí','Land Management'

insert into [StrSource] 
([Ar],[En])
select  'ÅÏÇÑÉ ÇáÃäãÇØ     ','Types Manager'

insert into [StrSource] 
([Ar],[En])
select  'ÅÏÇÑÉ ÇáÊÑÇÎíÕ','MOSAI Manager'

insert into [StrSource] 
([Ar],[En])
select  'ÅÏÇÑÉ ÇáÚÞÇÑÇÊ','Properties management'

insert into [StrSource] 
([Ar],[En])
select  'ÅÏÇÑÉ ÇáãÓÊÎÏãíä','Users Manager'

insert into [StrSource] 
([Ar],[En])
select  'ÅÏÇÑÉ ÚÞÇÑÇÊ','Real Estate Management'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÍá ÍÓÇÈ ÅíÑÇÏÇÊ ÊÕÏíÞ ÇáÚÞÏ','Enter revenue contract registration account'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÍá ÍÓÇÈ ÇíÑÏÇÊ ÊÕÏíÞ ÇáÚÞÏ','Enter contract registration revenue account'

insert into [StrSource] 
([Ar],[En])
select  'ÅÏÎÇá','Input'

insert into [StrSource] 
([Ar],[En])
select  'ÅÏÎÇá ÇáÊÇãíä ÅáÒÇãí','Insurance required'

insert into [StrSource] 
([Ar],[En])
select  'ÅÏÎÇá ÇáÓäÏÇÊ ÇáäÞÏíÉ','Add cash Voucher'

insert into [StrSource] 
([Ar],[En])
select  'ÅÏÎÇá Çáì','Input to'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá  ÑÞã ÇáÔÞÉ','Enter flat No'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá  ÑÞã ÇáãÍá','Enter shop No'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÅÓã ÇáÈäÇÁ','Enter building name'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÅÓã ÇáÍÓÇÈ','Enter account name'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÅÓã ÇáÚãíá','Enter customer name'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÅÓã ÇáãÓÊÎÏã','Enter Username'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÅÓã ÇáãáÝ','Enter file name'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÅÓã ÇáãæÑÏ','Enter supplier name'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÅÓã ÕÇÍÈ ÇáÚÞÇÑ','Enter property owner name'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÅÓã ÕÇÍÈ ÇáÚÞÇÑ Ýí ÈØÇÞÉ ÇáÈäÇÁ','Enter property owner name in building card'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÅÓã ÕÇÍÈ ÇáÚÞÇÑ Ýí ÈØÇÞÉ ÇáÚÞÇÑ','Enter property owner name in property card'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÅÓã ÕÇÍÈ ÇáÚÞÇÑ Ýí ÈØÇÞÉ ÇáãæÞÝ','Enter owner name in parking card'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÅÓã ÕÇÍÈ ÇáÚÞÇÑ ááÓØÑ : ','Enter property owner name to line:'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÅÓã ÕÇÍÈ ÇáãæÞÝ Ýí ÈØÇÞÉ ÇáãæÞÝ','Enter parking owner name in parking card'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇÓã ÇáãÓÊÎÏã æßáãÉ ÇáãÑæÑ ááÏÎæá ááãáÝ','Enter User Name and Password to access the file'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÅÓã','Enter Name'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÈäÇÁ','Enter Building'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÈíÇä ááÞáã ','Enter line details'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÊÇÑíÎ','Enter date'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÊÇÑíÎ ááÓØÑ ','Enter date to line'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÊÚÇÏá Ýí ÇáÞáã ','Enter rate to line'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÍÓÇÈ','Enter account'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÍÓÇÈ ÇáÇÝÊÑÇÖí áäãØ ÇáÓäÏ ÇáäÞÏí','Enter the default account for cash voucher type'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÍÓÇÈ ÇáÇÝÊÑÇÖí áäãØ ÓäÏ ÇáÞÈÖ','Enter default account for receipt voucher type'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÍÓÇÈ ÇáÎÊÇãí','Enter closing account'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÍÓÇÈ ÇáÏÇÆä','Enter credit account'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÍÓÇÈ ÇáÏÇÆä ááÊÑÍíá','Enter credit account of deposit'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÍÓÇÈ ÇáÑÆíÓí áÊÃãíäÇÊ ÇáãÓÊÃÌÑíä Ýí ÈØÇÞÉ ÇáÈäÇÁ','Enter tenant''s Insurance  account in building card'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÍÓÇÈ ÇáÑÆíÓí ááãÓÊÃÌÑíä Ýí ÈØÇÞÉ ÇáÈäÇÁ','Enter tenant''s main account in building card'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÍÓÇÈ ÇáãÏíä','Enter debit account'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÍÓÇÈ ÇáãÏíä áÚãæáÉ ÇáÅÑÌÇÚ','Enter the credit account for the comission refunds'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÍÓÇÈ ÇáãÏíä ááÊÑÍíá','Enter debit account for deposits'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÍÓÇÈ ÇáãÞÇÈá','Enter conta account'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÍÓÇÈ Ýí ÈØÇÞÉ ÇáÈäÇÁ ','Enter account in building card'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÍÓÇÈÇÊ ÇáÅÝÊÑÇÖíÉ ááäãØ','Enter the default accounts for this type'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÑÞã','Enter number'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÑãÒ','Enter code'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÑãÒ ÃÑÞÇã ÝÞØ','Enter the code is numbers only'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÒÈæä','Enter customer'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÓäÉ','Enter year'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÚãáÉ','Enter Currency'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÝÑÚ','Enter branch'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáÞíãÉ','Enter value'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáäãØ ÇáÇæá','Enter the first pattern'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÇáäãØ ÇáËÇäí','Enter second pattern'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÊÇÑíÎ Ãæá ÇáãÏÉ','Enter beginning  period date'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÊÇÑíÎ Ãæá ÇáãÏÉ ÇáÌÏíÏ','Enter the new beginning  period date'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÊÇÑíÎ ÇáÅÓÊÍÞÇÞ','Enter due date'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÊÇÑíÎ ÇáÅÝÞÇá','Enter closing date'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÊÇÑíÎ ÇáÊÍÑíÑ','Enter issue date'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÊÇÑíÎ ÇáÊÑÍíá','Enter deposit date'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÊÇÑíÎ ÇáÔÑÇÁ','Enter purchase date'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÊÇÑíÎ ÈÏÇíÉ ÇáÅÓÊËãÇÑ','Enter investment starting date'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÊÇÑíÎ äåÇíÉ ÇáÚÞÏ','Enter contract end date'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÊÚÇÏá ÇáÚãáÉ','Enter currency rate'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÊÚÇÏá ÚãáÉ ÇáÅÓÊËãÇÑ','Enter currency rate of investment'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÊÚÇÏá ÚãáÉ ÇáÔÑÇÁ','Enter currency rate of purchase'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÊæÕíÝ ÇáãáÝ','Enter file description'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÊæÕíÝ ÇáãáÝ ÇáÌÏíÏ','Enter new file description'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÍÓÇÈ ÅíÑÇÏ ÇáÑÓæã ÇáÃÎÑì','Enter revenue account of other fees'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÍÓÇÈ ÅíÑÇÏ ÓÚÑ ÇáÚÞÏ','Enter revenue account of contract price'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÍÓÇÈ ÇáÅÑÌÇÚ ÇáÏÇÆä','Enter credit return account'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÍÓÇÈ ÇáÅÑÌÇÚ ÇáãÏíä','Enter debit return account'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÍÓÇÈ ÇáÅÞÝÇá ááÑÈÍ Ãæ ÇáÎÓÇÑÉ','Enter closing account of profit and loss'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÍÓÇÈ ÇáÈäÇÁ','Enter building account'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÍÓÇÈ ÇáÊÃãíä','Enter insurance account'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÍÓÇÈ ÇáÊÍÕíá ÇáÏÇÆä','Enter the credit collection account'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÍÓÇÈ ÇáÊÍÕíá ÇáãÏíä','Enter debit collection account'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÍÓÇÈ ÇáÍÓã','Enter discount account'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÍÓÇÈ ÇáÏÝÚÉ ÇáÃæáì','Enter down payment account'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÍÓÇÈ ÇáÑÓæã ááÞáã','Enter fees account for the line'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÍÓÇÈ ÇáÔíßÇÊ','Enter cheques account'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÍÓÇÈ ÇáÕäÏæÞ','Enter cash account'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÍÓÇÈ ÇáÚãæáÉ ãä ÇáÚãíá','Enter the commission from customer account'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÍÓÇÈ ÇáÚãæáÉ ãä ÕÇÍÈ ÇáÈäÇÁ','Enter commission from building owner account'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÍÓÇÈ ÇáÚãæáÉ ãä ÕÇÍÈ ÇáÚÞÇÑ','Enter commission from property owner account'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÍÓÇÈ ÇáÚãíá','Enter customer account'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÍÓÇÈ ÇáãÇáß','Enter owner account'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÍÓÇÈ ÇáãÔÑæÚ','Enter project account'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÍÓÇÈ ÇáãÕÇÑíÝ','Enter the expense account'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÍÓÇÈ ÇáãæÑÏ','Enter supplier account'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÍÓÇÈ ÕÇÍÈ ÇáÚÞÇÑ Ýí ÈØÇÞÉ ÇáÚÞÇÑ','Enter owner account in property card'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÍÓÇÈ ÝÑæÞÇÊ ÃÓÚÇÑ ÇáÕÑÝ Ýí ÅÚÏÇÏÇÊ ÇáÈÑäÇãÌ','Enter exchange rate account in program settings'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÑãÒ ÇáÍÓÇÈ','Enter account code'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÚÏÏ ÇáæÍÏÇÊ áåÐÇ ÇáÈäÇÁ','Enter units for this building'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÚãáÉ ÇáÅÓÊËãÇÑ','Enter investment currency'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÚãáÉ ÇáÔÑÇÁ','Enter purchase currency'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÚäæÇä ÇáÍÇÓÈ ÇáãÑßÈ Úáíå ÏÇÑÉ ÇáÍãÇíÉ (IpAddress)','Enter computer IP Address where the dongle was installed'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÞíãÉ ÇáÅÓÊËãÇÑ','Enter investment value'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÞíãÉ ÇáÊÃãíä','Enter the insurance value'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÞíãÉ ÇáÏÝÚÉ','Enter value payment'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ÞíãÉ ÇáÚÞÏ','Enter the contract value'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ãÈáÛ ÇáÔÑÇÁ','Enter purchase amount'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ãÑßÒ ÇáßáÝÉ','Enter cost center'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ãÑßÒ ÇáßáÝÉ ÇáÑÆíÓí','Enter main cost center'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ãÑßÒ ÇáßáÝÉ ááÞáã ','Enter cost center to line'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ãÑßÒ ßáÝÉ ÇáÃÑÖ  Ýí ÈØÇÞÉ ÇáÃÑÖ','Enter land cost center in land card'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ãÑßÒ ßáÝÉ ÇáÔÞÉ Ýí ÈØÇÞÉ ÇáÔÞÉ','Enter flat cost center in flat card'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ãÑßÒ ßáÝÉ ÇáÝíáÇ Ýí ÈØÇÞÉ ÇáÝíáÇ','Enter villa cost center in villa card'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ãÑßÒ ßáÝÉ ÇáãÍá Ýí ÈØÇÞÉ ÇáãÍá','Enter shop cost center in shop card'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ãÑßÒ ßáÝÉ ÇáãæÞÝ Ýí  ÈØÇÞÉÇáãæÞÝ','Enter parking cost center in parking card'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ãÓÇÑ ãáÝÇÊ  ÇáØÈÇÚÉ áåÐÇ ÇáäãØ ÈÔßá ÕÍíÍ','Enter print path for this pattern correctly'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá ãÓÇÑ ãáÝÇÊ  ÇáØÈÇÚÉ áåÐÇ ÇáäãØ ÈÔßá ÕÍíÍ','Enter the path print files for this pattern properly'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá äãØ ÇáÔíß','Enter cheque type'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá äãØ ÇáÝÇÊæÑÉ','Enter the invoice pattern'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá äãØ ÓäÏ ÇáÞÈÖ','Enter receipt voucher type'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá äæÚ ÇáÏÝÚ','Enter payment type'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏÎá äæÚ ÇáÚíä','Enter property type'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏäì ÓÚÑ ááÚÞÇÑ','The lowest price of the property'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏæÇÊ','Tools'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏæÇÊ ÎÇÑÌíÉ','External Tools'

insert into [StrSource] 
([Ar],[En])
select  'ÃÏæÇÊ ÎÇÑÌíÉ...','Extra Tools'

insert into [StrSource] 
([Ar],[En])
select  'ÅÐÇÃÑÏÊ ÇáÊÚÏíá ÇÖÛØ ÒÑ ÊÚÏíá','If you want to modify data press the Modify button'

insert into [StrSource] 
([Ar],[En])
select  'ÃÑÈÇÍ ÇáÔÞÞ','Profits flats'

insert into [StrSource] 
([Ar],[En])
select  'ÃÑÈÇÍ ÇáãæÇÏ','Materials profits'

insert into [StrSource] 
([Ar],[En])
select  'ÃÑÈÇÍ ÈíÚ ÇáÔÞÞ','Profits flats sales'

insert into [StrSource] 
([Ar],[En])
select  'ÅÑÌÇÚ','Refun'

insert into [StrSource] 
([Ar],[En])
select  'ÅÑÌÇÚ ÇáÔíß','cheque return'

insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇá','Send'

insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇá SMS','Send SMS'

insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇá SMS áãÌãæÚÉ','Send SMS to Group'

insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇá Âáí','Automatically Send'

insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇá Âáí ÚäÏ ÅÖÇÝÉ ÃãÑ ÇáÕíÇäÉ','Automatically send SMS when add maintenance order'

insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇá Âáí ÚäÏ ÅÖÇÝÉ Ôßæì','Automatically send SMS when add complaint'

insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇá Âáí ÚäÏ ÇáÅäåÇÁ','Automatically send SMS when termination'

insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇá Âáí ÚäÏ ÇáÇÖÇÝÉ','Automatically send SMS when add'

insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇá Âáí ÞÈá ÇÓÊÍÞÇÞ ÇáæÑÞÉ ÇáãÇáíÉ ÈÜ ','Automatically send SMS before check due date'

insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇá ÇáÕÝÍÉ ÇáãÍÏÏÉ','Send the selected page'

insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇá ÇáÚÞÏ Åáì ÇáÊÕÏíÞ','Send contract to registration'

insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇá ÈÑíÏ ÇáßÊÑæäí','Send Email'

insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇá ÊÞÑíÑ ÈÇáÈÑíÏ ÇáÅáßÊÑæäí','Send Report by Email'

insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇá ÑÓÇáÉ ÈÔßá Âáí ÚäÏ ÇáÊÍÕíá ÝæÑÇð','Automatically send SMS when collect the check'

insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇá ÑÓÇáÉ ÈÔßá Âáí Ýí íæã ÇäÊåÇÁ ÇáÚÞÏ','Automatically send SMS on contract expiry day'

insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇá ÑÓÇáÉ ÈÚÏ ÅÑÌÇÚ ÇáæÑÞÉ ÇáãÇáíÉ ÈÜ','Automatically send SMS after return the check'

insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇá ÑÓÇáÉ ÈÚÏ ÇäÊåÇÁ ÇáÚÞÏ ÈÜ','Automatically send SMS after expiration of contract'

insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇá ÑÓÇáÉ ÈÚÏ ÊÍÕíá ÇáæÑÞÉ ÇáãÇáíÉ ÈÜ','Automatically send SMS after collect the check'

insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇá ÑÓÇáÉ ÚäÏ ÅÖÇÝÉ ÃãÑ ÇáÕíÇäÉ','Send SMS when adding maintenance order'

insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇá ÑÓÇáÉ ÚäÏ ÅÖÇÝÉ ÇáÔßæì','Send SMS when adding complaint'

insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇá ÑÓÇáÉ ÚäÏ ÇáÅÑÌÇÚ','Send SMS when returning check'

insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇá ÑÓÇáÉ ÚäÏ ÇáÊÍÕíá','Send SMS when collecting check'

insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇá ÑÓÇáÉ ÚäÏ ÇáÊÍÕíá ÇáÌÒÆí','Sned SMS on partial collection'

insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇá ÚäÏ ÇáÇÖÇÝÉ','Send SMS when add'

insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇá ÞÈá ÇÓÊÍÞÇÞ ÇáæÑÞÉ ÇáãÇáíÉ ÈÜ ','Send SMS before check due in'

insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇá ßá SMS ','Send All SMS'

insert into [StrSource] 
([Ar],[En])
select  'ÅÑÓÇáÉ ÑÓÇáÉ ÚäÏ ÅÞÝÇá Ôßæì ÇáÕíÇäÉ','Send SMS when closing complaint'

insert into [StrSource] 
([Ar],[En])
select  'ÃÑÖ','Land'

insert into [StrSource] 
([Ar],[En])
select  'ÃÑÞÇã ÇáÅíÕÇáÇÊ','Receipts No'

insert into [StrSource] 
([Ar],[En])
select  'ÃÑÞÇã ÇíÕÇáÇÊ ÇáÚÞÏ','Contract receipts No'

insert into [StrSource] 
([Ar],[En])
select  'ÅÒÇáÉ ÅÔÇÑÉ ÇáãÑÇÌÚ','Remove checked mark'

insert into [StrSource] 
([Ar],[En])
select  'ÅÒÇáÉ ÅÔÇÑÉ ØÈÇÚÉ ÈÑÇÁÉ ÇáÐãÉ','Remove clearance print check'

insert into [StrSource] 
([Ar],[En])
select  'ÅÒÇáÉ ÇáãáÝ ÇáãÑÝÞ ÇáãÍÏÏ','Remove selected file'

insert into [StrSource] 
([Ar],[En])
select  'ÃÓÈÇÈ ÇáÊÇÎíÑ','Delay reasons'

insert into [StrSource] 
([Ar],[En])
select  'ÃÓÈÇÈ ÇáãÔßáÉ','Problem causes'

insert into [StrSource] 
([Ar],[En])
select  'ÃÓÈÇÈ ÚÏã ÇáÅäÌÇÒ','Reasons for non-completion'

insert into [StrSource] 
([Ar],[En])
select  'ÃÓÈæÚ','Week'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊÈÏÇá','Replace'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊÈÚÇÏ ãä ÃÕá','Eliminated out'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊÈÚÇÏ ãä ÇáÃÕá','Exclude from asset'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊËãÇÑ','Investment'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊËäÇÁ ÇáÇæÑÇÞ ÇáãÇáíÉ ÇáãÑÊÌÚÉ ÈÓÈÈ','Excluding returned cheque with reason'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊËäÇÁ ÇáÈØÇÞÇÊ','Exception cards'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊËäÇÁ ÇáÈØÇÞÇÊ ÇáÝÇÑÛÉ æ ÇáãÑÕÏÉ','Exclude empty and balanced cards'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊËäÇÁ ÇáÞíæÏ ÇáÇÝÊÊÇÍíÉ','Exclude opening entries'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊÑÌÇÚ','Restore'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊÑÌÇÚ ÇáäÓÎÉ ÇáÅÍÊíÇØíÉ','Restore data backup'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊÑÌÇÚ äÓÎÉ ÅÍÊíÇØíÉ','Recover previous backup'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊÚÇÏÉ ÊÑÊíÈ ÇáÃÚãÏÉ','Restore columns sort'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊÚÑÇÖ','Browse'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊÚÑÇÖ ogle Maps','Browse ogle Maps'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊÚÑÇÖ ÇáÍÓÇÈÇÊ','View accounts'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊÚÑÇÖ ÇáãÑÇÌÚ','View checked'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊÚÑÇÖ ÇáãÓÊÎÏãíä ÇáÍÇáííä','Browse other users'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊÚÑÇÖ ÕáÇÍíÇÊ ÇáÝÑæÚ','View branch permissions'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊÚÑÇÖ ÝÑæÞÇÊ ÃÓÚÇÑ ÇáÕÑÝ','View exchange rate'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊÚÑÇÖ ãáÝ ÇáÊÓÌíá','View log file'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊÚÑÇÖ äÇÝÐÉ ÇáÃÞÓÇØ','View installments windows '

insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊÚÑÇÖ äÇÝÐÉ ÇáÊÓÌíá','View log window'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊÚÑÇÖ äÇÝÐÉ ÇáÊÓÌíá ááÊÚÏíáÇÊ','View log window with editing'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊÚÑÇÖ...','Display ..'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊáÇã ÈäÇÁ','Building Completed'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊíÑÇÏ xls','Import From xls '

insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊíÑÇÏ ÇáÈíÇäÇÊ','Import Data'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊíÑÇÏ ÇáÌÏæá ãä XLS','Import table from XLS'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊíÑÇÏ ÈíÇäÇÊ ÇáÒÈÇÆä','Import Customers Data'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓÊíÑÇÏ ÈíÇäÇÊ ÇáãæÇÏ æÇáãÌãæÚÇÊ','Import materials & groups information'

insert into [StrSource] 
([Ar],[En])
select  'ÃÓÚÇÑ','Prices'

insert into [StrSource] 
([Ar],[En])
select  'ÃÓÚÇÑ ÇáÕÑÝ','Exchange rates'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáÃÕÜá','Asset name'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáÃãÑ','Order name'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáÇÕá','The Original name'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáÈÇÆÚ','Sales man'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáÈäÇÁ','Building name'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáÈäß','Bank name'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáÌÒÁ ÌãÚ','Plural part name'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáÍÇÓÈ','Computer name'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáÍÓÇÈ','Account name'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáÍÓÇÈ ãßÑÑ','Account name duplicate'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáÒÈæä','Customer name'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáÔÇÑÚ','Street No'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáÔÑíß','Partner name'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáÚÞÏ','Contract name'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáÞÇÆãÉ','Menu name'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáÞÇÆãÉ ÇááÇÊíäí','Latin menu name'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáãÇÏÉ áÇÊíäí','Material Latin name'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáãÇáß','Owner name'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáãÌãÚ','Complex name'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáãÎÏã','Server Namer'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáãÎØØ','Plans name'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáãÏíäÉ ãßÑÑ','City name duplicate'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáãÑÓá','Sender name'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáãÓÊÃÌÑ','Tenants name'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáãÓÊÎÏã','User Name'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáãÓÊÝíÏ','Beneficiary name'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáãäØÞÉ','Area Name'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáãæÑÏ','Supplier name'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáäãØ','pattern Name'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÇáäãæÐÌ','Report Name'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÌÒÁ ÇáÚãáÉ','Currency part name'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÌÒÁ ÇáÚãáÉ ÇááÇÊíäí','Currency part latin name'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÕÇÍÈ ÇáÑÎÕÉ','His license name'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ÕÇÍÈ ÇáÚÞÇÑ','Property owner name'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓã ãáÝ ÞÇÚÏÉ ÇáÈíÇäÇÊ ÇáÌÏíÏ','Name of new database file'

insert into [StrSource] 
([Ar],[En])
select  'ÅÓãÇÁ ÍÞæá ÇáØÈÇÚÉ','Fields printing name'

insert into [StrSource] 
([Ar],[En])
select  'ÃÕÛÑ Çæ íÓÇæí','Less or Equal'

insert into [StrSource] 
([Ar],[En])
select  'ÃÕÛÑ ãä','Less than'

insert into [StrSource] 
([Ar],[En])
select  'ÃÕÛÑ ãä ÊÇÑíÎ äåÇíÉ ÇáÚÞÏ','Smaller than contract end date'

insert into [StrSource] 
([Ar],[En])
select  'ÃÕá ÇáÓäÏ','Entry origin'

insert into [StrSource] 
([Ar],[En])
select  'ÃÕá ÌÏíÏ','New asset'

insert into [StrSource] 
([Ar],[En])
select  'ÃÕäÇÝ ÇáÃÕæá','Asset catery'

insert into [StrSource] 
([Ar],[En])
select  'ÅÖÇÝÇÊ','Additions'

insert into [StrSource] 
([Ar],[En])
select  'ÅÖÇÝÉ','Add'

insert into [StrSource] 
([Ar],[En])
select  'ÅÖÇÝÉ ÃÑÖ','Add land'

insert into [StrSource] 
([Ar],[En])
select  'ÅÖÇÝÉ ÇáÈíÇäÇÊ','Add details'

insert into [StrSource] 
([Ar],[En])
select  'ÅÖÇÝÉ ÇáÈíÇäÇÊ...','Add data...'

insert into [StrSource] 
([Ar],[En])
select  'ÅÖÇÝÉ ÇáÊÍÕíá ÇáÌÒÆí','Add partial collection'

insert into [StrSource] 
([Ar],[En])
select  'ÅÖÇÝÉ ÇáÔÞÞ ÇáãÍÏÏÉ','Add selected flats'

insert into [StrSource] 
([Ar],[En])
select  'ÅÖÇÝÉ ÇáãÍáÇÊ ÇáãÍÏÏÉ','Add selected shops'

insert into [StrSource] 
([Ar],[En])
select  'ÅÖÇÝÉ Çáì ÃÕá','Add to Orrigin'

insert into [StrSource] 
([Ar],[En])
select  'ÅÖÇÝÉ Çáì ÇáÃÕá','Add to asset'

insert into [StrSource] 
([Ar],[En])
select  'ÅÖÇÝÉ ÔÑØ','Add condition'

insert into [StrSource] 
([Ar],[En])
select  'ÅÖÇÝÉ ÔÞÉ','Add flat'

insert into [StrSource] 
([Ar],[En])
select  'ÅÖÇÝÉ ÔÞÞ ÇáÈäÇÁ','Add buildings flats'

insert into [StrSource] 
([Ar],[En])
select  'ÅÖÇÝÉ ÔÞÞ ÈäÇÁ','Add building appartments'

insert into [StrSource] 
([Ar],[En])
select  'ÅÖÇÝÉ ãÈáÛ ËÇÈÊ','Add fixed amount'

insert into [StrSource] 
([Ar],[En])
select  'ÅÖÇÝÉ ãÌãæÚÉ','Add group'

insert into [StrSource] 
([Ar],[En])
select  'ÅÖÇÝÉ ãÍá','Add shop'

insert into [StrSource] 
([Ar],[En])
select  'ÅÖÇÝÉ ãÑÝÞÇÊ','Attach files'

insert into [StrSource] 
([Ar],[En])
select  'ÅÖÇÝÉ ãØÇÈÞÉ ÌÏíÏÉ','Add new reconciliation'

insert into [StrSource] 
([Ar],[En])
select  'ÅÖÇÝÉ ãáÝ','Add file'

insert into [StrSource] 
([Ar],[En])
select  'ÅÖÇÝÉ ãæÞÚ','Add location'

insert into [StrSource] 
([Ar],[En])
select  'ÅÖÇÝÉ ãæÞÝ','Add parking'

insert into [StrSource] 
([Ar],[En])
select  'ÅÖÛØ ÅÈÏÇ áÇäÔÇÁ ÇáÍÓÇÈÇÊ','Click start to create accounts'

insert into [StrSource] 
([Ar],[En])
select  'ÅÖÛØ ÒÑ ÇáÈÏÇ ááÈÏÃ ÈÇáÊÏæíÑ','Press the start button to start the process'

insert into [StrSource] 
([Ar],[En])
select  'ÅØÇÑ','Frame'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ / ÅÎÝÇÁ ÇáÃÚãÏÉ','Show / Hide column'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÅÓã ÇáÍÓÇÈ','Show account name'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÃÕæá ÇáÊí áíÓ ÚáíåÇ ÍÑßÉ','Show assets without activity'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÇæÑÇÞ ÇáÛíÑ ãÑÊÈØÉ ÈÚÞæÏ','Show checks that not related with contracts'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÇæÑÇÞ ÇáÛíÑ ãÑÊÈØÉ ÈÚÞæÏ ÝÞØ','Only show checks that not related with contracts'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÈäÇÁ Ýí ÅäÔÇÁ ÇáÚÞæÏ','Show building in contracts'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÈäÇÁ Ýí ÇáÊÞÇÑíÑ','Show building in reports'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÊÝÇÕíá','Show details'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÍÑßÇÊ','Show activities'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÍÓÇÈÇÊ ÇáÎÊÇãíÉ','Show closing accounts'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÍÓÇÈÇÊ ÇáÑÆíÓíÉ','Show main accounts'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÍÓÇÈÇÊ ÇáÝÇÑÛÉ','Show empty accounts'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÍÓÇÈÇÊ ÇáÝÑÚíÉ ÇáÝÇÑÛÉ','Show empty sub accounts'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÍÓÇÈÇÊ ÇáãÑÕÏÉ','Show balanced accounts'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÍÓÇÈÇÊ Ýí ÇáÚÞæÏ','Show accounts in contracts'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÍÞæá','Show fields'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÎÑÇÆØ','Show maps'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÏÇÆä','Show credit'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÑÓÇáÉ Ýí ÊÞÑíÑ ÇáÑÓÇÆá','Show message in SMS report'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÑÓÇáÉ Ýí ÊÞÑíÑ ÇáÑÓÇÆá ÈÚÏ ÅÑÌÇÚ ÇáæÑÞÉ ÇáãÇáíÉ ÈÜ','Show message in SMS report after check return in'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÑÓÇáÉ Ýí ÊÞÑíÑ ÇáÑÓÇÆá ÈÚÏ ÇäÊåÇÁ ÇáÚÞÏ ÈÜ','Show message in SMS report after contract expires in'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÑÓÇáÉ Ýí ÊÞÑíÑ ÇáÑÓÇÆá ÈÚÏ ÊÍÕíá ÇáæÑÞÉ ÇáãÇáíÉ ÈÜ','Show message in SMS report after collect check in'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÑÓÇáÉ Ýí ÊÞÑíÑ ÇáÑÓÇÆá ÚäÏ ÇáÅÑÌÇÚ ÝæÑÇð','Show message in SMS report immediately after check return'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÑÓÇáÉ Ýí ÊÞÑíÑ ÇáÑÓÇÆá ÚäÏ ÇáÊÍÕíá ÝæÑÇð','Show message in SMS report immediately after check collect'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÑÓÇáÉ Ýí ÊÞÑíÑ ÇáÑÓÇÆá Ýí íæã ÇäÊåÇÁ ÇáÚÞÏ','Show message in SMS report when contract expire'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÑÓÇáÉ Ýí ÊÞÑíÑ ÇáÑÓÇÆá ÞÈá ÇäÊåÇÁ ÇáÚÞÏ ÈÜ','Show message in SMS report before contract expire in'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÑÕíÏ','Show balance'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÑÕíÏ ÇáÓÇÈÞ','Show previous balance'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÑÕíÏ ÇáÝÚáí','Show actual balance'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÔÞÞ','Show flats'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÔÞÞ ÇáÊÌãíÚíÉ ÇáÊí Êã ÅäåÇÁ ÚÞÏåÇ','Show assembled flat that contract has been terminated'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÔÞÞ æ ÇáãÍáÇÊ ÇáãÏãÌÉ ÈÔÞÞ æãÍáÇÊ ÊÌãíÚíÉ','Show merged shops and flats'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÚÞÇÑÇÊ','Show properties'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÚÞæÏ ÇáÊí áíÓ áåÇ ÊÃãíäÇÊ','Show contracts without security deposit'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÚãáÉ','Show currency'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÝÇÕáÉ ÇáÃáÝíÉ','Show thousand separator'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÝæÇÊíÑ ÇáÃÎíÑÉ ÝÞØ','Show last bills only'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáÝæÇÊíÑ ÇáãÑÕÏÉ','Show balanced bills'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáãÍáÇÊ','Show shops'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáãÏíä','Show debit'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáãÑÇßÒ ÇáÝÇÑÛÉ','Show empty cost center'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáãáÎÕ ÇáÓäæí','Show annual summary'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáãæÇÞÝ','Show parking'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáãæÇÞÝ ÇáÊÌãíÚíÉ ÇáÊí Êã ÅäåÇÁ ÚÞÏåÇ','Show assembled parking which contract was terminated'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÇáãæÇÞÝ ÇáãÏãÌÉ ÈãæÇÞÝ ÊÌãíÚíÉ','Show parking that inside assembled parking'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÊÝÇÕíá ÇáÍÓÇÈÇÊ ÇáÎÊÇãíÉ','Show closing accounts details'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÍÓÇÈÇÊ ÇáÒÈÇÆä / ÇáãæÑÏíä','Show supplier / customer accounts'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÍÞá ÇáÏÇÆä','Show credit account'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÍÞá ÇáÚÞÏ','Show contract field'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÍÞá ÇáãÏíä','Show debit account'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÑÓÇÆá ÅÊãÇã ÇáÚãáíÉ ÈäÌÇÍ','Show successfully finisshed messages'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÑÓÇÆá ÊÃßíÏ ÇáÍÝÙ','Show save confirming messages'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ÑãÒ ÇáÍÓÇÈ','Show account code'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ãÑÈÚ ÍæÇÑ ÇÎÊíÇÑ ÇááÛÉ','Show choose language dialog box'

insert into [StrSource] 
([Ar],[En])
select  'ÅÙåÇÑ ãÑßÒ ÇáßáÝÉ ÇáÊÇÈÚ ááÚÞÏ','Show cost center for contract'

insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÇáÊÑÞíã','Re-numbering'

insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊÑÞíã ÇáÃæÑÇÞ ÇáãÇáíÉ','Renumbering checks'

insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊÑÞíã ÇáÚÞæÏ','Renumbering contracts'

insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊÑÞíã ÈØÇÞÇÊ ÇáÃÑÖ','Renumbering land cards'

insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊÑÞíã ÈØÇÞÇÊ ÇáÍÓÇÈÇÊ','Renumbering accounts card'

insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊÑÞíã ÈØÇÞÇÊ ÇáÒÈÇÆä','Renumbering customer cards'

insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊÑÞíã ÈØÇÞÇÊ ÇáÔÞÞ','Renumbering flat cards'

insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊÑÞíã ÈØÇÞÇÊ ÇáÝáá','Renumbering villa cards'

insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊÑÞíã ÈØÇÞÇÊ ÇáãÍáÇÊ','Renumbering shop cards'

insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊÑÞíã ÈØÇÞÇÊ ÇáãæÇÞÝ','Renumbering parking cards'

insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊÑÞíã ÓäÏÇÊ ÇáÞíÏ','Renumbering journal entries'

insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊÑÞíã äãØ ÃæÑÇÞ ãÇáíÉ','Renumbering notes type'

insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊÑÞíã äãØ ÓäÏ','Renumbering journal entries type'

insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊÑÞíã äãØ ÚÞæÏ','Renumbering contract type'

insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊÑÞíã äãØ ÝæÇÊíÑ ÇáßåÑÈÇÁ','Renumbering electricity bills type'

insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊÑãíÒ','Recoding'

insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊÑãíÒ ÃÈäÇÁ ÇáÍÓÇÈ','Renumbering subaccounts'

insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊÑãíÒ ÇáÃÈäÇÁ','Recoding sub accounts'

insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊÑãíÒ ãÑÇßÒ ÇáßáÝÉ','Recoding cost centers'

insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊÓãíÉ','Rename'

insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊÓãíÉ ÇáãáÝ','File rename'

insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊÓãíÉ ãÑÇßÒ ÇáßáÝÉ','Renaming cost centers'

insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊÓãíÉ ãÑÇßÒ ÇáßáÝÉ ááÈäÇÁ','ReNumbering jobcost for building'

insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊÔßíá ÇáÈíÇä','Regenerate notes'

insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊæáíÏ ÓäÏÇÊ ÇáÞíÏ','Regenerate journal entries'

insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊæáíÏ ÓäÏÇÊ ÇáÞíÏ áÚÞæÏ ÇáÎÏãÇÊ','Recreate entries for service contracts'

insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊæáíÏ ÓäÏÇÊ ÇáÞíÏ ááÔíßÇÊ','Regenerate cheque journal entries'

insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ÊæáíÏ ÓäÏÇÊ ÇáÞíÏ ááÚÞæÏ','Regenerate vouchers for contracts'

insert into [StrSource] 
([Ar],[En])
select  'ÅÚÇÏÉ ãÚÇáÌÉ ÇáÈíÇä','Reprocessing notes'

insert into [StrSource] 
([Ar],[En])
select  'ÅÚÊãÇÏ ÇáÍÓÇÈÇÊ ÇáÅÝÊÑÇÖíÉ','Use default accounts'

insert into [StrSource] 
([Ar],[En])
select  'ÅÚÊãÇÏ ÇáÎíÇÑÇÊ ÇáÇÝÊÑÇÖíÉ ááäãØ','Use default options in Types'

insert into [StrSource] 
([Ar],[En])
select  'ÅÚÊãÇÏ ÊÇÑíÎ','Use date'

insert into [StrSource] 
([Ar],[En])
select  'ÅÚÊãÇÏ ÊÇÑíÎ ÇáÅÓÊÍÞÇÞ','Use due date'

insert into [StrSource] 
([Ar],[En])
select  'ÅÚÊãÇÏ ÍÓÇÈ ÇáÅíÑÇÏ ááÈäÇÁ ßÍÓÇÈ ãÞÇÈá ÇÝÊÑÇÖí áÚãæáÉ ÇáÊÍÕíá','Use building revenue account as default account of collection commission'

insert into [StrSource] 
([Ar],[En])
select  'ÅÚÊãÇÏ ÍÓÇÈ ÇáÒÈæä ßÍÓÇÈ ãÞÇÈá ÇÝÊÑÇÖí ááÊÍÕíá','Use customer account as default collection account'

insert into [StrSource] 
([Ar],[En])
select  'ÅÚÊãÇÏ ÍÓÇÈ ÇáÒÈæä ßÍÓÇÈ ãÞÇÈá ÇÝÊÑÇÖí ááÊÍÕíá ÇáÌÒÆí ','Use customer account as default partial collection account'

insert into [StrSource] 
([Ar],[En])
select  'ÅÚÊãÇÏ ÏÑÌÉ','Use Level'

insert into [StrSource] 
([Ar],[En])
select  'ÅÚÊãÇÏ ÏÑÌÉ ÓÑíÉ ÇáÔíß','Use security level of cheque'

insert into [StrSource] 
([Ar],[En])
select  'ÃÚÏ ÅÏÎÇá ßáãÉ ÇáãÑæÑ ÇáÌÏíÏÉ ÈÔßá ÕÍíÍ','Enter new password correctly'

insert into [StrSource] 
([Ar],[En])
select  'ÃÚÏ ÇáãÍÇæáÉ ãÑÉ ËÇäíÉ','Try again'

insert into [StrSource] 
([Ar],[En])
select  'ÅÚÏÇÏ ÇáÎÑÇÆØ','Maps settings'

insert into [StrSource] 
([Ar],[En])
select  'ÅÚÏÇÏÇÊ','Tools'

insert into [StrSource] 
([Ar],[En])
select  'ÅÚÏÇÏÇÊ SMS','SMS Settings'

insert into [StrSource] 
([Ar],[En])
select  'ÅÚÏÇÏÇÊ ÇáÎÑÇÆØ','Map ettings'

insert into [StrSource] 
([Ar],[En])
select  'ÅÚÏÇÏÇÊ ÇáÓäæÇÊ ÇáÓÇÈÞÉ','Previous years settings'

insert into [StrSource] 
([Ar],[En])
select  'ÅÚÏÇÏÇÊ ÇáãÓÍ ÇáÖæÆí','Scanner settings'

insert into [StrSource] 
([Ar],[En])
select  'ÅÚÏÇÏÇÊ ÚÇãÉ','General settings'

insert into [StrSource] 
([Ar],[En])
select  'ÅÚÏÇÏÇÊ ãÎØØ ÇáÈäÇÁ','Building plan settings'

insert into [StrSource] 
([Ar],[En])
select  'ÃÚáì ÓÚÑ ááÚÞÇÑ','Highest price for a property'

insert into [StrSource] 
([Ar],[En])
select  'ÃÚãÇá ÇáÕíÇäÉ','Maintenance works'

insert into [StrSource] 
([Ar],[En])
select  'ÅÛáÇÞ','Close'

insert into [StrSource] 
([Ar],[En])
select  'ÅÛáÇÞ ßÇÝÉ ÇáÅØÇÑÇÊ','Close all windows'

insert into [StrSource] 
([Ar],[En])
select  'ÅÝÊÑÇÖí','Default'

insert into [StrSource] 
([Ar],[En])
select  'ÅÝÑÇÛ ÈíÇäÇÊ ÇáäÇÝÐÉ ÈÚÏ ÇáÅÖÇÝÉ','Empty window after data added'

insert into [StrSource] 
([Ar],[En])
select  'ÅÝÑÇÛ ÈíÇäÇÊ ÇáäÇÝÐÉ ÈÚÏ ÇáÍÐÝ','Empty window after data deletion'

insert into [StrSource] 
([Ar],[En])
select  'ÃÝÞí','Horizontally'

insert into [StrSource] 
([Ar],[En])
select  'ÃÞÓÇØ ÇáÚÞÏ','Contract installments'

insert into [StrSource] 
([Ar],[En])
select  'ÃÞÓÇØ ÇáÚÞÏ ÍÓÈ ÎØÉ','Contract installments by plan'

insert into [StrSource] 
([Ar],[En])
select  'ÅÞÝÇá ÃãÑ ÇáÕíÇäÉ','Close maintenance order '

insert into [StrSource] 
([Ar],[En])
select  'ÅÞÝÇá ÇáÔßæì','Close complaint'

insert into [StrSource] 
([Ar],[En])
select  'ÅÞÝÇá Ôßæì ÇáÕíÇäÉ','Close maintenance complaint'

insert into [StrSource] 
([Ar],[En])
select  'ÃßÈÑ Çæ íÓÇæí','Largest or Equal'

insert into [StrSource] 
([Ar],[En])
select  'ÃßÈÑ ÓÚÑ','largest price'

insert into [StrSource] 
([Ar],[En])
select  'ÃßÈÑ ãä','More than'

insert into [StrSource] 
([Ar],[En])
select  'ÃßÈÑ ãä ÊÇÑíÎ äåÇíÉ ÇáÚÞÏ','Bigger than contract end date'

insert into [StrSource] 
([Ar],[En])
select  'ÃßËÑ ãä ãÑÉ','More than once'

insert into [StrSource] 
([Ar],[En])
select  'ÅáÛÇÁ ÇáÃãÜÜÑ','Cancel'

insert into [StrSource] 
([Ar],[En])
select  'ÅáÛÇÁ ÇáÊÑÍíá','Un Post'

insert into [StrSource] 
([Ar],[En])
select  'ÅáÛÇÁ ÊÍÏíÏ Çáßá','Uncheck All'

insert into [StrSource] 
([Ar],[En])
select  'ÅáÛÇÁ ÍÌÒ','Cancel reservation'

insert into [StrSource] 
([Ar],[En])
select  'ÅáÛÇÁ ÍÌæÒÇÊ ÇáÛíÑ','Cancel other reservation'

insert into [StrSource] 
([Ar],[En])
select  'ÅãÊáÇß ÇáÃÑÖ','Land ownership'

insert into [StrSource] 
([Ar],[En])
select  'ÅãÊáÇß ÇáÈäÇÁ','Building ownership'

insert into [StrSource] 
([Ar],[En])
select  'ÃãÑ ÇáÕíÇäÉ ÞíÏ ÇáÅäÌÇÒ','Maintenance order in progress'

insert into [StrSource] 
([Ar],[En])
select  'ÃãÑ ÕíÇäÉ','Maintenance order'

insert into [StrSource] 
([Ar],[En])
select  'ÅãßÇäíÉ ÇÏÎÇá ÚÞÏ ÈÊÇÑíÎ ÈÚÏ ÊÇÑíÎ äåÇíÉ ÇáãÏÉ','Allow save contract starting after end duration date'

insert into [StrSource] 
([Ar],[En])
select  'ÅãßÇäíÉ ÇáÊÕÏíÑ áÅßÓá','Export to Excel'

insert into [StrSource] 
([Ar],[En])
select  'ÅãßÇäíÉ ÇäåÇÁ Úãá ãÓÊÎÏã','End other users session'

insert into [StrSource] 
([Ar],[En])
select  'ÅãßÇäíÉ ÊÑÍíá ÓäÏ ÇáÞíÏ','Deposit journal entry'

insert into [StrSource] 
([Ar],[En])
select  'ÅãßÇäíÉ ÊÚÏíá ÓäÏÇÊ ÇáÛíÑ','Modify other users journal entries'

insert into [StrSource] 
([Ar],[En])
select  'ÅãßÇäíÉ ÊÚÏíá ÔíßÇÊ ÇáÛíÑ','Modify other users cheques'

insert into [StrSource] 
([Ar],[En])
select  'ÅãßÇäíÉ ÊÚÏíá ÚÞæÏ ÇáÛíÑ','Modify other users contracts'

insert into [StrSource] 
([Ar],[En])
select  'ÅãßÇäíÉ ÊÛííÑ ÇáÈÇÆÚ','Change salesman'

insert into [StrSource] 
([Ar],[En])
select  'ÅãßÇäíÉ ÊÛííÑ ßáãÉ ÇáãÑæÑ','Availabitlty of Changing  password'

insert into [StrSource] 
([Ar],[En])
select  'ÅãßÇäíÉ ÍÐÝ ÇáÓäÏÇÊ ÇáÊí áåÇ ÇÕá','Delete journal entries with origin'

insert into [StrSource] 
([Ar],[En])
select  'ÅãßÇäíÉ ØÈÇÚÉ ÇáÊÞÇÑíÑ','Print Reports'

insert into [StrSource] 
([Ar],[En])
select  'Ããíä ÇáãÓÊæÏÚ','Storekeeper'

insert into [StrSource] 
([Ar],[En])
select  'ÃäÊÈå !','Please note !!'

insert into [StrSource] 
([Ar],[En])
select  'ÅäÊÈå ÓíÊã ÅÚÇÏÉ ÊÑÞíã ÓäÏÇÊ ÇáÞíÏ ÍÓÈ ÇáÊÇÑíÎ','Attentions: journal entries will be renumbering by date order!!!'

insert into [StrSource] 
([Ar],[En])
select  'ÃäÊÈå!','Attention!'

insert into [StrSource] 
([Ar],[En])
select  'ÅäÊåì','Finish'

insert into [StrSource] 
([Ar],[En])
select  'ÅäÔÇÁ ÇáÅÌÑÇÆíÇÊ æ ÇáÊæÇÈÚ','Create procedures and triggers'

insert into [StrSource] 
([Ar],[En])
select  'ÅäÔÇÁ ÇáÌÏÇæá','Create tables'

insert into [StrSource] 
([Ar],[En])
select  'ÅäÔÇÁ ÇáÞíÏ','Create Voucher'

insert into [StrSource] 
([Ar],[En])
select  'ÅäÔÇÁ ÇáÞíÏ ÈÊÇÑíÎ','Create journal entry on date'

insert into [StrSource] 
([Ar],[En])
select  'ÅäÔÇÁ ÇáÞíæÏ','Create entries'

insert into [StrSource] 
([Ar],[En])
select  'ÅäÔÇÁ ÇáãáÝ','Create File'

insert into [StrSource] 
([Ar],[En])
select  'ÅäÔÇÁ ÍÓÇÈ','Create account'

insert into [StrSource] 
([Ar],[En])
select  'ÅäÔÇÁ ÍÓÇÈ ÊÃãíä','Create deposit account'

insert into [StrSource] 
([Ar],[En])
select  'ÅäÔÇÁ ÍÓÇÈ ÝÑÚí','Add subaccount'

insert into [StrSource] 
([Ar],[En])
select  'ÅäÔÇÁ ÍÓÇÈÇÊ ÊÃãíä Öãä','Create deposit accounts into'

insert into [StrSource] 
([Ar],[En])
select  'ÅäÔÇÁ ÍÓÇÈÇÊ Öãä','Create accounts into'

insert into [StrSource] 
([Ar],[En])
select  'ÅäÔÇÁ ÍÓÇÈÇÊ áÈØÇÞÇÊ ÇáÒÈÇÆä','Create accounts for Customers cards'

insert into [StrSource] 
([Ar],[En])
select  'ÅäÔÇÁ Öãä','Create into'

insert into [StrSource] 
([Ar],[En])
select  'ÅäÔÇÁ ÝÑÚ ÝÑÚí','Add sub-branch'

insert into [StrSource] 
([Ar],[En])
select  'ÅäÔÇÁ ÞÇÚÏÉ ÈíÇäÇÊ','Create database'

insert into [StrSource] 
([Ar],[En])
select  'ÅäÔÇÁ ãÌãæÚÉ ÝÑÚíÉ','Create sub-group'

insert into [StrSource] 
([Ar],[En])
select  'ÅäÔÇÁ ãÑßÒ ßáÝÉ','Generate cost center'

insert into [StrSource] 
([Ar],[En])
select  'ÅäÔÇÁ ãÑßÒ ßáÝÉ ÝÑÚí','Add sub cost center'

insert into [StrSource] 
([Ar],[En])
select  'ÅäÔÇÁ ãÓÊæÏÚ ÝÑÚí','Create Sub-Store'

insert into [StrSource] 
([Ar],[En])
select  'ÅäÔÇÁ ãáÝ  ÌÏíÏ','Generate New File'

insert into [StrSource] 
([Ar],[En])
select  'ÅäÔÇÁ: ','Created'

insert into [StrSource] 
([Ar],[En])
select  'ÅäÞÇÕ Ýí ÚãÑ ÇáÃÕá','Decrease in asset life'

insert into [StrSource] 
([Ar],[En])
select  'ÃäãÇØ ÃæÇãÑ ÇáÞÈÖ','Received Orders Types'

insert into [StrSource] 
([Ar],[En])
select  'ÃäãÇØ ÇáÃæÑÇÞ ÇáãÇáíÉ','Cheque Pattern'

insert into [StrSource] 
([Ar],[En])
select  'ÃäãÇØ ÇáÓäÏÇÊ','Vouchers patterns '

insert into [StrSource] 
([Ar],[En])
select  'ÃäãÇØ ÇáÔíßÇÊ','Cheques Types'

insert into [StrSource] 
([Ar],[En])
select  'ÃäãÇØ ÇáØáÈíÇÊ','Orders patterns'

insert into [StrSource] 
([Ar],[En])
select  'ÃäãÇØ ÇáÚÞæÏ','Contarcts pattern'

insert into [StrSource] 
([Ar],[En])
select  'ÃäãÇØ ÇáÝæÇÊíÑ','Bills Pattern'

insert into [StrSource] 
([Ar],[En])
select  'ÃäãÇØ ÇáÞíÏ ÇáÍÓÇÈí','Accounting journal entry types'

insert into [StrSource] 
([Ar],[En])
select  'ÃäãÇØ ÇáÞíæÏ','Entries patterns '

insert into [StrSource] 
([Ar],[En])
select  'ÃäãÇØ ÇáãäÇÞáÇÊ','Stock transfers type'

insert into [StrSource] 
([Ar],[En])
select  'ÃäãÇØ ÇáãäÇÞáÇÊ ÅÎÑÇÌ','Output stock transfer types'

insert into [StrSource] 
([Ar],[En])
select  'ÃäãÇØ ÇáãäÇÞáÇÊ ÅÏÎÇá','Input stock transfer types'

insert into [StrSource] 
([Ar],[En])
select  'ÃäãÇØ ÚÞæÏ ÇáÎÏãÇÊ','Services contract types'

insert into [StrSource] 
([Ar],[En])
select  'ÃäãÇØ ÚÞæÏ ÇáÕíÇäÉ','Maintenance contract types'

insert into [StrSource] 
([Ar],[En])
select  'ÃäãÇØ ÝæÇÊíÑ ÇáßåÑÈÇÁ','Electricity Bill Types'

insert into [StrSource] 
([Ar],[En])
select  'ÅäåÇÁ','Terminate'

insert into [StrSource] 
([Ar],[En])
select  'ÅäåÇÁ ÇáÅÑÌÇÚ','Return termination'

insert into [StrSource] 
([Ar],[En])
select  'ÅäåÇÁ ÇáÃæÑÇÞ ÇáãÇáíÉ ÇáãÑÊÌÚÉ','Finish returned cheques'

insert into [StrSource] 
([Ar],[En])
select  'ÅäåÇÁ ÇáÃæÑÇÞ ÇáãÑÊÌÚÉ','Ending the refund of paper notes'

insert into [StrSource] 
([Ar],[En])
select  'ÅäåÇÁ ÇáÇÑÌÇÚ','Ending the refund'

insert into [StrSource] 
([Ar],[En])
select  'ÅäåÇÁ ÇáÏÚæì','Lawsuit terminate'

insert into [StrSource] 
([Ar],[En])
select  'ÅäåÇÁ ÇáÏÚæì ÇáÞÖÇÆíÉ','Lawsuite termination'

insert into [StrSource] 
([Ar],[En])
select  'ÅäåÇÁ ÇáÕíÇäÉ','Close maintenance'

insert into [StrSource] 
([Ar],[En])
select  'ÅäåÇÁ ÇáÚÞÏ','Terminate contract'

insert into [StrSource] 
([Ar],[En])
select  'ÅäåÇÁ ÇáÚÞæÏ ÇáãÍÏÏÉ','Terminate selected contracts'

insert into [StrSource] 
([Ar],[En])
select  'ÅäåÇÁ ÚÞæÏ ÇáÃÑÇÖí æÇáÝáá','lands and villas contracts termination'

insert into [StrSource] 
([Ar],[En])
select  'ÅäåÇÁ ÚÞæÏ ÇáãæÇÞÝ','Parking contracts termination'

insert into [StrSource] 
([Ar],[En])
select  'ÅåÊáÇß ÇáÃÕæá','Assets depreciation'

insert into [StrSource] 
([Ar],[En])
select  'Ãæ','or'

insert into [StrSource] 
([Ar],[En])
select  'ÃæÇãÑ ÇáÕíÇäÉ','Maintenance orders'

insert into [StrSource] 
([Ar],[En])
select  'ÃæÇãÑ ÇáÞÈÖ','Received orders'

insert into [StrSource] 
([Ar],[En])
select  'Ãæá ãÑÉ','First time'

insert into [StrSource] 
([Ar],[En])
select  'ÅíÌÇÑ','Rent'

insert into [StrSource] 
([Ar],[En])
select  'ÅíÌÇÑ ÔÞÉ','Flat rent'

insert into [StrSource] 
([Ar],[En])
select  'ÅíÞÇÝ','Stop'

insert into [StrSource] 
([Ar],[En])
select  'ÇÊÚÇÈ ÇáãÍÇãÇå','Attorney fees'

insert into [StrSource] 
([Ar],[En])
select  'ÇÏæÇÊ','Tool'

insert into [StrSource] 
([Ar],[En])
select  'ÇÑÓÇá SMS áãÌãæÚÉ','Send to SMS group'

insert into [StrSource] 
([Ar],[En])
select  'ÇÓÊËäÇÁ ÇáÔíßÇÊ ÇáãÑÊÌÚÉ','Exclude returned cheque'

insert into [StrSource] 
([Ar],[En])
select  'ÇÓÊËäÇÁ ÇáÔíßÇÊ ÈÏæä ÊÇÑíÎ ÇÓÊÍÞÇÞ','Exclude cheque without due date'

insert into [StrSource] 
([Ar],[En])
select  'ÇÓÊÎÏÇã ÈÑäÇãÌ ÇáÌåÇÒ','Use device software'

insert into [StrSource] 
([Ar],[En])
select  'ÇÓÊÚÑÇÖ äÇÝÐÉ ÃÑÕÏÉ ÇáÍÓÇÈÇÊ','View information window'

insert into [StrSource] 
([Ar],[En])
select  'ÇÓÊÚÑÇÖ äÇÝÐÉ ÇáÕæÑ ','View image window'

insert into [StrSource] 
([Ar],[En])
select  'ÇÓÊáÇã ÇáÚÞÏ ãä ÇáÊÕÏíÞ ','Contract received from registration'

insert into [StrSource] 
([Ar],[En])
select  'ÇÓÊåáÇß ÇáßåÑÈÇÁ','Electricity consumption'

insert into [StrSource] 
([Ar],[En])
select  'ÇÓÊåáÇß ÇáãÇÁ','Water consumption'

insert into [StrSource] 
([Ar],[En])
select  'ÇÓã ÇáÌÏæá','Table name'

insert into [StrSource] 
([Ar],[En])
select  'ÇÓã ÇáÚÇãá','Worker name'

insert into [StrSource] 
([Ar],[En])
select  'ÇÓã ÇáãÇÏÉ','Material name'

insert into [StrSource] 
([Ar],[En])
select  'ÇÓã ÇáãáÝ','File name'

insert into [StrSource] 
([Ar],[En])
select  'ÇÖÇÝÉ ÕæÑ','Add Photo'

insert into [StrSource] 
([Ar],[En])
select  'ÇÖÛØ ÒÑ ÇÈÏÃ ÇáÊÏæíÑ ááÈÏÁ','Press start to proceed'

insert into [StrSource] 
([Ar],[En])
select  'ÇÙåÇÑ','View'

insert into [StrSource] 
([Ar],[En])
select  'ÇÙåÇÑ ÇáæÍÏÇÊ ÇáãÈÇÚÉ','Show units sold'

insert into [StrSource] 
([Ar],[En])
select  'ÇÙåÇÑ ÊÞÑíÑ ÇáÏÝÚÇÊ ÇáãÊÃÎÑÉ','Show overdue payments report'

insert into [StrSource] 
([Ar],[En])
select  'ÇÚÇÏÉ ÇáÝåÑÓÉ','Reindexing'

insert into [StrSource] 
([Ar],[En])
select  'ÇÚÇÏÉ ÊÓãíÉ ÇáÊÈæíÈ','Rename tab'

insert into [StrSource] 
([Ar],[En])
select  'ÇÚÇÏÉ ÊÓãíÉ ãÑÇßÒ ÇáßáÝÉ','Rename the cost center'

insert into [StrSource] 
([Ar],[En])
select  'ÇÚÇÏÉ ÊæáíÏ ÓäÏÇÊ ÇáÞíÏ áÚÞæÏ ÇáãæÇÞÝ','ReGenerate entries for parking contracts'

insert into [StrSource] 
([Ar],[En])
select  'ÇÚÊÈÇÑ ÇáÏÝÚÉ ÇáãÓÊÍÞÉ ÏÝÚÉ ãÊÃÎÑÉ Ýí ÍÇá ÊÌÇæÒ ','Consider due payment as late payment if exceeded'

insert into [StrSource] 
([Ar],[En])
select  'ÇÚÊÈÇÑ ÇáÚãæáÉ','Consider commission'

insert into [StrSource] 
([Ar],[En])
select  'ÇÚÊÈÇÑ ÇáæÍÏÇÊ ÇáãÌãÚÉ Ýí æÍÏÇÊ ÊÌãíÚíÉ ãÄÌÑÉ','Consider assembled units in as leased'

insert into [StrSource] 
([Ar],[En])
select  'ÇÚÊãÇÏ ÊÇÑíÎ äåÇíÉ ÇáÇÓÊËãÇÑ ßÊÇÑíÎ äåÇíÉ ÚÞæÏ ÇáÅíÌÇÑ','Use expiry of investment date as contracts expiry date'

insert into [StrSource] 
([Ar],[En])
select  'ÇÚÊãÇÏ ÍÓÇÈ ÇáÊÍÕíá ßÍÓÇÈ ãÞÇÈá ÇÝÊÑÇÖí áÛÑÇãÉ ÇáÊÃÎíÑ','Use collection account as default observe account of delay fees'

insert into [StrSource] 
([Ar],[En])
select  'ÇÚÊãÇÏ ÍÓÇÈ ÇáÒÈæä / ÇáãæÑÏ ßÍÓÇÈ ÇÝÊÑÇÖí áÛÑÇãÉ ÇáÅÑÌÇÚ','Use supplier / customer account as default account of check return fees'

insert into [StrSource] 
([Ar],[En])
select  'ÇÚÊãÇÏ ÍÓÇÈ ÇáÒÈæä / ÇáãæÑÏ ßÍÓÇÈ ÇÝÊÑÇÖí áÛÑÇãÉ ÇáÊÃÎíÑ','Use supplier / customer account as default account of delay fees'

insert into [StrSource] 
([Ar],[En])
select  'ÇÚÊãÇÏ ÍÓÇÈ ÇáÒÈæä / ÇáãæÑÏ ßÍÓÇÈ ÇÝÊÑÇÖí ááÅÑÌÇÚ','Use supplier / customer account as default account of check return'

insert into [StrSource] 
([Ar],[En])
select  'ÇÚÊãÇÏ ÍÓÇÈ ÇáÒÈæä ßÍÓÇÈ ãÞÇÈá ÇÝÊÑÇÖí ááÊÑÍíá','Use customer account as default account of check post'

insert into [StrSource] 
([Ar],[En])
select  'ÇÚÊãÇÏ ÍÓÇÈ ÇáÒÈæä ááÚÞÏ ßÍÓÇÈ ÇÝÊÑÇÖí ááÏÚæì','Use customer account as default lawsuit account'

insert into [StrSource] 
([Ar],[En])
select  'ÇÚÊãÇÏ ÍÓÇÈ ÇáãÕÑÝ ááÈäÇÁ  ßÍÓÇÈ ÇÝÊÑÇÖí ááÅÑÌÇÚ','Use bank account as default account of check return'

insert into [StrSource] 
([Ar],[En])
select  'ÇÚÊãÇÏ ÍÓÇÈ ÇáãÕÑÝ ááÈäÇÁ ßÍÓÇÈ ÇÝÊÑÇÖí ááÅÑÌÇÚ ÚäÏ ÊÍÕíá ÇáÔíß ÝÞØ','Use bank account as default account of cheque return if it is collected'

insert into [StrSource] 
([Ar],[En])
select  'ÇÚÊãÇÏ ÍÓÇÈ ÇáãÕÑÝ ááÈäÇÁ ßÍÓÇÈ ÇÝÊÑÇÖí ááÊÍÕíá ','Use bank account as default account of check post'

insert into [StrSource] 
([Ar],[En])
select  'ÇÚÊãÇÏ ÍÓÇÈ ÇáãÕÑÝ ááÈäÇÁ ßÍÓÇÈ ÇÝÊÑÇÖí ááÊÍÕíá  ÇáÌÒÆí','Use building bank account as default account partial collection'

insert into [StrSource] 
([Ar],[En])
select  'ÇÚÊãÇÏ ÍÓÇÈ ÕäÏæÞ ÇáÈäÇÁ ßÍÓÇÈ ÇÝÊÑÇÖí ááÊÍÕíá  ÇáÌÒÆí','Set cash account of building as default account of partial collection'

insert into [StrSource] 
([Ar],[En])
select  'ÇÚÊãÇÏ ÍÓÇÈ ãÇáß ÇáÈäÇÁ ßÍÓÇÈ ÇÝÊÑÇÖí áÚãæáÉ ÇáÊÍÕíá','Use owner account as default account of collect commssion'

insert into [StrSource] 
([Ar],[En])
select  'ÇÚÊãÇÏ ÍÓÇÈ ãÇáß ÇáÈäÇÁ ßÍÓÇÈ ÇÝÊÑÇÖí ááÊÑÍíá ','Use owner account as default account of check post'

insert into [StrSource] 
([Ar],[En])
select  'ÇÚÊãÇÏ ãÞÏÇÑ ÇáÚãæáÉ ãä ÈØÇÞÉ ÇáÈäÇÁ','Use commession rate from building card'

insert into [StrSource] 
([Ar],[En])
select  'ÇÚÏÇÏÇÊ ÇáÍÓÇÈÇÊ ÇáãÝÖáÉ','Favorite accounts settings'

insert into [StrSource] 
([Ar],[En])
select  'ÇÚãÇá ÇáÕíÇäÉ','Maintenance work'

insert into [StrSource] 
([Ar],[En])
select  'ÇÞÓÇØ','Installements'

insert into [StrSource] 
([Ar],[En])
select  'ÇßÓá','Excel'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÃÈÚÇÏ','Dimensions'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÃÈÚÇÏ æ ÇáÍÏæÏ','Dimensions and border'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÃÈäíÉ','Buildings'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÊÕÇá ÈÇáãáÝ ÇáÌÏíÏ','Connect New File'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÌãÇáí','Total.'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÃÌæÑ','Wages'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÍÏÇËíÇÊ ãä ÛæÛá','Coordinates from ogle'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÎÊÕÇÑ','Shotcut'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÎÊÕÇÑ ãßÑÑ','Duplicate shortcut'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÎÊÕÇÑÇÊ','Shotcuts'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÎáÇÁ','Evacuate date'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÃÎíÑ','Last'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÏÎÇá','Enter'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÃÏæÇÊ ÇáÎÇÑÌíÉ','Extra tools'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÃÑÇÖí','Lands'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÃÑÇÖí ÇáãÄÌÑÉ æÇáÛíÑ ãÄÌÑÉ ','Leased and non-leased lands'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÃÑÇÖí ÇáãÄÌÑÉ æÛíÑ ÇáãÄÌÑÉ','Rented and un-rented lands'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÃÑÇÖí ÇáãÈÇÚÉ æÛíÑ ÇáãÈÇÚÉ','Sold and Non-Sold Lands'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÃÑÈÇÍ æ ÇáÎÓÇÆÑ','Profit and Loss'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÃÑÈÇÍ æ ÇáÎÓÇÆÑ æ ÇáãíÒÇäíÉ','Profit, Loss and Balance'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÑÊÝÇÚ','Hight'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÑÌÇÚ','Refunded'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÑÌÇÚ  íæáÏ ÞíÏ ÈÔßá Âáí','check return generates journal entry automatically'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÑÌÇÚ íæáÏ ÞíÏ','check return generates journal entry'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÑÓÇá ÇáÂáí SMS','Automatic SMS sending'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÃÑÔÝÉ','Archiving'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÃÑÖ','Land'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÃÑÞÇã ÇáãÑÓá ÇáíåÇ','Consignee numbers'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÒÇÍÉ','Displacement'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÓÊÈÚÇÏÇÊ','Disposals'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÓÊÍÞÇÞ','Merit'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÓÊÚáÇã Úä ÇáÑÕíÏ','Balance inquiry'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÓÊåáÇß','Consumption'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÓã','Name'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÓã ÇáÊÌÇÑí','Commercial name'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÓã ÇáÌÏíÏ','New name'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÓã ÇáÍÇáí','Current name'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÓã ÇáÚÑÈí','Arabic Name'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÓã ÇáßÇãá','Full name'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÓã ÇáßÇãá íÍæí','Full name contains'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÓã ÇááÇÊíäí','Latin name'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÓã ÇááÇÊíäí ãßÑÑ','Duplicate latin name'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÓã ÇááÇÊíäí íÍæí','Latin name contains'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÓã ÈÇáÌãÚ','Name in plural'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÓã ãßÑÑ','Duplicate name'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÓã ãßÑÑCard No 1','Dublicate name Card No 1'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÕÏÇÑ ÑÞã ','Version No'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÃÕá','The Origin'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÃÕá ÛíÑ ÝÚÇá','Assen inactive'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÃÕá ÝÚÇá','Asset active'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÃÕá ãÈÇÚ','Asset sold'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÃÕæá','Assets'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÃÕæá ÇáËÇÈÊÉ','Fixed assets'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÖÇÝÇÊ','Extras'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÅØÇÑÇÊ ÇáãÝÊæÍÉ','Opened Frames'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÅØáÇáÉ','The view'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÅØáÇáÉ áÇÊíäí','Latin view'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÃÚÏÇÏ','Numbers'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÚÏÇÏÇÊ','Settings'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÃÚÙãí','Maximum'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÃÚãÇá ÇáãØáæÈÉ','Required works'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÝÇÏÉ','Benefit'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÝÊÑÇÖíÇÊ','Defults'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÅÝÊÑÇÖíÉ','Defaults'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÃÞÓÇØ','Premiums'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÅãÇÑÉ','Emirate'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÅäÊÙÇÑ','Please wait'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÃäãÇØ','Types'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÃäãÇØ ÇáÃæÑÇÞ ÇáãÇáíÉ','Note types'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÅåÊáÇß','Depreciation'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÅåÊáÇßÇÊ','Depreciations'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÃæÑÇÞ ÇáãÇáíÉ','Note papers'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÃæÑÇÞ ÇáãÇáíÉ ÇáÊí áíÓ áåÇ ÍÇáÉ','Checks without any case'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÃæÑÇÞ ÇáãÇáíÉ ÇáãÍÕáÉ','Collected checks'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÃæÑÇÞ ÇáãÇáíÉ ÇáãÑÊÌÚÉ','Returned checks'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÃæÑÇÞ ÇáãÇáíÉ ÇáãÓÊÍÞÉ','Due checks'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÃæÑÇÞ ÇáãÇáíÉ ááÚÞæÏ','Contracts cheque report'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÃæá','The First'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÅíÌÇÑ','Rent'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÅíÌÇÑ ÍÓÈ ÂÎÑ ÚÞÏ ãÕÏÞ','Rent by last registered contract'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÅíÑÇÏ','Revenue'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÅíÑÇÏÇÊ','Revenues'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÅíÑÇÏÇÊ ÇáãÍÞÞÉ','Achieved Revenues'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÅíÕÇá ãßÑÑ','Receipt duplicate'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÇÑÖ æÇÑÏÉ ÈÚÞÏ : ','Land contained in contract:'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÇÓÊÈÚÇÏÇÊ','Exclusions'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÇÓã','Name'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÇÓã ÇáÊÌÇÑí','Comercial name'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÇÚãÇá ÇáãäÌÒÉ','Completed works'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÇáæÇä','Colors'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÇãÑ','Order'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÇæÑÇÞ ÇáãÇáíÉ ááÚÞæÏ','Contract Securities'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÇæáì','First'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÇíÏÇÚ','Deposit'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÇíÑÇÏÇÊ ÇáãÍÝæÙÉ','Saved revenues'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÈÇÆÚ','Salesman'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÈÇÑßæÏ','Barcode'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÈÇÞí','Rest'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÈÍË','The Search'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÈÍË Ýí ÇáÚÞæÏ','Search in contracts'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÈÑäÇãÌ','Program'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÈÑíÏ ÇáÅáßÊÑæäí','E-mail'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÈÑíÏ ÇáÅáßÊÑæäí ááÒÈæä','Customer Email'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÈÖÇÚÉ','ods'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÈØÇÞÇÊ','Cards.'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÈØÇÞÉ','Card'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÈØÇÞÉ ãÝÊæÍÉ ãä ÇáÍÇÓÈ : ','Card is opened from computer:'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÈäÇÁ','Building'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÈäÊ åÇæÓ','Pent House'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÈäß','Bank'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÈäæß','Banks'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÈíÇä','Note'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÈíÇä 2','Note2'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÈíÇä ÇáÌãÑßí','Customs statement'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÈíÇä íÍæí','Notes Contain'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÈíÇäÇÊ','Data'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÈíÇäÇÊ ÇáãÇáíÉ','Financial data'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÈíÇäÇÊ Ýí ÍÇáÉ ÊÚÏíá åá ÊÑíÏ ÊÌÇåá ÇáÊÛííÑÇÊ','Data still unsaved, Do you want to ignore changes?'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÈíÇäÇÊ ãÓÊÎÏãÉ æ áÇ íãßä ÍÐÝåÇ','Data used and cannot be deleted'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÈíÚ','The Sales'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÃãíä','Security deposit'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÃãíäÇÊ','Deposits'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÇËíÑ Úáì ÇáÚãÑ','effect on age'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÇÑíÎ','Date'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÇÑíÎ ÇáÊÐßíÑ','Remind date'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÇÑíÎ ÇáãÊæÞÚ áÅäåÇÁ ÇáÕíÇäÉ ','Expected date to finish maintenance'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÇÑíÎ ÇáãÍÏÏ ÃÕÛÑ ãä ÊÇÑíÎ ÇáÊËÈíÊ','Date is smaller than fixed date'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÇÑíÎ ÇáãÍÏÏ ÃÕÛÑ ãä ÊÇÑíÎ ÈÏÇíÉ ÇáãÏÉ','Selected date is smaller than starting date'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÇÑíÎ ÇáãÍÏÏ ÃßÈÑ ãä ÊÇÑíÎ äåÇíÉ ÇáãÏÉ','Selected date is larger than starting date'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÇÑíÎ ÛíÑ ãØÇÈÞ','Date is not match'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÇÑíÎ: ','Date:'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÇáí','Next'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊËãíä ÇáÚÞÇÑí','Realty Estimation'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÌÏíÏ ÇáÊáÞÇÆí','Autor enew'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÍÑíÑ','Issue'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÍÕíá','Collection'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÍÕíá ÇáÌÒÆí','The Partial collection'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÍÕíá ÇáÌÒÆí íæáÏ ÞíÏ','Partial collection generate journal entry'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÍÕíá ÇáÌÒÆí íæáÏ ÞíÏ ÈÔßá Âáí','Partial collection generate journal entry automatically'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÍÕíá íæáÏ ÞíÏ','Collection generate journal entry'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÍÕíá íæáÏ ÞíÏ ÈÔßá Âáí','Collection generate journal entry automatically'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÍÞÞ ãä ÇáÅÊÕÇá ÈÇáãÎÏã','Checking the connection with server'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÍáíá','Analysis'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÏÞíÞ','Check box'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÐßíÑ','Reminder'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÐßíÑ  ÈÇáäÓÎ ÇáÅÍÊíÇØí ßá ','Remind backup every'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÑÊíÈ','Sorting'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÑÌãÉ','Translate'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÑÍíá','Posting'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÑÍíá íæáÏ ÞíÏ','Posting generate journal entry'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÑÍíá íæáÏ ÞíÏ ÈÔßá Âáí','Posting generate journal entry automatically'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÑÎíÕ','Licensing'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÓÚíÑ','Pricing'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÓáÓá','Sequence'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÕäíÝ','Class'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÕäíÝ Ýí ÞæÇÆã ÇáÏÎá','Classification with income statement'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÙåíÑ','Endrosement'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÙåíÑ íæáÏ ÞíÏ','Endrosement generate journal entry'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÙåíÑ íæáÏ ÞíÏ ÈÔßá Âáí','Endrosement generate journal entry automatically'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÚÇÏá','Rate'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÝÇÕíá','Details'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÞÇÑíÑ ÇáÚÞÇÑíÉ','Realty Reports'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÞÇÑíÑ ÇáÚÞÇÑíÉ 2','Realty Reports 2'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÞÇÑíÑ ÇáãÍÇÓÈíÉ   ','Accounting Reports'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÞÑíÈ Çáì','Round to'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÞÑíÑ','Report'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÞÑíÑ ÇáÔåÑí','Monthly Report'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊÞÑíÑ ÇáÔåÑí ÇáÔÇãá','Comprehensive monthly report'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊäÈíå ãØÈæÚ','Warning printed'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊäÈíåÇÊ','Alerts'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊäÙíã','Organization'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊäÝíÐ','Implementation'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊæÕíÝ','Characterization'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÊæÞíÚ ÛíÑ ãØÇÈÞ','Signature not match'

insert into [StrSource] 
([Ar],[En])
select  'ÇáËÇáË','Third'

insert into [StrSource] 
([Ar],[En])
select  'ÇáËÇáËÉ','The Third'

insert into [StrSource] 
([Ar],[En])
select  'ÇáËÇäí','Second.'

insert into [StrSource] 
([Ar],[En])
select  'ÇáËÇäíÉ','Second'

insert into [StrSource] 
([Ar],[En])
select  'ÇáËæÇÈÊ','Fixed value'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÌÏæá ÇáãÑÊÈØ : ','Related table:'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÌÏíÏ','The New'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÌÒÁ','Part'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÌäÓíÉ','Nationality'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÌäÓíÉ áÇÊíäí','Latin nationality'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÌåÇÒ','Device'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÌåÉ','Direction'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÌåÉ ÇáãÕÏÑÉ','Issued by'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÌåÉ ÇáãÕÏÑÉ ááÅíÕÇá','Receipt issued by'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÌåÉ ÇáãÕÏÞÉ ','Registered by'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÌæÇá','Mobile'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÇÓÈ','Computer'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÇÓÈÉ','Calculator'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÇÝÙÉ','Clipboard'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÇáÉ','Status'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÇáÉ ÇáãÍÏÏÉ ÝÞØ','Selected status only'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÇáíÉ','Current'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÌÒ','Booking'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÌÒ ãáÛì','Booking canceled'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÏ ÇáÃÏäì','Minimum'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÏ ÇáÃÏäì áÊÍÕíá ÇáÚãæáÉ','Minimum level of collection commission'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÏ ÇáÃÚáì','the highest rate'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÏ ÇáÃÚáì áäÓÈÉ ÇáÍÓã','Maximum limit of discount rate'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÏæÏ','Border'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÐÝ','Delete'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÐÝ ÇáÌãÇÚí ááÔíßÇÊ ãä ÊÞÑíÑ ÇáÃæÑÇÞ ÇáãÇáíÉ','Delete all cheques at notes report'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÑßÉ','Transaction'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÑßÉ ÇáíæãíÉ ááÚÞæÏ','Daily activity of contracts'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÓÇÈ','Account'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÓÇÈ ÇáÃÈ áÊÇãíäÇÊ ÇáÒÈÇÆä','Main account of customers deposit account'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÓÇÈ ÇáÃÈ ááÃÈäíÉ','Buildings main account'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÓÇÈ ÇáÃÈ ááÒÈÇÆä','Customers main account'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÓÇÈ ÇáÃÈ ááãæÑÏíä','suppliers main account'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÓÇÈ ÇáÅÝÊÑÇÖí','Default account'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÓÇÈ ÇáÎÊÇãí','Ending account'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÓÇÈ ÇáÏÇÆä','Credit account'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÓÇÈ ÇáÑÆíÓí','Main account'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÓÇÈ ÇáÑÆíÓí áÊÃãíäÇÊ ÇáãÓÊÇÌÑíä','The Main Insurance Account for tenants'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÓÇÈ ÇáÑÆíÓí ááãÓÊÇÌÑíä','Customers deposit account'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÓÇÈ ÇáãÏíä','Debit account'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÓÇÈ ÇáãÞÇÈá','Obverse account'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÓÇÈ ÍÓÈ','Account by'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÓÇÈÇÊ','Accounts'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÓÇÈÇÊ ÇáÅÝÊÑÇÖíÉ','Default accounts'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÓÇÈÇÊ ÇáÅÝÊÑÇÖíÉ áÚãæáÉ ÇáÊÍÕíá','Default accounts of collection commission'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÓÇÈÇÊ ÇáãÑÕÏÉ','Balanced accounts'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÓÇÈÇÊ ÇáãÝÖáÉ','Favorite accounts'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÓã','Discount'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÓã ÇáÃÚÙãí','Maximum discount'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÓãíÇÊ','Discounts '

insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÙÑ','Blocking'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÞá','Feild'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÍÞæá','Feilds'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÍá æÇÑÏ ÈÚÞÏ : ','Solution in contract:'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÍåÉ ÇáãÕÏÞÉ','Registered at'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÍæÖ','Basin'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÍí','Neighborhood'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÎÏãÉ','Service'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÎÑÇÆØ','Maps'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÏÇÆä','Credit'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÏÚæì','Lawsuite'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÏÚæì ÇáÞÖÇÆíÉ','Lawsuit'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÏÝÚÇÊ','Payments'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÏÝÚÇÊ ÇáãÓÊÍÞÉ','Due payments'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÏÝÚÇÊ ÇáäÞÏíÉ','Cash payments'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÏÝÚÇÊ ÇáäÞÏíÉ ÇáãÞÈæÖÉ','Received cash payments'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÏÝÚÇÊ ÇáäÞÏíÉ áÝÊÑÉ ÇáÅíÑÇÏ','Cash payments of revenue period'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÏÝÚÉ','Payment'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÏÝÚÉ ÇáÃÎíÑÉ','Last payment'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÏÝÚÉ ÇáÃæáì','First payment'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÏÝÚÉ ÇáÃæáì Ýí ÊæáíÏ ÇáÔíßÇÊ ÊæáÏ ÓäÏÇÊ','First cash payment generates entry at cheque generation window'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÏÝÚÉ ÇáÓäæíÉ','Annual payment'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÏÝÚÉ ÇáÔåÑíÉ','Monthly payment'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÏÝÚÉ ÇáãÓÊÍÞÉ','Due payment'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÏæáÉ','Country'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÇÈØ','Link'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÈÍ','Profit '

insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÎÕÉ','License'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÎÕÉ Çáì ÊÇÑíÎ','License to date'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÎÕÉ ãä ÊÇÑíÎ','License from date'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÓÇÆá ÇáÞÕíÑÉ','Short Message'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÓÇÆá ÇáãÑÓáÉ','Sent SMS'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÓÇÆá ÇáäÕíÉ','SMS Message'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÓÇáÉ','Message'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÓã ÇáÈíÇäí áÃÑÕÏÉ ÇáÍÓÇÈÇÊ','Accounts Balance Chart'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÓæã','Fees'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÕíÏ','Balance'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÕíÏ ÇáÏÝÊÑí ááÒÈæä','Note balance of the customer'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÕíÏ ÇáÓÇÈÞ','Previous balance'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÕíÏ ÇáÝÚáí','Actual balance'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÕíÏ ÇáäåÇÆí','Final balance'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÕíÏ ÊÑÇßãí','Cumulative balance'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÕíÏ ÏÇÆä','Credit balance'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÕíÏ ãÏíä','Debit balance'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÞã','Number'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÞã ÇáÅÝÊÑÇÖí áÇÑÓÇá ÇáÑÓÇÆá','Default number to send SMS'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÞã ÇáÂáí','PACI Number'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÞã ÇáÂáí ÇáÞÓíãÉ','Plot PACI  no'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÞã ÇáÂáí ááÈäÇÁ','Buliding  PACI no'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÞã ÇáÊÓáÓáí','Serial Number'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÞã ÇáÌÏíÏ','New number'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÞã ÇáÍÇáí','Current number'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÞã ÇáÏÇÎáí','Internal Number'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÞã ÇáãÊÓáÓá ãßÑÑ','Duplicate serial number'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÞã ÇáãÏäí ááÚãÇáÉ','Employee civil ID'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÞã ÇáãæÍÏ','Unified No'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÑÞã ãßÑÑ','Duplicate number'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÑãÒ','Code'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÑãÒ ÇáÎÇÕ','Special Code'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÑãÒ ÇááÇÊíäí','Latin code'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÑãÒ ãßÑÑ','Duplicate code'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÒÈÇÆä','Customers'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÒÈÇÆä ÇáãÍÙæÑÉ','Blocked customers'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÒÈæä','Customer'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÒÈæä Ýí åÐÇ ÇáÚÞÏ ãÎÊáÝ Úä ÇáÒÈæä Ýí ÚÞÏ ÇáÔÞÉ ÇáãÑÇÏ ÑÈØå ¡ åá ÃäÊ ãÊÃßÏ ãä ÇáÇÓÊãÑÇÑ¿ ','The customer in this contract is different from the customer in the contract to be linked to the flat, are you sure to continue?'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÒíÇÏÉ Úáì ÇáÚÞÏ ÇáÍÇáí','Increase on the current contract'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÒíÇÑÇÊ','Visits'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÒíæä','Client'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÓÇÈÞ','Previous'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÓÇÈÞ >>','Previous >>'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÓÇÚÉ','Timing'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÓÌá','Registry'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÓÌá ÇáÊÌÇÑí','Trading license'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÓÌá ÇáÊÌÇÑí áÇÊíäí','Latin trading license'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÓÍÈ ãä ãÌãæÚÉ ÇæÑÇÞ / Feeder','Use feeder'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÓÚÑ','The Price'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÓÚÑ ÇáÃÏäì','Minimum price'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÓÚÑ ÇáÃÚáì','Maximum price'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÓÚÑ ÇáÅÝÑÇÏí','unit price'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÓÚÑ ÇáæÓØí','Average price'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÓÚÑ ÈÚÏ ÇáÍÓã','Price after discount'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÓÚÑ Èíä','Price between'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÓÚÑ ááæÍÏÉ','price per unit'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÓãÇÍ ÈÅÖÇÝÉ ÚÞÏ ÌÏíÏ Ïæä ÅäåÇÁ ÇáÚÞÏ ÇáÞÏíã','Allow to add a new contract without terminate the old contract'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÓãÇÍ ÈÅÖÇÝÉ ÚÞÏ ÌÏíÏ áäÝÓ ÇáÚãíá Ïæä ÅäåÇÁ ÇáÚÞÏ ÇáÞÏíã','Allow adding a new contract for the same client without ending the old contract'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÓãÇÍ ÈÊÇÌíÑ ÇáæÍÏÇÊ ÇáÚÞÇÑíÉ ÈÚÏ ÈíÚåÇ','Allow leased units after sell it'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÓãÇÍ ááãÓÊÎÏãíä ÈßÇãá ÇáÕáÇÍíÇÊ ÊÌÇæÒ ÊÇÑíÎ ÊËÈíÊ ÇáÚãáíÇÊ','Allow users with full authorize passing fixed date of operations'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÓäÉ ÇáÍÇáíÉ','Current year'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÓäÏ','Ownership voucher'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÓäÏ ÇáäÞÏí','Cash entry'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÓäÏ ãÑÇÌÚ','Entry checked'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÓäÏÇÊ   ','Vouchers'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÓäæÇÊ ÇáÓÇÈÞÉ','Previous years'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÔÇÑÚ','Street'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÔÇÑÚ ÇáÑÆíÓí','Main road'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÔÍä','Shipping'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÔÑßÉ','Company'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÔÞÉ','Flat'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÔÞÉ ãÍÌæÒÉ ãä ÞÈá : ','Flat reserved by:'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÔÞÉ æÇÑÏÉ ÈÚÞÏ : ','The Flat in contract:'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÔÞÞ','Flats'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÔÞÞ ÇáãÄÌÑÉ','Leased apartments'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÔßÇæí','Complaints'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÔßá','Shape'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÔåÑ','Month'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÔåÑ 1','Month 1'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÔåÑ 10','Month 10'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÔåÑ 11','Month 11'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÔåÑ 12','Month 12'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÔåÑ 2','Month 2'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÔåÑ 3','Month 3'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÔåÑ 4','Month 4'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÔåÑ 5','Month 5'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÔåÑ 6','Month 6'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÔåÑ 7','Month 7'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÔåÑ 8','Month 8'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÔåÑ 9','Month 9'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÔíßÇÊ','Cheques'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÔíßÇÊ ÇáãÄÌáÉ','Deferred cheques'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÔíßÇÊ ÇáãÍÕáÉ','Collected cheques'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÔíßÇÊ ÇáãÍÕáÉ áÝÊÑÉ ÇáÅíÑÇÏ','Collected checques of revenue period'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÔíßÇÊ ÇáãÑÊÌÚÉ','Returned cheques'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÔíßÇÊ ÇáãÓÊáãÉ','Received cheques'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÔíßÇÊ ÛíÑ ÇáãÍÕáÉ','Uncollected cheques'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÕÇÝí','Net'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÕÝÉ','Adjective'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÕÝÉ áÇÊíäí','Latin Adjective'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÕß','Instrument'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÕáÇÍíÇÊ','Permissions'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÕáÇÍíÉ','Permission'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÕäÏæÞ','Petty cash'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÕäÝ','Catery'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÕäÝ ÇáÃÈ','Main catery'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÕæÑ','Pictures'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÕíÇäÉ ','Maintenance'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÕíÇäÉ ÇáÎÇÑÌíÉ','External Maintenance'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÕíÇäÉ ÇáÏÇÎáíÉ','Internal Maintenance'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÖÇÍíÉ','Suburb'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÖÑÈ ÈÑÞã ËÇÈÊ','Multiplication by fixed number'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÖÑÈ ÈäÓÈÉ ãÆæíÉ','Multiplication by percentage'

insert into [StrSource] 
([Ar],[En])
select  'ÇáØÇÈÞ','Floor'

insert into [StrSource] 
([Ar],[En])
select  'ÇáØÈÇÚÉ','Printing'

insert into [StrSource] 
([Ar],[En])
select  'ÇáØÈíÚÉ','Nature'

insert into [StrSource] 
([Ar],[En])
select  'ÇáØÑÞ ÇáãÓÊÎÏãÉ','Used roads'

insert into [StrSource] 
([Ar],[En])
select  'ÇáØáÈíÇÊ','Orders'

insert into [StrSource] 
([Ar],[En])
select  'ÇáØæá','Length'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÚÇãá ÇáãÓÄæá','Responsible worker'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÚÏÇÏ','Meter'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÚÏÇÏ ÇáÍÇáí','Current meter'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÚÏÇÏ ÇáÓÇÈÞ','Previous meter'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÚÏÏ','Quantity'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÚÏÏ Çáßáí','Total number'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÚÏÏ Ýí ÇáØÇÈÞ','No in each floor'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÚÑÖ','Display'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÚÑæÖ','Offers'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÚÞÇÑ','Property'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÚÞÇÑ : ','Property:'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÚÞÇÑ æÃÚãÇá ÇáÕíÇäÉ','Unit and Maintenance works'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÚÞÇÑÇÊ','Properties'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÚÞÇÑÇÊ ÚÞÏ ÇáÕíÇäÉ','Property maintenace contract'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÚÞÏ','Contract'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÚÞÏ ÇáãÑÊÈØ','Related contract'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÚÞÏ ãÑÇÌÚ','Contract checked'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÚÞÏ ãäÊåí','Contract Expired'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÚÞæÏ','Contracts'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÚÞæÏ ÇáÊí ÞÑÈ ÇäÊåÇÄåÇ','Contracts near to expire'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÚÞæÏ ãäÊåíÉ ÇáãÏÉ','Expired contracts'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÚÞæÏ ãäÊåíÉ ÇáãÏÉ æ ÛíÑ ãäÊåíÉ ÇáÚÞÏ','Expired contracts and Non-terminated contracts'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÚÞæÏ ãäåíÉ ÇáãÏÉ','Expired contract'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÚãÇá','Workers'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÚãÇáÉ','Employees'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÚãÑ ÇáÅäÊÇÌí','Useful life'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÚãá ÇáãØáæÈ','Action required'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÚãá ÈÇáÊÇÑíÎ ÇáåÌÑí','Work in Hijri date format'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÚãáÇÊ','Currencies'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÚãáÉ','Currency'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÚãáÉ ÇáÅÝÊÑÇÖíÉ','Default currency'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÚãáÉ æ ÇáÊÚÇÏá','Currency & Rate'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÚãáíÇÊ','Operations'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÚãáíÇÊ Úáì ÇáÇÕá','Operations on asset'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÚãáíÇÊ Úáì ÇáÔíßÇÊ','Operations on cheques'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÚãáíÇÊ Ýí ÊÞÑíÑ ÇáÃæÑÇÞ ÇáãÇáíÉ','Operations in note report'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÚãáíÉ','Operation'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÚãæáÉ','Commission'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÚãæáÉ ãä ÇáÚãíá','Commission from customer value'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÚãæáÉ ãä ÕÇÍÈ ÇáÚÞÇÑ','Commission from owner value'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÚãíá','Client'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÚäÕÑ ãÍÏÏ Ýí ãæÞÚ ÂÎÑ ','Element specified in another location'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÚäæÇä','Address'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÚäæÇä áÇÊíäí','Latin address'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÚäæÇä íÍæí','Address contain'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÚæÇãá æÇáãÔÇÑíÚ ÇáãÄËÑÉ','Factors and projects affecting'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÛÇÁ ÇáÅÑÌÇÚ','Cancel return'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÛÇÁ ÇáÃãÑ','Cancel'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÛÇÁ ÇáÊÍÕíá','Cancel collection'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÛÇÁ ÇáÊÙåíÑ','Cancel endorsement'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÛÇÁ ÇáÝáÊÑ','Remove filter'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÛÇÁ ÊÑÍíá','UnPost'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÛÑÇãÇÊ','Fines'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÛÑÖ ãä ÇáÅíÌÇÑ','Purpose of rent'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÛÑÖ ãä ÇáÚÞÏ','Purpose of the contract'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÛÑÖ ãä ÇáÚÞÏ áÇÊíäí','Purpose of the contract Latin'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÛÑÝ æ ÇáØæÇÈÞ','Rooms and Flats'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÝÇÊæÑÉ ãÑÇÌÚÉ','Bill checked'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÝÊÑÉ','Period'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÝÑÒ','Sort'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÝÑÒ ÍÓÈ','Sort By'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÝÑÒ...','Sorting ...'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÝÑÚ','Brunch'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÝÑÚ ÇáÑÆíÓí','Main branch'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÝÑÞ','Difference'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÝÑæÚ','Branches'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÝÚáí','Actual'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÝáá','Villas'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÝáá ÇáãÄÌÑÉ æÇáÛíÑ ãÄÌÑÉ ','Leased and Non-leased villas'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÝáá ÇáãÈÇÚÉ æÇáÛíÑ ãÈÇÚÉ ','Sold and Non-sold villas'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÝæÇÊíÑ','Bills'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÝíáÇ','Villa'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÞÇÆãÉ','List'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÞÏíã','Old'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÞÓØ','Payemnt'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÞÓØ ÇáËÇÈÊ','Fixed installment'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÞÓØ ÇáãÊÒÇíÏ','Increasing installment'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÞÓØ ÇáãÊäÇÞÕ','Decreasing installment'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÞØÚÉ','Block'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÞãÑ ÇáÕäÇÚí','Satellite'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÞæÇÆã','Menus'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíÇã ÈÅÌÑÇÆíÇÊ ÇáãØÇÈÞÉ','Do matching procedures'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíÏ ÇáÅÝÊÊÇÍí','Opening entry'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíÏ ÇáÍÓÇÈí  ','Journal Entry'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíÏ ÇáãÎÊÇÑ ÛíÑ ÕÍíÍ áÃäå áÇíÍæí ÍÓÇÈ ÇáÒÈæä','Journal entry does not contain customer account'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíÏ ÍÓÇÈí','Multi entries'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíÏ ÛíÑ ãÑÍá','Unposted entry'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíÏ ÛíÑ ãäØÞí','illogical journal entry'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíÏ áå ÃÕá åá ÊÑíÏ ÇáÊÚÏíá ¿','Entry has origin are you sure to modify?'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíÏ ãÑÊÈØ ÈÊÍÕíá æÑÞÉ ãÇáíÉ','Entry is related to cheque collection'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíãÉ','Value'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíãÉ 1','Value 1'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíãÉ 2','Value 2'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíãÉ ÇáÅÌãÇáíÉ','Total value'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíãÉ ÇáÃÓÇÓíÉ áÍÓÇÈ ÇáÇåÊáÇß ','Primary value to calculate depreciation'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíãÉ ÇáÅÝÊÑÇÖíÉ ','Default value'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíãÉ ÇáÌÏíÏÉ','New value'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíãÉ ÇáÌÏíÏÉ ááÃÕá','New value of asset'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíãÉ ÇáÍÇáíÉ','Current value'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíãÉ ÇáÓÇÈÞÉ','Previous value'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíãÉ ÇáÓäæíÉ','Annual value'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíãÉ ÇáÔåÑíÉ','Monthly value'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíãÉ ÇáãÊÈÞíÉ','Residual value'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíãÉ ÇáãÍÕáÉ','Value received'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíãÉ ÇáãÍÕáÉ ÃßÈÑ ãä ÇáÞíãÉ ÇáÅÌãÇáíÉ','Collected value is lager than total value'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíãÉ ÇáãÍÕáÉ ÌÒÆíÇ','Amount partly collected'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíãÉ ÇáãÑÊÈØÉ ÈÇáÚÞæÏ ãÎÊáÝÉ Úä ÞíãÉ ÇáæÑÞÉ , åá ÊÑíÏ ÇÚÇÏÉ ÊæÒíÚ ÇáãÈáÛ ÍÓÈ ÇáäÓÈ¿','The linked value with contract is different then the cheque amount, Do you want to redistribute the amount by percentages?'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíãÉ ÇáãÑÌÚÉ','Return Value'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíãÉ ÇáãÓÊÍÞÉ ááãÇáß','Value due to owner'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíãÉ ÇáãÓÊÍÞÉ ááãÓÊÃÌÑ','Value due to tenant'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíãÉ Èíä','Value Between'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíãÉ ÛíÑ ÇáãÍÕáÉ','Value not collected'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíãÉ ßÎÑÏÉ','Value as scrap'

insert into [StrSource] 
([Ar],[En])
select  'ÇáÞíæÏ','Entries'

insert into [StrSource] 
([Ar],[En])
select  'ÇáßÝÇáÉ','Warranty'

insert into [StrSource] 
([Ar],[En])
select  'ÇáßÝíá','Sponser'

insert into [StrSource] 
([Ar],[En])
select  'ÇáßÝíá áÇÊíäí','Latin Sponser'

insert into [StrSource] 
([Ar],[En])
select  'Çáßá','All'

insert into [StrSource] 
([Ar],[En])
select  'ÇáßáÝÉ','Cost'

insert into [StrSource] 
([Ar],[En])
select  'ÇáßáÝÉ ÇáÅÌãÇáíÉ','Total cost'

insert into [StrSource] 
([Ar],[En])
select  'ÇáßáÝÉ ááæÍÏÉ','Cost per unit'

insert into [StrSource] 
([Ar],[En])
select  'ÇáßãíÉ','Quantity'

insert into [StrSource] 
([Ar],[En])
select  'ÇáßãíÉ 1','Quantity 1'

insert into [StrSource] 
([Ar],[En])
select  'ÇáßãíÉ 2','Quantity 2'

insert into [StrSource] 
([Ar],[En])
select  'ÇáßãíÉ 3','Quantity 3'

insert into [StrSource] 
([Ar],[En])
select  'ÇáßãíÉ ÇáÌÏíÏÉ ÊÕÈÍ','New Quantity become'

insert into [StrSource] 
([Ar],[En])
select  'ÇáßãíÉ ÇáÍÇáíÉ','Current quantity'

insert into [StrSource] 
([Ar],[En])
select  'ÇáßåÑÈÇÁ','Electricity'

insert into [StrSource] 
([Ar],[En])
select  'ÇááÛÉ','Language'

insert into [StrSource] 
([Ar],[En])
select  'Çááæä','Color'

insert into [StrSource] 
([Ar],[En])
select  'Çááæä ÇáÃæá','1st Color'

insert into [StrSource] 
([Ar],[En])
select  'Çááæä ÇáËÇäí','2nd Color'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÄÌÑ','Lessor'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÄÌÑÉ','Leased'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÇÏÉ','Material'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÇáß','The Owner'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÇáß ÇáÓÇÈÞ','Previous owner'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÈÇÚÉ','Sold '

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÈÇáÛ ÇáäÞÏíÉ','Cash Amount'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÈÇáÛ ÇáäÞÏíÉ ÇáãÓÊÍÞÉ ','Cash due'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÈáÛ','Amount'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÈáÛ ÇáÅÌãÇáí','Total amount'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÈáÛ ÇáãÊÈÞí','Remaining amount'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÈáÛ ÇáãÊÑÊÈ','Due amount'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÈáÛ ÇáãÏÝæÚ','Paid amount'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÈáÛ ÇáãÓÊÍÞ','Amount due'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÈáÛ ÇáãÞÈæÖ','Collected amount'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÊÇÌÑÉ','Trading sheet'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÊÇÎÑÇÊ','Overdue amounts'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÊÍæáÇÊ','Transgender'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÊÛíÑÇÊ','Variables'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÌáÏ','Folder'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÌãÚ','Complex'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÌãæÚ','Total .'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÌãæÚ ÇáÚÇã','Grand total'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÌãæÚÉ','Group'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÌãæÚÉ ÇáÑÆíÓíÉ','Main group'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÍÇÝÙÉ','vernate'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÍÊæíÇÊ    F1','Contents    F1'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÍÌæÒ','Reserved'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÍÕá','Collected'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÍÕá / ÞíãÉ','Collected / Value'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÍÕá ÓÇÈÞÇ','Previously collected'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÍÕáÉ','Taken'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÍÕáÉ ÌÒÆíÇ','Partly Taken'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÍÕáÉ ÌÒÆíÇð','Partial collected'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÍÕáÉ ßáíÇð','Completely collected'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÍÙæÑ','Blocked'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÍÝÙÉ ÇáÚÞÇÑíÉ','Real estate briefcase'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÍá','Shop'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÍá ãÍÌæÒ ãä ÞÈá : ','Shop is reserved by:'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÍá æÇÑÏ ÈÚÞÏ : ','Shop inside contract:'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÍáÇÊ','Shops'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÏíä','Debit'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÏíäÉ','City'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÑÇÌÚÉ','Audited'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÑÇÌÚÉ áÇäãÇØ ÇáÓäÏÇÊ','Checked for entries type'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÑÇÝÞ ÇáÚÇãÉ','Public facilities'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÑÊÌÚ','Discards'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÑÊÌÚ / ÞíãÉ','Returned / Value'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÑÊÌÚÉ','The Returned'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÑÍá','Posted'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÑÍá / ÞíãÉ','Posted / Value'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÑÍáÉ','Posted'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÑÓá','Sent by'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÑÝÞÇÊ','Attachments'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÒÇäíÉ','Balance sheet'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÓÇÍÉ','Area'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÓÇÍÉ ÇáÅÌãÇáíÉ','Total area'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÓÇÍÉ ÇáãÄÌÑÉ','Leased area'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÓÇÍÉ Èíä','Area between'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÓÇÍÉ ÛíÑ ÇáãÄÌÑÉ','Non-leased area'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÓÇÍÉ ãä','Area from'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÓÇÍÉ æ ÇáÊÔØíÈ','Space area and finishing'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÓÇÑ','File location'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÓÇÑ ÇáÅÝÊÑÇÖí','Default path'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÓÇÑ ÇáÇÝÊÑÇÖí áÍÝÙ ÇáæËÇÆÞ','Default path to save documents'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÓÇÑ ÇáÌÏíÏ','New Path'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÓÇÑ ÇáÞÏíã','Old Path'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÓÊÃÌÜÑ','Tenant'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÓÊÎÏã','User'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÓÊÎÏãæä','Users'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÓÊÎÏãíä ÇáÍÇáííä','Current users'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÓÊÝíÏ','Beneficiary'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÓÊäÏ','Voucher'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÓÊæÏÚ','Store'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÓÊæÏÚ ÇáÅÝÊÑÇÖí','Default store'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÓÊæÏÚ ÇáÑÆíÓí','Main Store'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÓÊæÏÚÇÊ','Warehouses'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÓÊæì','Level'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÓÍ ÇáÖæÆí','Scanning settings'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÕÇÑíÝ','Expenses'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÕÇÑíÝ ÇáÌãÑßíÉ','Customs expenses'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÕÇÑíÝ ÇáÏÇÎáíÉ','Internal expenses'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÕÏÑ','Source'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÕØáÍ :','Term:'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÕØáÍ ÇáÌÏíÏ','New term'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÕØáÍÇÊ','Terms'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÕáÍ ÇáÞÏíã','Old term'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãØÈæÚÉ','Printed'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÙåÑ','The Endorsement'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÙåÑ / ÞíãÉ','Endorsement / Value'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÚÇãáÇÊ','Transactions'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÚÇãáÇÊ ÇáÚÞÇÑíÉ','Realty Transactions'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÚÇãáÇÊ ÇáãÍÇÓÈíÉ','Accounting Transactions'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÚáæãÇÊ ÇáÚÇãÉ','General Information'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÚáæãÇÊ ÇáãÇáíÉ','Financial Information'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãÝÊÇÍ','Key'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãßÇÊÈ','Offices'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãßÇÝÆ','Equivalent'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãáÇÍÙÇÊ','Notes'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãáÇÍÙÇÊ 2','Notes 2'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãáÛì','Canceled'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãáÝ','File'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãáÝ ÛíÑ ÕÇáÍ','File is invalid'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãáÝ ÛíÑ ãæÌæÏ','File does not exist'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãáÝ ãæÌæÏ ÓÇÈÞÇð','File already exist'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãáÝ ãæÌæÏ ãÓÈÞÇð','File already exists'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãáßíÉ','Ownership'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãäÇØÞ','Areas'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãäÇÞáÇÊ','Transfers'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãäÊåíÉ','Finished'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãäÔÃ','Origin'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãäØÞÉ','Area name'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãåäÉ','Occupation'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãåäÉ áÇÊíäí','Latin Occupation'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãæÇÏ','Materials'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãæÇÏ ÇáãÓÊÎÏãÉ','Used materials'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãæÇÕÝÉ','Specification'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãæÇÞÝ','Parking'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãæÇÞÝ ÇáãÄÌÑÉ æ ÛíÑ ÇáãÄÌÑÉ','Leased and Non-leased Parking'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãæÇÞÝ ãÙááÉ','Sheltered parking'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãæÏíá','Model'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãæÑÏ','Supplier'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãæÑÏíä','Suppliers'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãæÖæÚ','Subject'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãæÖæÚ  Theme','Theme'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãæÖæÚ íÍæí','Subject contains'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãæÞÚ','Location'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãæÞÚ ÇáÃÈ','Main location'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãæÞÚ ÇáÃæáí','First location'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãæÞÚ ÇáÌÏíÏ','New location'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãæÞÚ ÇáÍÇáí','Current location'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãæÞÚ Úáì ÇáÎÑíØÉ','Location on map'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãæÞÝ','Parkings'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãæÞÝ ãÍÌæÒ ãä ÞÈá : ','Parking is reserved by:'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãíÒÇäíÉ','Balance sheet'

insert into [StrSource] 
([Ar],[En])
select  'ÇáãíÒÇäíä','Mezzanine'

insert into [StrSource] 
([Ar],[En])
select  'ÇáäÇÝÐÉ','Window'

insert into [StrSource] 
([Ar],[En])
select  'ÇáäÊÇÆÌ','Results'

insert into [StrSource] 
([Ar],[En])
select  'ÇáäÊíÌÉ','Result'

insert into [StrSource] 
([Ar],[En])
select  'ÇáäÓÈÉ','Percentage'

insert into [StrSource] 
([Ar],[En])
select  'ÇáäÓÈÉ %','Percentage %'

insert into [StrSource] 
([Ar],[En])
select  'ÇáäÓÈÉ ÇáãÏÝæÚÉ','Paid percentage'

insert into [StrSource] 
([Ar],[En])
select  'ÇáäÓÎ ÇáÅÍÊíÇØ ÇáÊáÞÇÆí','Auto backup'

insert into [StrSource] 
([Ar],[En])
select  'ÇáäÓÎ ÇáÅÍÊíÇØí','Backup'

insert into [StrSource] 
([Ar],[En])
select  'ÇáäÓÎ Úáì ÞÑÕ ÎÇÑÌí','Backup on external device'

insert into [StrSource] 
([Ar],[En])
select  'ÇáäÓÎÉ ÇáÅÍÊíÇØíÉ ÛíÑ ÕÇáÍÉ','Backup is not valid'

insert into [StrSource] 
([Ar],[En])
select  'ÇáäÕ','Text'

insert into [StrSource] 
([Ar],[En])
select  'ÇáäÙÇã ÇáãáÍÞ ÈÇáãÓÈÍ','Basin Filter System'

insert into [StrSource] 
([Ar],[En])
select  'ÇáäãØ','pattern'

insert into [StrSource] 
([Ar],[En])
select  'ÇáäæÇÝÐ ÇáãÝÊæÍÉ','Opened windows'

insert into [StrSource] 
([Ar],[En])
select  'ÇáäæÚ','Type'

insert into [StrSource] 
([Ar],[En])
select  'ÇáåÇÊÝ','Phone'

insert into [StrSource] 
([Ar],[En])
select  'ÇáåÏÇíÇ','Gifts'

insert into [StrSource] 
([Ar],[En])
select  'ÇáæÇÌåÇÊ','Interfaces'

insert into [StrSource] 
([Ar],[En])
select  'ÇáæÍÏÇÊ','Units'

insert into [StrSource] 
([Ar],[En])
select  'ÇáæÍÏÇÊ ÇáÊí ÓíÊã ÅÎáÇÄåÇ','Units that will be vacated'

insert into [StrSource] 
([Ar],[En])
select  'ÇáæÍÏÇÊ ÇáÝÇÑÛÉ','Empty units'

insert into [StrSource] 
([Ar],[En])
select  'ÇáæÍÏÇÊ ÇáãÄÌÑÉ æÛíÑ ÇáãÄÌÑÉ','Leased and Non-leased units'

insert into [StrSource] 
([Ar],[En])
select  'ÇáæÍÏÇÊ ÇáãÈÇÚÉ æÛíÑ ÇáãÈÇÚÉ','Sold and Non-sold units'

insert into [StrSource] 
([Ar],[En])
select  'ÇáæÍÏÇÊ ÇáãÍÙæÑÉ','Blocked units'

insert into [StrSource] 
([Ar],[En])
select  'ÇáæÍÏÉ','Unit'

insert into [StrSource] 
([Ar],[En])
select  'ÇáæÍÏÉ 2','Unit 2'

insert into [StrSource] 
([Ar],[En])
select  'ÇáæÍÏÉ 3','Unit 3'

insert into [StrSource] 
([Ar],[En])
select  'ÇáæÍÏÉ ÇáÃæáì','First unit'

insert into [StrSource] 
([Ar],[En])
select  'ÇáæÍÏÉ ÇáËÇáËÉ','Third unit'

insert into [StrSource] 
([Ar],[En])
select  'ÇáæÍÏÉ ÇáËÇäíÉ','Second unit'

insert into [StrSource] 
([Ar],[En])
select  'ÇáæÑÞÉ ÇáãÇáíÉ','Note paper'

insert into [StrSource] 
([Ar],[En])
select  'ÇáæÑÞÉ ÇáãÇáíÉ ãÑÇÌÚÉ','Note is checked'

insert into [StrSource] 
([Ar],[En])
select  'ÇáæÓØí','Average'

insert into [StrSource] 
([Ar],[En])
select  'ÇáæÕÝ','Description'

insert into [StrSource] 
([Ar],[En])
select  'ÇáæÕÝ ÇáÚÑÈí','Arabic description'

insert into [StrSource] 
([Ar],[En])
select  'ÇáæÕÝ ÇááÇÊíäí','Latin description'

insert into [StrSource] 
([Ar],[En])
select  'ÇáæÕÝ áÇÊíäí','Latin Description'

insert into [StrSource] 
([Ar],[En])
select  'ÇáæÙíÝÉ','Ocupation'

insert into [StrSource] 
([Ar],[En])
select  'Çáì','To'

insert into [StrSource] 
([Ar],[En])
select  'Çáì ÇáÍÓÇÈ','To account'

insert into [StrSource] 
([Ar],[En])
select  'Çáì ÇáãÓÊÎÏãíä ÇáãÍÏÏíä','To selected users'

insert into [StrSource] 
([Ar],[En])
select  'Çáì ÇáãÓÊæÏÚ','To store'

insert into [StrSource] 
([Ar],[En])
select  'Çáì ÇáãæÞÚ','To location'

insert into [StrSource] 
([Ar],[En])
select  'Çáì ÇáäãØ','To pattern'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÚÞæÏ ÇáÓÇÈÞÉ','Previous contracts No'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÚÞæÏ Çáßáí','Contracts total No'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÚÞæÏ Ýí ÇáÓäæÇÊ ÇáÓÇÈÞÉ','Contracts No in previous years'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÚÞæÏ Ýí ÇáãáÝÇÊ ÇáÓÇÈÞÉ','Contract No in old files'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÛÑÝ ÇáÃÎÑì','Number of extra rooms'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÛÑÝ ÇáÃÓÇÓíÉ','Number of main rooms'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÝáá ÇáãÄÌÑÉ','Leased villas No'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáÝáá ÛíÑ ÇáãÄÌÑÉ','Non-leased villas No'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáãÍáÇÊ','Shops count'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáãÓÇÈÍ','Basin count'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáãÓÊæÏÚÇÊ','Warehouses No'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáãáÇÚÈ','Play yards count'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáäÓÎ ÇáãÄÞÊÉ','Number of temporary copies'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáæÍÏÇÊ ÇáãÄÌÑÉ','Leased units Number'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇáæÍÏÇÊ ÛíÑ ÇáãÄÌÑÉ','Non-leased units number'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÇíÇã / ÇÔåÑ ÇáÇåÊáÇß','Number of days / months of depreciation'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÔÞ ÇáÓÇÆÞíä','Number of drivers flats'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÔÞÞ ÇáÈäÇÁ','Number of flats building'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÔÞÞ ÇáÎÏã ','Number of servants flats'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÔÞÞ ÇáÓÇÆÞíä','Drivers appartment count'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÔÞÞ ÇáÓÇßäíä','Dwell flats No'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ØæÇÈÞ ÇáÈäÊ åÇæÓ','Number of penthouse floors'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ØæÇÈÞ ÇáÔÞÞ','Number of flats floors'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ØæÇÈÞ ÇáãßÇÊÈ','Number of offices floors'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ØæÇÈÞ ÇáãæÇÞÝ','Number of parking floors'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ØæÇÈÞ ÇáãæÇÞÝ ÊÍÊ ÇáÇÑÖ','Number of underground parking floors'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ØæÇÈÞ ÇáãíÒÇäíä','Number of mizanen floors'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ÛÑÝ ÇáÎÏã','Number of maid room'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ãÑÇÊ ÅÑÓÇá SMS','Number of times send SMS'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ãÑÇÊ ÇáØÈÇÚÉ','Number of times printing'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ ãæÇÞÝ ÇáÓíÇÑÇÊ','Parking count'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ äÞÇØ ÇáÅäÇÑÉ','Lighting points count'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏÏ æÍÏÇÊ ÇáÅäÊÇÌ ÇáãÊæÞÚÉ','Expected production units number'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏã ÅÓÊÌÇÈÉ','No response'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏã ÅäåÇÁ ÇáÚÞÏ ÚäÏ æÌæÏ ÑÕíÏ ááÒÈæä','Not terminate contract when there is a customer balance'

insert into [StrSource] 
([Ar],[En])
select  'ÚÏã ÊæÝÑ ÑÕíÏ','No balance'

insert into [StrSource] 
([Ar],[En])
select  'ÚÑÈí','Arabic'

insert into [StrSource] 
([Ar],[En])
select  'ÚÑÖ','Preview'

insert into [StrSource] 
([Ar],[En])
select  'ÚÑÖ ÇáÃæÑÇÞ ÇáãÇáíÉ ÇáãÏÝæÚÉ ÇáãÓÊÍÞÉ','View due payable notes'

insert into [StrSource] 
([Ar],[En])
select  'ÚÑÖ ÇáÃæÑÇÞ ÇáãÇáíÉ ÇáãÞÈæÖÉ ÇáãÓÊÍÞÉ','View due recievable notes'

insert into [StrSource] 
([Ar],[En])
select  'ÚÑÖ ÇáÈØÇÞÉ','View card'

insert into [StrSource] 
([Ar],[En])
select  'ÚÑÖ ÇáÔíß','View cheque'

insert into [StrSource] 
([Ar],[En])
select  'ÚÑÖ ÇáÚÞÏ','View contract'

insert into [StrSource] 
([Ar],[En])
select  'ÚÑÖ ÇáÝÇÊæÑÉ','View bill'

insert into [StrSource] 
([Ar],[En])
select  'ÚÑÖ ÇáÞíÏ','View Voucher'

insert into [StrSource] 
([Ar],[En])
select  'ÚÑÖ ÇáÞíæÏ ÇáãÑÍáÉ','View posted entry'

insert into [StrSource] 
([Ar],[En])
select  'ÚÑÖ ÇáÞíæÏ ÛíÑ ÇáãÑÍáÉ','View non-posted entry'

insert into [StrSource] 
([Ar],[En])
select  'ÚÑÖ ÇáãÈáÛ ÇáãÏÝæÚ','Show paid amount'

insert into [StrSource] 
([Ar],[En])
select  'ÚÑÖ ÇáãÏÞÞ','Show checked box'

insert into [StrSource] 
([Ar],[En])
select  'ÚÑÖ ÇáãÑÇÌÚ','View Refrence'

insert into [StrSource] 
([Ar],[En])
select  'ÚÑÖ ÇáãæÇÏ ÇáÎÏãíÉ','View service materials'

insert into [StrSource] 
([Ar],[En])
select  'ÚÑÖ ÇáãæÇÏ ÇáÝÇÑÛÉ ','View empty materials'

insert into [StrSource] 
([Ar],[En])
select  'ÚÑÖ ÇáãæÇÏ ÇáãÓÊæÏÚíÉ ','View stocking materials'

insert into [StrSource] 
([Ar],[En])
select  'ÚÑÖ ÈÇáÃÑÕÏÉ','Show by balance'

insert into [StrSource] 
([Ar],[En])
select  'ÚÑÖ ÈÇáãÌÇãíÚ','Show by total'

insert into [StrSource] 
([Ar],[En])
select  'ÚÑÖ ÓÚÑ','Quotation Card'

insert into [StrSource] 
([Ar],[En])
select  'ÚÑÖ ÓÚÑ ÇáßáÝÉ','Show cost price'

insert into [StrSource] 
([Ar],[En])
select  'ÚÑÖ ÛíÑ ÇáãÏÞÞ','Show Unchecked box'

insert into [StrSource] 
([Ar],[En])
select  'ÚÑÖ ÛíÑ ÇáãÑÇÌÚ','View un-checked'

insert into [StrSource] 
([Ar],[En])
select  'ÚÑÖ ÞíÏ','View voucher'

insert into [StrSource] 
([Ar],[En])
select  'ÚÑÖ ÞíÏ ÇáÊÇãíäÇÊ','View deposit entry'

insert into [StrSource] 
([Ar],[En])
select  'ÚÑÖ ÞíÏ ÇáãÈáÛ ÇáãÓÊÍÞ','View due amount entry'

insert into [StrSource] 
([Ar],[En])
select  'ÚÑÖ ãÑßÒ ÇáßáÝÉ','Show cost center'

insert into [StrSource] 
([Ar],[En])
select  'ÚÑÖ ãáÝÇÊ Çá PDF Ýí ÇáÈÑäÇãÌ','View PDF files'

insert into [StrSource] 
([Ar],[En])
select  'ÚÑæÖ ÇáÇÓÚÇÑ','Quotations'

insert into [StrSource] 
([Ar],[En])
select  'ÚÑæÖ ãÊÝÑÞÉ','Various offers'

insert into [StrSource] 
([Ar],[En])
select  'ÚÑíÖ','Bold'

insert into [StrSource] 
([Ar],[En])
select  'ÚÞÏ ÃÑÖ','Land contract'

insert into [StrSource] 
([Ar],[En])
select  'ÚÞÏ ÅíÌÇÑ ÃÑÖ','Land rent contract'

insert into [StrSource] 
([Ar],[En])
select  'ÚÞÏ ÅíÌÇÑ ÔÞÉ','Flat rent contract'

insert into [StrSource] 
([Ar],[En])
select  'ÚÞÏ ÅíÌÇÑ ÝíáÇ','Villa rent contract'

insert into [StrSource] 
([Ar],[En])
select  'ÚÞÏ ÅíÌÇÑ ãÍá','Shop rent contract'

insert into [StrSource] 
([Ar],[En])
select  'ÚÞÏ ÅíÌÇÑ ãæÞÝ','Parking rent contract'

insert into [StrSource] 
([Ar],[En])
select  'ÚÞÏ ÇáÔÞÉ ÇáãÑÊÈØ ÈÇáãæÞÝ','Flat contract linked to parking'

insert into [StrSource] 
([Ar],[En])
select  'ÚÞÏ ÇáÕíÇäÉ','Maintenance contract'

insert into [StrSource] 
([Ar],[En])
select  'ÚÞÏ ÇíÌÇÑ ÔÞÉ1','Lease an apartment 1'

insert into [StrSource] 
([Ar],[En])
select  'ÚÞÏ ÈíÚ ÃÑÖ','Land selling contract'

insert into [StrSource] 
([Ar],[En])
select  'ÚÞÏ ÈíÚ ÔÞÉ','Flat selling contract'

insert into [StrSource] 
([Ar],[En])
select  'ÚÞÏ ÈíÚ ÝíáÇ','Villa selling contract'

insert into [StrSource] 
([Ar],[En])
select  'ÚÞÏ ÈíÚ ãÍá','Shop selling contract'

insert into [StrSource] 
([Ar],[En])
select  'ÚÞÏ ÈíÚ ãæÞÝ','Parking selling contract'

insert into [StrSource] 
([Ar],[En])
select  'ÚÞÏ ÎÏãÇÊ','Services contract'

insert into [StrSource] 
([Ar],[En])
select  'ÚÞÏ ãæÞÝ','Parking contract'

insert into [StrSource] 
([Ar],[En])
select  'ÚÞæÏ ÇáÅíÌÇÑ  ','Rent contracts'

insert into [StrSource] 
([Ar],[En])
select  'ÚÞæÏ ÇáÈíÚ  ','Selling contracts'

insert into [StrSource] 
([Ar],[En])
select  'ÚÞæÏ ÇáÎÏãÇÊ','Services contracts'

insert into [StrSource] 
([Ar],[En])
select  'ÚÞæÏ ÇáÕíÇäÉ','Maintenance contracts'

insert into [StrSource] 
([Ar],[En])
select  'ÚÞæÏ ÇáãæÇÞÝ ÇáãÑÊÈØÉ','Related parking contracts'

insert into [StrSource] 
([Ar],[En])
select  'Úáíå','on him'

insert into [StrSource] 
([Ar],[En])
select  'Úáíå ÏÚæì ÞÖÇÆíÉ','He has a lawsuit'

insert into [StrSource] 
([Ar],[En])
select  'ÚáíåÇ ÏÚæì ÞÖÇÆíÉ','she has a lawsuit'

insert into [StrSource] 
([Ar],[En])
select  'ÚãÇá ÇáÕíÇäÉ','Maintenance workers'

insert into [StrSource] 
([Ar],[En])
select  'ÚãÑ ÇáÅÕá','Asset age'

insert into [StrSource] 
([Ar],[En])
select  'ÚãáíÇÊ','Operations'

insert into [StrSource] 
([Ar],[En])
select  'ÚãáíÇÊ ÇáÃæÑÇÞ ÇáãÇáíÉ','Notes operations'

insert into [StrSource] 
([Ar],[En])
select  'ÚãáíÇÊ ÇáÕíÇäÉ','Maintenance operations'

insert into [StrSource] 
([Ar],[En])
select  'ÚãæÏí','Vertical'

insert into [StrSource] 
([Ar],[En])
select  'ÚãæáÉ ÇáÎÏãÇÊ','Service commission'

insert into [StrSource] 
([Ar],[En])
select  'ÚäÏ ÇáÅäåÇÁ','When termination'

insert into [StrSource] 
([Ar],[En])
select  'ÚäÏ ÇáÇÖÇÝÉ','When add'

insert into [StrSource] 
([Ar],[En])
select  'ÚäÕÑ ÎÑíØÉ','Map element'

insert into [StrSource] 
([Ar],[En])
select  'ÚäæÇä ÇáÒÈæä','Customer address'

insert into [StrSource] 
([Ar],[En])
select  'ÚæÏÉ','Return'

insert into [StrSource] 
([Ar],[En])
select  'ÛÑÇãÇÊ ÇáÅÑÌÇÚ','Returns fines'

insert into [StrSource] 
([Ar],[En])
select  'ÛÑÇãÇÊ ÇáÇäåÇÁ','Termination fines'

insert into [StrSource] 
([Ar],[En])
select  'ÛÑÇãÉ ÇáÅÑÌÇÚ','Return fee'

insert into [StrSource] 
([Ar],[En])
select  'ÛÑÇãÉ ÇáÊÃÎíÑ','Delay fees'

insert into [StrSource] 
([Ar],[En])
select  'ÛÑÇãÉ ÇáÔíß ÇáãÑÊÌÚ','Returned cheque fees'

insert into [StrSource] 
([Ar],[En])
select  'ÛÑÈÇð','West'

insert into [StrSource] 
([Ar],[En])
select  'ÛÑÝÉ ÇáÎÇÏãÉ','Main room'

insert into [StrSource] 
([Ar],[En])
select  'ÛÑÝÉ ÇáÓÇÆÞ','Driver room'

insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ÇáãÈÇÚÉ','Unsold'

insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ÇáãÍÕáÉ','Un-collected'

insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ÇáãÍÙæÑ','Un-blocking'

insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ÇáãÍÙæÑÉ','Unblocked'

insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ÇáãÑÊÌÚÉ','Not returned'

insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ÇáãÑÍá / ÞíãÉ','Not deposit \ Value'

insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ÇáãÑÓá','Not Sent'

insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ÇáãØÈæÚÉ','Not Printed'

insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ÇáãäÊåíÉ','Un-finished'

insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ÞÇÈá ááÅÑÌÇÚ','Unable to return'

insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ÞÇÈá ááÊÍÕíá','Unable to collect'

insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ÞÇÈá ááÊÑÍíá','Unable to deposit'

insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ÞÇÈá ááÊÙåíÑ','Unable to endorsement'

insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ãÄÌÑ','Non-leased'

insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ãÈÇÚ','Not sold'

insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ãÍÏÏ','Not specified'

insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ãÍÕá','Uncollected'

insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ãÍÕá ÃÕáÇð','It is already not collected'

insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ãÑÇÌÚ','UnChecked'

insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ãÑÌÚ ÃÕáÇð','It is already not returned'

insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ãÑÍá','Not posted'

insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ãÑÍá ÃÕáÇð','It is already not posted'

insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ãÑÍá ááÈäß','Not posted to bank'

insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ãÓÊÑÏÉ','Not refunded'

insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ãÙåÑ ÃÕáÇð','It is already not endorsed'

insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ãÙåÑÉ','Not endorsed'

insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ãäÊåí','valid'

insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ãäÊåí ÇáãÏÉ','Not expired'

insert into [StrSource] 
([Ar],[En])
select  'ÛíÑ ãæÌæÏÉ','Not available'

insert into [StrSource] 
([Ar],[En])
select  'ÝÇÊæÑÉ ÇáßåÑÈÇÁ','Electricity bill'

insert into [StrSource] 
([Ar],[En])
select  'ÝÇÊæÑÉ ÇáãæÇÏ ÇáãÓÊÎÏãÉ','Bill of materials'

insert into [StrSource] 
([Ar],[En])
select  'ÝÇÊæÑÉ ãÈíÚÇÊ','Sales bill'

insert into [StrSource] 
([Ar],[En])
select  'ÝÇÊæÑÉ ãÑÊÌÚ ãÈíÚÇÊ','Sales return bill'

insert into [StrSource] 
([Ar],[En])
select  'ÝÇÊæÑÉ ãÑÊÌÚ ãÔÊÑíÇÊ','Purchase return bill'

insert into [StrSource] 
([Ar],[En])
select  'ÝÇÊæÑÉ ãÔÊÑíÇÊ','Purchase bill'

insert into [StrSource] 
([Ar],[En])
select  'ÝÇßÓ','Fax'

insert into [StrSource] 
([Ar],[En])
select  'ÝÊÍ','Open'

insert into [StrSource] 
([Ar],[En])
select  'ÝÊÍ ÇáÅÚÏÇÏÇÊ','Open Settings'

insert into [StrSource] 
([Ar],[En])
select  'ÝÊÍ ÇáÈíÇäÇÊ','Open data'

insert into [StrSource] 
([Ar],[En])
select  'ÝÊÍ ÇáÏÚæì','Open Lawsuit'

insert into [StrSource] 
([Ar],[En])
select  'ÝÊÍ Ïáíá ÇáÍÓÇÈÇÊ','Open chart of account'

insert into [StrSource] 
([Ar],[En])
select  'ÝÊÍ Ïáíá ãÑÇßÒ ÇáßáÝÉ','Open chart of cost center'

insert into [StrSource] 
([Ar],[En])
select  'ÝÊÍ äãØ ÇáÝÇÊæÑÉ ÇáãÍÏÏ áãæÇÏ ÇáÕíÇäÉ ÇáãÓÊÎÏãÉ ÈÇáÒíÇÑÉ','Open the selected type of the bill for materials used for maintenance visit'

insert into [StrSource] 
([Ar],[En])
select  'ÝÊÑÉ ÇáÅíÑÇÏ ãä ÊÇÑíÎ ','Revenue period from date'

insert into [StrSource] 
([Ar],[En])
select  'ÝÊÑÉ ÇáÇíÑÇÏ æÇáÊÍÕíá','Collection & Revenue Period'

insert into [StrSource] 
([Ar],[En])
select  'ÝÊÑÉ ÍÓÇÈ ÇáÅíÑÇÏ','Revenue period'

insert into [StrSource] 
([Ar],[En])
select  'ÝÊÑÉ ÍÓÇÈ ÇáÅíÑÇÏ : ','Revenue calculate period:'

insert into [StrSource] 
([Ar],[En])
select  'ÝÍÕ ÍÙÑ ÇáÒÈÇÆä','Check customers blocking'

insert into [StrSource] 
([Ar],[En])
select  'ÝÍÕ ßãíÉ ÇáãÓÊæÏÚ ÚäÏ ÇáÊÓáíã','Examination of the amount of the warehouse upon delivery'

insert into [StrSource] 
([Ar],[En])
select  'ÝÍÕ ßãíÉ ÇáãÓÊæÏÚ ÚäÏ ÇäÔÇÁ ÇáØáÈ','Examination of the amount of the warehouse when creating order'

insert into [StrSource] 
([Ar],[En])
select  'ÝÑÏ','Person'

insert into [StrSource] 
([Ar],[En])
select  'ÝÑÖ ÅÏÎÇá ÇáÈíÇä áßá Þáã','Force filling details for each line'

insert into [StrSource] 
([Ar],[En])
select  'ÝÑÖ ÅÏÎÇá ãÑßÒ ÇáßáÝÉ áßá Þáã','Force filling cost center for each line'

insert into [StrSource] 
([Ar],[En])
select  'ÝÑÞ ÇäåÇÁ ÇáÚÞÏ','Contract terminate difference'

insert into [StrSource] 
([Ar],[En])
select  'ÝÑæÞÇÊ ÃÓÚÇÑ ÇáÕÑÝ','Currency rate differences'

insert into [StrSource] 
([Ar],[En])
select  'ÝÔá','Failed'

insert into [StrSource] 
([Ar],[En])
select  'ÝáÊÑ','Filter'

insert into [StrSource] 
([Ar],[En])
select  'ÝáÊÑ ÌÏíÏ','New filter'

insert into [StrSource] 
([Ar],[En])
select  'ÝæÇÊíÑ ÇáßåÑÈÇÁ','Electricity bills'

insert into [StrSource] 
([Ar],[En])
select  'ÝíááÇ','Villa'

insert into [StrSource] 
([Ar],[En])
select  'ÞÇÆãÉ ÇáÊÏÝÞÇÊ ÇáäÞÏíÉ','Cash flow statement'

insert into [StrSource] 
([Ar],[En])
select  'ÞÇÆãÉ ÇáãÑßÒ ÇáãÇáí','Financial position statement'

insert into [StrSource] 
([Ar],[En])
select  'ÞÇÈá ááÅÑÌÇÚ','Can be returned'

insert into [StrSource] 
([Ar],[En])
select  'ÞÇÈá ááÈäÇÁ','Can be build'

insert into [StrSource] 
([Ar],[En])
select  'ÞÇÈá ááÊÌÏíÏ ÇáÊáÞÇÆí','Allow automatic renewal'

insert into [StrSource] 
([Ar],[En])
select  'ÞÇÈá ááÊÍÕíá','Can be collected'

insert into [StrSource] 
([Ar],[En])
select  'ÞÇÈá ááÊÍÕíá ÇáÌÒÆí','Can be partial collection'

insert into [StrSource] 
([Ar],[En])
select  'ÞÇÈá ááÊÑÍíá','Can be posted'

insert into [StrSource] 
([Ar],[En])
select  'ÞÇÈá ááÊÙåíÑ','Can be endrosed'

insert into [StrSource] 
([Ar],[En])
select  'ÞÇÚÏÉ ÇáÈíÇäÇÊ ãæÌæÏÉ íÑÌì ÇÓÊÎÏÇã ÇÓã ÂÎÑ','Database already exists please use another name'

insert into [StrSource] 
([Ar],[En])
select  'ÞÈá ÇáÈÏÃ ÈÚãáíÉ ÇáÅÓÊÑÌÇÚ','Before starting restore process'

insert into [StrSource] 
([Ar],[En])
select  'ÞÏ ÊÎÊáÝ äÊÇÆÌ ÇáÊÞÑíÑ ÊÈÚÇð ááÔÑæØ ÇáãÍÏÏÉ','Results will be different depending on the specific conditions of report'

insert into [StrSource] 
([Ar],[En])
select  'ÞÑÇÁÉ ÇáÚÏÇÏÇÊ','Meter reading
'

insert into [StrSource] 
([Ar],[En])
select  'ÞÑÇÁÉ ÚÏÇÏ ÇáßåÑÈÇÁ','Electricity meter reading'

insert into [StrSource] 
([Ar],[En])
select  'ÞÑÇÁÉ ÚÏÇÏ ÇáßåÑÈÇÁ ááÈäÇÁ','Building electricity meter reading'

insert into [StrSource] 
([Ar],[En])
select  'ÞÑÇÁÉ ÚÏÇÏÇÊ ÇáÈäÇÁ','Buliding Meter reading
'

insert into [StrSource] 
([Ar],[En])
select  'ÞÑÈ ÅÎáÇÄåÇ','Near to evacuate'

insert into [StrSource] 
([Ar],[En])
select  'ÞÑÈ ÅäÊåÇÁ ÇáÚÞÏ','Contract near to expire'

insert into [StrSource] 
([Ar],[En])
select  'ÞÕ','Cut'

insert into [StrSource] 
([Ar],[En])
select  'Þã ÈÍÐÝ ÇáÃÕá ÇæáÇ','First delete asset'

insert into [StrSource] 
([Ar],[En])
select  'Þã ÈÍÐÝ ÇáÚãáíÇÊ ÇáãÑÊÈØÉ ÃæáÇ','First you have to delete all related operations'

insert into [StrSource] 
([Ar],[En])
select  'Þã ÈÍÝÙ ÇáÈØÇÞÉ ÇáÍÇáÉ ÃæáÇð','First you have to save current card'

insert into [StrSource] 
([Ar],[En])
select  'Þã ÈÍÝÙ ÇáÈØÇÞÉ ÇáÍÇáíÉ ÃæáÇð','First delete current card'

insert into [StrSource] 
([Ar],[En])
select  'Þã ÈÍÝÙ ÇáÈØÇÞÉ ÇæáÇ','First delete card'

insert into [StrSource] 
([Ar],[En])
select  'ÞãÊ ÈÊÍÏíÏ ÎíÇÑ : ','You chose: '

insert into [StrSource] 
([Ar],[En])
select  'ÞæÇÆã ÇáÏÎá','Income Statement'

insert into [StrSource] 
([Ar],[En])
select  'ÞíÏ','Entry'

insert into [StrSource] 
([Ar],[En])
select  'ÞíÏ ÅÝÊÊÇÍí','Opening journal entry'

insert into [StrSource] 
([Ar],[En])
select  'ÞíÏ ÇáÅÑÌÇÚ','Return entry'

insert into [StrSource] 
([Ar],[En])
select  'ÞíÏ ÇáÅäÌÇÒ','Under process'

insert into [StrSource] 
([Ar],[En])
select  'ÞíÏ ÇáÊÍÕíá','Collect entry'

insert into [StrSource] 
([Ar],[En])
select  'ÞíÏ ÇáÊÍÕíá ÇáÌÒÆí','Partial collect entry'

insert into [StrSource] 
([Ar],[En])
select  'ÞíÏ ÇáÊÑÍíá','Deposit entry'

insert into [StrSource] 
([Ar],[En])
select  'ÞíÏ ÇáÊÙåíÑ','Endorsement entry'

insert into [StrSource] 
([Ar],[En])
select  'ÞíÏ ÇáæÑÞÉ','Note entry'

insert into [StrSource] 
([Ar],[En])
select  'ÞíÏ ÏÝÊÑ ÇáÇÓÊÇÐ','General ledger entry'

insert into [StrSource] 
([Ar],[En])
select  'ÞíÏ ÚßÓí','Inverse entry'

insert into [StrSource] 
([Ar],[En])
select  'ÞíÏ ÚßÓí Úä ÇáÞíÏ ÑÞã','Inversed entry from entry No'

insert into [StrSource] 
([Ar],[En])
select  'ÞíÏ ÝÑæÞÇÊ ÃÓÚÇÑ ÇáÕÑÝ','Exchange rate entry'

insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÂÎÑ ÏÝÚÉ ','Last payment value'

insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇÓÊåáÇß ÇáßåÑÈÇÁ','Electricity consumption value'

insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇÓÊåáÇß ÇáãÇÁ','Water consumption value'

insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÅÏÎÇá','Input value'

insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÃÑÖ','Land value'

insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÃÑÖ ÇáÍÇáíÉ','Land current value'

insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÅÓÊËãÇÑ','Investment value'

insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÅÓÊåáÇß','Consumption value'

insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÃÕá','Asset value'

insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÃÕá ßÎÑÏÉ','Asset value as scrap'

insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÅÖÇÝÉ','Extra value '

insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÅåÊáÇß','Depreciation value'

insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÃíÇã ÇáÝÇÑÛÉ','Empty days value'

insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÅíÌÇÑ','Rent value'

insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÅíÕÇá','Receipt value'

insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÈíÚ','Selling value'

insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÊÃãíä ÇáÍÇáí','Current deposit value'

insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÊÃãíä ÇáÓÇÈÞ','Previous deposit value'

insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÍÓã','Discount value'

insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÎÑÏÉ','Scrap value'

insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÏÝÚÇÊ ÇáãÊÃÎÑÉ','Late payments value'

insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÏÝÚÇÊ ÇáãÍÕáÉ','Collected payments value'

insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÏÝÚÇÊ ÇáãÍÕáÉ ÌÒÆíÇ','Partial collected payments value'

insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÏÝÚÇÊ ÇáãÓÊÍÞÉ','Due payments value'

insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÏÝÚÇÊ ÇáãÓÊÍÞÉ ÌÒÆíÇ','Partial due payments value'

insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÏÝÚÇÊ ÇáäÞÏíÉ','Cash payments value'

insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÏÝÚÉ','Payment value'

insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÑÓã','Fees amount'

insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÑÓæã','Fees value'

insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÒíÇÏÉ Úáì ÇáÚÞÏ ÇáÍÇáí','Increased value on current contract'

insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÔíß','Cheque value'

insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÕÑÝ ÇáÕÍí','Sewerage value'

insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÚÞÏ','Contract amount'

insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÚÞÏ ÈÚÏ ÇáÍÓã','Discounted contract amount '

insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÚÞÏ ÈÚÏ ÇáÒíÇÏÉ','Contract value after Increased'

insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÚãæáÉ ááÈÇÆÚ','Salesman commission value'

insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÚãæáÉ ãä ÇáÚãíá','Commission amount from customer'

insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÚãæáÉ ãä ÕÇÍÈ ÇáÚÞÇÑ','Commission amount from owner'

insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáÞÓØ','Installment value'

insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáãÇÁ','Water value'

insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáãÈÇáÛ ÇáãÓÊÍÞÉ ÌÒÆíÇ','Partial due amounts value'

insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÇáãÕÇÑíÝ','Expenses amount'

insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ÍÓÇÈ ÇáÇåÊáÇß','Depreciation account value'

insert into [StrSource] 
([Ar],[En])
select  'ÞíãÉ ãä ÇáÍÞá','Value from field'

insert into [StrSource] 
([Ar],[En])
select  'ßÇäæä ÇáËÇäí','January'

insert into [StrSource] 
([Ar],[En])
select  'ßÔÝ ÇáÃÑÇÖí','Land report'

insert into [StrSource] 
([Ar],[En])
select  'ßÔÝ ÇáÈäÇíÇÊ','Building report'

insert into [StrSource] 
([Ar],[En])
select  'ßÔÝ ÇáÔÞÞ','Flats report'

insert into [StrSource] 
([Ar],[En])
select  'ßÔÝ ÇáÚÑæÖ ÇáãÊäæÚÉ','Various offers report'

insert into [StrSource] 
([Ar],[En])
select  'ßÔÝ ÇáÚÞæÏ','Contract report'

insert into [StrSource] 
([Ar],[En])
select  'ßÔÝ ÍÓÇÈ ÒÈæä','Customer account statement'

insert into [StrSource] 
([Ar],[En])
select  'ßÔÝ ÚÞÇÑÇÊ Úãíá','Customer properties report'

insert into [StrSource] 
([Ar],[En])
select  'ßÔÝ ÚÞæÏ ÇáÎÏãÇÊ','Services contracts report'

insert into [StrSource] 
([Ar],[En])
select  'ßÔÝ ÚÞæÏ ÇáÕíÇäÉ','Maintenance contracts report'

insert into [StrSource] 
([Ar],[En])
select  'ßá','Every'

insert into [StrSource] 
([Ar],[En])
select  'ßá ÃÓÈæÚ','Every week'

insert into [StrSource] 
([Ar],[En])
select  'ßá ÇáÕáÇÍíÇÊ','Full authoritize'

insert into [StrSource] 
([Ar],[En])
select  'ßá ÍÓÇÈ Úáì æÑÞÉ','Each account on a separate sheet'

insert into [StrSource] 
([Ar],[En])
select  'ßá ÔåÑ','Every month'

insert into [StrSource] 
([Ar],[En])
select  'ßá íæã','Every day'

insert into [StrSource] 
([Ar],[En])
select  'ßáÇåãÇ','Both'

insert into [StrSource] 
([Ar],[En])
select  'ßáÝÉ ÇáÔÞÞ ÇáãÈÇÚÉ','Sold flat cost'

insert into [StrSource] 
([Ar],[En])
select  'ßáÝÉ ÇáÚÞÇÑ','Property cost'

insert into [StrSource] 
([Ar],[En])
select  'ßáÝÉ ÇáãÍá','Shop cost'

insert into [StrSource] 
([Ar],[En])
select  'ßáÝÉ ÇáãÔÑæÚ','Project cost'

insert into [StrSource] 
([Ar],[En])
select  'ßáÝÉ ÇáãæÞÝ','Parking cost'

insert into [StrSource] 
([Ar],[En])
select  'ßáÝÉ ÇáæÍÏÉ','Unit cost'

insert into [StrSource] 
([Ar],[En])
select  'ßáãÉ ÇáãÑæÑ','Password'

insert into [StrSource] 
([Ar],[En])
select  'ßáãÉ ÇáãÑæÑ ÇáÌÏíÏÉ','New Password'

insert into [StrSource] 
([Ar],[En])
select  'ßáãÉ ÇáãÑæÑ ÇáÞÏíãÉ ','Old Password'

insert into [StrSource] 
([Ar],[En])
select  'ßáãÉ ÇáãÑæÑ ÛíÑ ÕÍíÍÉ','Password is incorrect'

insert into [StrSource] 
([Ar],[En])
select  'ßãíÉ ÇÓÊåáÇß ÇáßåÑÈÇÁ','Electricity consumption amount'

insert into [StrSource] 
([Ar],[En])
select  'ßãíÉ ÇÓÊåáÇß ÇáãÇÁ','Water consumption amount'

insert into [StrSource] 
([Ar],[En])
select  'ßãíÉ ÇáÅÓÊåáÇß [X]','Consumption quantity [X]'

insert into [StrSource] 
([Ar],[En])
select  'ßíÝíÉ ÇáÊæÒíÚ','Distribution method'

insert into [StrSource] 
([Ar],[En])
select  'áÇ','No'

insert into [StrSource] 
([Ar],[En])
select  'áÇ Êãáß ÇáÕáÇÍíÇÊ ááÞíÇã ÈåÐå ÇáÚãáíÉ','You don''t have permission to do this operation'

insert into [StrSource] 
([Ar],[En])
select  'áÇ Êãáß ÇáÕáÇÍíÇÊ ááÞíÇã ÈåÐå ÇáÚãáíÉ
ÈÓÈÈ ãÓÊæì ÇáÓãÇÍíÉ

ÑÇÌÚ ãÏíÑ ÇáäÙÇã','You don''t have permission to do this operation because of security level
Contact your system administrator'

insert into [StrSource] 
([Ar],[En])
select  'áÇ Êãáß ÇáÕáÇÍíÇÊ ááÞíÇã ÈåÐå ÇáÚãáíÉÑÇÌÚ ãÏíÑ ÇáäÙÇã','You dont have permission for this operation Check with your System Administrator'

insert into [StrSource] 
([Ar],[En])
select  'áÇ Êãáß ÇáÕáÇÍíÇÊ áãÔÇåÏÉ ßÇãá ÇáÈíÇäÇÊ','You don''t have permission to see all information'

insert into [StrSource] 
([Ar],[En])
select  'áÇ Êãáß ÕáÇÍíÉ ÊÚÏíá ÚÞæÏ ÇáÛíÑ','You don''t have permission to modify contracts made by another user'

insert into [StrSource] 
([Ar],[En])
select  'áÇ ÊæÌÏ äÊÇÆÌ ááÚÑÖ','No result'

insert into [StrSource] 
([Ar],[En])
select  'áÇ íÌÈ ÊÛíÑ ÇáÊÚÇÏá ááÚãáÉ ÇáÃÓÇÓíÉ','You should not change the default currency rate'

insert into [StrSource] 
([Ar],[En])
select  'áÇ íÍæí','Not contain'

insert into [StrSource] 
([Ar],[En])
select  'áÇ íãßä ÅÊãÇã ÇáÍÌÒ , ÇáÚÞÇÑ ãÄÌÑ ÑÞã ÇáÚÞÏ : ','Reservations can not be completed, the property leased, Contract No:'

insert into [StrSource] 
([Ar],[En])
select  'áÇ íãßä ÅÊãÇã ÇáÍÌÒ , ÇáÚÞÇÑ ãÍÌæÒ ÑÞã ÇáÈØÇÞÉ : ','Reservations can not be completed, the property is reserved, card number:'

insert into [StrSource] 
([Ar],[En])
select  'áÇ íãßä ÅÊãÇã ÇáÚÞÏ , ÇáÚÞÇÑ ãÄÌÑ ÑÞã ÇáÚÞÏ : ','Can not complete the contract, the property leased, Contract No:'

insert into [StrSource] 
([Ar],[En])
select  'áÇ íãßä ÅÊãÇã ÇáÚÞÏ , ÇáÚÞÇÑ ãÈÇÚ  ÑÞã ÇáÚÞÏ : ','Can not complete the contract, the property sold Contract No:'

insert into [StrSource] 
([Ar],[En])
select  'áÇ íãßä ÅÊãÇã ÇáÚÞÏ , ÇáÚÞÇÑ ãÍÌæÒ ÑÞã ÇáÈØÇÞÉ : ','Can not complete the contract, the property is reserved, card number:'

insert into [StrSource] 
([Ar],[En])
select  'áÇ íãßä ÅÊãÇã ÇáÚÞÏ áÇä ÇáãæÞÝ ãÍÌæÒ','The contract can not be completed because the parking is reserved'

insert into [StrSource] 
([Ar],[En])
select  'áÇ íãßä ÅÊãÇã ÇáÚãáíÉ','Can not complete the process'

insert into [StrSource] 
([Ar],[En])
select  'áÇ íãßä ÅÏÑÇÌ ÇáÍÓÇÈ : ','Account can not be inserted:'

insert into [StrSource] 
([Ar],[En])
select  'áÇ íãßä ÅÖÇÝÉ ÅÈä  áãÑßÒ ßáÝÉ ãÓÊÎÏã Ýí ÈØÇÞÉ ÔÞÉ','Unable to add sub-cost center to cost center already used in flat card'

insert into [StrSource] 
([Ar],[En])
select  'áÇ íãßä ÅÖÇÝÉ ÅÈä  áãÑßÒ ßáÝÉ ãÓÊÎÏã Ýí ÓäÏÇÊ ÇáÞíÏ','Unable to add sub-cost center to cost center already used in journal entry'

insert into [StrSource] 
([Ar],[En])
select  'áÇ íãßä ÅÖÇÝÉ ÅÈä áÍÓÇÈ ãÓÊÎÏã Ýí ÓäÏÇÊ ÇáÞíÏ','You can not add sub-account to account used in entries'

insert into [StrSource] 
([Ar],[En])
select  'áÇ íãßä ÅÖÇÝÉ ÇáÔÞÉ áÇäåÇ æÇÑÏÉ Ýí ÚÞÏ : ','You can not add the flat because it is contained in the contract:'

insert into [StrSource] 
([Ar],[En])
select  'áÇ íãßä ÅÖÇÝÉ ÇáãÍá áÇäå æÇÑÏ Ýí ÚÞÏ : ','You can not add the shop because it is contained in the contract:'

insert into [StrSource] 
([Ar],[En])
select  'áÇ íãßä Ãä Êßæä ÇáãÌãæÚÉ ÇáÑÆíÓíÉ åí ÇáãÌæÚÉ äÝÓåÇ Ãæ ÃÍÏ ÇÈäÇÆåÇ','Main group can''t be the same group itself or its sons'

insert into [StrSource] 
([Ar],[En])
select  'áÇ íãßä Ãä íßæä  ÇáãÓÊæÏÚ ÇáÑÆíÓí åæ ÇáãÓÊæÏÚ  äÝÓå Ãæ ÃÍÏ ÇÈäÇÆå','Main store can''t be the same store itself or its sons'

insert into [StrSource] 
([Ar],[En])
select  'áÇ íãßä Ãä íßæä ÇáÍÓÇÈ ÇáÎÊÇãí åæ ÇáÍÓÇÈ äÝÓå Ãæ ÃÍÏ ÇÈäÇÆå','Closing account can''t be the same account itself or its sons'

insert into [StrSource] 
([Ar],[En])
select  'áÇ íãßä Ãä íßæä ÇáÍÓÇÈ ÇáÑÆíÓí åæ ÇáÍÓÇÈ äÝÓå Ãæ ÃÍÏ ÇÈäÇÆå','Main account can''t be the same account itself or its sons'

insert into [StrSource] 
([Ar],[En])
select  'áÇ íãßä Ãä íßæä ÇáãÑßÒ ÇáÑÆíÓí åæ ÇáãÑßÒ äÝÓå Ãæ ÃÍÏ ÇÈäÇÆå','Main cost center account can''t be the same account itself or its sons'

insert into [StrSource] 
([Ar],[En])
select  'áÇ íãßä ÇáÞíÇã ÈÇáÊÚÏíá Ýí ÇáæÞÊ ÇáÍÇáí ','Unable to modify now'

insert into [StrSource] 
([Ar],[En])
select  'áÇ íãßä ÇáÞíÇã ÈÇáÚãáíÉ Ýí ÇáæÞÊ ÇáÍÇáí ','Unable to do this operation now'

insert into [StrSource] 
([Ar],[En])
select  'áÇ íãßä ÇáÞíÇã ÈåÐå ÇáÚãáíÉ','Can not do this operation'

insert into [StrSource] 
([Ar],[En])
select  'áÇ íãßä ÊæáíÏ ãÑßÒ ÇáßáÝÉ','Unable to generate cost center'

insert into [StrSource] 
([Ar],[En])
select  'áÇ íãßä ÍÐÝ ÇáÞíÏ ÇáÍÇáí áÇä áå ÃÕá','Unable to delete current journal entry because it''s has origin'

insert into [StrSource] 
([Ar],[En])
select  'áÇ íãßä ÍÝÙ ÞíÏ ÝÇÑÛ','Can not save empty entry'

insert into [StrSource] 
([Ar],[En])
select  'áÇ íæÌÏ ÎÑíØÉ ááäãØ ÇáãÍÏÏ','No map for selected type'

insert into [StrSource] 
([Ar],[En])
select  'áÇ íæÌÏ ÏÚæì','No lawsuit'

insert into [StrSource] 
([Ar],[En])
select  'áÇÊíäí','Latin'

insert into [StrSource] 
([Ar],[En])
select  'áÇÔíÁ','Nothing'

insert into [StrSource] 
([Ar],[En])
select  'áÇä ÇáæÑÞÉ ÇáãÇáíÉ ãÍÕáÉ','because this check is collected'

insert into [StrSource] 
([Ar],[En])
select  'áÇä ÇáæÑÞÉ ÇáãÇáíÉ ãÍÕáÉ ãÓÈÞÇ','because this check is already collected'

insert into [StrSource] 
([Ar],[En])
select  'áÇä ÇáæÑÞÉ ÇáãÇáíÉ ãÑÊÌÚÉ','because this check is already returned'

insert into [StrSource] 
([Ar],[En])
select  'áÇä ÇáæÑÞÉ ÇáãÇáíÉ ãÑÍáÉ ãÓÈÞÇ','because this check is already deposited'

insert into [StrSource] 
([Ar],[En])
select  'áÇä ÇáæÑÞÉ ÇáãÇáíÉ ãÙåÑÉ','because this check is already endorsed'

insert into [StrSource] 
([Ar],[En])
select  'áÇíÌÏÏ ÊáÞÇÆíÇ','Do not automatically renewed'

insert into [StrSource] 
([Ar],[En])
select  'áÇíæÌÏ ÞíÏ','No journal entry'

insert into [StrSource] 
([Ar],[En])
select  'áÊØÈíÞ ÇáÊÛíÑÇÊ íÌÈ ÅÚÇÏÉ ÊÔÛíá ÇáÈÑäÇãÌ','To apply changes you must restart the program'

insert into [StrSource] 
([Ar],[En])
select  'áÊØÈíÞ ÇáÊÛíÑÇÊ íÌÈ ÅÚÇÏÉ ÊÔÛíá ÇáÈÑäÇãÌåá ÊÑíÏ ÅÚÇÏÉ ÇáÊÔÛíá ÇáÂä¿','To apply the changes you must restart the program
Do you want to restart now?'

insert into [StrSource] 
([Ar],[En])
select  'áÊØÈíÞ ÇáÊÛíÑÇÊ íÌÈ ÅÚÇÏÉ ÊÔÛíá ÇáÈÑäÇãÌåá ÊÑíÏ ÅÚÇÏÉ ÇáÊÔÛíá ÇáÂä¿','To apply changes you must restart the program
Do you want to restart programs now?'

insert into [StrSource] 
([Ar],[En])
select  'áÌáÈ ÂÎÑ ÓÚÑ ááÔÞÞ','To retrieve apartments latest price'

insert into [StrSource] 
([Ar],[En])
select  'áÏíß ÅÕÏÇÑ ÌÏíÏ ãä ÇáÈÑäÇãÌ ','You have a new version of the program'

insert into [StrSource] 
([Ar],[En])
select  'áÏíß ÅÕÏÇÑ ÌÏíÏ ãä ÇáÈÑäÇãÌ 
íÌÈ ÊÍÏíË ÇáãáÝÇÊ
åá ÊÑíÏ ÇáÞíÇã ÈÚãáíÉ ÇáÊÍÏíË ÇáÂä ¿','You have a new version of the program 
You must update the files 
Do you want to update now?'

insert into [StrSource] 
([Ar],[En])
select  'áÑÓÇÆá ÇááÛÉ ÇáÚÑÈíÉ','for arabic message'

insert into [StrSource] 
([Ar],[En])
select  'áÑÓÇÆá ÇááÛÉ ÇááÇÊíäíÉ','for english message'

insert into [StrSource] 
([Ar],[En])
select  'áÕÞ','Paste'

insert into [StrSource] 
([Ar],[En])
select  'áÕÞ ÇáÌÏæá','Paste table'

insert into [StrSource] 
([Ar],[En])
select  'áÕÞ Çáßá','Paste all'

insert into [StrSource] 
([Ar],[En])
select  'áÞÏ ÊÌÇæÒÊ äÓÈÉ ÇáÍÓã ÇáãÓãæÍ ÈåÇ','You have exceeded limit of discount rate'

insert into [StrSource] 
([Ar],[En])
select  'ááÊÝÞíØ ÚÑÈí','Arabic in words'

insert into [StrSource] 
([Ar],[En])
select  'ááÊÝÞíØ áÇÊíäí','Latin in words'

insert into [StrSource] 
([Ar],[En])
select  'ááØÈÇÚÉ','For Print'

insert into [StrSource] 
([Ar],[En])
select  'ááØÈÇÚÉ áÇÊíäí','Latin printing'

insert into [StrSource] 
([Ar],[En])
select  'ááãÊÇÈÚÉ ÅÖÛØ ÇáÊÇáí','Click Next to continue'

insert into [StrSource] 
([Ar],[En])
select  'áã ÈäÌÍ ÊæáíÏ ÇáÞíæÏ ÇáãÈáÛ ÇáäÞÏí ÇáãÓÊÍÞ','Failed to generate the entries of due cash amount'

insert into [StrSource] 
([Ar],[En])
select  'áã ÈäÌÍ ÊæáíÏ ÞíÏ ÇáÊÇãíäÇÊ','Failed to generate deposit entries'

insert into [StrSource] 
([Ar],[En])
select  'áã ÊÊã ÇáÕíÇäÉ','Maintenance not finish'

insert into [StrSource] 
([Ar],[En])
select  'áã ÊÊã ÇáãÚÇáÌÉ','Processing not complete'

insert into [StrSource] 
([Ar],[En])
select  'áã ÊäÌÍ ÚãáíÉ ÊæáíÏ ÞíæÏ ÇáãÈáÛ ÇáäÞÏí ÇáãÓÊÍÞ','Generating entries process for duo amount does not succeed'

insert into [StrSource] 
([Ar],[En])
select  'áã íÊã','Process not finish'

insert into [StrSource] 
([Ar],[En])
select  'áã íÊã ÃÎÐ Ãí äÓÎÉ ÅÍÊíÇØíÉ ÍÊì ÇáÂä','No backup copy has been taken yet'

insert into [StrSource] 
([Ar],[En])
select  'áã íÊã ÇáÅäåÇÁ','Contract not terminated'

insert into [StrSource] 
([Ar],[En])
select  'áã íÊã ÇáÇíÏÇÚ','Not deposit'

insert into [StrSource] 
([Ar],[En])
select  'áã íÊã ÇáÊäÝíÐ','Not Implemented'

insert into [StrSource] 
([Ar],[En])
select  'áã íÊã ÇäÔÇÁ ãÑßÒ ÇáßáÝÉ','Jobcost not created'

insert into [StrSource] 
([Ar],[En])
select  'áã íÊã ÊÍÏíÏ ÑÞã ÇáÞíÏ ÇáÇÝÊÊÇÍí ÇáÐí ÓíÊã ÇÓÊËäÇÄå ááãáÝ ÇáÍÇáí ÞÏ íÍÊæí ÇáÊÞÑíÑ Úáì ãÚáæãÇÊ ÎÇØÆÉ','Opening entry number which will be excluded does not specified ,the report may contain wrong information'

insert into [StrSource] 
([Ar],[En])
select  'áã íÊã ÚÑÖ ßÇÝÉ ÇáÊäÈíåÇÊ ','All alerts doesn’t show'

insert into [StrSource] 
([Ar],[En])
select  'áã íÍä æÞÊåÇ','Time not ripe'

insert into [StrSource] 
([Ar],[En])
select  'áã íäÌÍ ÊæáíÏ ÇáÞíÏ','Failed to generate journal entry'

insert into [StrSource] 
([Ar],[En])
select  'áã íäÌÍ ÊæáíÏ ÞíÏ ÇáÊÃãíäÇÊ','Generating deposit entries process does not succeed'

insert into [StrSource] 
([Ar],[En])
select  'áä ÊÓÊØíÚ ÇáÊÑÇÌÚ Úä åÐå ÇáÚãáíÉ','You can not undo this operation'

insert into [StrSource] 
([Ar],[En])
select  'áä ÊÓÊØíÚ ÇáÊÑÇÌÚ Úä åÐå ÇáÚãáíÉ¡ åá ÃäÊ ãÊÃßÏ¿','You can not undo this operation
Are you sure?'

insert into [StrSource] 
([Ar],[En])
select  'áä íÊã ÅäÔÇÁ ÞíÏ ááæÍÏÇÊ ÇáÊí áíÓ áåÇ ÍÓÇÈ ãÇáß Çæ áíÓ áåÇ ãÓÇÍÉ','Journal entry will not be created for units without owner or area'

insert into [StrSource] 
([Ar],[En])
select  'áä íÊã ÇäÔÇÁ ÍÓÇÈ ááÈØÇÞÉ','Card account will not be created'

insert into [StrSource] 
([Ar],[En])
select  'áä íÊã ÇäÔÇÁ ÍÓÇÈ ááÈØÇÞÉåá ÊÑíÏ ÇáãÊÇÈÚÉ¿','Card account will not be created
do you want to continue?'

insert into [StrSource] 
([Ar],[En])
select  'áäÝÓ ÇáÚãíá','Same customer'

insert into [StrSource] 
([Ar],[En])
select  'áå ÞíãÉ','With amount'

insert into [StrSource] 
([Ar],[En])
select  'áåÇ ÇÞÓÇØ','with installments'

insert into [StrSource] 
([Ar],[En])
select  'áæä ÇÓØÑ ÇáÌÏæá','Table line color'

insert into [StrSource] 
([Ar],[En])
select  'áæä ÇáÎØ','Font color'

insert into [StrSource] 
([Ar],[En])
select  'áæä ÇáÓíÇÑÉ','Car color'

insert into [StrSource] 
([Ar],[En])
select  'áíÓ Úáíå','Not on him'

insert into [StrSource] 
([Ar],[En])
select  'áíÓ áåÇ ÍÓÇÈ ãÇáß','does not has owner account'

insert into [StrSource] 
([Ar],[En])
select  'ã2','Square meter'

insert into [StrSource] 
([Ar],[En])
select  'ãÇÁ','Water'

insert into [StrSource] 
([Ar],[En])
select  'ãÇÆá','Italic'

insert into [StrSource] 
([Ar],[En])
select  'ãÇÏÉ ÌÏíÏÉ','New material'

insert into [StrSource] 
([Ar],[En])
select  'ãÇáß','Owner'

insert into [StrSource] 
([Ar],[En])
select  'ãÈÇÚ','Sold'

insert into [StrSource] 
([Ar],[En])
select  'ãÈÇáÛ ÇáÔíßÇÊ','Cheque Amount'

insert into [StrSource] 
([Ar],[En])
select  'ãÈáÛ','Ammount'

insert into [StrSource] 
([Ar],[En])
select  'ãÈáÛ ÇáÅíÌÇÑ ÇáãÓÊÍÞ','Rent amount due'

insert into [StrSource] 
([Ar],[En])
select  'ãÈáÛ ÇáÚÞÏ ãÍÕá ÈÇáßÇãá','Contract amount was collected'

insert into [StrSource] 
([Ar],[En])
select  'ãÈíÚ','Sales'

insert into [StrSource] 
([Ar],[En])
select  'ãÈíÚ ÇáÃÕá','Asset sale'

insert into [StrSource] 
([Ar],[En])
select  'ãÈíÚ2','Sales2'

insert into [StrSource] 
([Ar],[En])
select  'ãÈíÚ3','Sales3'

insert into [StrSource] 
([Ar],[En])
select  'ãÊÃÎÑÉ','Delayed'

insert into [StrSource] 
([Ar],[En])
select  'ãÊÇÈÚÉ','Continue'

insert into [StrSource] 
([Ar],[En])
select  'ãÊÍæá','Variable'

insert into [StrSource] 
([Ar],[En])
select  'ãÊÚÏÏ','Multi'

insert into [StrSource] 
([Ar],[En])
select  'ãÊÝÑÞÇÊ','Various'

insert into [StrSource] 
([Ar],[En])
select  'ãÊæÓØ','Medium'

insert into [StrSource] 
([Ar],[En])
select  'ãÌáÏ ÇáØÈÇÚÉ ÇáÅÝÊÑÇÖí','Default printing folder'

insert into [StrSource] 
([Ar],[En])
select  'ãÌáÏ ÌÏíÏ','New Folder'

insert into [StrSource] 
([Ar],[En])
select  'ãÌáÏ ØÈÇÚÉ ÇáÅíÕÇáÇÊ','Receipt print folder'

insert into [StrSource] 
([Ar],[En])
select  'ãÌáÏ ØÈÇÚÉ ÇáÓÌá','Log print folder'

insert into [StrSource] 
([Ar],[En])
select  'ãÌáÏ ØÈÇÚÉ ÈÑÇÁÉ ÇáÐãÉ','Clearance print folder'

insert into [StrSource] 
([Ar],[En])
select  'ãÌãÚ ÇáÅåÊáÇß ÇáÓÇÈÞ','Previous depreciation accumulated'

insert into [StrSource] 
([Ar],[En])
select  'ãÌãÚ ÇáÇåÊáÇß','Depreciation accumulated'

insert into [StrSource] 
([Ar],[En])
select  'ãÌãÚ ÇáÇåÊáÇß ÇáÌÏíÏ ','New depreciation accumulated'

insert into [StrSource] 
([Ar],[En])
select  'ãÌãá ÇáÑÈÍ','Gross profit'

insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ','Total'

insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ  ÇáÝÊÑÉ ãÏíä','Total debit period'

insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÇáÅÖÇÝÇÊ','Total additions'

insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÇáÅíÑÇÏÇÊ ','Total revenue'

insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÇáÊÃãíäÇÊ','Deposit total'

insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÇáÊÃãíäÇÊ ÇáÍÇáíÉ ááÚÞæÏ','Total current deposit of contracts'

insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÇáÊÃãíäÇÊ ÇáÓÇÈÞÉ ááÚÞæÏ','Total previous deposit of contracts'

insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÇáÊÃãíäÇÊ ÇáÚÇã','Total general deposit'

insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÇáÍÓãíÇÊ','Total discount'

insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÇáÏÝÚÇÊ ÇáãÍÕáÉ','Collected payments total'

insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÇáÏÝÚÇÊ ÇáãÓÊÍÞÉ ááÏÝÚ','Due paymants total'

insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÇáÏÝÚÇÊ ãÓÊÍÞÉ ÇáÏÝÚ','Total due payments'

insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÇáÓäÏ ÇáÍÇáí','Current entry total'

insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÇáÔíßÇÊ ÇáãÍÕáÉ','Collected cheque total'

insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÇáÔíßÇÊ ÇáãÏÝæÚÉ','Total paid cheques'

insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÇáÔíßÇÊ ÇáãÓÊÍÞÉ','Due cheque total'

insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÇáÛÑÇãÇÊ','Total fines'

insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÇáÝÊÑÉ ÏÇÆä','Total credit period'

insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÇáÞíã ÇáãÓÊÍÞÉ ááãÇáß','Sum of values ??due to owner'

insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÇáÞíã ÇáãÓÊÍÞÉ ááãÓÊÃÌÑ ','Sum of values ??due to tenant'

insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÇáÞíã ÛíÑ ãØÇÈÞ áÞíãÉ ÇáÚÞÏ','Total value is not match with contract value'

insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÇáÞíã Ýí ÇáÍÓÇÈÇÊ ÇáãÊÚÏÏÉ ÛíÑ ãØÇÈÞ áÞíãÉ ÇáÚÞÏ','Total value in multiple accounts is not match with contract value'

insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÇáÞíã Ýí ãÑÇßÒ ÇáßáÝÉ ÇáãÊÚÏÏÉ ÛíÑ ãØÇÈÞ áÞíãÉ ÇáæÑÞÉ ÇáãÇáíÉ','Total value in multiple jobcost is not match with cheque value'

insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÇáÞíãÉ','Sum of value'

insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÇáßáÝÉ','Sum of Cost'

insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÇáãÈÇáÛ','Sum of Amount'

insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÇáãÕÇÑíÝ','Total expenses'

insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÇáäÓÈ','Total percentages'

insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÇáäÓÈ ÇáÍÇáíÉ   ','Total current percentage  '

insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÑÃÓ ÇáãÇá','Total capital'

insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÓÇÈÞ ÏÇÆä','Previous total credit'

insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÓÇÈÞ ãÏíä','Previous total debit'

insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÕÇÝí ÇáãÓÊÍÞ ááãÓÊÃÌÑíä','Total net due for tenants'

insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ Þíã ÇáÔíßÇÊ ÃÕÛÑ ãä ÇáãÈáÛ ÇáãÊÈÞí','The sum of cheque values smaller then remaining amount'

insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ Þíã ÇáÔíßÇÊ ÃßÈÑ ãä ÇáãÈáÛ ÇáãÊÈÞí','The sum of cheque values larger then remaining amount'

insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÞíãÉ ÇáÚÞæÏ','Total value of contracts'

insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÞíãÉ ÇáÚÞæÏ ÈÚÏ ÇáÍÓã ','Total value of contracts after discount'

insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ ÞíãÉ ÇáÚÞæÏ ÞÈá ÇáÍÓã ','Total value of contracts before discount'

insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ äåÇÆí ÏÇÆä','Total credit'

insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚ äåÇÆí ãÏíä','Total debit'

insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚÇÊ ÇÍÊÓÇÈ ÇáßãíÇÊ','Calculate quantities Group'

insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚÇÊ ÇáãæÇÏ','Materials group'

insert into [StrSource] 
([Ar],[En])
select  'ãÌãæÚÉ ÇáãÇÏÉ','Material group'

insert into [StrSource] 
([Ar],[En])
select  'ãÍÌæÒ','Reserved'

insert into [StrSource] 
([Ar],[En])
select  'ãÍÏÏ','Specified'

insert into [StrSource] 
([Ar],[En])
select  'ãÍÑÝ','character'

insert into [StrSource] 
([Ar],[En])
select  'ãÍÑã','Muharram'

insert into [StrSource] 
([Ar],[En])
select  'ãÍÕá','Collected '

insert into [StrSource] 
([Ar],[En])
select  'ãÍÕá ÌÒÆíÇ','Partly collected'

insert into [StrSource] 
([Ar],[En])
select  'ãÍÕá ÌÒÆíÇð','Partly collected'

insert into [StrSource] 
([Ar],[En])
select  'ãÍÕá ÌÒÆíÇ / ÞíãÉ','Partial collected / Value'

insert into [StrSource] 
([Ar],[En])
select  'ãÍÕá ãä /íæã','Collected drom / Day'

insert into [StrSource] 
([Ar],[En])
select  'ãÍá','Showroom'

insert into [StrSource] 
([Ar],[En])
select  'ãÍá ÊÌãíÚí','Compilation shop'

insert into [StrSource] 
([Ar],[En])
select  'ãÍáÇÊ','Showrooms'

insert into [StrSource] 
([Ar],[En])
select  'ãÎÕÕ','Customized'

insert into [StrSource] 
([Ar],[En])
select  'ãÎØØ ÇáÈäÇÁ','Building chart'

insert into [StrSource] 
([Ar],[En])
select  'ãÏÉ ÇáÅíÌÇÑ äÕÇð','Rent duration in word'

insert into [StrSource] 
([Ar],[En])
select  'ãÏÉ ÇáÔíß','Cheque period'

insert into [StrSource] 
([Ar],[En])
select  'ãÏÉ ÇáÚÞÏ','Contract duration'

insert into [StrSource] 
([Ar],[En])
select  'ãÏÉ ÇáÚÞÏ äÕÇð','Contract duration in text'

insert into [StrSource] 
([Ar],[En])
select  'ãÏÝæÚÉ','Paid'

insert into [StrSource] 
([Ar],[En])
select  'ãÏæÑ','Books closed'

insert into [StrSource] 
([Ar],[En])
select  'ãÏæÑÉ','Rounded'

insert into [StrSource] 
([Ar],[En])
select  'ãÏíÑ','Admin'

insert into [StrSource] 
([Ar],[En])
select  'ãÏíä','Debit.'

insert into [StrSource] 
([Ar],[En])
select  'ãÏíäÉ','Debited'

insert into [StrSource] 
([Ar],[En])
select  'ãÐßÑÉ ÅåÊáÇß ÇáÃÕæá','Depreciation asset card'

insert into [StrSource] 
([Ar],[En])
select  'ãÑÇÌÚ','Checked'

insert into [StrSource] 
([Ar],[En])
select  'ãÑÇÌÚÉ ÚãáíÇÊ ÇáÇæÑÇÞ ÇáãÇáíÉ','Checked for notes operations'

insert into [StrSource] 
([Ar],[En])
select  'ãÑÇßÒ ÇáßáÝÉ   ','Cost centers'

insert into [StrSource] 
([Ar],[En])
select  'ãÑÇßÒ ÇáßáÝÉ ááæÑÞÉ ÇáãÇáíÉ','Cost center for cheque'

insert into [StrSource] 
([Ar],[En])
select  'ãÑÇßÒ ÊÓæÞ','Shopping malls'

insert into [StrSource] 
([Ar],[En])
select  'ãÑÇßÒ ßáÝÉ ãÊÚÏÏÉ','Multiple cost center'

insert into [StrSource] 
([Ar],[En])
select  'ãÑÊÈØÉ ÈÈäÇÁ','Linked to building'

insert into [StrSource] 
([Ar],[En])
select  'ãÑÊÌÚ','Refund'

insert into [StrSource] 
([Ar],[En])
select  'ãÑÊÌÚ ÔÑÇÁ','Purchase return'

insert into [StrSource] 
([Ar],[En])
select  'ãÑÊÌÚ ãÈíÚ','Sales return'

insert into [StrSource] 
([Ar],[En])
select  'ãÑÊÌÚ ãÓÈÞÇð','Already returned'

insert into [StrSource] 
([Ar],[En])
select  'ãÑÊÌÚ ãäÐ /íæã','Returned since/day'

insert into [StrSource] 
([Ar],[En])
select  'ãÑÊÌÚÉ','Returned'

insert into [StrSource] 
([Ar],[En])
select  'ãÑÊÍÚ ãä /íæã','Returned from / day'

insert into [StrSource] 
([Ar],[En])
select  'ãÑÍá','Posted'

insert into [StrSource] 
([Ar],[En])
select  'ãÑÍá ááÈäß','Posted to bank'

insert into [StrSource] 
([Ar],[En])
select  'ãÑßÒ ÇáßáÝÉ','Cost center'

insert into [StrSource] 
([Ar],[En])
select  'ãÑßÒ ÇáßáÝÉ : ','Cost Center :'

insert into [StrSource] 
([Ar],[En])
select  'ãÑßÒ ÇáßáÝÉ ÇáÃÈ ááÃÈäíÉ','Main building cost center'

insert into [StrSource] 
([Ar],[En])
select  'ãÑßÒ ÇáßáÝÉ ÇáÑÆíÓí','Main cost center'

insert into [StrSource] 
([Ar],[En])
select  'ãÑßÒ ÇáßáÝÉ ÏÇÆä','Credit cost center'

insert into [StrSource] 
([Ar],[En])
select  'ãÑßÒ ÇáßáÝÉ ãÏíä','Debit cost center'

insert into [StrSource] 
([Ar],[En])
select  'ãÑßÒ ÇáßáÝÉ ãÓÊÎÏã Ýí ÓäÏÇÊ ÇáÞíÏ','Cost center is used in entries'

insert into [StrSource] 
([Ar],[En])
select  'ãÑßÒ ÇáßáÝÉ ãßÑÑ','Duplicate cost center'

insert into [StrSource] 
([Ar],[En])
select  'ãÑßÒ ÇáßáÝÉÇáÅÝÊÑÇÖí','Defult cost center'

insert into [StrSource] 
([Ar],[En])
select  'ãÑßÒ ßáÝÉ','Cost center'

insert into [StrSource] 
([Ar],[En])
select  'ãÑßÒ ßáÝÉ ÇáÑÆíÓí áÔÞÞ ÇáÈäÇÁ','Main cost center for flats'

insert into [StrSource] 
([Ar],[En])
select  'ãÒÇãäÉ ÇáãáÝÇÊ','Synchronize files '

insert into [StrSource] 
([Ar],[En])
select  'ãÒÇãäÉ ÇáãáÝÇÊ ...','Sync Files ...'

insert into [StrSource] 
([Ar],[En])
select  'ãÓÇÍÉ ÇáÃÑÖ','Land area'

insert into [StrSource] 
([Ar],[En])
select  'ãÓÇÍÉ ÇáÃÑÖ ÇáãÚãÑÉ','Built land area'

insert into [StrSource] 
([Ar],[En])
select  'ãÓÇÍÉ ÇáÈäÇÁ ','Building area'

insert into [StrSource] 
([Ar],[En])
select  'ãÓÇÍÉ ÇáÍÏÇÆÞ','Gardens area'

insert into [StrSource] 
([Ar],[En])
select  'ãÓÇÍÉ ÇáÚÞÇÑ','Property area'

insert into [StrSource] 
([Ar],[En])
select  'ãÓÇÍÉ ÇáÞÓíãÉ','Plot area'

insert into [StrSource] 
([Ar],[En])
select  'ãÓÇÍÉ ÇáãáÇÚÈ','Play yard area'

insert into [StrSource] 
([Ar],[En])
select  'ãÓÇÍÉ ãæÇÞÝ ÇáÓíÇÑÇÊ','Car parking area'

insert into [StrSource] 
([Ar],[En])
select  'ãÓÇÑ 1','Path 1'

insert into [StrSource] 
([Ar],[En])
select  'ãÓÇÑ 2','Path 2'

insert into [StrSource] 
([Ar],[En])
select  'ãÓÇÑ ÇáäÓÎ ÇáÅÍÊíÇØí','Backup location path'

insert into [StrSource] 
([Ar],[En])
select  'ãÓÇÚÏÉ','Help'

insert into [StrSource] 
([Ar],[En])
select  'ãÓÊÃÌÑ','Tenant'

insert into [StrSource] 
([Ar],[En])
select  'ãÓÊÍÞÉ','Accrued'

insert into [StrSource] 
([Ar],[En])
select  'ãÓÊÑÏÉ','Refund'

insert into [StrSource] 
([Ar],[En])
select  'ãÓÊæÏÚíÉ','Stored'

insert into [StrSource] 
([Ar],[En])
select  'ãÓÊæì ÇáÊÔØíÈ','Finishing quality'

insert into [StrSource] 
([Ar],[En])
select  'ãÓÊæì ÇáÓÑíÉ','Security level'

insert into [StrSource] 
([Ar],[En])
select  'ãÓÊæì ÇáÓãÇÍíÉ','permittivity level'

insert into [StrSource] 
([Ar],[En])
select  'ãÓÌÏ','Mosque'

insert into [StrSource] 
([Ar],[En])
select  'ãÓÍæÈ Úáì Èäß','Drawn on Bank'

insert into [StrSource] 
([Ar],[En])
select  'ãÔÊÑí','Buyer'

insert into [StrSource] 
([Ar],[En])
select  'ãÔÛæáÉ','Busy'

insert into [StrSource] 
([Ar],[En])
select  'ãÕÇÏÑ ÇáÊÞÑíÑ','Report sources'

insert into [StrSource] 
([Ar],[En])
select  'ãÕÇÑíÝ ÇáÏÚæì','Lawsuit expenses'

insert into [StrSource] 
([Ar],[En])
select  'ãÕÇÑíÝ ÇáÕíÇäÉ','Maintenance expenses'

insert into [StrSource] 
([Ar],[En])
select  'ãÕÑæÝ ÇáÚãæáÇÊ','Commission expense'

insert into [StrSource] 
([Ar],[En])
select  'ãÖÇÝ ÓÇÈÞÇ','Already added'

insert into [StrSource] 
([Ar],[En])
select  'ãÖÛæØ','Compressed'

insert into [StrSource] 
([Ar],[En])
select  'ãÖì Úáì ÇÑÌÇÚåÇ','It went on Return'

insert into [StrSource] 
([Ar],[En])
select  'ãØÇÈÞÉ ÈäÇÁ','Building Combarision'

insert into [StrSource] 
([Ar],[En])
select  'ãØÇÈÞÉ ÌÏíÏÉ','New reconciliation'

insert into [StrSource] 
([Ar],[En])
select  'ãØÇÈÞÉ ÍÓÇÈ','Account reconciliation'

insert into [StrSource] 
([Ar],[En])
select  'ãØÇÚã','Restaurants'

insert into [StrSource] 
([Ar],[En])
select  'ãõÙåÑ','Endorsed'

insert into [StrSource] 
([Ar],[En])
select  'ãÚ ÇáÚáã ÇäåÇ ÓÊÈÞì ãÍÝæÙÉ Úáì ÇáÞÑÕ ÇáÕáÈ','and be noted that it will still be saved on the hard drive'

insert into [StrSource] 
([Ar],[En])
select  'ãÚ ÞØÚ ÇáÛíÇÑ','With spare parts'

insert into [StrSource] 
([Ar],[En])
select  'ãÚÇáÌ ÇáÊÏæíÑ','Closing file wizard'

insert into [StrSource] 
([Ar],[En])
select  'ãÚÇáÌÉ ÇáÅÑÌÇÚ','Return processing'

insert into [StrSource] 
([Ar],[En])
select  'ãÚÇãá ÇáÈäÇÁ','Building factors'

insert into [StrSource] 
([Ar],[En])
select  'ãÚÇíäÉ ÞÈá ØÈÇÚÉ','Print preview'

insert into [StrSource] 
([Ar],[En])
select  'ãÚÏá','Modified'

insert into [StrSource] 
([Ar],[En])
select  'ãÚÏá ÇáÅåÊáÇß','Depreciation average'

insert into [StrSource] 
([Ar],[En])
select  'ãÚáÞÉ','Suspend'

insert into [StrSource] 
([Ar],[En])
select  'ãÚáæãÇÊ','Information'

insert into [StrSource] 
([Ar],[En])
select  'ãÚáæãÇÊ ÇáÊæÒíÚ','Distribution information'

insert into [StrSource] 
([Ar],[En])
select  'ãÚáæãÇÊ ÇáÚÞÏ','Contract information'

insert into [StrSource] 
([Ar],[En])
select  'ãÚáæãÇÊ ÇáãÓÊÎÏã','User information'

insert into [StrSource] 
([Ar],[En])
select  'ãÚáæãÇÊ ÇáãäØÞÉ','Area information'

insert into [StrSource] 
([Ar],[En])
select  'ãÚáæãÇÊ ÍÓÇÈ','Account information'

insert into [StrSource] 
([Ar],[En])
select  'ãÚáæãÇÊ ÚÇãÉ','General information'

insert into [StrSource] 
([Ar],[En])
select  'ãÚáæãÇÊ ãÇÏÉ','Material information'

insert into [StrSource] 
([Ar],[En])
select  'ãÛáÞÉ','Closed'

insert into [StrSource] 
([Ar],[En])
select  'ãÝÊÇÍ ÇáÅÎÊÕÇÑ','Shortcut key'

insert into [StrSource] 
([Ar],[En])
select  'ãÝÊæÍÉ','Opened'

insert into [StrSource] 
([Ar],[En])
select  'ãÞÈæÖÉ','Receivable'

insert into [StrSource] 
([Ar],[En])
select  'ãßÇä ÇáÚÞÏ','Contract location'

insert into [StrSource] 
([Ar],[En])
select  'ãßÇä ÇáÚÞÏ áÇÊíäí','Contract location latin'

insert into [StrSource] 
([Ar],[En])
select  'ãßÇä ÇáæÕæá','Destination'

insert into [StrSource] 
([Ar],[En])
select  'ãßÑÑ','Duplicate'

insert into [StrSource] 
([Ar],[En])
select  'ãáÇÍÙÇÊ','Notes'

insert into [StrSource] 
([Ar],[En])
select  'ãáÇÍÙÇÊ ÇáÚÞÏ','Contract note'

insert into [StrSource] 
([Ar],[En])
select  'ãáÇÍÙÉ','Notes..'

insert into [StrSource] 
([Ar],[En])
select  'ãáÎÕ ÇáÅåÊáÇß','Depreciation summary'

insert into [StrSource] 
([Ar],[En])
select  'ãáÝ','File'

insert into [StrSource] 
([Ar],[En])
select  'ãáÝ ÇáÈíÇäÇÊ','Data file'

insert into [StrSource] 
([Ar],[En])
select  'ãáÝ ÇáÊÓÌíá','Log file'

insert into [StrSource] 
([Ar],[En])
select  'ãáÝ ÇáØÈÇÚÉ ÛíÑ ãæÌæÏ','Print file does not exist'

insert into [StrSource] 
([Ar],[En])
select  'ãáÝ ÌÏíÏ','New File'

insert into [StrSource] 
([Ar],[En])
select  'ãáß','Owned'

insert into [StrSource] 
([Ar],[En])
select  'ãáßíÉ ÇáÔÞÉ','Flat ownership'

insert into [StrSource] 
([Ar],[En])
select  'ãä','From'

insert into [StrSource] 
([Ar],[En])
select  'ãä ÂÎÑ ãØÇÈÞÉ','From last reconciliation'

insert into [StrSource] 
([Ar],[En])
select  'ãä ÇáÂä ÓíÊã ÍÝÙ ÇáãáÝÇÊ æÇáæËÇÆÞ æÇáÕæÑ  ÇáãÑÝÞÉ Ýí ÞÇÚÏÉ ÇáÈíÇäÇÊ','From now on, all files and attached documents will be saved on the database'

insert into [StrSource] 
([Ar],[En])
select  'ãä ÇáÂä áä íÊã ÍÝÙ ÇáãáÝÇÊ æÇáæËÇÆÞ ÇáãÑÝÞÉ Ýí ÞÇÚÏÉ ÇáÈíÇäÇÊ','From now on, all files and attached documents will not be saved on the database'

insert into [StrSource] 
([Ar],[En])
select  'ãä ÇáÍÇÓÈ','From computer'

insert into [StrSource] 
([Ar],[En])
select  'ãä ÇáãÓÊæÏÚ','From store'

insert into [StrSource] 
([Ar],[En])
select  'ãä ÇáãæÞÚ','From location'

insert into [StrSource] 
([Ar],[En])
select  'ãä ÇáäãØ','From pattern'

insert into [StrSource] 
([Ar],[En])
select  'ãä ÊÇÑíÎ','From Date'

insert into [StrSource] 
([Ar],[En])
select  'ãä ÊÇÑíÎ : ','From Date:'

insert into [StrSource] 
([Ar],[En])
select  'ãä ÑÞã','From No'

insert into [StrSource] 
([Ar],[En])
select  'ãä ãÑßÒ ÇáßáÝÉ','From cost center'

insert into [StrSource] 
([Ar],[En])
select  'ãäÇÞáÉ','Stock transfer'

insert into [StrSource] 
([Ar],[En])
select  'ãäÊåí','Terminated.'

insert into [StrSource] 
([Ar],[En])
select  'ãäÊåí ÇáãÏÉ','Expired'

insert into [StrSource] 
([Ar],[En])
select  'ãäÊåí ÇáãÏÉ æÊã ÅäåÇÁ ÇáÚÞÏ','Expired contract and terminated'

insert into [StrSource] 
([Ar],[En])
select  'ãäÊåí ÇáãÏÉ æáã íÊã ÅäåÇÁ ÇáÚÞÏ','Expired contract and didn''t terminated'

insert into [StrSource] 
([Ar],[En])
select  'ãäÎÝÖ','Low'

insert into [StrSource] 
([Ar],[En])
select  'ãäÏæÈ ÇáãÈíÚÇÊ','Sales agent'

insert into [StrSource] 
([Ar],[En])
select  'ãäÐ/ íæã','Since / Day'

insert into [StrSource] 
([Ar],[En])
select  'ãåÊáß Úáì íæã / ÔåÑ','Mahtlk the day / month'

insert into [StrSource] 
([Ar],[En])
select  'ãæÇÏ','Items'

insert into [StrSource] 
([Ar],[En])
select  'ãæÇÕÝÇÊ','Specifications'

insert into [StrSource] 
([Ar],[En])
select  'ãæÇÕÝÇÊ ÇáãæÇÏ','Materials specification'

insert into [StrSource] 
([Ar],[En])
select  'ãæÇÝÞ','OK'

insert into [StrSource] 
([Ar],[En])
select  'ãæÇÞÚ ÇáÃÕæá','Asset locations'

insert into [StrSource] 
([Ar],[En])
select  'ãæÇÞÝ ÇáÓíÇÑÇÊ','Car parking'

insert into [StrSource] 
([Ar],[En])
select  'ãæÇÞÝ ÇáÓíÇÑÇÊ ÊÍÊ ÇáÃÑÖ','Underground car parking'

insert into [StrSource] 
([Ar],[En])
select  'ãæÑÏ','Vendor'

insert into [StrSource] 
([Ar],[En])
select  'ãæÞÚ ÂÎÑ','Other location'

insert into [StrSource] 
([Ar],[En])
select  'ãæÞÝ','Park'

insert into [StrSource] 
([Ar],[En])
select  'ãæÞÝ ÊÌãíÚí','Assemblage parking'

insert into [StrSource] 
([Ar],[En])
select  'ãæÞÝ ÓíÇÑÇÊ','Car Parking'

insert into [StrSource] 
([Ar],[En])
select  'ãíÒÇÊ ÇáÚÞÇÑ','Property Features'

insert into [StrSource] 
([Ar],[En])
select  'ãíÒÇÊ æÓáÈíÇÊ ÇáÚÞÇÑ','Property positives & negatives features'

insert into [StrSource] 
([Ar],[En])
select  'ãíÒÇä ÇáãÑÇÌÚÉ','Trial Balance'

insert into [StrSource] 
([Ar],[En])
select  'ãíÒÇä ÇáãÑÇÌÚÉ ÇáÓäæí','Annual Trail Balance'

insert into [StrSource] 
([Ar],[En])
select  'ãíÒÇä ÇáãÑÇÌÚÉ ãÑßÒ ßáÝÉ','Cost center trail balance'

insert into [StrSource] 
([Ar],[En])
select  'ãíÒÇä ãÑÇÌÚÉ ãÑßÒ ßáÝÉ','Cost Center Trail Balance'

insert into [StrSource] 
([Ar],[En])
select  'ãíáÇÏí','Grerian'

insert into [StrSource] 
([Ar],[En])
select  'äÇÝÐÉ ÃÑÕÏÉ ÇáÍÓÇÈÇÊ','Accounts balance window'

insert into [StrSource] 
([Ar],[En])
select  'äÇÝÐÉ ÇáÊÓÌíá','Log file window'

insert into [StrSource] 
([Ar],[En])
select  'äÇÝÐÉ ÇáÊÓÌíá - ','Log File - '

insert into [StrSource] 
([Ar],[En])
select  'äÇÝÐÉ ÇáÊÓÌíá ãÚ ÇáÊÚÏíáÇÊ','Log file with editing'

insert into [StrSource] 
([Ar],[En])
select  'äÇÝÐÉ ÇáÊäÈíåÇÊ','Alerts window'

insert into [StrSource] 
([Ar],[En])
select  'äÇÝÐÉ ÇáÕæÑ','Pictures window'

insert into [StrSource] 
([Ar],[En])
select  'äÇÝÐÉ ÇáãÚáæãÇÊ','Information Window'

insert into [StrSource] 
([Ar],[En])
select  'äÈÐÉ Úä ÇáÚÞÇÑ','About Property'

insert into [StrSource] 
([Ar],[En])
select  'äÊÇÆÌ ÇáÊËãíä','Evaluation Results'

insert into [StrSource] 
([Ar],[En])
select  'äÊíÌÉ ÅÑÓÇá ÇáÜ SMS','SMS sent result'

insert into [StrSource] 
([Ar],[En])
select  'äÊíÌÉ ÇáÇÑÓÇá','Send result'

insert into [StrSource] 
([Ar],[En])
select  'äÊíÌÉ ÛíÑ ãÚÑæÝÉ','Result unknown'

insert into [StrSource] 
([Ar],[En])
select  'äÌÍ','Succeed'

insert into [StrSource] 
([Ar],[En])
select  'äÓÈÉ ÇáÅÖÇÝÉ','Extra rate'

insert into [StrSource] 
([Ar],[En])
select  'äÓÈÉ ÇáÇåÊáÇß ÇáÓäæíÉ ','Depreciation annual percentage'

insert into [StrSource] 
([Ar],[En])
select  'äÓÈÉ ÇáÍÓã','Discount rate'

insert into [StrSource] 
([Ar],[En])
select  'äÓÈÉ ÇáÍÓã ÃßÈÑ ãä ÇáäÓÈÉ ÇáãÓãæÍ ÈåÇ','Discount rate larger than the allowable percentage'

insert into [StrSource] 
([Ar],[En])
select  'äÓÈÉ ÇáÍÓã ÇáÚÙãì','Maximum discount rate'

insert into [StrSource] 
([Ar],[En])
select  'äÓÈÉ ÇáÒíÇÏÉ Úáì ÇáÚÞÏ ÇáÍÇáí','Increased percentage of current contract'

insert into [StrSource] 
([Ar],[En])
select  'äÓÈÉ ÇáÚãæáÉ','Commission rate'

insert into [StrSource] 
([Ar],[En])
select  'äÓÎ','Copy'

insert into [StrSource] 
([Ar],[En])
select  'äÓÎ ÅÍÊíÇØí','Backup'

insert into [StrSource] 
([Ar],[En])
select  'äÓÎ ÇáÌÏæá','Copy table'

insert into [StrSource] 
([Ar],[En])
select  'äÓÎ Çáßá','Copy all'

insert into [StrSource] 
([Ar],[En])
select  'äÓÎ ÇáãáÝ Çáì ÇáãÓÇÑ ÇáÅÝÊÑÇÖí ÚäÏ ÑÈØå ãÚ ÇáãÓÊäÏ','Copy the file to the default path when linking it with the document'

insert into [StrSource] 
([Ar],[En])
select  'äÓÎÉ ÞÇÚÏÉ ÇáÈíÇäÇÊ ÃÍÏË ãä äÓÎÉ ÇáÈÑäÇãÌ','Database version is latest than the program version'

insert into [StrSource] 
([Ar],[En])
select  'äÓÎÉ ãÑÎÕÉ áÜ','Licensed to '

insert into [StrSource] 
([Ar],[En])
select  'äÔÑ','Publish'

insert into [StrSource] 
([Ar],[En])
select  'äÔÑ ÇáÕáÇÍíÇÊ','Publish permissions'

insert into [StrSource] 
([Ar],[En])
select  'äÔÑ ÕáÇÍíÇÊ ÇáãÓÊÎÏã','Publish user permissions'

insert into [StrSource] 
([Ar],[En])
select  'äÔÑÉ ÃÓÚÇÑ ÇáÚãáÇÊ','Bulletin currency prices'

insert into [StrSource] 
([Ar],[En])
select  'äÕ ÇáÑÓÇáÉ','Message text'

insert into [StrSource] 
([Ar],[En])
select  'äÕ ÇáÑÓÇáÉ                 [A] ÈÏá ÅÓã ÇáÒÈæä','Text                [A] Customer name'

insert into [StrSource] 
([Ar],[En])
select  'äÕ ÇáÑÓÇáÉ [M]','The Message [M]'

insert into [StrSource] 
([Ar],[En])
select  'äÕ ÇáÑÓÇáÉ ÚÑÈí','SMS Arabic text'

insert into [StrSource] 
([Ar],[En])
select  'äÕ ÇáÑÓÇáÉ áÇÊíäí','SMS Latin text'

insert into [StrSource] 
([Ar],[En])
select  'äØÇÞ ÇáãäØÞÉ','Region-wide'

insert into [StrSource] 
([Ar],[En])
select  'äÙÇã ÇáÈäÇÁ','Building system'

insert into [StrSource] 
([Ar],[En])
select  'äÙÇã ÇáÍãÇíÉ','Safety system'

insert into [StrSource] 
([Ar],[En])
select  'äÚã','Yes'

insert into [StrSource] 
([Ar],[En])
select  'äÞÏÇð','Cash'

insert into [StrSource] 
([Ar],[En])
select  'äÞá','Transfar'

insert into [StrSource] 
([Ar],[En])
select  'äÞá ÇáÈØÇÞÇÊ','Move cards'

insert into [StrSource] 
([Ar],[En])
select  'äÞá ÇáÈØÇÞÇÊ Èíä ÇáÇäãÇØ','Transfer cards between types'

insert into [StrSource] 
([Ar],[En])
select  'äÞá ÇáÍÑßÇÊ Èíä ÇáÍÓÇÈÇÊ','Transfer cards between accounts'

insert into [StrSource] 
([Ar],[En])
select  'äÞá ÇáÍÑßÇÊ Èíä ÇáãæÇÏ','Transfer activity between materials'

insert into [StrSource] 
([Ar],[En])
select  'äÞá ÇáÍÑßÇÊ Èíä ãÑÇßÒ ÇáßáÝÉ','Transfer activities between job costs'

insert into [StrSource] 
([Ar],[En])
select  'äÞá ÈØÇÞÇÊ ÇáÓäÏÇÊ','Move entries cards'

insert into [StrSource] 
([Ar],[En])
select  'äÞá ÍÑßÉ ÇáÍÓÇÈÇÊ','Transfer activity of accounts'

insert into [StrSource] 
([Ar],[En])
select  'äÞá ßá ÍÑßÇÊ ÇáÍÓÇÈ','Transfar all account activity'

insert into [StrSource] 
([Ar],[En])
select  'äÞá ßá ÍÑßÇÊ ãÑßÒ ÇáßáÝÉ','Transfar all job cost activity'

insert into [StrSource] 
([Ar],[En])
select  'äÞá ãÇíáí ÚäÏ ÊÌÏíÏ ÇáÚÞÏ','Move the following when renewing contract'

insert into [StrSource] 
([Ar],[En])
select  'äãØ ÇáÃæÑÇÞ ÇáãÇáíÉ ÇáÇÝÊÑÇÖí Ýí ÊæáíÏ ÇáÃÞÓÇØ','Default note type in generating contract installments'

insert into [StrSource] 
([Ar],[En])
select  'äãØ ÇáÎÑíØÉ','Map type'

insert into [StrSource] 
([Ar],[En])
select  'äãØ ÇáÓäÏ ÇáäÞÏí','Cash entry type'

insert into [StrSource] 
([Ar],[En])
select  'äãØ ÇáÔíß','Cheque Pattern'

insert into [StrSource] 
([Ar],[En])
select  'äãØ ÇáÔíß ÇáÅÝÊÑÇÖí Ýí ÊæáíÏ ÇáÔíßÇÊ','Default note type in generating cheques'

insert into [StrSource] 
([Ar],[En])
select  'äãØ ÇáÚÞÏ','Contract Patterns'

insert into [StrSource] 
([Ar],[En])
select  'äãØ ÇáÝÇÊæÑÉ','Bill Pattern'

insert into [StrSource] 
([Ar],[En])
select  'äãØ ÇáÝÇÊæÑÉ ÇáÅÝÊÑÇÖí','Default bill type'

insert into [StrSource] 
([Ar],[En])
select  'äãØ ÓäÏ ÇáÞÈÖ','Receive voucher type'

insert into [StrSource] 
([Ar],[En])
select  'äãØ ÝÇÊæÑÉ ÇáãÈíÚÇÊ','Sales invoice pattern'

insert into [StrSource] 
([Ar],[En])
select  'ääÕÍ ÈÔÏÉ Úãá äÓÎÉ ÇÍÊíÇØíÉ ÞÈá ÇáÈÏÁ ÈåÐå ÇáÚãáíÉ','We strongly recommended to backup your data before you start this process'

insert into [StrSource] 
([Ar],[En])
select  'ääÕÍ ÈÔÏÉ Úãá äÓÎÉ ÇÍÊíÇØíÉ ÞÈá ÇáÈÏÁ ÈåÐå ÇáÚãáíÉåá ÊÑíÏ Úãá äÓÎÉ ÇÍÊíÇØíÉ ÇáÂä¿','We strongly recommended to backup your data before you start this process
Do you want to make backup now?'

insert into [StrSource] 
([Ar],[En])
select  'äåÇíÉ ÇáãÏÉ','Ending Period'

insert into [StrSource] 
([Ar],[En])
select  'äæÚ','type'

insert into [StrSource] 
([Ar],[En])
select  'äæÚ ÇáÃÑÖ','Land type'

insert into [StrSource] 
([Ar],[En])
select  'äæÚ ÇáÅåÊáÇß','Depreciation Type'

insert into [StrSource] 
([Ar],[En])
select  'äæÚ ÇáÅíÌÇÑ Óäæí / ÔåÑí','Rent type Annually / Monthly'

insert into [StrSource] 
([Ar],[En])
select  'äæÚ ÇáÈØÇÞÉ','Card type'

insert into [StrSource] 
([Ar],[En])
select  'äæÚ ÇáÈØÇÞÉ ÒÈæä/ãæÑÏ','Card type Customer/Supplier'

insert into [StrSource] 
([Ar],[En])
select  'äæÚ ÇáÊÑÎíÕ','License type'

insert into [StrSource] 
([Ar],[En])
select  'äæÚ ÇáÍÓÇÈ','Account type'

insert into [StrSource] 
([Ar],[En])
select  'äæÚ ÇáÎØ','Font type'

insert into [StrSource] 
([Ar],[En])
select  'äæÚ ÇáÏÝÚ','Payment method'

insert into [StrSource] 
([Ar],[En])
select  'äæÚ ÇáÏÝÚ ááÝÇÊæÑÉ','Bill payment type'

insert into [StrSource] 
([Ar],[En])
select  'äæÚ ÇáÑÈØ ãÚ ÇáãÌãæÚÇÊ ÇáÃÎÑì','Link type with other groups'

insert into [StrSource] 
([Ar],[En])
select  'äæÚ ÇáÒíÇÑÉ ÔåÑí / Óäæí','Visit type Monthly / Yearly'

insert into [StrSource] 
([Ar],[En])
select  'äæÚ ÇáÓÚÑ','Price type'

insert into [StrSource] 
([Ar],[En])
select  'äæÚ ÇáÓäÏ','Ownership type'

insert into [StrSource] 
([Ar],[En])
select  'äæÚ ÇáÓíÇÑÉ','Car type'

insert into [StrSource] 
([Ar],[En])
select  'äæÚ ÇáÔÞÉ','Flat type'

insert into [StrSource] 
([Ar],[En])
select  'äæÚ ÇáÔíß','Cheque type'

insert into [StrSource] 
([Ar],[En])
select  'äæÚ ÇáÚÑÖ','Offer type'

insert into [StrSource] 
([Ar],[En])
select  'äæÚ ÇáÚÞÇÑ','Unit type'

insert into [StrSource] 
([Ar],[En])
select  'äæÚ ÇáÚÞÏ','Contract type'

insert into [StrSource] 
([Ar],[En])
select  'äæÚ ÇáÚÞÏ Óäæí / ÔåÑí','Contract type yearly / monthly'

insert into [StrSource] 
([Ar],[En])
select  'äæÚ ÇáÚíä','Property type'

insert into [StrSource] 
([Ar],[En])
select  'äæÚ ÇáÚíä áÇÊíäí','Latin property type'

insert into [StrSource] 
([Ar],[En])
select  'äæÚ ÇáÝÇÊæÑÉ','Bill type'

insert into [StrSource] 
([Ar],[En])
select  'äæÚ ÇáãÇÏÉ','Material type'

insert into [StrSource] 
([Ar],[En])
select  'äæÚ ÇáãÊÍæá','Variable type'

insert into [StrSource] 
([Ar],[En])
select  'äæÚ ÇáæÑÞÉ ÇáãÇáíÉ','Check type'

insert into [StrSource] 
([Ar],[En])
select  'äæÚ ãÍÏÏ ãä ÇáãáÝÇÊ','Specific type of files'

insert into [StrSource] 
([Ar],[En])
select  'äæÚ äÙÇã ÇáÍãÇíÉ ','Safety system type'

insert into [StrSource] 
([Ar],[En])
select  'åÇÊÝ','Telephone'

insert into [StrSource] 
([Ar],[En])
select  'åÇÊÝ ÇáÒÈæä','Customer tel'

insert into [StrSource] 
([Ar],[En])
select  'åÇÊÝ ÇáÚãá','Business telephone'

insert into [StrSource] 
([Ar],[En])
select  'åÌÑí','Hijri'

insert into [StrSource] 
([Ar],[En])
select  'åÐÇ ÇáÊÚÇÏá ÛíÑ ãæÌæÏ Ýí äÔÑÉ ÇáÃÓÚÇÑ ','This rate does not exist in exchange rate window'

insert into [StrSource] 
([Ar],[En])
select  'åÐÇ ÇáÔíß ãÑÊÈØ ÈÚÞÏ ','This cheque is linked with contract'

insert into [StrSource] 
([Ar],[En])
select  'åÐÇ ÇáÔíß ãÑÊÈØ ÈÚÞÏ 
åá ÊÑíÏ ÇáÊÚÏíá','This cheque is linked with contract
Do you want to modify?'

insert into [StrSource] 
([Ar],[En])
select  'åÐÇ ÇáÔíß ãÑÊÈØ ÈÚÞÏ 
åá ÊÑíÏ ÇáÍÐÝ','This cheque is linked with contract
Do you want to delete?'

insert into [StrSource] 
([Ar],[En])
select  'åÐÇ ÇáÔíß ãÑÊÈØ ÈÝÇÊæÑÉ ','This cheque linked with bill'

insert into [StrSource] 
([Ar],[En])
select  'åÐÇ ÇáÚÞÏ ÑÞã : ','This contract No'

insert into [StrSource] 
([Ar],[En])
select  'åÐÇ ÇáÚÞÏ ÑÞã : 2','This contract No: 2'

insert into [StrSource] 
([Ar],[En])
select  'åÐÇ ÇáÞíÏ áå ÇÕá åá ÊÑíÏ ÇáãÊÇÈÚÉ ÈÚãáíÉ ÇáÍÐÝ¿','This journal entry has origin are you sure to delete?'

insert into [StrSource] 
([Ar],[En])
select  'åÐÇ ÇáÞíÏ ãÑÊÈØ ÈæÑÞÉ ãÇáíÉ','This entry is related with cheque'

insert into [StrSource] 
([Ar],[En])
select  'åÐÇ ÇáãÍá ÊÌãíÚí æ ÃÍÏ ãßæäÇÊå ÏÇÎá Ýí ÚÞÏ ','This is multiple shop and one of its components is included in the contract'

insert into [StrSource] 
([Ar],[En])
select  'åÐÇ ÇáãÚÇáÌ ÓíÓÇÚÏß Ýí ÇäÔÇÁ ÍÓÇÈÇÊ áÈØÇÞÇÊ ÇáÒÈÇÆä áíÓ áåÇ ÍÓÇÈ Çæ ÍÓÇÈ ÊÇãíä','This wizard help you to create accounts for customers that does not have account or deposit account'

insert into [StrSource] 
([Ar],[En])
select  'åÐÇ íÚäí Çäå ÓíÊã ÊÚÏíá ÇáÚÞæÏ ÈÍÓÈ ÇáÍÓÇÈÇÊ ÇáÇÝÊÑÇÖíÉ æáä ÊÓÊØíÚ ÇáÊÑÇÌÚ Úä åÐå ÇáÚãáíÉ ¿','This means that contracts will be modified according to the default accounts and will not be able to undo this process?'

insert into [StrSource] 
([Ar],[En])
select  'åÐå ÇáÃÑÖ ÃÑÖ ÊÌãíÚíÉ æ ÃÍÏ ãßæäÇÊåÇ ÏÇÎá Ýí ÚÞÏ ','This is multiple land and one of its components is included in the contract'

insert into [StrSource] 
([Ar],[En])
select  'åÐå ÇáÇÑÖ ãä ÃÑÖ ÊÌãíÚíÉ ÏÇÎá Ýí ÚÞÏ ','This Land is from a multiple in the contract'

insert into [StrSource] 
([Ar],[En])
select  'åÐå ÇáÈØÇÞÇÊ áíÓ áåÇ ÍÓÇÈ Çæ áíÓ áåÇ ÍÓÇÈ ÊÃãíä','These cards does not have account or deposit account'

insert into [StrSource] 
([Ar],[En])
select  'åÐå ÇáÔÞÉ ÔÞÉ ÊÌãíÚíÉ æ ÃÍÏ ãßæäÇÊåÇ ÏÇÎá Ýí ÚÞÏ ','This is multiple flat and one of its components is included in the contract'

insert into [StrSource] 
([Ar],[En])
select  'åÐå ÇáÔÞÉ ãä ÔÞÉ ÊÌãíÚíÉ ÏÇÎá Ýí ÚÞÏ ','This flat include in multiple flat inside contract'

insert into [StrSource] 
([Ar],[En])
select  'åÐå ÇáÚãáíÉ ÞÏ ÊÊØáÈ æÞÊÇð ØæíáÇð','This process may take a long time'

insert into [StrSource] 
([Ar],[En])
select  'åÐå ÇáãÍá ãä ãÍá ÊÌãíÚí ÏÇÎá Ýí ÚÞÏ ','This shop include in multiple shop inside contract'

insert into [StrSource] 
([Ar],[En])
select  'åÐå ÇáäÇÝÐÉ ÊÍæí ÈÚÖ ÇáãÚáæãÇÊ ÇáÊí íãßä Ãä Êßæä ãßÑÑÉ','This window contains some information that can be duplicated'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÅÖÇÝÉ ÇáÔÞÞ ÇáãÍÏÏÉ','Do you want to add selected flats'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÅÖÇÝÉ ÇáãÍáÇÊ ÇáãÍÏÏÉ','Do you want to add selected shops'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÅÖÇÝÊå ÇáÂä¿','Are you sure to add it now?'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÅÚÇÏÉ ÇáÊÔÛíá ÇáÂä¿','Do you want to restart programs now?'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÅÚÇÏÉ ÊÑÞíã ÇáÈØÇÞÇÊ ÇáãÍÏÏÉ','Do you want to renumber the selected cards?'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÅÚÇÏÉ ÊÔßíá ÇáÈíÇä ÇáãßÊæÈ ÓÇÈÞÇ ÇíÖÇ¿','Do you want to regnerate notes that is already exist?'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÅÛáÇÞ ÇáäÇÝÐÉ ÇáÍÇáíÉ','Do you want to close the current window?'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÅáÛÇÁ ÇáÍÌÒ¿','Do you want to cancel reservation?'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÅáÛÇÁ ãÑÇÌÚÉ ÇáÃæÑÇÞ ÇáãÇáíÉ ÇáãÑÊÈØÉ¿','Do you want to cancel checked of related cheques?'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÅáÛÇÁ ãÑÇÌÚÉ ÇáÏÝÚÇÊ ÇáäÞÏíÉ ÇáãÑÊÈØÉ¿','Do you want to cancel checked of related cash payments?'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÇÚÇÏÉ ÊÑÞíã ÇáÇæÑÇÞ ÇáãÇáíÉ','Do you want to Renumbering cheques'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÇÚÇÏÉ ÊÑÞíã ÇáÚÞæÏ','Do you want to Renumbering contracts'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÇáÊÌÏíÏ¿','Do you want to renew?'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÇáÊÚÏíá','Do you want to modify?'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÇáÍÐÝ','Do you want to delete?'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÇáÎÑæÌ ãä ÇáÈÑäÇãÌ','Do you want to close the program?'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÇáÞíÇã ÈÚãá äÓÎÉ ÅÍÊíÇØíÉ','Do you want to make backup'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÇáÞíÇã ÈÚãáíÉ ÇáÊÍÏíË ÇáÂä ¿','Do you want to update now?'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÇáãÊÇÈÚÉ','Do you want to continue'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÇáãÊÇÈÚÉ?','Do you want to continue?'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÇáãÊÇÈÚÉ¿','Do you want to continue?'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÇäåÇÁ ÇáÚÞÏ ÇáÍÇáí ÈÊÇÑíÎ ÇäÊåÇÁ ÇáÚÞÏ¿','Do you want to terminate the current contract using contract end date?'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÈÇáÊÃßíÏ ÊÛííÑ ÃÓÚÇÑ ÇáßáÝÉ ááÔÞÞ','Are you sure to change flats cost prices?'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÊÑÍíá ÇáÝÇÊæÑÉ¿','Do you want to post the bill?'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÊÑÍíá ÇáÞíÏ¿','Do you want to post the journal entry?'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÊÑÍíá ÇáÞíæÏ ÇáãÍÏÏÉ¿','Are you sure to post selected entries?'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÊÚÈÆÉ ÇáÍÓÇÈ ÇáãÞÇÈá ¿','Do you want to fill obverse account?'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÊÚííäå Ýí ÇáãæÞÚ ÇáÍÇáí ?','Do you want to set him in current site?'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÊÛííÑ ãÑßÒ ÇáßáÝÉ','Are you sure to change cost center?'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÊÝÕíá ãÑÇßÒ ÇáßáÝÉ Ýí ÇáÞíÏ ÇáÅÝÊÊÇÍí','Do you want to show cost center in opening entry?'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÍÐÝ ÅÚÏÇÏÇÊ ÇáÓäÉ ÇáåÌÑíÉ ÇáÍÇáíÉ¿','Are you sure to delete current Hijri year settings?'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÍÐÝ ÇáÔÞÞ ÇáãÍÏÏÉ','Do you want to delete selected flats'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÍÐÝ ÇáÕæÑÉ ÇáãÍÏÏÉ','Do you want to delete the selected photo?'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÍÐÝ ÇáÞíãÉ ÇáÞÏíãÉ ¿','Do you want to delete the old value?'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÍÐÝ ÇáãÍáÇÊ ÇáãÍÏÏÉ','Do you want to delete selected shops'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÍÐÝ ÇáãØÇÈÞÉ ÇáãÍÏÏÉ ¿','Do you want to delete selected reconciliation?'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÍÐÝ ÇáãáÝ ÇáãÑÝÞ ÇáãÍÏÏÉ','Do you want to delete the selected file attached'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÍÐÝ ÇáæËÇÆÞ æÇáÕæÑ ÇáÍÇáíÉ ãä ÞÇÚÏÉ ÇáÈíÇäÇÊ','Do you want to delete the existing documents and images from the database'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÍÐÝ ÈØÇÞÉ ÇáÍÓÇÈ ÇáãÑÊÈØÉ¿','Do you want to delete related account card?'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÍÐÝ ÈØÇÞÉ ÍÓÇÈ ÇáÊÃãíä ÇáãÑÊÈØÉ¿','Do you want to delete related deposit account card?'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÍÐÝ ÈØÇÞÉ ãÑßÒ ÇáßáÝÉ ÇáãÑÊÈØÉ¿','Do you want to delete related cost center card?'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÍÐÝ ÍÓÇÈ ÇáÈäÇÁ ÇíÖÇ¿','Do you want to delete building account also?'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÍÐÝ ÍÓÇÈ ÇáÈäß ááÈäÇÁ ÇíÖÇ¿','Do you want to delete building bank account also?'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÍÐÝ ãÑßÒ ÇáßáÝÉ ÇáÑÆíÓí áÔÞÞ ÇáÈäÇÁ ÇíÖÇ¿','Do you want to delete building cost center account also?'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÍÐÝÇÚÏÇÏÇÊ ÇáÓäÉ ÇáåÌÑíÉ ÇáÍÇáíÉ¿','Do you want to delete current settings of Hijri Year?'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÍÝÙ ÊÚÏíáÇÊ ÇáÒíÇÏÉ Úáì ÇáÚÞæÏ','Do you want to save the changes to increase contracts value'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ Úãá äÓÎÉ ÇÍÊíÇØíÉ ÇáÂä¿','Do you want to make backup now?'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÝÚáÇð ÅÊãÇã ÚãáíÉ ÇáÊÎÒíä¿','Do you want to save?'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÝÚáÇ ÅÚÇÏÉ ÊÑãíÒ ÇáÃÈäÇÁ','Do you want renumbering sub-accounts?'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÝÚáÇð ÇáÞíÇã ÈÇáÍÐÝ','Are you sure to delete?'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÝÚáÇð ÇáÞíÇã ÈÚãáíÉ ÇáÅÖÇÝÉ ÇáÂä','Do you want to add now?'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÝÚáÇð ÊÞáíÕ ÍÌã ÞÇÚÏÉ ÇáÈíÇäÇÊ','Do you want to shrink size of the database'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÝÚáÇð ÍÌÒ ÇáÔÞÉ¿','Do you want to reserve the flat?'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÝÚáÇð ÍÌÒ ÇáãÍá¿','Do you want to reserve the shop?'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÝÚáÇð ÍÌÒ ÇáãæÞÝ¿','Do you want to reserve the parking?'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ÝÚáÇ ÍÐÝ ßá ÇáÃæÑÇÞ ÇáãÇáíÉ ÇáãÍÏÏÉ¿','Are you sure to delete all selected notes?'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ãÑÇÌÚÉ ÇáÃæÑÇÞ ÇáãÇáíÉ ÇáãÑÊÈØÉ¿','Do you want to check the related cheques?'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ ãÑÇÌÚÉ ÇáÏÝÚÇÊ ÇáäÞÏíÉ ÇáãÑÊÈØÉ¿','Do you want to review the related cash payments?'

insert into [StrSource] 
([Ar],[En])
select  'åá ÊÑíÏ äÓÎ ÇáãáÝÇÊ æÇáæËÇÆÞ æÇáÕæÑ  ÇáãÄÑÔÝÉ Çáì ÞÇÚÏÉ ÇáÈíÇäÇÊ','Do you want to copy archived files, documents and images to the database'

insert into [StrSource] 
([Ar],[En])
select  'åæÇÊÝ','Telephones'

insert into [StrSource] 
([Ar],[En])
select  'æ','and'

insert into [StrSource] 
([Ar],[En])
select  'æÍÏÇÊ ÇáÅäÊÇÌ','Production units'

insert into [StrSource] 
([Ar],[En])
select  'æÍÏÉ ÇáÝÇÊæÑÉ','Bill unit'

insert into [StrSource] 
([Ar],[En])
select  'æÍÏÉ ÇáÞáã','Line unit'

insert into [StrSource] 
([Ar],[En])
select  'æÓíÊã ÇáÅßÊÝÇÁ ÈÍÝÙåÇ Úáì ÇáãÌáÏÇÊ Ýí ÇáÞÑÕ ÇáÕáÈ ÝÞØ','and will be saved in folders on the hard drive only'

insert into [StrSource] 
([Ar],[En])
select  'æÕÝ ÇáÊÞÑíÑ','Report description'

insert into [StrSource] 
([Ar],[En])
select  'æÕÝ ÇáãÔßáÉ','Problem description'

insert into [StrSource] 
([Ar],[En])
select  'æÕÝåÇ','Descriptions'

insert into [StrSource] 
([Ar],[En])
select  'æÞÊ ÇáÏÎæá','Entry time'

insert into [StrSource] 
([Ar],[En])
select  'æÞÝ ÇáÊäÝíÐ','Suspended'

insert into [StrSource] 
([Ar],[En])
select  'æáÛÇíÉ','Until'

insert into [StrSource] 
([Ar],[En])
select  'æáä ÊÓÊØíÚ ÈÚÏåÇ ÃÓÊÚÇÏÉ ÇáÈíÇäÇÊ ÇáÍÇáíÉ','and you will not be able to retrieve current data'

insert into [StrSource] 
([Ar],[En])
select  'æåÐå ÇáÔÞÞ åí :','These flats are:'

insert into [StrSource] 
([Ar],[En])
select  'æåÐå ÇáãÍáÇÊ åí :','These shops are:'

insert into [StrSource] 
([Ar],[En])
select  'æåÐå ÇáãæÇÞÝ åí :','Those parking are:'

insert into [StrSource] 
([Ar],[En])
select  'íÊßæä åÐÇ ÇáãÍá ãä ÊÌãíÚ ÃßËÑ ãä ãÍá','This is a collective shop'

insert into [StrSource] 
([Ar],[En])
select  'íÊßæä åÐÇ ÇáãæÞÝ ãä ÊÌãíÚ ÃßËÑ ãä ãæÞÝ','This parking consists of assembling more than one parking'

insert into [StrSource] 
([Ar],[En])
select  'íÌÈ ÃæáÇð ÅÚÏÇÏ ÇáÅÊÕÇá','Connection must first set up'

insert into [StrSource] 
([Ar],[En])
select  'íÌÈ ÊÍÏíË ÇáãáÝÇÊ','Files must be updated'

insert into [StrSource] 
([Ar],[En])
select  'íÌÈ ÊÍÏíÏ ÃÑÞÇã ÇáÞíæÏ ÇáÇÝÊÊÇÍíÉ ÇáÊí ÓíÊã ÇÓÊËäÇÄåÇ ááÍÕæá Úáì äÊÇÆÌ ÕÍíÍÉ Ýí ÇáÊÞÇÑíÑ','Opening entries number which will be excluded must be specified for correct information in the report'

insert into [StrSource] 
([Ar],[En])
select  'íÌÏÏ ÊáÞÇÆíÇ','Automatically renewed'

insert into [StrSource] 
([Ar],[En])
select  'íÍÊÇÌ ÇáÏáíá Çáì ÇÚÇÏÉ ÊÍÏíË , åá ÊÑíÏ ÇáÞíÇã ÈÐáß ÇáÂä¿','Chart must be refreshed, Do you want to do it?'

insert into [StrSource] 
([Ar],[En])
select  'íÍæí','Contain'

insert into [StrSource] 
([Ar],[En])
select  'íÑÌì ÅÏÎÇá ÇáÞíãÉ','Please enter the amount'

insert into [StrSource] 
([Ar],[En])
select  'íÑÌì ÇáÅäÊÈÇå Çáì Çä ÇáÔÞÞ ÇáÊí áã ÊÍÏÏ ãÓÇÍÊåÇ áä ÊÊÛíÑ ßáÝÊåÇ','Please note that the flats did not specify with area, the cost will not change'

insert into [StrSource] 
([Ar],[En])
select  'íÑÌì ÇáÅäÊÈÇå!','Please attention !!'

insert into [StrSource] 
([Ar],[En])
select  'íÑÌì ÇáÅäÊÈÇå!ÓÊßæä äÊÇÆÌ ÇáÊÞÑíÑ ÛíÑ ãÑÊÈÉ ÈÔßá ÕÍíÍ æÓíÎÊáÝ ÇáÑÕíÏ ÍÓÈ ÇáÎíÇÑÇÊ ÇáãÍÏÏÉ Öãä ÇáÝÑÒ','Attention please!
The results of the report is ing to be not properly arranged and the balance will be different depending on the options selected in the sorting'

insert into [StrSource] 
([Ar],[En])
select  'íÑÌì ÇáÊÃßÏ ãä ÊËÈíÊ ÏÇÑÉ ÇáÍãÇíÉPlease make sure you install protection key','Please make sure you install protection key'

insert into [StrSource] 
([Ar],[En])
select  'íÓÇæí','Equal'

insert into [StrSource] 
([Ar],[En])
select  'íÓÇæí ÊÇÑíÎ äåÇíÉ ÇáÚÞÏ','Equal the contract end date'

insert into [StrSource] 
([Ar],[En])
select  'íÓÏÏ ÇáãÈáÛ ÎáÇá','Payment within'

insert into [StrSource] 
([Ar],[En])
select  'íÝÖá ÃÎÐ äÓÎÉ ÇÍÊíÇØíÉ ÞÈá ÇáÞíÇã ÈåÐå ÇáÚãáíÉ','We prefer to take a backup before performing this operation'

insert into [StrSource] 
([Ar],[En])
select  'íãßä ÊÛííÑ ÇáÚãáÉ','You can change currency'

insert into [StrSource] 
([Ar],[En])
select  'íãßä ÊÛííÑ äãØ ÇáÝÇÊæÑÉ','You can change invoice pattern'

insert into [StrSource] 
([Ar],[En])
select  'íãáß ßá ÇáÕáÇÍíÇÊ','This user has all permissions'

insert into [StrSource] 
([Ar],[En])
select  'íæÌÏ ÏÚæì','There is lawsuit'

insert into [StrSource] 
([Ar],[En])
select  'íæÌÏ ÏÝÚÉ','Payment available'

insert into [StrSource] 
([Ar],[En])
select  'íæÌÏ ÓáÇáã ÏÇÎáíÉ','There is interios stairs'

insert into [StrSource] 
([Ar],[En])
select  'íæÌÏ ÚÞÏ áäÝÓ ÇáÒÈæä æ äÝÓ ÇáÚÞÇÑ ÛíÑ ãäÊåí','There is existing contract for same customer and property'

insert into [StrSource] 
([Ar],[En])
select  'íæÌÏ ÚÞÏ áäÝÓ ÇáÚÞÇÑ ÛíÑ ãäÊåí','There is valid contract for same property'

insert into [StrSource] 
([Ar],[En])
select  'íæÌÏ ÚÞÏ ãæÞÝ áäÝÓ ÇáÒÈæä','There is parking contract for same customer'

insert into [StrSource] 
([Ar],[En])
select  'íæÌÏ ÚÞæÏ ãæÇÞÝ ãÑÊÈØÉ ÈåÐÇ ÇáÚÞÏ','There is related parking contracts with this contract'

insert into [StrSource] 
([Ar],[En])
select  'íæÌÏ ãÑßÒ ßáÝÉ ÂÎÑ áå äÝÓ ÇáÑãÒ','There is another cost center with the same code'

insert into [StrSource] 
([Ar],[En])
select  'íæÌÏ ãÓÊÎÏã ÂÎÑ ÈäÝÓ ÇáÅÓã','There is another User with the same name'

insert into [StrSource] 
([Ar],[En])
select  'íæÌÏ ãÔßáÉ ÈÇáÞíÏ ÑÞã :','There is a problem in voucher No:'

insert into [StrSource] 
([Ar],[En])
select  'íæÌÏ äÙÇã ÍãÇíÉ','Security system available'

insert into [StrSource] 
([Ar],[En])
select  'íæáÏ ÞíÏ','Generate voucher'

insert into [StrSource] 
([Ar],[En])
select  'íæáÏ ÞíÏ ÈÔßá Âáí','Auto Generate voucher'

insert into [StrSource] 
([Ar],[En])
select  'íæã','Day'

insert into [StrSource] 
([Ar],[En])
select  'íæãí','Daily'

insert into [StrSource] 
([Ar],[En])
select  'íæãíÉ ÇáÚãá','Daily entries report'



GO
/****** Object:  StoredProcedure [dbo].[PrcStrtoUCS]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[PrcStrtoUCS]
(
	@Str Varchar(256) = '',
	@SMSUnicode int = 2
)
  
as
	Declare @R Varchar(8000),
			@T Varchar(256)
	Set @R = ''
	Declare @I int
	
	Set @I = 1
	while @I <= Len(@Str)
	begin
			if @SMSUnicode = 3 
			Set @T = (substring(@str, @I, 1)) 
			else
			begin
					--print '/'+substring(@str, @I, 1)+'/' print ASCII(substring(@str, @I, 1))
 					Set @T = (Select Top 1
 								[UCS] 
 							  From 
 								[ucsTbl2] 
 							  where 
 								(ASCII([Char]) = ASCII(substring(@str, @I, 1)))
 								and ([Unicode] = @SMSUnicode)
 							)
		 			
 					if @T is Null
					Set @T = (substring(@str, @I, 1)) 
			end

		/*--åÇã-- Set @T = '%'+(Select dbo.IntToHex(ASCII(substring(@str, @I, 1)) ))*/ --åÇã
		--Print @R Print substring(@str, @I, 1)
		
		--Set @T = '%'+(Select dbo.IntToHex(ASCII(substring(@str, @I, 1)) ))
		--Print @R Print substring(@str, @I, 1)

		Set @R = @R + @T

		Set @I = @I + 1
	end

	Select @R as [UCS], Len(@R) as [Len]

GO
/****** Object:  StoredProcedure [dbo].[PrcTabletoString]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[PrcTabletoString] 
(
	@Guid uniqueidentifier = 0x0,
	@TableName Varchar(255) , 
	@ColName Varchar(255) = ''
)
AS
	Declare @sql Varchar(8000)
	
	Set @sql = '
	Declare @R Varchar(8000)
	Set @R = ''''
	
	Declare @ColTmp Varchar(256)

	DECLARE @cursor_Name_Table CURSOR 
	Set @cursor_Name_Table = CURSOR FAST_FORWARD FOR 
	SELECT Top 100 '+@ColName+'
	FROM '+@TableName+'
	
	OPEN @cursor_Name_Table
	FETCH NEXT FROM @cursor_Name_Table INTO @ColTmp
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
		Set @R = @R + @ColTmp + '',''
	  FETCH NEXT FROM @cursor_Name_Table INTO @ColTmp
	END
	
	CLOSE @cursor_Name_Table
	DEALLOCATE @cursor_Name_Table

	Select '''+Cast(@Guid as varchar(255))+''' as Guid, @R as Res'
	
	print @sql
	exec (@sql)

GO
/****** Object:  StoredProcedure [dbo].[PrcTestEntrys]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcTestEntrys]
 
as

	Select 
		H.[Number], 
		Sum(d.Debit * D.CurrencyVal)- Sum(d.Credit * D.CurrencyVal) As Diff 
	From 
		DEntry D
		inner join HEntry H On H.[Guid] = [D].[ParentGuid] and D.AcGuid is Not Null
	Group By
		H.[Number]
	Having Sum(d.Debit * D.CurrencyVal)- Sum(d.Credit * D.CurrencyVal) > 0.01


GO
/****** Object:  StoredProcedure [dbo].[PrcTestFlatRestrained]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcTestFlatRestrained]
(
	@FlatGuid uniqueidentifier = '0711A702-62FF-4913-B00F-8084D8E2DF6D',
	@FromDate DateTime = '2009-9-1',
	@ToDate DateTime = '2009-9-30',
	@CardGuid uniqueidentifier = 0x0,
	@RealtyType int = 0
)
  
as
	
	Select
		*
	from
		[RealtyRestrained]
	where
		
		([FlatGuid] =@FlatGuid or @RealtyType = 1)
		and ([Shop] =@FlatGuid or @RealtyType = 0)
		and ([RealtyType] = @RealtyType)
		and ([RestrainedCanceld] = 0)
		and (
			   (@FromDate between [Date] and [EndDate])
			or
				(@ToDate between [Date] and [EndDate])
			or
				(@ToDate between [Date] and [EndDate] )
			or
				([Date] between @FromDate and @ToDate)
			or
				([EndDate] between @FromDate and @ToDate)
			)
		and [Guid] <> @CardGuid

GO
/****** Object:  StoredProcedure [dbo].[PrcTestFlatUsed]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcTestFlatUsed]
(
	@FlatGuid uniqueidentifier = 'FAC0771A-ABC6-4D88-BC6B-DA13C5110A91',
	@Date DateTime = '10/1/2008'
)
  
as
	Select 
		[L].[Number],
		[T].[Name] as [ContractName],
		[L].[FromDate],
		[L].[ToDate],
		[L].[Leasekind],
		[L].[Guid]
	From 
		[LeaseApartment] [L] 
		inner join [ContractType] [T] On [T].[Guid] = [L].[TypeGuid]
	where 
		([ApartmentGuid] = @FlatGuid)
		and (
				(
					(
						([FromDate] <= @Date )
					)
				and ( [Leasekind] = 2 )
				)
				or 
				(
					(
					   (@Date between [FromDate] and [ToDate])
                     )
                	and ([Leasekind] = 0 or [Leasekind] = 1)
				)
			)
			

GO
/****** Object:  StoredProcedure [dbo].[PrcTestFlatUsed2]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcTestFlatUsed2]
(
	@MotherFlatGuid uniqueidentifier = '773E9079-47D2-48E4-BF75-EB5EE596ACEC',
	@Date1 DateTime = '10/1/2007',
	@Date2 DateTime = '10/1/2009'
)
  
as
	Select
		[L].*,
		Case when [ContractFinish] = 0 then [ToDate] else [ContractFinishDate]  end as [EndDate]
	into #Contract
	From
		[LeaseApartment] [L]
		inner join [AccumulateFlat] [A] on [A].[FlatGuid] = [L].[ApartmentGuid]
	where 
		([A].[ParentGuid] = @MotherFlatGuid)		

		
	Select 
		[L].[Number],
		[T].[Name] as [ContractName],
		[L].[FromDate],
		[L].[ToDate],
		[L].[Leasekind],
		[L].[ApartmentGuid],
		[L].[Guid]
	From 
		#Contract [L] 
		inner join [ContractType] [T] On [T].[Guid] = [L].[TypeGuid]
		inner join [AccumulateFlat] [A] on [A].[FlatGuid] = [L].[ApartmentGuid]
	where 
		([A].[ParentGuid] = @MotherFlatGuid)		
		and 
		(
				(
					[Leasekind] = 2
					and	(
							([FromDate] <= @Date1 )
						 or ([FromDate] <= @Date2 )
						)
				)
				or 
				(
					[Leasekind] = 0
					and	([ContractFinish] = 0 )
				)

			)
			

GO
/****** Object:  StoredProcedure [dbo].[PrcTestFlatUsedForRestrained]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcTestFlatUsedForRestrained]
(
	@FlatGuid uniqueidentifier = '0711A702-62FF-4913-B00F-8084D8E2DF6D',
	@FromDate DateTime = '2009-9-1',
	@ToDate DateTime = '2009-9-30'
)
  
as
	
	Select
		[FromDate],
		[ToDate],
		[ContractFinishDate],
		*
	from
		[LeaseApartment]
	where
		([ApartmentGuid] =@FlatGuid)
		and (
				(
					[ContractFinish] = 0
					and
					(
					   (@FromDate between [FromDate] and (Case when [ContractFinish] = 0 then [ToDate] else [ContractFinishDate] end))
					or(
					     @ToDate between [FromDate] and (Case when [ContractFinish] = 0 then [ToDate] else [ContractFinishDate] end)
					   )
					or(
					     @ToDate between [FromDate] and (Case when [ContractFinish] = 0 then [ToDate] else [ContractFinishDate] end)
					   )
					or(
					    [FromDate] between @FromDate and @ToDate
					   )
					or((Case when [ContractFinish] = 0 then [ToDate] else [ContractFinishDate] end) between @FromDate and @ToDate)
				   )
				)
			or
			(
					[ContractFinish] = 1
					and [ContractFinishDate] > @FromDate
			))

GO
/****** Object:  StoredProcedure [dbo].[PrcTestLandUsed]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcTestLandUsed]
(
	@LandGuid uniqueidentifier = 'FAC0771A-ABC6-4D88-BC6B-DA13C5110A91',
	@Date DateTime = '10/1/2008'
)
  
as
	Select 
		[L].[Number],
		[T].[Name] as [ContractName],
		[L].[FromDate],
		[L].[ToDate],
		[T].[ContractKind],
		[L].[Guid]
	From 
		[LandContract] [L] 
		inner join [ContractType] [T] On [T].[Guid] = [L].[TypeGuid]
	where 
		([LandGuid] = @LandGuid)
		and (
				(
					(
						([FromDate] <= @Date )
					)
				and ( [ContractKind] = 8 )
				)
				or 
				(
					(
					   (@Date between [FromDate] and [ToDate])
                     )
                	and ([ContractKind] = 6)
				)
			)
			

GO
/****** Object:  StoredProcedure [dbo].[PrcTestLandUsed2]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcTestLandUsed2]
(
	@MotherLandGuid uniqueidentifier = '773E9079-47D2-48E4-BF75-EB5EE596ACEC',
	@Date1 DateTime = '10/1/2007',
	@Date2 DateTime = '10/1/2009'
)
  
as
	Select
		[L].*,
		Case when [ContractFinish] = 0 then [ToDate] else [ContractFinishDate]  end as [EndDate]
	into #Contract
	From
		[LandContract] [L]
		inner join [AccumulateLand] [A] on [A].[LandGuid] = [L].[LandGuid]
	where 
		([A].[ParentGuid] = @MotherLandGuid)		

		
	Select 
		[L].[Number],
		[T].[Name] as [ContractName],
		[L].[FromDate],
		[L].[ToDate],
		[T].[ContractKind],
		[L].[LandGuid],
		[L].[Guid]
	From 
		#Contract [L] 
		inner join [ContractType] [T] On [T].[Guid] = [L].[TypeGuid]
		inner join [AccumulateLand] [A] on [A].[LandGuid] = [L].[LandGuid]
	where 
		([A].[ParentGuid] = @MotherLandGuid)		
		and 
		(
				(
					[ContractKind] = 8
					and	(
							([FromDate] <= @Date1 )
						 or ([FromDate] <= @Date2 )
						)
				)
				or 
				(
					[ContractKind] = 6
					and	(
							(
								  (@Date1 between [FromDate] and [EndDate])
								or(@Date2 between [FromDate] and [EndDate])
								or([FromDate] between @Date1 and @Date2)
								or([EndDate] between @Date1 and @Date2)
							)
						)
				)

			)
			

GO
/****** Object:  StoredProcedure [dbo].[PrcTestParkingRestrained]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcTestParkingRestrained]
(
	@ParkingGuid uniqueidentifier = '0711A702-62FF-4913-B00F-8084D8E2DF6D',
	@FromDate DateTime = '2009-9-1',
	@ToDate DateTime = '2009-9-30',
	@CardGuid uniqueidentifier = 0x0
)
  
as
	
	Select
		*
	from
		[RealtyRestrained]
	where
		
		([ParkingNo] =@ParkingGuid)
		and ([RealtyType] = 2)
		and ([RestrainedCanceld] = 0)
		and (
			   (@FromDate between [Date] and [EndDate])
			or
				(@ToDate between [Date] and [EndDate])
			or
				(@ToDate between [Date] and [EndDate] )
			or
				([Date] between @FromDate and @ToDate)
			or
				([EndDate] between @FromDate and @ToDate)
			)
		and [Guid] <> @CardGuid

GO
/****** Object:  StoredProcedure [dbo].[PrcTestParkingUsed2]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcTestParkingUsed2]
(
	@MotherParkingGuid uniqueidentifier = '773E9079-47D2-48E4-BF75-EB5EE596ACEC',
	@Date1 DateTime = '10/1/2007',
	@Date2 DateTime = '10/1/2009'
)
  
as
	Select
		[L].*,
		Case when [ContractFinish] = 0 then [ToDate] else [ContractFinishDate]  end as [EndDate]
	into #Contract
	From
		[ParkingContract] [L]
		inner join [AccumulateParking] [A] on [A].[ParkingGuid] = [L].[parkingGuid]
	where 
		([A].[ParentGuid] = @MotherParkingGuid)		

		
	Select 
		[L].[Number],
		[T].[Name] as [ContractName],
		[L].[FromDate],
		[L].[ToDate],
		[L].[ContractKind],
		[L].[parkingGuid],
		[L].[Guid]
	From 
		#Contract [L] 
		inner join [ContractType] [T] On [T].[Guid] = [L].[TypeGuid]
		inner join [AccumulateParking] [A] on [A].[ParkingGuid] = [L].[parkingGuid]
	where 
		([A].[ParentGuid] = @MotherParkingGuid)		
		and 
		(
				(
					L.[ContractKind] = 5
					and	(
							([FromDate] <= @Date1 )
						 or ([FromDate] <= @Date2 )
						)
				)
				or 
				(
					L.[ContractKind] = 4
					and	([ContractFinish] = 0 )
				)

			)
			

GO
/****** Object:  StoredProcedure [dbo].[PrcTestParkingUsedForRestrained]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcTestParkingUsedForRestrained]
(
	@ParkingGuid uniqueidentifier = '0711A702-62FF-4913-B00F-8084D8E2DF6D',
	@FromDate DateTime = '2009-9-1',
	@ToDate DateTime = '2009-9-30'
)
  
as
	
	Select
		[FromDate],
		[ToDate],
		[ContractFinishDate],
		*
	from
		[ParkingContract]
	where
		([ParkingGuid] =@ParkingGuid)
		and (
				(
					[ContractFinish] = 0
					and
					(
					   (@FromDate between [FromDate] and (Case when [ContractFinish] = 0 then [ToDate] else [ContractFinishDate] end))
					or(
					     @ToDate between [FromDate] and (Case when [ContractFinish] = 0 then [ToDate] else [ContractFinishDate] end)
					   )
					or(
					     @ToDate between [FromDate] and (Case when [ContractFinish] = 0 then [ToDate] else [ContractFinishDate] end)
					   )
					or(
					    [FromDate] between @FromDate and @ToDate
					   )
					or((Case when [ContractFinish] = 0 then [ToDate] else [ContractFinishDate] end) between @FromDate and @ToDate)
				   )
				)
			or
			(
					[ContractFinish] = 1
					and [ContractFinishDate] > @FromDate
			))

GO
/****** Object:  StoredProcedure [dbo].[PrcTestRealtyRestrained]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcTestRealtyRestrained]
(
	@BuildingGuid uniqueidentifier = '8874D8BB-D8C6-4CEE-A386-C6AC00B5896A',
	@Date DateTime = '9/1/2009',
	@RealtyType int = 0,
	@RealtyNo Varchar(256) = '0202'
)
  
as
	Select 
		* 
	From 
		[RealtyRestrained] [R]
	where
		([BuildingGuid] = @BuildingGuid)
		and (
				Case 
				when @RealtyType = 0 then (Select [No] From [vwApartment] where [Guid] = [R].[FlatGuid])
				when @RealtyType = 1 then (Select [No] From [vwShop] where [Guid] = [R].[Shop])
				when @RealtyType = 2 then (Select [No] From [vwParking] where [Guid] = [R].[ParkingNo])
				end = @RealtyNo
			)
 		and (@Date >= [Date])
 		and (@Date <= [EndDate] or [EndDateSpecific] = 0)
 		and ([RestrainedCanceld] = 0)

GO
/****** Object:  StoredProcedure [dbo].[PrcTestRentedFlat]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcTestRentedFlat]
(
	@CardGuid uniqueidentifier = '2AC942CE-CCAF-4871-B2AB-A044564D8EF9',
	@FlatGuid uniqueidentifier = '3AFE1F3B-44F3-49F1-9850-7A2A6A7CBF93',
	@FromDate DateTime = '2011-06-01 00:00:00',
	@ToDate DateTime = '2012-02-15 00:00:00'
)
  
as
	Select
		Number,ApartmentGuid
	from
		[LeaseApartment]
	where
		([ApartmentGuid] = @FlatGuid)
		and (
				(
					--[ContractFinish] = 0
					--and
					(
						   (@FromDate between [FromDate] and (Case when [ContractFinish] = 0 then [ToDate] else [ContractFinishDate] end))
						or(
							[FromDate] between @FromDate and @ToDate
						   )
						or(
							 @ToDate between [FromDate] and (Case when [ContractFinish] = 0 then [ToDate] else [ContractFinishDate] end)
						   )
						or(
							 @ToDate between [FromDate] and (Case when [ContractFinish] = 0 then [ToDate] else [ContractFinishDate] end)
						   )
						--or(
						--	(@FromDate < [ContractFinishDate] and [ContractFinish] = 1)
						--   )
						or((Case when [ContractFinish] = 0 then [ToDate] else [ContractFinishDate] end) between @FromDate and @ToDate)
				   )
				)
		   )
		and ([Leasekind] = 0 or [Leasekind] = 1)
	   and [Guid] <> @CardGuid


GO
/****** Object:  StoredProcedure [dbo].[PrcTestRentedParking]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcTestRentedParking]
(
	@CardGuid uniqueidentifier = '2AC942CE-CCAF-4871-B2AB-A044564D8EF9',
	@ParkingGuid uniqueidentifier = '3AFE1F3B-44F3-49F1-9850-7A2A6A7CBF93',
	@FromDate DateTime = '2011-06-01 00:00:00',
	@ToDate DateTime = '2012-02-15 00:00:00'
)
  
as
	Select
		FromDate, ToDate, [ContractFinishDate],
		*
	from
		[ParkingContract]
	where
		([ParkingGuid] =@ParkingGuid)
		and (
				(
					--[ContractFinish] = 0
					--and
					(
						   (@FromDate between [FromDate] and (Case when [ContractFinish] = 0 then [ToDate] else [ContractFinishDate] end))
						or(
							[FromDate] between @FromDate and @ToDate
						   )
						or(
							 @ToDate between [FromDate] and (Case when [ContractFinish] = 0 then [ToDate] else [ContractFinishDate] end)
						   )
						or(
							 @ToDate between [FromDate] and (Case when [ContractFinish] = 0 then [ToDate] else [ContractFinishDate] end)
						   )
						--or(
						--	(@FromDate < [ContractFinishDate] and [ContractFinish] = 1)
						--   )
						or((Case when [ContractFinish] = 0 then [ToDate] else [ContractFinishDate] end) between @FromDate and @ToDate)
				   )
				)
		   )
		and ([ContractKind] = 4)
	   and [Guid] <> @CardGuid


GO
/****** Object:  StoredProcedure [dbo].[PrcTestRentFlatFromAccumulateFlat]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcTestRentFlatFromAccumulateFlat]
(
	@ContractGuid uniqueidentifier = 'EFAF9774-48B8-4680-BE63-6B3D9112271A',
	@FlatGuid uniqueidentifier = '90DBB8C2-DFC0-4E6F-86FD-0D8ECEC5E607',
	@Date1 DateTime = '1/1/2010',
	@Date2 DateTime = '10/1/2010'
)
  
as
	Select
		[L].*,
		Case when [ContractFinish] = 0 then [ToDate] else [ContractFinishDate]  end as [EndDate]
	into #Contract
	From
		[LeaseApartment] [L]
		inner join [AccumulateFlat] [A] on [A].[ParentGuid] = [L].[ApartmentGuid]
	where 
		([A].[FlatGuid] = @FlatGuid)		
		and ([L].[Guid] <> @ContractGuid)

--	Select * from #Contract
		
	Select 
		[L].[Number],
		[T].[Name] as [ContractName],
		[L].[FromDate],
		[L].[ToDate],
		[L].[Leasekind],
		[L].[ApartmentGuid],
		[L].[Guid]
	From 
		#Contract [L] 
		inner join [ContractType] [T] On [T].[Guid] = [L].[TypeGuid]
		inner join [AccumulateFlat] [A] on [A].[ParentGuid] = [L].[ApartmentGuid]
	where 
		([A].[FlatGuid] = @FlatGuid)		
		and 
		(
				(
					[Leasekind] = 2
					and	(
							([FromDate] <= @Date1 )
						 or ([FromDate] <= @Date2 )
						)
				)
				or 
				(
					[Leasekind] = 0
					and	([ContractFinish] = 0 )
				)

			)
			

GO
/****** Object:  StoredProcedure [dbo].[PrcTestRentLandFromAccumulateLand]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcTestRentLandFromAccumulateLand]
(
	@ContractGuid uniqueidentifier = 'EFAF9774-48B8-4680-BE63-6B3D9112271A',
	@LandGuid uniqueidentifier = '90DBB8C2-DFC0-4E6F-86FD-0D8ECEC5E607',
	@Date1 DateTime = '1/1/2010',
	@Date2 DateTime = '10/1/2010'
)
  
as
	Select
		[L].*,
		Case when [ContractFinish] = 0 then [ToDate] else [ContractFinishDate]  end as [EndDate]
	into #Contract
	From
		[LandContract] [L]
		inner join [AccumulateLand] [A] on [A].[ParentGuid] = [L].[LandGuid] 
	where 
		([A].[LandGuid] = @LandGuid)		
		and ([L].[Guid] <> @ContractGuid)

--	Select * from #Contract
		
	Select 
		[L].[Number],
		[T].[Name] as [ContractName],
		[L].[FromDate],
		[L].[ToDate],
		[T].[ContractKind],
		[L].[LandGuid],
		[L].[Guid]
	From 
		#Contract [L] 
		inner join [ContractType] [T] On [T].[Guid] = [L].[TypeGuid]
		inner join [AccumulateLand] [A] on [A].[ParentGuid] = [L].[LandGuid]
	where 
		([A].[LandGuid] = @LandGuid)		
		and 
		(
				(
					[ContractKind] = 8
					and	(
							([FromDate] <= @Date1 )
						 or ([FromDate] <= @Date2 )
						)
				)
				or 
				(
					[ContractKind] = 1
					and	(
							(
								  (@Date1 between [FromDate] and [EndDate])
								or(@Date2 between [FromDate] and [EndDate])
								or([FromDate] between @Date1 and @Date2)
								or([EndDate] between @Date1 and @Date2)
							)
						)
				)

			)
			

GO
/****** Object:  StoredProcedure [dbo].[PrcTestRentparkingFromAccumulateparking]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcTestRentparkingFromAccumulateparking]
(
	@ContractGuid uniqueidentifier = 'EFAF9774-48B8-4680-BE63-6B3D9112271A',
	@parkingGuid uniqueidentifier = '90DBB8C2-DFC0-4E6F-86FD-0D8ECEC5E607',
	@Date1 DateTime = '1/1/2010',
	@Date2 DateTime = '10/1/2010'
)
  
as
	Select
		[L].*,
		Case when [ContractFinish] = 0 then [ToDate] else [ContractFinishDate]  end as [EndDate]
	into #Contract
	From
		[ParkingContract] [L]
		inner join [Accumulateparking] [A] on [A].[ParentGuid] = [L].[ParkingGuid]
	where 
		([A].[parkingGuid] = @parkingGuid)		
		and ([L].[Guid] <> @ContractGuid)

--	Select * from #Contract
		
	Select 
		[L].[Number],
		[T].[Name] as [ContractName],
		[L].[FromDate],
		[L].[ToDate],
		[L].[Contractkind],
		[L].[ParkingGuid],
		[L].[Guid]
	From 
		#Contract [L] 
		inner join [ContractType] [T] On [T].[Guid] = [L].[TypeGuid]
		inner join [Accumulateparking] [A] on [A].[ParentGuid] = [L].[ParkingGuid]
	where 
		([A].[parkingGuid] = @parkingGuid)		
		and 
		(
				(
					L.[Contractkind] = 5
					and	(
							([FromDate] <= @Date1 )
						 or ([FromDate] <= @Date2 )
						)
				)
				or 
				(
					L.[Contractkind] = 4
					and	([ContractFinish] = 0 )
				)

			)
			

GO
/****** Object:  StoredProcedure [dbo].[PrcTestRentShopFromAccumulateShop]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcTestRentShopFromAccumulateShop]
(
	@ContractGuid uniqueidentifier = 'EFAF9774-48B8-4680-BE63-6B3D9112271A',
	@ShopGuid uniqueidentifier = '90DBB8C2-DFC0-4E6F-86FD-0D8ECEC5E607',
	@Date1 DateTime = '1/1/2010',
	@Date2 DateTime = '10/1/2010'
)
  
as
	Select
		[L].*,
		Case when [ContractFinish] = 0 then [ToDate] else [ContractFinishDate]  end as [EndDate]
	into #Contract
	From
		[LeaseApartment] [L]
		inner join [AccumulateShop] [A] on [A].[ParentGuid] = [L].[ApartmentGuid]
	where 
		([A].[ShopGuid] = @ShopGuid)		
		and ([L].[Guid] <> @ContractGuid)

--	Select * from #Contract
		
	Select 
		[L].[Number],
		[T].[Name] as [ContractName],
		[L].[FromDate],
		[L].[ToDate],
		[L].[Leasekind],
		[L].[ApartmentGuid],
		[L].[Guid]
	From 
		#Contract [L] 
		inner join [ContractType] [T] On [T].[Guid] = [L].[TypeGuid]
		inner join [AccumulateShop] [A] on [A].[ParentGuid] = [L].[ApartmentGuid]
	where 
		([A].[ShopGuid] = @ShopGuid)		
		and 
		(
				(
					[Leasekind] = 3
					and	(
							([FromDate] <= @Date1 )
						 or ([FromDate] <= @Date2 )
						)
				)
				or 
				(
					[Leasekind] = 1
					and	([ContractFinish] = 0)
				)

			)
			

GO
/****** Object:  StoredProcedure [dbo].[PrcTestShopUsed]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcTestShopUsed]
(
	@ShopGuid uniqueidentifier = 'FAC0771A-ABC6-4D88-BC6B-DA13C5110A91',
	@Date DateTime = '10/1/2008'
)
  
as
	Select 
		[L].[Number],
		[T].[Name] as [ContractName],
		[L].[FromDate],
		[L].[ToDate],
		[L].[Leasekind],
		[L].[Guid]
	From 
		[LeaseApartment] [L] 
		inner join [ContractType] [T] On [T].[Guid] = [L].[TypeGuid]
	where 
		([ApartmentGuid] = @ShopGuid)
		and (
				(
					(
						([FromDate] <= @Date )
					)
				and ( [Leasekind] = 3 )
				)
				or 
				(
					(
					   (@Date between [FromDate] and [ToDate])
                     )
                	and ([Leasekind] = 0 or [Leasekind] = 1)
				)
			)
			and [ContractFinish] = 0
			

GO
/****** Object:  StoredProcedure [dbo].[PrcTestShopUsed2]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcTestShopUsed2]
(
	@MotherShopGuid uniqueidentifier = '773E9079-47D2-48E4-BF75-EB5EE596ACEC',
	@Date1 DateTime = '10/1/2007',
	@Date2 DateTime = '10/1/2009'
)
  
as

	Select
		[L].*,
		Case when [ContractFinish] = 0 then [ToDate] else [ContractFinishDate]  end as [EndDate]
	into #Contract
	From
		[LeaseApartment] [L]
		inner join [AccumulateShop] [A] on [A].[ShopGuid] = [L].[ApartmentGuid]
	where 
		([A].[ParentGuid] = @MotherShopGuid)		

	Select 
		[L].[Number],
		[T].[Name] as [ContractName],
		[L].[FromDate],
		[L].[ToDate],
		[L].[Leasekind],
		[L].[ApartmentGuid],
		[L].[Guid]
	From 
		[#Contract] [L] 
		inner join [ContractType] [T] On [T].[Guid] = [L].[TypeGuid]
		inner join [AccumulateShop] [A] on [L].[ApartmentGuid] = [A].[ShopGuid]
	where 
		([A].[ParentGuid] = @MotherShopGuid)		
		and 
		(
				(
					[Leasekind] = 3
					and	(
							([FromDate] <= @Date1 )
						 or ([FromDate] <= @Date2 )
						)
				)
				or 
				(
					[Leasekind] = 1
					and	([ContractFinish] = 0 )
				)

			)
			

GO
/****** Object:  StoredProcedure [dbo].[PrcTestvwOldYearEntryFound]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[PrcTestvwOldYearEntryFound]
 
as
	
	IF  not EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[vwOldYearEntryFound]'))
	begin
		--Delete OldYearConfig
		
		exec DropObject 'vwOldYearEntry'
		
		exec [dbo].[PrcCreateoldYearView]
	end
	

GO
/****** Object:  StoredProcedure [dbo].[PrcTrace]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcTrace]
(
	@UserGuid uniqueidentifier = 0x0,
	@HostName Varchar(256) = '',
	@CardName Varchar(256) = 'ÚÞæÏ ÇáÔÞÞ Çæ ÇáãÍáÇÊ',
	@FieldName Varchar(256) = '',
	@CardNumber int = 0,
	@CkDate bit = 1,
	@Date1 DateTime = '1/1/2007',
	@Date2 DateTime = '1/1/2016'
)
  
as
	Select 
		D.*,
		D.Date as [Time] ,
		Cast(0 as int) as [CardNumber],
		Cast('' as varchar(256)) as [TypeName],
		Cast(0x0 as uniqueidentifier) as [TypeGuid]
	into #PrcTraceRs
	From 
		[vwTraceDetail] D
	where
		(D.userGuid = @UserGuid or @UserGuid = 0x0)
		and (D.hostName = @HostName or @HostName = '')
		and (D.CardName = @CardName or @CardName = '')
		and (D.FieldName = @FieldName or @FieldName = '')
		and (dbo.fnDateOnly(D.Date) between @Date1 and @Date2 or @CkDate = 0)
		
	update #PrcTraceRs 
	Set 
		[CardNumber] = S.Number,
		[TypeName] = S.TypeName,
		[TypeGuid] = S.TypeGuid
	from
		 #PrcTraceRs R
		 inner join vwAllContract S on S.Guid = R.parentGuid


	update #PrcTraceRs 
	Set 
		[CardNumber] = S.Number,
		[TypeName] = S.Name
	from
		 #PrcTraceRs R
		 inner join vwbuilding S on S.Guid = R.parentGuid

	update #PrcTraceRs 
	Set 
		[CardNumber] = S.Number
	from
		 #PrcTraceRs R
		 inner join HEntry S on S.Guid = R.parentGuid

	update #PrcTraceRs 
	Set 
		[CardNumber] = S.Number,
		[TypeName] = t.Name,
		[TypeGuid] = S.TypeGuid
	from
		 #PrcTraceRs R
		 inner join Secondary_Entry S on S.Guid = R.parentGuid
		 inner join [EntryType] T on T.Guid = S.TypeGuid

	update #PrcTraceRs 
	Set 
		[CardNumber] = S.Number,
		[TypeName] = s.TypeName,
		[TypeGuid] = S.TypeGuid
	from
		 #PrcTraceRs R
		 inner join vwchecks S on S.Guid = R.parentGuid
		 
	--ÍÐÝ ÃäãÇØ ÇáÚÞæÏ ÇáÛíÑ ãÍÏÏÉ
	Delete #PrcTraceRs
	From
		#PrcTraceRs T
		left join [Resource] R on R.Guid = T.TypeGuid and Kind = 2 and R.Spid = @@SPID
	where
		(R.Guid is Null)
		and (
				T.ParentTbl = 'LeaseApartment'
				or T.ParentTbl = 'ParkingContract'
				or T.ParentTbl = 'LandContract'
			)

	--ÍÐÝ ÃäãÇØ ÇáÓäÏÇÊ ÇáÛíÑ ãÍÏÏÉ
	Delete #PrcTraceRs
	From
		#PrcTraceRs T
		left join [Resource] R on R.Guid = T.TypeGuid and Kind = 1 and R.Spid = @@SPID
	where
		(R.Guid is Null)
		and (
				T.ParentTbl = 'EntryType'
			)

	--ÍÐÝ ÃäãÇØ ÇáÔíßÇÊ ÇáÛíÑ ãÍÏÏÉ
	Delete #PrcTraceRs
	From
		#PrcTraceRs T
		left join [Resource] R on R.Guid = T.TypeGuid and Kind = 3 and R.Spid = @@SPID
	where
		(R.Guid is Null)
		and (
				T.ParentTbl = 'Checks'
			)

	if @CardNumber <> 0
	delete #PrcTraceRs where CardNumber <> @CardNumber
	
	Select * from #PrcTraceRs
	order by Date		
	

GO
/****** Object:  StoredProcedure [dbo].[prcTracedetail]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[prcTracedetail]
(
	@Guid uniqueidentifier = '0F8668F1-88DA-4FB8-8A0C-C1DCAA8FF599'
)
  
as
	Select 
		dbo.SC([Caption]) as [Caption],

		case when isnull([Tbl],'') <> '' then (dbo.[FnGetTraceValue] ([Tbl], [New])) 
		else [New]
		end as [new],

		case when isnull([Tbl],'') <> '' then (dbo.[FnGetTraceValue] ([Tbl], [Old])) 
		else [old]
		end as [Old]

	from 
		[Tracedetail]
	where
		ParentGuid = @Guid

GO
/****** Object:  StoredProcedure [dbo].[PrcTrailBalance]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcTrailBalance]
(
	@AccountGuid [uniqueidentifier]= 0x0
	,@BranchGuid uniqueidentifier = 0x0
	,@CostGuid [uniqueidentifier]= 0x0
	,@Level int = 0
	,@ShowEmptyBal Bit = 0
	,@ShowBalancedAc Bit = 0
	,@ShowMainAccount Bit = 1
	,@ShowAcCust Bit = 1
	,@CurrencyGuid [uniqueidentifier] = 0x0
	,@CurrencyVal Float = 1
	,@IsPosted Bit = 1
	,@IsNotPosted Bit = 1
	,@Date1 DateTime = '1/1/2011'
	,@Date2 DateTime = '12/30/2011'
	,@ShowOldBalance Bit = 0
    ,@ShowwithSum Bit = 0
    ,@ShowWithBalance Bit = 1
	,@ShowDebit Bit = 0
    ,@ShowCredit Bit = 1
	,@CheckDate Bit = 0
)
  
as
	Set Nocount on 
	if @CurrencyVal = 0
	Set @CurrencyVal = 1
	
	--ÇáÍÓÇÈÇÊ
	Select * Into [dbo].#ListAccount From [dbo].[fnGetAccountList](@AccountGuid) [Ac] 
	Select * Into [dbo].#ListCost From [dbo].[fnGetCostList](@CostGuid)
	
	-- ßÇãá ÇáÍÓÇÈÇÊ
	Select 
		[Ac2].[Name] as [AccountName],
		[Ac2].[Code] as [AccountCode]
		,[Ac].[Level]
		,[Ac].[Path]
		,[Ac2].[Guid]
		,[Ac2].[ParentGuid]
		,Cast(0 as int) as [AcNSons]--Isnull([SAc].[AcNSons],0) as [AcNSons]
		into #Ac
	From
		[dbo].#ListAccount [Ac] 
		inner join [vwAccount] [Ac2] on [Ac2].[Guid] = [Ac].[Guid]
	where
		[Type] = 0
		
	Select 
		Count(Number) as [Sons] 
		,[ParentGuid] 
	Into #AcSons
	From 
		[Account] [SAc] 
	Group By
		[ParentGuid]
							
	update #Ac Set [AcNSons] = S.[Sons]
	From
		#ac ac
		inner join #AcSons S on S.ParentGUID = ac.Guid

--	Select * from #Ac Order by [Path]
	--return

	-- ÍÑßÇÊ ÇáÞíæÏ
	Select 
		[Ac].[Guid] as [AcGuid]
		,Sum([En].[Debit]*
			Case when [En].[CurrencyGuid] = @CurrencyGuid then 1 
			else [En].[CurrencyVal] / @CurrencyVal end
			) as [Debit]
		,Sum([En].[Credit]*
			Case when [En].[CurrencyGuid] = @CurrencyGuid then 1 
			else [En].[CurrencyVal] / @CurrencyVal end
			) as [Credit]
	into #Entry
	from 
		[DEntry] [En]
		inner Join [vwEntry] [M] on [M].[Guid] = [En].[ParentGuid]
		inner Join [dbo].#ListAccount  [Ac] on [Ac].[Guid] = [En].[AcGuid]
		left Join  [dbo].#ListCost [Co] on [Co].[Guid] = [En].[CostGuid]
	where 
		([M].[Date] between @Date1 And @Date2 or @CheckDate = 0)
		and ( [Co].[Guid] Is Not Null or @CostGuid = 0x0)
		and ([M].[BranchGuid] = @BranchGuid or @BranchGuid = 0x0)
		and ([En].[IsVisible] = 1 or [En].[CurrencyGuid] = @CurrencyGuid)
		and (
				([M].[IsPosted] = 1 and @IsPosted = 1)
				or ([M].[IsPosted] = 0  and @IsNotPosted = 1)
			)
	Group By
		[Ac].[Guid]
		
	Create Index IDX_TEntry_AcGuid on #Entry ([AcGuid])
	
--	Select * from #Entry	
	--

	-- ÇáÑÕíÏ ÇáÓÇÈÞ
	Select 
		[Ac].[Guid] as [AcGuid]
		,Sum([En].[Debit]*
			Case when [En].[CurrencyGuid] = @CurrencyGuid then 1 
			else [En].[CurrencyVal] / @CurrencyVal end
			) as [Debit]
		,Sum([En].[Credit]*
			Case when [En].[CurrencyGuid] = @CurrencyGuid then 1 
			else [En].[CurrencyVal] / @CurrencyVal end
			) as [Credit]
	into #OldBalance
	from 
		[DEntry] [En]
		inner Join [vwEntry] [M] on [M].[Guid] = [En].[ParentGuid]
		inner Join [dbo].#ListAccount [Ac] on [Ac].[Guid] = [En].[AcGuid]
		left Join [dbo].#ListCost [Co] on [Co].[Guid] = [En].[CostGuid]
	where 
		([M].[Date] < @Date1 and  @CheckDate = 1)
		and ( [Co].[Guid] Is Not Null or @CostGuid = 0x0)
		and ([M].[BranchGuid] = @BranchGuid or @BranchGuid = 0x0)
		and ([En].[IsVisible] = 1 or [En].[CurrencyGuid] = @CurrencyGuid)
		and (
				([M].[IsPosted] = 1 and @IsPosted = 1)
				or ([M].[IsPosted] = 0  and @IsNotPosted = 1)
			)
	Group By 
		[Ac].[Guid]
 	Having
 		(Sum([En].[Debit]) <> 0)
 		or (Sum([En].[Credit]) <> 0)
	
	Create Index IDX_OldBalance_AcGuid on #OldBalance ([AcGuid])

--	Select * from #OldBalance	
	--	

	Select 
		[Ac].[AccountName],
		[Ac].[AccountCode]
		,[Ac].[Level]
		,[E].[Debit]
		,[E].[Credit]
		,[B].[Debit] as [OldDebit]
		,[B].[Credit] as [OldCredit]
		,[Ac].[Path]
		,[Ac].[Guid] as [AcGuid]
		,[Ac].[ParentGuid]
		,[Ac].[AcNSons]
	Into #Res1
	From
		#Ac	[Ac]
		left join #Entry [E] on [E].[AcGuid] = [Ac].[Guid]
		left join #OldBalance [B] on [B].[AcGuid] = [Ac].[Guid]

	

	Create Index IDX_TRes1_AcGuid on #Res1 ([AcGuid])
	
--	update #Res1 Set [Debit] = 0 where [Debit] is null

	Declare @AcLevel int
	SET @acLevel = (SELECT MAX([Level]) FROM [#Res1]) 
	WHILE @acLevel >= 0  
	BEGIN  
		print '@acLevel'
		print @acLevel
		UPDATE [#Res1] SET  
			[Debit] 		= isnull([SumDebit],0)
			,[Credit]	 	= isnull([SumCredit],0)
			,[OldDebit]		= isnull([SumOldDebit],0) 
			,[OldCredit]	= isnull([SumOldCredit],0)
			FROM  
				[#Res1] AS [Father] INNER JOIN (  
					SELECT 
						[ParentGuid] 
						,isnull(Sum([Debit]),0)			as  [SumDebit]
						,isnull(Sum([Credit]),0)		as  [SumCredit]
						,isnull(Sum([OldDebit]),0)		as  [SumOldDebit]
						,isnull(Sum([OldCredit]),0)		as  [SumOldCredit]
					FROM 
						[#Res1]  
					WHERE  
						[Level] = @acLevel 
					GROUP BY 
						[ParentGuid] 
					) AS [Sons] 
				ON [Father].[acGUID] = [Sons].[ParentGuid] 
		Print '@@Rowcount'
		Print @@Rowcount
		SET @acLevel = @acLevel - 1 
	End
	
--	Select * from #Res1

	Create Table #EndRes
	(
		[AccountName] Varchar(256),
		[AccountCode] Varchar(256),
		[SumOldDebit] Float,
		[SumOldCredit] Float,
		[OldBalanceDebit] Float,
		[OldBalanceCredit] Float,
		[SumPeriodDebit]Float,
		[SumPeriodCredit]Float,
		[BalancePeriodDebit]Float,
		[BalancePeriodCredit]Float,
		[AcGuid] uniqueidentifier,
		[ParentGuid]uniqueidentifier,
		[Path] Varchar(256),
		[ACNSons] int,
		[Level] Varchar(256)
	)

	insert into #EndRes
	Select 
		[AccountName],
		[AccountCode],
		isNull([OldDebit],0) as [SumOldDebit],
		isNull([OldCredit],0) as [SumOldCredit],
		Case when Isnull([OldDebit],0) > isnull([OldCredit],0) then Isnull([OldDebit],0) - isnull([OldCredit],0) else 0 end as [OldBalanceDebit],
		Case when Isnull([OldDebit],0) < isnull([OldCredit],0) then Isnull([OldCredit],0) - isnull([OldDebit],0) else 0 end as [OldBalanceCredit],
		isNull([Debit],0) as [SumPeriodDebit],
		isNull([Credit],0) as [SumPeriodCredit],
		Case when Isnull([Debit],0) > isnull([Credit],0) then Isnull([Debit],0) - isnull([Credit],0)  else 0 end as [BalancePeriodDebit],
		Case when Isnull([Debit],0) < isnull([Credit],0) then isnull([Credit],0) - Isnull([Debit],0)  else 0 end as [BalancePeriodCredit],
		[AcGuid],
		[ParentGuid],
		[Path],
		[ACNSons],
		[Level]
	from 
		#Res1
	Order By
		[Path]
	
	Insert Into #EndRes
	Select 
		dbo.sc('ÇáãÌãæÚ') as [AccountName],
		'' as AccountCode,
		Sum([SumOldDebit]),
		Sum([SumOldCredit]),
		Sum([OldBalanceDebit]),
		Sum([OldBalanceCredit]),
		Sum([SumPeriodDebit]),
		Sum([SumPeriodCredit]),
		Sum([BalancePeriodDebit]),
		Sum([BalancePeriodCredit]),
		0x0 as [AcGuid],
		0x0 as [ParentGuid],
		Max([Path]) + 'Z',
		-1 as [ACNSons],
		0 as [Level]
	From
		#EndRes
	where
		[AcNSons] = 0

	--Select Level, * from #EndRes

	-- ÇáÍÓÇÈÇÊ ÇáÑÆíÓíÉ
 	if @ShowMainAccount = 0 
 	delete from #EndRes
 	where (AcNSons > 0 )

	--ÇáÍÓÇÈÇÊ ÇáÝÇÑÛÉ
	if @ShowEmptyBal = 0 
	delete from #EndRes
	where (isnull([SumOldDebit],0) = 0  and isnull([SumOldCredit],0) = 0) and(isnull([SumPeriodDebit],0) = 0  and isnull([SumPeriodCredit],0) = 0)
	and Level >= 1

	--ÇáÍÓÇÈÇÊ ÇáãÑÕÏÉ 
 	if @ShowBalancedAc = 0 
 	delete from #EndRes
 	where 
 			Round((isnull([SumOldDebit],0) + isnull([SumPeriodDebit],0) ),3) = Round(( isnull([SumOldCredit],0) + isnull([SumPeriodCredit],0) ),3)
 			and 
 			Round((isnull([SumOldDebit],0) + isnull([SumPeriodDebit],0) ),3)> 0	
 			
 	and (AcNSons = 0 )

	if @ShowAcCust = 0
 	begin
 		Declare @AcCust uniqueidentifier
 		Set @AcCust = (Select Value From [DMD_Const] where VName = 'CuAccountParent')
		
		--Select * from  #EndRes where [AcGuid] = @AcCust

 		if isnull(@AcCust,0x0) <> 0x0
 		begin
 			Select * into #fnGetAccountList1 from [dbo].[fnGetAccountList](@AcCust)
 			
 			Delete #EndRes
 			From
 				#EndRes R
 				inner join [dbo].[#fnGetAccountList1] [Ac] on [Ac].[Guid] = [R].[AcGuid]
 			where
				[R].[AcGuid] <> @AcCust
				
			update #EndRes set ACNSons = 0 where [AcGuid] = @AcCust
			
		end
 	end
 
 	if @ShowAcCust = 0
 	begin
 		Declare @AcCust2 uniqueidentifier
 		Set @AcCust2 = (Select Value From [DMD_Const] where VName = 'ImporterAccountParent')
 
 		if isnull(@AcCust2,0x0) <> 0x0
 		begin
			Select * into #fnGetAccountList2 from [dbo].[fnGetAccountList](@AcCust2)

 			Delete #EndRes
 			From
 				#EndRes R
 				inner join [dbo].[#fnGetAccountList2] [Ac] on [Ac].[Guid] = [R].[AcGuid]
 			where
 				[R].[AcGuid] <> @AcCust2
	 			
 			update #EndRes set ACNSons = 0 where [AcGuid] = @AcCust2
 		end
 		
 	end
 
 	if @ShowAcCust = 0
 	begin
 		Declare @AcCust3 uniqueidentifier
 		Set @AcCust3 = (Select Value From [DMD_Const] where VName = 'InsuranceAccountParent')
 
		
		
 		if isnull(@AcCust3,0x0) <> 0x0
 		begin
 			Select * into #fnGetAccountList3 from [dbo].[fnGetAccountList](@AcCust3)
 			
 			Delete #EndRes
 			From
 				#EndRes R
 				inner join [dbo].[#fnGetAccountList3] [Ac] on [Ac].[Guid] = [R].[AcGuid]
 			where
 				[R].[AcGuid] <> @AcCust3
 				
 			update #EndRes set ACNSons = 0 where [AcGuid] = @AcCust3
 		end
 	end
 
	Select 
		[AccountName],
		[AccountCode],
		[SumOldDebit],
		[SumOldCredit],
		[OldBalanceDebit],
		[OldBalanceCredit],
		[SumPeriodDebit],
		[SumPeriodCredit],
		[BalancePeriodDebit],
		[BalancePeriodCredit],
		isnull([SumOldDebit],0) + isnull([SumPeriodDebit], 0) as [SumEndDebit],
		isnull([SumOldCredit],0) + isnull([SumPeriodCredit], 0) as [SumEndCredit],
		
		Case when ACNSons <> -1 then 
			Case when (isnull([SumOldDebit],0) + isnull([SumPeriodDebit], 0)) > (isnull([SumOldCredit],0) + isnull([SumPeriodCredit], 0)) then
					  (isnull([SumOldDebit],0) + isnull([SumPeriodDebit], 0)) - (isnull([SumOldCredit],0) + isnull([SumPeriodCredit], 0))
			else 0
			end 
		else
			0
		end
		as [BalanceEndDebit],
		
		Case when ACNSons <> -1 then 
			Case when (isnull([SumOldDebit],0) + isnull([SumPeriodDebit], 0)) < isnull([SumOldCredit],0) + isnull([SumPeriodCredit], 0) then
					  (isnull([SumOldCredit],0) + isnull([SumPeriodCredit], 0)) - (isnull([SumOldDebit],0) + isnull([SumPeriodDebit], 0))
			else 0
			end 
		else
			0
		end
		as [BalanceEndCredit],
		
		[AcGuid],
		[ParentGuid],
		[Path],
		[ACNSons],
		[Level]
	Into #R
	from 
		#EndRes
	
	update #r Set 
	[BalanceEndDebit] = IsNull((Select Sum([BalanceEndDebit]) From #R where ACNSons = 0), 0),
	[BalanceEndCredit] = IsNull((Select Sum([BalanceEndCredit]) From #R where ACNSons = 0), 0)
	where
		ACNSons = -1
		
 	--ÇáãÓÊæì
 	delete from #R
 	where ([level] >= @Level and @Level <> 0)

	Select 
		* 
	from 
		#R
  	where	
 		(IsNull([BalancePeriodDebit],0) <> 0 and @ShowWithBalance = 1 and @ShowDebit = 1 or @ShowEmptyBal = 1)
 		Or
 		(isNull([BalancePeriodCredit],0) <> 0 and @ShowWithBalance = 1 and @ShowCredit = 1 or @ShowEmptyBal = 1)
 		or 
 		IsNull([Level],0) = 0
 		or @ShowWithBalance = 0
		or @ShowBalancedAc = 1
	Order By
		[Path]


GO
/****** Object:  StoredProcedure [dbo].[PrcTrailBalanceCost]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcTrailBalanceCost]
(
	@AccountGuid [uniqueidentifier]= '3D2B933E-C93D-49E8-A9C0-8DC4FAA91850'
	,@BranchGuid uniqueidentifier = 0x0
	,@CostGuid [uniqueidentifier]= '85B8AA6F-40B0-4949-807A-B70A5B4C41C7'
	,@Level int = 5
	,@ShowEmptyBal Bit = 1
	,@CurrencyGuid [uniqueidentifier] = 0x0
	,@CurrencyVal Float = 1
	,@IsPosted Bit = 1
	,@IsNotPosted Bit = 1
	,@Date1 DateTime = '4/1/2008'
	,@Date2 DateTime = '12/30/2012'

)
  
as
	if @CurrencyVal = 0
	Set @CurrencyVal = 1

	Select * into #fnGetAccountList from [dbo].[fnGetAccountList](@AccountGuid)
	Select * into #fnGetCostList from [dbo].[fnGetCostList](@CostGuid)

	-- ßÇãá ãÑÇßÒ ÇáßáÝ
	Select 
		[Co2].[Code]+'-'+[Co2].[Name] as [CostName]
		,[Co].[Level]
		,[Co].[Path]
		,[Co2].[Guid]
		,[Co2].[ParentGuid]
		,Isnull([SCo].[CoNSons],0) as [CoNSons]
		into #Co
	From
		[dbo].[#fnGetCostList] [Co] 
		inner join [vwCost] [Co2] on [Co2].[Guid] = [Co].[Guid]
		left join (Select 
						Count(Number)as [CoNSons] 
						,[ParentGuid] 
					From 
						[Cost] [SCo] 
					Group By
						[ParentGuid]					
				)[SCo] on [SCo].[ParentGuid] = [Co2].[Guid]

	-- ßÇãá ÇáÍÓÇÈÇÊ
	
	Select 
		[Ac2].[Code]+'-'+[Ac2].[Name] as [AccountName]
		,[Ac].[Level]
		,[Ac].[Path]
		,[Ac2].[Guid]
		,[Ac2].[ParentGuid]
		,Isnull([SAc].[AcNSons],0) as [AcNSons]
		into #Ac
	From
		[dbo].[#fnGetAccountList] [Ac] 
		inner join [vwAccount] [Ac2] on [Ac2].[Guid] = [Ac].[Guid]
		left join (Select 
						Count(Number)as [AcNSons] 
						,[ParentGuid] 
					From 
						[Account] [SAc] 
					Group By
						[ParentGuid]					
				)[SAc] on [SAc].[ParentGuid] = [Ac2].[Guid]
	where
		[Type] = 0

--	Select * from #Ac Order by [Path]
	--

	-- ÍÑßÇÊ ÇáÞíæÏ
	Select 
		[Co].[Guid] as [CoGuid],
		[Ac].[Guid]	as AcGuid
		,Sum([En].[Debit]*
			Case when [En].[CurrencyGuid] = @CurrencyGuid then 1 
			else [En].[CurrencyVal] / @CurrencyVal end
			) as [Debit]
		,Sum([En].[Credit]*
			Case when [En].[CurrencyGuid] = @CurrencyGuid then 1 
			else [En].[CurrencyVal] / @CurrencyVal end
			) as [Credit]
	into #Entry
	from 
		[DEntry] [En]
		inner Join [vwEntry] [M] on [M].[Guid] = [En].[ParentGuid]
		inner Join [dbo].[#fnGetAccountList] [Ac] on [Ac].[Guid] = [En].[AcGuid]
		inner Join [dbo].[#fnGetCostList] [Co] on [Co].[Guid] = [En].[CostGuid]
	where 
		([M].[Date] between @Date1 And @Date2)
		and ( [Co].[Guid] Is Not Null)
		and ([M].[BranchGuid] = @BranchGuid or @BranchGuid = 0x0)
		and (
				([M].[IsPosted] = 1 and @IsPosted = 1)
				or ([M].[IsPosted] = 0  and @IsNotPosted = 1)
			)
	Group By
		[Co].[Guid], [Ac].[Guid]
	
	--Select E.* from #Entry E	inner join #Co C on C.Guid = e.CoGuid
	
	--

	-- ÇáÑÕíÏ ÇáÓÇÈÞ
	Select 
		[Co].[Guid] as [CoGuid]
		,Sum([En].[Debit]*
			Case when [En].[CurrencyGuid] = @CurrencyGuid then 1 
			else [En].[CurrencyVal] / @CurrencyVal end
			) as [Debit]
		,Sum([En].[Credit]*
			Case when [En].[CurrencyGuid] = @CurrencyGuid then 1 
			else [En].[CurrencyVal] / @CurrencyVal end
			) as [Credit]
	into #OldBalance
	from 
		[DEntry] [En]
		inner Join [vwEntry] [M] on [M].[Guid] = [En].[ParentGuid]
		inner Join [dbo].[#fnGetAccountList] [Ac] on [Ac].[Guid] = [En].[AcGuid]
		inner Join [dbo].[#fnGetCostList] [Co] on [Co].[Guid] = [En].[CostGuid]
	where 
		([M].[Date] < @Date1)
		and ([M].[BranchGuid] = @BranchGuid or @BranchGuid = 0x0)
		and (
				([M].[IsPosted] = 1 and @IsPosted = 1)
				or ([M].[IsPosted] = 0  and @IsNotPosted = 1)
			)
	Group By [Co].[Guid]
	Having
		(Sum([En].[Debit]) <> 0)
		or (Sum([En].[Credit]) <> 0)
	
--	Select * from #OldBalance	

	Select 
		[Co].[CostName]
		,[Co].[Level]
		,[E].[Debit]
		,[E].[Credit]
		,[B].[Debit] as [OldDebit]
		,[B].[Credit] as [OldCredit]
		,[Co].[Path]
		,[Co].[Guid] as [CoGuid]
		,[Co].[ParentGuid]
		,[Co].[CoNSons]
	Into #Res1
	From
		#Co	[Co]
		left join #Entry [E] on [E].[CoGuid] = [Co].[Guid]
		left join #OldBalance [B] on [B].[CoGuid] = [Co].[Guid]
	
--	Select * from #Res1

	Declare @AcLevel int
	SET @acLevel = (SELECT MAX([Level]) FROM [#Res1]) 
	WHILE @acLevel >= 0  
	BEGIN  
		print '@acLevel'
		print @acLevel
		UPDATE [#Res1] SET  
			[Debit] 		= [Debit] + isnull([SumDebit],0)
			,[Credit]	 	= [Credit] + isnull([SumCredit],0)
			,[OldDebit]		= [OldDebit] + isnull([SumOldDebit],0) 
			,[OldCredit]	= [OldCredit] + isnull([SumOldCredit],0)
			FROM  
				[#Res1] AS [Father] INNER JOIN (  
					SELECT 
						[ParentGuid] 
						,isnull(Sum([Debit]),0)			as  [SumDebit]
						,isnull(Sum([Credit]),0)		as  [SumCredit]
						,isnull(Sum([OldDebit]),0)		as  [SumOldDebit]
						,isnull(Sum([OldCredit]),0)		as  [SumOldCredit]
					FROM 
						[#Res1]  
					WHERE  
						[Level] = @acLevel 
					GROUP BY 
						[ParentGuid] 
					) AS [Sons] 
				ON [Father].[CoGUID] = [Sons].[ParentGuid] 
		Print '@@Rowcount'
		Print @@Rowcount
		SET @acLevel = @acLevel - 1 
	End

	--Select * from #Res1
	--ÇáÍÓÇÈÇÊ ÇáÝÇÑÛÉ
	if @ShowEmptyBal = 0 
	delete from #Res1
	where ([Debit] is null and [Credit] is null)


	Insert Into #Res1
	Select 
		dbo.SC('ÇáãÌãæÚ') as [AccountName]
		,0 as [Level]
		,Sum([Debit])
		,Sum([Credit])
		,Sum([OldDebit])
		,Sum([OldCredit])
		,Max([Path]) + 'Z'
		,0x0 as [AcGuid]
		,0x0 as [ParentGuid]
		,1 as [AcNSons]
	From
		#Res1
	where
		Level = 0

	--ÇáãÓÊæì
	delete from #Res1
	where ([level] >= @Level and @Level <> 0)

	Select 
		*,
		Case when Isnull([Debit],0) >  Isnull([Credit],0) then (Isnull([Debit],0) -  Isnull([Credit],0)) end as [BalanceDebit],
		Case when Isnull([Debit],0) <  Isnull([Credit],0) then (Isnull([Credit],0))- (Isnull([Debit],0))  end as [BalanceCredit]
	from 
		#Res1 
	Order by [Path]

	

GO
/****** Object:  StoredProcedure [dbo].[PrcTransfer_Checks]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[PrcTransfer_Checks]
(
	@RoKind int = 2,
	@ToDataBaseName Varchar(256) = 'Q17',
	@UntilDate Datetime = '2016-12-31',
	@BeginDate Datetime = '2017-1-1',
	@RoundContractWithCheckNotCollection bit = 1
)
  
as
	Set nocount on
	if (@RoKind = 1) Return --äÞá ÈØÇÞÇÊ ÝÞØ
	
	
	Declare @V NVarchar(Max)
		
		Set @V = 
		'	inner join [vwChecksCollectionState] [s] on [S].[CheckGuid] = [Tb].[Guid] --
		where
			(
				(
				 (
					([S].[IsCollection] = 0 )
					and (
							([S].[IsReturned] = 1) and (IsNull([S].[Finished],0) = 0) 
							or [S].[IsReturned] = 0
						)
				)
				or (
					([S].[IsReturned] = 1) and (IsNull([S].[Finished],0) = 0) 
					)
				)
				and ([S].[IsEndorsement] = 0)
			)' 	
			
		if (@RoKind = 2) --ÊÏæíÑ ãÚ äÞá ÇáÚãáíÇÊ ÇááÇÍÞÉ
		begin
			Set @V = @v + '
			or (Date >='+''''+CAST(@UntilDate as varchar(255))+''')
			or (Guid in (Select [CheckGuid] From vwChecksCollection where Date >='+''''+CAST(@UntilDate as varchar(255))+'''))
			or (Guid in (Select [CheckGuid] From ChecksPartialCollection where [Date] >='+''''+CAST(@UntilDate as varchar(255))+'''))'
		end

		if @RoundContractWithCheckNotCollection = 1 --äÞá ÇáÚÞæÏ ÇáÊí áåÇ ÇæÑÇÞ ãÇáíÉ áã ÊÍÕá
		Set @V = @v + '
		or ([Tb].Guid in (
			Select Distinct
				LC.ParentGuid 
			From
				LinkCheckContract LC
				inner join vwChecksCollectionState  Cs on cs.ContractGuid = lc.ContractGuid
			where
				IsCollection = 0))'


		/*
		Set @V = @v + '
		or ([Tb].ContractGuid in (
			Select 
				Distinct ContractGuid
			From 
					vwChecksCollectionState
			where
				IsCollection = 0))'
		*/

		Print '2'
		EXEC PrcTransferTable  'Checks',@ToDataBaseName,@V
 			
 		--exec('select * from '+@ToDataBaseName+'..Checks')

		Set @V = 'Alter Table '+@ToDataBaseName+'..[Checks] disable Trigger all'
		print @V 
		exec(@V)
		
		--ÊÚÏíá ÚáÇãÉ ÇáÔíßÇÊ æ ÇáÓäÏÇÊ æ ÇáÚÞæÏ ÇäåÇ ãÏæÑÉ
		Set @V = '
		UpDate '+@ToDataBaseName+'..[Checks] Set [IsRounded] = 1 where Date <'+''''+CAST(@UntilDate as varchar(255))+''''
		exec(@V)

		Set @V = 'Update '+@ToDataBaseName+'..[Checks] Set Date = '''+CAST(@BeginDate as VARchar(20))+''' where [IsRounded] = 1'
		print @V 
		exec(@V)

		
 		--Set @V = '
 		--Update '+@ToDataBaseName+'..[Checks] Set [ContractGuid] = Null'
 		--exec(@V)

		--ÊæÒíÚ ÇáÔíßÇÊ Úáì ÇáÚÞæÏ
		Set @V = '
		inner Join '+@ToDataBaseName+'..[Checks] L on L.Guid = [Tb].ParentGuid
		'
		EXEC PrcTransferTable  'LinkCheckContract',@ToDataBaseName, @V
		
		
		--ÇáÍÓÇÈÇÊ ÇáãÊÚÏÏÉ ááÔíßÇÊ
		Set @V = '
		inner Join '+@ToDataBaseName+'..[Checks] L on L.Guid = [Tb].ParentGuid
		inner Join '+@ToDataBaseName+'..[Account] ac on ac.Guid = [Tb].AccountGuid
		inner Join '+@ToDataBaseName+'..[Cost] co on Co.Guid = [Tb].CostGuid
		'
		EXEC PrcTransferTable  'ChecksAccountDetail',@ToDataBaseName, @V
		

		--ÇáÛÇÁ ÍÞá ÇáÚÞÏ ááÚÞæÏ ÇáÊí áã ÊÏæÑ
 		Set @V = '
 		Update '+@ToDataBaseName+'..[Checks] Set [ContractGuid] = Null
		From
			'+@ToDataBaseName+'..[checks] [C]
			left join '+@ToDataBaseName+'..[vwAllContractGuid] [A] on [C].[ContractGuid] = [A].[Guid]
		where
			[A].[Guid] is Null' 
		exec(@V)

		Set @V = 'Alter Table '+@ToDataBaseName+'..[Checks] Enable Trigger all'
		print @V 
		exec(@V)
	 	
	 	
	 	--ÇáÚãáíÇÊ
		Set @V = '
		inner join (Select [Guid] as [CKGuid] From '+@ToDataBaseName+'..[Checks]) [C] on [C].[CKGuid] = [Tb].[CheckGuid]' 
		EXEC PrcTransferTable  'ChecksCollection',@ToDataBaseName,@V

		Set @V = '
		UpDate '+@ToDataBaseName+'..[ChecksCollection] Set [IsRounded] = 1 where Date <'+''''+CAST(@UntilDate as varchar(255))+''''
		exec(@V)
		
		--Set @V = 'Update '+@ToDataBaseName+'..[ChecksCollection] Set Date = '''+CAST(@BeginDate as VARchar(20))+'''
		--where Date < '+''''+CAST(@UntilDate as varchar(255))+''''
		--print @V 
		--exec(@V)

		-- ÇáÊÍÕíáÇÊ ÇáÌÒÆíÉ
		Set @V = '
		inner join (Select [Guid] as [CKGuid] From '+@ToDataBaseName+'..[Checks]) [C] on [C].[CKGuid] = [Tb].[CheckGuid]' 
		EXEC PrcTransferTable  'ChecksPartialCollection',@ToDataBaseName,@V
		
		Set @V = '
		UpDate '+@ToDataBaseName+'..[ChecksPartialCollection] Set [IsRounded] = 1 where Date <'+''''+CAST(@UntilDate as varchar(255))+''''
		exec(@V)
		
		--Set @V = 'Update '+@ToDataBaseName+'..[ChecksPartialCollection] Set Date = '''+CAST(@BeginDate as VARchar(20))+'''
		--where Date < '+''''+CAST(@UntilDate as varchar(255))+''''
		--print @V 
		--exec(@V)
		
		
		Set @V = 'delete '+@ToDataBaseName+'..[Resource]'
		exec(@V)
		
		Set @V = '
		insert into '+@ToDataBaseName+'..[Resource]
		([Guid], [Kind])
		Select Guid, 1 from '+@ToDataBaseName+'..[CheckType]'
		exec (@v)
		
		
	Set @V = '
	exec '+@ToDataBaseName+'..[PrcReNumberCard]
		0, --@Entry
		0, --@FirstEntryNum
		0, --@EntryType
		0x0, --@EntryTypeGuid
		0, --@FirstEntryTypeNum
		1, --@ContractType
		0x0, --@ContractTypeGuid =
		0, --@FirstContractTypeNum
		1, --@CheckType
		0x0, --@CheckTypeGuid 
		0, --@FirstCheckTypeNum
		0, --@Flat
		0, --@Shop
		0, --@Parking
		0, --@Land
		0, --@Villa
		0, --@Account
		0x0, --@ElectricityBillType
		0x0, --@ElectricityBillTypeGuid =
        0 --@Cus
		'
	exec(@V)

		if (@RoKind = 2) --ÊÏæíÑ ãÚ äÞá ÇáÚãáíÇÊ ÇááÇÍÞÉ
		begin
			Set @V = '
			exec '+@ToDataBaseName+'..PrcReCreateCheckEntry 
				@Date1 = 0,
				@Date2 = 0,
				@ActiveDate = 0,
				@Op_Check = 1,
				@Op_Post = 1,
				@Op_Collection = 1,
				@Op_PartCollection = 1,
				@Op_Endorsement = 1,
				@Op_Returned = 1,
				@UpdateCheckwithdefaultaccount = 0
				'
			
			--print @v
			--exec(@V)  Êã äÞáåÇ Çáì ÇáÊÏæíÑ ÇáÚÇã
		end
		
	exec ('Truncate Table '+@ToDataBaseName+'..'+'[TableNumber]')
	

GO
/****** Object:  StoredProcedure [dbo].[PrcTransfer_Entry]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[PrcTransfer_Entry]
(
	@RoKind int = 2,
	@ToDataBaseName Varchar(256) = 'A222',
	@UntilDate Datetime = '2016-12-31',
	@BeginDate Datetime = '2017-1-1'
)
  
as
	--ÊÏæíÑ ßÇãá ÇáãáÝÇÊ áÊÇÑíÎ ãÚíä ãÚ äÞá ÇáÚãáíÇÊ ÇááÇÍÞÉ
	if (@RoKind <> 2) Return
	
	Declare @V Varchar(8000)
	
	Set @V = '
	left join '+@ToDataBaseName+'..Hentry D on D.Guid = tb.Guid
	where 
		IsNull(tb.ParentKind,0) = 0 and tb.Date >'+''''+CAST(@UntilDate as varchar(255))+'''
		and D.Guid is Null	
	'
	
	EXEC PrcTransferTable  'Hentry',@ToDataBaseName, @V, 0

	
	Set @V = '
	inner join '+@ToDataBaseName+'..Hentry S on S.Guid = tb.ParentGuid
	left join '+@ToDataBaseName+'..DEntry D on D.ParentGuid = tb.ParentGuid
	where
		D.Guid is Null'
	
	EXEC PrcTransferTable  'DEntry',@ToDataBaseName, @V, 0

	

	Set @V = '
	exec '+@ToDataBaseName+'..[PrcReNumberCard]
		1, --@Entry
		0, --@FirstEntryNum
		0, --@EntryType
		0x0, --@EntryTypeGuid
		0, --@FirstEntryTypeNum
		1, --@ContractType
		0x0, --@ContractTypeGuid =
		0, --@FirstContractTypeNum
		0, --@CheckType
		0x0, --@CheckTypeGuid 
		0, --@FirstCheckTypeNum
		0, --@Flat
		0, --@Shop
		0, --@Parking
		0, --@Land
		0, --@Villa
		0, --@Account
		0x0, --@ElectricityBillType
		0x0, --@ElectricityBillTypeGuid
        0 --@Cus
		'
	--exec(@V) ãáÛÇå
			

GO
/****** Object:  StoredProcedure [dbo].[PrcTransfer_LandContract]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[PrcTransfer_LandContract]
(
	@RoKind int = 2,
	@ToDataBaseName Varchar(256) = 'MatiEstate',
	@UntilDate Datetime = '2016-12-31',
	@BeginDate Datetime = '2017-1-1',
	@RoundContractWithCheckNotCollection bit = 0
)
  
as
	if (@RoKind = 1) Return --äÞá ÈØÇÞÇÊ ÝÞØ
	
	Declare @V Varchar(8000)
	
	EXEC PrcDeleteTable  'LandContract',@ToDataBaseName

	Set @V = '
			where 
				[ContractFinish] = 0
				or ([Guid] in (Select ContractGuid from lawsuit where [IsEnded] = 0))'
	if (@RoKind = 2) --ÊÏæíÑ ãÚ äÞá ÇáÚãáíÇÊ ÇááÇÍÞÉ
	Set @V = @v + '
	or EditDate >'+''''+CAST(@UntilDate as varchar(255))+''''
				
	if (@RoundContractWithCheckNotCollection = 1) --äÞá ÇáÚÞæÏ ÇáÊí áåÇ ÇæÑÇÞ ãÇáíÉ áã ÊÍÕá
	Set @V = @v + '
	or ([Guid] in (Select ContractGuid from vwChecksCollectionState where [IsCollection] = 0))'

	EXEC PrcTransferTable  'LandContract',@ToDataBaseName, @V
	
	
	Set @V = '
	Alter Table '+@ToDataBaseName+'..[LandContract] Disable Trigger All'
	exec (@v)

	--ÊÚÏíá ÚáÇãÉ ÇáÔíßÇÊ æ ÇáÓäÏÇÊ æ ÇáÚÞæÏ ÇäåÇ ãÏæÑÉ
	Set @V = '
	UpDate '+@ToDataBaseName+'..[LandContract] Set [IsRounded] = 1 where EditDate <='+''''+CAST(@UntilDate as varchar(255))+''''
	exec(@V)

	--ÊÚÏíá ÚáÇãÉ ÇáÔíßÇÊ æ ÇáÓäÏÇÊ æ ÇáÚÞæÏ ÇäåÇ ãÏæÑÉ
	Set @V = '
	UpDate '+@ToDataBaseName+'..[LandContract] Set [IsRounded] = 1 
	From
		'+@ToDataBaseName+'..[LandContract] L
		inner join HEntry H on L.Guid = H.Guid 
	where H.Date <'+''''+CAST(@UntilDate as varchar(255))+''''
	Print(@V)
	exec(@V)

 	Set @V = 'Update '+@ToDataBaseName+'..[LandContract] Set EditDate = '''+CAST(@BeginDate as VARchar(20))+''''
	exec(@V)

	Set @V = '
	Alter Table '+@ToDataBaseName+'..[LandContract] Enable Trigger All'
	exec (@v)

	--ÇáÑÓæã
	Set @V = '
	inner join '+@ToDataBaseName+'..LandContract L on L.Guid = [Tb].[ParentGuid]
	inner join '+@ToDataBaseName+'..Account Ac on Ac.Guid = [Tb].[AccountGuid]
	'
	EXEC PrcTransferTable  'LandContractFee',@ToDataBaseName, @V
	

	Set @V = '
	exec '+@ToDataBaseName+'..[PrcReNumberCard]
		0, --@Entry
		0, --@FirstEntryNum
		0, --@EntryType
		0x0, --@EntryTypeGuid
		0, --@FirstEntryTypeNum
		1, --@ContractType
		0x0, --@ContractTypeGuid =
		0, --@FirstContractTypeNum
		0, --@CheckType
		0x0, --@CheckTypeGuid 
		0, --@FirstCheckTypeNum
		0, --@Flat
		0, --@Shop
		0, --@Parking
		0, --@Land
		0, --@Villa
		0, --@Account
		0x0, --@ElectricityBillType
		0x0, --@ElectricityBillTypeGuid =
        0 --@Cus
		'
	exec(@V)

	--ÕíÇäÉ ÊæáíÏ ÇáÞíæÏ
	Set @V = '
	Delete '+@ToDataBaseName+'..[Resource]'
	exec (@v)
	
	Set @V = '
	insert into '+@ToDataBaseName+'..[Resource]
	([Guid], [Kind])
	Select Guid, 1 from '+@ToDataBaseName+'..ContractType'
	exec (@v)
	
	Set @V = '
	exec '+@ToDataBaseName+'..PrcReCreateContractLandVillaEntry 0, 0, 0, 0, 0,0,0,0'
	--Sql.Add('exec PrcReCreateContractFlatShopEntry :Date1, :Date2, :ActiveDate, :Datewith, :Num1, :Num2, :ActiveNum, :MaxDate');

	exec (@v)



GO
/****** Object:  StoredProcedure [dbo].[PrcTransfer_LeaseApartment]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[PrcTransfer_LeaseApartment]
(
	@RoKind int = 0,
	@ToDataBaseName Varchar(256) = 'Aq11',
	@UntilDate Datetime = '2016-12-31',
	@BeginDate Datetime = '2017-1-1',
	@RoundContractWithCheckNotCollection bit = 0
)
  
as
	Print '---PrcTransfer_LeaseApartment---'
	
	Set nocount on
	if (@RoKind = 1) Return --äÞá ÈØÇÞÇÊ ÝÞØ
	
	Declare @V Varchar(8000)
	
	EXEC PrcDeleteTable 'ParkingContract',@ToDataBaseName
	EXEC PrcDeleteTable 'LeaseApartment',@ToDataBaseName
	
	Set @V = '
			where 
				[ContractFinish] = 0
				or ([Guid] in (Select ContractGuid from lawsuit where [IsEnded] = 0))'
	if (@RoKind = 2) --ÊÏæíÑ ãÚ äÞá ÇáÚãáíÇÊ ÇááÇÍÞÉ
	Set @V = @v + '
	or EditDate >='+''''+CAST(@UntilDate as varchar(255))+''''
				
	if (@RoundContractWithCheckNotCollection = 1) --äÞá ÇáÚÞæÏ ÇáÊí áåÇ ÇæÑÇÞ ãÇáíÉ áã ÊÍÕá
	Set @V = @v + '
	or ([Guid] in (Select ContractGuid from vwChecksCollectionState where [IsCollection] = 0))'

	EXEC PrcTransferTable  'LeaseApartment',@ToDataBaseName, @V
							
	Set @V = '
	Alter Table '+@ToDataBaseName+'..[LeaseApartment] Disable Trigger All'
	exec (@v)

	--ÊÚÏíá ÚáÇãÉ ÇáÔíßÇÊ æ ÇáÓäÏÇÊ æ ÇáÚÞæÏ ÇäåÇ ãÏæÑÉ
	Set @V = '
	UpDate '+@ToDataBaseName+'..[LeaseApartment] Set [IsRounded] = 1 where EditDate <='+''''+CAST(@UntilDate as varchar(255))+''''
	exec(@V)

	--ÊÚÏíá ÚáÇãÉ ÇáÔíßÇÊ æ ÇáÓäÏÇÊ æ ÇáÚÞæÏ ÇäåÇ ãÏæÑÉ
	Set @V = '
	UpDate '+@ToDataBaseName+'..[LeaseApartment] Set [IsRounded] = 1 
	From
		'+@ToDataBaseName+'..[LeaseApartment] L
		inner join HEntry H on L.Guid = H.Guid 
	where H.Date <'+''''+CAST(@UntilDate as varchar(255))+''''
	Print(@V)
	exec(@V)

 	Set @V = 'Update '+@ToDataBaseName+'..[LeaseApartment] Set EditDate = '''+CAST(@BeginDate as VARchar(20))+'''where [IsRounded] = 1 '
	exec(@V)

	Set @V = '
	Alter Table '+@ToDataBaseName+'..[LeaseApartment] Enable Trigger All'
	exec (@v)
	
	--ÇáÑÓæã ÇáÃÎÑì
	Set @V = '
	inner join '+@ToDataBaseName+'..LeaseApartment L on L.Guid = [Tb].[ParentGuid]
	inner join '+@ToDataBaseName+'..Account Ac on Ac.Guid = [Tb].[AccountGuid]
	'
	EXEC PrcTransferTable  'FlatContractFee',@ToDataBaseName, @V

	Set @V = '
	exec '+@ToDataBaseName+'..[PrcReNumberCard]
		0, --@Entry
		0, --@FirstEntryNum
		0, --@EntryType
		0x0, --@EntryTypeGuid
		0, --@FirstEntryTypeNum
		1, --@ContractType
		0x0, --@ContractTypeGuid 
		0, --@FirstContractTypeNum
		0, --@CheckType
		0x0, --@CheckTypeGuid 
		0, --@FirstCheckTypeNum
		0, --@Flat
		0, --@Shop
		0, --@Parking
		0, --@Land
		0, --@Villa
		0, --@Account
		0x0, --@ElectricityBillType
		0x0, --@ElectricityBillTypeGuid
        0 --@Cust
		'
	PRINT @V
	exec(@V)
        
        	
	--ÕíÇäÉ ÊæáíÏ ÇáÞíæÏ
	Set @V = '
	Delete '+@ToDataBaseName+'..[Resource]'
	exec (@v)
	
	Set @V = '
	insert into '+@ToDataBaseName+'..[Resource]
	([Guid], [Kind])
	Select Guid, 1 from '+@ToDataBaseName+'..ContractType'
	exec (@v)
	
	Set @V = '
	exec '+@ToDataBaseName+'..PrcReCreateContractFlatShopEntry 0, 0, 0, 0, 0,0,0,0'
	--Sql.Add('exec PrcReCreateContractFlatShopEntry :Date1, :Date2, :ActiveDate, :Datewith, :Num1, :Num2, :ActiveNum, :MaxDate');

	Print @v
	exec (@v)



GO
/****** Object:  StoredProcedure [dbo].[PrcTransfer_MaintenanceContract]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[PrcTransfer_MaintenanceContract]
(
	@RoKind int = 2,
	@ToDataBaseName Varchar(256) = 'AR1',
	@UntilDate Datetime = '2015-12-31',
	@BeginDate Datetime = '2016-1-1',
	@RoundContractWithCheckNotCollection bit = 0
)
  
as
	if (@RoKind = 1) Return --äÞá ÈØÇÞÇÊ ÝÞØ
	
	Declare @V Varchar(8000)
	
	EXEC PrcDeleteTable 'MaintenanceContract',@ToDataBaseName
	EXEC PrcDeleteTable 'MaintenanceItem',@ToDataBaseName
	EXEC PrcTransferTable  'MaintenanceItem',@ToDataBaseName
	
	Set @V = '
			where 
				[ContractFinish] = 0'
				
	if (@RoKind = 2) --ÊÏæíÑ ãÚ äÞá ÇáÚãáíÇÊ ÇááÇÍÞÉ
	Set @V = @v + '
	or EditDate >='+''''+CAST(@UntilDate as varchar(255))+''''
				
	if (@RoundContractWithCheckNotCollection = 1) --äÞá ÇáÚÞæÏ ÇáÊí áåÇ ÇæÑÇÞ ãÇáíÉ áã ÊÍÕá
	Set @V = @v + '
	or ([Guid] in (Select ContractGuid from vwChecksCollectionState where [IsCollection] = 0))'

	EXEC PrcTransferTable  'MaintenanceContract',@ToDataBaseName, @V
							
	
	Set @V = '
	Alter Table '+@ToDataBaseName+'..[MaintenanceContract] Disable Trigger All'
	exec (@v)

	--ÊÚÏíá ÚáÇãÉ ÇáÔíßÇÊ æ ÇáÓäÏÇÊ æ ÇáÚÞæÏ ÇäåÇ ãÏæÑÉ
	Set @V = '
	UpDate '+@ToDataBaseName+'..[MaintenanceContract] Set [IsRounded] = 1 where EditDate <'+''''+CAST(@UntilDate as varchar(255))+''''
	exec(@V)


	--ÊÚÏíá ÚáÇãÉ ÇáÔíßÇÊ æ ÇáÓäÏÇÊ æ ÇáÚÞæÏ ÇäåÇ ãÏæÑÉ
	Set @V = '
	UpDate '+@ToDataBaseName+'..[MaintenanceContract] Set [IsRounded] = 1 
	From
		'+@ToDataBaseName+'..[MaintenanceContract] L
		inner join HEntry H on L.Guid = H.Guid 
	where H.Date <'+''''+CAST(@UntilDate as varchar(255))+''''
	Print(@V)
	exec(@V)

 	Set @V = 'Update '+@ToDataBaseName+'..[MaintenanceContract] Set EditDate = '''+CAST(@BeginDate as VARchar(20))+'''where [IsRounded] = 1 '
	exec(@V)

	Set @V = '
	Alter Table '+@ToDataBaseName+'..[MaintenanceContract] Enable Trigger All'
	exec (@v)

	 
	--ÇáÚÞÇÑÇÊ
	Set @V = '
	inner join '+@ToDataBaseName+'..MaintenanceContract L on L.Guid = [Tb].[ParentGuid]
	inner join '+@ToDataBaseName+'..Cost Ac on Ac.Guid = [Tb].[CostGuid]
	inner join '+@ToDataBaseName+'..vwAllRealty RL on RL.Guid = [Tb].RealtyGuid
	'
	EXEC PrcTransferTable  'RealtyMaintenanceContract',@ToDataBaseName, @V


	--ÃÚãÇá ÇáÕíÇäÉ
	Set @V = '
	inner join '+@ToDataBaseName+'..MaintenanceContract L on L.Guid = [Tb].[ContractGuid]'
	EXEC PrcTransferTable  'MaintenanceContractMaintenanceItem',@ToDataBaseName, @V
	
	
	
	Set @V = '
	exec '+@ToDataBaseName+'..ReNumberTableType
		''MaintenanceContract'',
		''[TypeGuid]'',
		''Number, FromDate'',
		''uniqueidentifier'',
		''''			
	'
	exec(@V)
	
        	
	--ÕíÇäÉ ÊæáíÏ ÇáÞíæÏ
	Set @V = '
	Delete '+@ToDataBaseName+'..[Resource]'
	exec (@v)
	
	Set @V = '
	insert into '+@ToDataBaseName+'..[Resource]
	([Guid], [Kind])
	Select Guid, 1 from '+@ToDataBaseName+'..MaintenanceContractType'
	exec (@v)
	
	Set @V = '
	exec '+@ToDataBaseName+'..[PrcReCreateMaintenanceContract] 0,0,0,0,0,0,0 '
	--Sql.Add('exec PrcReCreateContractFlatShopEntry :Date1, :Date2, :ActiveDate, :Datewith, :Num1, :Num2, :ActiveNum, :MaxDate');

	Print @v
	exec (@v)



GO
/****** Object:  StoredProcedure [dbo].[PrcTransfer_ParkingContract]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[PrcTransfer_ParkingContract]
(
	@RoKind int = 2,
	@ToDataBaseName Varchar(256) = 'RRR',
	@UntilDate Datetime = '2015-5-30',
	@BeginDate Datetime = '2016-1-1',
	@RoundContractWithCheckNotCollection bit = 1
)
  
as
	if (@RoKind = 1) Return --äÞá ÈØÇÞÇÊ ÝÞØ
	
	Declare @V Varchar(8000)
	
	--EXEC PrcDeleteTable 'ParkingContract',@ToDataBaseName
	--EXEC PrcDeleteTable 'ParkingContract',@ToDataBaseName
	
	Set @V = 'ALTER TABLE '+@ToDataBaseName+'.[dbo].[ParkingContract] NOCHECK CONSTRAINT [UK_ParkingContract_FlatContractGuid]'
	exec (@v)
	

	Set @V = '
			where 
				[ContractFinish] = 0
				or ([Guid] in (Select ContractGuid from lawsuit where [IsEnded] = 0))'
	if (@RoKind = 2) --ÊÏæíÑ ãÚ äÞá ÇáÚãáíÇÊ ÇááÇÍÞÉ
	Set @V = @v + '
	or EditDate >'+''''+CAST(@UntilDate as varchar(255))+''''
	
	if (@RoundContractWithCheckNotCollection = 1) --äÞá ÇáÚÞæÏ ÇáÊí áåÇ ÇæÑÇÞ ãÇáíÉ áã ÊÍÕá
	Set @V = @v + '
	or ([Guid] in (Select ContractGuid from vwChecksCollectionState where [IsCollection] = 0))'

	EXEC PrcTransferTable  'ParkingContract',@ToDataBaseName, @V
							

	Set @V = '
	Alter Table '+@ToDataBaseName+'..[ParkingContract] Disable Trigger All'
	exec (@v)

	--ÇáÑÈØ ãÚ ÚÞÏ ÇáÔÞÉ
	Set @V = 'Update '+@ToDataBaseName+'..[ParkingContract] Set FlatContractGuid = L.Guid
	From 
		ParkingContract [Tbl]
		inner join '+@ToDataBaseName+'..LeaseApartment L on L.Guid = [Tbl].[FlatContractGuid] 			'
	exec(@V)

	Set @V = 'ALTER TABLE '+@ToDataBaseName+'.[dbo].[ParkingContract] CHECK CONSTRAINT [UK_ParkingContract_FlatContractGuid]'
	exec (@v)

	--ÊÚÏíá ÚáÇãÉ ÇáÔíßÇÊ æ ÇáÓäÏÇÊ æ ÇáÚÞæÏ ÇäåÇ ãÏæÑÉ
	Set @V = '
	UpDate '+@ToDataBaseName+'..[ParkingContract] Set [IsRounded] = 1 where EditDate <='+''''+CAST(@UntilDate as varchar(255))+''''
	exec(@V)

	--ÊÚÏíá ÚáÇãÉ ÇáÔíßÇÊ æ ÇáÓäÏÇÊ æ ÇáÚÞæÏ ÇäåÇ ãÏæÑÉ
	Set @V = '
	UpDate '+@ToDataBaseName+'..[ParkingContract] Set [IsRounded] = 1 
	From
		'+@ToDataBaseName+'..[ParkingContract] L
		inner join HEntry H on L.Guid = H.Guid 
	where H.Date <'+''''+CAST(@UntilDate as varchar(255))+''''
	Print(@V)
	exec(@V)

 	Set @V = 'Update '+@ToDataBaseName+'..[ParkingContract] Set EditDate = '''+CAST(@BeginDate as VARchar(20))+''''
	exec(@V)

	Set @V = '
	inner Join '+@ToDataBaseName+'..[LeaseApartment] A on A.Guid = [Tb].ParentGuid
	inner Join '+@ToDataBaseName+'..[parkingContract] P on P.Guid = [Tb].parkingContractGuid
	'

	EXEC PrcTransferTable  'LinkParkingContract',@ToDataBaseName,@V

	Set @V = '
	Alter Table '+@ToDataBaseName+'..[ParkingContract] Enable Trigger All'
	exec (@v)

	--ÇáÑÓæã ÇáÃÎÑì
	Set @V = '
	inner join '+@ToDataBaseName+'..ParkingContract L on L.Guid = [Tb].[ParentGuid]
	inner join '+@ToDataBaseName+'..Account Ac on Ac.Guid = [Tb].[AccountGuid]
	'
	EXEC PrcTransferTable  'ParkingContractFee',@ToDataBaseName, @V

	Set @V = '
	exec '+@ToDataBaseName+'..[PrcReNumberCard]
		0, --@Entry
		0, --@FirstEntryNum
		0, --@EntryType
		0x0, --@EntryTypeGuid
		0, --@FirstEntryTypeNum
		1, --@ContractType
		0x0, --@ContractTypeGuid =
		0, --@FirstContractTypeNum
		0, --@CheckType
		0x0, --@CheckTypeGuid 
		0, --@FirstCheckTypeNum
		0, --@Flat
		0, --@Shop
		0, --@Parking
		0, --@Land
		0, --@Villa
		0, --@Account
		0x0, --@ElectricityBillType
		0x0, --@ElectricityBillTypeGuid =
        0 --@Cus
		'
	exec(@V)


	--ÕíÇäÉ ÊæáíÏ ÇáÞíæÏ
	Set @V = '
	Delete '+@ToDataBaseName+'..[Resource]'
	exec (@v)
	
	Set @V = '
	insert into '+@ToDataBaseName+'..[Resource]
	([Guid], [Kind])
	Select Guid, 1 from '+@ToDataBaseName+'..ContractType'
	exec (@v)
	
	Set @V = '
	exec '+@ToDataBaseName+'..PrcReCreateContractParkingEntry 0, 0, 0, 0, 0,0,0,0'
	--Sql.Add('exec PrcReCreateContractFlatShopEntry :Date1, :Date2, :ActiveDate, :Datewith, :Num1, :Num2, :ActiveNum, :MaxDate');

	exec (@v)



GO
/****** Object:  StoredProcedure [dbo].[PrcTransfer_Secondary_Entry]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[PrcTransfer_Secondary_Entry]
(
	@RoKind int = 2,
	@ToDataBaseName Varchar(256) = 'Q17',
	@UntilDate Datetime = '2016-12-31',
	@BeginDate Datetime = '2017-1-1',
	@RdReNumberSEntry bit = 1
)
  
as
	Set NoCount on
	--ÊÏæíÑ ßÇãá ÇáãáÝÇÊ áÊÇÑíÎ ãÚíä ãÚ äÞá ÇáÚãáíÇÊ ÇááÇÍÞÉ
	if (@RoKind <> 2) Return
	
	Declare @V Varchar(8000)
	
	--Set @V = '
	--where ContractGuid is Null and Date >='+''''+CAST(@UntilDate as varchar(255))+''''

	Set @V = '
	where	
		--ContractGuid in (Select Guid From '+@ToDataBaseName+'..vwAllContractGuid)
		--or 
		Guid Not in (Select Guid From [ChecksPartialCollection])
		and Guid Not in (Select [EntryGuid] From [LinkEntryType_Checks])
		and (Date >'+''''+CAST(@UntilDate as varchar(255))+''')'
	
	EXEC PrcTransferTable  'Secondary_Entry',@ToDataBaseName, @V

	Set @V = '
	inner join '+@ToDataBaseName+'..Secondary_Entry S on S.Guid = tb.ParentGuid'
	
	EXEC PrcTransferTable  'Secondary_EntryDetail',@ToDataBaseName, @V

	Set @V = '
	Alter Table '+@ToDataBaseName+'..[Secondary_Entry] Disable Trigger All'
	exec (@v)

	--ÊÚÏíá ÚáÇãÉ ÇáÔíßÇÊ æ ÇáÓäÏÇÊ æ ÇáÚÞæÏ ÇäåÇ ãÏæÑÉ
	Set @V = '
	UpDate '+@ToDataBaseName+'..[Secondary_Entry] Set [IsRounded] = 1 where Date <'+''''+CAST(@UntilDate as varchar(255))+''''
	exec(@V)

	Set @V = '
	Alter Table '+@ToDataBaseName+'..[Secondary_Entry] Enable Trigger All'
	exec (@v)

	if @RdReNumberSEntry = 1
	begin
		Set @V = '
		exec '+@ToDataBaseName+'..[PrcReNumberCard]
			0, --@Entry
			0, --@FirstEntryNum
			1, --@EntryType
			0x0, --@EntryTypeGuid
			0, --@FirstEntryTypeNum
			1, --@ContractType
			0x0, --@ContractTypeGuid
			0, --@FirstContractTypeNum
			0, --@CheckType
			0x0, --@CheckTypeGuid 
			0, --@FirstCheckTypeNum
			0, --@Flat
			0, --@Shop
			0, --@Parking
			0, --@Land
			0, --@Villa
			0, --@Account
			0x0, --@ElectricityBillType
			0x0, --@ElectricityBillTypeGuid
			0 --@Cus
			'
		exec(@V)
	end
			
	--ÕíÇäÉ ÊæáíÏ ÇáÞíæÏ
	Set @V = '
	Delete '+@ToDataBaseName+'..[Resource]'
	exec (@v)
	
	Set @V = '
	insert into '+@ToDataBaseName+'..[Resource]
	([Guid], [Kind])
	Select Guid, 1 from '+@ToDataBaseName+'..EntryType Order By [Number]'
	exec (@v)
	
	Set @V = '
	Update '+@ToDataBaseName+'..Secondary_Entry Set ContractGuid = Null 
	where 
		ContractGuid Not in (Select Guid From '+@ToDataBaseName+'..vwAllContract )'
	exec (@v)
		
	Set @V = '
	exec '+@ToDataBaseName+'..PrcReCreateEntryType 0, 0, 0, 0'
	exec (@v)

GO
/****** Object:  StoredProcedure [dbo].[PrcTransfer_ServicesContract]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[PrcTransfer_ServicesContract]
(
	@RoKind int = 2,
	@ToDataBaseName Varchar(256) = 'AR1',
	@UntilDate Datetime = '2015-12-31',
	@BeginDate Datetime = '2016-1-1',
	@RoundContractWithCheckNotCollection bit = 0
)
  
as
	if (@RoKind = 1) Return --äÞá ÈØÇÞÇÊ ÝÞØ
	
	Declare @V Varchar(8000)
	
	EXEC PrcDeleteTable 'ServicesContract',@ToDataBaseName
	
	Set @V = '
			where 
				[ContractFinish] = 0'
				
	if (@RoKind = 2) --ÊÏæíÑ ãÚ äÞá ÇáÚãáíÇÊ ÇááÇÍÞÉ
	Set @V = @v + '
	or EditDate >='+''''+CAST(@UntilDate as varchar(255))+''''
				
	if (@RoundContractWithCheckNotCollection = 1) --äÞá ÇáÚÞæÏ ÇáÊí áåÇ ÇæÑÇÞ ãÇáíÉ áã ÊÍÕá
	Set @V = @v + '
	or ([Guid] in (Select ContractGuid from vwChecksCollectionState where [IsCollection] = 0))'

	EXEC PrcTransferTable  'ServicesContract',@ToDataBaseName, @V
							
	
	Set @V = '
	Alter Table '+@ToDataBaseName+'..[ServicesContract] Disable Trigger All'
	exec (@v)

	--ÊÚÏíá ÚáÇãÉ ÇáÔíßÇÊ æ ÇáÓäÏÇÊ æ ÇáÚÞæÏ ÇäåÇ ãÏæÑÉ
	Set @V = '
	UpDate '+@ToDataBaseName+'..[ServicesContract] Set [IsRounded] = 1 where EditDate <'+''''+CAST(@UntilDate as varchar(255))+''''
	exec(@V)

	--ÊÚÏíá ÚáÇãÉ ÇáÔíßÇÊ æ ÇáÓäÏÇÊ æ ÇáÚÞæÏ ÇäåÇ ãÏæÑÉ
	Set @V = '
	UpDate '+@ToDataBaseName+'..[ServicesContract] Set [IsRounded] = 1 
	From
		'+@ToDataBaseName+'..[ServicesContract] L
		inner join HEntry H on L.Guid = H.Guid 
	where H.Date <'+''''+CAST(@UntilDate as varchar(255))+''''
	Print(@V)
	exec(@V)


 	Set @V = 'Update '+@ToDataBaseName+'..[ServicesContract] Set EditDate = '''+CAST(@BeginDate as VARchar(20))+'''where [IsRounded] = 1 '
	exec(@V)

	Set @V = '
	Alter Table '+@ToDataBaseName+'..[ServicesContract] Enable Trigger All'
	exec (@v)

	 
	Set @V = '
	exec '+@ToDataBaseName+'..ReNumberTableType
		''ServicesContract'',
		''[TypeGuid]'',
		''Number, FromDate'',
		''uniqueidentifier'',
		''''			
	'
	exec(@V)
	
        	
	--ÕíÇäÉ ÊæáíÏ ÇáÞíæÏ
	Set @V = '
	Delete '+@ToDataBaseName+'..[Resource]'
	exec (@v)
	
	Set @V = '
	insert into '+@ToDataBaseName+'..[Resource]
	([Guid], [Kind])
	Select Guid, 1 from '+@ToDataBaseName+'..ServicesContractType'
	exec (@v)
	
	Set @V = '
	exec '+@ToDataBaseName+'..[PrcReCreateServicesContract] 0,0,0,0,0,0,0 '

	Print @v
	exec (@v)



GO
/****** Object:  StoredProcedure [dbo].[PrcTransferCardAsstes]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[PrcTransferCardAsstes]
(
	@RoKind int = 2,
	@ToDataBaseName Varchar(256) = 'NewDataBaseName',
	@UntilDate Datetime = '2015-12-31',
	@BeginDate Datetime = '2016-1-1'
)
  
as
	Declare @V Varchar(8000) 


	EXEC PrcDeleteTable 'ContractLandAssets',@ToDataBaseName
	EXEC PrcDeleteTable 'ContractFlatAssets',@ToDataBaseName
	EXEC PrcDeleteTable 'AssetsDepreciationDetail',@ToDataBaseName
	EXEC PrcDeleteTable 'AssetsDepreciation',@ToDataBaseName
	EXEC PrcDeleteTable 'AssetsChangeArea',@ToDataBaseName
	EXEC PrcDeleteTable 'AssetsOperation',@ToDataBaseName
	EXEC PrcDeleteTable 'Assets',@ToDataBaseName
	EXEC PrcDeleteTable 'AssetsArea',@ToDataBaseName
	EXEC PrcDeleteTable 'AssetsGroup',@ToDataBaseName
	
	
	EXEC PrcTransferTable  'AssetsGroup',@ToDataBaseName
	EXEC PrcTransferTable  'AssetsArea',@ToDataBaseName
	
	set @V = '
	exec dbo.PrcCheckConstraint '''+@ToDataBaseName+''', ''Assets'', ''0'''
	Print @V
	exec (@V)
	
	EXEC PrcTransferTable  'Assets',@ToDataBaseName

	set @V = '
	exec dbo.PrcCheckConstraint '''+@ToDataBaseName+''', ''Assets'', ''1'''
	Print @V
	exec (@V)

	--------------
	set @V = '
	exec dbo.PrcCheckConstraint '''+@ToDataBaseName+''', ''AssetsOperation'', ''0'''
	Print @V
	exec (@V)

	EXEC PrcTransferTable  'AssetsOperation',@ToDataBaseName
	
	set @V = '
	exec dbo.PrcCheckConstraint '''+@ToDataBaseName+''', ''AssetsOperation'', ''0'''
	Print @V
	exec (@V)

	--ÊÚÏíá Úáì ÇäåÇ ãÏæÑÉ
	Set @V = '
	Alter Table '+@ToDataBaseName+'..[AssetsOperation] Disable Trigger All'
	exec (@v)

	Set @V = '
	UpDate '+@ToDataBaseName+'..[AssetsOperation] Set [IsRounded] = 1 where [Date] <'+''''+CAST(@UntilDate as varchar(255))+''''
	exec(@V)

 	Set @V = 'Update '+@ToDataBaseName+'..[AssetsOperation] Set [Date] = '''+CAST(@BeginDate as VARchar(20))+''' where [IsRounded] = 1 '
	exec(@V)

	Set @V = '
	Alter Table '+@ToDataBaseName+'..[AssetsOperation] Enable Trigger All'
	exec (@v)

	----------------
	
	EXEC PrcTransferTable  'AssetsChangeArea',@ToDataBaseName

	set @V = '
	exec dbo.PrcCheckConstraint '''+@ToDataBaseName+''', ''AssetsDepreciation'', ''0'''
	Print @V
	exec (@V)

	EXEC PrcTransferTable  'AssetsDepreciation',@ToDataBaseName
	EXEC PrcTransferTable  'AssetsDepreciationDetail',@ToDataBaseName

	set @V = '
	exec dbo.PrcCheckConstraint '''+@ToDataBaseName+''', ''AssetsDepreciation'', ''1'''
	Print @V
	exec (@V)

	--ÊÚÏíá Úáì ÇäåÇ ãÏæÑÉ
	Set @V = '
	Alter Table '+@ToDataBaseName+'..[AssetsDepreciation] Disable Trigger All'
	exec (@v)

	Set @V = '
	UpDate '+@ToDataBaseName+'..[AssetsDepreciation] Set [IsRounded] = 1 where [Date] <'+''''+CAST(@UntilDate as varchar(255))+''''
	exec(@V)

 	Set @V = 'Update '+@ToDataBaseName+'..[AssetsDepreciation] Set [Date] = '''+CAST(@BeginDate as VARchar(20))+''' where [IsRounded] = 1 '
	exec(@V)

	Set @V = '
	Alter Table '+@ToDataBaseName+'..[AssetsDepreciation] Enable Trigger All'
	exec (@v)
	------------
	set @V = '
	exec dbo.PrcCheckConstraint '''+@ToDataBaseName+''', ''ContractFlatAssets'', ''0'''
	Print @V
	exec (@V)

	EXEC PrcTransferTable  'ContractFlatAssets',@ToDataBaseName

	set @V = '
	exec dbo.PrcCheckConstraint '''+@ToDataBaseName+''', ''ContractFlatAssets'', ''1'''
	Print @V
	exec (@V)

	------------
	set @V = '
	exec dbo.PrcCheckConstraint '''+@ToDataBaseName+''', ''ContractLandAssets'', ''0'''
	Print @V
	exec (@V)

	EXEC PrcTransferTable  'ContractLandAssets',@ToDataBaseName

	set @V = '
	exec dbo.PrcCheckConstraint '''+@ToDataBaseName+''', ''ContractLandAssets'', ''1'''
	Print @V
	exec (@V)	
	
	--ÊæáíÏ ÇáÞíæÏ
	Declare @AssetsOperationGuid uniqueidentifier
	DECLARE cursor_Name CURSOR FAST_FORWARD FOR 
	SELECT 
		Guid
	FROM 
		AssetsOperation
	Order By Date
	
	OPEN cursor_Name
	FETCH NEXT FROM cursor_Name INTO @AssetsOperationGuid
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
	  
	  exec PrcCreateAssetsOperationEntry @AssetsOperationGuid
	  FETCH NEXT FROM cursor_Name INTO @AssetsOperationGuid
	
	END
	
	CLOSE cursor_Name
	DEALLOCATE cursor_Name


	--ÊæáíÏ ÇáÞíæÏ
	Declare @AssetsDepreciationGuid uniqueidentifier
	DECLARE cursor_Name CURSOR FAST_FORWARD FOR 
	SELECT 
		Guid
	FROM 
		AssetsDepreciation
	Order By Date
	
	OPEN cursor_Name
	FETCH NEXT FROM cursor_Name INTO @AssetsDepreciationGuid
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
	  
	  exec PrcCreateAssetsDepreciationEntry @AssetsDepreciationGuid
	  FETCH NEXT FROM cursor_Name INTO @AssetsDepreciationGuid
	
	END
	
	CLOSE cursor_Name
	DEALLOCATE cursor_Name
	

GO
/****** Object:  StoredProcedure [dbo].[PrcTransferCardDData]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[PrcTransferCardDData]
(
	@RoKind int = 2,
	@ToDataBaseName Varchar(256) = 'Q17',
	@UntilDate Datetime = '2016-12-31',
	@BeginDate Datetime = '2017-1-1',
	@RoundContractWithCheckNotCollection bit = 0,
	@RdReNumberSEntry bit = 1
)
  
as
	Set NoCount on
	Declare @V Varchar(8000) 

	insert into DMD_const Select 'InRoundProcess', 'InRoundProcess'
	Set @V = 'insert into '+@ToDataBaseName+'..DMD_const Select ''InRoundProcess'', ''InRoundProcess'''
	exec(@V)
	
	exec PrcSetProgrss '', 100, 0
	
	EXEC PrcDeleteTable 'LogFile',@ToDataBaseName
	EXEC PrcDeleteTable 'Photos',@ToDataBaseName
	EXEC PrcDeleteTable 'Checks',@ToDataBaseName
	EXEC PrcDeleteTable 'ElectricityType',@ToDataBaseName
	EXEC PrcDeleteTable 'CheckType',@ToDataBaseName
	EXEC PrcDeleteTable 'Secondary_EntryDetail',@ToDataBaseName
	EXEC PrcDeleteTable 'Secondary_Entry',@ToDataBaseName
	EXEC PrcDeleteTable 'ReceiptOrderType',@ToDataBaseName
	EXEC PrcDeleteTable 'EntryType',@ToDataBaseName
	EXEC PrcDeleteTable 'EntryDateType',@ToDataBaseName
	EXEC PrcDeleteTable 'HEntry',@ToDataBaseName
	EXEC PrcDeleteTable 'ParkingContract',@ToDataBaseName
	EXEC PrcDeleteTable 'LeaseApartment',@ToDataBaseName
	EXEC PrcDeleteTable 'LandContract',@ToDataBaseName
	EXEC PrcDeleteTable 'ContractType',@ToDataBaseName
	EXEC PrcDeleteTable 'RealtyRestrained',@ToDataBaseName
	EXEC PrcDeleteTable 'wallet',@ToDataBaseName
	EXEC PrcDeleteTable 'Earth',@ToDataBaseName
	EXEC PrcDeleteTable 'Shop',@ToDataBaseName
	EXEC PrcDeleteTable 'parking',@ToDataBaseName
	EXEC PrcDeleteTable 'Apartment',@ToDataBaseName
	EXEC PrcDeleteTable 'MaintenanceOrder',@ToDataBaseName
	EXEC PrcDeleteTable 'Complaint',@ToDataBaseName
	EXEC PrcDeleteTable 'Building',@ToDataBaseName
	EXEC PrcDeleteTable 'Customer',@ToDataBaseName
	EXEC PrcDeleteTable 'LawsuitExpense',@ToDataBaseName
	EXEC PrcDeleteTable 'Lawsuit',@ToDataBaseName
	EXEC PrcDeleteTable 'BillType',@ToDataBaseName
	EXEC PrcDeleteTable 'TransType',@ToDataBaseName
	EXEC PrcDeleteTable 'Store',@ToDataBaseName
	EXEC PrcDeleteTable 'ElectricityType',@ToDataBaseName
	EXEC PrcDeleteTable 'ChangeFlatRent',@ToDataBaseName

	EXEC PrcDeleteTable 'ServicesContract',@ToDataBaseName
	EXEC PrcDeleteTable 'ServicesContractType',@ToDataBaseName

	EXEC PrcDeleteTable 'MaintenanceContract',@ToDataBaseName
	EXEC PrcDeleteTable 'MaintenanceContractType',@ToDataBaseName

	
	--insert into [LogFile] ([Opration]) Select '1'
	
	--EXEC PrcDeleteTable '',@ToDataBaseName
	EXEC PrcDeleteTable 'Account',@ToDataBaseName
	EXEC PrcDeleteTable 'ChangeCurrencyRate',@ToDataBaseName
	
	EXEC PrcDeleteTable 'Mat',@ToDataBaseName
	EXEC PrcDeleteTable 'Currency',@ToDataBaseName
	

	exec PrcSetProgrss 'äÞá ÇáÈØÇÞÇÊ', 100, 5

	EXEC PrcTransferTable  'Currency',@ToDataBaseName
	
	EXEC PrcTransferTable  'TableDescription',@ToDataBaseName
	
	EXEC PrcTransferTable  'HjrConfig',@ToDataBaseName
	EXEC PrcTransferTable  'DefaultMenuBank',@ToDataBaseName
	EXEC PrcTransferTable  'DefaultMenuNationality',@ToDataBaseName
	
	EXEC PrcTransferTable  'Branch',@ToDataBaseName

	EXEC PrcTransferTable  'Realty_Users',@ToDataBaseName, '',1
	
	Set @v = 'exec '+@ToDataBaseName+'..prcadduser'
	exec(@V)

	EXEC PrcTransferTable  'Realty_Detail_users',@ToDataBaseName

	EXEC PrcTransferTable  'StrSource',@ToDataBaseName

	EXEC PrcTransferTable  'DMD_const',@ToDataBaseName
	
	--insert into [LogFile] ([Opration]) Select '10'
	
	--ÇíÞÇÝ ÊÊÈÚ ÇáÊÚÏíá
	Set @V = 'delete '+@ToDataBaseName+'..DMD_const where vName = ''ActiveLogCardUpdate'''
	print @V 
	--exec(@V)

	--ÍÌÒ ÇáÞíÏ ÇáÇÝÊÊÇÍí
	Set @V = '
	if Not exists(Select * from '+@ToDataBaseName+'..HEntry where Guid = ''111C583B-8377-1118-111C-111AAE645086'')
	insert into '+@ToDataBaseName+'..[Hentry]
		([Guid], [Number], [SecLvl], [Date], [CurrencyGuid], [CurrencyVal], [Note], [ParentKind], [UserGuid], [BranchGuid], [IsPosted])
	Select
		''111C583B-8377-1118-111C-111AAE645086'', 
		1 as [Number], 
		0 as [SecLvl], 
		0 as [date], 
		(Select Top 1 [Guid] From Currency ) As [CurrencyGuid], 
		1 as [CurrencyVal], 
		''ÇáÞíÏ ÇáÅÝÊÊÇÍí'' as [Note], 
		0 as [ParentKind], 
		Null as [UserGuid], 
		Null as [BranchGuid],
		1'
	exec(@V)
	
	EXEC PrcTransferTable  'SMSSetup',@ToDataBaseName
	EXEC PrcTransferTable  'SMSInfo',@ToDataBaseName

	EXEC PrcTransferTable  'ExternalTools',@ToDataBaseName

	EXEC PrcTransferTable  'TblShortCut',@ToDataBaseName

	if @RoKind = 0
	EXEC PrcTransferTable  'ChangeCurrencyRate',@ToDataBaseName

	EXEC PrcTransferTable  'Account',@ToDataBaseName
	Set @V = 'exec '+@ToDataBaseName+'..[PrcSetMovingAccount]'
	exec (@V)

	EXEC PrcTransferTable  'AccountDistributive',@ToDataBaseName

	EXEC PrcTransferTable  'AccountAccumulate',@ToDataBaseName

	EXEC PrcTransferTable  'Cost',@ToDataBaseName

	EXEC PrcTransferTable  'EntryType',@ToDataBaseName

	EXEC PrcTransferTable  'EntryTypePrivilege',@ToDataBaseName

	EXEC PrcTransferTable  'EntryDateType',@ToDataBaseName
	EXEC PrcTransferTable  'EntryDateTypePrivilege',@ToDataBaseName

	--insert into [LogFile] ([Opration]) Select '20'

	EXEC PrcTransferTable  'Customer',@ToDataBaseName

	EXEC PrcTransferTable  'RentInfo',@ToDataBaseName

	EXEC PrcTransferTable  'Owner',@ToDataBaseName
	
	EXEC PrcTransferTable  'Building',@ToDataBaseName

	EXEC PrcTransferTable  'Apartment',@ToDataBaseName

	EXEC PrcTransferTable  'AccumulateFlat',@ToDataBaseName

	if @RoKind <> 1
	EXEC PrcTransferTable  'ChangeFlatPrice',@ToDataBaseName

	if @RoKind <> 1
	EXEC PrcTransferTable  'ChangeFlatRent',@ToDataBaseName

	EXEC PrcTransferTable  'Shop',@ToDataBaseName
	if @RoKind <> 1 --Ýí ÍÇá ÊÏæíÑ ßÇãá ÇáÈíÇäÇÊ
	EXEC PrcTransferTable  'ChangeShopPrice',@ToDataBaseName

	if @RoKind <> 1 --Ýí ÍÇá ÊÏæíÑ ßÇãá ÇáÈíÇäÇÊ
	EXEC PrcTransferTable  'ChangeShopRent',@ToDataBaseName

	EXEC PrcTransferTable  'AccumulateShop',@ToDataBaseName

	EXEC PrcTransferTable  'parking',@ToDataBaseName
	EXEC PrcTransferTable  'Accumulateparking',@ToDataBaseName

	if @RoKind <> 1 --Ýí ÍÇá ÊÏæíÑ ßÇãá ÇáÈíÇäÇÊ	--insert into [LogFile] ([Opration]) Select '10'
	EXEC PrcTransferTable  'ChangeParkingPrice',@ToDataBaseName

	if @RoKind <> 1 --Ýí ÍÇá ÊÏæíÑ ßÇãá ÇáÈíÇäÇÊ
	EXEC PrcTransferTable  'ChangeParkingRent',@ToDataBaseName

	EXEC PrcTransferTable  'Salesman',@ToDataBaseName
	
	EXEC PrcTransferTable  'ContractType',@ToDataBaseName

	EXEC PrcTransferTable  'ContractTypePrivilege',@ToDataBaseName
	EXEC PrcTransferTable  'ContractTypeFeeAccount',@ToDataBaseName

	--insert into [LogFile] ([Opration]) Select '30'

	exec PrcSetProgrss 'äÞá ÇáÚÞæÏ', 100, 15
	exec [PrcTransfer_LeaseApartment] @RoKind , @ToDataBaseName, @UntilDate, @BeginDate, @RoundContractWithCheckNotCollection

	--insert into [LogFile] ([Opration]) Select '31'
	exec PrcSetProgrss 'äÞá ÚÞæÏ ÇáãæÇÞÝ', 100, 20
	exec [PrcTransfer_ParkingContract] @RoKind , @ToDataBaseName, @UntilDate, @BeginDate, @RoundContractWithCheckNotCollection

	--insert into [LogFile] ([Opration]) Select '32'

	EXEC PrcTransferTable  'Earth',@ToDataBaseName
	EXEC PrcTransferTable  'AccumulateLand',@ToDataBaseName

	--insert into [LogFile] ([Opration]) Select '33'
	exec PrcSetProgrss 'äÞá ÚÞæÏ ÇáÃÑÇÖí', 100, 25
	exec [PrcTransfer_LandContract] @RoKind , @ToDataBaseName, @UntilDate, @BeginDate, @RoundContractWithCheckNotCollection


	EXEC PrcTransferTable  'CheckType',@ToDataBaseName

	EXEC PrcTransferTable  'CheckTypePrivilege',@ToDataBaseName

	EXEC PrcTransferTable  'AlarmCheckTypeSource',@ToDataBaseName

	--insert into [LogFile] ([Opration]) Select '34'
	exec PrcSetProgrss 'äÞá ÇáÔíßÇÊ', 100, 35
	exec [PrcTransfer_Checks] @RoKind , @ToDataBaseName, @UntilDate, @BeginDate, @RoundContractWithCheckNotCollection

	
	exec PrcSetProgrss 'äÞá ÇáÃÑÔÝÉ', 100, 45
	EXEC PrcTransferTable  'Photos',@ToDataBaseName


	exec PrcSetProgrss 'äÞá ÇáÈØÇÞÇÊ', 100, 45
	EXEC PrcTransferTable  'ProjectCost',@ToDataBaseName

	EXEC PrcTransferTable  'ProjectCostDetail',@ToDataBaseName

	EXEC PrcTransferTable  'FlatBuilding',@ToDataBaseName

	EXEC PrcTransferTable  'FlatBuildingDetails',@ToDataBaseName

	EXEC PrcTransferTable  'FlatBuildingDetails_2',@ToDataBaseName

	EXEC PrcTransferTable  'FlatBuildingDetails_Office',@ToDataBaseName

	EXEC PrcTransferTable  'FlatBuildingDetails_MBalance',@ToDataBaseName

	EXEC PrcTransferTable  'FlatBuildingDetails_BHouse',@ToDataBaseName

	EXEC PrcTransferTable  'FlatBuildingDetails_Shop',@ToDataBaseName

	EXEC PrcTransferTable  'FlatBuildingDetails_Parking',@ToDataBaseName

	EXEC PrcTransferTable  'BuildingPayType',@ToDataBaseName

	EXEC PrcTransferTable  'BuildingIdentity',@ToDataBaseName

	EXEC PrcTransferTable  'BuildingIdentityDetail',@ToDataBaseName

	EXEC PrcTransferTable  'Term',@ToDataBaseName

	EXEC PrcTransferTable  'RepCheck',@ToDataBaseName

	EXEC PrcTransferTable  'RepCheckCount',@ToDataBaseName

	EXEC PrcTransferTable  'wallet',@ToDataBaseName

	EXEC PrcTransferTable  'Flatwallet',@ToDataBaseName

	EXEC PrcTransferTable  'ShopWallet',@ToDataBaseName

	EXEC PrcTransferTable  'ParkingWallet',@ToDataBaseName

	EXEC PrcTransferTable  'Partnerwallet',@ToDataBaseName

	EXEC PrcTransferTable  'QueryFeature',@ToDataBaseName

	EXEC PrcTransferTable  'PathCustomPrint',@ToDataBaseName

	
	EXEC PrcTransferTable  'ElectricityType',@ToDataBaseName
	
	EXEC PrcTransferTable  'ElectricityTypePrivilege',@ToDataBaseName


	exec PrcSetProgrss 'äÞá ÚÞæÏ ÇáÕíÇäÉ', 100, 40
	EXEC PrcTransferTable  'MaintenanceContractType',@ToDataBaseName
	EXEC PrcTransferTable  'MaintenanceContractTypePrivilege',@ToDataBaseName
	exec [PrcTransfer_MaintenanceContract] @RoKind , @ToDataBaseName, @UntilDate, @BeginDate, @RoundContractWithCheckNotCollection


	exec PrcSetProgrss 'äÞá ÚÞæÏ ÇáÎÏãÇÊ', 100, 55
	EXEC PrcTransferTable  'ServicesContractType',@ToDataBaseName
	EXEC PrcTransferTable  'ServicesContractTypePrivilege',@ToDataBaseName
	exec [PrcTransfer_ServicesContract] @RoKind , @ToDataBaseName, @UntilDate, @BeginDate, @RoundContractWithCheckNotCollection


	exec PrcSetProgrss 'äÞá ÝæÇÊíÑ ÇáßåÑÈÇÁ', 100, 60
	if @RoKind = 0 --Ýí ÍÇá ÊÏæíÑ ßÇãá ÇáÈíÇäÇÊ
	EXEC PrcTransferTable  'ElectricityBill',@ToDataBaseName

	EXEC PrcTransferTable  'Villa',@ToDataBaseName

	if @RoKind = 0 --Ýí ÍÇá ÊÏæíÑ ßÇãá ÇáÈíÇäÇÊ
	EXEC PrcTransferTable  'ChangeVillaRent',@ToDataBaseName

	if @RoKind = 0 --Ýí ÍÇá ÊÏæíÑ ßÇãá ÇáÈíÇäÇÊ
	EXEC PrcTransferTable  'ChangeVillaPrice',@ToDataBaseName

	if @RoKind = 0 --Ýí ÍÇá ÊÏæíÑ ßÇãá ÇáÈíÇäÇÊ
	EXEC PrcTransferTable  'Reminder',@ToDataBaseName, 'where Finished = 0'

	if @RoKind = 0 --Ýí ÍÇá ÊÏæíÑ ßÇãá ÇáÈíÇäÇÊ
	EXEC PrcTransferTable  'RealtyRestrained',@ToDataBaseName

	--insert into [LogFile] ([Opration]) Select '60'


	exec PrcSetProgrss 'äÞá ÃäãÇØ ÇáÓäÏÇÊ', 100, 65
	exec [PrcTransfer_Secondary_Entry] @RoKind , @ToDataBaseName, @UntilDate, @BeginDate, @RdReNumberSEntry

	exec PrcSetProgrss 'äÞá ÇáÓäÏÇÊ', 100, 55
	exec [PrcTransfer_Entry] @RoKind , @ToDataBaseName, @UntilDate, @BeginDate

	--ÚãÇá ÇáÕíÇäÉ
	EXEC PrcTransferTable  'MaintenanceWorker',@ToDataBaseName
	
		--ÇáÔßæì
	Set @V = '
	inner Join '+@ToDataBaseName+'..[Customer] Cu on Cu.Guid = [Tb].[CustGuid]
	inner Join '+@ToDataBaseName+'..[Apartment] P on P.Guid = [Tb].[FlatGuid]
	where
		[ComplaintState] = 0	
	'
	EXEC PrcTransferTable  'Complaint',@ToDataBaseName, @V
	
	Set @V = '
	inner Join '+@ToDataBaseName+'..[Customer] Cu on Cu.Guid = [Tb].[CustGuid]
	inner Join '+@ToDataBaseName+'..[Shop] P on P.Guid = [Tb].[ShopGuid]
	where
		[ComplaintState] = 0	
	'
	EXEC PrcTransferTable  'Complaint',@ToDataBaseName, @V

	Set @V = '
	inner Join '+@ToDataBaseName+'..[Customer] Cu on Cu.Guid = [Tb].[CustGuid]
	inner Join '+@ToDataBaseName+'..[Parking] P on P.Guid = [Tb].[ParkingGuid]
	where
		[ComplaintState] = 0	
	'
	EXEC PrcTransferTable  'Complaint',@ToDataBaseName, @V

	Set @V = '
	inner Join '+@ToDataBaseName+'..[Customer] Cu on Cu.Guid = [Tb].[CustGuid]
	inner Join '+@ToDataBaseName+'..[Villa] P on P.Guid = [Tb].[VillaGuid]
	where
		[ComplaintState] = 0	
	'
	EXEC PrcTransferTable  'Complaint',@ToDataBaseName, @V

	Set @V = '
	inner Join '+@ToDataBaseName+'..[Customer] Cu on Cu.Guid = [Tb].[CustGuid]
	inner Join '+@ToDataBaseName+'..[Earth] P on P.Guid = [Tb].[LandGuid]
	where
		[ComplaintState] = 0
	'
	EXEC PrcTransferTable  'Complaint',@ToDataBaseName, @V


	Set @V = '
	inner Join '+@ToDataBaseName+'..[Customer] Cu on Cu.Guid = [Tb].[CustGuid]
	inner Join '+@ToDataBaseName+'..[Building] P on P.Guid = [Tb].[BuildingGuid]
	where
		[ComplaintState] = 0 and [RealtyKind] = 5
	'
	EXEC PrcTransferTable  'Complaint',@ToDataBaseName, @V
	Set @V = 'exec ReNumberTable '''+@ToDataBaseName+'.dbo.Complaint'''+','+''''+'Number'+''''
	exec(@V)

	Set @V = '
	inner Join '+@ToDataBaseName+'..[Complaint] C on C.Guid = [Tb].[ComplaintGuid]
	'

	Set @V = @V + '
	where [OrderState] = 0'
	if (@RoKind = 2) --ÊÏæíÑ ãÚ äÞá ÇáÚãáíÇÊ ÇááÇÍÞÉ
	Set @V = @V + '
	or StartDate >'+''''+CAST(@UntilDate as varchar(255))+''''
	
	EXEC PrcTransferTable  'MaintenanceOrder',@ToDataBaseName, @V

	Set @V = 'exec ReNumberTable '''+@ToDataBaseName+'.dbo.MaintenanceOrder'''+','+''''+'Number'+''''
	exec(@V)

	--ÇáÏÚæì
	Set @V = '
	where [IsEnded] = 0'
	if (@RoKind = 2) --ÊÏæíÑ ãÚ äÞá ÇáÚãáíÇÊ ÇááÇÍÞÉ
	Set @V = @V + '
	or OpenDate >'+''''+CAST(@UntilDate as varchar(255))+''''

	EXEC PrcTransferTable  'lawsuit',@ToDataBaseName, @v
	Set @V = 'exec ReNumberTable '''+@ToDataBaseName+'.dbo.lawsuit'''+','+''''+'Number'+''''
	exec(@V)
	
	Set @V = '
	inner Join '+@ToDataBaseName+'..[Lawsuit] L on L.Guid = [Tb].[ParentGuid]
	'
	EXEC PrcTransferTable  'LawsuitExpense',@ToDataBaseName, @V
	Set @V = 'Update '+@ToDataBaseName+'..[LawsuitExpense] Set IsRounded = 1'
	exec(@V)

	Set @V = '
	inner Join '+@ToDataBaseName+'..[Lawsuit] L on L.Guid = [Tb].[ParentGuid]
	'
	EXEC PrcTransferTable  'LawsuitState',@ToDataBaseName, @V

	exec PrcSetProgrss 'äÞá ÇáÝæÇÊíÑ', 100, 75
	EXEC PrcTransferTable  'MatGroup',@ToDataBaseName
	EXEC PrcTransferTable  'Store',@ToDataBaseName
	
	EXEC PrcTransferTable  'Mat',@ToDataBaseName
	EXEC PrcTransferTable  'MatMinMax',@ToDataBaseName
	EXEC PrcTransferTable  'MatDescription',@ToDataBaseName
	EXEC PrcTransferTable  'MatDescriptionConfig',@ToDataBaseName
	EXEC PrcTransferTable  'MatUnitsPrice',@ToDataBaseName
	
	EXEC PrcTransferTable  'BillType',@ToDataBaseName
	EXEC PrcTransferTable  'BillTypeField',@ToDataBaseName
	EXEC PrcTransferTable  'BillTypePrivilege',@ToDataBaseName
	
	EXEC PrcTransferTable  'TransType',@ToDataBaseName
	EXEC PrcTransferTable  'TransTypeField',@ToDataBaseName
	EXEC PrcTransferTable  'TransTypePrivilege',@ToDataBaseName
	
	EXEC PrcTransferTable  'CalcQty',@ToDataBaseName
	EXEC PrcTransferTable  'QtyGroup',@ToDataBaseName

	EXEC PrcDeleteTable 'ReceiptOrderType',@ToDataBaseName
	
	exec PrcSetProgrss 'ÃæÇãÑ ÇáÞÈÖ', 100, 85
	Set @V = '
	inner Join '+@ToDataBaseName+'..[EntryType] L on L.Guid = [Tb].[EntryTypeGuid]
	'
	EXEC PrcTransferTable  'ReceiptOrderType',@ToDataBaseName, @V

	Set @V = '
	inner Join '+@ToDataBaseName+'..[ReceiptOrderType] T on T.Guid = [Tb].[ParentGuid]
	inner Join '+@ToDataBaseName+'..[Account] Ac on Ac.Guid = [Tb].[AccountGuid]
	'
	EXEC PrcTransferTable  'ReceiptOrderTypeDetail',@ToDataBaseName, @V
	
	Set @V = '
	inner Join '+@ToDataBaseName+'..[ReceiptOrderType] L on L.Guid = [Tb].[TypeGuid]
	'
	EXEC PrcTransferTable 'ReceiptOrderTypePrivilege',@ToDataBaseName, @V
	
	--ÕáÇÍíÇÊ ÇáÇÈäíÉ
	Set @V = '
	inner Join '+@ToDataBaseName+'..[Building] L on L.Guid = [Tb].BuildingGuid
	'
	EXEC PrcTransferTable  'BuildingPrivilege',@ToDataBaseName, @V
	
	exec PrcSetProgrss 'äÞá ÇáÃÕæá', 100, 90
	----ÇáÇÕæá
	exec PrcTransferCardAsstes 
		@RoKind ,
		@ToDataBaseName ,
		@UntilDate ,
		@BeginDate
	---------

	--ÇÚÇÏÉ ÊæáíÏ ÓäÏÇÊ ÇáÔíßÇÊ	
	if (@RoKind = 2) --ÊÏæíÑ ãÚ äÞá ÇáÚãáíÇÊ ÇááÇÍÞÉ
	begin
		Set @V = 'delete '+@ToDataBaseName+'..[Resource]'
		exec(@V)
		
		Set @V = '
		insert into '+@ToDataBaseName+'..[Resource]
		([Guid], [Kind])
		Select Guid, 1 from '+@ToDataBaseName+'..[CheckType]'
		exec (@v)

		Set @V = '
		exec '+@ToDataBaseName+'..PrcReCreateCheckEntry 
			@Date1 = 0,
			@Date2 = 0,
			@ActiveDate = 0,
			@Op_Check = 1,
			@Op_Post = 1,
			@Op_Collection = 1,
			@Op_PartCollection = 1,
			@Op_Endorsement = 1,
			@Op_Returned = 1,
			@UpdateCheckwithdefaultaccount = 0
			'
		
		print @v
		exec(@V) 
	end	
	
	exec ('Truncate Table '+@ToDataBaseName+'..'+'[TableNumber]')
	
	exec [PrcReNumberCard]
			1, --@Entry
			0,--FirstEntryNum
			0, --@EntryType
			0x0, --@EntryTypeGuid
			0, --@FirstEntryTypeNum
			0, --@ContractType
			0x0, --@ContractTypeGuid
			0, --@FirstContractTypeNum
			0, --@CheckType
			0x0, --@CheckTypeGuid
			0, --@FirstCheckTypeNum
			1, --@Flat
			1, --@Shop
			1, --@Parking
			1, --@Land
			1, --@Villa
			1, --@Account
			0x0, --@ElectricityBillType
			0x0, --@ElectricityBillTypeGuid
			1 --@Cus
	
	exec PrcSetProgrss 'ÅäÊåÇÁ äÞá ÇáÈØÇÞÇÊ', 100, 100
	
	
	Delete DMD_const where Vname = 'InRoundProcess'

	Set @V = 'Delete '+@ToDataBaseName+'..DMD_const where Vname = ''InRoundProcess'''
	exec(@V)
	
	Select 'End' as EndPros
	

GO
/****** Object:  StoredProcedure [dbo].[PrcTransferCheckCardType]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcTransferCheckCardType]
(
	@TypeGuid1 uniqueidentifier = 0x0,
	@TypeGuid2 uniqueidentifier = 0x0,
	@Date1 DateTime = '1/1/2007',
	@Date2 DateTime = '1/1/2012',
	@Num1 int = 0,
	@Num2 int = 0
)
  
as
	Declare @RC int

	Update [Checks] Set TypeGuid = @TypeGuid2, Number  = Null
	where
		TypeGuid = @TypeGuid1
		and ([date] between @Date1 and @Date2 or (@Date1 = 0 and @Date2 = 0))
		and ([Number] between @Num1 and @Num2 or @Num1 = 0)
		
	Set @RC = @@ROWCOUNT	

	Delete [Checks] 
	where
		TypeGuid = @TypeGuid1
		and ([date] between @Date1 and @Date2)
		and ([Number] between @Num1 and @Num2 or @Num1 = 0)
			
	Create Table #Tbl
	(
		[id] Int identity(1,1),
		Guid uniqueidentifier
	)

	Insert Into #Tbl
	([Guid])
	Select
		Guid
	From
		Checks
	where 
		IsNull(Number,-1) = -1
	Order By
		[Date]


	Declare @MaxNum int
	Set @MaxNum = (Select isNull(Max(Number),0) + 1 From Checks where TypeGuid = @TypeGuid2)
	
	Update Checks Set Number = @MaxNum + [id]
	From
		Checks gr
		inner join #Tbl t On t.Guid = gr.Guid	
		

	Select @RC As [RC]
		

GO
/****** Object:  StoredProcedure [dbo].[PrcTransferEntryCardType]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcTransferEntryCardType]
(
	@TypeGuid1 uniqueidentifier = 0x0,
	@TypeGuid2 uniqueidentifier = 0x0,
	@Date1 DateTime = '1/1/2007',
	@Date2 DateTime = '1/1/2012',
	@Num1 int = 0,
	@Num2 int = 0
)
  
as
	Declare @RC int

	Alter Table [Secondary_Entry] Drop [Secondary_Entry_Unique_Number] 
	
	Update [Secondary_Entry] Set TypeGuid = @TypeGuid2, Number  = Null
	where
		TypeGuid = @TypeGuid1
		and ([date] between @Date1 and @Date2 or (@Date1 = 0 and @Date2 = 0))
		and ([Number] between @Num1 and @Num2 or @Num1 = 0)
		
	Set @RC = @@ROWCOUNT	

	Delete [Secondary_Entry] 
	where
		TypeGuid = @TypeGuid1
		and ([date] between @Date1 and @Date2)
		and ([Number] between @Num1 and @Num2 or @Num1 = 0)
			
	Create Table #Tbl
	(
		[id] Int identity(1,1),
		Guid uniqueidentifier
	)

	Insert Into #Tbl
	([Guid])
	Select
		Guid
	From
		Secondary_Entry
	where 
		IsNull(Number,-1) = -1
	Order By
		[Date]


	Declare @MaxNum int
	Set @MaxNum = (Select isNull(Max(Number),0) + 1 From Secondary_Entry where TypeGuid = @TypeGuid2)
	
	Update Secondary_Entry Set Number = @MaxNum + [id]
	From
		Secondary_Entry gr
		inner join #Tbl t On t.Guid = gr.Guid	
		

	Alter Table [Secondary_Entry] Add
	CONSTRAINT [Secondary_Entry_Unique_Number] UNIQUE  NONCLUSTERED (Number,TypeGuid)	

	Select @RC As [RC]
		

GO
/****** Object:  StoredProcedure [dbo].[PrcTransferTable]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[PrcTransferTable]
(
	@TblName Varchar(256) = '',
	@ToDataBaseName Varchar(256) = '',
	@Condition Varchar(8000) = '',
	@WithDel bit = 1
)
  
as

	Declare @Msg Varchar(255)
	Set @Msg = @TblName
	exec PrcSetProgrss @Msg
	
	--Print '------------'+'Transfer Table '+@TblName+'-------------'
	
	if @TblName = '' Return 
	Declare @sql_txt Varchar(8000)

	if @WithDel = 1
	begin
	Set @sql_txt = 'Alter Table '+@ToDataBaseName+'.dbo.['+@TblName+'] Disable Trigger All'
	--Print @sql_txt
	exec(@sql_txt)

	if UPPER('Hentry') <> UPPER(@TblName)
	begin
		Set @sql_txt = 'Delete From '+@ToDataBaseName+'.dbo.'+@TblName
		exec(@sql_txt)
	end
	
	Set @sql_txt = 'Alter Table '+@ToDataBaseName+'.dbo.['+@TblName+'] Enable Trigger All'
	--Print @sql_txt
	exec(@sql_txt)
	end

	--insert 
	Declare @S varchar(8000), @ColType int
	Declare @ColName Varchar(200)
			,@Columns Varchar(3000)
			,@ColumnsValue Varchar(4000)

	set @Columns = ''
	set @ColumnsValue = ''

	DECLARE cursor_Name CURSOR FOR 
	SELECT 
		[c].[Name]
	FROM 
		SysColumns [C]
		inner join [sysobjects] [O] on [O].[id] = [C].[ID]
	where
		[O].[Name] = @TblName and [C].[Type] <> 56
	Order By [C].ColId
	
	OPEN cursor_Name
	FETCH NEXT FROM cursor_Name INTO @ColName
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
	  
		Set @Columns = @Columns + '['+@ColName+'], '
		Set @ColumnsValue = @ColumnsValue + '[Tb].['+@ColName+'], '
	  FETCH NEXT FROM cursor_Name INTO @ColName
	
	END
	
	CLOSE cursor_Name
	DEALLOCATE cursor_Name


	Set @Columns = left(@Columns,len(@Columns)-1)
	Set @ColumnsValue = left(@ColumnsValue,len(@ColumnsValue)-1)


	--Print 'Disable Index'
	exec PrcCheckIndex @ToDataBaseName, @TblName, 0 --Disable Index
	
	--print 'Begin Insert -------'
	
	Set @sql_txt = '
	insert into '+@ToDataBaseName+'.dbo.['+@TblName+'] 
	('+@Columns+')
	Select	
		'+@ColumnsValue+'
	From 	
		'+@TblName +' [Tb]
	'+IsNull(@Condition, '')

	--exec PrcAddTextTofile @sql_txt
	--Print @sql_txt
	exec(@sql_txt)
	--Print @@ROWCOUNT
	
	
	--Print 'Enable Index'
	exec PrcCheckIndex @ToDataBaseName, @TblName, 1 --Enable Index

GO
/****** Object:  StoredProcedure [dbo].[PrcTreeAccount]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcTreeAccount]
(
	@AcGuid uniqueidentifier = 0x0
)
  
as
	Declare @Level int
	Set @Level = Case when @AcGuid = 0x0 then 0 else 3 end

	Create Table #Res 
	(
		[Number] int, 
		[Guid] uniqueidentifier, 
		[Code] Varchar(256), 
		[Type] int, 
		[FinalGUID]uniqueidentifier,
		[LtnName] Varchar(256), 
		[Name] Varchar(256), 
		[ParentGuid]uniqueidentifier,
		[NSons] int,
		[CustGuid]uniqueidentifier,
		[FinalAccount]Varchar(256),
		[Path]  Varchar(256)
	)

	Select * into #fnGetAccountList from [dbo].[fnGetAccountList](@AcGuid)

	insert into #Res
	Select
		[A].[Number], 
		[A].[Guid], 
		[A].[Code], 
		[A].[Type], 
		[A].[FinalGUID], 
		[A].[LtnName],
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[LtnName],'') <> '') then [A].[LtnName] else [A].[Name] end as [Name], 
		case when [A].[ParentGuid] is Not Null then [A].[ParentGuid] else 0x0 end as [Parent],
		0 as [NSons],
		0x0 as [CustGuid],
		'' As [FinalAcount],
		[F].[Path]
	From 
		[vbAccount] [A]
		inner join [dbo].[#fnGetAccountList] [F] on [F].[Guid] = [A].[Guid]
--	where	(Len([Path]) / 9) between @Level and @Level + 3

	
	CREATE INDEX IXS_Guid ON #Res ([Guid])
	CREATE INDEX IXS_FinalGuid ON #Res ([FinalGuid])
	-----------------------------------------------------------------------------------

	UPDATE [R] SET   
 		[FinalAccount] = '('+[Ac].[Code] +'-'+ [Ac].[Name]+')'
 	FROM   
 		#Res [R]
		INNER JOIN [vwAccount] as [ac] ON [R].[FinalGuid] = [ac].[Guid]  


	-----------------------------------------------------------------------------------
	UPDATE [R] SET   
 		[CustGuid] = [Cu].[Guid]
 	FROM   
 		#Res [R]
		INNER JOIN [vwCustomer] as [Cu] ON [R].[Guid] = [Cu].[acGuid]  

	-----------------------------------------------------------------------------------


	UPDATE [R] SET   
 		[NSons] = [S].[NSons]
 	FROM   
 		#Res [R]
 		inner join (Select 
 						Count([Number]) as [NSons], 
						[ParentGuid] as [SGuid]
 					From 
 						[Account]
 					Group By
 						[ParentGuid]
 					) [S] On [S].[SGuid] = [R].[Guid]


	-----------------------------------------------------------------------------------
	/*
	Select 
		*
		,Len([Path]) / 9 as [level]
	from 
		#Res
	ORDER BY [Type], [Path]
	*/
		
	DROP INDEX IXS_Guid ON #Res WITH ( ONLINE = OFF )
	DROP INDEX IXS_FinalGuid ON #Res WITH ( ONLINE = OFF )
	
	CREATE INDEX IXS_Res_Path ON #Res ([Type], [Path])
	Alter Table #Res add Id int identity(1,1)
	
	Select
		*
		,Len([Path]) / 9 as [level]
		,(select id from #Res rp where rp.guid = r.Parentguid) as [ParentId]
	from 
		#Res r
	ORDER BY id
	

GO
/****** Object:  StoredProcedure [dbo].[PrcTreeAssets]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcTreeAssets]
(
	@AcGuid uniqueidentifier = 0x0
)
  
as
	Declare @Level int
	Set @Level = Case when @AcGuid = 0x0 then 0 else 3 end

	Create Table #Res 
	(
		[Number] int, 
		[Guid] uniqueidentifier, 
		[Type] int, 
		[Code] Varchar(256), 
		[Name] Varchar(256), 
		[LtnName] Varchar(256), 
		[ParentGuid]uniqueidentifier,
		[Path]  Varchar(256)
	)

	insert into #Res
	Select
		[A].[Number], 
		[A].[Guid], 
		1 as [Type], 
		[A].[Code], 
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[LtnName],'') <> '') then [A].[LtnName] else [A].[Name] end as [Name], 
		[A].[LtnName],
		case when [A].[ParentGuid] is Not Null then [A].[ParentGuid] else 0x0 end as [Parent],
		[F].[Path]
	From 
		[vbAssetsGroup] [A]
		inner join [dbo].[fnGetAssetsGroupList](@AcGuid) [F] on [F].[Guid] = [A].[Guid]


	insert into #Res
	Select
		[A].[Number], 
		[A].[Guid], 
		2 as [Type], 
		[A].[Code], 
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[LtnName],'') <> '') then [A].[LtnName] else [A].[Name] end as [Name], 
		[A].[LtnName],
		case when [A].[AssetsGroupGuid] is Not Null then [A].[AssetsGroupGuid] else 0x0 end as [Parent],
		[F].[Path]
	From 
		[vbAssets] [A]
		inner join [dbo].[fnGetAssetsGroupList](@AcGuid) [F] on [F].[Guid] = [A].[AssetsGroupGuid] 


	CREATE INDEX IXS_Guid ON #Res ([Guid])
	-----------------------------------------------------------------------------------

	Select 
		*
		,Len([Path]) / 9 as [level]
	from 
		#Res

	ORDER BY [Path], [Type], [Code]

GO
/****** Object:  StoredProcedure [dbo].[PrcTreeIncAccount]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcTreeIncAccount]
(
	@AcGuid uniqueidentifier = 0x0
)
 
as
	Declare @Level int
	Set @Level = Case when @AcGuid = 0x0 then 0 else 3 end

	Create Table #Res 
	(
		[Number] int, 
		[Guid] uniqueidentifier, 
		[Type] int, 
		[Code] Varchar(256), 
		[Name] Varchar(256), 
		[LtnName] Varchar(256), 
		[ParentGuid]uniqueidentifier,
		[Path]  Varchar(256)
	)

	insert into #Res
	Select
		[A].[Number], 
		[A].[Guid], 
		1 as [Type], 
		[A].[Code], 
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[LtnName],'') <> '') then [A].[LtnName] else [A].[Name] end as [Name], 
		[A].[LtnName],
		case when [A].[ParentGuid] is Not Null then [A].[ParentGuid] else 0x0 end as [Parent],
		[F].[Path]
	From 
		[vbIncAccount] [A]
		inner join [dbo].[fnGetIncAccountList](@AcGuid) [F] on [F].[Guid] = [A].[Guid]


	CREATE INDEX IXS_Guid ON #Res ([Guid])
	-----------------------------------------------------------------------------------

	Select 
		*
		,Len([Path]) / 9 as [level]
	from 
		#Res

	ORDER BY [Path], [Type], [Code]

GO
/****** Object:  StoredProcedure [dbo].[PrcTreeMat]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcTreeMat]
(
	@AcGuid uniqueidentifier = 0x0
)
  
as
	Declare @Level int
	Set @Level = Case when @AcGuid = 0x0 then 0 else 3 end

	Create Table #Res 
	(
		[Number] int, 
		[Guid] uniqueidentifier, 
		[Type] int, 
		[Code] Varchar(256) COLLATE database_default, 
		[Name] Varchar(256) COLLATE database_default, 
		[LtnName] Varchar(256) COLLATE database_default, 
		[ParentGuid]uniqueidentifier,
		[Path]  Varchar(256) COLLATE database_default
	)

	insert into #Res
	Select
		[A].[Number], 
		[A].[Guid], 
		1 as [Type], 
		[A].[Code], 
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[LtnName],'') <> '') then [A].[LtnName] else [A].[Name] end as [Name], 
		[A].[LtnName],
		case when [A].[ParentGuid] is Not Null then [A].[ParentGuid] else 0x0 end as [Parent],
		[F].[Path]
	From 
		[vbMatGroup] [A]
		inner join [dbo].[fnGetGroupList](@AcGuid) [F] on [F].[Guid] = [A].[Guid]

/*
	insert into #Res
	Select
		[A].[Number], 
		[A].[Guid], 
		2 as [Type], 
		[A].[Code], 
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[LtnName],'') <> '') then [A].[LtnName] else [A].[Name] end as [Name], 
		[A].[LtnName],
		case when [A].[GroupGuid] is Not Null then [A].[GroupGuid] else 0x0 end as [Parent],
		[F].[Path]
	From 
		[vbMat] [A]
		inner join [dbo].[fnGetGroupList](@AcGuid) [F] on [F].[Guid] = [A].[GroupGuid]
*/

	--CREATE INDEX IXS_Guid ON #Res ([Guid])
	-----------------------------------------------------------------------------------
	CREATE INDEX IXS_Res_Path ON #Res ([Path], [Type], [Code])
	Alter Table #Res add Id int identity(1,1)
	
	Select 
		*
		,Len([Path]) / 9 as [level]
		,(select id from #Res rp where rp.guid = r.Parentguid) as [ParentId]
	from 
		#Res r
	ORDER BY 
		Id
	
	

GO
/****** Object:  StoredProcedure [dbo].[PrcTreeMats]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcTreeMats]
(
	@AcGuid uniqueidentifier = 'FC3E0B64-1360-4359-8568-49126CA5F153'
)
  
as
	Declare @Level int
	Set @Level = Case when @AcGuid = 0x0 then 0 else 3 end

	Create Table #Res 
	(
		[Number] int, 
		[Guid] uniqueidentifier, 
		[Type] int, 
		[Code] Varchar(256) COLLATE database_default, 
		[Name] Varchar(256) COLLATE database_default, 
		[LtnName] Varchar(256) COLLATE database_default, 
		[ParentGuid]uniqueidentifier,
		[level] int,
		[Path]  Varchar(256) COLLATE database_default
	)

	insert into #Res
	Select
		[A].[Number], 
		[A].[Guid], 
		1 as [Type], 
		[A].[Code], 
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[LtnName],'') <> '') then [A].[LtnName] else [A].[Name] end as [Name], 
		[A].[LtnName],
		case when [A].[ParentGuid] is Not Null then [A].[ParentGuid] else 0x0 end as [Parent],
		f.level,
		[F].[Path]
	From 
		[vbMatGroup] [A]
		inner join [dbo].[fnGetGroupList](@AcGuid) [F] on [F].[Guid] = [A].[Guid]
	--where
	--	[Level] <= 1

/*
	insert into #Res
	Select
		[A].[Number], 
		[A].[Guid], 
		2 as [Type], 
		[A].[Code], 
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[LtnName],'') <> '') then [A].[LtnName] else [A].[Name] end as [Name], 
		[A].[LtnName],
		case when [A].[GroupGuid] is Not Null then [A].[GroupGuid] else 0x0 end as [Parent],
		[F].[Path]
	From 
		[vbMat] [A]
		inner join [dbo].[fnGetGroupList](@AcGuid) [F] on [F].[Guid] = [A].[GroupGuid]
*/

	--CREATE INDEX IXS_Guid ON #Res ([Guid])
	
	Delete #Res where Guid = @AcGuid
	-----------------------------------------------------------------------------------
	CREATE INDEX IXS_Res_Path ON #Res ([Path], [Type], [Code])
	Alter Table #Res add Id int identity(1,1)
	
	Select 
		*
		--,Len([Path]) / 9 as [level]
		,(select id from #Res rp where rp.guid = r.Parentguid) as [ParentId]
	from 
		#Res r
	ORDER BY 
		Id
	
	

GO
/****** Object:  StoredProcedure [dbo].[PrcTreeStore]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcTreeStore]
(
	@AcGuid uniqueidentifier = 0x0
)
  
as
	Declare @Level int
	Set @Level = Case when @AcGuid = 0x0 then 0 else 3 end

	Create Table #Res 
	(
		[Number] int, 
		[Guid] uniqueidentifier, 
		[Type] int, 
		[Code] Varchar(256) COLLATE database_default, 
		[Name] Varchar(256) COLLATE database_default, 
		[LtnName] Varchar(256) COLLATE database_default, 
		[ParentGuid]uniqueidentifier,
		[Path]  Varchar(256) COLLATE database_default
	)

	insert into #Res
	Select
		[A].[Number], 
		[A].[Guid], 
		1 as [Type], 
		[A].[Code], 
		Case when (dbo.FnGetLangauge(@@spid) = 1) and (Isnull([A].[LtnName],'') <> '') then [A].[LtnName] else [A].[Name] end as [Name], 
		[A].[LtnName],
		case when [A].[ParentGuid] is Not Null then [A].[ParentGuid] else 0x0 end as [Parent],
		[F].[Path]
	From 
		[vbStore] [A]
		inner join [dbo].[fnGetStoreList](@AcGuid) [F] on [F].[Guid] = [A].[Guid]


	CREATE INDEX IXS_Guid ON #Res ([Guid])
	-----------------------------------------------------------------------------------

	Select 
		*
		,Len([Path]) / 9 as [level]
	from 
		#Res

	ORDER BY [Path], [Type], [Code]

GO
/****** Object:  StoredProcedure [dbo].[PrcUpdateAccountBalance]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create Procedure [dbo].[PrcUpdateAccountBalance]
(
	@AccountGuid uniqueidentifier = 0x0
)
as
	alter Table Account disable trigger all
	
	Select
		Ac.Guid,
		isNull(Sum(D.Debit * Case when ac.CurrencyGUID <> D.CurrencyGuid then D.CurrencyVal / Case when ac.CurrencyVal <> 0 then ac.CurrencyVal else 1 end else 1 end ),0) as SumDebit, 
		isNull(Sum( D.Credit * Case when ac.CurrencyGUID <> D.CurrencyGuid then D.CurrencyVal / Case when ac.CurrencyVal <> 0 then ac.CurrencyVal else 1 end else 1 end ),0) as SumCredit
	into #AcBalance
	from
		Account Ac
		inner join DEntry D on D.AcGuid = Ac.Guid
		inner join HEntry h on h.Guid = D.ParentGuid
	where
		H.IsPosted = 1
		and (Ac.Guid = @AccountGuid or @AccountGuid = 0x0)
	Group By
		Ac.Guid

	update Account 
	Set 
		SumDebit = 0,
		SumCredit = 0
	from
		Account Ac

	update Account 
	Set 
		SumDebit = isNull(D.SumDebit,0),
		SumCredit = isNull(D.SumCredit,0)
	from
		Account Ac
		inner join #AcBalance D on D.Guid = Ac.Guid
		
	alter Table Account Enable trigger all

GO
/****** Object:  StoredProcedure [dbo].[PrcUpDateAccountNSons]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create Procedure [dbo].[PrcUpDateAccountNSons]
(
	@AccountGuid uniqueidentifier = 0x0
)
as
	Select 
		Count([Number]) as [NSons], 
		[ParentGuid] as [SGuid]
	into #AcNson
	From 
		[Account]
	where
		[ParentGuid] = @AccountGuid or @AccountGuid = 0x0
	Group By
		[ParentGuid]
							
	Alter Table [Account] Disable trigger all
	
	update [Account] set [NSons] = 0
	where
		Guid = @AccountGuid or @AccountGuid = 0x0
	
	update [Account] set 
		[NSons] = Isnull([S].[NSons],0)
	From 
		[Account] [A]
		inner join #AcNson [S] On [S].[SGuid] = [A].[Guid]
	where
		Guid = @AccountGuid or @AccountGuid = 0x0

	Alter Table [Account] Enable trigger all


GO
/****** Object:  StoredProcedure [dbo].[PrcUpDateCountCurrentContract]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[PrcUpDateCountCurrentContract]
  
as

	Alter Table [LeaseApartment] Disable Trigger all

	Select 
		CustomerGuid,
		ApartmentGuid,
		IsNull(COUNT(*),0) as [Count]
	into #CountCurrentContract
	From 
		[LeaseApartment]
	Group By
		CustomerGuid,
		ApartmentGuid
	
	update [LeaseApartment] Set CountCurrentContract = [Count]
	From
		[LeaseApartment] C
		inner join #CountCurrentContract L on l.CustomerGuid = C.CustomerGuid
												and L.ApartmentGuid = C.ApartmentGuid
												
	Alter Table [LeaseApartment] enable Trigger all


GO
/****** Object:  StoredProcedure [dbo].[PrcUpdateFlatContractCreateEntryimmediate]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcUpdateFlatContractCreateEntryimmediate]
(
	@Date1 DateTime = '3/1/2011',
	@Date2 DateTime = '3/1/2012',
	@ActiveDate bit = 0,
	@Datewith int = 0,
	@Num1 int = 1,
	@Num2 int = 100,
	@ActiveNum bit = 1
)
  
as
	Alter Table [LeaseApartment] Disable Trigger All
	
	update [LeaseApartment]
	Set
		CreateContractEntry = Case when IsRounded = 0 and t.CreateEntry = 1 then 1 else 0 end
	From
		[LeaseApartment] L
		inner join [ContractType] T on T.Guid = L.TypeGuid
		inner join [Resource] R on R.Guid = L.TypeGuid and R.Spid = @@SPID
	where
		((L.number between @num1 and @Num2) or @ActiveNum = 0)
		and (
			(
				([L].[FromDate] between @Date1 and @Date2 and @Datewith = 0)
			)
			or
			(
				([L].[ToDate] between @Date1 and @Date2 and @Datewith = 1)
			)

			or
			(
				([L].[ContractFinishDate] between @Date1 and @Date2 and @Datewith = 2)
				and ([L].[ContractFinish] = 1)
			)

			or
			(
				([L].[EditDate] between @Date1 and @Date2 and @Datewith = 3)
			)
			or
			(
				([L].[AcquittancePrintdate] between @Date1 and @Date2 and @Datewith = 4)
			)

			or
			(
				([L].LeaveDate between @Date1 and @Date2 and @Datewith = 5)
			)
			or @ActiveDate = 0
		) 
		
		Alter Table [LeaseApartment] Enable Trigger All


GO
/****** Object:  StoredProcedure [dbo].[PrcUpdateFlatContractWithDefaultType]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcUpdateFlatContractWithDefaultType]
(
	@Date1 DateTime = '3/1/2011',
	@Date2 DateTime = '3/1/2012',
	@ActiveDate bit = 0,
	@Datewith int = 0,
	@Num1 int = 1,
	@Num2 int = 100,
	@ActiveNum bit = 1
)
  
as
	Alter Table [LeaseApartment] Disable Trigger All
	
	update [LeaseApartment]
	Set
		RevenueAccountGuid = Case when T.RevenueAccountGuid is Not Null then T.RevenueAccountGuid else L.RevenueAccountGuid end
		,AcCommissionFromCustGuid = Case when T.AcCommissionFromCustGuid is Not Null then T.AcCommissionFromCustGuid else L.AcCommissionFromCustGuid end
		,AcCommissionFromOwnerGuid = Case when T.AcCommissionFromOwnerGuid is Not Null then T.AcCommissionFromOwnerGuid else L.AcCommissionFromOwnerGuid end
		,AccountContractPrice = Case when T.AccountContractPriceGuid is Not Null then T.AccountContractPriceGuid else L.AccountContractPrice end
		,AccountCertificatValue = Case when T.AccountCertificatValueGuid is Not Null then T.AccountCertificatValueGuid else L.AccountCertificatValue end
		,FineAccount = Case when T.FineAccountGuid is Not Null then T.FineAccountGuid else L.FineAccount end
		,DiscountAccountGuid = Case when T.DiscountAccountGuid is Not Null then T.DiscountAccountGuid else L.DiscountAccountGuid end
		,OtherFeeAccountGUID = Case when T.TaxAccount is Not Null then T.TaxAccount else L.OtherFeeAccountGUID end
		,InsuranceAccountGUID = Case when T.InsuranceAccountGuid is Not Null then T.InsuranceAccountGuid else L.InsuranceAccountGUID end
		,AcIncomNextYearGuid = Case when T.AcIncomNextYearGuid is Not Null then T.AcIncomNextYearGuid else L.AcIncomNextYearGuid end
	From
		[LeaseApartment] L
		inner join [ContractType] T on T.Guid = L.TypeGuid
		inner join [Resource] R on R.Guid = L.TypeGuid and R.Spid = @@SPID
	where
		((L.number between @num1 and @Num2) or @ActiveNum = 0)
		and (
			(
				([L].[FromDate] between @Date1 and @Date2 and @Datewith = 0)
			)
			or
			(
				([L].[ToDate] between @Date1 and @Date2 and @Datewith = 1)
			)

			or
			(
				([L].[ContractFinishDate] between @Date1 and @Date2 and @Datewith = 2)
				and ([L].[ContractFinish] = 1)
			)

			or
			(
				([L].[EditDate] between @Date1 and @Date2 and @Datewith = 3)
			)
			or
			(
				([L].[AcquittancePrintdate] between @Date1 and @Date2 and @Datewith = 4)
			)

			or
			(
				([L].LeaveDate between @Date1 and @Date2 and @Datewith = 5)
			)
			or @ActiveDate = 0
		) 
		

	update [LeaseApartment]
	Set
		RevenueAccountGuid = S.AccountCommIncomeGuid,
		AcCommissionFromOwnerGuid = S.AcCommissionFromOwnerGuid
	From
		[LeaseApartment] L
		inner join vwShop S on S.Guid = L.ApartmentGuid
		inner join [ContractType] T on T.Guid = L.TypeGuid
		inner join [Resource] R on R.Guid = L.TypeGuid and R.Spid = @@SPID
	where
		(
			(S.BuildingOpOwner = 4) and (BuildingOwnerName is Not Null)
		)
		and ((L.number between @num1 and @Num2) or @ActiveNum = 0)
		and (
			(
				([L].[FromDate] between @Date1 and @Date2 and @Datewith = 0)
			)
			or
			(
				([L].[ToDate] between @Date1 and @Date2 and @Datewith = 1)
			)

			or
			(
				([L].[ContractFinishDate] between @Date1 and @Date2 and @Datewith = 2)
				and ([L].[ContractFinish] = 1)
			)

			or
			(
				([L].[EditDate] between @Date1 and @Date2 and @Datewith = 3)
			)
			or
			(
				([L].[AcquittancePrintdate] between @Date1 and @Date2 and @Datewith = 4)
			)

			or
			(
				([L].LeaveDate between @Date1 and @Date2 and @Datewith = 5)
			)
			or @ActiveDate = 0
		) 
		

	update [LeaseApartment]
	Set
		RevenueAccountGuid = S.AccountCommIncomeGuid,
		AcCommissionFromOwnerGuid = S.AcCommissionFromOwnerGuid
	From
		[LeaseApartment] L
		inner join vwApartmentFull S on S.Guid = L.ApartmentGuid
		inner join [ContractType] T on T.Guid = L.TypeGuid
		inner join [Resource] R on R.Guid = L.TypeGuid and R.Spid = @@SPID
	where
		(
			(S.BuildingOpOwner = 4) and (BuildingOwnerName is Not Null)
		)
		and ((L.number between @num1 and @Num2) or @ActiveNum = 0)
		and (
			(
				([L].[FromDate] between @Date1 and @Date2 and @Datewith = 0)
			)
			or
			(
				([L].[ToDate] between @Date1 and @Date2 and @Datewith = 1)
			)

			or
			(
				([L].[ContractFinishDate] between @Date1 and @Date2 and @Datewith = 2)
				and ([L].[ContractFinish] = 1)
			)

			or
			(
				([L].[EditDate] between @Date1 and @Date2 and @Datewith = 3)
			)
			or
			(
				([L].[AcquittancePrintdate] between @Date1 and @Date2 and @Datewith = 4)
			)

			or
			(
				([L].LeaveDate between @Date1 and @Date2 and @Datewith = 5)
			)
			or @ActiveDate = 0
		) 

		Alter Table [LeaseApartment] Enable Trigger All


GO
/****** Object:  StoredProcedure [dbo].[PrcUpDateIncAccountDetailAcForOneAccount]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcUpDateIncAccountDetailAcForOneAccount]
(
	@AccountGuid uniqueidentifier = '375AAD94-0B6B-456A-BFA1-6DAC550C96A2',
	@IncAccountGuid uniqueidentifier = '87D2C3B2-4B45-4D7A-8311-1F00608104DC'
)
  
AS

	if 1 = 2
	Select 
			ac.Code,
			ac.Name,
			dc.*
	From
		fnGetAccountParents(@AccountGuid) A
		inner join Account ac on ac.Guid = a.Guid
		left join [IncAccountDetailAc] dc on dc.[AccountGuid] = a.Guid
	where
		dc.Number is Not Null
					
	Declare @Rf int
	
	Delete [IncAccountDetailAc]
	where
		AccountGuid = @AccountGuid	
		
	Set @RF = @@Rowcount
		
	if Not exists(
	Select 
		* 
	From 
		[IncAccountDetailAc] d
		inner join dbo.fnGetAccountParents(@AccountGuid) ac on ac.Guid = d.AccountGuid
	where
		d.parentGuid = @IncAccountGuid)
	
	insert into [IncAccountDetailAc]
	([Number],[ParentGuid],[AccountGuid])
	Select
		(Select isNull(Max(Number) ,0) + 1 from [IncAccountDetailAc] where ParentGuid = @IncAccountGuid),
		@IncAccountGuid,
		@AccountGuid
	
	Set @RF = isNull(@RF,0) + @@Rowcount	
	
	if (isNull(@Rf,0) <> 0)
	exec [PrcGetIncAccountListDetail]
	

GO
/****** Object:  StoredProcedure [dbo].[PrcUpdateLandContractCreateEntryimmediate]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcUpdateLandContractCreateEntryimmediate]
(
	@Date1 DateTime = '3/1/2011',
	@Date2 DateTime = '3/1/2012',
	@ActiveDate bit = 0,
	@Datewith int = 0,
	@Num1 int = 1,
	@Num2 int = 100,
	@ActiveNum bit = 1
)
  
as
	Alter Table [LandContract] Disable Trigger All
	
	update [LandContract]
	Set
		CreateContractEntry = Case when IsRounded = 0 and t.CreateEntry = 1 then 1 else 0 end
	From
		[LandContract] L
		inner join [ContractType] T on T.Guid = L.TypeGuid
		inner join [Resource] R on R.Guid = L.TypeGuid and R.Spid = @@SPID
	where
		((L.number between @num1 and @Num2) or @ActiveNum = 0)
		and (
			(
				([L].[FromDate] between @Date1 and @Date2 and @Datewith = 0)
			)
			or
			(
				([L].[ToDate] between @Date1 and @Date2 and @Datewith = 1)
			)

			or
			(
				([L].[ContractFinishDate] between @Date1 and @Date2 and @Datewith = 2)
				and ([L].[ContractFinish] = 1)
			)

			or
			(
				([L].[EditDate] between @Date1 and @Date2 and @Datewith = 3)
			)
			or
			(
				([L].[AcquittancePrintdate] between @Date1 and @Date2 and @Datewith = 4)
			)

			or
			(
				([L].LeaveDate between @Date1 and @Date2 and @Datewith = 5)
			)
			or @ActiveDate = 0
		) 
		
		Alter Table [LandContract] Enable Trigger All


GO
/****** Object:  StoredProcedure [dbo].[PrcUpdateLandContractWithDefaultType]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcUpdateLandContractWithDefaultType]
(
	@Date1 DateTime = '3/1/2011',
	@Date2 DateTime = '3/1/2012',
	@ActiveDate bit = 0,
	@Datewith int = 0,
	@Num1 int = 1,
	@Num2 int = 100,
	@ActiveNum bit = 1
)
  
as
	Alter Table [LandContract] Disable Trigger All
	
	update [LandContract]
	Set
		RevenueAccountGuid = Case when T.RevenueAccountGuid is Not Null then T.RevenueAccountGuid else L.RevenueAccountGuid end
		,AcCommissionFromCustGuid = Case when T.AcCommissionFromCustGuid is Not Null then T.AcCommissionFromCustGuid else L.AcCommissionFromCustGuid end
		,AcCommissionFromOwnerGuid = Case when T.AcCommissionFromOwnerGuid is Not Null then T.AcCommissionFromOwnerGuid else L.AcCommissionFromOwnerGuid end
		,AccountContractPrice = Case when T.AccountContractPriceGuid is Not Null then T.AccountContractPriceGuid else L.AccountContractPrice end
		,AccountCertificatValue = Case when T.AccountCertificatValueGuid is Not Null then T.AccountCertificatValueGuid else L.AccountCertificatValue end
		,FineAccount = Case when T.FineAccountGuid is Not Null then T.FineAccountGuid else L.FineAccount end
		,DiscountAccountGuid = Case when T.DiscountAccountGuid is Not Null then T.DiscountAccountGuid else L.DiscountAccountGuid end
		,OtherFeeAccountGUID = Case when T.TaxAccount is Not Null then T.TaxAccount else L.OtherFeeAccountGUID end
		--,InsuranceAccountGUID = Case when T.InsuranceAccountGuid is Not Null then T.InsuranceAccountGuid else L.InsuranceAccountGUID end
		,AcIncomNextYearGuid = Case when T.AcIncomNextYearGuid is Not Null then T.AcIncomNextYearGuid else L.AcIncomNextYearGuid end
	From
		[LandContract] L
		inner join [ContractType] T on T.Guid = L.TypeGuid
		inner join [Resource] R on R.Guid = L.TypeGuid and R.Spid = @@SPID
	where
		((L.number between @num1 and @Num2) or @ActiveNum = 0)
		and (
			(
				([L].[FromDate] between @Date1 and @Date2 and @Datewith = 0)
			)
			or
			(
				([L].[ToDate] between @Date1 and @Date2 and @Datewith = 1)
			)

			or
			(
				([L].[ContractFinishDate] between @Date1 and @Date2 and @Datewith = 2)
				and ([L].[ContractFinish] = 1)
			)

			or
			(
				([L].[EditDate] between @Date1 and @Date2 and @Datewith = 3)
			)
			or
			(
				([L].[AcquittancePrintdate] between @Date1 and @Date2 and @Datewith = 4)
			)

			or
			(
				([L].LeaveDate between @Date1 and @Date2 and @Datewith = 5)
			)
			or @ActiveDate = 0
		) 
		
		Alter Table [LandContract] Enable Trigger All


GO
/****** Object:  StoredProcedure [dbo].[PrcUpdateMatPrice]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[PrcUpdateMatPrice]
(
	@GroupGuid uniqueidentifier = 0x0,
	@MatGuid uniqueidentifier = 0x0,
 	@StoreGuid uniqueidentifier = 0x0
)
  
as
	Declare @Unit int Set @Unit = 0
			
	Select 
		Bu.buDate as BuDate,
				Case when @Unit = 1 then [d].[Qty]
			 when @Unit = 2 then [d].[Qty2]
			 when @Unit = 3 then [d].[Qty3]
			 when @Unit = 0 then 
								Case when mt.[DefUnity] = 1 then [d].[Qty]
									 when mt.[DefUnity] = 2 then [d].[Qty2]
									 when mt.[DefUnity] = 3 then [d].[Qty3]
								end
		end * [BtInOut] as [Qty],

		Case when @Unit = 1 then [d].[Price]
			 when @Unit = 2 then [d].[Price] / Case when mt.[UnityFact2] <> 0 then mt.[UnityFact2] end
			 when @Unit = 3 then [d].[Price] / Case when mt.[UnityFact3] <> 0 then mt.[UnityFact3] end
			 when @Unit = 0 then 
								Case when mt.[DefUnity] = 1 then [d].[Price]
									 when mt.[DefUnity] = 2 then [d].[Price] / Case when mt.[UnityFact2] <> 0 then mt.[UnityFact2] end
									 when mt.[DefUnity] = 3 then [d].[Price] / Case when mt.[UnityFact3] <> 0 then mt.[UnityFact3] end
								end	
		end 
		*
		Case 
			when bu.[buCurrencyGuid] = mt.[CurrencyGuid] then 1
			else
			bu.buCurrencyval / Case when mt.Currencyval <> 0 then mt.Currencyval end
		end
		 * [BtInOut] as [Price],
		BtInOut,		btBillKind,		[D].[MatGuid]	into #TmpMatPrice	From
		[vwbill] Bu
		inner join [BillDetail] D on d.ParentGuid = buGuid
		inner join [Mat] mt on mt.Guid = d.MatGuid
		--inner join [Resource] rs on rs.Guid = d.MatGuid and rs.spid = @@spid
	where
		(BuisPosted = 1)
		and (mt.MatType = 0 )
		and ([btPriceEffected] = 1)

	--Select * from #TmpMatPrice
	
	Create Table #AvgPriceTbl 
	(	
		[BuDate] Datetime,
		[BuNumber] int,
		[BiNumber] int,
		[matGuid] uniqueidentifier,
		[BuGuid] uniqueidentifier,
		[AvgPrice] Float
	)

	Delete [Resource] where Spid = @@Spid
	insert into [Resource] 
	(Guid)
	Select Guid from billtype

	insert into #AvgPriceTbl
	exec PrcCalcAvgPrice @GroupGuid,
						 @MatGuid,
 						 @StoreGuid,
						 0x0, --@CostGuid,
						 '', --@Class,
						 0 ,--@Unit,
						 2, --@BillPost,
						 0x0 ,--@CurrencyGuid,
						 1 ,--@CurrencyVal,
						 0 ,-- @CkDate,
						 0,--@Date1,
						 0--@Date2 
						 
	CREATE CLUSTERED INDEX #IX_AvgPriceTbl ON #AvgPriceTbl([budate], [BuNumber], [MatGuid])

	Alter Table #AvgPriceTbl add id int identity(1,1)
	Select Max(Id) as id, MatGuid into #MaxMatGuidavgPrice from #AvgPriceTbl group by MatGuid
	--Select * from #MaxMatGuidavgPrice
	
	Select
		v.matGuid,
		p.avgPrice
	into #TblMatLastAvgPrice
	From
		#MaxMatGuidavgPrice V
		inner join #AvgPriceTbl P on v.MatGuid = p.MatGuid and p.id = v.id
		
	/*
	Select
		[MatGuid],
		Sum([Qty] * [Price]) / Case when Sum([Qty]) <> 0 then Sum([Qty]) end as [avgPrice]
	into #TmpAvgPrice
	From
		#TmpMatPrice
	Group By
		[MatGuid]
		
	Select * from #TmpAvgPrice*/
	
	update Mat
	Set
		AvgPrice = t.AvgPrice
	From
		mat mt 
		inner join #TblMatLastAvgPrice T on T.matGuid = mt.Guid
		
	Select
		[MatGuid],
		Max(BuDate) as [MaxDate]
	into #tmpLastDate
	From
		#TmpMatPrice
	where	
		([btBillKind] in (0,2,4))
	Group By
		[MatGuid]
	
	Select
		T.MatGuid,
		Max(T.Price) as LastPrice,
		m.MaxDate
	into #tmpLastPrice
	From
		#tmpLastDate M
		inner join #TmpMatPrice T on T.budate = M.MaxDate and M.MatGuid = T.MatGuid
	where	
		([btBillKind] in (0,2,4))
	Group By
		T.MatGuid,
		m.MaxDate
	
	
	update Mat
	Set
		LastPrice = t.LastPrice,
		LastPriceDate = t.MaxDate
	From
		mat mt 
		inner join #tmpLastPrice T on T.matGuid = mt.Guid
		

	Select
		T.MatGuid,
		Max(T.Price) as MaxPrice
	into #tmpMaxPrice
	From
		#TmpMatPrice T
	where	
		([btBillKind] in (0,2,4))
	Group By
		T.MatGuid

	update Mat
	Set
		MaxPrice = t.MaxPrice
	From
		mat mt 
		inner join #TmpMaxPrice T on T.matGuid = mt.Guid


	--æÓØí ÇáÈíÚ
	Select
		[MatGuid],
		-Sum([Qty] * [Price]) / Case when Sum([Qty]) <> 0 then Sum([Qty]) end as [avgPrice]
	into #TmpòSaleAvgPrice
	From
		#TmpMatPrice
	where	
		([btBillKind] in (1,3,5))
	Group By
		[MatGuid]
		
	update Mat
	Set
		SaleAvgPrice = t.AvgPrice
	From
		mat mt 
		inner join #TmpòSaleAvgPrice T on T.matGuid = mt.Guid

	Select
		[MatGuid],
		Max(BuDate) as [MaxDate]
	into #tmpSaleLastDate
	From
		#TmpMatPrice
	where	
		([btBillKind] in (1,3,5))
	Group By
		[MatGuid]
	
	Select
		T.MatGuid,
		Max(-T.Price) as LastPrice,
		m.MaxDate
	into #tmpSaleLastPrice
	From
		#tmpSaleLastDate M
		inner join #TmpMatPrice T on T.budate = M.MaxDate and M.MatGuid = T.MatGuid
	where	
		([btBillKind] in (1,3,5))
	Group By
		T.MatGuid,
		m.MaxDate
	
	
	update Mat
	Set
		SaleLastPrice = t.LastPrice,
		SaleLastPriceDate = t.MaxDate
	From
		mat mt 
		inner join #tmpSaleLastPrice T on T.matGuid = mt.Guid
		

	Select
		T.MatGuid,
		Max(-T.Price) as MaxPrice
	into #tmpSaleMaxPrice
	From
		#TmpMatPrice T
	where	
		([btBillKind] in (1,3,5))
	Group By
		T.MatGuid

	update Mat
	Set
		SaleMaxPrice = t.MaxPrice
	From
		mat mt 
		inner join #TmpSaleMaxPrice T on T.matGuid = mt.Guid


GO
/****** Object:  StoredProcedure [dbo].[PrcUpdateNameCostChild]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcUpdateNameCostChild]
(
	@BuildingGuid uniqueidentifier = 'B49C15C4-7419-453D-AEB9-60C2475A9A14',
	@NewName Varchar(256) = 'ÎÑÝÇä',
	@NewLtnName Varchar(256) = 'Karfan'
)
  
as
	Declare @OldName Varchar(256),
			@OldLtnName Varchar(256),
			@BuildingCostGuid uniqueidentifier
			
	Select 
		@OldName = [Name],
		@OldLtnName = [ltnName],
		@BuildingCostGuid = CostGuid
	From 
		[Building]
	where
		Guid = @BuildingGuid
		
	if IsNull(@BuildingCostGuid,0x0) = 0x0
	return
	
	
	Update
		[Cost]
	Set
		Name = REPLACE(Name, @OldName, @NewName),
		LtnName = REPLACE(LtnName, @OldLtnName, @NewLtnName)
	From	
		Cost C
		inner join dbo.fnGetCostList(@BuildingCostGuid) L on L.GUID = C.Guid
	where
		L.GUID <> @BuildingCostGuid
		

GO
/****** Object:  StoredProcedure [dbo].[PrcUpdateParkingContractCreateEntryimmediate]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcUpdateParkingContractCreateEntryimmediate]
(
	@Date1 DateTime = '3/1/2011',
	@Date2 DateTime = '3/1/2012',
	@ActiveDate bit = 0,
	@Datewith int = 0,
	@Num1 int = 1,
	@Num2 int = 100,
	@ActiveNum bit = 1
)
  
as
	Alter Table [ParkingContract] Disable Trigger All
	
	update [ParkingContract]
	Set
		CreateContractEntry = Case when IsRounded = 0 and t.CreateEntry = 1 then 1 else 0 end
	From
		[ParkingContract] L
		inner join [ContractType] T on T.Guid = L.TypeGuid
		inner join [Resource] R on R.Guid = L.TypeGuid and R.Spid = @@SPID
	where
		((L.number between @num1 and @Num2) or @ActiveNum = 0)
		and (
			(
				([L].[FromDate] between @Date1 and @Date2 and @Datewith = 0)
			)
			or
			(
				([L].[ToDate] between @Date1 and @Date2 and @Datewith = 1)
			)

			or
			(
				([L].[ContractFinishDate] between @Date1 and @Date2 and @Datewith = 2)
				and ([L].[ContractFinish] = 1)
			)

			or
			(
				([L].[EditDate] between @Date1 and @Date2 and @Datewith = 3)
			)
			
			
			or @ActiveDate = 0
		) 
		
		Alter Table [ParkingContract] Enable Trigger All


GO
/****** Object:  StoredProcedure [dbo].[PrcUpdateParkingContractWithDefaultType]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcUpdateParkingContractWithDefaultType]
(
	@Date1 DateTime = '3/1/2011',
	@Date2 DateTime = '3/1/2012',
	@ActiveDate bit = 0,
	@Datewith int = 0,
	@Num1 int = 1,
	@Num2 int = 100,
	@ActiveNum bit = 1
)
  
as
	Alter Table [ParkingContract] Disable Trigger All
	
	update [ParkingContract]
	Set
		RevenueAccountGuid = Case when T.RevenueAccountGuid is Not Null then T.RevenueAccountGuid else L.RevenueAccountGuid end
		,AcCommissionFromCustGuid = Case when T.AcCommissionFromCustGuid is Not Null then T.AcCommissionFromCustGuid else L.AcCommissionFromCustGuid end
		,AcCommissionFromOwnerGuid = Case when T.AcCommissionFromOwnerGuid is Not Null then T.AcCommissionFromOwnerGuid else L.AcCommissionFromOwnerGuid end
		,AccountContractPrice = Case when T.AccountContractPriceGuid is Not Null then T.AccountContractPriceGuid else L.AccountContractPrice end
		,AccountCertificatValue = Case when T.AccountCertificatValueGuid is Not Null then T.AccountCertificatValueGuid else L.AccountCertificatValue end
		,FineAccount = Case when T.FineAccountGuid is Not Null then T.FineAccountGuid else L.FineAccount end
		,AcIncomNextYearGuid = Case when T.AcIncomNextYearGuid is Not Null then T.AcIncomNextYearGuid else L.AcIncomNextYearGuid end
	From
		[ParkingContract] L
		inner join [ContractType] T on T.Guid = L.TypeGuid
		inner join [Resource] R on R.Guid = L.TypeGuid and R.Spid = @@SPID
	where
		((L.number between @num1 and @Num2) or @ActiveNum = 0)
		and (
			(
				([L].[FromDate] between @Date1 and @Date2 and @Datewith = 0)
			)
			or
			(
				([L].[ToDate] between @Date1 and @Date2 and @Datewith = 1)
			)

			or
			(
				([L].[ContractFinishDate] between @Date1 and @Date2 and @Datewith = 2)
				and ([L].[ContractFinish] = 1)
			)

			or
			(
				([L].[EditDate] between @Date1 and @Date2 and @Datewith = 3)
			)
			or @ActiveDate = 0
		) 
		
		Alter Table [ParkingContract] Enable Trigger All


GO
/****** Object:  StoredProcedure [dbo].[PrcUpdateServicesContractCreateEntryimmediate]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcUpdateServicesContractCreateEntryimmediate]
(
	@Date1 DateTime = '3/1/2011',
	@Date2 DateTime = '3/1/2012',
	@ActiveDate bit = 0,
	@Datewith int = 0,
	@Num1 int = 1,
	@Num2 int = 100,
	@ActiveNum bit = 0
)
  
as
	Alter Table [ServicesContract] Disable Trigger All
	
	update [ServicesContract]
	Set
		CreateContractEntry = Case when IsNull(IsRounded,0) = 0 and t.CreateEntry = 1 then 1 else 0 end
	From
		[ServicesContract] L
		inner join [ServicesContractType] T on T.Guid = L.TypeGuid
		inner join [Resource] R on R.Guid = L.TypeGuid and R.Spid = @@SPID
	where
		((L.number between @num1 and @Num2) or @ActiveNum = 0)
		and (
			(
				([L].[FromDate] between @Date1 and @Date2 and @Datewith = 0)
			)
			or
			(
				([L].[ToDate] between @Date1 and @Date2 and @Datewith = 1)
			)

			or
			(
				([L].[ContractFinishDate] between @Date1 and @Date2 and @Datewith = 2)
				and ([L].[ContractFinish] = 1)
			)

			or
			(
				([L].[EditDate] between @Date1 and @Date2 and @Datewith = 3)
			)
			or
			(
				([L].[AcquittancePrintdate] between @Date1 and @Date2 and @Datewith = 4)
			)

			or @ActiveDate = 0
		) 
		
		Alter Table [ServicesContract] Enable Trigger All


GO
/****** Object:  StoredProcedure [dbo].[PrcVillaOffer]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcVillaOffer]
(
	@ComplexName Varchar(256) = '',
	@Emirate Varchar(256) = '',
	@Area Varchar(256) = '',
	@Street Varchar(256) = '',
	@Suburb Varchar(256) = '',
	@PieceNo Varchar(256) = '',
	@BasinNo Varchar(256) = '',
	@VillaNo Varchar(256) = '',
	@Customer Varchar(256) = '',
	@OfferKind int = 3,
	@OfferValue1 Float = 0,
	@OfferValue2 Float = 0,
	@Delegated VARCHAR(256) = '',
	@CustPhone VARCHAR(256) = '',
	@CustMobile VARCHAR(256) = ''
)
  
as
	Select 
		*,
		Case when OfferKind = 0 then 'ÈíÚ'
			 when OfferKind = 1 then 'ÔÑÇÁ'
			 when OfferKind = 2 then 'ÅíÌÇÑ'
		end as OfferKindStr
	From 
		[VillaOffer]
	where
		([ComplexName] Like '%'+@ComplexName +'%')
		and ([Emirate] Like '%'+@Emirate +'%')
		and ([Area] Like '%'+@Area +'%')
		and ([Street] Like '%'+@Street +'%')
		and ([Suburb] Like '%'+@Suburb +'%')
		and ([PieceNo] Like '%'+@PieceNo +'%')
		and ([BasinNo] Like '%'+@BasinNo +'%')
		and ([VillaNo] Like '%'+@VillaNo +'%')
		and ([Customer] Like '%'+@Customer +'%')
		and ([OfferKind] = @OfferKind or @OfferKind = 3)
		and ([OfferValue] between @OfferValue1 and  @OfferValue2 or @OfferValue2 = 0)
		and ([Delegated] Like '%'+@Delegated +'%')
		and ([CustPhone] Like '%'+@CustPhone +'%')
		and ([CustMobile] Like '%'+@CustMobile +'%')


GO
/****** Object:  StoredProcedure [dbo].[PrcWarningEndContract]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcWarningEndContract]
(	
	@CustGuid uniqueidentifier = 0x0,
	@FlatNo Varchar(256) = '',
	@FloorNo Varchar(256) = '',	
	@FlatKind Varchar(256) = '',	
	@ApartmentType Varchar(256) = '',	
	@Class Varchar(256) = '',	
	@Day Int = 30,
	@All bit = 1, --ÏÇÆãÇ 

	@ActiveNote Bit = 0
	,@OperationNote int = 0
	,@RealtyNote  Varchar(256) = '' 
	,@ContractActiveNote Bit = 0
	,@ContractOpNote int = 0
	,@ContractNote  Varchar(256) = '' 

    ,@ContractCount1 int = 0
    ,@ContractCount2 int = 0

	,@SMS int = 2
)
  
as
	Set nocount on
	
	Declare @Check Bit,
			@NotCheck Bit
	Set @Check = 1
	Set @NotCheck = 0

	--ãÚÇáÌÉ ÈíÇä ÇáÚÞÇÑ
	if @OperationNote = 0 --íÍæí
	Set @RealtyNote = '%'+@RealtyNote+'%'
	
	--ãÚÇáÌÉ ÈíÇä ÇáÚÞÏ
	if @ContractOpNote = 0 --íÍæí
	Set @ContractNote = '%'+@ContractNote+'%'

	CREATE TABLE #R
	(
		[ContractNo] [varchar](256),
		[BuildingName] [varchar](256),
		[BuildingltnName] [varchar](256),
		[BuildingArName] [varchar](256),
		[OwnerName] [varchar](255),
		[OwnerArName] [varchar](255),
		[OwnerLtnName] [varchar](255),

		[LandlordName] [varchar](255),
		[LandlordArName] [varchar](255),
		[LandlordLtnName] [varchar](255),

		[RentName] [varchar](255),
		[No] [varchar](256),
		[FlatKind] [varchar](256),
		[Floor] [varchar](256),
		[CustomerName] [varchar](256),
		[CustomerltnName] [varchar](256),
		[CustomerArName] [varchar](256),
		[CustomerMobile] [varchar](256),
		[CustomerEMail] [varchar](256),
		[FromDate] [datetime],
		[ToDate] [datetime],
		[Datediff] Float,
		[RentAfterDiscount] [float],
		[LeaseKind] [int],
		[Note2] [varchar](1000),
		[AlertPrinted] [bit],
		[AlertPrintedDate] [datetime],
		[AlertPrintedCount] [int],
		[SMSSended] [bit],
		[SMSCount] [int],
		[AlertPrint] [int],
		[Guid] [uniqueidentifier],
		[FlatNote] [varchar](256),
		[ContractNote] [varchar](1000),
		[Bulding_Emirate] [varchar](256),
		[Bulding_Area] [varchar](256),
		[Bulding_Street] [varchar](256),
		[Bulding_BuildingNo] [varchar](256),
		[Bulding_PieceNo] [varchar](256),
		[Bulding_BasinNo] [varchar](256),
		[Bulding_BondType] [varchar](256),
		[Bulding_BondNo] [varchar](256),
		[Bulding_BondDate] [datetime],
		[FlatContract] [varchar](255),
		[Judicial] bit,
		[CountOldContract] int,
		[CountCurrentContract] int,
		[AddPercent] Float,
		[AddValue] Float,
		[ContractTag] int
	)

	
	--ÚÞæÏ ÇáÔÞæ ÇáãÍá
	Insert into #R
	Select 
		[ContractNo],
		[B].[Name] as [BuildingName],
		[B].[ltnName] as [BuildingltnName],
		[B].[ArName] as [BuildingArName],
		
		Onr.Name as [OwnerName],
		Onr.arName as [OwnerArName],
		Onr.LtnName as [OwnerLtnName],

		ld.Name as [LandlordName],
		ld.arName as [LandlordArName],
		ld.LtnName as [LandlordLtnName],

		rf.Name as [RentName],
		
		Case when Isnull([A].[No], '') <> '' then [A].[No] else [S].[No] end as [No],
		Case when Isnull([A].[No], '') <> '' then dbo.SC('ÔÞÉ') else dbo.SC('ãÍá') end as [FlatKind],
		Case when Isnull([A].[No], '') <> '' then [A].[FloorNo] else Null end as [Floor],
		[cu].[Name] as [CustomerName],
		[cu].[ltnName] as [CustomerltnName],
		[cu].[arName] as [CustomerArName],
		[cu].[Mobile] as [CustomerMobile],
		[Cu].[EMail] as [CustomerEMail],
		[FromDate],
		[ToDate],
		DateDiff(Day, GetDate(), [ToDate]) as [Datediff],
		[L].[Rent] - [L].[DiscountValue] as [RentAfterDiscount],
		[LeaseKind],
		[L].[Note2],
		Case when [R2].[ObjGuid] is null then ( @NotCheck )
			 when [R2].[ObjGuid] is not null  then @Check end as [AlertPrinted],
		[R2].[Date] as [AlertPrintedDate],
		[R3].[Count] as [AlertPrintedCount],

		Case when [SMS2].[ObjGuid] is null then ( @NotCheck )
			 when [SMS2].[ObjGuid] is not null  then @Check end as [SMSSended],
		[SMS3].[Count] as [SMSCount],

		Null as [AlertPrint],
		[L].[Guid]
		,[A].[Note] as [FlatNote]
		,[L].[Note2] as [ContractNote]
		,[B].[Emirate] as [Bulding_Emirate]
		,[B].[Area] as [Bulding_Area]
		,[B].[Street] as [Bulding_Street]
		,[B].[BuildingNo] as [Bulding_BuildingNo]
		,[B].[PieceNo] as [Bulding_PieceNo]
		,[B].[BasinNo] as [Bulding_BasinNo]
		,[B].[BondType] as [Bulding_BondType]
		,[B].[BondNo] as [Bulding_BondNo]
		,[B].[BondDate] as [Bulding_BondDate]
		,'' as [FlatContract]
		,L.[Judicial],
		l.CountOldContract,
		(Select IsNull(COUNT(*),0) + 1 	From [LeaseApartment] where
			CustomerGuid = l.CustomerGuid
			and ApartmentGuid = l.ApartmentGuid)
		,L.[AddPercent]
		,L.[AddValue]
		,1 as [ContractTag]
	From
		[vbLeaseApartment] [L]
		inner join [vwBuilding] [B] On [L].[BuildingGuid] = [B].[Guid]

		LEFT join [vwOwner] LD on Ld.Guid = b.OwnerGuid
		LEFT join [vwOwner] onr on onr.Guid = b.OwnerName
		LEFT join [RentInfo] rf on rf.Guid = L.[RentInfoGuid]

		inner join [Resource] [RS] on [RS].[Guid] = [B].[Guid] and [RS].[Spid] = @@Spid and [RS].[Kind] = 3001
		inner join [Resource] [RS2] on [RS2].[Guid] = [L].[TypeGuid] and [RS2].[Spid] = @@Spid and [RS2].[Kind] = 3002
		inner join [vwCustomer] [cu] on [cu].[Guid] = [L].[CustomerGuid]
		left join [vwApartment] [A] On [A].[Guid] = [L].[ApartmentGuid]
		left join [vwShop] [S] On [S].[Guid] = [L].[ApartmentGuid]
		left join [RepCheck] [R] on [R].[ObjGuid] = [L].[Guid] and [R].[IdReport] = 7001
		left join [RepCheck] [R2] on [R2].[ObjGuid] = [L].[Guid] and [R2].[IdReport] = 7000
		left join (Select 
						[ObjGuid],
						[IdReport],
						Count(*) as [Count]
					From
						[RepCheckCount] 
					Group By
						[ObjGuid],
						[IdReport]
					)[R3] on [R3].[ObjGuid] = [L].[Guid] and [R3].[IdReport] = 7000

		left join [RepSMS] [SMS2] on [SMS2].[ObjGuid] = [L].[Guid] and [SMS2].[IdReport] = 7000
		left join (Select 
						[ObjGuid],
						[IdReport],
						Count(*) as [Count]
					From
						[RepSMSCount] 
					Group By
						[ObjGuid],
						[IdReport]
					)[SMS3] on [SMS3].[ObjGuid] = [L].[Guid] and [SMS3].[IdReport] = 7000
 	where
 		(DateDiff(Day, GetDate(), [ToDate]) <= @Day)
 		and (DateDiff(Day, GetDate(), [ToDate]) > 0)
 		and ([LeaseKind] = 0 or [LeaseKind] = 1)
 		and ([Contractfinish] = 0)
 		and ([R].[ObjGuid] is Not Null or @All = 1)
 
 		and (
 				([SMS2].[ObjGuid] is Not Null and @SMS = 0)
 				or ([SMS2].[ObjGuid] is Null and @SMS = 1)
 				or @SMS = 2
 			)
 
  		and ([L].[CustomerGuid] = @CustGuid or @CustGuid = 0x0)
  		and ([A].[No] = @FlatNo or @FlatNo = '')
  		and ([A].[FloorNo] = @FloorNo or @FloorNo = '')
  		and ([A].[FlatKind] = @FlatKind or @FlatKind = '')
  		and ([A].[ApartmentType] = @ApartmentType or @ApartmentType = '')
  		and ([A].[Class] = @Class or @Class = '')
 		and 
 			(
 				[A].[Note] Like @RealtyNote 
 				or @ActiveNote = 0
 			)
 
 		and 
 			(
 				[L].[Note2] Like @ContractNote 
 				or @ContractActiveNote = 0
			)

	Order By 
		[B].[Name],
		DateDiff(Day, GetDate(), [ToDate]) desc,
		[ContractNo],
		[ToDate]
		

	--ÚÞæÏ ÇáãæÞÝ
	Insert into #R
	Select 
		[ContractNo],
		[B].[Name] as [BuildingName],
		[B].[ltnName] as [BuildingltnName],
		[B].[ArName] as [BuildingArName],

		Onr.Name as [OwnerName],
		Onr.arName as [OwnerArName],
		Onr.LtnName as [OwnerLtnName],

		ld.Name as [LandlordName],
		ld.arName as [LandlordArName],
		ld.LtnName as [LandlordLtnName],

		rf.Name as [RentName],

		[A].[No]as [No],
		dbo.SC('ãæÞÝ') as [FlatKind],
		'' as [Floor],
		[cu].[Name] as [CustomerName],
		[cu].[ltnName] as [CustomerltnName],
		[cu].[arName] as [CustomerArName],
		[cu].[Mobile] as [CustomerMobile],
		[Cu].[EMail] as [CustomerEMail],
		[FromDate],
		[ToDate],
		DateDiff(Day, GetDate(), [ToDate]) as [Datediff],
		[L].[Rent] as [RentAfterDiscount],
		[ContractKind],
		[L].[Note2],
		Case when [R2].[ObjGuid] is null then ( @NotCheck )
			 when [R2].[ObjGuid] is not null  then @Check end as [AlertPrinted],
		[R2].[Date] as [AlertPrintedDate],
		[R3].[Count] as [AlertPrintedCount],

		Case when [SMS2].[ObjGuid] is null then ( @NotCheck )
			 when [SMS2].[ObjGuid] is not null  then @Check end as [SMSSended],
		[SMS3].[Count] as [SMSCount],

		Null as [AlertPrint],
		[L].[Guid]
		,[A].[Note] as [FlatNote]
		,[L].[Note2] as [ContractNote]
		,[B].[Emirate] as [Bulding_Emirate]
		,[B].[Area] as [Bulding_Area]
		,[B].[Street] as [Bulding_Street]
		,[B].[BuildingNo] as [Bulding_BuildingNo]
		,[B].[PieceNo] as [Bulding_PieceNo]
		,[B].[BasinNo] as [Bulding_BasinNo]
		,[B].[BondType] as [Bulding_BondType]
		,[B].[BondNo] as [Bulding_BondNo]
		,[B].[BondDate] as [Bulding_BondDate]
		,(Select Top 1 FlatNo from vwLeaseApartment where Guid = [FlatContractGuid])
		,L.[Judicial],
		0 AS CountOldContract,
		(Select IsNull(COUNT(*),0) + 1 	From [ParkingContract] where
			CustomerGuid = l.CustomerGuid
			and ParkingGuid = l.ParkingGuid)
		AS CountCurrentContract
		,L.[AddPercent]
		,L.[AddValue]
		,2 as [ContractTag]
	From
		[vbParkingContract] [L]
		inner join [vwBuilding] [B] On [L].[BuildingGuid] = [B].[Guid]

		LEFT join [vwOwner] LD on Ld.Guid = b.OwnerGuid
		LEFT join [vwOwner] onr on onr.Guid = b.OwnerName
		LEFT join [RentInfo] rf on rf.Guid = L.[RentInfoGuid]

		inner join [Resource] [RS] on [RS].[Guid] = [B].[Guid] and [RS].[Spid] = @@Spid and [RS].[Kind] = 3001
		inner join [Resource] [RS2] on [RS2].[Guid] = [L].[TypeGuid] and [RS2].[Spid] = @@Spid and [RS2].[Kind] = 3002
		inner join [vwCustomer] [cu] on [cu].[Guid] = [L].[CustomerGuid]
		left join [vwParking] [A] On [A].[Guid] = [L].[ParkingGuid]
		left join [RepCheck] [R] on [R].[ObjGuid] = [L].[Guid] and [R].[IdReport] = 7001
		left join [RepCheck] [R2] on [R2].[ObjGuid] = [L].[Guid] and [R2].[IdReport] = 7000
		left join (Select 
						[ObjGuid],
						[IdReport],
						Count(*) as [Count]
					From
						[RepCheckCount] 
					Group By
						[ObjGuid],
						[IdReport]
					)[R3] on [R3].[ObjGuid] = [L].[Guid] and [R3].[IdReport] = 7000

		left join [RepSMS] [SMS2] on [SMS2].[ObjGuid] = [L].[Guid] and [SMS2].[IdReport] = 7000
		left join (Select 
						[ObjGuid],
						[IdReport],
						Count(*) as [Count]
					From
						[RepSMSCount] 
					Group By
						[ObjGuid],
						[IdReport]
					)[SMS3] on [SMS3].[ObjGuid] = [L].[Guid] and [SMS3].[IdReport] = 7000
 	where
 		(DateDiff(Day, GetDate(), [ToDate]) <= @Day)
 		and (DateDiff(Day, GetDate(), [ToDate]) > 0)
 		and ([ContractKind] = 4)
 		and ([Contractfinish] = 0)
 		and ([R].[ObjGuid] is Not Null or @All = 1)
 
 		and (
 				([SMS2].[ObjGuid] is Not Null and @SMS = 0)
 				or ([SMS2].[ObjGuid] is Null and @SMS = 1)
 				or @SMS = 2
 			)
 
  		and ([L].[CustomerGuid] = @CustGuid or @CustGuid = 0x0)
  		and ([A].[No] = @FlatNo or @FlatNo = '')
  		and ([A].[FloorNo] = @FloorNo or @FloorNo = '')
  		and ([A].[ParkingKind] = @FlatKind or @FlatKind = '')
  		and ([A].[Description] = @ApartmentType or @ApartmentType = '')
  		--and ([A].[Class] = @Class or @Class = '')
 		and 
 			(
 				[A].[Note] Like @RealtyNote 
 				or @ActiveNote = 0
 			)
 
 		and 
 			(
 				[L].[Note2] Like @ContractNote 
 				or @ContractActiveNote = 0
			)

	Order By 
		[B].[Name],
		DateDiff(Day, GetDate(), [ToDate]) desc,
		[ContractNo],
		[ToDate]
		
	


	--ÇáÃÑÖ æ ÇáÝíáÇ
	Insert into #R
	Select 
		[ContractNo],
		'' as [BuildingName],
		'' as [BuildingltnName],
		'' as [BuildingArName],
		
		'' as [OwnerName],
		'' as [OwnerArName],
		'' as [OwnerLtnName],

		'' as [LandlordName],
		'' as [LandlordArName],
		'' as [LandlordLtnName],

		'' as [RentName],
		
		[L].[Name]as [No],
		Case when [ContractKind] = 6 or [ContractKind] = 7 then dbo.SC('ÃÑÖ')
		 when [ContractKind] = 8 or [ContractKind] = 9 then dbo.SC('ÝíáÇ')
		end 
		as [FlatKind],
		'' as [Floor],
		[cu].[Name] as [CustomerName],
		[cu].[ltnName] as [CustomerltnName],
		[cu].[arName] as [CustomerArName],
		[cu].[Mobile] as [CustomerMobile],
		[Cu].[EMail] as [CustomerEMail],
		[FromDate],
		[ToDate],
		DateDiff(Day, GetDate(), [ToDate]) as [Datediff],
		[L].[Rent] as [RentAfterDiscount],
		[ContractKind],
		[L].[Note2],
		Case when [R2].[ObjGuid] is null then ( @NotCheck )
			 when [R2].[ObjGuid] is not null  then @Check end as [AlertPrinted],
		[R2].[Date] as [AlertPrintedDate],
		[R3].[Count] as [AlertPrintedCount],

		Case when [SMS2].[ObjGuid] is null then ( @NotCheck )
			 when [SMS2].[ObjGuid] is not null  then @Check end as [SMSSended],
		[SMS3].[Count] as [SMSCount],

		Null as [AlertPrint],
		[L].[Guid]
		,[L].UnitNote as [FlatNote]
		,[L].[Note2] as [ContractNote]
		,'' as [Bulding_Emirate]
		,'' as [Bulding_Area]
		,'' as [Bulding_Street]
		,'' as [Bulding_BuildingNo]
		,'' as [Bulding_PieceNo]
		,'' as [Bulding_BasinNo]
		,'' as [Bulding_BondType]
		,'' as [Bulding_BondNo]
		,Null as [Bulding_BondDate]
		,'' as [FlatContract]
		,L.[Judicial],
		0 as CountOldContract,
		(Select IsNull(COUNT(*),0) + 1 	From LandContract where
			CustomerGuid = l.CustomerGuid
			and (LandGuid = l.LandGuid or VillaGuid = l.VillaGuid))
		AS CountCurrentContract
		,L.[AddPercent]
		,L.[AddValue]
		,3 as [ContractTag]
	From
		[vwLandContract] [L]
		inner join [Resource] [RS2] on [RS2].[Guid] = [L].[TypeGuid] and [RS2].[Spid] = @@Spid and [RS2].[Kind] = 3002
		inner join [vwCustomer] [cu] on [cu].[Guid] = [L].[CustomerGuid]
		left join [RepCheck] [R] on [R].[ObjGuid] = [L].[Guid] and [R].[IdReport] = 7001
		left join [RepCheck] [R2] on [R2].[ObjGuid] = [L].[Guid] and [R2].[IdReport] = 7000
		left join (Select 
						[ObjGuid],
						[IdReport],
						Count(*) as [Count]
					From
						[RepCheckCount] 
					Group By
						[ObjGuid],
						[IdReport]
					)[R3] on [R3].[ObjGuid] = [L].[Guid] and [R3].[IdReport] = 7000

		left join [RepSMS] [SMS2] on [SMS2].[ObjGuid] = [L].[Guid] and [SMS2].[IdReport] = 7000
		left join (Select 
						[ObjGuid],
						[IdReport],
						Count(*) as [Count]
					From
						[RepSMSCount] 
					Group By
						[ObjGuid],
						[IdReport]
					)[SMS3] on [SMS3].[ObjGuid] = [L].[Guid] and [SMS3].[IdReport] = 7000
 	where
 		(DateDiff(Day, GetDate(), [ToDate]) <= @Day)
 		and (DateDiff(Day, GetDate(), [ToDate]) > 0)
 		and ([ContractKind] = 7 or [ContractKind] = 9)
 		and ([Contractfinish] = 0)
 		and ([R].[ObjGuid] is Not Null or @All = 1)
 
 		and (
 				([SMS2].[ObjGuid] is Not Null and @SMS = 0)
 				or ([SMS2].[ObjGuid] is Null and @SMS = 1)
 				or @SMS = 2
 			)
 
  		and ([L].[CustomerGuid] = @CustGuid or @CustGuid = 0x0)
  		and ([L].[Name] = @FlatNo or @FlatNo = '')
 		and 
 			(
 				[L].[UnitNote] Like @RealtyNote 
 				or @ActiveNote = 0
 			)
 
 		and 
 			(
 				[L].[Note2] Like @ContractNote 
 				or @ContractActiveNote = 0
			)

	Order By 
		DateDiff(Day, GetDate(), [ToDate]) desc,
		[ContractNo],
		[ToDate]

	Select 
		COUNT(*) as [Count],
		SUM([RentAfterDiscount]) as [RentAfterDiscount]
	From
		#R
	where
		(isNull(CountOldContract,0) + ISNULL(CountCurrentContract ,0)) between @ContractCount1 and @ContractCount2 or (@ContractCount1 = 0 and @ContractCount2 = 0)

	Select
		*,
		isNull(CountOldContract,0) + ISNULL(CountCurrentContract ,0) as [AllContractCount],
		isNull([RentAfterDiscount],0) + isNull([AddValue],0) as [RentAfterAdd],
		0 as [Operation],
		0 as [SMS],
		0 as [MsgSend]
	From
		#R
	where
		(isNull(CountOldContract,0) + ISNULL(CountCurrentContract ,0)) between @ContractCount1 and @ContractCount2 or (@ContractCount1 = 0 and @ContractCount2 = 0)
	Order By
		[BuildingName], 
		[Datediff],
		[ContractNo],
		[ToDate]
		

GO
/****** Object:  StoredProcedure [dbo].[PrcWarningEndedContract]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[PrcWarningEndedContract]
(
	@CustGuid uniqueidentifier = 0x0,
	@FlatNo Varchar(256) = '',
	@FloorNo Varchar(256) = '',	
	@FlatKind Varchar(256) = '',	
	@ApartmentType Varchar(256) = '',	
	@Class Varchar(256) = '',	
	@Day Int = 0,
	@Day2 Int = 0,
	@All bit = 1,
	@Date1 DateTime = '2009-1-1',
	@Date2 DateTime = '2012-1-1',
	@CheckDate Bit = 1,
	@DayAndDateState int = 0

	,@ActiveNote Bit = 0
	,@OperationNote int = 0
	,@RealtyNote  Varchar(256) = '' 
	,@ContractActiveNote Bit = 0
	,@ContractOpNote int = 0
	,@ContractNote  Varchar(256) = '' 
    ,@ContractCount1 int = 0
    ,@ContractCount2 int = 0
	,@SMS int = 2
)
  
as
	Declare @Check Bit,
			@NotCheck Bit
	Set @Check = 1
	Set @NotCheck = 0

	--ãÚÇáÌÉ ÈíÇä ÇáÚÞÇÑ
	if @OperationNote = 0 --íÍæí
	Set @RealtyNote = '%'+@RealtyNote+'%'
	
	--ãÚÇáÌÉ ÈíÇä ÇáÚÞÏ
	if @ContractOpNote = 0 --íÍæí
	Set @ContractNote = '%'+@ContractNote+'%'

	CREATE TABLE #R
	(
		[ContractNo] [varchar](256),
		[BuildingName] [varchar](256),
		[BuildingltnName] [varchar](256),
		[BuildingArName] [varchar](256),
		
		[OwnerName] [varchar](255),
		[RealtyOwnerName] [varchar](255),
		[RentName] [varchar](255),
		
		[CustomerName] [varchar](256),
		[CustomerltnName] [varchar](256),
		[CustomerArName] [varchar](256),
		[PhoneJob] [varchar](256),
		[CustomerMobile] [varchar](256),
		[CustomerEMail] [varchar](256),
		[No] [varchar](512),
		[FlatKind] [varchar](256),
		[Floor] [varchar](256),
		[ApartmentType] [varchar](256),
		[FromDate] [datetime],
		[ToDate] [datetime],
		[Datediff] [int],
		[RentAfterDiscount] [float],
		[LeaseKind] [int],
		[Judicial] bit,
		[RealtyRent] Float,
		CountOldContract int,
		CountCurrentContract int,
		[AlertPrinted] [bit],
		[AlertPrintedDate] [datetime],
		[AlertPrintedCount] [int],
		[AlertPrint] [int],
		[SMSSended] [bit],
		[SMSCount] [int],
		[Guid] [uniqueidentifier],
		[FlatNote] [varchar](256),
		[ContractNote] [varchar](8000),
		[Bulding_Emirate] [varchar](256),
		[Bulding_Area] [varchar](256),
		[Bulding_Street] [varchar](256),
		[Bulding_BuildingNo] [varchar](256),
		[Bulding_PieceNo] [varchar](256),
		[Bulding_BasinNo] [varchar](256),
		[Bulding_BondType] [varchar](256),
		[Bulding_BondNo] [varchar](256),
		[Bulding_BondDate] [datetime],
		[Operation] bit,
		[FlatContract] [varchar](255),
		[AddPercent] Float,
		[AddValue] Float,
		ContractTag int,
		[PayType] varchar(255),
		[txt_RentDuration] varchar(255),
		[txt_Rentype] varchar(255),
		[txt_TermsOfPayment] varchar(255),
		[txt_LtnRentDuration] varchar(255),
		[txt_LtnRentype] varchar(255),
		[txt_LtnTermsOfPayment] varchar(255)
	)
	
	
	--ÔÞÉ æãÍá
	Insert into #R
	Select 
		[ContractNo],
		[B].[Name] as [BuildingName],
		[B].[ltnName] as [BuildingltnName],
		[B].[ArName] as [BuildingArName],
		
		Onr.Name as [OwnerName],
		Case when Isnull([A].[No], '') <> '' then OA.Name else OS.Name end	as [RealtyOwnerName],
		
		rf.Name as [RentName],
		
		[cu].[Name] as [CustomerName],
		[cu].[ltnName] as [CustomerltnName],
		[cu].[arName] as [CustomerArName],
		[cu].[PhoneJob], 
		[cu].[Mobile], 
		[cu].[EMail], 
		Case when Isnull([A].[No], '') <> '' then [A].[No] else [S].[No] end as [No],
		Case when Isnull([A].[No], '') <> '' then dbo.SC('ÔÞÉ') else dbo.SC('ãÍá') end as [FlatKind],
		Case when Isnull([A].[No], '') <> '' then [A].[FloorNo] else Null end as [Floor],
		Case when Isnull([A].[No], '') <> '' then [A].[ApartmentType] else [S].[Description] end as [ApartmentType],
		[FromDate],
		[ToDate],
		case when DateDiff(Day,  [ToDate], GetDate()) > 0 then DateDiff(Day,  [ToDate], GetDate()) end as [Datediff],
		[L].[Rent] - [L].[DiscountValue] as [RentAfterDiscount],
		[LeaseKind],
		L.Judicial,
		Case when Isnull([A].[No], '') <> '' then
			A.Rent
		else 
			S.Rent
		end as [RealtyRent],
		l.CountOldContract,
		(Select IsNull(COUNT(*),0) 	From [LeaseApartment] where
			CustomerGuid = l.CustomerGuid
			and ApartmentGuid = l.ApartmentGuid),
			
		Case when [R2].[ObjGuid] is null then ( @NotCheck )
			 when [R2].[ObjGuid] is not null  then @Check end as [AlertPrinted],
		[R2].[Date] as [AlertPrintedDate],
		[R3].[Count] as [AlertPrintedCount],
		Null as [AlertPrint],

		Case when [SMS2].[ObjGuid] is null then ( @NotCheck )
			 when [SMS2].[ObjGuid] is not null  then @Check end as [SMSSended],
		[SMS3].[Count] as [SMSCount],

		[L].[Guid]
		,[A].[Note] as [FlatNote]
		,[L].[Note2] as [ContractNote]
		,[B].[Emirate] as [Bulding_Emirate]
		,[B].[Area] as [Bulding_Area]
		,[B].[Street] as [Bulding_Street]
		,[B].[BuildingNo] as [Bulding_BuildingNo]
		,[B].[PieceNo] as [Bulding_PieceNo]
		,[B].[BasinNo] as [Bulding_BasinNo]
		,[B].[BondType] as [Bulding_BondType]
		,[B].[BondNo] as [Bulding_BondNo]
		,[B].[BondDate] as [Bulding_BondDate]
		, 0 as [Operation]
		,'' as [FlatContract]
		,L.[AddPercent]
		,L.[AddValue]
		,1 as [ContractTag]
		,Case 
			when L.PayType = 0 then dbo.SC('äÞÏÇð')
			when L.PayType = 1 then dbo.SC('ÇÞÓÇØ')
			when L.PayType = 2 then dbo.SC('ÍÓÈ ÎØÉ')
			when L.PayType = 3 then dbo.SC('ÂÌá')
		end as paytype
		,L.[RentDuration]
		,L.[Rentype]
		,L.[TermsOfPayment]
		,L.[LtnRentDuration]
		,L.[LtnRentype]
		,L.[LtnTermsOfPayment]
	From
		[vbLeaseApartment] [L]
		inner join [vwBuilding] [B] On [L].[BuildingGuid] = [B].[Guid]

		LEFT join [vwOwner] Onr on onr.Guid = b.OwnerGuid
		LEFT join [RentInfo] rf on rf.Guid = L.[RentInfoGuid]

		inner join [Resource] [RS] on [RS].[Guid] = [B].[Guid] and [RS].[Spid] = @@Spid and [RS].[Kind] = 4001
		inner join [Resource] [RS2] on [RS2].[Guid] = [L].[TypeGuid] and [RS2].[Spid] = @@Spid and [RS2].[Kind] = 4002
		inner join [vwCustomer] [cu] on [cu].[Guid] = [L].[CustomerGuid]
		left join [vwApartment] [A] On [A].[Guid] = [L].[ApartmentGuid]
		left join [vwShop] [S] On [S].[Guid] = [L].[ApartmentGuid]

		left join [vwCustomer] [OA] on [OA].[Guid] = [A].CustOwnerGuid
		left join [vwCustomer] [OS] on [OS].[Guid] = [S].CustGuid

		left join [RepCheck] [R] on [R].[ObjGuid] = [L].[Guid] and [R].[IdReport] = 9001
		left join [RepCheck] [R2] on [R2].[ObjGuid] = [L].[Guid] and [R2].[IdReport] = 9000
		left join (Select 
						[ObjGuid],
						[IdReport],
						Count(*) as [Count]
					From
						[RepCheckCount] 
					Group By
						[ObjGuid],
						[IdReport]
					)[R3] on [R3].[ObjGuid] = [L].[Guid] and [R3].[IdReport] = 9000

		left join [RepSMS] [SMS2] on [SMS2].[ObjGuid] = [L].[Guid] and [SMS2].[IdReport] = 9000
		left join (Select 
						[ObjGuid],
						[IdReport],
						Count(*) as [Count]
					From
						[RepSMSCount] 
					Group By
						[ObjGuid],
						[IdReport]
					)[SMS3] on [SMS3].[ObjGuid] = [L].[Guid] and [SMS3].[IdReport] = 9000
 	where
  		(([Todate] <= GetDate() and [ContractFinish] = 0) Or @DayAndDateState = 1)
  		and((
  				(DateDiff(Day,  [ToDate], GetDate()) between @Day and @Day2) or (@Day = 0 and @Day2 = 0))
  				Or @DayAndDateState = 1
  			)
 		and (
 				(
 					([Todate] Between @Date1 And @Date2) and [ContractFinish] = 0
 				)
 				Or @DayAndDateState = 0
 			)

		and (
				([SMS2].[ObjGuid] is Not Null and @SMS = 0)
				or ([SMS2].[ObjGuid] is Null and @SMS = 1)
				or @SMS = 2
			)

 		and ([LeaseKind] = 0 or [LeaseKind] = 1)
 		and ([R].[ObjGuid] is Not Null or @All = 1)
  		and ([L].[CustomerGuid] = @CustGuid or @CustGuid = 0x0)
  		and ([A].[No] = @FlatNo or [S].[No] = @FlatNo or @FlatNo = '')
  		and ([A].[FloorNo] = @FloorNo or @FloorNo = '')
  		and ([A].[FlatKind] = @FlatKind or @FlatKind = '')
  		and ([A].[ApartmentType] = @ApartmentType or @ApartmentType = '')
  		and ([A].[Class] = @Class or @Class = '')
 		and 
 			(
 				[A].[Note] Like @RealtyNote 
 				or @ActiveNote = 0
 			)
 
 		and 
 			(
 				[L].[Note2] Like @ContractNote 
 				or @ContractActiveNote = 0
 			)


	Order By
		[B].[Name],
		DateDiff(Day,  [ToDate], GetDate())
		

	--ãæÞÝ
	Insert into #R
	Select 
		[ContractNo],
		[B].[Name] as [BuildingName],
		[B].[ltnName] as [BuildingltnName],
		[B].[ArName] as [BuildingArName],
		
		Onr.Name as [OwnerName],
		'' as [RealtyOwnerName],
		
		rf.Name as [RentName],
		
		[cu].[Name] as [CustomerName],
		[cu].[ltnName] as [CustomerltnName],
		[cu].[arName] as [CustomerArName],
		[cu].[PhoneJob], 
		[cu].[Mobile], 
		[cu].[EMail], 
		[A].[No]as [No],
		dbo.SC('ãæÞÝ') as [FlatKind],
		'' as [Floor],
		[A].[Description] as [ApartmentType],
		[FromDate],
		[ToDate],
		case when DateDiff(Day,  [ToDate], GetDate()) > 0 then DateDiff(Day,  [ToDate], GetDate()) end as [Datediff],
		[L].[Rent] as [RentAfterDiscount],
		[ContractKind],
		L.Judicial,
		A.rent,
		0 AS CountOldContract,
		(Select IsNull(COUNT(*),0) + 1 	From [ParkingContract] where
			CustomerGuid = l.CustomerGuid
			and ParkingGuid = l.ParkingGuid)
		AS CountCurrentContract,
		Case when [R2].[ObjGuid] is null then ( @NotCheck )
			 when [R2].[ObjGuid] is not null  then @Check end as [AlertPrinted],
		[R2].[Date] as [AlertPrintedDate],
		[R3].[Count] as [AlertPrintedCount],
		Null as [AlertPrint],

		Case when [SMS2].[ObjGuid] is null then ( @NotCheck )
			 when [SMS2].[ObjGuid] is not null  then @Check end as [SMSSended],
		[SMS3].[Count] as [SMSCount],

		[L].[Guid]
		,[A].[Note] as [FlatNote]
		,[L].[Note2] as [ContractNote]
		,[B].[Emirate] as [Bulding_Emirate]
		,[B].[Area] as [Bulding_Area]
		,[B].[Street] as [Bulding_Street]
		,[B].[BuildingNo] as [Bulding_BuildingNo]
		,[B].[PieceNo] as [Bulding_PieceNo]
		,[B].[BasinNo] as [Bulding_BasinNo]
		,[B].[BondType] as [Bulding_BondType]
		,[B].[BondNo] as [Bulding_BondNo]
		,[B].[BondDate] as [Bulding_BondDate]
		, 0 as [Operation]
		,(Select Top 1 FlatNo from vwLeaseApartment where Guid = [FlatContractGuid])
		,L.[AddPercent]
		,L.[AddValue]
		,2 as [ContractTag]

		,Case 
			when L.PayType = 0 then dbo.SC('äÞÏÇð')
			when L.PayType = 1 then dbo.SC('ÇÞÓÇØ')
			when L.PayType = 2 then dbo.SC('ÍÓÈ ÎØÉ')
			when L.PayType = 3 then dbo.SC('ÂÌá')
		end as paytype

		,L.[RentDuration]
		,L.[Rentype]
		,L.[TermsOfPayment]
		,L.[LtnRentDuration]
		,L.[LtnRentype]
		,L.[LtnTermsOfPayment]
	From
		[vbParkingContract] [L]
		inner join [vwBuilding] [B] On [L].[BuildingGuid] = [B].[Guid]
		
		LEFT join [vwOwner] Onr on onr.Guid = b.OwnerGuid
		LEFT join [RentInfo] rf on rf.Guid = L.[RentInfoGuid]

		inner join [Resource] [RS] on [RS].[Guid] = [B].[Guid] and [RS].[Spid] = @@Spid and [RS].[Kind] = 4001
		inner join [Resource] [RS2] on [RS2].[Guid] = [L].[TypeGuid] and [RS2].[Spid] = @@Spid and [RS2].[Kind] = 4002
		inner join [vwCustomer] [cu] on [cu].[Guid] = [L].[CustomerGuid]
		left join [vwParking] [A] On [A].[Guid] = [L].[ParkingGuid]
		left join [RepCheck] [R] on [R].[ObjGuid] = [L].[Guid] and [R].[IdReport] = 9001
		left join [RepCheck] [R2] on [R2].[ObjGuid] = [L].[Guid] and [R2].[IdReport] = 9000
		left join (Select 
						[ObjGuid],
						[IdReport],
						Count(*) as [Count]
					From
						[RepCheckCount] 
					Group By
						[ObjGuid],
						[IdReport]
					)[R3] on [R3].[ObjGuid] = [L].[Guid] and [R3].[IdReport] = 9000

		left join [RepSMS] [SMS2] on [SMS2].[ObjGuid] = [L].[Guid] and [SMS2].[IdReport] = 9000
		left join (Select 
						[ObjGuid],
						[IdReport],
						Count(*) as [Count]
					From
						[RepSMSCount] 
					Group By
						[ObjGuid],
						[IdReport]
					)[SMS3] on [SMS3].[ObjGuid] = [L].[Guid] and [SMS3].[IdReport] = 9000
 	where
  		(([Todate] <= GetDate() and [ContractFinish] = 0) Or @DayAndDateState = 1)
  		and((
  				(DateDiff(Day,  [ToDate], GetDate()) between @Day and @Day2) or (@Day = 0 and @Day2 = 0))
  				Or @DayAndDateState = 1
  			)
 		and (
 				(
 					([Todate] Between @Date1 And @Date2) and [ContractFinish] = 0
 				)
 				Or @DayAndDateState = 0
 			)

		and (
				([SMS2].[ObjGuid] is Not Null and @SMS = 0)
				or ([SMS2].[ObjGuid] is Null and @SMS = 1)
				or @SMS = 2
			)

 		and ([ContractKind] = 4)
 		and ([R].[ObjGuid] is Not Null or @All = 1)
  		and ([L].[CustomerGuid] = @CustGuid or @CustGuid = 0x0)
  		and ([A].[No] = @FlatNo or @FlatNo = '')
  		and ([A].[FloorNo] = @FloorNo or @FloorNo = '')
  		and ([A].[ParkingKind] = @FlatKind or @FlatKind = '')
  		and ([A].[Description] = @ApartmentType or @ApartmentType = '')
 		and 
 			(
 				[A].[Note] Like @RealtyNote 
 				or @ActiveNote = 0
 			)
 
 		and 
 			(
 				[L].[Note2] Like @ContractNote 
 				or @ContractActiveNote = 0
 			)


	Order By
		[B].[Name],
		DateDiff(Day,  [ToDate], GetDate())		
		
	
	--ÃÑÖ
	Insert into #R
	Select 
		[ContractNo],
		'' as [BuildingName],
		'' as [BuildingltnName],
		'' as [BuildingArName],
		
		'' as [OwnerName],
		'' as [RealtyOwnerName],
		
		'' as [RentName],
		
		[cu].[Name] as [CustomerName],
		[cu].[ltnName] as [CustomerltnName],
		[cu].[arName] as [CustomerArName],
		[cu].[PhoneJob], 
		[cu].[Mobile], 
		[cu].[EMail], 
		[L].[Name]as [No],
		Case when [ContractKind] = 6 or [ContractKind] = 7 then dbo.SC('ÃÑÖ')
		 when [ContractKind] = 8 or [ContractKind] = 9 then dbo.SC('ÝíáÇ')
		end 
		as [FlatKind],
		'' as [Floor],
		[LandType],
		[FromDate],
		[ToDate],
		case when DateDiff(Day,  [ToDate], GetDate()) > 0 then DateDiff(Day,  [ToDate], GetDate()) end as [Datediff],
		[L].[Rent] as [RentAfterDiscount],
		[ContractKind],
		L.Judicial,
		0 as RealtyRent,
		0 as CountOldContract,
		(Select IsNull(COUNT(*),0) + 1 	From LandContract where
			CustomerGuid = l.CustomerGuid
			and (LandGuid = l.LandGuid or VillaGuid = l.VillaGuid))
		AS CountCurrentContract,
		Case when [R2].[ObjGuid] is null then ( @NotCheck )
			 when [R2].[ObjGuid] is not null  then @Check end as [AlertPrinted],
		[R2].[Date] as [AlertPrintedDate],
		[R3].[Count] as [AlertPrintedCount],
		Null as [AlertPrint],

		Case when [SMS2].[ObjGuid] is null then ( @NotCheck )
			 when [SMS2].[ObjGuid] is not null  then @Check end as [SMSSended],
		[SMS3].[Count] as [SMSCount],

		[L].[Guid]
		,[L].UnitNote as [FlatNote]
		,[L].[Note2] as [ContractNote]
		,'' as [Bulding_Emirate]
		,'' as [Bulding_Area]
		,'' as [Bulding_Street]
		,'' as [Bulding_BuildingNo]
		,'' as [Bulding_PieceNo]
		,'' as [Bulding_BasinNo]
		,'' as [Bulding_BondType]
		,'' as [Bulding_BondNo]
		,'' as [Bulding_BondDate]
		, 0 as [Operation]
		,'' as [FlatContract]
		,L.[AddPercent]
		,L.[AddValue]
		,3 as [ContractTag]

		,Case 
			when L.PayType = 0 then dbo.SC('äÞÏÇð')
			when L.PayType = 1 then dbo.SC('ÇÞÓÇØ')
			when L.PayType = 2 then dbo.SC('ÍÓÈ ÎØÉ')
			when L.PayType = 3 then dbo.SC('ÂÌá')
		end as paytype

		,L.[RentDuration]
		,L.[Rentype]
		,L.[TermsOfPayment]
		,L.[LtnRentDuration]
		,L.[LtnRentype]
		,L.[LtnTermsOfPayment]
	From
		[vwLandContract] [L]
		inner join [Resource] [RS2] on [RS2].[Guid] = [L].[TypeGuid] and [RS2].[Spid] = @@Spid and [RS2].[Kind] = 4002
		inner join [vwCustomer] [cu] on [cu].[Guid] = [L].[CustomerGuid]
		left join [RepCheck] [R] on [R].[ObjGuid] = [L].[Guid] and [R].[IdReport] = 9001
		left join [RepCheck] [R2] on [R2].[ObjGuid] = [L].[Guid] and [R2].[IdReport] = 9000
		left join (Select 
						[ObjGuid],
						[IdReport],
						Count(*) as [Count]
					From
						[RepCheckCount] 
					Group By
						[ObjGuid],
						[IdReport]
					)[R3] on [R3].[ObjGuid] = [L].[Guid] and [R3].[IdReport] = 9000

		left join [RepSMS] [SMS2] on [SMS2].[ObjGuid] = [L].[Guid] and [SMS2].[IdReport] = 9000
		left join (Select 
						[ObjGuid],
						[IdReport],
						Count(*) as [Count]
					From
						[RepSMSCount] 
					Group By
						[ObjGuid],
						[IdReport]
					)[SMS3] on [SMS3].[ObjGuid] = [L].[Guid] and [SMS3].[IdReport] = 9000
 	where
  		(([Todate] <= GetDate() and [ContractFinish] = 0) Or @DayAndDateState = 1)
  		and(
  				(DateDiff(Day,  [ToDate], GetDate()) between @Day and @Day2) or (@Day = 0 and @Day2 = 0)
  				Or @DayAndDateState = 1
  			)
 		and (
 				(
 					([Todate] Between @Date1 And @Date2) and [ContractFinish] = 0
 				)
 				Or @DayAndDateState = 0
 			)

		and (
				([SMS2].[ObjGuid] is Not Null and @SMS = 0)
				or ([SMS2].[ObjGuid] is Null and @SMS = 1)
				or @SMS = 2
			)

 		and ([ContractKind] in (7,9))
 		and ([R].[ObjGuid] is Not Null or @All = 1)
		and ([L].[CustomerGuid] = @CustGuid or @CustGuid = 0x0)
  		and ([L].[Name] = @FlatNo or @FlatNo = '')
 		and 
 			(
 				[L].[UnitNote] Like @RealtyNote 
 				or @ActiveNote = 0
 			)
 
 		and 
 			(
 				[L].[Note2] Like @ContractNote 
 				or @ContractActiveNote = 0
 			)


	Order By
		DateDiff(Day,  [ToDate], GetDate())				
		
		
	Select
		*,
		isNull(CountOldContract,0) + ISNULL(CountCurrentContract ,0) as [AllContractCount],
		isNull([RentAfterDiscount],0) + isNull([AddValue],0) as [RentAfterAdd],
		0 as [SMS],
		0 as [MsgSend]
	From
		#R
	where
		(isNull(CountOldContract,0) + ISNULL(CountCurrentContract ,0)) between @ContractCount1 and @ContractCount2 or (@ContractCount1 = 0 and @ContractCount2 = 0)
	Order By
		[DateDiff]

	Select 
		COUNT(*) as [Count],
		SUM([RentAfterDiscount]) as [RentAfterDiscount]
	From
		#R
	where
		(isNull(CountOldContract,0) + ISNULL(CountCurrentContract ,0)) between @ContractCount1 and @ContractCount2 or (@ContractCount1 = 0 and @ContractCount2 = 0)
		

GO
/****** Object:  StoredProcedure [dbo].[ReNumberTable]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[ReNumberTable]
(
	@TableName Varchar(256) = 'GeneralBill',
	@SortBy Varchar(256) = 'BillDate, Number'
)
  
as
	Declare @Sql Varchar(2000)
	
	Set @Sql = 'Alter Table '+@TableName+' Disable Trigger All'
	Print @Sql
	exec (@Sql)		
	
	Set @Sql = '
	Create Table #T
	(
		[ID] int identity(1,1),
		[Guid] uniqueidentifier
	)

	Insert into #T
	([Guid])
	Select 
		Guid
	From
		'+@TableName+'
	Order By
		'+@SortBy+'

	Update '+@TableName+'
	Set Number = id
	From
		#T t
		inner join '+@TableName+' b on b.Guid = t.Guid'

	Print @Sql
	exec (@Sql)	

	Set @Sql = 'Alter Table '+@TableName+' Enable Trigger All'
	Print @Sql
	exec (@Sql)		
	

GO
/****** Object:  StoredProcedure [dbo].[ReNumberTableType]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[ReNumberTableType]
(
	@TableName Varchar(256) = 'GeneralBill',
	@FiledType Varchar(256) = 'BillTypeGuid',
	@SortBy Varchar(256) = 'BillDate, Number',
	@DataType Varchar(256) = 'uniqueidentifier',
	@Where Varchar(256) = ''
)
  
as
	Declare @Sql Varchar(2000)
	
	Set @Sql = 'Alter Table '+@TableName+' disable Trigger all'
	Print @Sql
	exec (@Sql)	

	Set @Sql = '
	
	Create Table #Tbl
	(
		[ID] int identity(1,1),
		[Guid] uniqueidentifier
	)


	Declare @TypeGuid '+@DataType+'

	DECLARE @CURSOR_NAME CURSOR 
	SET @CURSOR_NAME = CURSOR FAST_FORWARD FOR 

	SELECT Distinct '+@FiledType+'
	FROM '+@TableName+'

	OPEN @CURSOR_NAME
	FETCH NEXT FROM @CURSOR_NAME INTO @TypeGuid

	WHILE @@FETCH_STATUS = 0
	BEGIN
		Truncate Table #Tbl
		
		Insert into #Tbl
		([Guid])
		Select 
			Guid
		From
			'+@TableName+'
		where
			'+@FiledType+' = @TypeGuid
			'+Case when @Where <> '' then 'and '+@Where+'' else '' end +'
		Order By
			'+@SortBy+'

		Update '+@TableName+'
		Set [Number] = id
		From
			#Tbl t
			inner join '+@TableName+' b on b.Guid = t.Guid

	  FETCH NEXT FROM @CURSOR_NAME INTO @TypeGuid

	END

	CLOSE @CURSOR_NAME
	DEALLOCATE @CURSOR_NAME
	
	Drop Table #Tbl'

	Print @Sql
	exec (@Sql)	
	
	Set @Sql = 'Alter Table '+@TableName+' Enable Trigger all'
	Print @Sql
	exec (@Sql)	
	
	

GO
/****** Object:  StoredProcedure [dbo].[RepChangeFlatPrice]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[RepChangeFlatPrice]
(
	@ApartmentType Varchar(256) = ''
	,@Area Float = 0
	,@Date1 DateTime = '1/1/2007'
	,@Date2 DateTime = '12/30/2007'
	,@SalesKind int = 0
)
  
as

	Select Distinct
		[B].[Name] as [BuildingName],
		[B].[Emirate],
		[B].[Area],
		[A].[No],
		[A].[FloorNo],
		[A].[ApartmentType],
		[A].[Area] as [Survey],
		[A].[Unity],
		[P].[Date],
		[P].[Price],
		[C].[Code] as [Currency], 
		[A].[Guid]
	from 
		[vwBuilding] [B]
		Inner join [vwApartment] [A] On [A].[BuildingGuid] = [B].[Guid]
		left join [ChangeFlatPrice] [P] on [P].[ParentGuid] = [A].[Guid]
		left join [vwCurrency] [C] on [C].[Guid] = [P].[CurrencyGuid]
		Inner join [Resource] [R] on [R].[Guid] = [B].[Guid]
	where
		([P].[Date] between @Date1 and @Date2)
		and ([A].[ApartmentType] = @ApartmentType or @ApartmentType = '')
		and ([A].[Area] = @Area or @Area = 0)
		and ([P].[Kind] = @SalesKind)
	Order By
		[BuildingName],[A].[ApartmentType],[No],[Survey],[P].[Date]
		


GO
/****** Object:  StoredProcedure [dbo].[RepChangeFlatRentPrice]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[RepChangeFlatRentPrice]
(
	@ApartmentType Varchar(256) = ''
	,@Area Float = 0
	,@Date1 DateTime = '1/1/2007'
	,@Date2 DateTime = '12/30/2007'
)
  
as

	Select Distinct
		[B].[Name] as [BuildingName],
		[B].[Emirate],
		[B].[Area],
		[A].[No],
		[A].[FloorNo],
		[A].[ApartmentType],
		[A].[Area] as [Survey],
		[A].[Unity],
		[P].[Date],
		[P].[Price],
		[C].[Code] as [Currency], 
		[A].[Guid]
	from 
		[vwBuilding] [B]
		Inner join [vbApartment] [A] On [A].[BuildingGuid] = [B].[Guid]
		left join [ChangeFlatRent] [P] on [P].[ParentGuid] = [A].[Guid]
		left join [vwCurrency] [C] on [C].[Guid] = [P].[CurrencyGuid]
		Inner join [Resource] [R] on [R].[Guid] = [B].[Guid]
	where
		([P].[Date] between @Date1 and @Date2)
		and ([A].[ApartmentType] = @ApartmentType or @ApartmentType = '')
		and ([A].[Area] = @Area or @Area = 0)

	Order By
		[BuildingName],[A].[ApartmentType],[No],[Survey],[P].[Date]
		


GO
/****** Object:  StoredProcedure [dbo].[RepFlatRent]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[RepFlatRent]
(
	@CustGuid uniqueidentifier = 0x0
	,@Nationality Varchar(256) = ''
	,@FlatNo  Varchar(256) = ''
	,@Emirate Varchar(256) = ''
	,@Suburb Varchar(256) = ''
	,@Area Varchar(256) = ''
	,@Street Varchar(256) = ''
	,@FlatKind Varchar(256) = ''
	,@Class Varchar(256) = ''
	,@ApartmentType Varchar(256) = ''
	,@FlatArea1 Float = 0
	,@FlatArea2 Float = 0
	,@Unity Varchar(256) = ''
	,@RentState int = 2
	,@ContractState int = 2
	,@Datewith int = 0
	,@Date1 DateTime = '2009-7-1'
	,@Date2 DateTime = '2022-1-2'
	,@RentInfoGuid uniqueidentifier = 0x0
	,@SalesManGuid uniqueidentifier = 0x0
	,@ShowFlat Bit = 1
	,@ShowShop Bit = 1
	,@ShowSaleRealty bit = 1
	,@ShowIsCheck Bit = 1
	,@ShowIsNotCheck Bit = 1
	,@ShowAccumulate Bit = 1
	,@ShowAccumulateEndContract Bit = 1
	,@ShowAssemplyRealtyRent Bit = 1
	,@Rent1 Float = 0
	,@Rent2 Float = 0
	,@CheckDate Bit = 0

	,@ActiveNote Bit = 0
	,@OperationNote int = 0
	,@RealtyNote  Varchar(256) = '' 
	,@ContractActiveNote Bit = 0
	,@ContractOpNote int = 0
	,@ContractNote  Varchar(256) = '' 
	,@Judicial int = 2
	,@JudicialContract int = 2
	,@ExportCSV Bit = 0
	,@BanRealty int = 2
	,@whereabouts varchar(255) = ''
	,@IncomeActiveDate bit = 0
	,@IncomeDate1 datetime = '1/1/2016'
	,@IncomeDate2 datetime = '1/1/2017'
)
  
as
	Set NoCount On 
	--ãÚÇáÌÉ ÈíÇä ÇáÚÞÇÑ
	if @OperationNote <> 2 --íÍæí
	Set @RealtyNote = '%'+@RealtyNote+'%'
	
	--ãÚÇáÌÉ ÈíÇä ÇáÚÞÏ
	if @ContractOpNote <> 2 --íÍæí
	Set @ContractNote = '%'+@ContractNote+'%'

	--ÌáÈ ÂÎÑ ÚÞÏ áßá ÔÞÉ
	Select
		[ApartmentGuid],
		Max([FromDate]) as [FromDate]
	Into #LastContract	
	From
		[LeaseApartment]
	Group By
		[ApartmentGuid]

	Select
		*
	into #Building
	From
		vwBuilding B
	where
  		([B].[Emirate] = @Emirate or @Emirate = '')
  		and ([B].[Suburb] = @Suburb or @Suburb = '')
  		and ([B].[Area] = @Area or @Area = '')
  		and ([B].[Street] = @Street or @Street = '')
  		
  	Select
  		*
  	into #Customer
  	From
  		vwCustomer Cu
  	where
 		([Cu].[Guid] = @CustGuid or @CustGuid = 0x0)
		and (Cu.Nationality = @Nationality or @Nationality = '')

	Select 
		Case 
			when [ContractFinish] = 0 and [ToDate] >= GetDate() then [ToDate]
			when [ContractFinish] = 0 and [ToDate] < GetDate() then GetDate()
			when [ContractFinish] = 1  then [ContractFinishDate]
		end as [EndContractDate],
		[InsuranceValueOld] + [InsuranceValue] as [TotalInsurance],
		[C].*
		,[Cu].[Name] as [CustName]
		,[Cu].[Mobile] as [CustMobile]
		,[Cu].[Nationality] as [CustNationality]
		,[Cu].[EMail] as [CustEMail]
		,Cu.AcGuid as Cu_AcountGuid
	Into #LeaseApartment
	From
		[LeaseApartment] [C]
		inner join #LastContract [L] on [L].[ApartmentGuid] = [C].[ApartmentGuid] 
										and [L].[FromDate] = [C].[FromDate]
		inner join [#Customer] [Cu] on [Cu].[Guid] = [C].[CustomerGuid] 

	--	where [ContractFinish] = 0 ãÇ ÈÚÑÝ áíÔ ßÇä ãÍØæØ
		
	--Select * from #LeaseApartment
	--return
	
	Select
		Max(Number) as [Number],
		[LeaseKind],
		[ApartmentGuid]
	into #LeaseApartment_Max_Number
	From
		[LeaseApartment]
	Group By 
		[ApartmentGuid]	, [LeaseKind]

	Declare @Tbl Table
	(
		[FlatNo] Varchar(256)
		,[BuildingName] Varchar(256)
		,[FlatKind] Varchar(256)
		,[FlatType] Varchar(256)
		,[Class] Varchar(256)
		,[FlatArea] Float
		,[State]  Varchar(256)
		,[RentState] int
		,[ContractState] Varchar(256)
		,[Emirate] Varchar(256)
		,[Suburb] Varchar(256)
		,[Area] Varchar(256)
		,[Street] Varchar(256)
		,[FloorNo] Varchar(256)
		,[WaterCounter]  Varchar(256)
		,[ElectricityCounter]  Varchar(256)
		
		,[BathroomCount] Int
		,[BalconyCount] int

		,RentPrice Float
		,SalePrice1 Float
		,SalePrice2 Float
		,SalePrice3 Float
		
		,[CustName] Varchar(256)
		,[CustMobile] Varchar(256)
		,[CustNationality] Varchar(256)
		,[CustEMail] varchar(255)
		,[ContractDateBegin] Datetime
		,[ContractDateEnd] Datetime
		,[ContractFinish] Bit
		,[ContractFinishDate] Datetime
		,[ContractGuid] uniqueidentifier
		,[Rent] Float
		,[PayType] int
		,[RentAfterDiscount] Float
		,[TotalInsurance] Float
		,[FlatGuid] uniqueidentifier
		,[FlatNote] Varchar(1000)
		,[ContractNote] Varchar(1000)
		,[RentalName] Varchar(256)
		,[Judicial] Varchar(256)
		,[JudicialContract] Varchar(256)
		,AcGuid  uniqueidentifier
	)
	
	
	if @ShowFlat = 1
	Insert into @Tbl 
	Select 
		[A].[No] as [FlatNo]
		,[B].[Name] as [BuildingName]
		,[A].[FlatKind] as [FlatKind]
		,[A].[ApartmentType] as [FlatType]
		,[A].[Class] as [Class]
		,[A].[Area] as [FlatArea]

		,Case when [L].[ContractFinish] = 0 then  dbo.sc('ãÄÌÑÉ') 
			  else dbo.SC('ÛíÑ ãÄÌÑÉ') 
		end as [State],
		Case when [L].[ContractFinish] = 0 then 0 else 1 end as [RentState]
		
		,Case when [L].[ContractFinish] = 0 then
			 Case when (([L].[ToDate] <= GetDate()) or ([L].[ContractFinish] = 1)) 
				--or (@Date2 > [L].[ToDate]) 
				then dbo.sc('ãäÊåí ÇáãÏÉ')  
				  when ([L].[ToDate] > GetDate()) and ([L].[ContractFinish] = 0) then dbo.sc('ÛíÑ ãäÊåí ÇáãÏÉ')  end 
		 end as [ContractState]

		,[B].[Emirate] as [Emirate]
		,[B].[Suburb] as [Suburb]
		,[B].[Area] as [Area]
		,[B].[Street] as [Street]
		,[A].[FloorNo]
		
		,[A].[WaterCounter]
		,[A].[ElectricityCounter]
		
		,A.[BathroomCount]
		,A.[BalconyCount]

		
		,A.Rent as RentPrice
		,0 as SalePrice1
		,0 as SalePrice2
		,0 as SalePrice3
		
		,[L].[CustName]
		,[L].[Custmobile]
		,[L].[CustNationality] as [Nationality]
		,[L].[CustEMail] as [CustEMail]
		,Case when [L].[ContractFinish] = 0 then [L].[FromDate] end as [ContractDateBegin]
		,Case when [L].[ContractFinish] = 0 then [L].[ToDate] end as [ContractDateEnd]
		,[L].[ContractFinish]
		,Case when [L].[ContractFinish] = 1 then [L].[ContractFinishDate] End as [ContractFinishDate]
		,[L].[Guid] as [ContractGuid]
		,Case when [L].[ContractFinish] = 0 then [L].[Rent] end 
		,L.[PayType]
		,Case when IsNull([L].[ContractFinish],0) = 0 then IsNull([L].[Rent],0) - IsNull([L].[DiscountValue],0) end as [rentafterdiscount]--,/*Case when [L].[ContractFinish] = 0 then */ [L].[Rent] - [L].[DiscountValue] /*end*/ as [rentafterdiscount]
		,L.[TotalInsurance]
		,[A].[Guid]
		,Left([A].[Note],256)
		,Left([L].[Note2],256)
		,[Rn].Name as RentalName
		,Case when IsNull(A.[Judicial],0) = 0 then dbo.SC('áÇ') else dbo.SC('äÚã') end
		,Case when IsNull(L.[Judicial],0) = 0 then dbo.SC('áÇ') else dbo.SC('äÚã') end
		,L.Cu_AcountGuid as CustAccountGuid
	from 
		[#Building] [B]
		inner join [Apartment] [A] On [A].[BuildingGuid] = [B].[Guid]
		Inner join [Resource] [R] on [R].[Guid] = [B].[Guid] and [spid] = @@Spid

		left join [#LeaseApartment] [L] On [A].[Guid] = [L].[ApartmentGuid] and [L].[LeaseKind]  = 0 --and ([L].[ContractFinish] = 0) -- Êã ÇíÞÇÝåÇ áíÙåÑ ÊÇÑíÎ ÇäåÇÁ ÇáÚÞÏ

		left join #LeaseApartment_Max_Number [LastLease] On [LastLease].[Number] = [L].[Number] and [LastLease].[ApartmentGuid] = [L].[ApartmentGuid]
									and [LastLease].[LeaseKind] = 0
		left join #LeaseApartment_Max_Number [Sales] On [Sales].[ApartmentGuid] = [A].[Guid]
														and [Sales].[LeaseKind] = 1
														
		left join [Rentinfo] Rn on Rn.Guid = l.RentInfoGuid
		
  	where
  		([A].[No] = @FlatNo or @FlatNo = '')
  		and ([A].[FlatKind] = @FlatKind or @FlatKind = '')
  		and ([A].[Class] = @Class or @Class = '')
  		and ([A].[ApartmentType] = @ApartmentType or @ApartmentType = '')
  		and ([A].[Area] between @FlatArea1 and @FlatArea2 or @FlatArea2 = 0) 
  		and ([Unity] = @Unity or @Unity = '')
  		--and (
  		--		(Case when [L].[ContractFinish] = 0 then 0 else 1 end = @RentState)
  		--		or @RentState = 2
  		--	)
  		and 
  			(
  				(
  					(([L].[ToDate] <= GetDate()) or ([L].[ContractFinish] = 1) ) and @ContractState = 0
 				)
  			  	or ( 
  					(
  						(([L].[ToDate] > GetDate()) and ([L].[ContractFinish] = 0) ) and @ContractState = 1
  					)
  					)
  				or @ContractState = 2
  			)
  

		and (L.whereabouts = @whereabouts or @whereabouts = '')
  		and ([L].[RentInfoGuid] = @RentInfoGuid or @RentInfoGuid = 0x0)
  		and ([L].[SalesManGuid] = @SalesManGuid or @SalesManGuid = 0x0)
  		and ([Sales].[ApartmentGuid] is null)
  		and ([L].[Rent] Between @Rent1 and @Rent2 or @Rent2 = 0)
  		and 
  			(
  				
  				Case  when (@OperationNote = 0) and ([A].[Note] Like @RealtyNote) then 1
   					  when (@OperationNote = 1) and ([A].[Note] Not Like @RealtyNote) then 1
  					  when (@OperationNote = 2) and ([A].[Note] = @RealtyNote) then 1
  				else 
  					0 end = 1
  					
  				or @ActiveNote = 0
  			)
  
  		and 
  			(
  				Case  when (@ContractOpNote = 0) and ([L].[Note2] Like @ContractNote) then 1
   					  when (@ContractOpNote = 1) and ([L].[Note2] Not Like @ContractNote) then 1
  					  when (@ContractOpNote = 2) and ([L].[Note2] = @ContractNote) then 1
  				else 
  					0 end = 1
  
  				or @ContractActiveNote = 0
 			)
  		and (IsNull([A].[Judicial],0) = @Judicial or @Judicial = 2)
  		and (IsNull([L].[Judicial],0) = @JudicialContract or @JudicialContract = 2)
  		and (A.Ban = @banRealty or @banRealty = 2)
  		--and L.Number = 114

	--Select [rentafterdiscount], * from @Tbl L --where ContractNumber = 114

	

	if @ShowAccumulate = 0
	Delete @Tbl From @Tbl [T] inner join [AccumulateFlat] [F] on [F].[FlatGuid] = [T].[FlatGuid] 

	
	if @ShowAccumulateEndContract = 0
	begin
	Delete @Tbl 
	From 
		@Tbl [T] 
		inner join [AccumulateFlat] [F] on [F].[ParentGuid] = [T].[FlatGuid] and isnull([t].[ContractFinish],1) = 1
		inner join [AccumulateFlat] [F2] on [F2].FlatGuid = [F].[FlatGuid] and isnull([T].[ContractFinish],0) = 0
	end

	
	
	if (@ShowAssemplyRealtyRent = 1) and (@ShowFlat = 1)
	Update @Tbl
	Set
		[State] = Au.[State],
		[RentState] = au.[RentState],
		[ContractState] = Au.[ContractState],
		[CustName] = Au.[CustName],
		[CustMobile] = Au.[CustMobile],
		[CustNationality] = Au.[CustNationality],
		[CustEMail] = Au.[CustEMail],
		ContractDateBegin = Au.ContractDateBegin,
		ContractDateEnd = Au.ContractDateEnd,
		ContractFinish = Au.ContractFinish,
		ContractFinishDate = Au.ContractFinishDate,
		--Rent = Au.Rent,
		PayType = Au.PayType,
		--RentAfterDiscount = Au.RentAfterDiscount,
		--TotalInsurance = Au.TotalInsurance,
		ContractNote = Au.ContractNote,
		RentalName = Au.RentalName,
		ContractGuid = Au.ContractGuid
	From
		@Tbl T
		inner join (
					Select 
						pT.*,
						pA.FlatGuid as P_FlatGuid
					From
						@Tbl pT
						inner join [AccumulateFlat] pA on pA.ParentGuid  = pT.FlatGuid
					) Au on Au.P_FlatGuid = t.FlatGuid
	
	
	
	
	if @ShowShop = 1 
	Insert into @Tbl 
	Select 
		[A].[No] as [FlatNo]
		,[B].[Name] as [BuildingName]
		,dbo.sc('ãÍá') as [FlatKind]
		,[A].[Description] as [FlatType]
		,A.[Class]
		,[A].[Area] as [FlatArea]

		,Case when [L].[ContractFinish] = 0 then  dbo.sc('ãÄÌÑÉ') 
			  else dbo.SC('ÛíÑ ãÄÌÑÉ') 
		end as [State],
		
		Case when [L].[ContractFinish] = 0 then 0 else 1 end as [RentState]

		
		,Case when [L].[ContractFinish] = 0 then
			 Case when (([L].[ToDate] <= GetDate()) or ([L].[ContractFinish] = 1)) 
						--or (@Date2 > [L].[ToDate]) 
						then dbo.sc('ãäÊåí ÇáãÏÉ')  
				  when ([L].[ToDate] > GetDate()) and ([L].[ContractFinish] = 0) then dbo.sc('ÛíÑ ãäÊåí ÇáãÏÉ')  end 
		 end as [ContractState]

		,[B].[Emirate] as [Emirate]
		,[B].[Suburb] as [Suburb]
		,[B].[Area] as [Area]
		,[B].[Street] as [Street]
		,[A].[No]
		,[A].[WaterCounter]
		,[A].[ElectricityCounter]

		,0 as [BathroomCount]
		,0 as [BalconyCount]

		,[A].[Rent] as RentPrice
		,[A].[Sale] as SalePrice1
		,0 as SalePrice2
		,0 as SalePrice3

		,[L].[CustName]
		,[L].[CustMobile]
		,[L].[CustNationality]
		,[L].[CustEMail] as [CustEMail]
		,Case when [L].[ContractFinish] = 0 then [L].[FromDate] end as [ContractDateBegin]
		,Case when [L].[ContractFinish] = 0 then [L].[ToDate] end as [ContractDateEnd]
		,[L].[ContractFinish]
		,Case when [L].[ContractFinish] = 1 then [L].[ContractFinishDate] End as [ContractFinishDate]
		,[L].[Guid] as [ContractGuid]
		,Case when [L].[ContractFinish] = 0 then [L].[Rent] end 
		,L.[PayType]
		,Case when [L].[ContractFinish] = 0 then [L].[Rent] - [L].[DiscountValue] end
		,L.[TotalInsurance]
		,[A].[Guid]
		,Left([A].[Note],255)
		,Left([L].[Note2],255)
		,[Rn].Name as RentalName
		,Case when IsNull(A.[Judicial],0) = 0 then dbo.SC('áÇ') else dbo.SC('äÚã') end
		,Case when IsNull(L.[Judicial],0) = 0 then dbo.SC('áÇ') else dbo.SC('äÚã') end
		,L.Cu_AcountGuid as CustAccountGuid
	from 
		[#Building] [B]
		Inner join [vwShopAll] [A] On [A].[BuildingGuid] = [B].[Guid]
		Inner join [Resource] [R] on [R].[Guid] = [B].[Guid] and [spid] = @@Spid
		
		left join [#LeaseApartment] [L] On [A].[Guid] = [L].[ApartmentGuid] and [L].[LeaseKind]  = 1 --and ([L].[ContractFinish] = 0) /*19/8/2014*/
		
		left join #LeaseApartment_Max_Number [LastLease] On [LastLease].[Number] = [L].[Number] and [LastLease].[ApartmentGuid] = [L].[ApartmentGuid]
									and [LastLease].[LeaseKind]  = 1
		left join #LeaseApartment_Max_Number [Sales] On [Sales].[ApartmentGuid] = [A].[Guid] and [Sales].[LeaseKind]  = 3
		left join [Rentinfo] Rn on Rn.Guid = l.RentInfoGuid
	where
 		([A].[No] = @FlatNo or @FlatNo = '')
 		and ([A].[Class] = @Class or @Class = '')
 		and ([A].[Description] = @ApartmentType or @ApartmentType = '')
		and ([A].[Area] between @FlatArea1 and @FlatArea2 or @FlatArea2 = 0) 
		and ([Unity] = @Unity or @Unity = '')

		and (
			(
				
				Case  when (@OperationNote = 0) and ([A].[Note] Like @RealtyNote) then 1
 					  when (@OperationNote = 1) and ([A].[Note] Not Like @RealtyNote) then 1
					  when (@OperationNote = 2) and ([A].[Note] = @RealtyNote) then 1
				else 
					0 end = 1
					
				or @ActiveNote = 0
			)

		--and 
		--	(
  		--		(Case when [L].[ContractFinish] = 0 then 0 else 1 end = @RentState)
  		--		or @RentState = 2
		--	)
		and 
			(
				([L].[ToDate] <= GetDate() and @ContractState = 0)
			  	or ([L].[ToDate] > GetDate() and @ContractState = 1)
				or @ContractState = 2
			)

		and ([L].[RentInfoGuid] = @RentInfoGuid or @RentInfoGuid = 0x0)
		and ([L].[SalesManGuid] = @SalesManGuid or @SalesManGuid = 0x0)

		and ([Sales].[ApartmentGuid] is null)
		and ([L].[Rent] Between @Rent1 and @Rent2 or @Rent2 = 0)
		and (L.whereabouts = @whereabouts or @whereabouts = '')
		and 
			(
				Case  when (@OperationNote = 0) and ([A].[Note] Like @RealtyNote) then 1
 					  when (@OperationNote = 1) and ([A].[Note] Not Like @RealtyNote) then 1
					  when (@OperationNote = 2) and ([A].[Note] = @RealtyNote) then 1
				else 
					0 end = 1
					
				or @ActiveNote = 0
			)

		and 
			(
				Case  when (@ContractOpNote = 0) and ([L].[Note2] Like @ContractNote) then 1
 					  when (@ContractOpNote = 1) and ([L].[Note2] Not Like @ContractNote) then 1
					  when (@ContractOpNote = 2) and ([L].[Note2] = @ContractNote) then 1
				else 
					0 end = 1

				or @ContractActiveNote = 0
			)

			)
		and (IsNull([A].[Judicial],0) = @Judicial or @Judicial = 2)
  		and (IsNull([L].[Judicial],0) = @JudicialContract or @JudicialContract = 2)
		and (A.Ban = @banRealty or @banRealty = 2)
	
	
	

	

	if @ShowAccumulate = 0
	Delete @Tbl From @Tbl [T] inner join [AccumulateShop] [F] on [F].[ShopGuid] = [T].[FlatGuid] 


	if @ShowAccumulateEndContract = 0
	Delete @Tbl From @Tbl [T] inner join [AccumulateShop] [F] on [F].[ShopGuid] = [T].[FlatGuid] 
																and [t].[ContractFinish] = 1

	if (@ShowAssemplyRealtyRent = 1) and (@ShowShop = 1)
	Update @Tbl
	Set
		[State] = Au.[State],
		[RentState] = Au.[RentState],
		[ContractState] = Au.[ContractState],
		[CustName] = Au.[CustName],
		[CustMobile] = Au.[CustMobile],
		[CustNationality] = Au.[CustNationality],
		[CustEMail] = Au.[CustEMail],
		ContractDateBegin = Au.ContractDateBegin,
		ContractDateEnd = Au.ContractDateEnd,
		ContractFinish = Au.ContractFinish,
		ContractFinishDate = Au.ContractFinishDate,
		--Rent = Au.Rent,
		PayType = Au.PayType,
		--RentAfterDiscount = Au.RentAfterDiscount,
		--TotalInsurance = Au.TotalInsurance,
		ContractNote = Au.ContractNote,
		RentalName = Au.RentalName,
		ContractGuid = Au.ContractGuid
	From
		@Tbl T
		inner join (
					Select 
						pT.*,
						pA.ShopGuid as P_ShopGuid
					From
						@Tbl pT
						inner join [AccumulateShop] pA on pA.ParentGuid  = pT.FlatGuid
					) Au on Au.P_ShopGuid = t.FlatGuid


	--ÝÍÕ ÍÇáÉ ÇáÇíÌÇÑ
	if @RentState <> 2
	Delete @Tbl where RentState <> @RentState

	-- ÇáÔíßÇÊ
	Select Distinct [ContractGuid] into #TblContractGuid From @Tbl
	
	Select
		[P].[ContractGuid],
		Sum(IsNull([P].[Value] * [P].[CurrencyVal],0)) as [Total],
		Sum(IsNull([C1].[Value] * [C1].[CurrencyVal],0)) as [Collection]
	Into #Collection
	From
		[vwChecks] [P]
		left join [vwChecksCollection] [C1] 
			on [C1].[CheckGuid] = [P].[Guid] and [C1].[Kind] = 1
			and ( (C1.date between @IncomeDate1 and @IncomeDate2) 
					or isNull(@IncomeActiveDate,0) = 0
				)
		inner join #TblContractGuid [t] on [t].[ContractGuid] = [P].[ContractGuid]
		inner join CheckType CT on CT.Guid = p.TypeGuid
		left join [vwChecksCollection] [C3] 
			on [C3].[CheckGuid] = [P].[Guid] and [C3].[Kind] = 3
	WHERE
		C3.CheckGuid is Null
	--	(CT.CollectedEntryTypeGuid Is Null) --ãáÛì
	Group By
		[P].[ContractGuid]

	Select
		[P].[ContractGuid],
		Sum(IsNull([P].[Value] * [P].[CurrencyVal],0)) as [Total]
	Into #CheckTotal
	From
		[vwChecks] [P]
		left join [vwChecksCollection] [C1] 
			on [C1].[CheckGuid] = [P].[Guid] and [C1].[Kind] = 1
			and ( (C1.date between @IncomeDate1 and @IncomeDate2) 
					or isNull(@IncomeActiveDate,0) = 0
				)
		inner join #TblContractGuid [t] on [t].[ContractGuid] = [P].[ContractGuid]
		inner join CheckType CT on CT.Guid = p.TypeGuid
	--	(CT.CollectedEntryTypeGuid Is Null) --ãáÛì
	Group By
		[P].[ContractGuid]

	--Select * from #Collection
	
	-- ÇáÔíßÇÊ ÇáãÑÊÌÚÉ
	Select
		[P].[ContractGuid],
		--Sum(IsNull([P].[Value] * [P].[CurrencyVal],0)) as [Total],
		Sum(IsNull([C1].[Value] * [C1].[CurrencyVal],0)) as [ReturnValue]
	Into #CollectionReturn
	From
		[vwChecks] [P]
		left join [vwChecksCollection] [C1] on [C1].[CheckGuid] = [P].[Guid] and [C1].[Kind] = 3
		and ( (C1.date between @IncomeDate1 and @IncomeDate2) or @IncomeActiveDate = 0)
		inner join #TblContractGuid [t] on [t].[ContractGuid] = [P].[ContractGuid]
	Group By
		[P].[ContractGuid]

	-- ÇáÊÞÏí
	Select
		[P].[ContractGuid],
		Sum(IsNull([P].[Value] * [P].[CurrencyVal],0)) as [Cash]
	Into #Cash
	From
		[vwContractCachPayment] [P]
		inner join @Tbl [t] on [t].[ContractGuid] = [P].[ContractGuid] and P.AcGuid = t.AcGuid
	where
		( ([P].date between @IncomeDate1 and @IncomeDate2) or IsNull(@IncomeActiveDate,0) = 0)
	Group By
		[P].[ContractGuid]

	/*	
	Select
		En.AcGuid,
		SUM(En.debit - en.Credit) as [Balance]
	into #CustBalance
	From
		(Select distinct AcGuid from @Tbl ) T
		inner join DEntry En on En.AcGuid = T.AcGuid
	Group By
		En.AcGuid
	*/		
	
	Select
		Ac.Guid as AcGuid,
		IsNull(Ac.Sumdebit,0) - isNull(Ac.SumCredit,0) as [Balance]
	into #CustBalance
	From
		(Select distinct AcGuid from @Tbl ) T
		inner join Account Ac on Ac.Guid = T.AcGuid
	
	--Select * from #CollectionReturn
	--Select * from #Collection

	Select 
		t.*,
		isNull([C].[Collection],0) as [Collection],
		isNull([Ct].[Total],0) - isNull([C].[Collection],0) - IsNull([RC].[ReturnValue],0) as [CheckNotCollection],
		isNull([h].[Cash],0) as [Cash],
		Case when [PayType] = 0 then t.[RentAfterDiscount] else IsNull([C].[Collection],0) + IsNull([h].[Cash],0) end as [TotalPays],
		Case when [PayType] = 0 then 0 else isNull(t.[RentAfterDiscount],0) - IsNull([C].[Collection],0) - IsNull([h].[Cash],0) end as [ContractRest],
		IsNull([RC].[ReturnValue],0) as [ReturnValue],
		
		Cast(0 as Float) as custBalance, --isNull(t.Rent,0) - IsNull([h].[Cash],0) - isNull([C].[Total],0) + IsNull([RC].[ReturnValue],0) as [CustBalance],
		
		Case when [R].[ObjGuid] is null then 0 
			 when [R].[ObjGuid] is not null  then 1 
		end as [Check],
			 		
		1 as Kind
	into #EndRes
	From
		@Tbl [t] 
		left join #Collection [C] on [t].[ContractGuid] = [C].[ContractGuid]
		left join #CheckTotal [Ct] on [t].[ContractGuid] = [Ct].[ContractGuid]
		left join #CollectionReturn [RC] on [t].[ContractGuid] = [RC].[ContractGuid]
		left join #Cash [h] on [t].[ContractGuid] = [h].[ContractGuid]
		left join [RepCheck] [R] on [R].[ObjGuid] = [t].[FlatGuid] and [R].[IdReport] = 5000
	where
		([R].[ObjGuid] is not null and @ShowIsCheck = 1)
		or
		([R].[ObjGuid] is null and @ShowIsNotCheck = 1)
		
	
	update	
		#EndRes
	set
		custBalance = C.Balance
	From
		#EndRes E
		inner join #CustBalance C on C.AcGuid = E.AcGuid
----------------------------
	/*
	Select 
		*,
		Case when [R].[ObjGuid] is null then 0 
			 when [R].[ObjGuid] is not null  then 1 end as [Check]
	into #EndRes
	From
		@Tbl [L]
		left join [RepCheck] [R] on [R].[ObjGuid] = [L].[FlatGuid] and [R].[IdReport] = 5000
	where
		([R].[ObjGuid] is not null and @ShowIsCheck = 1)
		or
		([R].[ObjGuid] is null and @ShowIsNotCheck = 1)
	Order By 
		[BuildingName],
		[FlatNo]
	*/

	--ÊÚÏíá ÓÚÑ ÇáÈíÚ æ ÇáÅíÌÇÑ
	--Select * from @Tbl where FlatGuid = '57EEBC86-9078-421D-A447-2798E15E428A'
	Update 
		#EndRes
	Set
		SalePrice1 = L.Sale
	From
		#EndRes T
		inner join vwLastFlatSalesPrice L on L.ParentGuid = T.[FlatGuid]

	Update 
		#EndRes
	Set
		SalePrice2 = L.Sale
	From
		#EndRes T
		inner join vwLastFlatSalesPrice2 L on L.ParentGuid = T.[FlatGuid]
		
	Update 
		#EndRes
	Set
		SalePrice3 = L.Sale
	From
		#EndRes T
		inner join vwLastFlatSalesPrice3 L on L.ParentGuid = T.[FlatGuid]		

	if @ShowSaleRealty = 0
	begin
			
		delete #EndRes 
		From
			#EndRes R
			inner join LeaseApartment L on L.ApartmentGuid = R.FlatGuid
		where 
			(LeaseKind = 2) or (LeaseKind = 3)
	end

	if @ExportCSV = 1
	begin
		exec dropobject 'RepFlatRentcsv'
		
		Select 
			*
		into RepFlatRentcsv
		from 
			#EndRes
		Order By 
			[BuildingName],
			[FlatNo]		
		return
	end
	
	Select 
		* 
	from 
		#EndRes
	Order By 
		[BuildingName],
		[FlatNo]
	
	Select
		[BuildingName],
		Sum(Case when [State] = dbo.sc('ãÄÌÑÉ') then 1 else 0 end) as [StateRent],
		Sum(Case when [State] = dbo.sc('ÛíÑ ãÄÌÑÉ') then 1 else 0 end) as [StateNotRent],
		COUNT(*) as UnitCount,
		Sum([Rent]) as [Rent],
		Sum([RentAfterDiscount]) as [RentAfterDiscount],
		Sum(Case when [Judicial] = dbo.SC('äÚã') then 1 else 0 end) as [Judicial],
		SUM([Collection]) as [Collection],
		SUM([Cash]) as [Cash],
		SUM([TotalPays]) as [TotalPays],
		SUM([ContractRest]) as [ContractRest],
		SUM([CheckNotCollection]) as [CheckNotCollection],
		0 as Kind
	into #EndRes_2
	From
		#EndRes
	Group By
		[BuildingName]

	insert into #EndRes_2
	Select
		dbo.SC('ÇáãÌãæÚ') as [BuildingName],
		Sum([StateRent]),
		Sum([StateNotRent]),
		isNull(Sum([StateRent]),0) + isNull(Sum([StateNotRent]),0),
		Sum([Rent]) as [Rent],
		Sum([RentAfterDiscount]) as [RentAfterDiscount],
		Sum([Judicial]),
		SUM([Collection]),
		SUM([Cash]) as [Cash],
		SUM([TotalPays]) as [TotalPays],
		SUM([ContractRest]) as [ContractRest],
		SUM([CheckNotCollection]) as [CheckNotCollection],
		1 as Kind
	From
		#EndRes_2

	Select
		*
	From
		#EndRes_2
	Order By
		Kind , BuildingName		

	Declare @AllCount int
	Select @AllCount  = COUNT(*) from #EndRes 

	Select 
		CustNationality, COUNT(*) as [Count] , 
		100.00 * COUNT(*) / @AllCount * 1.00 as [Percent] , 
		@AllCount as AllCount from #EndRes 
	group by
		CustNationality
	order by
		[Percent] desc

GO
/****** Object:  StoredProcedure [dbo].[RepFlatSales]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[RepFlatSales]
(
	@CustGuid uniqueidentifier = 0x0
	,@Emirate Varchar(256) = ''
	,@Suburb Varchar(256) = ''
	,@Area Varchar(256) = ''
	,@Street Varchar(256) = ''
	,@FlatKind Varchar(256) = ''
	,@Class Varchar(256) = ''
	,@ApartmentType Varchar(256) = ''
	,@FlatArea1 Float = 0
	,@FlatArea2 Float = 0
	,@Unity Varchar(256) = ''
	,@SalesState int = 0
	,@Date1 DateTime = '1/1/2007'
	,@Date2 DateTime = '1/1/2009'
	,@SalesManGuid uniqueidentifier = 0x0
	,@ShowFlat Bit = 1
	,@ShowShop Bit = 1
)
  
as
	
	Declare @Tbl Table
	(
		[FlatNo] Varchar(256)
		,[BuildingName] Varchar(256)
		,[FlatKind] Varchar(256)
		,[FlatType] Varchar(256)
		,[Class] Varchar(256)
		,[FlatArea] Float
		,[State]  Varchar(256)
		,[Emirate] Varchar(256)
		,[Suburb] Varchar(256)
		,[Area] Varchar(256)
		,[Street] Varchar(256)
		,[CustName] Varchar(256)
		,[CustPhone] Varchar(256)
		,[ContractDateBegin] Datetime
		,[ContractValue] Float
		,[ContractGuid] uniqueidentifier
		,[AcGuid] uniqueidentifier
	)
	
	if @ShowFlat = 1
	Insert into @Tbl 
	Select 
		[A].[No] as [FlatNo]
		,[B].[Name] as [BuildingName]
		,[A].[FlatKind] as [FlatKind]
		,[A].[ApartmentType] as [FlatType]
		,[A].[Class] as [Class]
		,[A].[Area] as [FlatArea]
		,Case when [L].[Guid] is null then dbo.sc('ÛíÑ ãÈÇÚÉ') else dbo.sc('ãÈÇÚÉ') end as [State]
		,[B].[Emirate] as [Emirate]
		,[B].[Suburb] as [Suburb]
		,[B].[Area] as [Area]
		,[B].[Street] as [Street]
		,[Cu].[Name] as [CustName]
		,[Cu].[Mobile] as [CustPhone]
		,[L].[FromDate] as [ContractDateBegin]
		,([L].[Rent] - [L].[DiscountValue]) * [L].[CurrencyVal] as [ContractValue]
		,[L].[Guid] as [ContractGuid]
		,l.CustAccountGuid
	from 
		[vwBuilding] [B]
		Inner join [vwApartment] [A] On [A].[BuildingGuid] = [B].[Guid]
		Inner join [Resource] [R] on [R].[Guid] = [B].[Guid] and [spid] = @@Spid
		left join [LeaseApartment] [L] On [A].[Guid] = [L].[ApartmentGuid] and [LeaseKind]  = 2
		left join [vwCustomer] [Cu] on [Cu].[Guid] = [L].[CustomerGuid] 
 	where
 		([Cu].[Guid] = @CustGuid or @CustGuid = 0x0)
 		and([B].[Emirate] = @Emirate or @Emirate = '')
		and ([B].[Suburb] = @Suburb or @Suburb = '')
		and ([B].[Area] = @Area or @Area = '')
		and ([B].[Street] = @Street or @Street = '')
		and ([A].[FlatKind] = @FlatKind or @FlatKind = '')
		and ([A].[Class] = @Class or @Class = '')
		and ([A].[ApartmentType] = @ApartmentType or @ApartmentType = '')
		and ([A].[Area] between @FlatArea1 and @FlatArea2 or @FlatArea2 = 0) 
		and ([Unity] = @Unity or @Unity = '')
		and (
				([L].[Guid] is not null and @SalesState = 0)
				or ([L].[Guid] is null and @SalesState = 1)
				or @SalesState = 2
			)
		and 
			(
				([L].[FromDate] between @Date1 and @Date2)
				or @SalesState <> 0
			)

		and ([L].[SalesManGuid] = @SalesManGuid or @SalesManGuid = 0x0)

	if @ShowShop = 1
	Insert into @Tbl 
	Select 
		[A].[No] as [FlatNo]
		,[B].[Name] as [BuildingName]
		,dbo.sc('ãÍá') as [FlatKind]
		,'' as [FlatType]
		,'' as [Class]
		,[A].[Area] as [FlatArea]
		,Case when [L].[Guid] is null then dbo.sc('ÛíÑ ãÈÇÚÉ') else dbo.sc('ãÈÇÚÉ') end as [State]
		,[B].[Emirate] as [Emirate]
		,[B].[Suburb] as [Suburb]
		,[B].[Area] as [Area]
		,[B].[Street] as [Street]
		,[Cu].[Name] as [CustName]
		,[Cu].[Mobile] as [CustPhone]
		,[L].[FromDate] as [ContractDateBegin]
		,([L].[Rent] - [L].[DiscountValue]) * [L].[CurrencyVal] as [ContractValue]
		,[L].[Guid] as [ContractGuid]
		,l.CustAccountGuid
	from 
		[vwBuilding] [B]
		Inner join [vwShop] [A] On [A].[BuildingGuid] = [B].[Guid]
		Inner join [Resource] [R] on [R].[Guid] = [B].[Guid] and [spid] = @@Spid
		left join [LeaseApartment] [L] On [A].[Guid] = [L].[ApartmentGuid] and [LeaseKind]  = 2
		left join [vwCustomer] [Cu] on [Cu].[Guid] = [L].[CustomerGuid] 
	where
		([Cu].[Guid] = @CustGuid or @CustGuid = 0x0)
 		and	([B].[Emirate] = @Emirate or @Emirate = '')
		and ([B].[Suburb] = @Suburb or @Suburb = '')
		and ([B].[Area] = @Area or @Area = '')
		and ([B].[Street] = @Street or @Street = '')
		and ([A].[Area] between @FlatArea1 and @FlatArea2 or @FlatArea2 = 0) 
		and ([Unity] = @Unity or @Unity = '')
		and (
				([L].[Guid] is not null and @SalesState = 0)
				or ([L].[Guid] is null and @SalesState = 1)
				or @SalesState = 2
			)
		and 
			(
				([L].[FromDate] between @Date1 and @Date2)
				or @SalesState <> 0
			)

		and ([L].[SalesManGuid] = @SalesManGuid or @SalesManGuid = 0x0)

	-- ÇáÔíßÇÊ
	Select
		[P].[ContractGuid],
		Sum(IsNull([P].[Value] * [P].[CurrencyVal],0)) as [Total],
		Sum(IsNull([C1].[Value] * [C1].[CurrencyVal],0)) as [Collection]
--		+  IsNull([pc].[Value] * [pc].[CurrencyVal],0)) 
	Into #Collection
	From
		[vwChecks] [P]
		left join [vwChecksCollection] [C1] on [C1].[CheckGuid] = [P].[Guid] and [C1].[Kind] = 1
--		left join [ChecksPartialCollection] [pc] on [pc].[CheckGuid] = [P].[Guid]
		inner join @Tbl [t] on [t].[ContractGuid] = [P].[ContractGuid]
	Group By
		[P].[ContractGuid]

	-- ÇáÊÞÏí
	Select
		[P].[ContractGuid],
		Sum(IsNull([P].[Value] * [P].[CurrencyVal],0)) as [Cash]
	Into #Cash
	From
		[vwContractCachPayment] [P]
		inner join @Tbl [t] on [t].[ContractGuid] = [P].[ContractGuid] and P.AcGuid = t.AcGuid
	Group By
		[P].[ContractGuid]

	Select 
		t.*,
		isNull([C].[Collection],0) as [Collection],
		isNull([C].[Total],0) - isNull([C].[Collection],0) as [CheckNotCollection],
		isNull([h].[Cash],0) as [Cash],
		IsNull([C].[Collection],0) + IsNull([h].[Cash],0) as [TotalPays],
		isNull([ContractValue],0) - IsNull([C].[Collection],0) - IsNull([h].[Cash],0) as [ContractRest],
		isNull(t.ContractValue,0) - IsNull([h].[Cash],0) - isNull([C].[Total],0) as [CustBalance],
		1 as Kind
	into #EndRes
	From
		@Tbl [t] 
		left join #Collection [C] on [t].[ContractGuid] = [C].[ContractGuid]
		left join #Cash [h] on [t].[ContractGuid] = [h].[ContractGuid]
	
	Insert into #EndRes
	Select
		Null as [FlatNo],		dbo.SC('ÇáãÌãæÚ') as [BuildingName],		Null as [FlatKind],		Null as [FlatType],		Null as [Class],		Null as [FlatArea],		Null as [State],		Null as [Emirate],		Null as [Suburb],		Null as [Area],		Null as [Street],		Null as [CustName],		Null as [CustPhone],		Null as [ContractDateBegin],		Sum([ContractValue]),		Null as [ContractGuid],		Null as [AcGuid],		IsNull(Sum([Collection]),0),		IsNull(Sum([CheckNotCollection]),0),		IsNull(Sum([Cash]),0),		IsNull(Sum([TotalPays]),0),		IsNull(Sum([ContractRest]),0),		IsNull(Sum([CustBalance]),0),		2 as [Kind]
	From
		#EndRes
		

	Select
		*
	From
		#Endres
	Order By 
		Kind,
		[BuildingName],
		[FlatNo]


GO
/****** Object:  StoredProcedure [dbo].[RepLandRent]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[RepLandRent]
(
	@CustGuid uniqueidentifier = 0x0
	,@Nationality Varchar(256) = ''
	,@LandGuid uniqueidentifier = 0x0
	,@LtnLandName Varchar(256) = ''
	,@LandType Varchar(256) = ''
	,@City Varchar(256) = ''
	,@Region Varchar(256) = ''
	,@Space Varchar(256) = ''
	,@EarthNo Varchar(256) = ''
	,@license Varchar(256) = ''
	,@Side Varchar(256) = ''
	,@FlatArea1 Float = 0
	,@FlatArea2 Float = 0
	,@Unity Varchar(256) = ''
	,@RentState int = 2
	,@ContractState int = 2
	,@Datewith int = 0
	,@Date1 DateTime = '2009-7-1'
	,@Date2 DateTime = '2022-1-2'
	,@RentInfoGuid uniqueidentifier = 0x0
	,@SalesManGuid uniqueidentifier = 0x0
	,@ShowIsCheck Bit = 1
	,@ShowIsNotCheck Bit = 1
	,@Rent1 Float = 0
	,@Rent2 Float = 0
	,@CheckDate Bit = 0

	,@ActiveNote Bit = 0
	,@OperationNote int = 0
	,@RealtyNote  Varchar(256) = '' 
	,@ContractActiveNote Bit = 0
	,@ContractOpNote int = 0
	,@ContractNote  Varchar(256) = '' 
)
  
as
	Set NoCount On 
	--ãÚÇáÌÉ ÈíÇä ÇáÚÞÇÑ
	if @OperationNote <> 2 --íÍæí
	Set @RealtyNote = '%'+@RealtyNote+'%'
	
	--ãÚÇáÌÉ ÈíÇä ÇáÚÞÏ
	if @ContractOpNote <> 2 --íÍæí
	Set @ContractNote = '%'+@ContractNote+'%'

	--ÌáÈ ÂÎÑ ÚÞÏ áßá ÔÞÉ
	Select
		[LandGuid],
		Max([FromDate]) as [FromDate]
	Into #LastContract	
	From
		[vwLandContract]
	Group By
		[LandGuid]

	Select 
		Case 
			when [ContractFinish] = 0 and [ToDate] >= GetDate() then [ToDate]
			when [ContractFinish] = 0 and [ToDate] < GetDate() then GetDate()
			when [ContractFinish] = 1  then [ContractFinishDate]
		end as [EndContractDate],
		[C].*
	Into #vwLandContract
	From
		[vwLandContract] [C]
		inner join #LastContract [L] on [L].[LandGuid] = [C].[LandGuid] and [L].[FromDate] = [C].[FromDate]

--	where [ContractFinish] = 0 ãÇ ÈÚÑÝ áíÔ ßÇä ãÍØæØ

	Declare @Tbl Table
	(
		[LandName] Varchar(256)
		,[LtnLandName] Varchar(256)
		,[LandType] Varchar(256)
		,[City] Varchar(256)
		,[Region] Varchar(256)
		,[Space] Varchar(256)
		,[EarthNo] Varchar(256)
		,[license] Varchar(256)
		,[Side] Varchar(256)
		,[Area] Float
		,[Unity] Varchar(256)
		,[State]  Varchar(256)
		,[ContractState] Varchar(256)
		,[CustName] Varchar(256)
		,[CustPhone] Varchar(256)
		,[CustNationality] Varchar(256)
		,[ContractDateBegin] Datetime
		,[ContractDateEnd] Datetime
		,[ContractGuid] uniqueidentifier
		,[Rent] Float
		,[RentAfterDiscount] Float
		,[InsuranceValueOld] Float
		,[InsuranceValue] Float
		,[FlatGuid]uniqueidentifier
		,[EarthNote] Varchar(1000)
		,[ContractNote] Varchar(1000)
		,[ElectricityCounter] Float
	)
	
	Insert into @Tbl 
	Select 
		[A].[Name] as [LandName]
		,[A].[LtnName] as [LtnLandName]
		,[A].[LandType]
		,[A].[City]
		,[A].[Region]
		,[A].[Space]
		,[A].[EarthNo]
		,[A].[license]
		,[A].[Side]
		,[A].[Area] 
		,[A].[Unity]
		,Case when [L].[ContractFinish] = 0 then  dbo.sc('ãÄÌÑÉ') 
			  else dbo.SC('ÛíÑ ãÄÌÑÉ') 
		end as [State]
		
		,Case when [L].[ContractFinish] = 0 then
			 Case when (([L].[ToDate] <= GetDate()) or ([L].[ContractFinish] = 1)) or (@Date2 > [L].[ToDate]) then dbo.sc('ãäÊåí ÇáãÏÉ')  
				  when ([L].[ToDate] > GetDate()) and ([L].[ContractFinish] = 0) then dbo.sc('ÛíÑ ãäÊåí ÇáãÏÉ')  end 
		 end as [ContractState]

		,[Cu].[Name] as [CustName]
		,[Cu].[Mobile] as [CustPhone]
		,[Cu].[Nationality]
		,Case when [L].[ContractFinish] = 0 then [L].[FromDate] end as [ContractDateBegin]
		,Case when [L].[ContractFinish] = 0 then [L].[ToDate] end as [ContractDateEnd]
		,Case when [L].[ContractFinish] = 0 then [L].[Guid] end as [ContractGuid]
		,Case when [L].[ContractFinish] = 0 then [L].[Rent] end 
		,Case when [L].[ContractFinish] = 0 then [L].[Rent] - [L].[DiscountValue] end
		,L.[InsuranceValueOld]
		,L.[InsuranceValue]
		,[A].[Guid]
		,[A].[Details] as [Note]
		,[L].[Note2]
		,[ElectricityCounter]
	from 
		[Vwearth] [A]
		left join [#vwLandContract] [L] On [A].[Guid] = [L].[LandGuid] 
										and [L].[Contractkind]  = 7

		left join [vwCustomer] [Cu] on [Cu].[Guid] = [L].[CustomerGuid] 
		left join (
					Select
						Max(Number) as [Number],
						[LandGuid]
					From
						[vwLandContract]
					where 
						[Contractkind]  = 7
					Group By 
						[LandGuid]
					) [LastLease] On [LastLease].[Number] = [L].[Number] and [LastLease].[LandGuid] = [L].[LandGuid]
		left join (
					Select
						Max(Number) as [Number],
						[LandGuid]
					From
						[vwLandContract]
					where 
						[Contractkind]  = 6
					Group By 
						[LandGuid]
					) [Sales] On [Sales].[LandGuid] = [A].[Guid]
 	where
		([Cu].[Guid] = @CustGuid or @CustGuid = 0x0)
		and (Cu.Nationality = @Nationality or @Nationality = '')
		and ([A].[Guid] = @LandGuid or @LandGuid = 0x0)
		and ([A].[LtnName] Like '%'+@LtnLandName+'%')		
		and ([A].[City] Like '%'+@City+'%')
		and ([A].[Region] Like '%'+@Region+'%')
		and ([A].[Space] Like '%'+@Space+'%')
		and ([A].[license] Like '%'+@license+'%')
		and ([A].[Side] Like '%'+@Side+'%')

   		and ([A].[Area] between @FlatArea1 and @FlatArea2 or @FlatArea2 = 0) 
   		and ([Unity] = @Unity or @Unity = '')
   		and (
   				([L].[ContractFinish] = 0 and @RentState = 0)
   				or ( ([L].[Guid] is null or [L].[ContractFinish] = 1) and @RentState = 1)
   				or @RentState = 2
   			)
   		and 
   			(
   				(
   					(([L].[ToDate] <= GetDate()) or ([L].[ContractFinish] = 1) ) and @ContractState = 0
  				)
   			  	or ( 
   					(
   						(([L].[ToDate] > GetDate()) and ([L].[ContractFinish] = 0) ) and @ContractState = 1
   					)
   					)
   				or @ContractState = 2
   			)
   
 
   		and ([L].[RentInfoGuid] = @RentInfoGuid or @RentInfoGuid = 0x0)
   		and ([L].[SalesManGuid] = @SalesManGuid or @SalesManGuid = 0x0)
   		and ([Sales].[LandGuid] is null)
   		and ([L].[Rent] Between @Rent1 and @Rent2 or @Rent2 = 0)
   		and 
   			(
   				
   				Case  when (@OperationNote = 0) and ([A].[Details] Like @RealtyNote) then 1
    					  when (@OperationNote = 1) and ([A].[Details] Not Like @RealtyNote) then 1
   					  when (@OperationNote = 2) and ([A].[Details] = @RealtyNote) then 1
   				else 
   					0 end = 1
   					
   				or @ActiveNote = 0
   			)
   
   		and 
   			(
   				Case  when (@ContractOpNote = 0) and ([L].[Note2] Like @ContractNote) then 1
    					  when (@ContractOpNote = 1) and ([L].[Note2] Not Like @ContractNote) then 1
   					  when (@ContractOpNote = 2) and ([L].[Note2] = @ContractNote) then 1
   				else 
   					0 end = 1
   
   				or @ContractActiveNote = 0
  			)
 

	Select 
		*,
		Case when [R].[ObjGuid] is null then 0 
			 when [R].[ObjGuid] is not null  then 1 end as [Check]
	into #EndRes
	From
		@Tbl [L]
		left join [RepCheck] [R] on [R].[ObjGuid] = [L].[FlatGuid] and [R].[IdReport] = 5001
	where
		([R].[ObjGuid] is not null and @ShowIsCheck = 1)
		or
		([R].[ObjGuid] is null and @ShowIsNotCheck = 1)
	Order By 
		[EarthNo]

	Select 
		* 
	from 
		#EndRes
	Order By 
		[EarthNo]

	Select 
		(Select Count(*) From @Tbl where [State] = dbo.sc('ãÄÌÑÉ')) as [StateRent],
		(Select Count(*) From @Tbl where [State] = dbo.sc('ÛíÑ ãÄÌÑÉ')) as [StateNotRent],
		(Select Sum([Rent]) From @Tbl ) as [Rent],
		(Select Sum([RentAfterDiscount]) From @Tbl ) as [RentAfterDiscount],
		(Select Sum([Area]) From @Tbl where [State] = dbo.sc('ãÄÌÑÉ')) as [RentArea],
		(Select Sum([Area]) From @Tbl where [State] = dbo.sc('ÛíÑ ãÄÌÑÉ')) as [NotRentArea]




GO
/****** Object:  StoredProcedure [dbo].[RepLandSales]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[RepLandSales]
(
    @CustGuid uniqueidentifier = 0x0,
    @LandName Varchar(256) = '',
    @LtnLandName Varchar(256) = '',
    @LandType Varchar(256) = '',
    @City Varchar(256) = '',
    @Region Varchar(256) = '',
    @Space Varchar(256) = '',
    @EarthNo Varchar(256) = '',
    @license Varchar(256) = '',
    @Side Varchar(256) = '',
    @FlatArea1 Float = 0,
    @FlatArea2 Float = 0,
	@unity Varchar(256) = '',
    @Date1 Datetime = '1/1/2010',
    @Date2 Datetime = '1/1/2011',
    @SalesManGuid uniqueidentifier = 0x0,
    @ShowIsCheck Bit = 1,
    @ShowIsNotCheck Bit = 1,
    @CheckDate Bit = 1,
    @ActiveNote Bit = 1,
    @OperationNote Varchar(256) = '',
    @RealtyNote Varchar(256) = '',
    @ContractActiveNote bit = 0,
    @ContractOpNote Varchar(256) = '',
    @ContractNote Varchar(256) = '',
    @SalesState int = 0
)
  
as
	
	Set NoCount On 
	--ãÚÇáÌÉ ÈíÇä ÇáÚÞÇÑ
	if @OperationNote <> 2 --íÍæí
	Set @RealtyNote = '%'+@RealtyNote+'%'
	
	--ãÚÇáÌÉ ÈíÇä ÇáÚÞÏ
	if @ContractOpNote <> 2 --íÍæí
	Set @ContractNote = '%'+@ContractNote+'%'

	Declare @Tbl Table
	(
		[LandName] Varchar(256)
		,[LtnLandName] Varchar(256)
		,[LandType] Varchar(256)
		,[City] Varchar(256)
		,[Region] Varchar(256)
		,[Space] Varchar(256)
		,[EarthNo] Varchar(256)
		,[license] Varchar(256)
		,[Area]  Float
		,[Side]  Varchar(256)
		,[State]  Varchar(256)
		,[CustName] Varchar(256)
		,[CustPhone] Varchar(256)
		,[ContractDateBegin] Datetime
		,[ContractValue] Float
		,[LandNote] Varchar(1000)
		,[ContractNote] Varchar(1000)
		,[ContractGuid] uniqueidentifier
		,[LandGuid] uniqueidentifier
	)
	
	insert Into @Tbl
	Select 
		[A].[Name] as [LandName]
		,[A].[LtnName] as [LtnLandName]
		,[A].[LandType]
		,[A].[City]
		,[A].[Region]
		,[A].[Space]
		,[A].[EarthNo]
		,[A].[license]
		,[A].[Area]
		,[A].[Side]
		,Case when [L].[Guid] is null then dbo.sc('ÛíÑ ãÈÇÚÉ') else dbo.sc('ãÈÇÚÉ') end as [State]
		,[Cu].[Name] as [CustName]
		,[Cu].[Mobile] as [CustPhone]
		,[L].[FromDate] as [ContractDateBegin]
		,([L].[Rent] - [L].[DiscountValue]) * [L].[CurrencyVal] as [ContractValue]
		,[A].[Details] as [Note]
		,[L].[Note2]
		,[L].[Guid] as [ContractGuid]
		,[A].[Guid]
	from 
		[vwEarth] [A]
		left join [vwLandContract] [L] On [A].[Guid] = [L].[LandGuid] and [ContractKind]  = 6
		left join [vwCustomer] [Cu] on [Cu].[Guid] = [L].[CustomerGuid] 
 	where
 		([Cu].[Guid] = @CustGuid or @CustGuid = 0x0)
		and (
				([L].[Guid] is not null and @SalesState = 0)
				or ([L].[Guid] is null and @SalesState = 1)
				or @SalesState = 2
			)
		and 
			(
				([L].[FromDate] between @Date1 and @Date2)
				or @SalesState <> 0
			)

		and ([L].[SalesManGuid] = @SalesManGuid or @SalesManGuid = 0x0)

		and ([A].[Name] Like '%'+@LandName+'%')
		and ([A].[LtnName] Like '%'+@LtnLandName+'%')		
		and ([A].[City] Like '%'+@City+'%')
		and ([A].[Region] Like '%'+@Region+'%')
		and ([A].[Space] Like '%'+@Space+'%')
		and ([A].[license] Like '%'+@license+'%')
		and ([A].[Side] Like '%'+@Side+'%')

   		and ([A].[Area] between @FlatArea1 and @FlatArea2 or @FlatArea2 = 0) 
   		and ([Unity] = @Unity or @Unity = '')
   		and 
   			(
   				
   				Case  when (@OperationNote = 0) and ([A].[Details] Like @RealtyNote) then 1
    					  when (@OperationNote = 1) and ([A].[Details] Not Like @RealtyNote) then 1
   					  when (@OperationNote = 2) and ([A].[Details] = @RealtyNote) then 1
   				else 
   					0 end = 1
   					
   				or @ActiveNote = 0
   			)
   
   		and 
   			(
   				Case  when (@ContractOpNote = 0) and ([L].[Note2] Like @ContractNote) then 1
    					  when (@ContractOpNote = 1) and ([L].[Note2] Not Like @ContractNote) then 1
   					  when (@ContractOpNote = 2) and ([L].[Note2] = @ContractNote) then 1
   				else 
   					0 end = 1
   
   				or @ContractActiveNote = 0
  			)


	-- ÇáÔíßÇÊ
	Select
		[P].[ContractGuid],
		Sum(IsNull([C1].[Value] * [C1].[CurrencyVal],0)) as [Collection]
--		+  IsNull([pc].[Value] * [pc].[CurrencyVal],0)) 
	Into #Collection
	From
		[vwChecks] [P]
		left join [vwChecksCollection] [C1] on [C1].[CheckGuid] = [P].[Guid] and [C1].[Kind] = 1
--		left join [ChecksPartialCollection] [pc] on [pc].[CheckGuid] = [P].[Guid]
		inner join @Tbl [t] on [t].[ContractGuid] = [P].[ContractGuid]
	Group By
		[P].[ContractGuid]

	-- ÇáÊÞÏí
	Select
		[P].[ContractGuid],
		Sum(IsNull([P].[Value] * [P].[CurrencyVal],0)) as [Cash]
	Into #Cash
	From
		[vwContractCachPayment] [P]
		inner join @Tbl [t] on [t].[ContractGuid] = [P].[ContractGuid]
	Group By
		[P].[ContractGuid]

	Select 
		[T].*,
		[C].[Collection],
		[h].[Cash],
		IsNull([C].[Collection],0) + IsNull([h].[Cash],0) as [TotalPays],
		[ContractValue] - IsNull([C].[Collection],0) - IsNull([h].[Cash],0) as [ContractRest]
	Into #EndTbl
	From
		@Tbl [t] 
		left join #Collection [C] on [t].[ContractGuid] = [C].[ContractGuid]
		left join #Cash [h] on [t].[ContractGuid] = [h].[ContractGuid]
	Order By 
		[LandName]


	Select 
		*,
		Case when [R].[ObjGuid] is null then 0 
			 when [R].[ObjGuid] is not null  then 1 end as [Check]
	into #EndRes
	From
		#EndTbl [L]
		left join [RepCheck] [R] on [R].[ObjGuid] = [L].LandGuid and [R].[IdReport] = 5003
	where
		([R].[ObjGuid] is not null and @ShowIsCheck = 1)
		or
		([R].[ObjGuid] is null and @ShowIsNotCheck = 1)
	Order By 
		[LandName]


	Select 
		* 
	from 
		#EndRes
	Order By 
		[LandName]


GO
/****** Object:  StoredProcedure [dbo].[RepParkingRent]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[RepParkingRent]
(
	@ParkingNo Varchar(256) = ''
	,@Emirate Varchar(256) = ''
	,@Suburb Varchar(256) = ''
	,@Area Varchar(256) = ''
	,@Street Varchar(256) = ''
	,@RentState int = 2
	,@ContractState int = 2
	,@CustGuid uniqueidentifier = 0x0
	,@Datewith int = 0
	,@Date1 DateTime = '12/30/1899'
	,@Date2 DateTime = '12/30/1899'
	,@RentInfoGuid uniqueidentifier = 0x0
	,@SalesManGuid uniqueidentifier = 0x0
	,@Judicial int = 2
	,@Nationality Varchar(256) = ''
	,@CheckDate Bit = 0
	,@ShowAccumulate Bit = 0
	,@ShowAccumulateEndContract Bit = 1
	,@BanRealty int = 2
	,@ContractValue int = 2
)
  
as
	
	--ÌáÈ ÂÎÑ ÚÞÏ áßá ãæÞÝ
	Select
		[ParkingGuid],
		Max([FromDate]) as [FromDate]
	Into #LastContract	
	From
		[ParkingContract]
	Group By
		[ParkingGuid]

	Select 
		Case 
			when [ContractFinish] = 0 and [ToDate] >= GetDate() then [ToDate]
			when [ContractFinish] = 0 and [ToDate] < GetDate() then GetDate()
			when [ContractFinish] = 1  then [ContractFinishDate]
		end as [EndContractDate],
		[C].*
	Into #ParkingContract
	From
		[ParkingContract] [C]
		inner join #LastContract [L] on [L].[ParkingGuid] = [C].[ParkingGuid] and [L].[FromDate] = [C].[FromDate]
		Inner join [Resource] [R] on [R].[Guid] = [C].BuildingGuid and [spid] = @@Spid
	where
		 (
				(([C].Rent - [C].DiscountValue) <> 0 and @ContractValue = 0) or
				(([C].Rent - [C].DiscountValue) = 0 and @ContractValue = 1) or
				@ContractValue = 2
			)
	
		
	--Select * from #ParkingContract
	

	Select Distinct
		Pc.[ParkingContractGuid],
		ac.ApartmentNo
	into #LinkParking
	From
		[LinkParkingContract] Pc
		inner join [vwLeaseApartment] Ac on Ac.Guid = pc.ParentGuid
		inner join [#ParkingContract] L on pc.[ParkingContractGuid] = L.Guid
		
	
	Select 
		[A].[Number],
		[A].[No] as [ParkingNo]
		,[B].[Name] as [BuildingName]

		,Case when [L].[ContractFinish] = 0 then  dbo.sc('ãÄÌÑÉ') 
			  else dbo.SC('ÛíÑ ãÄÌÑÉ') 
		end as [State]

		
		,Case when [L].[ContractFinish] = 0 then
			 Case when (([L].[ToDate] <= GetDate()) or ([L].[ContractFinish] = 1)) or (@Date2 > [L].[ToDate]) then dbo.sc('ãäÊåí ÇáãÏÉ')  
				  when ([L].[ToDate] > GetDate()) and ([L].[ContractFinish] = 0) then dbo.sc('ÛíÑ ãäÊåí ÇáãÏÉ')  end 
		 end as [ContractState]

		,[B].[Emirate] as [BuildingEmirate]
		,[B].[Suburb] as [Suburb]
		,[B].[Area] as [Area]
		,[B].[Street] as [Street]
		,[Cu].[Name] as [CustName]
		,[Cu].[Mobile] as [CustPhone]
		,[Cu].[Nationality] [CustNationality]
		,Case when [L].[ContractFinish] = 0 then [L].[FromDate] end as [ContractDateBegin]
		,Case when [L].[ContractFinish] = 0 then[L].[ToDate] end as [ContractDateEnd]
		,Case when [L].[ContractFinish] = 0 then [L].[Guid] end as [ContractGuid]
		,[Sales].[Number] as SalesNumber
		,[A].[Judicial]
		,[A].[Sale]
		,[A].[Rent]
		,[L].[Description]
		,l.Rent as [ContractRent]
		,Lc.ApartmentNo

		,L.[CardNo]
		,L.[CarNo]
		,L.[CarType]
		,L.[CarColor]
		,L.[Emirate]

		,L.[InsuranceValue]
		,L.[InsuranceValueOld]
		,A.Guid as ParkingGuid
		,[L].[ContractFinish]
	into #TblRarkingRent
	from 
		[vwBuilding] [B]
		Inner join [vwParkingAll] [A] On [A].[BuildingGuid] = [B].[Guid]
		Inner join [Resource] [R] on [R].[Guid] = [B].[Guid] and [spid] = @@Spid
--		left join [#ParkingContract] [L] On [A].[Guid] = [L].[ParkingGuid] --and [ContractKind]  = 4

		left join [#ParkingContract] [L] On [A].[Guid] = [L].[ParkingGuid] and [L].[ContractKind]  = 4

		left join [vwCustomer] [Cu] on [Cu].[Guid] = [L].[CustomerGuid] 
		left join (
					Select
						Max(Number) as [Number],
						[ParkingGuid]
					From
						[ParkingContract]
					where 
						[ContractKind]  = 0
					Group By 
						[ParkingGuid]
					) [LastLease] On [LastLease].[Number] = [L].[Number] and [LastLease].[ParkingGuid] = [L].[ParkingGuid]
		left join (
					Select
						Max(Number) as [Number],
						[ParkingGuid]
					From
						[ParkingContract]
					where 
						[ContractKind]  = 1
					Group By 
						[ParkingGuid]
					) [Sales] On [Sales].[ParkingGuid] = [L].[Guid]
		--ÑÞã ÇáÔÞÉ ÇáãÑÊÈØÉ
		left join #LinkParking LC on Lc.[ParkingContractGuid] = L.Guid

	where
 		([Cu].[Guid] = @CustGuid or @CustGuid = 0x0)
		and (Cu.Nationality = @Nationality or @Nationality = '')
		and ([A].[No] = @ParkingNo or @ParkingNo = '')
		And ([B].[Emirate] = @Emirate or @Emirate = '')
		and ([B].[Suburb] = @Suburb or @Suburb = '')
		and ([B].[Area] = @Area or @Area = '')
		and ([B].[Street] = @Street or @Street = '')
		and ([A].[Judicial] = @Judicial or @Judicial = 2)
		and (
  				(Case when [L].[ContractFinish] = 0 then 0 else 1 end = @RentState)
  				or @RentState = 2
			)
		and 
			(
				([L].[ToDate] <= GetDate() and @ContractState = 0)
			  	or ([L].[ToDate] > GetDate() and @ContractState = 1)
				or @ContractState = 2
			)

		and ([L].[RentInfoGuid] = @RentInfoGuid or @RentInfoGuid = 0x0)
		and ([L].[SalesManGuid] = @SalesManGuid or @SalesManGuid = 0x0)
		
		--ÛíÑ ãÈÇÚ
		and ([Sales].[ParkingGuid] is Null)
		and (A.Ban = @banRealty or @banRealty = 2)		
		
	if @ShowAccumulate = 0
	Delete #TblRarkingRent From #TblRarkingRent [T] inner join [AccumulateParking] [F] on [F].[ParkingGuid] = [T].[ParkingGuid] 

	if @ShowAccumulateEndContract = 0
	begin
	Delete #TblRarkingRent 
	From 
		#TblRarkingRent [T] 
		inner join [AccumulateParking] [F] on [F].[ParentGuid] = [T].[ParkingGuid] and isnull([t].[ContractFinish],1) = 1
		inner join [AccumulateParking] [F2] on [F2].ParkingGuid = [F].[ParkingGuid] and isnull([T].[ContractFinish],0) = 0
	end
		
	Select
		*
	From
		#TblRarkingRent
	Order By 
		[BuildingName],
		dbo.FnStrToAscii([ParkingNo])
		

GO
/****** Object:  StoredProcedure [dbo].[RepVillaRent]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[RepVillaRent]
(
	@CustGuid uniqueidentifier = 0x0
	,@Nationality Varchar(256) = ''
	,@VillaNo Varchar(256) = ''
	,@ComplexName Varchar(256) = ''
	,@Emirate Varchar(256) = ''
	,@Area Varchar(256) = ''
	,@BasinNo Varchar(256) = ''
	,@DocType Varchar(256) = ''
	,@FlatArea1 Float = 0
	,@FlatArea2 Float = 0
	,@RentState int = 2
	,@ContractState int = 2
	,@Datewith int = 0
	,@Date1 DateTime = '2009-7-1'
	,@Date2 DateTime = '2022-1-2'
	,@RentInfoGuid uniqueidentifier = 0x0
	,@SalesManGuid uniqueidentifier = 0x0
	,@ShowIsCheck Bit = 1
	,@ShowIsNotCheck Bit = 1
	,@Rent1 Float = 0
	,@Rent2 Float = 0
	,@CheckDate Bit = 0

	,@ActiveNote Bit = 0
	,@OperationNote int = 0
	,@RealtyNote  Varchar(256) = '' 
	,@ContractActiveNote Bit = 0
	,@ContractOpNote int = 0
	,@ContractNote  Varchar(256) = '' 
)
  
as
	Set NoCount On 
	--ãÚÇáÌÉ ÈíÇä ÇáÚÞÇÑ
	if @OperationNote <> 2 --íÍæí
	Set @RealtyNote = '%'+@RealtyNote+'%'
	
	--ãÚÇáÌÉ ÈíÇä ÇáÚÞÏ
	if @ContractOpNote <> 2 --íÍæí
	Set @ContractNote = '%'+@ContractNote+'%'

	--ÌáÈ ÂÎÑ ÚÞÏ áßá ÔÞÉ
	Select
		[VillaGuid],
		Max([FromDate]) as [FromDate]
	Into #LastContract	
	From
		[vwLandContract]
	Group By
		[VillaGuid]


	Select 
		Case 
			when [ContractFinish] = 0 and [ToDate] >= GetDate() then [ToDate]
			when [ContractFinish] = 0 and [ToDate] < GetDate() then GetDate()
			when [ContractFinish] = 1  then [ContractFinishDate]
		end as [EndContractDate],
		[C].*
	Into #vwLandContract
	From
		[vwLandContract] [C]
		inner join #LastContract [L] on [L].[VillaGuid] = [C].[VillaGuid] and [L].[FromDate] = [C].[FromDate]

--	where [ContractFinish] = 0 ãÇ ÈÚÑÝ áíÔ ßÇä ãÍØæØ

	Declare @Tbl Table
	(
		[VillaNo] Varchar(256)
		,[ComplexName] Varchar(256)
		,[Emirate] Varchar(256)
		,[Region] Varchar(256)
		,[BasinNo] Varchar(256)
		,[license] Varchar(256)
		,[Area]  Varchar(256)
		,[State]  Varchar(256)
		,[ContractState] Varchar(256)
		,[CustName] Varchar(256)
		,[CustPhone] Varchar(256)
		,[CustNationality] Varchar(256)
		,[ContractDateBegin] Datetime
		,[ContractDateEnd] Datetime
		,[ContractGuid] uniqueidentifier
		,[Rent] Float
		,[RentAfterDiscount] Float
		,[FlatGuid]uniqueidentifier
		,[ContractNote] Varchar(1000)
		,[WaterCounter]  Varchar(256)
		,[ElectricityCounter]  Varchar(256)
	)
	
	Insert into @Tbl 
	Select 
		[A].[Name] as [VillaNo]
		,[A].[ComplexName]
		,[A].[Emirate]
		,[A].[Area]
		,[A].[BasinNo]
		,[A].[DocType]
		,[A].[LandArea]
		,Case when [L].[ContractFinish] = 0 then  dbo.sc('ãÄÌÑÉ') 
			  else dbo.SC('ÛíÑ ãÄÌÑÉ') 
		end as [State]
		,Case when [L].[ContractFinish] = 0 then
			 Case when (([L].[ToDate] <= GetDate()) or ([L].[ContractFinish] = 1)) or (@Date2 > [L].[ToDate]) then dbo.sc('ãäÊåí ÇáãÏÉ')  
				  when ([L].[ToDate] > GetDate()) and ([L].[ContractFinish] = 0) then dbo.sc('ÛíÑ ãäÊåí ÇáãÏÉ')  end 
		 end as [ContractState]

		,[Cu].[Name] as [CustName]
		,[Cu].[Mobile] as [CustPhone]
		,[Cu].[Nationality]
		,Case when [L].[ContractFinish] = 0 then [L].[FromDate] end as [ContractDateBegin]
		,Case when [L].[ContractFinish] = 0 then [L].[ToDate] end as [ContractDateEnd]
		,Case when [L].[ContractFinish] = 0 then [L].[Guid] end as [ContractGuid]
		,Case when [L].[ContractFinish] = 0 then [L].[Rent] end 
		,Case when [L].[ContractFinish] = 0 then [L].[Rent] - [L].[DiscountValue] end
		,[A].[Guid]
		,[A].[Details] as [Note]
		,[A].[WaterCounter]
		,[A].[ElectricityCounter]
	from 
		[vwVilla] [A]
		left join [#vwLandContract] [L] On [A].[Guid] = [L].[LandGuid] 
										and [L].[Contractkind]  = 9

		left join [vwCustomer] [Cu] on [Cu].[Guid] = [L].[CustomerGuid] 
		left join (
					Select
						Max(Number) as [Number],
						[LandGuid]
					From
						[vwLandContract]
					where 
						[Contractkind]  = 9
					Group By 
						[LandGuid]
					) [LastLease] On [LastLease].[Number] = [L].[Number] and [LastLease].[LandGuid] = [L].[LandGuid]
		left join (
					Select
						Max(Number) as [Number],
						[LandGuid]
					From
						[vwLandContract]
					where 
						[Contractkind]  = 8
					Group By 
						[LandGuid]
					) [Sales] On [Sales].[LandGuid] = [A].[Guid]

 	where
		([Cu].[Guid] = @CustGuid or @CustGuid = 0x0)
		and (Cu.Nationality = @Nationality or @Nationality = '')
		and ([A].[VillaNo] Like '%'+@VillaNo+'%')
		and ([A].[Emirate] Like '%'+@Emirate+'%')
		and ([A].[Area] Like '%'+@Area+'%')
		and ([A].[BasinNo] Like '%'+@BasinNo+'%')
		and ([A].[DocType] Like '%'+@DocType+'%')

   		and ([A].[LandArea] between @FlatArea1 and @FlatArea2 or @FlatArea2 = 0) 

   		and (
   				([L].[ContractFinish] = 0 and @RentState = 0)
   				or ( ([L].[Guid] is null or [L].[ContractFinish] = 1) and @RentState = 1)
   				or @RentState = 2
   			)
   		and 
   			(
   				(
   					(([L].[ToDate] <= GetDate()) or ([L].[ContractFinish] = 1) ) and @ContractState = 0
  				)
   			  	or ( 
   					(
   						(([L].[ToDate] > GetDate()) and ([L].[ContractFinish] = 0) ) and @ContractState = 1
   					)
   					)
   				or @ContractState = 2
   			)
   
 
   		and ([L].[RentInfoGuid] = @RentInfoGuid or @RentInfoGuid = 0x0)
   		and ([L].[SalesManGuid] = @SalesManGuid or @SalesManGuid = 0x0)
   		and ([Sales].[LandGuid] is null)
   		and ([L].[Rent] Between @Rent1 and @Rent2 or @Rent2 = 0)
   		and 
   			(
   				
   				Case  when (@OperationNote = 0) and ([A].[Details] Like @RealtyNote) then 1
    					  when (@OperationNote = 1) and ([A].[Details] Not Like @RealtyNote) then 1
   					  when (@OperationNote = 2) and ([A].[Details] = @RealtyNote) then 1
   				else 
   					0 end = 1
   					
   				or @ActiveNote = 0
   			)
   
   		and 
   			(
   				Case  when (@ContractOpNote = 0) and ([L].[Note2] Like @ContractNote) then 1
    					  when (@ContractOpNote = 1) and ([L].[Note2] Not Like @ContractNote) then 1
   					  when (@ContractOpNote = 2) and ([L].[Note2] = @ContractNote) then 1
   				else 
   					0 end = 1
   
   				or @ContractActiveNote = 0
  			)


	Select 
		*,
		Case when [R].[ObjGuid] is null then 0 
			 when [R].[ObjGuid] is not null  then 1 end as [Check]
	into #EndRes
	From
		@Tbl [L]
		left join [RepCheck] [R] on [R].[ObjGuid] = [L].[FlatGuid] and [R].[IdReport] = 5002
	where
		([R].[ObjGuid] is not null and @ShowIsCheck = 1)
		or
		([R].[ObjGuid] is null and @ShowIsNotCheck = 1)
	Order By 
		[VillaNo]


	Select 
		* 
	from 
		#EndRes
	Order By 
		[VillaNo]

	Select 
		(Select Count(*) From @Tbl where [State] = dbo.sc('ãÄÌÑÉ')) as [StateRent],
		(Select Count(*) From @Tbl where [State] = dbo.sc('ÛíÑ ãÄÌÑÉ')) as [StateNotRent],
		(Select Sum([Rent]) From @Tbl ) as [Rent],
		(Select Sum([RentAfterDiscount]) From @Tbl ) as [RentAfterDiscount]


GO
/****** Object:  StoredProcedure [dbo].[RepVillaSales]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[RepVillaSales]
(
    @CustGuid uniqueidentifier = 0x0,
    @VillaNo Varchar(256) = '',
    @ComplexName Varchar(256) = '',
    @City Varchar(256) = '',
    @Region Varchar(256) = '',
    @Space Varchar(256) = '',
    @license Varchar(256) = '',
    @FlatArea1 Float = 0,
    @FlatArea2 Float = 0,
    @Date1 Datetime = '1/1/2010',
    @Date2 Datetime = '1/1/2011',
    @SalesManGuid uniqueidentifier = 0x0,
    @ShowIsCheck Bit = 1,
    @ShowIsNotCheck Bit = 1,
    @CheckDate Bit = 1,
    @ActiveNote Bit = 1,
    @OperationNote Varchar(256) = '',
    @RealtyNote Varchar(256) = '',
    @ContractActiveNote bit = 0,
    @ContractOpNote Varchar(256) = '',
    @ContractNote Varchar(256) = '',
    @SalesState int = 0
)
  
as
	
	Set NoCount On 
	--ãÚÇáÌÉ ÈíÇä ÇáÚÞÇÑ
	if @OperationNote <> 2 --íÍæí
	Set @RealtyNote = '%'+@RealtyNote+'%'
	
	--ãÚÇáÌÉ ÈíÇä ÇáÚÞÏ
	if @ContractOpNote <> 2 --íÍæí
	Set @ContractNote = '%'+@ContractNote+'%'

	Declare @Tbl Table
	(
		[VillaNo] Varchar(256)
		,[ComplexName] Varchar(256)
		,[City] Varchar(256)
		,[Region] Varchar(256)
		,[Space] Varchar(256)
		,[license] Varchar(256)
		,[Area]  Float
		,[State]  Varchar(256)
		,[CustName] Varchar(256)
		,[CustPhone] Varchar(256)
		,[ContractDateBegin] Datetime
		,[ContractValue] Float
		,[VillaNote] Varchar(1000)
		,[ContractNote] Varchar(1000)
		,[ContractGuid] uniqueidentifier
		,[VillaGuid] uniqueidentifier
	)
	
	insert Into @Tbl
	Select 
		[A].[Name] as [LandName]
		,[A].[ComplexName]
		,[A].[Emirate]
		,[A].[Area]
		,[A].[BasinNo]
		,[A].[DocType]
		,[A].[Area]
		,Case when [L].[Guid] is null then dbo.sc('ÛíÑ ãÈÇÚÉ') else dbo.sc('ãÈÇÚÉ') end as [State]
		,[Cu].[Name] as [CustName]
		,[Cu].[Mobile] as [CustPhone]
		,[L].[FromDate] as [ContractDateBegin]
		,([L].[Rent] - [L].[DiscountValue]) * [L].[CurrencyVal] as [ContractValue]
		,[A].[Details] as [Note]
		,[L].[Note2]
		,[L].[Guid] as [ContractGuid]
		,[A].[Guid]
	from 
		[vwVilla] [A]
		left join [vwLandContract] [L] On [A].[Guid] = [L].[LandGuid] and [ContractKind]  = 8
		left join [vwCustomer] [Cu] on [Cu].[Guid] = [L].[CustomerGuid] 
 	where
 		([Cu].[Guid] = @CustGuid or @CustGuid = 0x0)
		and (
				([L].[Guid] is not null and @SalesState = 0)
				or ([L].[Guid] is null and @SalesState = 1)
				or @SalesState = 2
			)
		and 
			(
				([L].[FromDate] between @Date1 and @Date2)
				or @SalesState <> 0
			)

		and ([L].[SalesManGuid] = @SalesManGuid or @SalesManGuid = 0x0)

		and ([A].[Name] Like '%'+@VillaNo+'%')
		and ([A].[Emirate] Like '%'+@City+'%')
		and ([A].[Area] Like '%'+@Region+'%')
		and ([A].[BasinNo] Like '%'+@Space+'%')
		and ([A].[DocType] Like '%'+@license+'%')

   		and ([A].[Area] between @FlatArea1 and @FlatArea2 or @FlatArea2 = 0) 
   		and 
   			(
   				
   				Case  when (@OperationNote = 0) and ([A].[Details] Like @RealtyNote) then 1
    					  when (@OperationNote = 1) and ([A].[Details] Not Like @RealtyNote) then 1
   					  when (@OperationNote = 2) and ([A].[Details] = @RealtyNote) then 1
   				else 
   					0 end = 1
   					
   				or @ActiveNote = 0
   			)
   
   		and 
   			(
   				Case  when (@ContractOpNote = 0) and ([L].[Note2] Like @ContractNote) then 1
    					  when (@ContractOpNote = 1) and ([L].[Note2] Not Like @ContractNote) then 1
   					  when (@ContractOpNote = 2) and ([L].[Note2] = @ContractNote) then 1
   				else 
   					0 end = 1
   
   				or @ContractActiveNote = 0
  			)


	-- ÇáÔíßÇÊ
	Select
		[P].[ContractGuid],
		Sum(IsNull([C1].[Value] * [C1].[CurrencyVal],0)) as [Collection]
--		+  IsNull([pc].[Value] * [pc].[CurrencyVal],0)) 
	Into #Collection
	From
		[vwChecks] [P]
		left join [vwChecksCollection] [C1] on [C1].[CheckGuid] = [P].[Guid] and [C1].[Kind] = 1
--		left join [ChecksPartialCollection] [pc] on [pc].[CheckGuid] = [P].[Guid]
		inner join @Tbl [t] on [t].[ContractGuid] = [P].[ContractGuid]
	Group By
		[P].[ContractGuid]

	-- ÇáÊÞÏí
	Select
		[P].[ContractGuid],
		Sum(IsNull([P].[Value] * [P].[CurrencyVal],0)) as [Cash]
	Into #Cash
	From
		[vwContractCachPayment] [P]
		inner join @Tbl [t] on [t].[ContractGuid] = [P].[ContractGuid]
	Group By
		[P].[ContractGuid]

	Select 
		[T].*,
		[C].[Collection],
		[h].[Cash],
		IsNull([C].[Collection],0) + IsNull([h].[Cash],0) as [TotalPays],
		[ContractValue] - IsNull([C].[Collection],0) - IsNull([h].[Cash],0) as [ContractRest]
	Into #EndTbl
	From
		@Tbl [t] 
		left join #Collection [C] on [t].[ContractGuid] = [C].[ContractGuid]
		left join #Cash [h] on [t].[ContractGuid] = [h].[ContractGuid]
	Order By 
		[VillaNo]

	Select 
		*,
		Case when [R].[ObjGuid] is null then 0 
			 when [R].[ObjGuid] is not null  then 1 end as [Check]
	into #EndRes
	From
		#EndTbl [L]
		left join [RepCheck] [R] on [R].[ObjGuid] = [L].[VillaGuid] and [R].[IdReport] = 5004
	where
		([R].[ObjGuid] is not null and @ShowIsCheck = 1)
		or
		([R].[ObjGuid] is null and @ShowIsNotCheck = 1)
	Order By 
		[VillaNo]


	Select 
		* 
	from 
		#EndRes
	Order By 
		[VillaNo]


GO
/****** Object:  StoredProcedure [dbo].[SetLangauge]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[SetLangauge]
(
	@Lang  int = 0
) 
  
as
	Delete [TblLangauge]
	where 
		Spid = @@Spid
	
	Insert Into [TblLangauge]
	(
		Spid,
		Lang
	)
	Select
		@@Spid
		,@Lang	


GO
/****** Object:  StoredProcedure [dbo].[TestFnStrToAscii]    Script Date: 12/27/2022 11:46:38 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create Procedure [dbo].[TestFnStrToAscii](@Str  Varchar(256))
as
	Declare @R Varchar(256)
	Set @R = ''
	Declare @I int

	Set @I = 0
	while @I < Len(@Str)
	begin
		Set @R = @R + Cast(
						(
							Ascii(SUBSTRING (@Str, @I+1, 1))
						)
						as Varchar(5))

		Set @I = @I + 1

	end

	Select @R


GO
EXEC [MatiEstate].sys.sp_addextendedproperty @name=N'RealtyRealtyVersion', @value=N'3.180' 
GO
EXEC [MatiEstate].sys.sp_addextendedproperty @name=N'RealtyDbName', @value=N'????? ??????' 
GO
EXEC [MatiEstate].sys.sp_addextendedproperty @name=N'RealtyDbEnName', @value=N'Company Name' 
GO
USE [master]
GO
ALTER DATABASE [MatiEstate] SET  READ_WRITE 
GO
